QUnit.test('porter', function(){
	var Stem = snowballFactory.newStemmer('porter').stem;
	deepEqual( Stem("a"), "a" );
	deepEqual( Stem("aaron"), "aaron" );
	deepEqual( Stem("aback"), "aback" );
	deepEqual( Stem("abaissiez"), "abaissiez" );
	deepEqual( Stem("abandon"), "abandon" );
	deepEqual( Stem("abandoned"), "abandon" );
	deepEqual( Stem("abase"), "abas" );
	deepEqual( Stem("abash"), "abash" );
	deepEqual( Stem("abashed"), "abash" );
	deepEqual( Stem("abate"), "abat" );
	deepEqual( Stem("abated"), "abat" );
	deepEqual( Stem("abatement"), "abat" );
	deepEqual( Stem("abatements"), "abat" );
	deepEqual( Stem("abates"), "abat" );
	deepEqual( Stem("abattement"), "abatt" );
	deepEqual( Stem("abbe"), "abb" );
	deepEqual( Stem("abbess"), "abbess" );
	deepEqual( Stem("abbey"), "abbei" );
	deepEqual( Stem("abbeys"), "abbei" );
	deepEqual( Stem("abbominable"), "abbomin" );
	deepEqual( Stem("abbot"), "abbot" );
	deepEqual( Stem("abbots"), "abbot" );
	deepEqual( Stem("abbreviated"), "abbrevi" );
	deepEqual( Stem("abdication"), "abdic" );
	deepEqual( Stem("abduction"), "abduct" );
	deepEqual( Stem("abed"), "ab" );
	deepEqual( Stem("abel"), "abel" );
	deepEqual( Stem("aberga"), "aberga" );
	deepEqual( Stem("abergavenny"), "abergavenni" );
	deepEqual( Stem("abet"), "abet" );
	deepEqual( Stem("abetting"), "abet" );
	deepEqual( Stem("abhominable"), "abhomin" );
	deepEqual( Stem("abhor"), "abhor" );
	deepEqual( Stem("abhorr"), "abhorr" );
	deepEqual( Stem("abhorred"), "abhor" );
	deepEqual( Stem("abhorrence"), "abhorr" );
	deepEqual( Stem("abhorring"), "abhor" );
	deepEqual( Stem("abhors"), "abhor" );
	deepEqual( Stem("abhorson"), "abhorson" );
	deepEqual( Stem("abide"), "abid" );
	deepEqual( Stem("abides"), "abid" );
	deepEqual( Stem("abilities"), "abil" );
	deepEqual( Stem("ability"), "abil" );
	deepEqual( Stem("abingdon"), "abingdon" );
	deepEqual( Stem("abject"), "abject" );
	deepEqual( Stem("abjectly"), "abjectli" );
	deepEqual( Stem("abjects"), "abject" );
	deepEqual( Stem("abjur"), "abjur" );
	deepEqual( Stem("abjure"), "abjur" );
	deepEqual( Stem("able"), "abl" );
	deepEqual( Stem("abler"), "abler" );
	deepEqual( Stem("ablest"), "ablest" );
	deepEqual( Stem("aboard"), "aboard" );
	deepEqual( Stem("abode"), "abod" );
	deepEqual( Stem("aboded"), "abod" );
	deepEqual( Stem("abodements"), "abod" );
	deepEqual( Stem("abodes"), "abod" );
	deepEqual( Stem("aboding"), "abod" );
	deepEqual( Stem("abolished"), "abolish" );
	deepEqual( Stem("abominable"), "abomin" );
	deepEqual( Stem("abominably"), "abomin" );
	deepEqual( Stem("abominates"), "abomin" );
	deepEqual( Stem("abominations"), "abomin" );
	deepEqual( Stem("abortive"), "abort" );
	deepEqual( Stem("abortives"), "abort" );
	deepEqual( Stem("abound"), "abound" );
	deepEqual( Stem("abounded"), "abound" );
	deepEqual( Stem("abounding"), "abound" );
	deepEqual( Stem("about"), "about" );
	deepEqual( Stem("above"), "abov" );
	deepEqual( Stem("abr"), "abr" );
	deepEqual( Stem("abraham"), "abraham" );
	deepEqual( Stem("abram"), "abram" );
	deepEqual( Stem("abreast"), "abreast" );
	deepEqual( Stem("abridg"), "abridg" );
	deepEqual( Stem("abridge"), "abridg" );
	deepEqual( Stem("abridged"), "abridg" );
	deepEqual( Stem("abridgment"), "abridg" );
	deepEqual( Stem("abroach"), "abroach" );
	deepEqual( Stem("abroad"), "abroad" );
	deepEqual( Stem("abrogate"), "abrog" );
	deepEqual( Stem("abrook"), "abrook" );
	deepEqual( Stem("abrupt"), "abrupt" );
	deepEqual( Stem("abruption"), "abrupt" );
	deepEqual( Stem("abruptly"), "abruptli" );
	deepEqual( Stem("absence"), "absenc" );
	deepEqual( Stem("absences"), "absenc" );
	deepEqual( Stem("absent"), "absent" );
	deepEqual( Stem("absey"), "absei" );
	deepEqual( Stem("absolom"), "absolom" );
	deepEqual( Stem("absolute"), "absolut" );
	deepEqual( Stem("absolutely"), "absolut" );
	deepEqual( Stem("absolv"), "absolv" );
	deepEqual( Stem("absolve"), "absolv" );
	deepEqual( Stem("absolver"), "absolv" );
	deepEqual( Stem("absorbed"), "absorb" );
	deepEqual( Stem("absorbing"), "absorb" );
	deepEqual( Stem("abstains"), "abstain" );
	deepEqual( Stem("abstemious"), "abstemi" );
	deepEqual( Stem("abstinence"), "abstin" );
	deepEqual( Stem("abstract"), "abstract" );
	deepEqual( Stem("abstruse"), "abstrus" );
	deepEqual( Stem("absurd"), "absurd" );
	deepEqual( Stem("absurdity"), "absurd" );
	deepEqual( Stem("absurdly"), "absurdli" );
	deepEqual( Stem("absyrtus"), "absyrtu" );
	deepEqual( Stem("abundance"), "abund" );
	deepEqual( Stem("abundant"), "abund" );
	deepEqual( Stem("abundantly"), "abundantli" );
	deepEqual( Stem("abus"), "abu" );
	deepEqual( Stem("abuse"), "abus" );
	deepEqual( Stem("abused"), "abus" );
	deepEqual( Stem("abuser"), "abus" );
	deepEqual( Stem("abuses"), "abus" );
	deepEqual( Stem("abusing"), "abus" );
	deepEqual( Stem("abutting"), "abut" );
	deepEqual( Stem("aby"), "abi" );
	deepEqual( Stem("abysm"), "abysm" );
	deepEqual( Stem("ac"), "ac" );
	deepEqual( Stem("academe"), "academ" );
	deepEqual( Stem("academes"), "academ" );
	deepEqual( Stem("academies"), "academi" );
	deepEqual( Stem("academy"), "academi" );
	deepEqual( Stem("accadent"), "accad" );
	deepEqual( Stem("acceded"), "acced" );
	deepEqual( Stem("accent"), "accent" );
	deepEqual( Stem("accents"), "accent" );
	deepEqual( Stem("accept"), "accept" );
	deepEqual( Stem("acceptable"), "accept" );
	deepEqual( Stem("acceptance"), "accept" );
	deepEqual( Stem("accepted"), "accept" );
	deepEqual( Stem("accepting"), "accept" );
	deepEqual( Stem("accepts"), "accept" );
	deepEqual( Stem("access"), "access" );
	deepEqual( Stem("accessary"), "accessari" );
	deepEqual( Stem("accessible"), "access" );
	deepEqual( Stem("accidence"), "accid" );
	deepEqual( Stem("accident"), "accid" );
	deepEqual( Stem("accidental"), "accident" );
	deepEqual( Stem("accidentally"), "accident" );
	deepEqual( Stem("accidents"), "accid" );
	deepEqual( Stem("accite"), "accit" );
	deepEqual( Stem("accited"), "accit" );
	deepEqual( Stem("accites"), "accit" );
	deepEqual( Stem("acclaim"), "acclaim" );
	deepEqual( Stem("acclamation"), "acclam" );
	deepEqual( Stem("acclamations"), "acclam" );
	deepEqual( Stem("accommodate"), "accommod" );
	deepEqual( Stem("accommodated"), "accommod" );
	deepEqual( Stem("accommodation"), "accommod" );
	deepEqual( Stem("accommodations"), "accommod" );
	deepEqual( Stem("accommodo"), "accommodo" );
	deepEqual( Stem("accompanied"), "accompani" );
	deepEqual( Stem("accompanies"), "accompani" );
	deepEqual( Stem("accompany"), "accompani" );
	deepEqual( Stem("accompanying"), "accompani" );
	deepEqual( Stem("accomplice"), "accomplic" );
	deepEqual( Stem("accomplices"), "accomplic" );
	deepEqual( Stem("accomplish"), "accomplish" );
	deepEqual( Stem("accomplished"), "accomplish" );
	deepEqual( Stem("accomplishing"), "accomplish" );
	deepEqual( Stem("accomplishment"), "accomplish" );
	deepEqual( Stem("accomplishments"), "accomplish" );
	deepEqual( Stem("accompt"), "accompt" );
	deepEqual( Stem("accord"), "accord" );
	deepEqual( Stem("accordant"), "accord" );
	deepEqual( Stem("accorded"), "accord" );
	deepEqual( Stem("accordeth"), "accordeth" );
	deepEqual( Stem("according"), "accord" );
	deepEqual( Stem("accordingly"), "accordingli" );
	deepEqual( Stem("accords"), "accord" );
	deepEqual( Stem("accost"), "accost" );
	deepEqual( Stem("accosted"), "accost" );
	deepEqual( Stem("account"), "account" );
	deepEqual( Stem("accountant"), "account" );
	deepEqual( Stem("accounted"), "account" );
	deepEqual( Stem("accounts"), "account" );
	deepEqual( Stem("accoutred"), "accoutr" );
	deepEqual( Stem("accoutrement"), "accoutr" );
	deepEqual( Stem("accoutrements"), "accoutr" );
	deepEqual( Stem("accredited"), "accredit" );
	deepEqual( Stem("accrue"), "accru" );
	deepEqual( Stem("accruing"), "accru" );
	deepEqual( Stem("accumulate"), "accumul" );
	deepEqual( Stem("accumulated"), "accumul" );
	deepEqual( Stem("accumulation"), "accumul" );
	deepEqual( Stem("accuracy"), "accuraci" );
	deepEqual( Stem("accurate"), "accur" );
	deepEqual( Stem("accurately"), "accur" );
	deepEqual( Stem("accurs"), "accur" );
	deepEqual( Stem("accursed"), "accurs" );
	deepEqual( Stem("accurst"), "accurst" );
	deepEqual( Stem("accus"), "accu" );
	deepEqual( Stem("accusation"), "accus" );
	deepEqual( Stem("accusations"), "accus" );
	deepEqual( Stem("accusative"), "accus" );
	deepEqual( Stem("accusativo"), "accusativo" );
	deepEqual( Stem("accuse"), "accus" );
	deepEqual( Stem("accused"), "accus" );
	deepEqual( Stem("accuser"), "accus" );
	deepEqual( Stem("accusers"), "accus" );
	deepEqual( Stem("accuses"), "accus" );
	deepEqual( Stem("accuseth"), "accuseth" );
	deepEqual( Stem("accusing"), "accus" );
	deepEqual( Stem("accustom"), "accustom" );
	deepEqual( Stem("accustomed"), "accustom" );
	deepEqual( Stem("ace"), "ac" );
	deepEqual( Stem("acerb"), "acerb" );
	deepEqual( Stem("achaiois"), "achaioi" );
	deepEqual( Stem("ache"), "ach" );
	deepEqual( Stem("acheron"), "acheron" );
	deepEqual( Stem("aches"), "ach" );
	deepEqual( Stem("acheul"), "acheul" );
	deepEqual( Stem("achiev"), "achiev" );
	deepEqual( Stem("achieve"), "achiev" );
	deepEqual( Stem("achieved"), "achiev" );
	deepEqual( Stem("achievement"), "achiev" );
	deepEqual( Stem("achievements"), "achiev" );
	deepEqual( Stem("achiever"), "achiev" );
	deepEqual( Stem("achieves"), "achiev" );
	deepEqual( Stem("achieving"), "achiev" );
	deepEqual( Stem("achilles"), "achil" );
	deepEqual( Stem("aching"), "ach" );
	deepEqual( Stem("achitophel"), "achitophel" );
	deepEqual( Stem("acid"), "acid" );
	deepEqual( Stem("ackney"), "acknei" );
	deepEqual( Stem("acknowledg"), "acknowledg" );
	deepEqual( Stem("acknowledge"), "acknowledg" );
	deepEqual( Stem("acknowledged"), "acknowledg" );
	deepEqual( Stem("acknowledgement"), "acknowledg" );
	deepEqual( Stem("acknowledging"), "acknowledg" );
	deepEqual( Stem("acknowledgment"), "acknowledg" );
	deepEqual( Stem("acknown"), "acknown" );
	deepEqual( Stem("acold"), "acold" );
	deepEqual( Stem("aconitum"), "aconitum" );
	deepEqual( Stem("acordo"), "acordo" );
	deepEqual( Stem("acorn"), "acorn" );
	deepEqual( Stem("acquaint"), "acquaint" );
	deepEqual( Stem("acquaintance"), "acquaint" );
	deepEqual( Stem("acquaintances"), "acquaint" );
	deepEqual( Stem("acquaintanceship"), "acquaintanceship" );
	deepEqual( Stem("acquainted"), "acquaint" );
	deepEqual( Stem("acquainting"), "acquaint" );
	deepEqual( Stem("acquaints"), "acquaint" );
	deepEqual( Stem("acquiesce"), "acquiesc" );
	deepEqual( Stem("acquiesced"), "acquiesc" );
	deepEqual( Stem("acquiescence"), "acquiesc" );
	deepEqual( Stem("acquir"), "acquir" );
	deepEqual( Stem("acquire"), "acquir" );
	deepEqual( Stem("acquired"), "acquir" );
	deepEqual( Stem("acquirement"), "acquir" );
	deepEqual( Stem("acquirements"), "acquir" );
	deepEqual( Stem("acquiring"), "acquir" );
	deepEqual( Stem("acquisition"), "acquisit" );
	deepEqual( Stem("acquisitions"), "acquisit" );
	deepEqual( Stem("acquit"), "acquit" );
	deepEqual( Stem("acquittance"), "acquitt" );
	deepEqual( Stem("acquittances"), "acquitt" );
	deepEqual( Stem("acquitted"), "acquit" );
	deepEqual( Stem("acre"), "acr" );
	deepEqual( Stem("acres"), "acr" );
	deepEqual( Stem("across"), "across" );
	deepEqual( Stem("act"), "act" );
	deepEqual( Stem("actaeon"), "actaeon" );
	deepEqual( Stem("acted"), "act" );
	deepEqual( Stem("acting"), "act" );
	deepEqual( Stem("action"), "action" );
	deepEqual( Stem("actions"), "action" );
	deepEqual( Stem("actium"), "actium" );
	deepEqual( Stem("active"), "activ" );
	deepEqual( Stem("actively"), "activ" );
	deepEqual( Stem("activity"), "activ" );
	deepEqual( Stem("actor"), "actor" );
	deepEqual( Stem("actors"), "actor" );
	deepEqual( Stem("actress"), "actress" );
	deepEqual( Stem("acts"), "act" );
	deepEqual( Stem("actual"), "actual" );
	deepEqual( Stem("actually"), "actual" );
	deepEqual( Stem("acture"), "actur" );
	deepEqual( Stem("acute"), "acut" );
	deepEqual( Stem("acutely"), "acut" );
	deepEqual( Stem("ad"), "ad" );
	deepEqual( Stem("adage"), "adag" );
	deepEqual( Stem("adallas"), "adalla" );
	deepEqual( Stem("adam"), "adam" );
	deepEqual( Stem("adamant"), "adam" );
	deepEqual( Stem("adamson"), "adamson" );
	deepEqual( Stem("add"), "add" );
	deepEqual( Stem("added"), "ad" );
	deepEqual( Stem("adder"), "adder" );
	deepEqual( Stem("adders"), "adder" );
	deepEqual( Stem("addeth"), "addeth" );
	deepEqual( Stem("addict"), "addict" );
	deepEqual( Stem("addicted"), "addict" );
	deepEqual( Stem("addiction"), "addict" );
	deepEqual( Stem("adding"), "ad" );
	deepEqual( Stem("addington"), "addington" );
	deepEqual( Stem("addison"), "addison" );
	deepEqual( Stem("addition"), "addit" );
	deepEqual( Stem("additional"), "addit" );
	deepEqual( Stem("additions"), "addit" );
	deepEqual( Stem("addle"), "addl" );
	deepEqual( Stem("address"), "address" );
	deepEqual( Stem("addressed"), "address" );
	deepEqual( Stem("addresses"), "address" );
	deepEqual( Stem("addressing"), "address" );
	deepEqual( Stem("addrest"), "addrest" );
	deepEqual( Stem("adds"), "add" );
	deepEqual( Stem("adelaide"), "adelaid" );
	deepEqual( Stem("adept"), "adept" );
	deepEqual( Stem("adhere"), "adher" );
	deepEqual( Stem("adhered"), "adher" );
	deepEqual( Stem("adheres"), "adher" );
	deepEqual( Stem("adieu"), "adieu" );
	deepEqual( Stem("adieus"), "adieu" );
	deepEqual( Stem("adieux"), "adieux" );
	deepEqual( Stem("adjacent"), "adjac" );
	deepEqual( Stem("adjoin"), "adjoin" );
	deepEqual( Stem("adjoining"), "adjoin" );
	deepEqual( Stem("adjourn"), "adjourn" );
	deepEqual( Stem("adjourning"), "adjourn" );
	deepEqual( Stem("adjudg"), "adjudg" );
	deepEqual( Stem("adjudged"), "adjudg" );
	deepEqual( Stem("adjunct"), "adjunct" );
	deepEqual( Stem("adjured"), "adjur" );
	deepEqual( Stem("adjustment"), "adjust" );
	deepEqual( Stem("administer"), "administ" );
	deepEqual( Stem("administered"), "administ" );
	deepEqual( Stem("administering"), "administ" );
	deepEqual( Stem("administration"), "administr" );
	deepEqual( Stem("administrative"), "administr" );
	deepEqual( Stem("administratrix"), "administratrix" );
	deepEqual( Stem("admir"), "admir" );
	deepEqual( Stem("admirable"), "admir" );
	deepEqual( Stem("admirably"), "admir" );
	deepEqual( Stem("admiral"), "admir" );
	deepEqual( Stem("admiration"), "admir" );
	deepEqual( Stem("admire"), "admir" );
	deepEqual( Stem("admired"), "admir" );
	deepEqual( Stem("admirer"), "admir" );
	deepEqual( Stem("admirers"), "admir" );
	deepEqual( Stem("admires"), "admir" );
	deepEqual( Stem("admiring"), "admir" );
	deepEqual( Stem("admiringly"), "admiringli" );
	deepEqual( Stem("admission"), "admiss" );
	deepEqual( Stem("admissions"), "admiss" );
	deepEqual( Stem("admit"), "admit" );
	deepEqual( Stem("admits"), "admit" );
	deepEqual( Stem("admittance"), "admitt" );
	deepEqual( Stem("admitted"), "admit" );
	deepEqual( Stem("admitting"), "admit" );
	deepEqual( Stem("admonish"), "admonish" );
	deepEqual( Stem("admonishing"), "admonish" );
	deepEqual( Stem("admonishment"), "admonish" );
	deepEqual( Stem("admonishments"), "admonish" );
	deepEqual( Stem("admonition"), "admonit" );
	deepEqual( Stem("ado"), "ado" );
	deepEqual( Stem("adonis"), "adoni" );
	deepEqual( Stem("adopt"), "adopt" );
	deepEqual( Stem("adopted"), "adopt" );
	deepEqual( Stem("adoptedly"), "adoptedli" );
	deepEqual( Stem("adopting"), "adopt" );
	deepEqual( Stem("adoption"), "adopt" );
	deepEqual( Stem("adoptious"), "adopti" );
	deepEqual( Stem("adopts"), "adopt" );
	deepEqual( Stem("ador"), "ador" );
	deepEqual( Stem("adorable"), "ador" );
	deepEqual( Stem("adoration"), "ador" );
	deepEqual( Stem("adorations"), "ador" );
	deepEqual( Stem("adore"), "ador" );
	deepEqual( Stem("adored"), "ador" );
	deepEqual( Stem("adorer"), "ador" );
	deepEqual( Stem("adores"), "ador" );
	deepEqual( Stem("adorest"), "adorest" );
	deepEqual( Stem("adoreth"), "adoreth" );
	deepEqual( Stem("adoring"), "ador" );
	deepEqual( Stem("adorn"), "adorn" );
	deepEqual( Stem("adorned"), "adorn" );
	deepEqual( Stem("adornings"), "adorn" );
	deepEqual( Stem("adornment"), "adorn" );
	deepEqual( Stem("adorns"), "adorn" );
	deepEqual( Stem("adown"), "adown" );
	deepEqual( Stem("adramadio"), "adramadio" );
	deepEqual( Stem("adrian"), "adrian" );
	deepEqual( Stem("adriana"), "adriana" );
	deepEqual( Stem("adriano"), "adriano" );
	deepEqual( Stem("adriatic"), "adriat" );
	deepEqual( Stem("adriving"), "adriv" );
	deepEqual( Stem("adroit"), "adroit" );
	deepEqual( Stem("adroitly"), "adroitli" );
	deepEqual( Stem("adsum"), "adsum" );
	deepEqual( Stem("adulation"), "adul" );
	deepEqual( Stem("adulterate"), "adulter" );
	deepEqual( Stem("adulterates"), "adulter" );
	deepEqual( Stem("adulterers"), "adulter" );
	deepEqual( Stem("adulteress"), "adulteress" );
	deepEqual( Stem("adulteries"), "adulteri" );
	deepEqual( Stem("adulterous"), "adulter" );
	deepEqual( Stem("adultery"), "adulteri" );
	deepEqual( Stem("adultress"), "adultress" );
	deepEqual( Stem("advanc"), "advanc" );
	deepEqual( Stem("advance"), "advanc" );
	deepEqual( Stem("advanced"), "advanc" );
	deepEqual( Stem("advancement"), "advanc" );
	deepEqual( Stem("advancements"), "advanc" );
	deepEqual( Stem("advances"), "advanc" );
	deepEqual( Stem("advancing"), "advanc" );
	deepEqual( Stem("advantage"), "advantag" );
	deepEqual( Stem("advantageable"), "advantag" );
	deepEqual( Stem("advantaged"), "advantag" );
	deepEqual( Stem("advantageous"), "advantag" );
	deepEqual( Stem("advantageously"), "advantag" );
	deepEqual( Stem("advantages"), "advantag" );
	deepEqual( Stem("advantaging"), "advantag" );
	deepEqual( Stem("advent"), "advent" );
	deepEqual( Stem("adventur"), "adventur" );
	deepEqual( Stem("adventure"), "adventur" );
	deepEqual( Stem("adventurer"), "adventur" );
	deepEqual( Stem("adventurers"), "adventur" );
	deepEqual( Stem("adventures"), "adventur" );
	deepEqual( Stem("adventuress"), "adventuress" );
	deepEqual( Stem("adventuring"), "adventur" );
	deepEqual( Stem("adventurous"), "adventur" );
	deepEqual( Stem("adventurously"), "adventur" );
	deepEqual( Stem("adversaries"), "adversari" );
	deepEqual( Stem("adversary"), "adversari" );
	deepEqual( Stem("adverse"), "advers" );
	deepEqual( Stem("adversely"), "advers" );
	deepEqual( Stem("adversities"), "advers" );
	deepEqual( Stem("adversity"), "advers" );
	deepEqual( Stem("advertis"), "adverti" );
	deepEqual( Stem("advertise"), "advertis" );
	deepEqual( Stem("advertised"), "advertis" );
	deepEqual( Stem("advertisement"), "advertis" );
	deepEqual( Stem("advertising"), "advertis" );
	deepEqual( Stem("advice"), "advic" );
	deepEqual( Stem("advis"), "advi" );
	deepEqual( Stem("advisable"), "advis" );
	deepEqual( Stem("advise"), "advis" );
	deepEqual( Stem("advised"), "advis" );
	deepEqual( Stem("advisedly"), "advisedli" );
	deepEqual( Stem("adviser"), "advis" );
	deepEqual( Stem("advises"), "advis" );
	deepEqual( Stem("advisings"), "advis" );
	deepEqual( Stem("advocacy"), "advocaci" );
	deepEqual( Stem("advocate"), "advoc" );
	deepEqual( Stem("advocation"), "advoc" );
	deepEqual( Stem("aeacida"), "aeacida" );
	deepEqual( Stem("aeacides"), "aeacid" );
	deepEqual( Stem("aedile"), "aedil" );
	deepEqual( Stem("aediles"), "aedil" );
	deepEqual( Stem("aegeon"), "aegeon" );
	deepEqual( Stem("aegion"), "aegion" );
	deepEqual( Stem("aegisthus"), "aegisthu" );
	deepEqual( Stem("aegles"), "aegl" );
	deepEqual( Stem("aemelia"), "aemelia" );
	deepEqual( Stem("aemilia"), "aemilia" );
	deepEqual( Stem("aemilius"), "aemiliu" );
	deepEqual( Stem("aeneas"), "aenea" );
	deepEqual( Stem("aeolus"), "aeolu" );
	deepEqual( Stem("aequor"), "aequor" );
	deepEqual( Stem("aer"), "aer" );
	deepEqual( Stem("aerial"), "aerial" );
	deepEqual( Stem("aery"), "aeri" );
	deepEqual( Stem("aesculapius"), "aesculapiu" );
	deepEqual( Stem("aeson"), "aeson" );
	deepEqual( Stem("aesop"), "aesop" );
	deepEqual( Stem("aetna"), "aetna" );
	deepEqual( Stem("afar"), "afar" );
	deepEqual( Stem("afear"), "afear" );
	deepEqual( Stem("afeard"), "afeard" );
	deepEqual( Stem("affability"), "affabl" );
	deepEqual( Stem("affable"), "affabl" );
	deepEqual( Stem("affair"), "affair" );
	deepEqual( Stem("affaire"), "affair" );
	deepEqual( Stem("affaires"), "affair" );
	deepEqual( Stem("affairs"), "affair" );
	deepEqual( Stem("affect"), "affect" );
	deepEqual( Stem("affectation"), "affect" );
	deepEqual( Stem("affectations"), "affect" );
	deepEqual( Stem("affected"), "affect" );
	deepEqual( Stem("affectedly"), "affectedli" );
	deepEqual( Stem("affecteth"), "affecteth" );
	deepEqual( Stem("affecting"), "affect" );
	deepEqual( Stem("affection"), "affect" );
	deepEqual( Stem("affectionate"), "affection" );
	deepEqual( Stem("affectionately"), "affection" );
	deepEqual( Stem("affections"), "affect" );
	deepEqual( Stem("affects"), "affect" );
	deepEqual( Stem("affeer"), "affeer" );
	deepEqual( Stem("affianc"), "affianc" );
	deepEqual( Stem("affiance"), "affianc" );
	deepEqual( Stem("affianced"), "affianc" );
	deepEqual( Stem("affidavit"), "affidavit" );
	deepEqual( Stem("affied"), "affi" );
	deepEqual( Stem("affin"), "affin" );
	deepEqual( Stem("affined"), "affin" );
	deepEqual( Stem("affinity"), "affin" );
	deepEqual( Stem("affirm"), "affirm" );
	deepEqual( Stem("affirmation"), "affirm" );
	deepEqual( Stem("affirmatives"), "affirm" );
	deepEqual( Stem("afflict"), "afflict" );
	deepEqual( Stem("afflicted"), "afflict" );
	deepEqual( Stem("affliction"), "afflict" );
	deepEqual( Stem("afflictions"), "afflict" );
	deepEqual( Stem("afflicts"), "afflict" );
	deepEqual( Stem("afford"), "afford" );
	deepEqual( Stem("afforded"), "afford" );
	deepEqual( Stem("affordeth"), "affordeth" );
	deepEqual( Stem("affords"), "afford" );
	deepEqual( Stem("affray"), "affrai" );
	deepEqual( Stem("affreusement"), "affreus" );
	deepEqual( Stem("affright"), "affright" );
	deepEqual( Stem("affrighted"), "affright" );
	deepEqual( Stem("affrights"), "affright" );
	deepEqual( Stem("affront"), "affront" );
	deepEqual( Stem("affronted"), "affront" );
	deepEqual( Stem("affy"), "affi" );
	deepEqual( Stem("afield"), "afield" );
	deepEqual( Stem("afire"), "afir" );
	deepEqual( Stem("afloat"), "afloat" );
	deepEqual( Stem("afoot"), "afoot" );
	deepEqual( Stem("afore"), "afor" );
	deepEqual( Stem("aforehand"), "aforehand" );
	deepEqual( Stem("aforesaid"), "aforesaid" );
	deepEqual( Stem("afraid"), "afraid" );
	deepEqual( Stem("afresh"), "afresh" );
	deepEqual( Stem("afric"), "afric" );
	deepEqual( Stem("africa"), "africa" );
	deepEqual( Stem("african"), "african" );
	deepEqual( Stem("afront"), "afront" );
	deepEqual( Stem("after"), "after" );
	deepEqual( Stem("afternoon"), "afternoon" );
	deepEqual( Stem("afternoons"), "afternoon" );
	deepEqual( Stem("afterward"), "afterward" );
	deepEqual( Stem("afterwards"), "afterward" );
	deepEqual( Stem("ag"), "ag" );
	deepEqual( Stem("aga"), "aga" );
	deepEqual( Stem("again"), "again" );
	deepEqual( Stem("against"), "against" );
	deepEqual( Stem("agamemmon"), "agamemmon" );
	deepEqual( Stem("agamemnon"), "agamemnon" );
	deepEqual( Stem("agate"), "agat" );
	deepEqual( Stem("agaz"), "agaz" );
	deepEqual( Stem("age"), "ag" );
	deepEqual( Stem("aged"), "ag" );
	deepEqual( Stem("agencies"), "agenc" );
	deepEqual( Stem("agency"), "agenc" );
	deepEqual( Stem("agenor"), "agenor" );
	deepEqual( Stem("agent"), "agent" );
	deepEqual( Stem("agents"), "agent" );
	deepEqual( Stem("ages"), "ag" );
	deepEqual( Stem("aggravate"), "aggrav" );
	deepEqual( Stem("aggravated"), "aggrav" );
	deepEqual( Stem("aggressive"), "aggress" );
	deepEqual( Stem("aggrief"), "aggrief" );
	deepEqual( Stem("aghast"), "aghast" );
	deepEqual( Stem("agile"), "agil" );
	deepEqual( Stem("agin"), "agin" );
	deepEqual( Stem("agincourt"), "agincourt" );
	deepEqual( Stem("agios"), "agio" );
	deepEqual( Stem("agitate"), "agit" );
	deepEqual( Stem("agitated"), "agit" );
	deepEqual( Stem("agitating"), "agit" );
	deepEqual( Stem("agitation"), "agit" );
	deepEqual( Stem("aglet"), "aglet" );
	deepEqual( Stem("agnize"), "agniz" );
	deepEqual( Stem("ago"), "ago" );
	deepEqual( Stem("agone"), "agon" );
	deepEqual( Stem("agonies"), "agoni" );
	deepEqual( Stem("agonised"), "agonis" );
	deepEqual( Stem("agonized"), "agon" );
	deepEqual( Stem("agony"), "agoni" );
	deepEqual( Stem("agree"), "agre" );
	deepEqual( Stem("agreeable"), "agreeabl" );
	deepEqual( Stem("agreeably"), "agreeabl" );
	deepEqual( Stem("agreed"), "agre" );
	deepEqual( Stem("agreeing"), "agre" );
	deepEqual( Stem("agreement"), "agreement" );
	deepEqual( Stem("agrees"), "agre" );
	deepEqual( Stem("agremens"), "agremen" );
	deepEqual( Stem("agricultural"), "agricultur" );
	deepEqual( Stem("agrippa"), "agrippa" );
	deepEqual( Stem("aground"), "aground" );
	deepEqual( Stem("ague"), "agu" );
	deepEqual( Stem("aguecheek"), "aguecheek" );
	deepEqual( Stem("agued"), "agu" );
	deepEqual( Stem("agueface"), "aguefac" );
	deepEqual( Stem("agues"), "agu" );
	deepEqual( Stem("ah"), "ah" );
	deepEqual( Stem("aha"), "aha" );
	deepEqual( Stem("ahead"), "ahead" );
	deepEqual( Stem("ahem"), "ahem" );
	deepEqual( Stem("ahmed"), "ahm" );
	deepEqual( Stem("ahmednuggur"), "ahmednuggur" );
	deepEqual( Stem("ahrimanians"), "ahrimanian" );
	deepEqual( Stem("ahum"), "ahum" );
	deepEqual( Stem("ahungry"), "ahungri" );
	deepEqual( Stem("ai"), "ai" );
	deepEqual( Stem("aialvolio"), "aialvolio" );
	deepEqual( Stem("aiaria"), "aiaria" );
	deepEqual( Stem("aid"), "aid" );
	deepEqual( Stem("aidance"), "aidanc" );
	deepEqual( Stem("aidant"), "aidant" );
	deepEqual( Stem("aide"), "aid" );
	deepEqual( Stem("aided"), "aid" );
	deepEqual( Stem("aides"), "aid" );
	deepEqual( Stem("aiding"), "aid" );
	deepEqual( Stem("aidless"), "aidless" );
	deepEqual( Stem("aids"), "aid" );
	deepEqual( Stem("aigle"), "aigl" );
	deepEqual( Stem("ail"), "ail" );
	deepEqual( Stem("ailing"), "ail" );
	deepEqual( Stem("ailments"), "ailment" );
	deepEqual( Stem("aim"), "aim" );
	deepEqual( Stem("aimable"), "aimabl" );
	deepEqual( Stem("aimed"), "aim" );
	deepEqual( Stem("aimest"), "aimest" );
	deepEqual( Stem("aiming"), "aim" );
	deepEqual( Stem("aims"), "aim" );
	deepEqual( Stem("ain"), "ain" );
	deepEqual( Stem("ainsi"), "ainsi" );
	deepEqual( Stem("aio"), "aio" );
	deepEqual( Stem("air"), "air" );
	deepEqual( Stem("aired"), "air" );
	deepEqual( Stem("airing"), "air" );
	deepEqual( Stem("airless"), "airless" );
	deepEqual( Stem("airs"), "air" );
	deepEqual( Stem("airy"), "airi" );
	deepEqual( Stem("aix"), "aix" );
	deepEqual( Stem("ajax"), "ajax" );
	deepEqual( Stem("akilling"), "akil" );
	deepEqual( Stem("akimbo"), "akimbo" );
	deepEqual( Stem("akin"), "akin" );
	deepEqual( Stem("al"), "al" );
	deepEqual( Stem("alabaster"), "alabast" );
	deepEqual( Stem("alack"), "alack" );
	deepEqual( Stem("alacrity"), "alacr" );
	deepEqual( Stem("alarbus"), "alarbu" );
	deepEqual( Stem("alarm"), "alarm" );
	deepEqual( Stem("alarmed"), "alarm" );
	deepEqual( Stem("alarms"), "alarm" );
	deepEqual( Stem("alarum"), "alarum" );
	deepEqual( Stem("alarums"), "alarum" );
	deepEqual( Stem("alas"), "ala" );
	deepEqual( Stem("alb"), "alb" );
	deepEqual( Stem("alban"), "alban" );
	deepEqual( Stem("albans"), "alban" );
	deepEqual( Stem("albany"), "albani" );
	deepEqual( Stem("albeit"), "albeit" );
	deepEqual( Stem("albion"), "albion" );
	deepEqual( Stem("albums"), "album" );
	deepEqual( Stem("alchemist"), "alchemist" );
	deepEqual( Stem("alchemy"), "alchemi" );
	deepEqual( Stem("alcibiades"), "alcibiad" );
	deepEqual( Stem("alcides"), "alcid" );
	deepEqual( Stem("alder"), "alder" );
	deepEqual( Stem("alderman"), "alderman" );
	deepEqual( Stem("aldermen"), "aldermen" );
	deepEqual( Stem("alderney"), "aldernei" );
	deepEqual( Stem("aldersgate"), "aldersg" );
	deepEqual( Stem("ale"), "al" );
	deepEqual( Stem("alecto"), "alecto" );
	deepEqual( Stem("alehouse"), "alehous" );
	deepEqual( Stem("alehouses"), "alehous" );
	deepEqual( Stem("alencon"), "alencon" );
	deepEqual( Stem("alengon"), "alengon" );
	deepEqual( Stem("aleppo"), "aleppo" );
	deepEqual( Stem("alert"), "alert" );
	deepEqual( Stem("ales"), "al" );
	deepEqual( Stem("alessandro"), "alessandro" );
	deepEqual( Stem("alewife"), "alewif" );
	deepEqual( Stem("alexander"), "alexand" );
	deepEqual( Stem("alexanders"), "alexand" );
	deepEqual( Stem("alexandria"), "alexandria" );
	deepEqual( Stem("alexandrian"), "alexandrian" );
	deepEqual( Stem("alexas"), "alexa" );
	deepEqual( Stem("alexis"), "alexi" );
	deepEqual( Stem("alge"), "alg" );
	deepEqual( Stem("algebra"), "algebra" );
	deepEqual( Stem("alias"), "alia" );
	deepEqual( Stem("alice"), "alic" );
	deepEqual( Stem("alien"), "alien" );
	deepEqual( Stem("aliena"), "aliena" );
	deepEqual( Stem("alieni"), "alieni" );
	deepEqual( Stem("alight"), "alight" );
	deepEqual( Stem("alighted"), "alight" );
	deepEqual( Stem("alights"), "alight" );
	deepEqual( Stem("aliis"), "alii" );
	deepEqual( Stem("alike"), "alik" );
	deepEqual( Stem("alisander"), "alisand" );
	deepEqual( Stem("alive"), "aliv" );
	deepEqual( Stem("all"), "all" );
	deepEqual( Stem("alla"), "alla" );
	deepEqual( Stem("allay"), "allai" );
	deepEqual( Stem("allayed"), "allai" );
	deepEqual( Stem("allaying"), "allai" );
	deepEqual( Stem("allayment"), "allay" );
	deepEqual( Stem("allayments"), "allay" );
	deepEqual( Stem("allays"), "allai" );
	deepEqual( Stem("allee"), "alle" );
	deepEqual( Stem("allegation"), "alleg" );
	deepEqual( Stem("allegations"), "alleg" );
	deepEqual( Stem("allege"), "alleg" );
	deepEqual( Stem("alleged"), "alleg" );
	deepEqual( Stem("allegiance"), "allegi" );
	deepEqual( Stem("allegiant"), "allegi" );
	deepEqual( Stem("allegorical"), "allegor" );
	deepEqual( Stem("allegories"), "allegori" );
	deepEqual( Stem("alleine"), "allein" );
	deepEqual( Stem("alley"), "allei" );
	deepEqual( Stem("alleys"), "allei" );
	deepEqual( Stem("allhallowmas"), "allhallowma" );
	deepEqual( Stem("alliance"), "allianc" );
	deepEqual( Stem("allicholy"), "allicholi" );
	deepEqual( Stem("allied"), "alli" );
	deepEqual( Stem("allies"), "alli" );
	deepEqual( Stem("alligant"), "allig" );
	deepEqual( Stem("alligator"), "allig" );
	deepEqual( Stem("allocution"), "allocut" );
	deepEqual( Stem("allons"), "allon" );
	deepEqual( Stem("allot"), "allot" );
	deepEqual( Stem("allots"), "allot" );
	deepEqual( Stem("allotted"), "allot" );
	deepEqual( Stem("allottery"), "allotteri" );
	deepEqual( Stem("allow"), "allow" );
	deepEqual( Stem("allowance"), "allow" );
	deepEqual( Stem("allowed"), "allow" );
	deepEqual( Stem("allowing"), "allow" );
	deepEqual( Stem("allows"), "allow" );
	deepEqual( Stem("allude"), "allud" );
	deepEqual( Stem("alluded"), "allud" );
	deepEqual( Stem("allur"), "allur" );
	deepEqual( Stem("allure"), "allur" );
	deepEqual( Stem("allurement"), "allur" );
	deepEqual( Stem("alluring"), "allur" );
	deepEqual( Stem("allusion"), "allus" );
	deepEqual( Stem("allusions"), "allus" );
	deepEqual( Stem("ally"), "alli" );
	deepEqual( Stem("allycholly"), "allycholli" );
	deepEqual( Stem("almack"), "almack" );
	deepEqual( Stem("almain"), "almain" );
	deepEqual( Stem("almanac"), "almanac" );
	deepEqual( Stem("almanack"), "almanack" );
	deepEqual( Stem("almanacs"), "almanac" );
	deepEqual( Stem("almighty"), "almighti" );
	deepEqual( Stem("almond"), "almond" );
	deepEqual( Stem("almost"), "almost" );
	deepEqual( Stem("alms"), "alm" );
	deepEqual( Stem("almsman"), "almsman" );
	deepEqual( Stem("alnaschar"), "alnaschar" );
	deepEqual( Stem("aloes"), "alo" );
	deepEqual( Stem("aloft"), "aloft" );
	deepEqual( Stem("alone"), "alon" );
	deepEqual( Stem("along"), "along" );
	deepEqual( Stem("alongside"), "alongsid" );
	deepEqual( Stem("alonso"), "alonso" );
	deepEqual( Stem("aloof"), "aloof" );
	deepEqual( Stem("aloud"), "aloud" );
	deepEqual( Stem("alphabet"), "alphabet" );
	deepEqual( Stem("alphabetical"), "alphabet" );
	deepEqual( Stem("alphonso"), "alphonso" );
	deepEqual( Stem("alps"), "alp" );
	deepEqual( Stem("already"), "alreadi" );
	deepEqual( Stem("also"), "also" );
	deepEqual( Stem("alt"), "alt" );
	deepEqual( Stem("altar"), "altar" );
	deepEqual( Stem("altars"), "altar" );
	deepEqual( Stem("alter"), "alter" );
	deepEqual( Stem("alteration"), "alter" );
	deepEqual( Stem("altercation"), "alterc" );
	deepEqual( Stem("altered"), "alter" );
	deepEqual( Stem("altering"), "alter" );
	deepEqual( Stem("alternately"), "altern" );
	deepEqual( Stem("alternations"), "altern" );
	deepEqual( Stem("alters"), "alter" );
	deepEqual( Stem("althaea"), "althaea" );
	deepEqual( Stem("although"), "although" );
	deepEqual( Stem("altitude"), "altitud" );
	deepEqual( Stem("altogether"), "altogeth" );
	deepEqual( Stem("alton"), "alton" );
	deepEqual( Stem("alway"), "alwai" );
	deepEqual( Stem("always"), "alwai" );
	deepEqual( Stem("am"), "am" );
	deepEqual( Stem("amaimon"), "amaimon" );
	deepEqual( Stem("amain"), "amain" );
	deepEqual( Stem("amaking"), "amak" );
	deepEqual( Stem("amamon"), "amamon" );
	deepEqual( Stem("amantium"), "amantium" );
	deepEqual( Stem("amanuensis"), "amanuensi" );
	deepEqual( Stem("amaranthe"), "amaranth" );
	deepEqual( Stem("amassed"), "amass" );
	deepEqual( Stem("amateur"), "amateur" );
	deepEqual( Stem("amateurs"), "amateur" );
	deepEqual( Stem("amaz"), "amaz" );
	deepEqual( Stem("amaze"), "amaz" );
	deepEqual( Stem("amazed"), "amaz" );
	deepEqual( Stem("amazedly"), "amazedli" );
	deepEqual( Stem("amazedness"), "amazed" );
	deepEqual( Stem("amazement"), "amaz" );
	deepEqual( Stem("amazes"), "amaz" );
	deepEqual( Stem("amazeth"), "amazeth" );
	deepEqual( Stem("amazing"), "amaz" );
	deepEqual( Stem("amazon"), "amazon" );
	deepEqual( Stem("amazonian"), "amazonian" );
	deepEqual( Stem("amazons"), "amazon" );
	deepEqual( Stem("ambassador"), "ambassador" );
	deepEqual( Stem("ambassadors"), "ambassador" );
	deepEqual( Stem("ambassadress"), "ambassadress" );
	deepEqual( Stem("amber"), "amber" );
	deepEqual( Stem("ambiguides"), "ambiguid" );
	deepEqual( Stem("ambiguities"), "ambigu" );
	deepEqual( Stem("ambiguous"), "ambigu" );
	deepEqual( Stem("ambition"), "ambit" );
	deepEqual( Stem("ambitions"), "ambit" );
	deepEqual( Stem("ambitious"), "ambiti" );
	deepEqual( Stem("ambitiously"), "ambiti" );
	deepEqual( Stem("amble"), "ambl" );
	deepEqual( Stem("ambled"), "ambl" );
	deepEqual( Stem("ambles"), "ambl" );
	deepEqual( Stem("ambling"), "ambl" );
	deepEqual( Stem("ambo"), "ambo" );
	deepEqual( Stem("ambrosial"), "ambrosi" );
	deepEqual( Stem("ambuscadoes"), "ambuscado" );
	deepEqual( Stem("ambush"), "ambush" );
	deepEqual( Stem("amelia"), "amelia" );
	deepEqual( Stem("amelie"), "ameli" );
	deepEqual( Stem("amen"), "amen" );
	deepEqual( Stem("amenaide"), "amenaid" );
	deepEqual( Stem("amend"), "amend" );
	deepEqual( Stem("amended"), "amend" );
	deepEqual( Stem("amendment"), "amend" );
	deepEqual( Stem("amends"), "amend" );
	deepEqual( Stem("amerce"), "amerc" );
	deepEqual( Stem("america"), "america" );
	deepEqual( Stem("american"), "american" );
	deepEqual( Stem("ames"), "am" );
	deepEqual( Stem("ami"), "ami" );
	deepEqual( Stem("amiable"), "amiabl" );
	deepEqual( Stem("amiably"), "amiabl" );
	deepEqual( Stem("amicable"), "amic" );
	deepEqual( Stem("amid"), "amid" );
	deepEqual( Stem("amidst"), "amidst" );
	deepEqual( Stem("amiens"), "amien" );
	deepEqual( Stem("amis"), "ami" );
	deepEqual( Stem("amiss"), "amiss" );
	deepEqual( Stem("amities"), "amiti" );
	deepEqual( Stem("amity"), "amiti" );
	deepEqual( Stem("ammunition"), "ammunit" );
	deepEqual( Stem("amnipotent"), "amnipot" );
	deepEqual( Stem("among"), "among" );
	deepEqual( Stem("amongst"), "amongst" );
	deepEqual( Stem("amorous"), "amor" );
	deepEqual( Stem("amorously"), "amor" );
	deepEqual( Stem("amort"), "amort" );
	deepEqual( Stem("amount"), "amount" );
	deepEqual( Stem("amounts"), "amount" );
	deepEqual( Stem("amour"), "amour" );
	deepEqual( Stem("amours"), "amour" );
	deepEqual( Stem("amphimacus"), "amphimacu" );
	deepEqual( Stem("ample"), "ampl" );
	deepEqual( Stem("ampler"), "ampler" );
	deepEqual( Stem("amplest"), "amplest" );
	deepEqual( Stem("amplified"), "amplifi" );
	deepEqual( Stem("amplify"), "amplifi" );
	deepEqual( Stem("amply"), "ampli" );
	deepEqual( Stem("ampthill"), "ampthil" );
	deepEqual( Stem("amurath"), "amurath" );
	deepEqual( Stem("amuse"), "amus" );
	deepEqual( Stem("amused"), "amus" );
	deepEqual( Stem("amusement"), "amus" );
	deepEqual( Stem("amusements"), "amus" );
	deepEqual( Stem("amuser"), "amus" );
	deepEqual( Stem("amuses"), "amus" );
	deepEqual( Stem("amusing"), "amus" );
	deepEqual( Stem("amyntas"), "amynta" );
	deepEqual( Stem("an"), "an" );
	deepEqual( Stem("analyse"), "analys" );
	deepEqual( Stem("anathemas"), "anathema" );
	deepEqual( Stem("anatomiz"), "anatomiz" );
	deepEqual( Stem("anatomize"), "anatom" );
	deepEqual( Stem("anatomy"), "anatomi" );
	deepEqual( Stem("anax"), "anax" );
	deepEqual( Stem("ancestor"), "ancestor" );
	deepEqual( Stem("ancestors"), "ancestor" );
	deepEqual( Stem("ancestral"), "ancestr" );
	deepEqual( Stem("ancestry"), "ancestri" );
	deepEqual( Stem("anchises"), "anchis" );
	deepEqual( Stem("anchor"), "anchor" );
	deepEqual( Stem("anchorage"), "anchorag" );
	deepEqual( Stem("anchored"), "anchor" );
	deepEqual( Stem("anchoring"), "anchor" );
	deepEqual( Stem("anchorite"), "anchorit" );
	deepEqual( Stem("anchors"), "anchor" );
	deepEqual( Stem("anchovies"), "anchovi" );
	deepEqual( Stem("ancient"), "ancient" );
	deepEqual( Stem("ancientry"), "ancientri" );
	deepEqual( Stem("ancients"), "ancient" );
	deepEqual( Stem("ancus"), "ancu" );
	deepEqual( Stem("and"), "and" );
	deepEqual( Stem("andirons"), "andiron" );
	deepEqual( Stem("andpholus"), "andpholu" );
	deepEqual( Stem("andren"), "andren" );
	deepEqual( Stem("andrew"), "andrew" );
	deepEqual( Stem("andromache"), "andromach" );
	deepEqual( Stem("andron"), "andron" );
	deepEqual( Stem("andronici"), "andronici" );
	deepEqual( Stem("andronicus"), "andronicu" );
	deepEqual( Stem("anecdotes"), "anecdot" );
	deepEqual( Stem("anew"), "anew" );
	deepEqual( Stem("ang"), "ang" );
	deepEqual( Stem("angcore"), "angcor" );
	deepEqual( Stem("angel"), "angel" );
	deepEqual( Stem("angelic"), "angel" );
	deepEqual( Stem("angelica"), "angelica" );
	deepEqual( Stem("angelical"), "angel" );
	deepEqual( Stem("angelically"), "angel" );
	deepEqual( Stem("angelo"), "angelo" );
	deepEqual( Stem("angels"), "angel" );
	deepEqual( Stem("anger"), "anger" );
	deepEqual( Stem("angered"), "anger" );
	deepEqual( Stem("angerly"), "angerli" );
	deepEqual( Stem("angers"), "anger" );
	deepEqual( Stem("anges"), "ang" );
	deepEqual( Stem("angiers"), "angier" );
	deepEqual( Stem("angl"), "angl" );
	deepEqual( Stem("anglais"), "anglai" );
	deepEqual( Stem("angle"), "angl" );
	deepEqual( Stem("angler"), "angler" );
	deepEqual( Stem("angleterre"), "angleterr" );
	deepEqual( Stem("angliae"), "anglia" );
	deepEqual( Stem("anglican"), "anglican" );
	deepEqual( Stem("angling"), "angl" );
	deepEqual( Stem("anglish"), "anglish" );
	deepEqual( Stem("anglo"), "anglo" );
	deepEqual( Stem("angouleme"), "angoulem" );
	deepEqual( Stem("angrily"), "angrili" );
	deepEqual( Stem("angry"), "angri" );
	deepEqual( Stem("anguish"), "anguish" );
	deepEqual( Stem("angus"), "angu" );
	deepEqual( Stem("animal"), "anim" );
	deepEqual( Stem("animals"), "anim" );
	deepEqual( Stem("animis"), "animi" );
	deepEqual( Stem("anjou"), "anjou" );
	deepEqual( Stem("ankle"), "ankl" );
	deepEqual( Stem("ankles"), "ankl" );
	deepEqual( Stem("ann"), "ann" );
	deepEqual( Stem("anna"), "anna" );
	deepEqual( Stem("annals"), "annal" );
	deepEqual( Stem("anne"), "ann" );
	deepEqual( Stem("annex"), "annex" );
	deepEqual( Stem("annexed"), "annex" );
	deepEqual( Stem("annexions"), "annexion" );
	deepEqual( Stem("annexment"), "annex" );
	deepEqual( Stem("annihilate"), "annihil" );
	deepEqual( Stem("annihilated"), "annihil" );
	deepEqual( Stem("anniversary"), "anniversari" );
	deepEqual( Stem("anno"), "anno" );
	deepEqual( Stem("annothanize"), "annothan" );
	deepEqual( Stem("announce"), "announc" );
	deepEqual( Stem("announced"), "announc" );
	deepEqual( Stem("announcement"), "announc" );
	deepEqual( Stem("announcements"), "announc" );
	deepEqual( Stem("announces"), "announc" );
	deepEqual( Stem("announcing"), "announc" );
	deepEqual( Stem("annoy"), "annoi" );
	deepEqual( Stem("annoyance"), "annoy" );
	deepEqual( Stem("annoyed"), "annoi" );
	deepEqual( Stem("annoying"), "annoi" );
	deepEqual( Stem("annual"), "annual" );
	deepEqual( Stem("annuities"), "annuiti" );
	deepEqual( Stem("annuity"), "annuiti" );
	deepEqual( Stem("annum"), "annum" );
	deepEqual( Stem("anoint"), "anoint" );
	deepEqual( Stem("anointed"), "anoint" );
	deepEqual( Stem("anon"), "anon" );
	deepEqual( Stem("anonymously"), "anonym" );
	deepEqual( Stem("another"), "anoth" );
	deepEqual( Stem("anselmo"), "anselmo" );
	deepEqual( Stem("answer"), "answer" );
	deepEqual( Stem("answerable"), "answer" );
	deepEqual( Stem("answered"), "answer" );
	deepEqual( Stem("answerest"), "answerest" );
	deepEqual( Stem("answering"), "answer" );
	deepEqual( Stem("answers"), "answer" );
	deepEqual( Stem("ant"), "ant" );
	deepEqual( Stem("ante"), "ant" );
	deepEqual( Stem("antechamber"), "antechamb" );
	deepEqual( Stem("antenor"), "antenor" );
	deepEqual( Stem("antenorides"), "antenorid" );
	deepEqual( Stem("anteroom"), "anteroom" );
	deepEqual( Stem("anthem"), "anthem" );
	deepEqual( Stem("anthems"), "anthem" );
	deepEqual( Stem("anthony"), "anthoni" );
	deepEqual( Stem("anthropophagi"), "anthropophagi" );
	deepEqual( Stem("anthropophaginian"), "anthropophaginian" );
	deepEqual( Stem("anti"), "anti" );
	deepEqual( Stem("antiates"), "antiat" );
	deepEqual( Stem("antic"), "antic" );
	deepEqual( Stem("anticipate"), "anticip" );
	deepEqual( Stem("anticipated"), "anticip" );
	deepEqual( Stem("anticipates"), "anticip" );
	deepEqual( Stem("anticipatest"), "anticipatest" );
	deepEqual( Stem("anticipating"), "anticip" );
	deepEqual( Stem("anticipation"), "anticip" );
	deepEqual( Stem("antick"), "antick" );
	deepEqual( Stem("anticly"), "anticli" );
	deepEqual( Stem("antics"), "antic" );
	deepEqual( Stem("antidote"), "antidot" );
	deepEqual( Stem("antidotes"), "antidot" );
	deepEqual( Stem("antigonus"), "antigonu" );
	deepEqual( Stem("antiopa"), "antiopa" );
	deepEqual( Stem("antipathy"), "antipathi" );
	deepEqual( Stem("antiphlogistic"), "antiphlogist" );
	deepEqual( Stem("antipholus"), "antipholu" );
	deepEqual( Stem("antipholuses"), "antipholus" );
	deepEqual( Stem("antipodes"), "antipod" );
	deepEqual( Stem("antiquary"), "antiquari" );
	deepEqual( Stem("antique"), "antiqu" );
	deepEqual( Stem("antiques"), "antiqu" );
	deepEqual( Stem("antiquities"), "antiqu" );
	deepEqual( Stem("antiquity"), "antiqu" );
	deepEqual( Stem("antium"), "antium" );
	deepEqual( Stem("antoinette"), "antoinett" );
	deepEqual( Stem("antoniad"), "antoniad" );
	deepEqual( Stem("antonio"), "antonio" );
	deepEqual( Stem("antonius"), "antoniu" );
	deepEqual( Stem("antony"), "antoni" );
	deepEqual( Stem("antres"), "antr" );
	deepEqual( Stem("anvil"), "anvil" );
	deepEqual( Stem("anxieties"), "anxieti" );
	deepEqual( Stem("anxiety"), "anxieti" );
	deepEqual( Stem("anxious"), "anxiou" );
	deepEqual( Stem("anxiously"), "anxious" );
	deepEqual( Stem("any"), "ani" );
	deepEqual( Stem("anybody"), "anybodi" );
	deepEqual( Stem("anyhow"), "anyhow" );
	deepEqual( Stem("anyone"), "anyon" );
	deepEqual( Stem("anything"), "anyth" );
	deepEqual( Stem("anyway"), "anywai" );
	deepEqual( Stem("anyways"), "anywai" );
	deepEqual( Stem("anywhere"), "anywher" );
	deepEqual( Stem("aohnh"), "aohnh" );
	deepEqual( Stem("ap"), "ap" );
	deepEqual( Stem("apace"), "apac" );
	deepEqual( Stem("apart"), "apart" );
	deepEqual( Stem("apartment"), "apart" );
	deepEqual( Stem("apartments"), "apart" );
	deepEqual( Stem("apathetic"), "apathet" );
	deepEqual( Stem("ape"), "ap" );
	deepEqual( Stem("apemantus"), "apemantu" );
	deepEqual( Stem("apennines"), "apennin" );
	deepEqual( Stem("apes"), "ap" );
	deepEqual( Stem("apiece"), "apiec" );
	deepEqual( Stem("apish"), "apish" );
	deepEqual( Stem("apollinem"), "apollinem" );
	deepEqual( Stem("apollo"), "apollo" );
	deepEqual( Stem("apollodorus"), "apollodoru" );
	deepEqual( Stem("apologetically"), "apologet" );
	deepEqual( Stem("apologies"), "apologi" );
	deepEqual( Stem("apologise"), "apologis" );
	deepEqual( Stem("apologised"), "apologis" );
	deepEqual( Stem("apologists"), "apologist" );
	deepEqual( Stem("apologize"), "apolog" );
	deepEqual( Stem("apologized"), "apolog" );
	deepEqual( Stem("apologue"), "apologu" );
	deepEqual( Stem("apology"), "apologi" );
	deepEqual( Stem("apoplectic"), "apoplect" );
	deepEqual( Stem("apoplex"), "apoplex" );
	deepEqual( Stem("apoplexy"), "apoplexi" );
	deepEqual( Stem("apostle"), "apostl" );
	deepEqual( Stem("apostles"), "apostl" );
	deepEqual( Stem("apostrophas"), "apostropha" );
	deepEqual( Stem("apoth"), "apoth" );
	deepEqual( Stem("apothecary"), "apothecari" );
	deepEqual( Stem("appal"), "appal" );
	deepEqual( Stem("appall"), "appal" );
	deepEqual( Stem("appalled"), "appal" );
	deepEqual( Stem("appals"), "appal" );
	deepEqual( Stem("apparatus"), "apparatu" );
	deepEqual( Stem("apparel"), "apparel" );
	deepEqual( Stem("apparell"), "apparel" );
	deepEqual( Stem("apparelled"), "apparel" );
	deepEqual( Stem("apparent"), "appar" );
	deepEqual( Stem("apparently"), "appar" );
	deepEqual( Stem("apparition"), "apparit" );
	deepEqual( Stem("apparitions"), "apparit" );
	deepEqual( Stem("appartements"), "appart" );
	deepEqual( Stem("appeach"), "appeach" );
	deepEqual( Stem("appeal"), "appeal" );
	deepEqual( Stem("appealed"), "appeal" );
	deepEqual( Stem("appealing"), "appeal" );
	deepEqual( Stem("appeals"), "appeal" );
	deepEqual( Stem("appear"), "appear" );
	deepEqual( Stem("appearance"), "appear" );
	deepEqual( Stem("appearances"), "appear" );
	deepEqual( Stem("appeared"), "appear" );
	deepEqual( Stem("appeareth"), "appeareth" );
	deepEqual( Stem("appearing"), "appear" );
	deepEqual( Stem("appears"), "appear" );
	deepEqual( Stem("appeas"), "appea" );
	deepEqual( Stem("appease"), "appeas" );
	deepEqual( Stem("appeased"), "appeas" );
	deepEqual( Stem("appelant"), "appel" );
	deepEqual( Stem("appele"), "appel" );
	deepEqual( Stem("appelee"), "appele" );
	deepEqual( Stem("appeles"), "appel" );
	deepEqual( Stem("appelez"), "appelez" );
	deepEqual( Stem("appellant"), "appel" );
	deepEqual( Stem("appellants"), "appel" );
	deepEqual( Stem("appelons"), "appelon" );
	deepEqual( Stem("appended"), "append" );
	deepEqual( Stem("appendix"), "appendix" );
	deepEqual( Stem("apperil"), "apperil" );
	deepEqual( Stem("appertain"), "appertain" );
	deepEqual( Stem("appertaining"), "appertain" );
	deepEqual( Stem("appertainings"), "appertain" );
	deepEqual( Stem("appertains"), "appertain" );
	deepEqual( Stem("appertinent"), "appertin" );
	deepEqual( Stem("appertinents"), "appertin" );
	deepEqual( Stem("appetens"), "appeten" );
	deepEqual( Stem("appetite"), "appetit" );
	deepEqual( Stem("appetites"), "appetit" );
	deepEqual( Stem("applaud"), "applaud" );
	deepEqual( Stem("applauded"), "applaud" );
	deepEqual( Stem("applauding"), "applaud" );
	deepEqual( Stem("applause"), "applaus" );
	deepEqual( Stem("applauses"), "applaus" );
	deepEqual( Stem("apple"), "appl" );
	deepEqual( Stem("apples"), "appl" );
	deepEqual( Stem("appletart"), "appletart" );
	deepEqual( Stem("applewoman"), "applewoman" );
	deepEqual( Stem("appliance"), "applianc" );
	deepEqual( Stem("appliances"), "applianc" );
	deepEqual( Stem("application"), "applic" );
	deepEqual( Stem("applications"), "applic" );
	deepEqual( Stem("applied"), "appli" );
	deepEqual( Stem("applies"), "appli" );
	deepEqual( Stem("apply"), "appli" );
	deepEqual( Stem("applying"), "appli" );
	deepEqual( Stem("appoint"), "appoint" );
	deepEqual( Stem("appointed"), "appoint" );
	deepEqual( Stem("appointing"), "appoint" );
	deepEqual( Stem("appointment"), "appoint" );
	deepEqual( Stem("appointments"), "appoint" );
	deepEqual( Stem("appoints"), "appoint" );
	deepEqual( Stem("apportioned"), "apport" );
	deepEqual( Stem("apportions"), "apport" );
	deepEqual( Stem("apposite"), "apposit" );
	deepEqual( Stem("appreciate"), "appreci" );
	deepEqual( Stem("appreciated"), "appreci" );
	deepEqual( Stem("appreciation"), "appreci" );
	deepEqual( Stem("apprehend"), "apprehend" );
	deepEqual( Stem("apprehended"), "apprehend" );
	deepEqual( Stem("apprehends"), "apprehend" );
	deepEqual( Stem("apprehension"), "apprehens" );
	deepEqual( Stem("apprehensions"), "apprehens" );
	deepEqual( Stem("apprehensive"), "apprehens" );
	deepEqual( Stem("apprendre"), "apprendr" );
	deepEqual( Stem("apprenne"), "apprenn" );
	deepEqual( Stem("apprentice"), "apprentic" );
	deepEqual( Stem("apprenticehood"), "apprenticehood" );
	deepEqual( Stem("apprentices"), "apprentic" );
	deepEqual( Stem("appris"), "appri" );
	deepEqual( Stem("apprised"), "appris" );
	deepEqual( Stem("approach"), "approach" );
	deepEqual( Stem("approached"), "approach" );
	deepEqual( Stem("approachers"), "approach" );
	deepEqual( Stem("approaches"), "approach" );
	deepEqual( Stem("approacheth"), "approacheth" );
	deepEqual( Stem("approaching"), "approach" );
	deepEqual( Stem("approbation"), "approb" );
	deepEqual( Stem("approof"), "approof" );
	deepEqual( Stem("appropinquity"), "appropinqu" );
	deepEqual( Stem("appropriate"), "appropri" );
	deepEqual( Stem("appropriated"), "appropri" );
	deepEqual( Stem("appropriation"), "appropri" );
	deepEqual( Stem("appropriator"), "appropri" );
	deepEqual( Stem("approv"), "approv" );
	deepEqual( Stem("approval"), "approv" );
	deepEqual( Stem("approve"), "approv" );
	deepEqual( Stem("approved"), "approv" );
	deepEqual( Stem("approvers"), "approv" );
	deepEqual( Stem("approves"), "approv" );
	deepEqual( Stem("approving"), "approv" );
	deepEqual( Stem("approvingly"), "approvingli" );
	deepEqual( Stem("appurtenance"), "appurten" );
	deepEqual( Stem("appurtenances"), "appurten" );
	deepEqual( Stem("apricocks"), "apricock" );
	deepEqual( Stem("apricots"), "apricot" );
	deepEqual( Stem("april"), "april" );
	deepEqual( Stem("apron"), "apron" );
	deepEqual( Stem("aprons"), "apron" );
	deepEqual( Stem("apropos"), "apropo" );
	deepEqual( Stem("apsley"), "apslei" );
	deepEqual( Stem("apt"), "apt" );
	deepEqual( Stem("apter"), "apter" );
	deepEqual( Stem("aptest"), "aptest" );
	deepEqual( Stem("aptitude"), "aptitud" );
	deepEqual( Stem("aptly"), "aptli" );
	deepEqual( Stem("aptness"), "apt" );
	deepEqual( Stem("aqua"), "aqua" );
	deepEqual( Stem("aquatic"), "aquat" );
	deepEqual( Stem("aquilon"), "aquilon" );
	deepEqual( Stem("aquitaine"), "aquitain" );
	deepEqual( Stem("ar"), "ar" );
	deepEqual( Stem("arab"), "arab" );
	deepEqual( Stem("arabella"), "arabella" );
	deepEqual( Stem("arabia"), "arabia" );
	deepEqual( Stem("arabian"), "arabian" );
	deepEqual( Stem("araise"), "arais" );
	deepEqual( Stem("arbitrate"), "arbitr" );
	deepEqual( Stem("arbitrating"), "arbitr" );
	deepEqual( Stem("arbitrator"), "arbitr" );
	deepEqual( Stem("arbitrement"), "arbitr" );
	deepEqual( Stem("arbors"), "arbor" );
	deepEqual( Stem("arbour"), "arbour" );
	deepEqual( Stem("arbours"), "arbour" );
	deepEqual( Stem("arc"), "arc" );
	deepEqual( Stem("arcades"), "arcad" );
	deepEqual( Stem("arcadia"), "arcadia" );
	deepEqual( Stem("arcadian"), "arcadian" );
	deepEqual( Stem("arch"), "arch" );
	deepEqual( Stem("archaeologian"), "archaeologian" );
	deepEqual( Stem("archaeological"), "archaeolog" );
	deepEqual( Stem("archaeologically"), "archaeolog" );
	deepEqual( Stem("archaeologies"), "archaeologi" );
	deepEqual( Stem("archaeology"), "archaeologi" );
	deepEqual( Stem("archbishop"), "archbishop" );
	deepEqual( Stem("archbishopric"), "archbishopr" );
	deepEqual( Stem("archdeacon"), "archdeacon" );
	deepEqual( Stem("arched"), "arch" );
	deepEqual( Stem("archelaus"), "archelau" );
	deepEqual( Stem("archer"), "archer" );
	deepEqual( Stem("archers"), "archer" );
	deepEqual( Stem("archery"), "archeri" );
	deepEqual( Stem("arches"), "arch" );
	deepEqual( Stem("archibald"), "archibald" );
	deepEqual( Stem("archidamus"), "archidamu" );
	deepEqual( Stem("architect"), "architect" );
	deepEqual( Stem("architecture"), "architectur" );
	deepEqual( Stem("archly"), "archli" );
	deepEqual( Stem("archness"), "arch" );
	deepEqual( Stem("arcu"), "arcu" );
	deepEqual( Stem("arde"), "ard" );
	deepEqual( Stem("arden"), "arden" );
	deepEqual( Stem("ardent"), "ardent" );
	deepEqual( Stem("ardour"), "ardour" );
	deepEqual( Stem("arduous"), "arduou" );
	deepEqual( Stem("are"), "ar" );
	deepEqual( Stem("area"), "area" );
	deepEqual( Stem("argal"), "argal" );
	deepEqual( Stem("argent"), "argent" );
	deepEqual( Stem("argier"), "argier" );
	deepEqual( Stem("argo"), "argo" );
	deepEqual( Stem("argos"), "argo" );
	deepEqual( Stem("argosies"), "argosi" );
	deepEqual( Stem("argosy"), "argosi" );
	deepEqual( Stem("argu"), "argu" );
	deepEqual( Stem("argue"), "argu" );
	deepEqual( Stem("argued"), "argu" );
	deepEqual( Stem("argues"), "argu" );
	deepEqual( Stem("arguing"), "argu" );
	deepEqual( Stem("argument"), "argument" );
	deepEqual( Stem("arguments"), "argument" );
	deepEqual( Stem("argus"), "argu" );
	deepEqual( Stem("ariachne"), "ariachn" );
	deepEqual( Stem("ariadne"), "ariadn" );
	deepEqual( Stem("ariane"), "arian" );
	deepEqual( Stem("ariel"), "ariel" );
	deepEqual( Stem("aries"), "ari" );
	deepEqual( Stem("aright"), "aright" );
	deepEqual( Stem("arinado"), "arinado" );
	deepEqual( Stem("arinies"), "arini" );
	deepEqual( Stem("arion"), "arion" );
	deepEqual( Stem("arise"), "aris" );
	deepEqual( Stem("arisen"), "arisen" );
	deepEqual( Stem("arises"), "aris" );
	deepEqual( Stem("ariseth"), "ariseth" );
	deepEqual( Stem("arising"), "aris" );
	deepEqual( Stem("aristocracy"), "aristocraci" );
	deepEqual( Stem("aristocrat"), "aristocrat" );
	deepEqual( Stem("aristocratic"), "aristocrat" );
	deepEqual( Stem("aristode"), "aristod" );
	deepEqual( Stem("aristos"), "aristo" );
	deepEqual( Stem("aristotle"), "aristotl" );
	deepEqual( Stem("arithmetic"), "arithmet" );
	deepEqual( Stem("arithmetician"), "arithmetician" );
	deepEqual( Stem("ark"), "ark" );
	deepEqual( Stem("arm"), "arm" );
	deepEqual( Stem("arma"), "arma" );
	deepEqual( Stem("armada"), "armada" );
	deepEqual( Stem("armado"), "armado" );
	deepEqual( Stem("armadoes"), "armado" );
	deepEqual( Stem("armageddon"), "armageddon" );
	deepEqual( Stem("armagnac"), "armagnac" );
	deepEqual( Stem("armament"), "armament" );
	deepEqual( Stem("arme"), "arm" );
	deepEqual( Stem("armed"), "arm" );
	deepEqual( Stem("armee"), "arme" );
	deepEqual( Stem("armenia"), "armenia" );
	deepEqual( Stem("armies"), "armi" );
	deepEqual( Stem("armigero"), "armigero" );
	deepEqual( Stem("arming"), "arm" );
	deepEqual( Stem("armipotent"), "armipot" );
	deepEqual( Stem("armor"), "armor" );
	deepEqual( Stem("armorial"), "armori" );
	deepEqual( Stem("armour"), "armour" );
	deepEqual( Stem("armourer"), "armour" );
	deepEqual( Stem("armourers"), "armour" );
	deepEqual( Stem("armours"), "armour" );
	deepEqual( Stem("armoury"), "armouri" );
	deepEqual( Stem("arms"), "arm" );
	deepEqual( Stem("army"), "armi" );
	deepEqual( Stem("arn"), "arn" );
	deepEqual( Stem("aroarer"), "aroar" );
	deepEqual( Stem("aroint"), "aroint" );
	deepEqual( Stem("aromatic"), "aromat" );
	deepEqual( Stem("arose"), "aros" );
	deepEqual( Stem("around"), "around" );
	deepEqual( Stem("arouse"), "arous" );
	deepEqual( Stem("aroused"), "arous" );
	deepEqual( Stem("arragon"), "arragon" );
	deepEqual( Stem("arraign"), "arraign" );
	deepEqual( Stem("arraigned"), "arraign" );
	deepEqual( Stem("arraigning"), "arraign" );
	deepEqual( Stem("arraignment"), "arraign" );
	deepEqual( Stem("arrange"), "arrang" );
	deepEqual( Stem("arranged"), "arrang" );
	deepEqual( Stem("arrangement"), "arrang" );
	deepEqual( Stem("arrangements"), "arrang" );
	deepEqual( Stem("arranger"), "arrang" );
	deepEqual( Stem("arranges"), "arrang" );
	deepEqual( Stem("arranging"), "arrang" );
	deepEqual( Stem("arrant"), "arrant" );
	deepEqual( Stem("arras"), "arra" );
	deepEqual( Stem("array"), "arrai" );
	deepEqual( Stem("arrayed"), "arrai" );
	deepEqual( Stem("arrear"), "arrear" );
	deepEqual( Stem("arrearages"), "arrearag" );
	deepEqual( Stem("arrest"), "arrest" );
	deepEqual( Stem("arrested"), "arrest" );
	deepEqual( Stem("arrests"), "arrest" );
	deepEqual( Stem("arriv"), "arriv" );
	deepEqual( Stem("arrival"), "arriv" );
	deepEqual( Stem("arrivance"), "arriv" );
	deepEqual( Stem("arrive"), "arriv" );
	deepEqual( Stem("arrived"), "arriv" );
	deepEqual( Stem("arrives"), "arriv" );
	deepEqual( Stem("arriving"), "arriv" );
	deepEqual( Stem("arrogance"), "arrog" );
	deepEqual( Stem("arrogancy"), "arrog" );
	deepEqual( Stem("arrogant"), "arrog" );
	deepEqual( Stem("arrow"), "arrow" );
	deepEqual( Stem("arrowroot"), "arrowroot" );
	deepEqual( Stem("arrows"), "arrow" );
	deepEqual( Stem("art"), "art" );
	deepEqual( Stem("artemidorus"), "artemidoru" );
	deepEqual( Stem("arteries"), "arteri" );
	deepEqual( Stem("artful"), "art" );
	deepEqual( Stem("arthur"), "arthur" );
	deepEqual( Stem("arthurs"), "arthur" );
	deepEqual( Stem("article"), "articl" );
	deepEqual( Stem("articled"), "articl" );
	deepEqual( Stem("articles"), "articl" );
	deepEqual( Stem("articulate"), "articul" );
	deepEqual( Stem("artifice"), "artific" );
	deepEqual( Stem("artificer"), "artific" );
	deepEqual( Stem("artifices"), "artific" );
	deepEqual( Stem("artificial"), "artifici" );
	deepEqual( Stem("artillery"), "artilleri" );
	deepEqual( Stem("artire"), "artir" );
	deepEqual( Stem("artist"), "artist" );
	deepEqual( Stem("artists"), "artist" );
	deepEqual( Stem("artless"), "artless" );
	deepEqual( Stem("artlessly"), "artlessli" );
	deepEqual( Stem("artlessness"), "artless" );
	deepEqual( Stem("artois"), "artoi" );
	deepEqual( Stem("arts"), "art" );
	deepEqual( Stem("artus"), "artu" );
	deepEqual( Stem("arviragus"), "arviragu" );
	deepEqual( Stem("as"), "a" );
	deepEqual( Stem("asaph"), "asaph" );
	deepEqual( Stem("asaying"), "asai" );
	deepEqual( Stem("ascanius"), "ascaniu" );
	deepEqual( Stem("ascend"), "ascend" );
	deepEqual( Stem("ascendancy"), "ascend" );
	deepEqual( Stem("ascended"), "ascend" );
	deepEqual( Stem("ascendency"), "ascend" );
	deepEqual( Stem("ascendeth"), "ascendeth" );
	deepEqual( Stem("ascending"), "ascend" );
	deepEqual( Stem("ascends"), "ascend" );
	deepEqual( Stem("ascension"), "ascens" );
	deepEqual( Stem("ascent"), "ascent" );
	deepEqual( Stem("ascertain"), "ascertain" );
	deepEqual( Stem("ascertained"), "ascertain" );
	deepEqual( Stem("ascribe"), "ascrib" );
	deepEqual( Stem("ascribes"), "ascrib" );
	deepEqual( Stem("ash"), "ash" );
	deepEqual( Stem("asham"), "asham" );
	deepEqual( Stem("ashamed"), "asham" );
	deepEqual( Stem("ashantee"), "ashante" );
	deepEqual( Stem("asher"), "asher" );
	deepEqual( Stem("ashes"), "ash" );
	deepEqual( Stem("ashford"), "ashford" );
	deepEqual( Stem("ashore"), "ashor" );
	deepEqual( Stem("ashouting"), "ashout" );
	deepEqual( Stem("ashy"), "ashi" );
	deepEqual( Stem("asia"), "asia" );
	deepEqual( Stem("aside"), "asid" );
	deepEqual( Stem("ask"), "ask" );
	deepEqual( Stem("askance"), "askanc" );
	deepEqual( Stem("asked"), "ask" );
	deepEqual( Stem("asker"), "asker" );
	deepEqual( Stem("asketh"), "asketh" );
	deepEqual( Stem("asking"), "ask" );
	deepEqual( Stem("asks"), "ask" );
	deepEqual( Stem("aslant"), "aslant" );
	deepEqual( Stem("asleep"), "asleep" );
	deepEqual( Stem("asmath"), "asmath" );
	deepEqual( Stem("asp"), "asp" );
	deepEqual( Stem("aspect"), "aspect" );
	deepEqual( Stem("aspects"), "aspect" );
	deepEqual( Stem("aspen"), "aspen" );
	deepEqual( Stem("asperity"), "asper" );
	deepEqual( Stem("aspersion"), "aspers" );
	deepEqual( Stem("asphalt"), "asphalt" );
	deepEqual( Stem("aspic"), "aspic" );
	deepEqual( Stem("aspicious"), "aspici" );
	deepEqual( Stem("aspics"), "aspic" );
	deepEqual( Stem("aspir"), "aspir" );
	deepEqual( Stem("aspiration"), "aspir" );
	deepEqual( Stem("aspire"), "aspir" );
	deepEqual( Stem("aspiring"), "aspir" );
	deepEqual( Stem("asquint"), "asquint" );
	deepEqual( Stem("ass"), "ass" );
	deepEqual( Stem("assail"), "assail" );
	deepEqual( Stem("assailable"), "assail" );
	deepEqual( Stem("assailant"), "assail" );
	deepEqual( Stem("assailants"), "assail" );
	deepEqual( Stem("assailed"), "assail" );
	deepEqual( Stem("assaileth"), "assaileth" );
	deepEqual( Stem("assailing"), "assail" );
	deepEqual( Stem("assails"), "assail" );
	deepEqual( Stem("assassinate"), "assassin" );
	deepEqual( Stem("assassination"), "assassin" );
	deepEqual( Stem("assault"), "assault" );
	deepEqual( Stem("assaulted"), "assault" );
	deepEqual( Stem("assaults"), "assault" );
	deepEqual( Stem("assay"), "assai" );
	deepEqual( Stem("assaye"), "assay" );
	deepEqual( Stem("assaying"), "assai" );
	deepEqual( Stem("assays"), "assai" );
	deepEqual( Stem("assemblance"), "assembl" );
	deepEqual( Stem("assemble"), "assembl" );
	deepEqual( Stem("assembled"), "assembl" );
	deepEqual( Stem("assemblies"), "assembli" );
	deepEqual( Stem("assembly"), "assembli" );
	deepEqual( Stem("assent"), "assent" );
	deepEqual( Stem("assented"), "assent" );
	deepEqual( Stem("assert"), "assert" );
	deepEqual( Stem("asserted"), "assert" );
	deepEqual( Stem("asserting"), "assert" );
	deepEqual( Stem("assertion"), "assert" );
	deepEqual( Stem("asses"), "ass" );
	deepEqual( Stem("assets"), "asset" );
	deepEqual( Stem("assez"), "assez" );
	deepEqual( Stem("assiduity"), "assidu" );
	deepEqual( Stem("assiduously"), "assidu" );
	deepEqual( Stem("assign"), "assign" );
	deepEqual( Stem("assigned"), "assign" );
	deepEqual( Stem("assignees"), "assigne" );
	deepEqual( Stem("assigns"), "assign" );
	deepEqual( Stem("assinico"), "assinico" );
	deepEqual( Stem("assist"), "assist" );
	deepEqual( Stem("assistance"), "assist" );
	deepEqual( Stem("assistances"), "assist" );
	deepEqual( Stem("assistant"), "assist" );
	deepEqual( Stem("assistants"), "assist" );
	deepEqual( Stem("assisted"), "assist" );
	deepEqual( Stem("assisting"), "assist" );
	deepEqual( Stem("assizes"), "assiz" );
	deepEqual( Stem("associate"), "associ" );
	deepEqual( Stem("associated"), "associ" );
	deepEqual( Stem("associates"), "associ" );
	deepEqual( Stem("association"), "associ" );
	deepEqual( Stem("associations"), "associ" );
	deepEqual( Stem("assuage"), "assuag" );
	deepEqual( Stem("assubjugate"), "assubjug" );
	deepEqual( Stem("assum"), "assum" );
	deepEqual( Stem("assume"), "assum" );
	deepEqual( Stem("assumed"), "assum" );
	deepEqual( Stem("assumes"), "assum" );
	deepEqual( Stem("assuming"), "assum" );
	deepEqual( Stem("assumption"), "assumpt" );
	deepEqual( Stem("assumptions"), "assumpt" );
	deepEqual( Stem("assur"), "assur" );
	deepEqual( Stem("assurance"), "assur" );
	deepEqual( Stem("assure"), "assur" );
	deepEqual( Stem("assured"), "assur" );
	deepEqual( Stem("assuredly"), "assuredli" );
	deepEqual( Stem("assures"), "assur" );
	deepEqual( Stem("assuring"), "assur" );
	deepEqual( Stem("assyrian"), "assyrian" );
	deepEqual( Stem("asthmatic"), "asthmat" );
	deepEqual( Stem("astir"), "astir" );
	deepEqual( Stem("astley"), "astlei" );
	deepEqual( Stem("astonish"), "astonish" );
	deepEqual( Stem("astonished"), "astonish" );
	deepEqual( Stem("astonishing"), "astonish" );
	deepEqual( Stem("astonishment"), "astonish" );
	deepEqual( Stem("astounding"), "astound" );
	deepEqual( Stem("astraea"), "astraea" );
	deepEqual( Stem("astray"), "astrai" );
	deepEqual( Stem("astrea"), "astrea" );
	deepEqual( Stem("astronomer"), "astronom" );
	deepEqual( Stem("astronomers"), "astronom" );
	deepEqual( Stem("astronomical"), "astronom" );
	deepEqual( Stem("astronomy"), "astronomi" );
	deepEqual( Stem("astute"), "astut" );
	deepEqual( Stem("astuteness"), "astut" );
	deepEqual( Stem("asunder"), "asund" );
	deepEqual( Stem("asylum"), "asylum" );
	deepEqual( Stem("at"), "at" );
	deepEqual( Stem("atalanta"), "atalanta" );
	deepEqual( Stem("ate"), "at" );
	deepEqual( Stem("ates"), "at" );
	deepEqual( Stem("atheists"), "atheist" );
	deepEqual( Stem("athene"), "athen" );
	deepEqual( Stem("athenian"), "athenian" );
	deepEqual( Stem("athenians"), "athenian" );
	deepEqual( Stem("athens"), "athen" );
	deepEqual( Stem("athinking"), "athink" );
	deepEqual( Stem("athletic"), "athlet" );
	deepEqual( Stem("athol"), "athol" );
	deepEqual( Stem("athversary"), "athversari" );
	deepEqual( Stem("athwart"), "athwart" );
	deepEqual( Stem("atlantic"), "atlant" );
	deepEqual( Stem("atlas"), "atla" );
	deepEqual( Stem("atmosphere"), "atmospher" );
	deepEqual( Stem("atomies"), "atomi" );
	deepEqual( Stem("atomy"), "atomi" );
	deepEqual( Stem("atone"), "aton" );
	deepEqual( Stem("atonement"), "aton" );
	deepEqual( Stem("atonements"), "aton" );
	deepEqual( Stem("atrocious"), "atroci" );
	deepEqual( Stem("atropos"), "atropo" );
	deepEqual( Stem("attach"), "attach" );
	deepEqual( Stem("attache"), "attach" );
	deepEqual( Stem("attached"), "attach" );
	deepEqual( Stem("attaches"), "attach" );
	deepEqual( Stem("attaching"), "attach" );
	deepEqual( Stem("attachment"), "attach" );
	deepEqual( Stem("attachments"), "attach" );
	deepEqual( Stem("attack"), "attack" );
	deepEqual( Stem("attacked"), "attack" );
	deepEqual( Stem("attacks"), "attack" );
	deepEqual( Stem("attain"), "attain" );
	deepEqual( Stem("attainder"), "attaind" );
	deepEqual( Stem("attained"), "attain" );
	deepEqual( Stem("attaining"), "attain" );
	deepEqual( Stem("attains"), "attain" );
	deepEqual( Stem("attaint"), "attaint" );
	deepEqual( Stem("attainted"), "attaint" );
	deepEqual( Stem("attainture"), "attaintur" );
	deepEqual( Stem("attempt"), "attempt" );
	deepEqual( Stem("attemptable"), "attempt" );
	deepEqual( Stem("attempted"), "attempt" );
	deepEqual( Stem("attempting"), "attempt" );
	deepEqual( Stem("attempts"), "attempt" );
	deepEqual( Stem("attend"), "attend" );
	deepEqual( Stem("attendance"), "attend" );
	deepEqual( Stem("attendant"), "attend" );
	deepEqual( Stem("attendants"), "attend" );
	deepEqual( Stem("attended"), "attend" );
	deepEqual( Stem("attendents"), "attend" );
	deepEqual( Stem("attendeth"), "attendeth" );
	deepEqual( Stem("attending"), "attend" );
	deepEqual( Stem("attends"), "attend" );
	deepEqual( Stem("attent"), "attent" );
	deepEqual( Stem("attention"), "attent" );
	deepEqual( Stem("attentions"), "attent" );
	deepEqual( Stem("attentive"), "attent" );
	deepEqual( Stem("attentivenes"), "attentiven" );
	deepEqual( Stem("attenuated"), "attenu" );
	deepEqual( Stem("attest"), "attest" );
	deepEqual( Stem("attested"), "attest" );
	deepEqual( Stem("attir"), "attir" );
	deepEqual( Stem("attire"), "attir" );
	deepEqual( Stem("attired"), "attir" );
	deepEqual( Stem("attires"), "attir" );
	deepEqual( Stem("attiring"), "attir" );
	deepEqual( Stem("attitude"), "attitud" );
	deepEqual( Stem("attitudes"), "attitud" );
	deepEqual( Stem("attorney"), "attornei" );
	deepEqual( Stem("attorneyed"), "attornei" );
	deepEqual( Stem("attorneys"), "attornei" );
	deepEqual( Stem("attorneyship"), "attorneyship" );
	deepEqual( Stem("attract"), "attract" );
	deepEqual( Stem("attracted"), "attract" );
	deepEqual( Stem("attraction"), "attract" );
	deepEqual( Stem("attractions"), "attract" );
	deepEqual( Stem("attractive"), "attract" );
	deepEqual( Stem("attracts"), "attract" );
	deepEqual( Stem("attributable"), "attribut" );
	deepEqual( Stem("attribute"), "attribut" );
	deepEqual( Stem("attributed"), "attribut" );
	deepEqual( Stem("attributes"), "attribut" );
	deepEqual( Stem("attribution"), "attribut" );
	deepEqual( Stem("attributive"), "attribut" );
	deepEqual( Stem("atwain"), "atwain" );
	deepEqual( Stem("au"), "au" );
	deepEqual( Stem("aubrey"), "aubrei" );
	deepEqual( Stem("auburn"), "auburn" );
	deepEqual( Stem("auction"), "auction" );
	deepEqual( Stem("auctioneer"), "auction" );
	deepEqual( Stem("aucun"), "aucun" );
	deepEqual( Stem("aud"), "aud" );
	deepEqual( Stem("audacious"), "audaci" );
	deepEqual( Stem("audaciously"), "audaci" );
	deepEqual( Stem("audacity"), "audac" );
	deepEqual( Stem("audible"), "audibl" );
	deepEqual( Stem("audience"), "audienc" );
	deepEqual( Stem("audiences"), "audienc" );
	deepEqual( Stem("audis"), "audi" );
	deepEqual( Stem("audit"), "audit" );
	deepEqual( Stem("auditor"), "auditor" );
	deepEqual( Stem("auditors"), "auditor" );
	deepEqual( Stem("auditory"), "auditori" );
	deepEqual( Stem("audre"), "audr" );
	deepEqual( Stem("audrey"), "audrei" );
	deepEqual( Stem("aufidius"), "aufidiu" );
	deepEqual( Stem("aufidiuses"), "aufidius" );
	deepEqual( Stem("auger"), "auger" );
	deepEqual( Stem("aught"), "aught" );
	deepEqual( Stem("augment"), "augment" );
	deepEqual( Stem("augmentation"), "augment" );
	deepEqual( Stem("augmented"), "augment" );
	deepEqual( Stem("augmenting"), "augment" );
	deepEqual( Stem("augur"), "augur" );
	deepEqual( Stem("augured"), "augur" );
	deepEqual( Stem("augurer"), "augur" );
	deepEqual( Stem("augurers"), "augur" );
	deepEqual( Stem("augures"), "augur" );
	deepEqual( Stem("auguring"), "augur" );
	deepEqual( Stem("augurs"), "augur" );
	deepEqual( Stem("augury"), "auguri" );
	deepEqual( Stem("august"), "august" );
	deepEqual( Stem("augustus"), "augustu" );
	deepEqual( Stem("auld"), "auld" );
	deepEqual( Stem("aumerle"), "aumerl" );
	deepEqual( Stem("aunchient"), "aunchient" );
	deepEqual( Stem("aunt"), "aunt" );
	deepEqual( Stem("aunts"), "aunt" );
	deepEqual( Stem("aunty"), "aunti" );
	deepEqual( Stem("auralia"), "auralia" );
	deepEqual( Stem("aurelius"), "aureliu" );
	deepEqual( Stem("auricular"), "auricular" );
	deepEqual( Stem("aurora"), "aurora" );
	deepEqual( Stem("aus"), "au" );
	deepEqual( Stem("auspices"), "auspic" );
	deepEqual( Stem("auspicious"), "auspici" );
	deepEqual( Stem("aussi"), "aussi" );
	deepEqual( Stem("austere"), "auster" );
	deepEqual( Stem("austerely"), "auster" );
	deepEqual( Stem("austereness"), "auster" );
	deepEqual( Stem("austerity"), "auster" );
	deepEqual( Stem("austerlitz"), "austerlitz" );
	deepEqual( Stem("australasia"), "australasia" );
	deepEqual( Stem("austria"), "austria" );
	deepEqual( Stem("austrian"), "austrian" );
	deepEqual( Stem("austrians"), "austrian" );
	deepEqual( Stem("aut"), "aut" );
	deepEqual( Stem("authentic"), "authent" );
	deepEqual( Stem("author"), "author" );
	deepEqual( Stem("authoress"), "authoress" );
	deepEqual( Stem("authorities"), "author" );
	deepEqual( Stem("authority"), "author" );
	deepEqual( Stem("authorized"), "author" );
	deepEqual( Stem("authorizing"), "author" );
	deepEqual( Stem("authors"), "author" );
	deepEqual( Stem("autograph"), "autograph" );
	deepEqual( Stem("autolycus"), "autolycu" );
	deepEqual( Stem("autre"), "autr" );
	deepEqual( Stem("autumn"), "autumn" );
	deepEqual( Stem("auvergne"), "auvergn" );
	deepEqual( Stem("aux"), "aux" );
	deepEqual( Stem("avail"), "avail" );
	deepEqual( Stem("available"), "avail" );
	deepEqual( Stem("avails"), "avail" );
	deepEqual( Stem("avance"), "avanc" );
	deepEqual( Stem("avarice"), "avaric" );
	deepEqual( Stem("avaricious"), "avarici" );
	deepEqual( Stem("avaunt"), "avaunt" );
	deepEqual( Stem("ave"), "av" );
	deepEqual( Stem("avec"), "avec" );
	deepEqual( Stem("aveng"), "aveng" );
	deepEqual( Stem("avenge"), "aveng" );
	deepEqual( Stem("avenged"), "aveng" );
	deepEqual( Stem("avenging"), "aveng" );
	deepEqual( Stem("avenue"), "avenu" );
	deepEqual( Stem("avernus"), "avernu" );
	deepEqual( Stem("averred"), "aver" );
	deepEqual( Stem("averring"), "aver" );
	deepEqual( Stem("avers"), "aver" );
	deepEqual( Stem("averse"), "avers" );
	deepEqual( Stem("aversion"), "avers" );
	deepEqual( Stem("avert"), "avert" );
	deepEqual( Stem("averted"), "avert" );
	deepEqual( Stem("aves"), "av" );
	deepEqual( Stem("avesnes"), "avesn" );
	deepEqual( Stem("avez"), "avez" );
	deepEqual( Stem("avis"), "avi" );
	deepEqual( Stem("avocation"), "avoc" );
	deepEqual( Stem("avocations"), "avoc" );
	deepEqual( Stem("avoid"), "avoid" );
	deepEqual( Stem("avoided"), "avoid" );
	deepEqual( Stem("avoiding"), "avoid" );
	deepEqual( Stem("avoids"), "avoid" );
	deepEqual( Stem("avoir"), "avoir" );
	deepEqual( Stem("avoirdupois"), "avoirdupoi" );
	deepEqual( Stem("avouch"), "avouch" );
	deepEqual( Stem("avouched"), "avouch" );
	deepEqual( Stem("avouches"), "avouch" );
	deepEqual( Stem("avouchment"), "avouch" );
	deepEqual( Stem("avow"), "avow" );
	deepEqual( Stem("avowal"), "avow" );
	deepEqual( Stem("avowed"), "avow" );
	deepEqual( Stem("avowing"), "avow" );
	deepEqual( Stem("aw"), "aw" );
	deepEqual( Stem("await"), "await" );
	deepEqual( Stem("awaited"), "await" );
	deepEqual( Stem("awaiting"), "await" );
	deepEqual( Stem("awaits"), "await" );
	deepEqual( Stem("awak"), "awak" );
	deepEqual( Stem("awake"), "awak" );
	deepEqual( Stem("awaked"), "awak" );
	deepEqual( Stem("awaken"), "awaken" );
	deepEqual( Stem("awakened"), "awaken" );
	deepEqual( Stem("awakening"), "awaken" );
	deepEqual( Stem("awakens"), "awaken" );
	deepEqual( Stem("awakes"), "awak" );
	deepEqual( Stem("awaking"), "awak" );
	deepEqual( Stem("award"), "award" );
	deepEqual( Stem("awarded"), "award" );
	deepEqual( Stem("awards"), "award" );
	deepEqual( Stem("aware"), "awar" );
	deepEqual( Stem("awasy"), "awasi" );
	deepEqual( Stem("away"), "awai" );
	deepEqual( Stem("awe"), "aw" );
	deepEqual( Stem("aweary"), "aweari" );
	deepEqual( Stem("awed"), "aw" );
	deepEqual( Stem("aweless"), "aweless" );
	deepEqual( Stem("awes"), "aw" );
	deepEqual( Stem("awful"), "aw" );
	deepEqual( Stem("awfully"), "awfulli" );
	deepEqual( Stem("awhile"), "awhil" );
	deepEqual( Stem("awkward"), "awkward" );
	deepEqual( Stem("awkwardness"), "awkward" );
	deepEqual( Stem("awl"), "awl" );
	deepEqual( Stem("awning"), "awn" );
	deepEqual( Stem("awnings"), "awn" );
	deepEqual( Stem("awoke"), "awok" );
	deepEqual( Stem("awooing"), "awoo" );
	deepEqual( Stem("awork"), "awork" );
	deepEqual( Stem("awry"), "awri" );
	deepEqual( Stem("axe"), "ax" );
	deepEqual( Stem("axle"), "axl" );
	deepEqual( Stem("axletree"), "axletre" );
	deepEqual( Stem("ay"), "ai" );
	deepEqual( Stem("aye"), "ay" );
	deepEqual( Stem("ayez"), "ayez" );
	deepEqual( Stem("ayli"), "ayli" );
	deepEqual( Stem("aynt"), "aynt" );
	deepEqual( Stem("azur"), "azur" );
	deepEqual( Stem("azure"), "azur" );
	deepEqual( Stem("b"), "b" );
	deepEqual( Stem("ba"), "ba" );
	deepEqual( Stem("baa"), "baa" );
	deepEqual( Stem("babbl"), "babbl" );
	deepEqual( Stem("babble"), "babbl" );
	deepEqual( Stem("babbling"), "babbl" );
	deepEqual( Stem("babby"), "babbi" );
	deepEqual( Stem("babe"), "babe" );
	deepEqual( Stem("babes"), "babe" );
	deepEqual( Stem("babies"), "babi" );
	deepEqual( Stem("baboon"), "baboon" );
	deepEqual( Stem("baboons"), "baboon" );
	deepEqual( Stem("baby"), "babi" );
	deepEqual( Stem("babylon"), "babylon" );
	deepEqual( Stem("bacare"), "bacar" );
	deepEqual( Stem("bacchanalian"), "bacchanalian" );
	deepEqual( Stem("bacchanals"), "bacchan" );
	deepEqual( Stem("bacchus"), "bacchu" );
	deepEqual( Stem("bach"), "bach" );
	deepEqual( Stem("bachelor"), "bachelor" );
	deepEqual( Stem("bachelorhood"), "bachelorhood" );
	deepEqual( Stem("bachelors"), "bachelor" );
	deepEqual( Stem("back"), "back" );
	deepEqual( Stem("backbite"), "backbit" );
	deepEqual( Stem("backbitten"), "backbitten" );
	deepEqual( Stem("backboard"), "backboard" );
	deepEqual( Stem("backed"), "back" );
	deepEqual( Stem("backgammon"), "backgammon" );
	deepEqual( Stem("background"), "background" );
	deepEqual( Stem("backing"), "back" );
	deepEqual( Stem("backs"), "back" );
	deepEqual( Stem("backward"), "backward" );
	deepEqual( Stem("backwardly"), "backwardli" );
	deepEqual( Stem("backwards"), "backward" );
	deepEqual( Stem("bacon"), "bacon" );
	deepEqual( Stem("bacons"), "bacon" );
	deepEqual( Stem("bad"), "bad" );
	deepEqual( Stem("bade"), "bade" );
	deepEqual( Stem("baden"), "baden" );
	deepEqual( Stem("badge"), "badg" );
	deepEqual( Stem("badged"), "badg" );
	deepEqual( Stem("badges"), "badg" );
	deepEqual( Stem("badly"), "badli" );
	deepEqual( Stem("badness"), "bad" );
	deepEqual( Stem("baes"), "bae" );
	deepEqual( Stem("baffl"), "baffl" );
	deepEqual( Stem("baffle"), "baffl" );
	deepEqual( Stem("baffled"), "baffl" );
	deepEqual( Stem("bag"), "bag" );
	deepEqual( Stem("baggage"), "baggag" );
	deepEqual( Stem("baggidge"), "baggidg" );
	deepEqual( Stem("bagging"), "bag" );
	deepEqual( Stem("bagmen"), "bagmen" );
	deepEqual( Stem("bagot"), "bagot" );
	deepEqual( Stem("bagpipe"), "bagpip" );
	deepEqual( Stem("bagpipes"), "bagpip" );
	deepEqual( Stem("bags"), "bag" );
	deepEqual( Stem("bagshot"), "bagshot" );
	deepEqual( Stem("bagwig"), "bagwig" );
	deepEqual( Stem("bah"), "bah" );
	deepEqual( Stem("bahawder"), "bahawd" );
	deepEqual( Stem("bail"), "bail" );
	deepEqual( Stem("bailey"), "bailei" );
	deepEqual( Stem("bailiff"), "bailiff" );
	deepEqual( Stem("bailiffs"), "bailiff" );
	deepEqual( Stem("baillez"), "baillez" );
	deepEqual( Stem("baily"), "baili" );
	deepEqual( Stem("baisant"), "baisant" );
	deepEqual( Stem("baisees"), "baise" );
	deepEqual( Stem("baiser"), "baiser" );
	deepEqual( Stem("bait"), "bait" );
	deepEqual( Stem("baited"), "bait" );
	deepEqual( Stem("baiting"), "bait" );
	deepEqual( Stem("baitings"), "bait" );
	deepEqual( Stem("baits"), "bait" );
	deepEqual( Stem("bajazet"), "bajazet" );
	deepEqual( Stem("bajocchi"), "bajocchi" );
	deepEqual( Stem("bak"), "bak" );
	deepEqual( Stem("bake"), "bake" );
	deepEqual( Stem("baked"), "bake" );
	deepEqual( Stem("baker"), "baker" );
	deepEqual( Stem("bakers"), "baker" );
	deepEqual( Stem("bakes"), "bake" );
	deepEqual( Stem("baking"), "bake" );
	deepEqual( Stem("bal"), "bal" );
	deepEqual( Stem("balanc"), "balanc" );
	deepEqual( Stem("balance"), "balanc" );
	deepEqual( Stem("balanced"), "balanc" );
	deepEqual( Stem("balancing"), "balanc" );
	deepEqual( Stem("balcony"), "balconi" );
	deepEqual( Stem("bald"), "bald" );
	deepEqual( Stem("baldaquin"), "baldaquin" );
	deepEqual( Stem("baldaquins"), "baldaquin" );
	deepEqual( Stem("baldheaded"), "baldhead" );
	deepEqual( Stem("baldrick"), "baldrick" );
	deepEqual( Stem("bale"), "bale" );
	deepEqual( Stem("baleful"), "bale" );
	deepEqual( Stem("balefully"), "balefulli" );
	deepEqual( Stem("balgony"), "balgoni" );
	deepEqual( Stem("balk"), "balk" );
	deepEqual( Stem("balked"), "balk" );
	deepEqual( Stem("ball"), "ball" );
	deepEqual( Stem("ballad"), "ballad" );
	deepEqual( Stem("ballads"), "ballad" );
	deepEqual( Stem("ballast"), "ballast" );
	deepEqual( Stem("ballasting"), "ballast" );
	deepEqual( Stem("ballet"), "ballet" );
	deepEqual( Stem("ballinafad"), "ballinafad" );
	deepEqual( Stem("ballinasloe"), "ballinaslo" );
	deepEqual( Stem("ballow"), "ballow" );
	deepEqual( Stem("balls"), "ball" );
	deepEqual( Stem("ballymalony"), "ballymaloni" );
	deepEqual( Stem("balm"), "balm" );
	deepEqual( Stem("balms"), "balm" );
	deepEqual( Stem("balmy"), "balmi" );
	deepEqual( Stem("balsam"), "balsam" );
	deepEqual( Stem("balsamum"), "balsamum" );
	deepEqual( Stem("balth"), "balth" );
	deepEqual( Stem("balthasar"), "balthasar" );
	deepEqual( Stem("balthazar"), "balthazar" );
	deepEqual( Stem("bamboo"), "bamboo" );
	deepEqual( Stem("bames"), "bame" );
	deepEqual( Stem("bampfylde"), "bampfyld" );
	deepEqual( Stem("ban"), "ban" );
	deepEqual( Stem("banbury"), "banburi" );
	deepEqual( Stem("band"), "band" );
	deepEqual( Stem("bandanna"), "bandanna" );
	deepEqual( Stem("bandbox"), "bandbox" );
	deepEqual( Stem("bandboxes"), "bandbox" );
	deepEqual( Stem("bandied"), "bandi" );
	deepEqual( Stem("banding"), "band" );
	deepEqual( Stem("bandit"), "bandit" );
	deepEqual( Stem("banditti"), "banditti" );
	deepEqual( Stem("banditto"), "banditto" );
	deepEqual( Stem("bands"), "band" );
	deepEqual( Stem("bandy"), "bandi" );
	deepEqual( Stem("bandying"), "bandi" );
	deepEqual( Stem("bane"), "bane" );
	deepEqual( Stem("banes"), "bane" );
	deepEqual( Stem("bang"), "bang" );
	deepEqual( Stem("banging"), "bang" );
	deepEqual( Stem("bangles"), "bangl" );
	deepEqual( Stem("bangor"), "bangor" );
	deepEqual( Stem("banish"), "banish" );
	deepEqual( Stem("banished"), "banish" );
	deepEqual( Stem("banishers"), "banish" );
	deepEqual( Stem("banishing"), "banish" );
	deepEqual( Stem("banishment"), "banish" );
	deepEqual( Stem("banister"), "banist" );
	deepEqual( Stem("banisters"), "banist" );
	deepEqual( Stem("bank"), "bank" );
	deepEqual( Stem("banker"), "banker" );
	deepEqual( Stem("bankers"), "banker" );
	deepEqual( Stem("banking"), "bank" );
	deepEqual( Stem("bankrout"), "bankrout" );
	deepEqual( Stem("bankrupt"), "bankrupt" );
	deepEqual( Stem("bankruptcy"), "bankruptci" );
	deepEqual( Stem("bankrupts"), "bankrupt" );
	deepEqual( Stem("banks"), "bank" );
	deepEqual( Stem("banner"), "banner" );
	deepEqual( Stem("bannerets"), "banneret" );
	deepEqual( Stem("banners"), "banner" );
	deepEqual( Stem("banning"), "ban" );
	deepEqual( Stem("banns"), "bann" );
	deepEqual( Stem("banquet"), "banquet" );
	deepEqual( Stem("banqueted"), "banquet" );
	deepEqual( Stem("banqueting"), "banquet" );
	deepEqual( Stem("banquets"), "banquet" );
	deepEqual( Stem("banquo"), "banquo" );
	deepEqual( Stem("bans"), "ban" );
	deepEqual( Stem("banter"), "banter" );
	deepEqual( Stem("bantered"), "banter" );
	deepEqual( Stem("bantering"), "banter" );
	deepEqual( Stem("bantings"), "bant" );
	deepEqual( Stem("banyhann"), "banyhann" );
	deepEqual( Stem("baptism"), "baptism" );
	deepEqual( Stem("baptista"), "baptista" );
	deepEqual( Stem("baptiz"), "baptiz" );
	deepEqual( Stem("bar"), "bar" );
	deepEqual( Stem("barbara"), "barbara" );
	deepEqual( Stem("barbarian"), "barbarian" );
	deepEqual( Stem("barbarians"), "barbarian" );
	deepEqual( Stem("barbarism"), "barbar" );
	deepEqual( Stem("barbarous"), "barbar" );
	deepEqual( Stem("barbary"), "barbari" );
	deepEqual( Stem("barbason"), "barbason" );
	deepEqual( Stem("barbed"), "barb" );
	deepEqual( Stem("barber"), "barber" );
	deepEqual( Stem("barbermonger"), "barbermong" );
	deepEqual( Stem("barclay"), "barclai" );
	deepEqual( Stem("bard"), "bard" );
	deepEqual( Stem("bardolph"), "bardolph" );
	deepEqual( Stem("bards"), "bard" );
	deepEqual( Stem("bare"), "bare" );
	deepEqual( Stem("bareacres"), "bareacr" );
	deepEqual( Stem("barebones"), "barebon" );
	deepEqual( Stem("bared"), "bare" );
	deepEqual( Stem("barefac"), "barefac" );
	deepEqual( Stem("barefaced"), "barefac" );
	deepEqual( Stem("barefoot"), "barefoot" );
	deepEqual( Stem("bareheaded"), "barehead" );
	deepEqual( Stem("barely"), "bare" );
	deepEqual( Stem("bareness"), "bare" );
	deepEqual( Stem("barful"), "bar" );
	deepEqual( Stem("bargain"), "bargain" );
	deepEqual( Stem("bargainers"), "bargain" );
	deepEqual( Stem("bargaining"), "bargain" );
	deepEqual( Stem("bargains"), "bargain" );
	deepEqual( Stem("barge"), "barg" );
	deepEqual( Stem("bargeman"), "bargeman" );
	deepEqual( Stem("barges"), "barg" );
	deepEqual( Stem("bargulus"), "bargulu" );
	deepEqual( Stem("baring"), "bare" );
	deepEqual( Stem("bark"), "bark" );
	deepEqual( Stem("barking"), "bark" );
	deepEqual( Stem("barkloughly"), "barkloughli" );
	deepEqual( Stem("barks"), "bark" );
	deepEqual( Stem("barky"), "barki" );
	deepEqual( Stem("barley"), "barlei" );
	deepEqual( Stem("barm"), "barm" );
	deepEqual( Stem("barn"), "barn" );
	deepEqual( Stem("barnacles"), "barnacl" );
	deepEqual( Stem("barnardine"), "barnardin" );
	deepEqual( Stem("barne"), "barn" );
	deepEqual( Stem("barnes"), "barn" );
	deepEqual( Stem("barnet"), "barnet" );
	deepEqual( Stem("barns"), "barn" );
	deepEqual( Stem("baron"), "baron" );
	deepEqual( Stem("baroness"), "baro" );
	deepEqual( Stem("baronet"), "baronet" );
	deepEqual( Stem("baronetage"), "baronetag" );
	deepEqual( Stem("baronetcy"), "baronetci" );
	deepEqual( Stem("baronets"), "baronet" );
	deepEqual( Stem("barons"), "baron" );
	deepEqual( Stem("barony"), "baroni" );
	deepEqual( Stem("barouche"), "barouch" );
	deepEqual( Stem("barr"), "barr" );
	deepEqual( Stem("barrabas"), "barraba" );
	deepEqual( Stem("barrack"), "barrack" );
	deepEqual( Stem("barracks"), "barrack" );
	deepEqual( Stem("barred"), "bar" );
	deepEqual( Stem("barrel"), "barrel" );
	deepEqual( Stem("barrelled"), "barrel" );
	deepEqual( Stem("barrels"), "barrel" );
	deepEqual( Stem("barren"), "barren" );
	deepEqual( Stem("barrenly"), "barrenli" );
	deepEqual( Stem("barrenness"), "barren" );
	deepEqual( Stem("barri"), "barri" );
	deepEqual( Stem("barricado"), "barricado" );
	deepEqual( Stem("barricadoes"), "barricado" );
	deepEqual( Stem("barrier"), "barrier" );
	deepEqual( Stem("barril"), "barril" );
	deepEqual( Stem("barrister"), "barrist" );
	deepEqual( Stem("barristers"), "barrist" );
	deepEqual( Stem("barrow"), "barrow" );
	deepEqual( Stem("bars"), "bar" );
	deepEqual( Stem("barson"), "barson" );
	deepEqual( Stem("bart"), "bart" );
	deepEqual( Stem("barter"), "barter" );
	deepEqual( Stem("bartering"), "barter" );
	deepEqual( Stem("bartholomew"), "bartholomew" );
	deepEqual( Stem("bas"), "ba" );
	deepEqual( Stem("basan"), "basan" );
	deepEqual( Stem("base"), "base" );
	deepEqual( Stem("baseless"), "baseless" );
	deepEqual( Stem("basely"), "base" );
	deepEqual( Stem("basement"), "basement" );
	deepEqual( Stem("baseness"), "base" );
	deepEqual( Stem("baser"), "baser" );
	deepEqual( Stem("bases"), "base" );
	deepEqual( Stem("basest"), "basest" );
	deepEqual( Stem("bashful"), "bash" );
	deepEqual( Stem("bashfulness"), "bash" );
	deepEqual( Stem("basilisco"), "basilisco" );
	deepEqual( Stem("basilisk"), "basilisk" );
	deepEqual( Stem("basilisks"), "basilisk" );
	deepEqual( Stem("basimecu"), "basimecu" );
	deepEqual( Stem("basin"), "basin" );
	deepEqual( Stem("basingstoke"), "basingstok" );
	deepEqual( Stem("basins"), "basin" );
	deepEqual( Stem("basis"), "basi" );
	deepEqual( Stem("bask"), "bask" );
	deepEqual( Stem("basked"), "bask" );
	deepEqual( Stem("basket"), "basket" );
	deepEqual( Stem("baskets"), "basket" );
	deepEqual( Stem("bass"), "bass" );
	deepEqual( Stem("bassanio"), "bassanio" );
	deepEqual( Stem("basset"), "basset" );
	deepEqual( Stem("bassianus"), "bassianu" );
	deepEqual( Stem("bassoon"), "bassoon" );
	deepEqual( Stem("basta"), "basta" );
	deepEqual( Stem("bastard"), "bastard" );
	deepEqual( Stem("bastardizing"), "bastard" );
	deepEqual( Stem("bastardly"), "bastardli" );
	deepEqual( Stem("bastards"), "bastard" );
	deepEqual( Stem("bastardy"), "bastardi" );
	deepEqual( Stem("basted"), "bast" );
	deepEqual( Stem("bastes"), "bast" );
	deepEqual( Stem("bastinado"), "bastinado" );
	deepEqual( Stem("basting"), "bast" );
	deepEqual( Stem("bat"), "bat" );
	deepEqual( Stem("batailles"), "batail" );
	deepEqual( Stem("batavier"), "batavi" );
	deepEqual( Stem("batch"), "batch" );
	deepEqual( Stem("bate"), "bate" );
	deepEqual( Stem("bated"), "bate" );
	deepEqual( Stem("bates"), "bate" );
	deepEqual( Stem("bath"), "bath" );
	deepEqual( Stem("bathe"), "bath" );
	deepEqual( Stem("bathed"), "bath" );
	deepEqual( Stem("bathing"), "bath" );
	deepEqual( Stem("baths"), "bath" );
	deepEqual( Stem("bating"), "bate" );
	deepEqual( Stem("batler"), "batler" );
	deepEqual( Stem("bats"), "bat" );
	deepEqual( Stem("batt"), "batt" );
	deepEqual( Stem("battalia"), "battalia" );
	deepEqual( Stem("battalions"), "battalion" );
	deepEqual( Stem("batten"), "batten" );
	deepEqual( Stem("battened"), "batten" );
	deepEqual( Stem("batter"), "batter" );
	deepEqual( Stem("battered"), "batter" );
	deepEqual( Stem("battering"), "batter" );
	deepEqual( Stem("batters"), "batter" );
	deepEqual( Stem("battersea"), "battersea" );
	deepEqual( Stem("battery"), "batteri" );
	deepEqual( Stem("batti"), "batti" );
	deepEqual( Stem("battle"), "battl" );
	deepEqual( Stem("battled"), "battl" );
	deepEqual( Stem("battlefield"), "battlefield" );
	deepEqual( Stem("battlements"), "battlement" );
	deepEqual( Stem("battles"), "battl" );
	deepEqual( Stem("battling"), "battl" );
	deepEqual( Stem("battues"), "battu" );
	deepEqual( Stem("batty"), "batti" );
	deepEqual( Stem("bauble"), "baubl" );
	deepEqual( Stem("baubles"), "baubl" );
	deepEqual( Stem("baubling"), "baubl" );
	deepEqual( Stem("baulk"), "baulk" );
	deepEqual( Stem("baulked"), "baulk" );
	deepEqual( Stem("bavarian"), "bavarian" );
	deepEqual( Stem("bavin"), "bavin" );
	deepEqual( Stem("bawcock"), "bawcock" );
	deepEqual( Stem("bawd"), "bawd" );
	deepEqual( Stem("bawdry"), "bawdri" );
	deepEqual( Stem("bawds"), "bawd" );
	deepEqual( Stem("bawdy"), "bawdi" );
	deepEqual( Stem("bawl"), "bawl" );
	deepEqual( Stem("bawled"), "bawl" );
	deepEqual( Stem("bawler"), "bawler" );
	deepEqual( Stem("bawling"), "bawl" );
	deepEqual( Stem("bawls"), "bawl" );
	deepEqual( Stem("bay"), "bai" );
	deepEqual( Stem("baying"), "bai" );
	deepEqual( Stem("baynard"), "baynard" );
	deepEqual( Stem("bayonet"), "bayonet" );
	deepEqual( Stem("bayonets"), "bayonet" );
	deepEqual( Stem("bayonne"), "bayonn" );
	deepEqual( Stem("bays"), "bai" );
	deepEqual( Stem("bayswater"), "bayswat" );
	deepEqual( Stem("bazaars"), "bazaar" );
	deepEqual( Stem("be"), "be" );
	deepEqual( Stem("beach"), "beach" );
	deepEqual( Stem("beached"), "beach" );
	deepEqual( Stem("beachy"), "beachi" );
	deepEqual( Stem("beacon"), "beacon" );
	deepEqual( Stem("bead"), "bead" );
	deepEqual( Stem("beaded"), "bead" );
	deepEqual( Stem("beadle"), "beadl" );
	deepEqual( Stem("beadles"), "beadl" );
	deepEqual( Stem("beads"), "bead" );
	deepEqual( Stem("beadsmen"), "beadsmen" );
	deepEqual( Stem("beady"), "beadi" );
	deepEqual( Stem("beagle"), "beagl" );
	deepEqual( Stem("beagles"), "beagl" );
	deepEqual( Stem("beak"), "beak" );
	deepEqual( Stem("beaks"), "beak" );
	deepEqual( Stem("beam"), "beam" );
	deepEqual( Stem("beamed"), "beam" );
	deepEqual( Stem("beaming"), "beam" );
	deepEqual( Stem("beams"), "beam" );
	deepEqual( Stem("bean"), "bean" );
	deepEqual( Stem("beans"), "bean" );
	deepEqual( Stem("bear"), "bear" );
	deepEqual( Stem("bearable"), "bearabl" );
	deepEqual( Stem("beard"), "beard" );
	deepEqual( Stem("bearded"), "beard" );
	deepEqual( Stem("beardless"), "beardless" );
	deepEqual( Stem("beards"), "beard" );
	deepEqual( Stem("bearer"), "bearer" );
	deepEqual( Stem("bearers"), "bearer" );
	deepEqual( Stem("bearest"), "bearest" );
	deepEqual( Stem("beareth"), "beareth" );
	deepEqual( Stem("bearing"), "bear" );
	deepEqual( Stem("bearings"), "bear" );
	deepEqual( Stem("bears"), "bear" );
	deepEqual( Stem("bearskin"), "bearskin" );
	deepEqual( Stem("beast"), "beast" );
	deepEqual( Stem("beastliest"), "beastliest" );
	deepEqual( Stem("beastliness"), "beastli" );
	deepEqual( Stem("beastly"), "beastli" );
	deepEqual( Stem("beasts"), "beast" );
	deepEqual( Stem("beat"), "beat" );
	deepEqual( Stem("beated"), "beat" );
	deepEqual( Stem("beaten"), "beaten" );
	deepEqual( Stem("beating"), "beat" );
	deepEqual( Stem("beatrice"), "beatric" );
	deepEqual( Stem("beats"), "beat" );
	deepEqual( Stem("beau"), "beau" );
	deepEqual( Stem("beaufort"), "beaufort" );
	deepEqual( Stem("beaumond"), "beaumond" );
	deepEqual( Stem("beaumont"), "beaumont" );
	deepEqual( Stem("beaumoris"), "beaumori" );
	deepEqual( Stem("beauteous"), "beauteou" );
	deepEqual( Stem("beautied"), "beauti" );
	deepEqual( Stem("beauties"), "beauti" );
	deepEqual( Stem("beautified"), "beautifi" );
	deepEqual( Stem("beautiful"), "beauti" );
	deepEqual( Stem("beautifully"), "beautifulli" );
	deepEqual( Stem("beautify"), "beautifi" );
	deepEqual( Stem("beauty"), "beauti" );
	deepEqual( Stem("beauvilliers"), "beauvilli" );
	deepEqual( Stem("beaux"), "beaux" );
	deepEqual( Stem("beaver"), "beaver" );
	deepEqual( Stem("beavers"), "beaver" );
	deepEqual( Stem("became"), "becam" );
	deepEqual( Stem("because"), "becaus" );
	deepEqual( Stem("bechanc"), "bechanc" );
	deepEqual( Stem("bechance"), "bechanc" );
	deepEqual( Stem("bechanced"), "bechanc" );
	deepEqual( Stem("beck"), "beck" );
	deepEqual( Stem("beckon"), "beckon" );
	deepEqual( Stem("beckoning"), "beckon" );
	deepEqual( Stem("beckons"), "beckon" );
	deepEqual( Stem("becks"), "beck" );
	deepEqual( Stem("becky"), "becki" );
	deepEqual( Stem("becom"), "becom" );
	deepEqual( Stem("become"), "becom" );
	deepEqual( Stem("becomed"), "becom" );
	deepEqual( Stem("becomes"), "becom" );
	deepEqual( Stem("becoming"), "becom" );
	deepEqual( Stem("becomings"), "becom" );
	deepEqual( Stem("bed"), "bed" );
	deepEqual( Stem("bedabbled"), "bedabbl" );
	deepEqual( Stem("bedad"), "bedad" );
	deepEqual( Stem("bedash"), "bedash" );
	deepEqual( Stem("bedaub"), "bedaub" );
	deepEqual( Stem("bedazzled"), "bedazzl" );
	deepEqual( Stem("bedchamber"), "bedchamb" );
	deepEqual( Stem("bedclothes"), "bedcloth" );
	deepEqual( Stem("bedded"), "bed" );
	deepEqual( Stem("beddoes"), "beddo" );
	deepEqual( Stem("bedeck"), "bedeck" );
	deepEqual( Stem("bedecking"), "bedeck" );
	deepEqual( Stem("bedew"), "bedew" );
	deepEqual( Stem("bedfellow"), "bedfellow" );
	deepEqual( Stem("bedfellows"), "bedfellow" );
	deepEqual( Stem("bedford"), "bedford" );
	deepEqual( Stem("bedlam"), "bedlam" );
	deepEqual( Stem("bedrench"), "bedrench" );
	deepEqual( Stem("bedrid"), "bedrid" );
	deepEqual( Stem("bedroom"), "bedroom" );
	deepEqual( Stem("bedrooms"), "bedroom" );
	deepEqual( Stem("beds"), "bed" );
	deepEqual( Stem("bedside"), "bedsid" );
	deepEqual( Stem("bedtime"), "bedtim" );
	deepEqual( Stem("bedward"), "bedward" );
	deepEqual( Stem("bedwin"), "bedwin" );
	deepEqual( Stem("bee"), "bee" );
	deepEqual( Stem("beef"), "beef" );
	deepEqual( Stem("beefeaters"), "beefeat" );
	deepEqual( Stem("beefs"), "beef" );
	deepEqual( Stem("beehives"), "beehiv" );
	deepEqual( Stem("been"), "been" );
	deepEqual( Stem("beer"), "beer" );
	deepEqual( Stem("beery"), "beeri" );
	deepEqual( Stem("bees"), "bee" );
	deepEqual( Stem("beest"), "beest" );
	deepEqual( Stem("beeswing"), "beesw" );
	deepEqual( Stem("beethoven"), "beethoven" );
	deepEqual( Stem("beetle"), "beetl" );
	deepEqual( Stem("beetles"), "beetl" );
	deepEqual( Stem("beeves"), "beev" );
	deepEqual( Stem("befall"), "befal" );
	deepEqual( Stem("befallen"), "befallen" );
	deepEqual( Stem("befalls"), "befal" );
	deepEqual( Stem("befell"), "befel" );
	deepEqual( Stem("befits"), "befit" );
	deepEqual( Stem("befitted"), "befit" );
	deepEqual( Stem("befitting"), "befit" );
	deepEqual( Stem("befooled"), "befool" );
	deepEqual( Stem("befor"), "befor" );
	deepEqual( Stem("before"), "befor" );
	deepEqual( Stem("beforehand"), "beforehand" );
	deepEqual( Stem("befortune"), "befortun" );
	deepEqual( Stem("befriend"), "befriend" );
	deepEqual( Stem("befriended"), "befriend" );
	deepEqual( Stem("befriends"), "befriend" );
	deepEqual( Stem("beg"), "beg" );
	deepEqual( Stem("begad"), "begad" );
	deepEqual( Stem("began"), "began" );
	deepEqual( Stem("beget"), "beget" );
	deepEqual( Stem("begets"), "beget" );
	deepEqual( Stem("begetting"), "beget" );
	deepEqual( Stem("begg"), "begg" );
	deepEqual( Stem("beggar"), "beggar" );
	deepEqual( Stem("beggared"), "beggar" );
	deepEqual( Stem("beggarly"), "beggarli" );
	deepEqual( Stem("beggarman"), "beggarman" );
	deepEqual( Stem("beggars"), "beggar" );
	deepEqual( Stem("beggary"), "beggari" );
	deepEqual( Stem("begged"), "beg" );
	deepEqual( Stem("begging"), "beg" );
	deepEqual( Stem("begilt"), "begilt" );
	deepEqual( Stem("begin"), "begin" );
	deepEqual( Stem("beginners"), "beginn" );
	deepEqual( Stem("beginning"), "begin" );
	deepEqual( Stem("beginnings"), "begin" );
	deepEqual( Stem("begins"), "begin" );
	deepEqual( Stem("begleitung"), "begleitung" );
	deepEqual( Stem("begnawn"), "begnawn" );
	deepEqual( Stem("begnis"), "begni" );
	deepEqual( Stem("begone"), "begon" );
	deepEqual( Stem("begot"), "begot" );
	deepEqual( Stem("begotten"), "begotten" );
	deepEqual( Stem("begrimed"), "begrim" );
	deepEqual( Stem("begs"), "beg" );
	deepEqual( Stem("beguil"), "beguil" );
	deepEqual( Stem("beguile"), "beguil" );
	deepEqual( Stem("beguiled"), "beguil" );
	deepEqual( Stem("beguiles"), "beguil" );
	deepEqual( Stem("beguiling"), "beguil" );
	deepEqual( Stem("begun"), "begun" );
	deepEqual( Stem("behalf"), "behalf" );
	deepEqual( Stem("behalfs"), "behalf" );
	deepEqual( Stem("behav"), "behav" );
	deepEqual( Stem("behave"), "behav" );
	deepEqual( Stem("behaved"), "behav" );
	deepEqual( Stem("behavedst"), "behavedst" );
	deepEqual( Stem("behaving"), "behav" );
	deepEqual( Stem("behavior"), "behavior" );
	deepEqual( Stem("behaviors"), "behavior" );
	deepEqual( Stem("behaviour"), "behaviour" );
	deepEqual( Stem("behaviours"), "behaviour" );
	deepEqual( Stem("behead"), "behead" );
	deepEqual( Stem("beheaded"), "behead" );
	deepEqual( Stem("beheld"), "beheld" );
	deepEqual( Stem("behest"), "behest" );
	deepEqual( Stem("behests"), "behest" );
	deepEqual( Stem("behind"), "behind" );
	deepEqual( Stem("behindhand"), "behindhand" );
	deepEqual( Stem("behold"), "behold" );
	deepEqual( Stem("beholder"), "behold" );
	deepEqual( Stem("beholders"), "behold" );
	deepEqual( Stem("beholdest"), "beholdest" );
	deepEqual( Stem("beholding"), "behold" );
	deepEqual( Stem("beholds"), "behold" );
	deepEqual( Stem("behoof"), "behoof" );
	deepEqual( Stem("behooffull"), "behoofful" );
	deepEqual( Stem("behooves"), "behoov" );
	deepEqual( Stem("behove"), "behov" );
	deepEqual( Stem("behoves"), "behov" );
	deepEqual( Stem("behowls"), "behowl" );
	deepEqual( Stem("bei"), "bei" );
	deepEqual( Stem("beilby"), "beilbi" );
	deepEqual( Stem("being"), "be" );
	deepEqual( Stem("beings"), "be" );
	deepEqual( Stem("bejewelled"), "bejewel" );
	deepEqual( Stem("bel"), "bel" );
	deepEqual( Stem("belabouring"), "belabour" );
	deepEqual( Stem("belarius"), "belariu" );
	deepEqual( Stem("belch"), "belch" );
	deepEqual( Stem("belching"), "belch" );
	deepEqual( Stem("beldam"), "beldam" );
	deepEqual( Stem("beldame"), "beldam" );
	deepEqual( Stem("beldams"), "beldam" );
	deepEqual( Stem("belee"), "bele" );
	deepEqual( Stem("belgia"), "belgia" );
	deepEqual( Stem("belgian"), "belgian" );
	deepEqual( Stem("belgians"), "belgian" );
	deepEqual( Stem("belgic"), "belgic" );
	deepEqual( Stem("belgium"), "belgium" );
	deepEqual( Stem("belgrave"), "belgrav" );
	deepEqual( Stem("belgravia"), "belgravia" );
	deepEqual( Stem("belgravians"), "belgravian" );
	deepEqual( Stem("beli"), "beli" );
	deepEqual( Stem("belie"), "beli" );
	deepEqual( Stem("belied"), "beli" );
	deepEqual( Stem("belief"), "belief" );
	deepEqual( Stem("beliest"), "beliest" );
	deepEqual( Stem("believ"), "believ" );
	deepEqual( Stem("believe"), "believ" );
	deepEqual( Stem("believed"), "believ" );
	deepEqual( Stem("believers"), "believ" );
	deepEqual( Stem("believes"), "believ" );
	deepEqual( Stem("believest"), "believest" );
	deepEqual( Stem("believing"), "believ" );
	deepEqual( Stem("belike"), "belik" );
	deepEqual( Stem("belinda"), "belinda" );
	deepEqual( Stem("bell"), "bell" );
	deepEqual( Stem("belladonna"), "belladonna" );
	deepEqual( Stem("bellario"), "bellario" );
	deepEqual( Stem("belle"), "bell" );
	deepEqual( Stem("bellied"), "belli" );
	deepEqual( Stem("bellies"), "belli" );
	deepEqual( Stem("bellman"), "bellman" );
	deepEqual( Stem("bello"), "bello" );
	deepEqual( Stem("bellona"), "bellona" );
	deepEqual( Stem("bellow"), "bellow" );
	deepEqual( Stem("bellowed"), "bellow" );
	deepEqual( Stem("bellowing"), "bellow" );
	deepEqual( Stem("bellows"), "bellow" );
	deepEqual( Stem("bells"), "bell" );
	deepEqual( Stem("belly"), "belli" );
	deepEqual( Stem("bellyful"), "belly" );
	deepEqual( Stem("belman"), "belman" );
	deepEqual( Stem("belmont"), "belmont" );
	deepEqual( Stem("belock"), "belock" );
	deepEqual( Stem("belong"), "belong" );
	deepEqual( Stem("belonged"), "belong" );
	deepEqual( Stem("belonging"), "belong" );
	deepEqual( Stem("belongings"), "belong" );
	deepEqual( Stem("belongs"), "belong" );
	deepEqual( Stem("belov"), "belov" );
	deepEqual( Stem("beloved"), "belov" );
	deepEqual( Stem("beloving"), "belov" );
	deepEqual( Stem("below"), "below" );
	deepEqual( Stem("belt"), "belt" );
	deepEqual( Stem("belts"), "belt" );
	deepEqual( Stem("belzebub"), "belzebub" );
	deepEqual( Stem("bemadding"), "bemad" );
	deepEqual( Stem("bemet"), "bemet" );
	deepEqual( Stem("bemete"), "bemet" );
	deepEqual( Stem("bemoan"), "bemoan" );
	deepEqual( Stem("bemoaned"), "bemoan" );
	deepEqual( Stem("bemock"), "bemock" );
	deepEqual( Stem("bemoil"), "bemoil" );
	deepEqual( Stem("bemonster"), "bemonst" );
	deepEqual( Stem("ben"), "ben" );
	deepEqual( Stem("bench"), "bench" );
	deepEqual( Stem("bencher"), "bencher" );
	deepEqual( Stem("benches"), "bench" );
	deepEqual( Stem("bend"), "bend" );
	deepEqual( Stem("bended"), "bend" );
	deepEqual( Stem("bending"), "bend" );
	deepEqual( Stem("bends"), "bend" );
	deepEqual( Stem("bene"), "bene" );
	deepEqual( Stem("beneath"), "beneath" );
	deepEqual( Stem("benedicite"), "benedicit" );
	deepEqual( Stem("benedick"), "benedick" );
	deepEqual( Stem("benediction"), "benedict" );
	deepEqual( Stem("benedictus"), "benedictu" );
	deepEqual( Stem("benefactions"), "benefact" );
	deepEqual( Stem("benefactor"), "benefactor" );
	deepEqual( Stem("benefactors"), "benefactor" );
	deepEqual( Stem("benefactress"), "benefactress" );
	deepEqual( Stem("benefice"), "benefic" );
	deepEqual( Stem("beneficent"), "benefic" );
	deepEqual( Stem("beneficial"), "benefici" );
	deepEqual( Stem("benefit"), "benefit" );
	deepEqual( Stem("benefited"), "benefit" );
	deepEqual( Stem("benefiting"), "benefit" );
	deepEqual( Stem("benefits"), "benefit" );
	deepEqual( Stem("benetted"), "benet" );
	deepEqual( Stem("benevolence"), "benevol" );
	deepEqual( Stem("benevolences"), "benevol" );
	deepEqual( Stem("benevolent"), "benevol" );
	deepEqual( Stem("benevolently"), "benevol" );
	deepEqual( Stem("bengal"), "bengal" );
	deepEqual( Stem("bengalee"), "bengale" );
	deepEqual( Stem("benied"), "beni" );
	deepEqual( Stem("benighted"), "benight" );
	deepEqual( Stem("benison"), "benison" );
	deepEqual( Stem("benjamin"), "benjamin" );
	deepEqual( Stem("benjamins"), "benjamin" );
	deepEqual( Stem("bennet"), "bennet" );
	deepEqual( Stem("bense"), "bens" );
	deepEqual( Stem("bent"), "bent" );
	deepEqual( Stem("bentii"), "bentii" );
	deepEqual( Stem("bentivolii"), "bentivolii" );
	deepEqual( Stem("bents"), "bent" );
	deepEqual( Stem("benumbed"), "benumb" );
	deepEqual( Stem("benvolio"), "benvolio" );
	deepEqual( Stem("bepaint"), "bepaint" );
	deepEqual( Stem("bepray"), "beprai" );
	deepEqual( Stem("bequeath"), "bequeath" );
	deepEqual( Stem("bequeathed"), "bequeath" );
	deepEqual( Stem("bequeathing"), "bequeath" );
	deepEqual( Stem("bequest"), "bequest" );
	deepEqual( Stem("ber"), "ber" );
	deepEqual( Stem("berard"), "berard" );
	deepEqual( Stem("berattle"), "berattl" );
	deepEqual( Stem("beray"), "berai" );
	deepEqual( Stem("bere"), "bere" );
	deepEqual( Stem("bereave"), "bereav" );
	deepEqual( Stem("bereaved"), "bereav" );
	deepEqual( Stem("bereavement"), "bereav" );
	deepEqual( Stem("bereaves"), "bereav" );
	deepEqual( Stem("bereft"), "bereft" );
	deepEqual( Stem("bergamo"), "bergamo" );
	deepEqual( Stem("bergomask"), "bergomask" );
	deepEqual( Stem("berhym"), "berhym" );
	deepEqual( Stem("berhyme"), "berhym" );
	deepEqual( Stem("berkeley"), "berkelei" );
	deepEqual( Stem("bermoothes"), "bermooth" );
	deepEqual( Stem("bernardo"), "bernardo" );
	deepEqual( Stem("berod"), "berod" );
	deepEqual( Stem("berowne"), "berown" );
	deepEqual( Stem("berri"), "berri" );
	deepEqual( Stem("berries"), "berri" );
	deepEqual( Stem("berrord"), "berrord" );
	deepEqual( Stem("berry"), "berri" );
	deepEqual( Stem("bertram"), "bertram" );
	deepEqual( Stem("berwick"), "berwick" );
	deepEqual( Stem("bescreen"), "bescreen" );
	deepEqual( Stem("beseech"), "beseech" );
	deepEqual( Stem("beseeched"), "beseech" );
	deepEqual( Stem("beseechers"), "beseech" );
	deepEqual( Stem("beseeching"), "beseech" );
	deepEqual( Stem("beseek"), "beseek" );
	deepEqual( Stem("beseem"), "beseem" );
	deepEqual( Stem("beseemeth"), "beseemeth" );
	deepEqual( Stem("beseeming"), "beseem" );
	deepEqual( Stem("beseems"), "beseem" );
	deepEqual( Stem("beset"), "beset" );
	deepEqual( Stem("beshrew"), "beshrew" );
	deepEqual( Stem("beside"), "besid" );
	deepEqual( Stem("besides"), "besid" );
	deepEqual( Stem("besieg"), "besieg" );
	deepEqual( Stem("besiege"), "besieg" );
	deepEqual( Stem("besieged"), "besieg" );
	deepEqual( Stem("beslubber"), "beslubb" );
	deepEqual( Stem("besmear"), "besmear" );
	deepEqual( Stem("besmeared"), "besmear" );
	deepEqual( Stem("besmirch"), "besmirch" );
	deepEqual( Stem("besom"), "besom" );
	deepEqual( Stem("besort"), "besort" );
	deepEqual( Stem("besotted"), "besot" );
	deepEqual( Stem("besought"), "besought" );
	deepEqual( Stem("bespake"), "bespak" );
	deepEqual( Stem("bespeak"), "bespeak" );
	deepEqual( Stem("bespice"), "bespic" );
	deepEqual( Stem("bespoke"), "bespok" );
	deepEqual( Stem("bespotted"), "bespot" );
	deepEqual( Stem("bess"), "bess" );
	deepEqual( Stem("bessy"), "bessi" );
	deepEqual( Stem("best"), "best" );
	deepEqual( Stem("bestained"), "bestain" );
	deepEqual( Stem("bested"), "best" );
	deepEqual( Stem("bestial"), "bestial" );
	deepEqual( Stem("bestir"), "bestir" );
	deepEqual( Stem("bestirr"), "bestirr" );
	deepEqual( Stem("bestow"), "bestow" );
	deepEqual( Stem("bestowed"), "bestow" );
	deepEqual( Stem("bestowing"), "bestow" );
	deepEqual( Stem("bestows"), "bestow" );
	deepEqual( Stem("bestraught"), "bestraught" );
	deepEqual( Stem("bestrew"), "bestrew" );
	deepEqual( Stem("bestrid"), "bestrid" );
	deepEqual( Stem("bestride"), "bestrid" );
	deepEqual( Stem("bestrides"), "bestrid" );
	deepEqual( Stem("bet"), "bet" );
	deepEqual( Stem("betake"), "betak" );
	deepEqual( Stem("bete"), "bete" );
	deepEqual( Stem("beteem"), "beteem" );
	deepEqual( Stem("bethesda"), "bethesda" );
	deepEqual( Stem("bethink"), "bethink" );
	deepEqual( Stem("bethought"), "bethought" );
	deepEqual( Stem("bethrothed"), "bethroth" );
	deepEqual( Stem("bethump"), "bethump" );
	deepEqual( Stem("betid"), "betid" );
	deepEqual( Stem("betide"), "betid" );
	deepEqual( Stem("betideth"), "betideth" );
	deepEqual( Stem("betime"), "betim" );
	deepEqual( Stem("betimes"), "betim" );
	deepEqual( Stem("betoken"), "betoken" );
	deepEqual( Stem("betokened"), "betoken" );
	deepEqual( Stem("betook"), "betook" );
	deepEqual( Stem("betossed"), "betoss" );
	deepEqual( Stem("betray"), "betrai" );
	deepEqual( Stem("betrayed"), "betrai" );
	deepEqual( Stem("betraying"), "betrai" );
	deepEqual( Stem("betrays"), "betrai" );
	deepEqual( Stem("betrims"), "betrim" );
	deepEqual( Stem("betroth"), "betroth" );
	deepEqual( Stem("betrothed"), "betroth" );
	deepEqual( Stem("betroths"), "betroth" );
	deepEqual( Stem("bets"), "bet" );
	deepEqual( Stem("betsy"), "betsi" );
	deepEqual( Stem("bett"), "bett" );
	deepEqual( Stem("betted"), "bet" );
	deepEqual( Stem("better"), "better" );
	deepEqual( Stem("bettered"), "better" );
	deepEqual( Stem("bettering"), "better" );
	deepEqual( Stem("betters"), "better" );
	deepEqual( Stem("betther"), "betther" );
	deepEqual( Stem("betting"), "bet" );
	deepEqual( Stem("bettre"), "bettr" );
	deepEqual( Stem("betty"), "betti" );
	deepEqual( Stem("between"), "between" );
	deepEqual( Stem("betwigst"), "betwigst" );
	deepEqual( Stem("betwixt"), "betwixt" );
	deepEqual( Stem("bevel"), "bevel" );
	deepEqual( Stem("beverage"), "beverag" );
	deepEqual( Stem("bevis"), "bevi" );
	deepEqual( Stem("bevy"), "bevi" );
	deepEqual( Stem("bewail"), "bewail" );
	deepEqual( Stem("bewailed"), "bewail" );
	deepEqual( Stem("bewailing"), "bewail" );
	deepEqual( Stem("bewails"), "bewail" );
	deepEqual( Stem("beware"), "bewar" );
	deepEqual( Stem("bewasted"), "bewast" );
	deepEqual( Stem("beweep"), "beweep" );
	deepEqual( Stem("bewept"), "bewept" );
	deepEqual( Stem("bewet"), "bewet" );
	deepEqual( Stem("bewhored"), "bewhor" );
	deepEqual( Stem("bewidged"), "bewidg" );
	deepEqual( Stem("bewildered"), "bewild" );
	deepEqual( Stem("bewildering"), "bewild" );
	deepEqual( Stem("bewilderment"), "bewilder" );
	deepEqual( Stem("bewitch"), "bewitch" );
	deepEqual( Stem("bewitched"), "bewitch" );
	deepEqual( Stem("bewitchingly"), "bewitchingli" );
	deepEqual( Stem("bewitchment"), "bewitch" );
	deepEqual( Stem("bewray"), "bewrai" );
	deepEqual( Stem("bey"), "bei" );
	deepEqual( Stem("beyond"), "beyond" );
	deepEqual( Stem("bezonian"), "bezonian" );
	deepEqual( Stem("bezonians"), "bezonian" );
	deepEqual( Stem("bianca"), "bianca" );
	deepEqual( Stem("bianco"), "bianco" );
	deepEqual( Stem("bias"), "bia" );
	deepEqual( Stem("bibble"), "bibbl" );
	deepEqual( Stem("bible"), "bibl" );
	deepEqual( Stem("bicetre"), "bicetr" );
	deepEqual( Stem("bickering"), "bicker" );
	deepEqual( Stem("bickerings"), "bicker" );
	deepEqual( Stem("bid"), "bid" );
	deepEqual( Stem("bidden"), "bidden" );
	deepEqual( Stem("bidding"), "bid" );
	deepEqual( Stem("biddings"), "bid" );
	deepEqual( Stem("biddy"), "biddi" );
	deepEqual( Stem("bide"), "bide" );
	deepEqual( Stem("bides"), "bide" );
	deepEqual( Stem("biding"), "bide" );
	deepEqual( Stem("bids"), "bid" );
	deepEqual( Stem("bien"), "bien" );
	deepEqual( Stem("bier"), "bier" );
	deepEqual( Stem("bierstadt"), "bierstadt" );
	deepEqual( Stem("bifold"), "bifold" );
	deepEqual( Stem("big"), "big" );
	deepEqual( Stem("bigamy"), "bigami" );
	deepEqual( Stem("biggen"), "biggen" );
	deepEqual( Stem("bigger"), "bigger" );
	deepEqual( Stem("biglietto"), "biglietto" );
	deepEqual( Stem("bigness"), "big" );
	deepEqual( Stem("bigot"), "bigot" );
	deepEqual( Stem("bigoted"), "bigot" );
	deepEqual( Stem("bijou"), "bijou" );
	deepEqual( Stem("bilberry"), "bilberri" );
	deepEqual( Stem("bilbo"), "bilbo" );
	deepEqual( Stem("bilboes"), "bilbo" );
	deepEqual( Stem("bilbow"), "bilbow" );
	deepEqual( Stem("bilious"), "biliou" );
	deepEqual( Stem("bill"), "bill" );
	deepEqual( Stem("billet"), "billet" );
	deepEqual( Stem("billeted"), "billet" );
	deepEqual( Stem("billets"), "billet" );
	deepEqual( Stem("billiard"), "billiard" );
	deepEqual( Stem("billiards"), "billiard" );
	deepEqual( Stem("billing"), "bill" );
	deepEqual( Stem("billingsgate"), "billingsg" );
	deepEqual( Stem("billington"), "billington" );
	deepEqual( Stem("billow"), "billow" );
	deepEqual( Stem("billows"), "billow" );
	deepEqual( Stem("bills"), "bill" );
	deepEqual( Stem("bin"), "bin" );
	deepEqual( Stem("bind"), "bind" );
	deepEqual( Stem("bindeth"), "bindeth" );
	deepEqual( Stem("binding"), "bind" );
	deepEqual( Stem("bindings"), "bind" );
	deepEqual( Stem("binds"), "bind" );
	deepEqual( Stem("binkie"), "binki" );
	deepEqual( Stem("binkies"), "binki" );
	deepEqual( Stem("binnacle"), "binnacl" );
	deepEqual( Stem("binny"), "binni" );
	deepEqual( Stem("biographical"), "biograph" );
	deepEqual( Stem("biography"), "biographi" );
	deepEqual( Stem("biological"), "biolog" );
	deepEqual( Stem("biologically"), "biolog" );
	deepEqual( Stem("biologies"), "biologi" );
	deepEqual( Stem("biology"), "biologi" );
	deepEqual( Stem("biondello"), "biondello" );
	deepEqual( Stem("birch"), "birch" );
	deepEqual( Stem("birched"), "birch" );
	deepEqual( Stem("bird"), "bird" );
	deepEqual( Stem("birding"), "bird" );
	deepEqual( Stem("birdlime"), "birdlim" );
	deepEqual( Stem("birds"), "bird" );
	deepEqual( Stem("birnam"), "birnam" );
	deepEqual( Stem("birth"), "birth" );
	deepEqual( Stem("birthday"), "birthdai" );
	deepEqual( Stem("birthdays"), "birthdai" );
	deepEqual( Stem("birthdom"), "birthdom" );
	deepEqual( Stem("birthplace"), "birthplac" );
	deepEqual( Stem("birthright"), "birthright" );
	deepEqual( Stem("birthrights"), "birthright" );
	deepEqual( Stem("births"), "birth" );
	deepEqual( Stem("bis"), "bi" );
	deepEqual( Stem("biscay"), "biscai" );
	deepEqual( Stem("biscuit"), "biscuit" );
	deepEqual( Stem("biscuits"), "biscuit" );
	deepEqual( Stem("bishop"), "bishop" );
	deepEqual( Stem("bishopess"), "bishopess" );
	deepEqual( Stem("bishopric"), "bishopr" );
	deepEqual( Stem("bishops"), "bishop" );
	deepEqual( Stem("bisson"), "bisson" );
	deepEqual( Stem("bit"), "bit" );
	deepEqual( Stem("bitch"), "bitch" );
	deepEqual( Stem("bite"), "bite" );
	deepEqual( Stem("biter"), "biter" );
	deepEqual( Stem("bites"), "bite" );
	deepEqual( Stem("biting"), "bite" );
	deepEqual( Stem("bits"), "bit" );
	deepEqual( Stem("bitt"), "bitt" );
	deepEqual( Stem("bitten"), "bitten" );
	deepEqual( Stem("bitter"), "bitter" );
	deepEqual( Stem("bitterest"), "bitterest" );
	deepEqual( Stem("bitterly"), "bitterli" );
	deepEqual( Stem("bitterness"), "bitter" );
	deepEqual( Stem("bittiful"), "bitti" );
	deepEqual( Stem("bivouac"), "bivouac" );
	deepEqual( Stem("bivouacked"), "bivouack" );
	deepEqual( Stem("bivouacking"), "bivouack" );
	deepEqual( Stem("blab"), "blab" );
	deepEqual( Stem("blabb"), "blabb" );
	deepEqual( Stem("blabbing"), "blab" );
	deepEqual( Stem("blabs"), "blab" );
	deepEqual( Stem("black"), "black" );
	deepEqual( Stem("blackamoor"), "blackamoor" );
	deepEqual( Stem("blackamoors"), "blackamoor" );
	deepEqual( Stem("blackball"), "blackbal" );
	deepEqual( Stem("blackberries"), "blackberri" );
	deepEqual( Stem("blackberry"), "blackberri" );
	deepEqual( Stem("blackbrook"), "blackbrook" );
	deepEqual( Stem("blackbrooks"), "blackbrook" );
	deepEqual( Stem("blacked"), "black" );
	deepEqual( Stem("blackened"), "blacken" );
	deepEqual( Stem("blacker"), "blacker" );
	deepEqual( Stem("blackest"), "blackest" );
	deepEqual( Stem("blackfriars"), "blackfriar" );
	deepEqual( Stem("blackguard"), "blackguard" );
	deepEqual( Stem("blackheath"), "blackheath" );
	deepEqual( Stem("blacking"), "black" );
	deepEqual( Stem("blackleg"), "blackleg" );
	deepEqual( Stem("blackmere"), "blackmer" );
	deepEqual( Stem("blackmore"), "blackmor" );
	deepEqual( Stem("blackness"), "black" );
	deepEqual( Stem("blacks"), "black" );
	deepEqual( Stem("blacksmith"), "blacksmith" );
	deepEqual( Stem("blackstone"), "blackston" );
	deepEqual( Stem("bladder"), "bladder" );
	deepEqual( Stem("bladders"), "bladder" );
	deepEqual( Stem("blade"), "blade" );
	deepEqual( Stem("bladed"), "blade" );
	deepEqual( Stem("blades"), "blade" );
	deepEqual( Stem("blains"), "blain" );
	deepEqual( Stem("blair"), "blair" );
	deepEqual( Stem("blam"), "blam" );
	deepEqual( Stem("blame"), "blame" );
	deepEqual( Stem("blamed"), "blame" );
	deepEqual( Stem("blameful"), "blame" );
	deepEqual( Stem("blameless"), "blameless" );
	deepEqual( Stem("blames"), "blame" );
	deepEqual( Stem("blanc"), "blanc" );
	deepEqual( Stem("blanca"), "blanca" );
	deepEqual( Stem("blanch"), "blanch" );
	deepEqual( Stem("blanche"), "blanch" );
	deepEqual( Stem("bland"), "bland" );
	deepEqual( Stem("blandest"), "blandest" );
	deepEqual( Stem("blandly"), "blandli" );
	deepEqual( Stem("blandness"), "bland" );
	deepEqual( Stem("blank"), "blank" );
	deepEqual( Stem("blanket"), "blanket" );
	deepEqual( Stem("blanks"), "blank" );
	deepEqual( Stem("blase"), "blase" );
	deepEqual( Stem("blaspheme"), "blasphem" );
	deepEqual( Stem("blaspheming"), "blasphem" );
	deepEqual( Stem("blasphemous"), "blasphem" );
	deepEqual( Stem("blasphemy"), "blasphemi" );
	deepEqual( Stem("blast"), "blast" );
	deepEqual( Stem("blasted"), "blast" );
	deepEqual( Stem("blasting"), "blast" );
	deepEqual( Stem("blastments"), "blastment" );
	deepEqual( Stem("blasts"), "blast" );
	deepEqual( Stem("blatherwick"), "blatherwick" );
	deepEqual( Stem("blaz"), "blaz" );
	deepEqual( Stem("blaze"), "blaze" );
	deepEqual( Stem("blazed"), "blaze" );
	deepEqual( Stem("blazes"), "blaze" );
	deepEqual( Stem("blazing"), "blaze" );
	deepEqual( Stem("blazon"), "blazon" );
	deepEqual( Stem("blazoned"), "blazon" );
	deepEqual( Stem("blazoning"), "blazon" );
	deepEqual( Stem("bleach"), "bleach" );
	deepEqual( Stem("bleaching"), "bleach" );
	deepEqual( Stem("bleak"), "bleak" );
	deepEqual( Stem("blear"), "blear" );
	deepEqual( Stem("bleared"), "blear" );
	deepEqual( Stem("bleat"), "bleat" );
	deepEqual( Stem("bleated"), "bleat" );
	deepEqual( Stem("bleats"), "bleat" );
	deepEqual( Stem("bled"), "bled" );
	deepEqual( Stem("bleed"), "bleed" );
	deepEqual( Stem("bleeders"), "bleeder" );
	deepEqual( Stem("bleedest"), "bleedest" );
	deepEqual( Stem("bleedeth"), "bleedeth" );
	deepEqual( Stem("bleeding"), "bleed" );
	deepEqual( Stem("bleedn"), "bleedn" );
	deepEqual( Stem("bleeds"), "bleed" );
	deepEqual( Stem("blemish"), "blemish" );
	deepEqual( Stem("blemishes"), "blemish" );
	deepEqual( Stem("blench"), "blench" );
	deepEqual( Stem("blenches"), "blench" );
	deepEqual( Stem("blend"), "blend" );
	deepEqual( Stem("blended"), "blend" );
	deepEqual( Stem("blenheim"), "blenheim" );
	deepEqual( Stem("blenkinsop"), "blenkinsop" );
	deepEqual( Stem("blent"), "blent" );
	deepEqual( Stem("bless"), "bless" );
	deepEqual( Stem("blessed"), "bless" );
	deepEqual( Stem("blessedly"), "blessedli" );
	deepEqual( Stem("blessedness"), "blessed" );
	deepEqual( Stem("blesses"), "bless" );
	deepEqual( Stem("blesseth"), "blesseth" );
	deepEqual( Stem("blessing"), "bless" );
	deepEqual( Stem("blessings"), "bless" );
	deepEqual( Stem("blest"), "blest" );
	deepEqual( Stem("bleu"), "bleu" );
	deepEqual( Stem("blew"), "blew" );
	deepEqual( Stem("blighted"), "blight" );
	deepEqual( Stem("blind"), "blind" );
	deepEqual( Stem("blinded"), "blind" );
	deepEqual( Stem("blindfold"), "blindfold" );
	deepEqual( Stem("blinding"), "blind" );
	deepEqual( Stem("blindly"), "blindli" );
	deepEqual( Stem("blindness"), "blind" );
	deepEqual( Stem("blinds"), "blind" );
	deepEqual( Stem("blink"), "blink" );
	deepEqual( Stem("blinkey"), "blinkei" );
	deepEqual( Stem("blinking"), "blink" );
	deepEqual( Stem("bliss"), "bliss" );
	deepEqual( Stem("blissful"), "bliss" );
	deepEqual( Stem("blist"), "blist" );
	deepEqual( Stem("blister"), "blister" );
	deepEqual( Stem("blisters"), "blister" );
	deepEqual( Stem("blithe"), "blith" );
	deepEqual( Stem("blithild"), "blithild" );
	deepEqual( Stem("bloat"), "bloat" );
	deepEqual( Stem("block"), "block" );
	deepEqual( Stem("blocked"), "block" );
	deepEqual( Stem("blockish"), "blockish" );
	deepEqual( Stem("blocks"), "block" );
	deepEqual( Stem("blois"), "bloi" );
	deepEqual( Stem("blond"), "blond" );
	deepEqual( Stem("blonde"), "blond" );
	deepEqual( Stem("blondes"), "blond" );
	deepEqual( Stem("blood"), "blood" );
	deepEqual( Stem("blooded"), "blood" );
	deepEqual( Stem("bloodhound"), "bloodhound" );
	deepEqual( Stem("bloodhounds"), "bloodhound" );
	deepEqual( Stem("bloodied"), "bloodi" );
	deepEqual( Stem("bloodier"), "bloodier" );
	deepEqual( Stem("bloodiest"), "bloodiest" );
	deepEqual( Stem("bloodily"), "bloodili" );
	deepEqual( Stem("bloodless"), "bloodless" );
	deepEqual( Stem("bloods"), "blood" );
	deepEqual( Stem("bloodshed"), "bloodsh" );
	deepEqual( Stem("bloodshedding"), "bloodshed" );
	deepEqual( Stem("bloodshot"), "bloodshot" );
	deepEqual( Stem("bloodstained"), "bloodstain" );
	deepEqual( Stem("bloodthirsty"), "bloodthirsti" );
	deepEqual( Stem("bloody"), "bloodi" );
	deepEqual( Stem("bloom"), "bloom" );
	deepEqual( Stem("bloomed"), "bloom" );
	deepEqual( Stem("blooming"), "bloom" );
	deepEqual( Stem("blooms"), "bloom" );
	deepEqual( Stem("bloomsbury"), "bloomsburi" );
	deepEqual( Stem("blossom"), "blossom" );
	deepEqual( Stem("blossoming"), "blossom" );
	deepEqual( Stem("blossoms"), "blossom" );
	deepEqual( Stem("blot"), "blot" );
	deepEqual( Stem("blots"), "blot" );
	deepEqual( Stem("blotted"), "blot" );
	deepEqual( Stem("blotting"), "blot" );
	deepEqual( Stem("blount"), "blount" );
	deepEqual( Stem("blow"), "blow" );
	deepEqual( Stem("blowed"), "blow" );
	deepEqual( Stem("blowers"), "blower" );
	deepEqual( Stem("blowest"), "blowest" );
	deepEqual( Stem("blowing"), "blow" );
	deepEqual( Stem("blowman"), "blowman" );
	deepEqual( Stem("blown"), "blown" );
	deepEqual( Stem("blows"), "blow" );
	deepEqual( Stem("blowse"), "blows" );
	deepEqual( Stem("blubb"), "blubb" );
	deepEqual( Stem("blubber"), "blubber" );
	deepEqual( Stem("blubbered"), "blubber" );
	deepEqual( Stem("blubbering"), "blubber" );
	deepEqual( Stem("bluchers"), "blucher" );
	deepEqual( Stem("bluck"), "bluck" );
	deepEqual( Stem("bludyer"), "bludyer" );
	deepEqual( Stem("bludyers"), "bludyer" );
	deepEqual( Stem("blue"), "blue" );
	deepEqual( Stem("bluebeard"), "bluebeard" );
	deepEqual( Stem("bluecaps"), "bluecap" );
	deepEqual( Stem("bluest"), "bluest" );
	deepEqual( Stem("blundering"), "blunder" );
	deepEqual( Stem("blunders"), "blunder" );
	deepEqual( Stem("blunt"), "blunt" );
	deepEqual( Stem("blunted"), "blunt" );
	deepEqual( Stem("blunter"), "blunter" );
	deepEqual( Stem("bluntest"), "bluntest" );
	deepEqual( Stem("blunting"), "blunt" );
	deepEqual( Stem("bluntly"), "bluntli" );
	deepEqual( Stem("bluntness"), "blunt" );
	deepEqual( Stem("blunts"), "blunt" );
	deepEqual( Stem("blur"), "blur" );
	deepEqual( Stem("blurr"), "blurr" );
	deepEqual( Stem("blurs"), "blur" );
	deepEqual( Stem("blurting"), "blurt" );
	deepEqual( Stem("blush"), "blush" );
	deepEqual( Stem("blushed"), "blush" );
	deepEqual( Stem("blushes"), "blush" );
	deepEqual( Stem("blushest"), "blushest" );
	deepEqual( Stem("blushing"), "blush" );
	deepEqual( Stem("blust"), "blust" );
	deepEqual( Stem("bluster"), "bluster" );
	deepEqual( Stem("blusterer"), "bluster" );
	deepEqual( Stem("blustering"), "bluster" );
	deepEqual( Stem("blusters"), "bluster" );
	deepEqual( Stem("bo"), "bo" );
	deepEqual( Stem("boar"), "boar" );
	deepEqual( Stem("board"), "board" );
	deepEqual( Stem("boarded"), "board" );
	deepEqual( Stem("boarder"), "boarder" );
	deepEqual( Stem("boarders"), "boarder" );
	deepEqual( Stem("boarding"), "board" );
	deepEqual( Stem("boards"), "board" );
	deepEqual( Stem("boarish"), "boarish" );
	deepEqual( Stem("boars"), "boar" );
	deepEqual( Stem("boast"), "boast" );
	deepEqual( Stem("boasted"), "boast" );
	deepEqual( Stem("boastful"), "boast" );
	deepEqual( Stem("boasting"), "boast" );
	deepEqual( Stem("boasts"), "boast" );
	deepEqual( Stem("boat"), "boat" );
	deepEqual( Stem("boats"), "boat" );
	deepEqual( Stem("boatswain"), "boatswain" );
	deepEqual( Stem("bob"), "bob" );
	deepEqual( Stem("bobachy"), "bobachi" );
	deepEqual( Stem("bobb"), "bobb" );
	deepEqual( Stem("bobbing"), "bob" );
	deepEqual( Stem("bobbins"), "bobbin" );
	deepEqual( Stem("bobby"), "bobbi" );
	deepEqual( Stem("bobinot"), "bobinot" );
	deepEqual( Stem("boblibindo"), "boblibindo" );
	deepEqual( Stem("bobs"), "bob" );
	deepEqual( Stem("bobtail"), "bobtail" );
	deepEqual( Stem("bocchus"), "bocchu" );
	deepEqual( Stem("bode"), "bode" );
	deepEqual( Stem("boded"), "bode" );
	deepEqual( Stem("bodements"), "bodement" );
	deepEqual( Stem("bodes"), "bode" );
	deepEqual( Stem("bodg"), "bodg" );
	deepEqual( Stem("bodied"), "bodi" );
	deepEqual( Stem("bodies"), "bodi" );
	deepEqual( Stem("bodiless"), "bodiless" );
	deepEqual( Stem("bodily"), "bodili" );
	deepEqual( Stem("boding"), "bode" );
	deepEqual( Stem("bodkin"), "bodkin" );
	deepEqual( Stem("body"), "bodi" );
	deepEqual( Stem("bodykins"), "bodykin" );
	deepEqual( Stem("bog"), "bog" );
	deepEqual( Stem("boggle"), "boggl" );
	deepEqual( Stem("boggler"), "boggler" );
	deepEqual( Stem("boggley"), "bogglei" );
	deepEqual( Stem("bogs"), "bog" );
	deepEqual( Stem("bohemia"), "bohemia" );
	deepEqual( Stem("bohemian"), "bohemian" );
	deepEqual( Stem("bohemians"), "bohemian" );
	deepEqual( Stem("bohun"), "bohun" );
	deepEqual( Stem("boil"), "boil" );
	deepEqual( Stem("boiled"), "boil" );
	deepEqual( Stem("boiling"), "boil" );
	deepEqual( Stem("boils"), "boil" );
	deepEqual( Stem("bois"), "boi" );
	deepEqual( Stem("boist"), "boist" );
	deepEqual( Stem("boisterous"), "boister" );
	deepEqual( Stem("boisterously"), "boister" );
	deepEqual( Stem("boisterousness"), "boister" );
	deepEqual( Stem("boitier"), "boitier" );
	deepEqual( Stem("bokay"), "bokai" );
	deepEqual( Stem("bold"), "bold" );
	deepEqual( Stem("bolden"), "bolden" );
	deepEqual( Stem("bolder"), "bolder" );
	deepEqual( Stem("boldest"), "boldest" );
	deepEqual( Stem("boldly"), "boldli" );
	deepEqual( Stem("boldness"), "bold" );
	deepEqual( Stem("bolds"), "bold" );
	deepEqual( Stem("bolingbroke"), "bolingbrok" );
	deepEqual( Stem("bolkum"), "bolkum" );
	deepEqual( Stem("bolster"), "bolster" );
	deepEqual( Stem("bolt"), "bolt" );
	deepEqual( Stem("bolted"), "bolt" );
	deepEqual( Stem("bolter"), "bolter" );
	deepEqual( Stem("bolters"), "bolter" );
	deepEqual( Stem("bolting"), "bolt" );
	deepEqual( Stem("bolts"), "bolt" );
	deepEqual( Stem("bolus"), "bolu" );
	deepEqual( Stem("bombard"), "bombard" );
	deepEqual( Stem("bombards"), "bombard" );
	deepEqual( Stem("bombast"), "bombast" );
	deepEqual( Stem("bombay"), "bombai" );
	deepEqual( Stem("bon"), "bon" );
	deepEqual( Stem("bona"), "bona" );
	deepEqual( Stem("bonamy"), "bonami" );
	deepEqual( Stem("bonaparte"), "bonapart" );
	deepEqual( Stem("bonaparty"), "bonaparti" );
	deepEqual( Stem("bond"), "bond" );
	deepEqual( Stem("bondage"), "bondag" );
	deepEqual( Stem("bonded"), "bond" );
	deepEqual( Stem("bondmaid"), "bondmaid" );
	deepEqual( Stem("bondman"), "bondman" );
	deepEqual( Stem("bondmen"), "bondmen" );
	deepEqual( Stem("bonds"), "bond" );
	deepEqual( Stem("bondslave"), "bondslav" );
	deepEqual( Stem("bone"), "bone" );
	deepEqual( Stem("boned"), "bone" );
	deepEqual( Stem("boneless"), "boneless" );
	deepEqual( Stem("bones"), "bone" );
	deepEqual( Stem("boney"), "bonei" );
	deepEqual( Stem("bonfire"), "bonfir" );
	deepEqual( Stem("bonfires"), "bonfir" );
	deepEqual( Stem("boniface"), "bonifac" );
	deepEqual( Stem("bonjour"), "bonjour" );
	deepEqual( Stem("bonn"), "bonn" );
	deepEqual( Stem("bonne"), "bonn" );
	deepEqual( Stem("bonnet"), "bonnet" );
	deepEqual( Stem("bonneted"), "bonnet" );
	deepEqual( Stem("bonnets"), "bonnet" );
	deepEqual( Stem("bonny"), "bonni" );
	deepEqual( Stem("bonos"), "bono" );
	deepEqual( Stem("bonto"), "bonto" );
	deepEqual( Stem("bonville"), "bonvil" );
	deepEqual( Stem("boo"), "boo" );
	deepEqual( Stem("booby"), "boobi" );
	deepEqual( Stem("bood"), "bood" );
	deepEqual( Stem("book"), "book" );
	deepEqual( Stem("bookcases"), "bookcas" );
	deepEqual( Stem("booked"), "book" );
	deepEqual( Stem("bookish"), "bookish" );
	deepEqual( Stem("books"), "book" );
	deepEqual( Stem("bookseller"), "booksel" );
	deepEqual( Stem("booky"), "booki" );
	deepEqual( Stem("boompjes"), "boompj" );
	deepEqual( Stem("boon"), "boon" );
	deepEqual( Stem("boons"), "boon" );
	deepEqual( Stem("boor"), "boor" );
	deepEqual( Stem("boorish"), "boorish" );
	deepEqual( Stem("boors"), "boor" );
	deepEqual( Stem("boot"), "boot" );
	deepEqual( Stem("booted"), "boot" );
	deepEqual( Stem("booterstown"), "booterstown" );
	deepEqual( Stem("booth"), "booth" );
	deepEqual( Stem("booths"), "booth" );
	deepEqual( Stem("booties"), "booti" );
	deepEqual( Stem("bootless"), "bootless" );
	deepEqual( Stem("boots"), "boot" );
	deepEqual( Stem("booty"), "booti" );
	deepEqual( Stem("boozed"), "booz" );
	deepEqual( Stem("bor"), "bor" );
	deepEqual( Stem("bora"), "bora" );
	deepEqual( Stem("borachio"), "borachio" );
	deepEqual( Stem("bordeaux"), "bordeaux" );
	deepEqual( Stem("border"), "border" );
	deepEqual( Stem("bordered"), "border" );
	deepEqual( Stem("borderers"), "border" );
	deepEqual( Stem("borders"), "border" );
	deepEqual( Stem("bore"), "bore" );
	deepEqual( Stem("boreas"), "borea" );
	deepEqual( Stem("bored"), "bore" );
	deepEqual( Stem("bores"), "bore" );
	deepEqual( Stem("boring"), "bore" );
	deepEqual( Stem("born"), "born" );
	deepEqual( Stem("borne"), "born" );
	deepEqual( Stem("borodino"), "borodino" );
	deepEqual( Stem("borough"), "borough" );
	deepEqual( Stem("boroughs"), "borough" );
	deepEqual( Stem("borrow"), "borrow" );
	deepEqual( Stem("borrowed"), "borrow" );
	deepEqual( Stem("borrower"), "borrow" );
	deepEqual( Stem("borrowing"), "borrow" );
	deepEqual( Stem("borrows"), "borrow" );
	deepEqual( Stem("bosko"), "bosko" );
	deepEqual( Stem("boskos"), "bosko" );
	deepEqual( Stem("bosky"), "boski" );
	deepEqual( Stem("bosom"), "bosom" );
	deepEqual( Stem("bosoms"), "bosom" );
	deepEqual( Stem("boson"), "boson" );
	deepEqual( Stem("boss"), "boss" );
	deepEqual( Stem("bosworth"), "bosworth" );
	deepEqual( Stem("botany"), "botani" );
	deepEqual( Stem("botch"), "botch" );
	deepEqual( Stem("botcher"), "botcher" );
	deepEqual( Stem("botches"), "botch" );
	deepEqual( Stem("botchy"), "botchi" );
	deepEqual( Stem("both"), "both" );
	deepEqual( Stem("bother"), "bother" );
	deepEqual( Stem("botley"), "botlei" );
	deepEqual( Stem("bots"), "bot" );
	deepEqual( Stem("bottle"), "bottl" );
	deepEqual( Stem("bottled"), "bottl" );
	deepEqual( Stem("bottles"), "bottl" );
	deepEqual( Stem("bottom"), "bottom" );
	deepEqual( Stem("bottomless"), "bottomless" );
	deepEqual( Stem("bottoms"), "bottom" );
	deepEqual( Stem("bouciqualt"), "bouciqualt" );
	deepEqual( Stem("bouge"), "boug" );
	deepEqual( Stem("bough"), "bough" );
	deepEqual( Stem("boughs"), "bough" );
	deepEqual( Stem("bought"), "bought" );
	deepEqual( Stem("boule"), "boul" );
	deepEqual( Stem("boulevard"), "boulevard" );
	deepEqual( Stem("boulevards"), "boulevard" );
	deepEqual( Stem("boulogne"), "boulogn" );
	deepEqual( Stem("boulter"), "boulter" );
	deepEqual( Stem("bounce"), "bounc" );
	deepEqual( Stem("bounced"), "bounc" );
	deepEqual( Stem("bouncing"), "bounc" );
	deepEqual( Stem("bound"), "bound" );
	deepEqual( Stem("boundary"), "boundari" );
	deepEqual( Stem("bounded"), "bound" );
	deepEqual( Stem("bounden"), "bounden" );
	deepEqual( Stem("boundeth"), "boundeth" );
	deepEqual( Stem("bounding"), "bound" );
	deepEqual( Stem("boundless"), "boundless" );
	deepEqual( Stem("bounds"), "bound" );
	deepEqual( Stem("bounteous"), "bounteou" );
	deepEqual( Stem("bounteously"), "bounteous" );
	deepEqual( Stem("bounties"), "bounti" );
	deepEqual( Stem("bountiful"), "bounti" );
	deepEqual( Stem("bountifully"), "bountifulli" );
	deepEqual( Stem("bounty"), "bounti" );
	deepEqual( Stem("bouquet"), "bouquet" );
	deepEqual( Stem("bouquets"), "bouquet" );
	deepEqual( Stem("bourbier"), "bourbier" );
	deepEqual( Stem("bourbon"), "bourbon" );
	deepEqual( Stem("bourbons"), "bourbon" );
	deepEqual( Stem("bourchier"), "bourchier" );
	deepEqual( Stem("bourdeaux"), "bourdeaux" );
	deepEqual( Stem("bourgeois"), "bourgeoi" );
	deepEqual( Stem("bourgeoisie"), "bourgeoisi" );
	deepEqual( Stem("bourn"), "bourn" );
	deepEqual( Stem("bout"), "bout" );
	deepEqual( Stem("bouts"), "bout" );
	deepEqual( Stem("bove"), "bove" );
	deepEqual( Stem("bow"), "bow" );
	deepEqual( Stem("bowcase"), "bowcas" );
	deepEqual( Stem("bowed"), "bow" );
	deepEqual( Stem("bowels"), "bowel" );
	deepEqual( Stem("bower"), "bower" );
	deepEqual( Stem("bowing"), "bow" );
	deepEqual( Stem("bowl"), "bowl" );
	deepEqual( Stem("bowler"), "bowler" );
	deepEqual( Stem("bowling"), "bowl" );
	deepEqual( Stem("bowls"), "bowl" );
	deepEqual( Stem("bows"), "bow" );
	deepEqual( Stem("bowsprit"), "bowsprit" );
	deepEqual( Stem("bowstring"), "bowstr" );
	deepEqual( Stem("box"), "box" );
	deepEqual( Stem("boxed"), "box" );
	deepEqual( Stem("boxers"), "boxer" );
	deepEqual( Stem("boxes"), "box" );
	deepEqual( Stem("boxing"), "box" );
	deepEqual( Stem("boy"), "boi" );
	deepEqual( Stem("boyet"), "boyet" );
	deepEqual( Stem("boyhood"), "boyhood" );
	deepEqual( Stem("boyish"), "boyish" );
	deepEqual( Stem("boys"), "boi" );
	deepEqual( Stem("brabant"), "brabant" );
	deepEqual( Stem("brabantio"), "brabantio" );
	deepEqual( Stem("brabble"), "brabbl" );
	deepEqual( Stem("brabbler"), "brabbler" );
	deepEqual( Stem("brac"), "brac" );
	deepEqual( Stem("brace"), "brace" );
	deepEqual( Stem("bracelet"), "bracelet" );
	deepEqual( Stem("bracelets"), "bracelet" );
	deepEqual( Stem("braces"), "brace" );
	deepEqual( Stem("brach"), "brach" );
	deepEqual( Stem("bracy"), "braci" );
	deepEqual( Stem("brag"), "brag" );
	deepEqual( Stem("bragg"), "bragg" );
	deepEqual( Stem("braggadocio"), "braggadocio" );
	deepEqual( Stem("braggardism"), "braggard" );
	deepEqual( Stem("braggards"), "braggard" );
	deepEqual( Stem("braggart"), "braggart" );
	deepEqual( Stem("braggarts"), "braggart" );
	deepEqual( Stem("bragged"), "brag" );
	deepEqual( Stem("bragging"), "brag" );
	deepEqual( Stem("bragless"), "bragless" );
	deepEqual( Stem("brags"), "brag" );
	deepEqual( Stem("braid"), "braid" );
	deepEqual( Stem("braided"), "braid" );
	deepEqual( Stem("brain"), "brain" );
	deepEqual( Stem("brained"), "brain" );
	deepEqual( Stem("brainford"), "brainford" );
	deepEqual( Stem("brainish"), "brainish" );
	deepEqual( Stem("brainless"), "brainless" );
	deepEqual( Stem("brains"), "brain" );
	deepEqual( Stem("brainsick"), "brainsick" );
	deepEqual( Stem("brainsickly"), "brainsickli" );
	deepEqual( Stem("brake"), "brake" );
	deepEqual( Stem("brakenbury"), "brakenburi" );
	deepEqual( Stem("brakes"), "brake" );
	deepEqual( Stem("bramah"), "bramah" );
	deepEqual( Stem("brambles"), "brambl" );
	deepEqual( Stem("bran"), "bran" );
	deepEqual( Stem("branch"), "branch" );
	deepEqual( Stem("branches"), "branch" );
	deepEqual( Stem("branchless"), "branchless" );
	deepEqual( Stem("brand"), "brand" );
	deepEqual( Stem("branded"), "brand" );
	deepEqual( Stem("brandish"), "brandish" );
	deepEqual( Stem("brandon"), "brandon" );
	deepEqual( Stem("brands"), "brand" );
	deepEqual( Stem("brandy"), "brandi" );
	deepEqual( Stem("bras"), "bra" );
	deepEqual( Stem("brass"), "brass" );
	deepEqual( Stem("brassy"), "brassi" );
	deepEqual( Stem("brat"), "brat" );
	deepEqual( Stem("braten"), "braten" );
	deepEqual( Stem("brats"), "brat" );
	deepEqual( Stem("brav"), "brav" );
	deepEqual( Stem("brava"), "brava" );
	deepEqual( Stem("brave"), "brave" );
	deepEqual( Stem("braved"), "brave" );
	deepEqual( Stem("bravely"), "brave" );
	deepEqual( Stem("braver"), "braver" );
	deepEqual( Stem("bravery"), "braveri" );
	deepEqual( Stem("braves"), "brave" );
	deepEqual( Stem("bravest"), "bravest" );
	deepEqual( Stem("braving"), "brave" );
	deepEqual( Stem("bravo"), "bravo" );
	deepEqual( Stem("bravos"), "bravo" );
	deepEqual( Stem("brawl"), "brawl" );
	deepEqual( Stem("brawler"), "brawler" );
	deepEqual( Stem("brawling"), "brawl" );
	deepEqual( Stem("brawls"), "brawl" );
	deepEqual( Stem("brawn"), "brawn" );
	deepEqual( Stem("brawns"), "brawn" );
	deepEqual( Stem("bray"), "brai" );
	deepEqual( Stem("braying"), "brai" );
	deepEqual( Stem("brayvo"), "brayvo" );
	deepEqual( Stem("braz"), "braz" );
	deepEqual( Stem("brazen"), "brazen" );
	deepEqual( Stem("brazier"), "brazier" );
	deepEqual( Stem("brazil"), "brazil" );
	deepEqual( Stem("brazils"), "brazil" );
	deepEqual( Stem("breach"), "breach" );
	deepEqual( Stem("breaches"), "breach" );
	deepEqual( Stem("bread"), "bread" );
	deepEqual( Stem("breadth"), "breadth" );
	deepEqual( Stem("break"), "break" );
	deepEqual( Stem("breaker"), "breaker" );
	deepEqual( Stem("breakfast"), "breakfast" );
	deepEqual( Stem("breakfasted"), "breakfast" );
	deepEqual( Stem("breakfasts"), "breakfast" );
	deepEqual( Stem("breaking"), "break" );
	deepEqual( Stem("breaks"), "break" );
	deepEqual( Stem("breast"), "breast" );
	deepEqual( Stem("breasted"), "breast" );
	deepEqual( Stem("breasting"), "breast" );
	deepEqual( Stem("breastplate"), "breastplat" );
	deepEqual( Stem("breasts"), "breast" );
	deepEqual( Stem("breath"), "breath" );
	deepEqual( Stem("breathe"), "breath" );
	deepEqual( Stem("breathed"), "breath" );
	deepEqual( Stem("breather"), "breather" );
	deepEqual( Stem("breathers"), "breather" );
	deepEqual( Stem("breathes"), "breath" );
	deepEqual( Stem("breathest"), "breathest" );
	deepEqual( Stem("breathing"), "breath" );
	deepEqual( Stem("breathless"), "breathless" );
	deepEqual( Stem("breaths"), "breath" );
	deepEqual( Stem("brecknock"), "brecknock" );
	deepEqual( Stem("bred"), "bred" );
	deepEqual( Stem("breech"), "breech" );
	deepEqual( Stem("breeches"), "breech" );
	deepEqual( Stem("breeching"), "breech" );
	deepEqual( Stem("breed"), "breed" );
	deepEqual( Stem("breeder"), "breeder" );
	deepEqual( Stem("breeders"), "breeder" );
	deepEqual( Stem("breeding"), "breed" );
	deepEqual( Stem("breeds"), "breed" );
	deepEqual( Stem("breese"), "brees" );
	deepEqual( Stem("breeze"), "breez" );
	deepEqual( Stem("breff"), "breff" );
	deepEqual( Stem("brenoit"), "brenoit" );
	deepEqual( Stem("brent"), "brent" );
	deepEqual( Stem("brentwood"), "brentwood" );
	deepEqual( Stem("brequet"), "brequet" );
	deepEqual( Stem("bretagne"), "bretagn" );
	deepEqual( Stem("brethen"), "brethen" );
	deepEqual( Stem("bretheren"), "bretheren" );
	deepEqual( Stem("brethren"), "brethren" );
	deepEqual( Stem("brevet"), "brevet" );
	deepEqual( Stem("brevis"), "brevi" );
	deepEqual( Stem("brevity"), "breviti" );
	deepEqual( Stem("brew"), "brew" );
	deepEqual( Stem("brewage"), "brewag" );
	deepEqual( Stem("brewed"), "brew" );
	deepEqual( Stem("brewer"), "brewer" );
	deepEqual( Stem("brewers"), "brewer" );
	deepEqual( Stem("brewing"), "brew" );
	deepEqual( Stem("brews"), "brew" );
	deepEqual( Stem("brian"), "brian" );
	deepEqual( Stem("briareus"), "briareu" );
	deepEqual( Stem("briars"), "briar" );
	deepEqual( Stem("brib"), "brib" );
	deepEqual( Stem("bribe"), "bribe" );
	deepEqual( Stem("bribed"), "bribe" );
	deepEqual( Stem("briber"), "briber" );
	deepEqual( Stem("bribes"), "bribe" );
	deepEqual( Stem("brick"), "brick" );
	deepEqual( Stem("bricklayer"), "bricklay" );
	deepEqual( Stem("bricks"), "brick" );
	deepEqual( Stem("bridal"), "bridal" );
	deepEqual( Stem("bride"), "bride" );
	deepEqual( Stem("bridegroom"), "bridegroom" );
	deepEqual( Stem("bridegrooms"), "bridegroom" );
	deepEqual( Stem("brides"), "bride" );
	deepEqual( Stem("bridesmaid"), "bridesmaid" );
	deepEqual( Stem("bridesmaids"), "bridesmaid" );
	deepEqual( Stem("bridge"), "bridg" );
	deepEqual( Stem("bridgenorth"), "bridgenorth" );
	deepEqual( Stem("bridges"), "bridg" );
	deepEqual( Stem("bridget"), "bridget" );
	deepEqual( Stem("bridle"), "bridl" );
	deepEqual( Stem("bridled"), "bridl" );
	deepEqual( Stem("brie"), "brie" );
	deepEqual( Stem("brief"), "brief" );
	deepEqual( Stem("briefer"), "briefer" );
	deepEqual( Stem("briefest"), "briefest" );
	deepEqual( Stem("briefless"), "briefless" );
	deepEqual( Stem("briefly"), "briefli" );
	deepEqual( Stem("briefness"), "brief" );
	deepEqual( Stem("brienne"), "brienn" );
	deepEqual( Stem("brier"), "brier" );
	deepEqual( Stem("briers"), "brier" );
	deepEqual( Stem("brigade"), "brigad" );
	deepEqual( Stem("brigandine"), "brigandin" );
	deepEqual( Stem("briggs"), "brigg" );
	deepEqual( Stem("bright"), "bright" );
	deepEqual( Stem("brighten"), "brighten" );
	deepEqual( Stem("brightened"), "brighten" );
	deepEqual( Stem("brightest"), "brightest" );
	deepEqual( Stem("brightly"), "brightli" );
	deepEqual( Stem("brightness"), "bright" );
	deepEqual( Stem("brighton"), "brighton" );
	deepEqual( Stem("brilliance"), "brillianc" );
	deepEqual( Stem("brilliancy"), "brillianc" );
	deepEqual( Stem("brilliant"), "brilliant" );
	deepEqual( Stem("brilliantly"), "brilliantli" );
	deepEqual( Stem("brilliants"), "brilliant" );
	deepEqual( Stem("brim"), "brim" );
	deepEqual( Stem("brimful"), "brim" );
	deepEqual( Stem("brimming"), "brim" );
	deepEqual( Stem("brims"), "brim" );
	deepEqual( Stem("brimstone"), "brimston" );
	deepEqual( Stem("brinded"), "brind" );
	deepEqual( Stem("brine"), "brine" );
	deepEqual( Stem("bring"), "bring" );
	deepEqual( Stem("bringer"), "bringer" );
	deepEqual( Stem("bringeth"), "bringeth" );
	deepEqual( Stem("bringing"), "bring" );
	deepEqual( Stem("bringings"), "bring" );
	deepEqual( Stem("brings"), "bring" );
	deepEqual( Stem("brinish"), "brinish" );
	deepEqual( Stem("brink"), "brink" );
	deepEqual( Stem("brisk"), "brisk" );
	deepEqual( Stem("brisker"), "brisker" );
	deepEqual( Stem("briskly"), "briskli" );
	deepEqual( Stem("briskness"), "brisk" );
	deepEqual( Stem("brisky"), "briski" );
	deepEqual( Stem("bristle"), "bristl" );
	deepEqual( Stem("bristled"), "bristl" );
	deepEqual( Stem("bristling"), "bristl" );
	deepEqual( Stem("bristly"), "bristli" );
	deepEqual( Stem("bristol"), "bristol" );
	deepEqual( Stem("bristow"), "bristow" );
	deepEqual( Stem("britain"), "britain" );
	deepEqual( Stem("britaine"), "britain" );
	deepEqual( Stem("britaines"), "britain" );
	deepEqual( Stem("britannia"), "britannia" );
	deepEqual( Stem("british"), "british" );
	deepEqual( Stem("briton"), "briton" );
	deepEqual( Stem("britons"), "briton" );
	deepEqual( Stem("brittany"), "brittani" );
	deepEqual( Stem("brittle"), "brittl" );
	deepEqual( Stem("britzkas"), "britzka" );
	deepEqual( Stem("britzska"), "britzska" );
	deepEqual( Stem("broach"), "broach" );
	deepEqual( Stem("broached"), "broach" );
	deepEqual( Stem("broad"), "broad" );
	deepEqual( Stem("broader"), "broader" );
	deepEqual( Stem("broadsides"), "broadsid" );
	deepEqual( Stem("broadwood"), "broadwood" );
	deepEqual( Stem("brocade"), "brocad" );
	deepEqual( Stem("brocades"), "brocad" );
	deepEqual( Stem("brocas"), "broca" );
	deepEqual( Stem("brock"), "brock" );
	deepEqual( Stem("brogues"), "brogu" );
	deepEqual( Stem("broil"), "broil" );
	deepEqual( Stem("broiling"), "broil" );
	deepEqual( Stem("broils"), "broil" );
	deepEqual( Stem("broke"), "broke" );
	deepEqual( Stem("broken"), "broken" );
	deepEqual( Stem("brokenly"), "brokenli" );
	deepEqual( Stem("broker"), "broker" );
	deepEqual( Stem("brokers"), "broker" );
	deepEqual( Stem("brokes"), "broke" );
	deepEqual( Stem("broking"), "broke" );
	deepEqual( Stem("brompton"), "brompton" );
	deepEqual( Stem("bronze"), "bronz" );
	deepEqual( Stem("brooch"), "brooch" );
	deepEqual( Stem("brooches"), "brooch" );
	deepEqual( Stem("brood"), "brood" );
	deepEqual( Stem("brooded"), "brood" );
	deepEqual( Stem("brooding"), "brood" );
	deepEqual( Stem("brook"), "brook" );
	deepEqual( Stem("brookgreen"), "brookgreen" );
	deepEqual( Stem("brooks"), "brook" );
	deepEqual( Stem("broom"), "broom" );
	deepEqual( Stem("broomstaff"), "broomstaff" );
	deepEqual( Stem("broth"), "broth" );
	deepEqual( Stem("brothel"), "brothel" );
	deepEqual( Stem("brother"), "brother" );
	deepEqual( Stem("brotherhood"), "brotherhood" );
	deepEqual( Stem("brotherhoods"), "brotherhood" );
	deepEqual( Stem("brotherly"), "brotherli" );
	deepEqual( Stem("brothernlaw"), "brothernlaw" );
	deepEqual( Stem("brothers"), "brother" );
	deepEqual( Stem("broths"), "broth" );
	deepEqual( Stem("brougham"), "brougham" );
	deepEqual( Stem("broughams"), "brougham" );
	deepEqual( Stem("brought"), "brought" );
	deepEqual( Stem("brow"), "brow" );
	deepEqual( Stem("browed"), "brow" );
	deepEqual( Stem("brown"), "brown" );
	deepEqual( Stem("browner"), "browner" );
	deepEqual( Stem("brownist"), "brownist" );
	deepEqual( Stem("browny"), "browni" );
	deepEqual( Stem("brows"), "brow" );
	deepEqual( Stem("browse"), "brows" );
	deepEqual( Stem("browsing"), "brows" );
	deepEqual( Stem("bruges"), "bruge" );
	deepEqual( Stem("bruin"), "bruin" );
	deepEqual( Stem("bruis"), "brui" );
	deepEqual( Stem("bruise"), "bruis" );
	deepEqual( Stem("bruised"), "bruis" );
	deepEqual( Stem("bruisers"), "bruiser" );
	deepEqual( Stem("bruises"), "bruis" );
	deepEqual( Stem("bruising"), "bruis" );
	deepEqual( Stem("bruit"), "bruit" );
	deepEqual( Stem("bruited"), "bruit" );
	deepEqual( Stem("brummel"), "brummel" );
	deepEqual( Stem("brummell"), "brummel" );
	deepEqual( Stem("brun"), "brun" );
	deepEqual( Stem("brundusium"), "brundusium" );
	deepEqual( Stem("brunoy"), "brunoi" );
	deepEqual( Stem("brunswick"), "brunswick" );
	deepEqual( Stem("brunswickers"), "brunswick" );
	deepEqual( Stem("brunt"), "brunt" );
	deepEqual( Stem("brush"), "brush" );
	deepEqual( Stem("brushed"), "brush" );
	deepEqual( Stem("brushes"), "brush" );
	deepEqual( Stem("brushing"), "brush" );
	deepEqual( Stem("brussels"), "brussel" );
	deepEqual( Stem("brutal"), "brutal" );
	deepEqual( Stem("brutality"), "brutal" );
	deepEqual( Stem("brute"), "brute" );
	deepEqual( Stem("brutish"), "brutish" );
	deepEqual( Stem("brutus"), "brutu" );
	deepEqual( Stem("bubble"), "bubbl" );
	deepEqual( Stem("bubbles"), "bubbl" );
	deepEqual( Stem("bubbling"), "bubbl" );
	deepEqual( Stem("bubukles"), "bubukl" );
	deepEqual( Stem("bucephalus"), "bucephalu" );
	deepEqual( Stem("buck"), "buck" );
	deepEqual( Stem("bucket"), "bucket" );
	deepEqual( Stem("buckets"), "bucket" );
	deepEqual( Stem("bucking"), "buck" );
	deepEqual( Stem("buckingham"), "buckingham" );
	deepEqual( Stem("buckinghamshire"), "buckinghamshir" );
	deepEqual( Stem("buckle"), "buckl" );
	deepEqual( Stem("buckled"), "buckl" );
	deepEqual( Stem("buckler"), "buckler" );
	deepEqual( Stem("bucklers"), "buckler" );
	deepEqual( Stem("bucklersbury"), "bucklersburi" );
	deepEqual( Stem("buckles"), "buckl" );
	deepEqual( Stem("buckram"), "buckram" );
	deepEqual( Stem("bucks"), "buck" );
	deepEqual( Stem("buckskin"), "buckskin" );
	deepEqual( Stem("buckskins"), "buckskin" );
	deepEqual( Stem("bud"), "bud" );
	deepEqual( Stem("budded"), "bud" );
	deepEqual( Stem("budding"), "bud" );
	deepEqual( Stem("budge"), "budg" );
	deepEqual( Stem("budgebudge"), "budgebudg" );
	deepEqual( Stem("budger"), "budger" );
	deepEqual( Stem("budget"), "budget" );
	deepEqual( Stem("buds"), "bud" );
	deepEqual( Stem("buff"), "buff" );
	deepEqual( Stem("buffet"), "buffet" );
	deepEqual( Stem("buffeting"), "buffet" );
	deepEqual( Stem("buffets"), "buffet" );
	deepEqual( Stem("buffoons"), "buffoon" );
	deepEqual( Stem("bug"), "bug" );
	deepEqual( Stem("bugbear"), "bugbear" );
	deepEqual( Stem("buggy"), "buggi" );
	deepEqual( Stem("bugle"), "bugl" );
	deepEqual( Stem("bugles"), "bugl" );
	deepEqual( Stem("bugs"), "bug" );
	deepEqual( Stem("build"), "build" );
	deepEqual( Stem("builded"), "build" );
	deepEqual( Stem("builder"), "builder" );
	deepEqual( Stem("buildeth"), "buildeth" );
	deepEqual( Stem("building"), "build" );
	deepEqual( Stem("buildings"), "build" );
	deepEqual( Stem("builds"), "build" );
	deepEqual( Stem("built"), "built" );
	deepEqual( Stem("bulbul"), "bulbul" );
	deepEqual( Stem("bulders"), "bulder" );
	deepEqual( Stem("bulgaria"), "bulgaria" );
	deepEqual( Stem("bulgarian"), "bulgarian" );
	deepEqual( Stem("bulk"), "bulk" );
	deepEqual( Stem("bulkeley"), "bulkelei" );
	deepEqual( Stem("bulks"), "bulk" );
	deepEqual( Stem("bull"), "bull" );
	deepEqual( Stem("bullcalf"), "bullcalf" );
	deepEqual( Stem("bullen"), "bullen" );
	deepEqual( Stem("bullens"), "bullen" );
	deepEqual( Stem("bullet"), "bullet" );
	deepEqual( Stem("bulletin"), "bulletin" );
	deepEqual( Stem("bulletins"), "bulletin" );
	deepEqual( Stem("bullets"), "bullet" );
	deepEqual( Stem("bullfinch"), "bullfinch" );
	deepEqual( Stem("bullied"), "bulli" );
	deepEqual( Stem("bullies"), "bulli" );
	deepEqual( Stem("bullion"), "bullion" );
	deepEqual( Stem("bullminster"), "bullminst" );
	deepEqual( Stem("bullock"), "bullock" );
	deepEqual( Stem("bullocks"), "bullock" );
	deepEqual( Stem("bulls"), "bull" );
	deepEqual( Stem("bully"), "bulli" );
	deepEqual( Stem("bullyin"), "bullyin" );
	deepEqual( Stem("bullying"), "bulli" );
	deepEqual( Stem("bulmer"), "bulmer" );
	deepEqual( Stem("bulwark"), "bulwark" );
	deepEqual( Stem("bulwarks"), "bulwark" );
	deepEqual( Stem("bum"), "bum" );
	deepEqual( Stem("bumbast"), "bumbast" );
	deepEqual( Stem("bump"), "bump" );
	deepEqual( Stem("bumper"), "bumper" );
	deepEqual( Stem("bumpers"), "bumper" );
	deepEqual( Stem("bumpkin"), "bumpkin" );
	deepEqual( Stem("bums"), "bum" );
	deepEqual( Stem("bunch"), "bunch" );
	deepEqual( Stem("bunches"), "bunch" );
	deepEqual( Stem("bundle"), "bundl" );
	deepEqual( Stem("bundlegunge"), "bundlegung" );
	deepEqual( Stem("bundles"), "bundl" );
	deepEqual( Stem("bung"), "bung" );
	deepEqual( Stem("bungalow"), "bungalow" );
	deepEqual( Stem("bunghole"), "bunghol" );
	deepEqual( Stem("bungle"), "bungl" );
	deepEqual( Stem("bungler"), "bungler" );
	deepEqual( Stem("bunglers"), "bungler" );
	deepEqual( Stem("bunker"), "bunker" );
	deepEqual( Stem("bunny"), "bunni" );
	deepEqual( Stem("bunting"), "bunt" );
	deepEqual( Stem("buoy"), "buoi" );
	deepEqual( Stem("bur"), "bur" );
	deepEqual( Stem("burbolt"), "burbolt" );
	deepEqual( Stem("burcke"), "burck" );
	deepEqual( Stem("burd"), "burd" );
	deepEqual( Stem("burden"), "burden" );
	deepEqual( Stem("burdened"), "burden" );
	deepEqual( Stem("burdening"), "burden" );
	deepEqual( Stem("burdenous"), "burden" );
	deepEqual( Stem("burdens"), "burden" );
	deepEqual( Stem("burgh"), "burgh" );
	deepEqual( Stem("burgher"), "burgher" );
	deepEqual( Stem("burghers"), "burgher" );
	deepEqual( Stem("burglar"), "burglar" );
	deepEqual( Stem("burglary"), "burglari" );
	deepEqual( Stem("burgo"), "burgo" );
	deepEqual( Stem("burgomasters"), "burgomast" );
	deepEqual( Stem("burgonet"), "burgonet" );
	deepEqual( Stem("burgundy"), "burgundi" );
	deepEqual( Stem("burial"), "burial" );
	deepEqual( Stem("buried"), "buri" );
	deepEqual( Stem("burier"), "burier" );
	deepEqual( Stem("buriest"), "buriest" );
	deepEqual( Stem("burjoice"), "burjoic" );
	deepEqual( Stem("burke"), "burk" );
	deepEqual( Stem("burly"), "burli" );
	deepEqual( Stem("burmese"), "burmes" );
	deepEqual( Stem("burn"), "burn" );
	deepEqual( Stem("burned"), "burn" );
	deepEqual( Stem("burnet"), "burnet" );
	deepEqual( Stem("burneth"), "burneth" );
	deepEqual( Stem("burning"), "burn" );
	deepEqual( Stem("burnish"), "burnish" );
	deepEqual( Stem("burns"), "burn" );
	deepEqual( Stem("burnt"), "burnt" );
	deepEqual( Stem("burr"), "burr" );
	deepEqual( Stem("burrows"), "burrow" );
	deepEqual( Stem("burs"), "bur" );
	deepEqual( Stem("burschen"), "burschen" );
	deepEqual( Stem("burst"), "burst" );
	deepEqual( Stem("bursting"), "burst" );
	deepEqual( Stem("bursts"), "burst" );
	deepEqual( Stem("burthen"), "burthen" );
	deepEqual( Stem("burthens"), "burthen" );
	deepEqual( Stem("burton"), "burton" );
	deepEqual( Stem("bury"), "buri" );
	deepEqual( Stem("burying"), "buri" );
	deepEqual( Stem("bush"), "bush" );
	deepEqual( Stem("bushels"), "bushel" );
	deepEqual( Stem("bushes"), "bush" );
	deepEqual( Stem("bushy"), "bushi" );
	deepEqual( Stem("busied"), "busi" );
	deepEqual( Stem("busies"), "busi" );
	deepEqual( Stem("busiest"), "busiest" );
	deepEqual( Stem("busily"), "busili" );
	deepEqual( Stem("busines"), "busin" );
	deepEqual( Stem("business"), "busi" );
	deepEqual( Stem("businesses"), "busi" );
	deepEqual( Stem("buskin"), "buskin" );
	deepEqual( Stem("busky"), "buski" );
	deepEqual( Stem("buss"), "buss" );
	deepEqual( Stem("busses"), "buss" );
	deepEqual( Stem("bussing"), "buss" );
	deepEqual( Stem("bust"), "bust" );
	deepEqual( Stem("busting"), "bust" );
	deepEqual( Stem("bustle"), "bustl" );
	deepEqual( Stem("bustled"), "bustl" );
	deepEqual( Stem("bustling"), "bustl" );
	deepEqual( Stem("busy"), "busi" );
	deepEqual( Stem("but"), "but" );
	deepEqual( Stem("butcheed"), "butche" );
	deepEqual( Stem("butcher"), "butcher" );
	deepEqual( Stem("butchered"), "butcher" );
	deepEqual( Stem("butcheries"), "butcheri" );
	deepEqual( Stem("butcherly"), "butcherli" );
	deepEqual( Stem("butchers"), "butcher" );
	deepEqual( Stem("butchery"), "butcheri" );
	deepEqual( Stem("bute"), "bute" );
	deepEqual( Stem("butes"), "bute" );
	deepEqual( Stem("butler"), "butler" );
	deepEqual( Stem("butlers"), "butler" );
	deepEqual( Stem("butt"), "butt" );
	deepEqual( Stem("butter"), "butter" );
	deepEqual( Stem("butterbrod"), "butterbrod" );
	deepEqual( Stem("butterbrods"), "butterbrod" );
	deepEqual( Stem("buttered"), "butter" );
	deepEqual( Stem("butterflies"), "butterfli" );
	deepEqual( Stem("butterfly"), "butterfli" );
	deepEqual( Stem("butterwoman"), "butterwoman" );
	deepEqual( Stem("buttery"), "butteri" );
	deepEqual( Stem("buttock"), "buttock" );
	deepEqual( Stem("buttocks"), "buttock" );
	deepEqual( Stem("button"), "button" );
	deepEqual( Stem("buttoned"), "button" );
	deepEqual( Stem("buttonhole"), "buttonhol" );
	deepEqual( Stem("buttonholes"), "buttonhol" );
	deepEqual( Stem("buttoning"), "button" );
	deepEqual( Stem("buttons"), "button" );
	deepEqual( Stem("buttony"), "buttoni" );
	deepEqual( Stem("buttress"), "buttress" );
	deepEqual( Stem("buttry"), "buttri" );
	deepEqual( Stem("butts"), "butt" );
	deepEqual( Stem("buty"), "buti" );
	deepEqual( Stem("buxom"), "buxom" );
	deepEqual( Stem("buxton"), "buxton" );
	deepEqual( Stem("buy"), "bui" );
	deepEqual( Stem("buyer"), "buyer" );
	deepEqual( Stem("buying"), "bui" );
	deepEqual( Stem("buys"), "bui" );
	deepEqual( Stem("buzz"), "buzz" );
	deepEqual( Stem("buzzard"), "buzzard" );
	deepEqual( Stem("buzzards"), "buzzard" );
	deepEqual( Stem("buzzers"), "buzzer" );
	deepEqual( Stem("buzzing"), "buzz" );
	deepEqual( Stem("by"), "by" );
	deepEqual( Stem("bye"), "bye" );
	deepEqual( Stem("bygone"), "bygon" );
	deepEqual( Stem("bygones"), "bygon" );
	deepEqual( Stem("byoo"), "byoo" );
	deepEqual( Stem("byword"), "byword" );
	deepEqual( Stem("byzantium"), "byzantium" );
	deepEqual( Stem("c"), "c" );
	deepEqual( Stem("ca"), "ca" );
	deepEqual( Stem("cab"), "cab" );
	deepEqual( Stem("cabal"), "cabal" );
	deepEqual( Stem("cabbage"), "cabbag" );
	deepEqual( Stem("cabileros"), "cabilero" );
	deepEqual( Stem("cabin"), "cabin" );
	deepEqual( Stem("cabinet"), "cabinet" );
	deepEqual( Stem("cabins"), "cabin" );
	deepEqual( Stem("cable"), "cabl" );
	deepEqual( Stem("cables"), "cabl" );
	deepEqual( Stem("cabs"), "cab" );
	deepEqual( Stem("cackle"), "cackl" );
	deepEqual( Stem("cackleby"), "cacklebi" );
	deepEqual( Stem("cackled"), "cackl" );
	deepEqual( Stem("cackling"), "cackl" );
	deepEqual( Stem("cacodemon"), "cacodemon" );
	deepEqual( Stem("cadaverous"), "cadaver" );
	deepEqual( Stem("caddies"), "caddi" );
	deepEqual( Stem("caddis"), "caddi" );
	deepEqual( Stem("caddisses"), "caddiss" );
	deepEqual( Stem("cade"), "cade" );
	deepEqual( Stem("cadence"), "cadenc" );
	deepEqual( Stem("cadent"), "cadent" );
	deepEqual( Stem("cades"), "cade" );
	deepEqual( Stem("cadet"), "cadet" );
	deepEqual( Stem("cadets"), "cadet" );
	deepEqual( Stem("cadmus"), "cadmu" );
	deepEqual( Stem("caduceus"), "caduceu" );
	deepEqual( Stem("cadwal"), "cadwal" );
	deepEqual( Stem("cadwallader"), "cadwallad" );
	deepEqual( Stem("caelius"), "caeliu" );
	deepEqual( Stem("caelo"), "caelo" );
	deepEqual( Stem("caen"), "caen" );
	deepEqual( Stem("caerlyon"), "caerlyon" );
	deepEqual( Stem("caerlyons"), "caerlyon" );
	deepEqual( Stem("caerylon"), "caerylon" );
	deepEqual( Stem("caesar"), "caesar" );
	deepEqual( Stem("caesarion"), "caesarion" );
	deepEqual( Stem("caesars"), "caesar" );
	deepEqual( Stem("cafe"), "cafe" );
	deepEqual( Stem("caffraria"), "caffraria" );
	deepEqual( Stem("cage"), "cage" );
	deepEqual( Stem("caged"), "cage" );
	deepEqual( Stem("cagion"), "cagion" );
	deepEqual( Stem("cain"), "cain" );
	deepEqual( Stem("cairngorm"), "cairngorm" );
	deepEqual( Stem("cairngorms"), "cairngorm" );
	deepEqual( Stem("caithness"), "caith" );
	deepEqual( Stem("caitiff"), "caitiff" );
	deepEqual( Stem("caitiffs"), "caitiff" );
	deepEqual( Stem("caius"), "caiu" );
	deepEqual( Stem("cajole"), "cajol" );
	deepEqual( Stem("cajoled"), "cajol" );
	deepEqual( Stem("cajolements"), "cajol" );
	deepEqual( Stem("cajoleries"), "cajoleri" );
	deepEqual( Stem("cajoling"), "cajol" );
	deepEqual( Stem("cak"), "cak" );
	deepEqual( Stem("cake"), "cake" );
	deepEqual( Stem("cakes"), "cake" );
	deepEqual( Stem("calaber"), "calab" );
	deepEqual( Stem("calais"), "calai" );
	deepEqual( Stem("calamities"), "calam" );
	deepEqual( Stem("calamity"), "calam" );
	deepEqual( Stem("calash"), "calash" );
	deepEqual( Stem("calchas"), "calcha" );
	deepEqual( Stem("calculate"), "calcul" );
	deepEqual( Stem("calculated"), "calcul" );
	deepEqual( Stem("calculating"), "calcul" );
	deepEqual( Stem("calculation"), "calcul" );
	deepEqual( Stem("calculations"), "calcul" );
	deepEqual( Stem("calcutta"), "calcutta" );
	deepEqual( Stem("calen"), "calen" );
	deepEqual( Stem("calendar"), "calendar" );
	deepEqual( Stem("calendars"), "calendar" );
	deepEqual( Stem("calf"), "calf" );
	deepEqual( Stem("caliban"), "caliban" );
	deepEqual( Stem("calibans"), "caliban" );
	deepEqual( Stem("calico"), "calico" );
	deepEqual( Stem("calipash"), "calipash" );
	deepEqual( Stem("calipee"), "calipe" );
	deepEqual( Stem("calipolis"), "calipoli" );
	deepEqual( Stem("cality"), "caliti" );
	deepEqual( Stem("caliver"), "caliv" );
	deepEqual( Stem("call"), "call" );
	deepEqual( Stem("callat"), "callat" );
	deepEqual( Stem("called"), "call" );
	deepEqual( Stem("callet"), "callet" );
	deepEqual( Stem("calling"), "call" );
	deepEqual( Stem("callous"), "callou" );
	deepEqual( Stem("calls"), "call" );
	deepEqual( Stem("calm"), "calm" );
	deepEqual( Stem("calmest"), "calmest" );
	deepEqual( Stem("calmly"), "calmli" );
	deepEqual( Stem("calmness"), "calm" );
	deepEqual( Stem("calms"), "calm" );
	deepEqual( Stem("calomel"), "calomel" );
	deepEqual( Stem("calpurnia"), "calpurnia" );
	deepEqual( Stem("calumniate"), "calumni" );
	deepEqual( Stem("calumniated"), "calumni" );
	deepEqual( Stem("calumniating"), "calumni" );
	deepEqual( Stem("calumnies"), "calumni" );
	deepEqual( Stem("calumnious"), "calumni" );
	deepEqual( Stem("calumny"), "calumni" );
	deepEqual( Stem("calve"), "calv" );
	deepEqual( Stem("calved"), "calv" );
	deepEqual( Stem("calves"), "calv" );
	deepEqual( Stem("calveskins"), "calveskin" );
	deepEqual( Stem("calydon"), "calydon" );
	deepEqual( Stem("calypso"), "calypso" );
	deepEqual( Stem("cam"), "cam" );
	deepEqual( Stem("camberwell"), "camberwel" );
	deepEqual( Stem("cambio"), "cambio" );
	deepEqual( Stem("cambray"), "cambrai" );
	deepEqual( Stem("cambria"), "cambria" );
	deepEqual( Stem("cambric"), "cambric" );
	deepEqual( Stem("cambrics"), "cambric" );
	deepEqual( Stem("cambridge"), "cambridg" );
	deepEqual( Stem("cambyses"), "cambys" );
	deepEqual( Stem("came"), "came" );
	deepEqual( Stem("camel"), "camel" );
	deepEqual( Stem("camellias"), "camellia" );
	deepEqual( Stem("camelot"), "camelot" );
	deepEqual( Stem("camels"), "camel" );
	deepEqual( Stem("camest"), "camest" );
	deepEqual( Stem("camilla"), "camilla" );
	deepEqual( Stem("camillo"), "camillo" );
	deepEqual( Stem("camisole"), "camisol" );
	deepEqual( Stem("camlet"), "camlet" );
	deepEqual( Stem("camomile"), "camomil" );
	deepEqual( Stem("camp"), "camp" );
	deepEqual( Stem("campaign"), "campaign" );
	deepEqual( Stem("campaigner"), "campaign" );
	deepEqual( Stem("campaigns"), "campaign" );
	deepEqual( Stem("campeius"), "campeiu" );
	deepEqual( Stem("camping"), "camp" );
	deepEqual( Stem("camps"), "camp" );
	deepEqual( Stem("can"), "can" );
	deepEqual( Stem("canada"), "canada" );
	deepEqual( Stem("canakin"), "canakin" );
	deepEqual( Stem("canal"), "canal" );
	deepEqual( Stem("canals"), "canal" );
	deepEqual( Stem("canaries"), "canari" );
	deepEqual( Stem("canary"), "canari" );
	deepEqual( Stem("cancel"), "cancel" );
	deepEqual( Stem("cancell"), "cancel" );
	deepEqual( Stem("cancelled"), "cancel" );
	deepEqual( Stem("cancelling"), "cancel" );
	deepEqual( Stem("cancels"), "cancel" );
	deepEqual( Stem("cancer"), "cancer" );
	deepEqual( Stem("candid"), "candid" );
	deepEqual( Stem("candidate"), "candid" );
	deepEqual( Stem("candidates"), "candid" );
	deepEqual( Stem("candidatus"), "candidatu" );
	deepEqual( Stem("candidly"), "candidli" );
	deepEqual( Stem("candied"), "candi" );
	deepEqual( Stem("candle"), "candl" );
	deepEqual( Stem("candles"), "candl" );
	deepEqual( Stem("candlestick"), "candlestick" );
	deepEqual( Stem("candlesticks"), "candlestick" );
	deepEqual( Stem("candour"), "candour" );
	deepEqual( Stem("candy"), "candi" );
	deepEqual( Stem("cane"), "cane" );
	deepEqual( Stem("caned"), "cane" );
	deepEqual( Stem("canidius"), "canidiu" );
	deepEqual( Stem("canine"), "canin" );
	deepEqual( Stem("canister"), "canist" );
	deepEqual( Stem("cank"), "cank" );
	deepEqual( Stem("canker"), "canker" );
	deepEqual( Stem("cankerblossom"), "cankerblossom" );
	deepEqual( Stem("cankers"), "canker" );
	deepEqual( Stem("cannes"), "cann" );
	deepEqual( Stem("cannibal"), "cannib" );
	deepEqual( Stem("cannibally"), "cannib" );
	deepEqual( Stem("cannibals"), "cannib" );
	deepEqual( Stem("cannon"), "cannon" );
	deepEqual( Stem("cannonade"), "cannonad" );
	deepEqual( Stem("cannonading"), "cannonad" );
	deepEqual( Stem("cannoneer"), "cannon" );
	deepEqual( Stem("cannons"), "cannon" );
	deepEqual( Stem("cannot"), "cannot" );
	deepEqual( Stem("canon"), "canon" );
	deepEqual( Stem("canoness"), "cano" );
	deepEqual( Stem("canoniz"), "canoniz" );
	deepEqual( Stem("canonize"), "canon" );
	deepEqual( Stem("canonized"), "canon" );
	deepEqual( Stem("canons"), "canon" );
	deepEqual( Stem("canopied"), "canopi" );
	deepEqual( Stem("canopies"), "canopi" );
	deepEqual( Stem("canopy"), "canopi" );
	deepEqual( Stem("canova"), "canova" );
	deepEqual( Stem("canst"), "canst" );
	deepEqual( Stem("canstick"), "canstick" );
	deepEqual( Stem("cantab"), "cantab" );
	deepEqual( Stem("cantata"), "cantata" );
	deepEqual( Stem("canter"), "canter" );
	deepEqual( Stem("canterbury"), "canterburi" );
	deepEqual( Stem("cantered"), "canter" );
	deepEqual( Stem("cantering"), "canter" );
	deepEqual( Stem("cantle"), "cantl" );
	deepEqual( Stem("cantonment"), "canton" );
	deepEqual( Stem("cantons"), "canton" );
	deepEqual( Stem("canus"), "canu" );
	deepEqual( Stem("canvas"), "canva" );
	deepEqual( Stem("canvass"), "canvass" );
	deepEqual( Stem("canvassed"), "canvass" );
	deepEqual( Stem("canzonet"), "canzonet" );
	deepEqual( Stem("cap"), "cap" );
	deepEqual( Stem("capability"), "capabl" );
	deepEqual( Stem("capable"), "capabl" );
	deepEqual( Stem("capacious"), "capaci" );
	deepEqual( Stem("capacities"), "capac" );
	deepEqual( Stem("capacity"), "capac" );
	deepEqual( Stem("caparison"), "caparison" );
	deepEqual( Stem("capdv"), "capdv" );
	deepEqual( Stem("cape"), "cape" );
	deepEqual( Stem("capel"), "capel" );
	deepEqual( Stem("capels"), "capel" );
	deepEqual( Stem("caper"), "caper" );
	deepEqual( Stem("capered"), "caper" );
	deepEqual( Stem("capering"), "caper" );
	deepEqual( Stem("capers"), "caper" );
	deepEqual( Stem("capet"), "capet" );
	deepEqual( Stem("caphis"), "caphi" );
	deepEqual( Stem("capilet"), "capilet" );
	deepEqual( Stem("capitaine"), "capitain" );
	deepEqual( Stem("capital"), "capit" );
	deepEqual( Stem("capitalized"), "capit" );
	deepEqual( Stem("capitals"), "capit" );
	deepEqual( Stem("capite"), "capit" );
	deepEqual( Stem("capitol"), "capitol" );
	deepEqual( Stem("capitulate"), "capitul" );
	deepEqual( Stem("capitulation"), "capitul" );
	deepEqual( Stem("capocchia"), "capocchia" );
	deepEqual( Stem("capon"), "capon" );
	deepEqual( Stem("capons"), "capon" );
	deepEqual( Stem("capp"), "capp" );
	deepEqual( Stem("cappadocia"), "cappadocia" );
	deepEqual( Stem("capri"), "capri" );
	deepEqual( Stem("capriccio"), "capriccio" );
	deepEqual( Stem("capricious"), "caprici" );
	deepEqual( Stem("caps"), "cap" );
	deepEqual( Stem("capt"), "capt" );
	deepEqual( Stem("captain"), "captain" );
	deepEqual( Stem("captains"), "captain" );
	deepEqual( Stem("captainship"), "captainship" );
	deepEqual( Stem("capting"), "capt" );
	deepEqual( Stem("captious"), "captiou" );
	deepEqual( Stem("captivate"), "captiv" );
	deepEqual( Stem("captivated"), "captiv" );
	deepEqual( Stem("captivates"), "captiv" );
	deepEqual( Stem("captive"), "captiv" );
	deepEqual( Stem("captives"), "captiv" );
	deepEqual( Stem("captivity"), "captiv" );
	deepEqual( Stem("captum"), "captum" );
	deepEqual( Stem("capture"), "captur" );
	deepEqual( Stem("captured"), "captur" );
	deepEqual( Stem("capuchin"), "capuchin" );
	deepEqual( Stem("capucius"), "capuciu" );
	deepEqual( Stem("capulet"), "capulet" );
	deepEqual( Stem("capulets"), "capulet" );
	deepEqual( Stem("car"), "car" );
	deepEqual( Stem("carack"), "carack" );
	deepEqual( Stem("caracks"), "carack" );
	deepEqual( Stem("caradocs"), "caradoc" );
	deepEqual( Stem("caradori"), "caradori" );
	deepEqual( Stem("carat"), "carat" );
	deepEqual( Stem("caravan"), "caravan" );
	deepEqual( Stem("caraways"), "carawai" );
	deepEqual( Stem("carbonado"), "carbonado" );
	deepEqual( Stem("carbonell"), "carbonel" );
	deepEqual( Stem("carbuncle"), "carbuncl" );
	deepEqual( Stem("carbuncled"), "carbuncl" );
	deepEqual( Stem("carbuncles"), "carbuncl" );
	deepEqual( Stem("carcanet"), "carcanet" );
	deepEqual( Stem("carcase"), "carcas" );
	deepEqual( Stem("carcases"), "carcas" );
	deepEqual( Stem("carcass"), "carcass" );
	deepEqual( Stem("carcasses"), "carcass" );
	deepEqual( Stem("card"), "card" );
	deepEqual( Stem("cardboard"), "cardboard" );
	deepEqual( Stem("cardecue"), "cardecu" );
	deepEqual( Stem("carded"), "card" );
	deepEqual( Stem("carders"), "carder" );
	deepEqual( Stem("cardinal"), "cardin" );
	deepEqual( Stem("cardinally"), "cardin" );
	deepEqual( Stem("cardinals"), "cardin" );
	deepEqual( Stem("cardmaker"), "cardmak" );
	deepEqual( Stem("cards"), "card" );
	deepEqual( Stem("carduus"), "carduu" );
	deepEqual( Stem("care"), "care" );
	deepEqual( Stem("cared"), "care" );
	deepEqual( Stem("career"), "career" );
	deepEqual( Stem("careered"), "career" );
	deepEqual( Stem("careers"), "career" );
	deepEqual( Stem("careful"), "care" );
	deepEqual( Stem("carefully"), "carefulli" );
	deepEqual( Stem("careless"), "careless" );
	deepEqual( Stem("carelessly"), "carelessli" );
	deepEqual( Stem("carelessness"), "careless" );
	deepEqual( Stem("cares"), "care" );
	deepEqual( Stem("caress"), "caress" );
	deepEqual( Stem("caresses"), "caress" );
	deepEqual( Stem("caressing"), "caress" );
	deepEqual( Stem("caret"), "caret" );
	deepEqual( Stem("carew"), "carew" );
	deepEqual( Stem("cargo"), "cargo" );
	deepEqual( Stem("cargoes"), "cargo" );
	deepEqual( Stem("caricature"), "caricatur" );
	deepEqual( Stem("caricatured"), "caricatur" );
	deepEqual( Stem("caricatures"), "caricatur" );
	deepEqual( Stem("caricaturing"), "caricatur" );
	deepEqual( Stem("caring"), "care" );
	deepEqual( Stem("carino"), "carino" );
	deepEqual( Stem("carl"), "carl" );
	deepEqual( Stem("carlisle"), "carlisl" );
	deepEqual( Stem("carlot"), "carlot" );
	deepEqual( Stem("carlton"), "carlton" );
	deepEqual( Stem("carman"), "carman" );
	deepEqual( Stem("carmarthenshire"), "carmarthenshir" );
	deepEqual( Stem("carmen"), "carmen" );
	deepEqual( Stem("carnage"), "carnag" );
	deepEqual( Stem("carnal"), "carnal" );
	deepEqual( Stem("carnally"), "carnal" );
	deepEqual( Stem("carnarvonshire"), "carnarvonshir" );
	deepEqual( Stem("carnation"), "carnat" );
	deepEqual( Stem("carnations"), "carnat" );
	deepEqual( Stem("carnival"), "carniv" );
	deepEqual( Stem("carol"), "carol" );
	deepEqual( Stem("carous"), "carou" );
	deepEqual( Stem("carouse"), "carous" );
	deepEqual( Stem("caroused"), "carous" );
	deepEqual( Stem("carouses"), "carous" );
	deepEqual( Stem("carousing"), "carous" );
	deepEqual( Stem("carp"), "carp" );
	deepEqual( Stem("carpenter"), "carpent" );
	deepEqual( Stem("carper"), "carper" );
	deepEqual( Stem("carpers"), "carper" );
	deepEqual( Stem("carpet"), "carpet" );
	deepEqual( Stem("carpets"), "carpet" );
	deepEqual( Stem("carping"), "carp" );
	deepEqual( Stem("carps"), "carp" );
	deepEqual( Stem("carr"), "carr" );
	deepEqual( Stem("carriage"), "carriag" );
	deepEqual( Stem("carriages"), "carriag" );
	deepEqual( Stem("carried"), "carri" );
	deepEqual( Stem("carrier"), "carrier" );
	deepEqual( Stem("carriers"), "carrier" );
	deepEqual( Stem("carries"), "carri" );
	deepEqual( Stem("carrion"), "carrion" );
	deepEqual( Stem("carrions"), "carrion" );
	deepEqual( Stem("carrots"), "carrot" );
	deepEqual( Stem("carry"), "carri" );
	deepEqual( Stem("carrying"), "carri" );
	deepEqual( Stem("cars"), "car" );
	deepEqual( Stem("cart"), "cart" );
	deepEqual( Stem("carte"), "cart" );
	deepEqual( Stem("carters"), "carter" );
	deepEqual( Stem("carthage"), "carthag" );
	deepEqual( Stem("carts"), "cart" );
	deepEqual( Stem("carv"), "carv" );
	deepEqual( Stem("carve"), "carv" );
	deepEqual( Stem("carved"), "carv" );
	deepEqual( Stem("carver"), "carver" );
	deepEqual( Stem("carves"), "carv" );
	deepEqual( Stem("carving"), "carv" );
	deepEqual( Stem("cas"), "ca" );
	deepEqual( Stem("casa"), "casa" );
	deepEqual( Stem("casaer"), "casaer" );
	deepEqual( Stem("casca"), "casca" );
	deepEqual( Stem("case"), "case" );
	deepEqual( Stem("cased"), "case" );
	deepEqual( Stem("casement"), "casement" );
	deepEqual( Stem("casements"), "casement" );
	deepEqual( Stem("cases"), "case" );
	deepEqual( Stem("cash"), "cash" );
	deepEqual( Stem("cashed"), "cash" );
	deepEqual( Stem("cashier"), "cashier" );
	deepEqual( Stem("cashmere"), "cashmer" );
	deepEqual( Stem("casing"), "case" );
	deepEqual( Stem("casinos"), "casino" );
	deepEqual( Stem("cask"), "cask" );
	deepEqual( Stem("casket"), "casket" );
	deepEqual( Stem("casketed"), "casket" );
	deepEqual( Stem("caskets"), "casket" );
	deepEqual( Stem("casks"), "cask" );
	deepEqual( Stem("casque"), "casqu" );
	deepEqual( Stem("casques"), "casqu" );
	deepEqual( Stem("cassado"), "cassado" );
	deepEqual( Stem("cassandra"), "cassandra" );
	deepEqual( Stem("cassibelan"), "cassibelan" );
	deepEqual( Stem("cassio"), "cassio" );
	deepEqual( Stem("cassius"), "cassiu" );
	deepEqual( Stem("cassocks"), "cassock" );
	deepEqual( Stem("cast"), "cast" );
	deepEqual( Stem("castalion"), "castalion" );
	deepEqual( Stem("castaway"), "castawai" );
	deepEqual( Stem("castaways"), "castawai" );
	deepEqual( Stem("caste"), "cast" );
	deepEqual( Stem("casted"), "cast" );
	deepEqual( Stem("caster"), "caster" );
	deepEqual( Stem("castigate"), "castig" );
	deepEqual( Stem("castigation"), "castig" );
	deepEqual( Stem("castile"), "castil" );
	deepEqual( Stem("castiliano"), "castiliano" );
	deepEqual( Stem("casting"), "cast" );
	deepEqual( Stem("castle"), "castl" );
	deepEqual( Stem("castlefogarty"), "castlefogarti" );
	deepEqual( Stem("castlemouldy"), "castlemouldi" );
	deepEqual( Stem("castles"), "castl" );
	deepEqual( Stem("castletoddy"), "castletoddi" );
	deepEqual( Stem("casts"), "cast" );
	deepEqual( Stem("casual"), "casual" );
	deepEqual( Stem("casually"), "casual" );
	deepEqual( Stem("casualties"), "casualti" );
	deepEqual( Stem("casualty"), "casualti" );
	deepEqual( Stem("casuist"), "casuist" );
	deepEqual( Stem("cat"), "cat" );
	deepEqual( Stem("cataian"), "cataian" );
	deepEqual( Stem("catalani"), "catalani" );
	deepEqual( Stem("catalogue"), "catalogu" );
	deepEqual( Stem("cataplasm"), "cataplasm" );
	deepEqual( Stem("cataract"), "cataract" );
	deepEqual( Stem("cataracts"), "cataract" );
	deepEqual( Stem("catarrhs"), "catarrh" );
	deepEqual( Stem("catastrophe"), "catastroph" );
	deepEqual( Stem("catch"), "catch" );
	deepEqual( Stem("catcher"), "catcher" );
	deepEqual( Stem("catches"), "catch" );
	deepEqual( Stem("catching"), "catch" );
	deepEqual( Stem("cate"), "cate" );
	deepEqual( Stem("catechising"), "catechis" );
	deepEqual( Stem("catechism"), "catech" );
	deepEqual( Stem("catechize"), "catech" );
	deepEqual( Stem("cater"), "cater" );
	deepEqual( Stem("caterpillars"), "caterpillar" );
	deepEqual( Stem("caters"), "cater" );
	deepEqual( Stem("caterwauling"), "caterwaul" );
	deepEqual( Stem("cates"), "cate" );
	deepEqual( Stem("catesby"), "catesbi" );
	deepEqual( Stem("cathaydral"), "cathaydr" );
	deepEqual( Stem("cathedral"), "cathedr" );
	deepEqual( Stem("catherine"), "catherin" );
	deepEqual( Stem("catholic"), "cathol" );
	deepEqual( Stem("catlike"), "catlik" );
	deepEqual( Stem("catling"), "catl" );
	deepEqual( Stem("catlings"), "catl" );
	deepEqual( Stem("cato"), "cato" );
	deepEqual( Stem("cats"), "cat" );
	deepEqual( Stem("cattle"), "cattl" );
	deepEqual( Stem("caucasus"), "caucasu" );
	deepEqual( Stem("caudle"), "caudl" );
	deepEqual( Stem("cauf"), "cauf" );
	deepEqual( Stem("caught"), "caught" );
	deepEqual( Stem("cauldron"), "cauldron" );
	deepEqual( Stem("cauliflowers"), "cauliflow" );
	deepEqual( Stem("caus"), "cau" );
	deepEqual( Stem("cause"), "caus" );
	deepEqual( Stem("caused"), "caus" );
	deepEqual( Stem("causeless"), "causeless" );
	deepEqual( Stem("causer"), "causer" );
	deepEqual( Stem("causes"), "caus" );
	deepEqual( Stem("causest"), "causest" );
	deepEqual( Stem("causeth"), "causeth" );
	deepEqual( Stem("cautel"), "cautel" );
	deepEqual( Stem("cautelous"), "cautel" );
	deepEqual( Stem("cautels"), "cautel" );
	deepEqual( Stem("cauterizing"), "cauter" );
	deepEqual( Stem("caution"), "caution" );
	deepEqual( Stem("cautioned"), "caution" );
	deepEqual( Stem("cautions"), "caution" );
	deepEqual( Stem("cautious"), "cautiou" );
	deepEqual( Stem("cavaleiro"), "cavaleiro" );
	deepEqual( Stem("cavalery"), "cavaleri" );
	deepEqual( Stem("cavaliers"), "cavali" );
	deepEqual( Stem("cavalry"), "cavalri" );
	deepEqual( Stem("cave"), "cave" );
	deepEqual( Stem("cavendish"), "cavendish" );
	deepEqual( Stem("cavern"), "cavern" );
	deepEqual( Stem("caverns"), "cavern" );
	deepEqual( Stem("caves"), "cave" );
	deepEqual( Stem("caveto"), "caveto" );
	deepEqual( Stem("caviary"), "caviari" );
	deepEqual( Stem("cavil"), "cavil" );
	deepEqual( Stem("cavilling"), "cavil" );
	deepEqual( Stem("cawdor"), "cawdor" );
	deepEqual( Stem("cawdron"), "cawdron" );
	deepEqual( Stem("cawing"), "caw" );
	deepEqual( Stem("cayenne"), "cayenn" );
	deepEqual( Stem("caypable"), "caypabl" );
	deepEqual( Stem("ce"), "ce" );
	deepEqual( Stem("ceas"), "cea" );
	deepEqual( Stem("cease"), "ceas" );
	deepEqual( Stem("ceased"), "ceas" );
	deepEqual( Stem("ceaseless"), "ceaseless" );
	deepEqual( Stem("ceases"), "ceas" );
	deepEqual( Stem("ceaseth"), "ceaseth" );
	deepEqual( Stem("ceasing"), "ceas" );
	deepEqual( Stem("cecilia"), "cecilia" );
	deepEqual( Stem("cedar"), "cedar" );
	deepEqual( Stem("cedars"), "cedar" );
	deepEqual( Stem("ceded"), "cede" );
	deepEqual( Stem("cedius"), "cediu" );
	deepEqual( Stem("ceiling"), "ceil" );
	deepEqual( Stem("celebrate"), "celebr" );
	deepEqual( Stem("celebrated"), "celebr" );
	deepEqual( Stem("celebrates"), "celebr" );
	deepEqual( Stem("celebration"), "celebr" );
	deepEqual( Stem("celerity"), "celer" );
	deepEqual( Stem("celestial"), "celesti" );
	deepEqual( Stem("celia"), "celia" );
	deepEqual( Stem("cell"), "cell" );
	deepEqual( Stem("cellar"), "cellar" );
	deepEqual( Stem("cellarage"), "cellarag" );
	deepEqual( Stem("cellaret"), "cellaret" );
	deepEqual( Stem("cellars"), "cellar" );
	deepEqual( Stem("celsa"), "celsa" );
	deepEqual( Stem("cement"), "cement" );
	deepEqual( Stem("censer"), "censer" );
	deepEqual( Stem("censor"), "censor" );
	deepEqual( Stem("censorinus"), "censorinu" );
	deepEqual( Stem("censorious"), "censori" );
	deepEqual( Stem("censur"), "censur" );
	deepEqual( Stem("censure"), "censur" );
	deepEqual( Stem("censured"), "censur" );
	deepEqual( Stem("censurers"), "censur" );
	deepEqual( Stem("censures"), "censur" );
	deepEqual( Stem("censuring"), "censur" );
	deepEqual( Stem("cent"), "cent" );
	deepEqual( Stem("centaur"), "centaur" );
	deepEqual( Stem("centaurs"), "centaur" );
	deepEqual( Stem("centre"), "centr" );
	deepEqual( Stem("centred"), "centr" );
	deepEqual( Stem("cents"), "cent" );
	deepEqual( Stem("centuries"), "centuri" );
	deepEqual( Stem("centurion"), "centurion" );
	deepEqual( Stem("centurions"), "centurion" );
	deepEqual( Stem("century"), "centuri" );
	deepEqual( Stem("ceramony"), "ceramoni" );
	deepEqual( Stem("cerberus"), "cerberu" );
	deepEqual( Stem("cerecloth"), "cerecloth" );
	deepEqual( Stem("cerements"), "cerement" );
	deepEqual( Stem("ceremonial"), "ceremoni" );
	deepEqual( Stem("ceremonies"), "ceremoni" );
	deepEqual( Stem("ceremonious"), "ceremoni" );
	deepEqual( Stem("ceremoniously"), "ceremoni" );
	deepEqual( Stem("ceremony"), "ceremoni" );
	deepEqual( Stem("ceres"), "cere" );
	deepEqual( Stem("cerns"), "cern" );
	deepEqual( Stem("certain"), "certain" );
	deepEqual( Stem("certainer"), "certain" );
	deepEqual( Stem("certainly"), "certainli" );
	deepEqual( Stem("certainties"), "certainti" );
	deepEqual( Stem("certainty"), "certainti" );
	deepEqual( Stem("certes"), "cert" );
	deepEqual( Stem("certificate"), "certif" );
	deepEqual( Stem("certified"), "certifi" );
	deepEqual( Stem("certifies"), "certifi" );
	deepEqual( Stem("certify"), "certifi" );
	deepEqual( Stem("ces"), "ce" );
	deepEqual( Stem("cesario"), "cesario" );
	deepEqual( Stem("cess"), "cess" );
	deepEqual( Stem("cessation"), "cessat" );
	deepEqual( Stem("cesse"), "cess" );
	deepEqual( Stem("cest"), "cest" );
	deepEqual( Stem("cestern"), "cestern" );
	deepEqual( Stem("cetera"), "cetera" );
	deepEqual( Stem("cette"), "cett" );
	deepEqual( Stem("chaces"), "chace" );
	deepEqual( Stem("chaf"), "chaf" );
	deepEqual( Stem("chafe"), "chafe" );
	deepEqual( Stem("chafed"), "chafe" );
	deepEqual( Stem("chafes"), "chafe" );
	deepEqual( Stem("chaff"), "chaff" );
	deepEqual( Stem("chaffers"), "chaffer" );
	deepEqual( Stem("chaffless"), "chaffless" );
	deepEqual( Stem("chafing"), "chafe" );
	deepEqual( Stem("chain"), "chain" );
	deepEqual( Stem("chained"), "chain" );
	deepEqual( Stem("chaining"), "chain" );
	deepEqual( Stem("chains"), "chain" );
	deepEqual( Stem("chair"), "chair" );
	deepEqual( Stem("chairs"), "chair" );
	deepEqual( Stem("chaise"), "chais" );
	deepEqual( Stem("chaises"), "chais" );
	deepEqual( Stem("chaldron"), "chaldron" );
	deepEqual( Stem("chalic"), "chalic" );
	deepEqual( Stem("chalice"), "chalic" );
	deepEqual( Stem("chalices"), "chalic" );
	deepEqual( Stem("chalk"), "chalk" );
	deepEqual( Stem("chalks"), "chalk" );
	deepEqual( Stem("chalky"), "chalki" );
	deepEqual( Stem("challeng"), "challeng" );
	deepEqual( Stem("challenge"), "challeng" );
	deepEqual( Stem("challenged"), "challeng" );
	deepEqual( Stem("challenger"), "challeng" );
	deepEqual( Stem("challengers"), "challeng" );
	deepEqual( Stem("challenges"), "challeng" );
	deepEqual( Stem("cham"), "cham" );
	deepEqual( Stem("chamber"), "chamber" );
	deepEqual( Stem("chamberers"), "chamber" );
	deepEqual( Stem("chamberlain"), "chamberlain" );
	deepEqual( Stem("chamberlains"), "chamberlain" );
	deepEqual( Stem("chambermaid"), "chambermaid" );
	deepEqual( Stem("chambermaids"), "chambermaid" );
	deepEqual( Stem("chambers"), "chamber" );
	deepEqual( Stem("chambre"), "chambr" );
	deepEqual( Stem("chameleon"), "chameleon" );
	deepEqual( Stem("champ"), "champ" );
	deepEqual( Stem("champagne"), "champagn" );
	deepEqual( Stem("champain"), "champain" );
	deepEqual( Stem("champains"), "champain" );
	deepEqual( Stem("champignac"), "champignac" );
	deepEqual( Stem("champion"), "champion" );
	deepEqual( Stem("champions"), "champion" );
	deepEqual( Stem("chanc"), "chanc" );
	deepEqual( Stem("chance"), "chanc" );
	deepEqual( Stem("chanced"), "chanc" );
	deepEqual( Stem("chancel"), "chancel" );
	deepEqual( Stem("chancellerie"), "chancelleri" );
	deepEqual( Stem("chancellor"), "chancellor" );
	deepEqual( Stem("chancery"), "chanceri" );
	deepEqual( Stem("chances"), "chanc" );
	deepEqual( Stem("chandelier"), "chandeli" );
	deepEqual( Stem("chandeliers"), "chandeli" );
	deepEqual( Stem("chandler"), "chandler" );
	deepEqual( Stem("chang"), "chang" );
	deepEqual( Stem("change"), "chang" );
	deepEqual( Stem("changeable"), "changeabl" );
	deepEqual( Stem("changed"), "chang" );
	deepEqual( Stem("changeful"), "chang" );
	deepEqual( Stem("changeling"), "changel" );
	deepEqual( Stem("changelings"), "changel" );
	deepEqual( Stem("changer"), "changer" );
	deepEqual( Stem("changes"), "chang" );
	deepEqual( Stem("changest"), "changest" );
	deepEqual( Stem("changing"), "chang" );
	deepEqual( Stem("channel"), "channel" );
	deepEqual( Stem("channels"), "channel" );
	deepEqual( Stem("chanson"), "chanson" );
	deepEqual( Stem("chant"), "chant" );
	deepEqual( Stem("chanticleer"), "chanticl" );
	deepEqual( Stem("chantilly"), "chantilli" );
	deepEqual( Stem("chanting"), "chant" );
	deepEqual( Stem("chantries"), "chantri" );
	deepEqual( Stem("chantry"), "chantri" );
	deepEqual( Stem("chants"), "chant" );
	deepEqual( Stem("chaos"), "chao" );
	deepEqual( Stem("chap"), "chap" );
	deepEqual( Stem("chape"), "chape" );
	deepEqual( Stem("chapel"), "chapel" );
	deepEqual( Stem("chapeless"), "chapeless" );
	deepEqual( Stem("chapelle"), "chapel" );
	deepEqual( Stem("chapels"), "chapel" );
	deepEqual( Stem("chaperon"), "chaperon" );
	deepEqual( Stem("chaperoned"), "chaperon" );
	deepEqual( Stem("chapier"), "chapier" );
	deepEqual( Stem("chaplain"), "chaplain" );
	deepEqual( Stem("chaplains"), "chaplain" );
	deepEqual( Stem("chapless"), "chapless" );
	deepEqual( Stem("chaplet"), "chaplet" );
	deepEqual( Stem("chapmen"), "chapmen" );
	deepEqual( Stem("chapone"), "chapon" );
	deepEqual( Stem("chaps"), "chap" );
	deepEqual( Stem("chapter"), "chapter" );
	deepEqual( Stem("chapters"), "chapter" );
	deepEqual( Stem("character"), "charact" );
	deepEqual( Stem("charactered"), "charact" );
	deepEqual( Stem("characterises"), "characteris" );
	deepEqual( Stem("characterize"), "character" );
	deepEqual( Stem("characterless"), "characterless" );
	deepEqual( Stem("characters"), "charact" );
	deepEqual( Stem("charactery"), "characteri" );
	deepEqual( Stem("characts"), "charact" );
	deepEqual( Stem("charade"), "charad" );
	deepEqual( Stem("charades"), "charad" );
	deepEqual( Stem("charaty"), "charati" );
	deepEqual( Stem("charbon"), "charbon" );
	deepEqual( Stem("chare"), "chare" );
	deepEqual( Stem("chares"), "chare" );
	deepEqual( Stem("charg"), "charg" );
	deepEqual( Stem("charge"), "charg" );
	deepEqual( Stem("chargeable"), "chargeabl" );
	deepEqual( Stem("charged"), "charg" );
	deepEqual( Stem("chargeful"), "charg" );
	deepEqual( Stem("charger"), "charger" );
	deepEqual( Stem("chargers"), "charger" );
	deepEqual( Stem("charges"), "charg" );
	deepEqual( Stem("chargeth"), "chargeth" );
	deepEqual( Stem("charging"), "charg" );
	deepEqual( Stem("chariest"), "chariest" );
	deepEqual( Stem("chariness"), "chari" );
	deepEqual( Stem("charing"), "chare" );
	deepEqual( Stem("chariot"), "chariot" );
	deepEqual( Stem("chariots"), "chariot" );
	deepEqual( Stem("charitable"), "charit" );
	deepEqual( Stem("charitableness"), "charit" );
	deepEqual( Stem("charitably"), "charit" );
	deepEqual( Stem("charities"), "chariti" );
	deepEqual( Stem("charity"), "chariti" );
	deepEqual( Stem("charityless"), "charityless" );
	deepEqual( Stem("charlemain"), "charlemain" );
	deepEqual( Stem("charles"), "charl" );
	deepEqual( Stem("charlotte"), "charlott" );
	deepEqual( Stem("charm"), "charm" );
	deepEqual( Stem("charmante"), "charmant" );
	deepEqual( Stem("charmed"), "charm" );
	deepEqual( Stem("charmer"), "charmer" );
	deepEqual( Stem("charmers"), "charmer" );
	deepEqual( Stem("charmeth"), "charmeth" );
	deepEqual( Stem("charmian"), "charmian" );
	deepEqual( Stem("charming"), "charm" );
	deepEqual( Stem("charmingly"), "charmingli" );
	deepEqual( Stem("charms"), "charm" );
	deepEqual( Stem("charneco"), "charneco" );
	deepEqual( Stem("charnel"), "charnel" );
	deepEqual( Stem("charolois"), "charoloi" );
	deepEqual( Stem("charon"), "charon" );
	deepEqual( Stem("charter"), "charter" );
	deepEqual( Stem("charters"), "charter" );
	deepEqual( Stem("chartreux"), "chartreux" );
	deepEqual( Stem("charwoman"), "charwoman" );
	deepEqual( Stem("chary"), "chari" );
	deepEqual( Stem("charybdis"), "charybdi" );
	deepEqual( Stem("chas"), "cha" );
	deepEqual( Stem("chase"), "chase" );
	deepEqual( Stem("chased"), "chase" );
	deepEqual( Stem("chaser"), "chaser" );
	deepEqual( Stem("chaseth"), "chaseth" );
	deepEqual( Stem("chasing"), "chase" );
	deepEqual( Stem("chasse"), "chass" );
	deepEqual( Stem("chasseur"), "chasseur" );
	deepEqual( Stem("chaste"), "chast" );
	deepEqual( Stem("chastely"), "chast" );
	deepEqual( Stem("chastis"), "chasti" );
	deepEqual( Stem("chastise"), "chastis" );
	deepEqual( Stem("chastised"), "chastis" );
	deepEqual( Stem("chastisement"), "chastis" );
	deepEqual( Stem("chastity"), "chastiti" );
	deepEqual( Stem("chat"), "chat" );
	deepEqual( Stem("chateaux"), "chateaux" );
	deepEqual( Stem("chatham"), "chatham" );
	deepEqual( Stem("chatillon"), "chatillon" );
	deepEqual( Stem("chats"), "chat" );
	deepEqual( Stem("chatt"), "chatt" );
	deepEqual( Stem("chatted"), "chat" );
	deepEqual( Stem("chattels"), "chattel" );
	deepEqual( Stem("chatter"), "chatter" );
	deepEqual( Stem("chattered"), "chatter" );
	deepEqual( Stem("chattering"), "chatter" );
	deepEqual( Stem("chatting"), "chat" );
	deepEqual( Stem("chattles"), "chattl" );
	deepEqual( Stem("chaud"), "chaud" );
	deepEqual( Stem("chaunted"), "chaunt" );
	deepEqual( Stem("chaussee"), "chausse" );
	deepEqual( Stem("chaussees"), "chausse" );
	deepEqual( Stem("chaussure"), "chaussur" );
	deepEqual( Stem("chaw"), "chaw" );
	deepEqual( Stem("chawdron"), "chawdron" );
	deepEqual( Stem("chawles"), "chawl" );
	deepEqual( Stem("chay"), "chai" );
	deepEqual( Stem("che"), "che" );
	deepEqual( Stem("cheap"), "cheap" );
	deepEqual( Stem("cheapen"), "cheapen" );
	deepEqual( Stem("cheaper"), "cheaper" );
	deepEqual( Stem("cheapest"), "cheapest" );
	deepEqual( Stem("cheaply"), "cheapli" );
	deepEqual( Stem("cheapside"), "cheapsid" );
	deepEqual( Stem("cheat"), "cheat" );
	deepEqual( Stem("cheated"), "cheat" );
	deepEqual( Stem("cheater"), "cheater" );
	deepEqual( Stem("cheaters"), "cheater" );
	deepEqual( Stem("cheating"), "cheat" );
	deepEqual( Stem("cheats"), "cheat" );
	deepEqual( Stem("check"), "check" );
	deepEqual( Stem("checked"), "check" );
	deepEqual( Stem("checker"), "checker" );
	deepEqual( Stem("checkered"), "checker" );
	deepEqual( Stem("checking"), "check" );
	deepEqual( Stem("checks"), "check" );
	deepEqual( Stem("cheek"), "cheek" );
	deepEqual( Stem("cheeked"), "cheek" );
	deepEqual( Stem("cheeks"), "cheek" );
	deepEqual( Stem("cheer"), "cheer" );
	deepEqual( Stem("cheered"), "cheer" );
	deepEqual( Stem("cheerer"), "cheerer" );
	deepEqual( Stem("cheerful"), "cheer" );
	deepEqual( Stem("cheerfully"), "cheerfulli" );
	deepEqual( Stem("cheerfulness"), "cheer" );
	deepEqual( Stem("cheering"), "cheer" );
	deepEqual( Stem("cheerless"), "cheerless" );
	deepEqual( Stem("cheerly"), "cheerli" );
	deepEqual( Stem("cheers"), "cheer" );
	deepEqual( Stem("cheery"), "cheeri" );
	deepEqual( Stem("cheese"), "chees" );
	deepEqual( Stem("chef"), "chef" );
	deepEqual( Stem("chelsea"), "chelsea" );
	deepEqual( Stem("cheltenham"), "cheltenham" );
	deepEqual( Stem("cheltonham"), "cheltonham" );
	deepEqual( Stem("chemical"), "chemic" );
	deepEqual( Stem("chemise"), "chemis" );
	deepEqual( Stem("cheque"), "chequ" );
	deepEqual( Stem("chequer"), "chequer" );
	deepEqual( Stem("chequered"), "chequer" );
	deepEqual( Stem("cheques"), "chequ" );
	deepEqual( Stem("cher"), "cher" );
	deepEqual( Stem("chere"), "chere" );
	deepEqual( Stem("cherish"), "cherish" );
	deepEqual( Stem("cherished"), "cherish" );
	deepEqual( Stem("cherisher"), "cherish" );
	deepEqual( Stem("cherishes"), "cherish" );
	deepEqual( Stem("cherishing"), "cherish" );
	deepEqual( Stem("cheroot"), "cheroot" );
	deepEqual( Stem("cheroots"), "cheroot" );
	deepEqual( Stem("cherries"), "cherri" );
	deepEqual( Stem("cherry"), "cherri" );
	deepEqual( Stem("cherrypit"), "cherrypit" );
	deepEqual( Stem("chers"), "cher" );
	deepEqual( Stem("chertsey"), "chertsei" );
	deepEqual( Stem("cherub"), "cherub" );
	deepEqual( Stem("cherubim"), "cherubim" );
	deepEqual( Stem("cherubims"), "cherubim" );
	deepEqual( Stem("cherubin"), "cherubin" );
	deepEqual( Stem("cherubins"), "cherubin" );
	deepEqual( Stem("cherubs"), "cherub" );
	deepEqual( Stem("cheshire"), "cheshir" );
	deepEqual( Stem("cheshu"), "cheshu" );
	deepEqual( Stem("chess"), "chess" );
	deepEqual( Stem("chest"), "chest" );
	deepEqual( Stem("chested"), "chest" );
	deepEqual( Stem("chester"), "chester" );
	deepEqual( Stem("chestnut"), "chestnut" );
	deepEqual( Stem("chestnuts"), "chestnut" );
	deepEqual( Stem("chests"), "chest" );
	deepEqual( Stem("chetas"), "cheta" );
	deepEqual( Stem("chev"), "chev" );
	deepEqual( Stem("cheval"), "cheval" );
	deepEqual( Stem("chevalier"), "chevali" );
	deepEqual( Stem("chevaliers"), "chevali" );
	deepEqual( Stem("chevaux"), "chevaux" );
	deepEqual( Stem("cheveril"), "cheveril" );
	deepEqual( Stem("chew"), "chew" );
	deepEqual( Stem("chewed"), "chew" );
	deepEqual( Stem("chewet"), "chewet" );
	deepEqual( Stem("chewing"), "chew" );
	deepEqual( Stem("chez"), "chez" );
	deepEqual( Stem("chi"), "chi" );
	deepEqual( Stem("chick"), "chick" );
	deepEqual( Stem("chickasaw"), "chickasaw" );
	deepEqual( Stem("chicken"), "chicken" );
	deepEqual( Stem("chickens"), "chicken" );
	deepEqual( Stem("chicurmurco"), "chicurmurco" );
	deepEqual( Stem("chid"), "chid" );
	deepEqual( Stem("chidden"), "chidden" );
	deepEqual( Stem("chide"), "chide" );
	deepEqual( Stem("chiders"), "chider" );
	deepEqual( Stem("chides"), "chide" );
	deepEqual( Stem("chiding"), "chide" );
	deepEqual( Stem("chief"), "chief" );
	deepEqual( Stem("chiefest"), "chiefest" );
	deepEqual( Stem("chiefly"), "chiefli" );
	deepEqual( Stem("chiefs"), "chief" );
	deepEqual( Stem("chieftain"), "chieftain" );
	deepEqual( Stem("chien"), "chien" );
	deepEqual( Stem("chiffonne"), "chiffonn" );
	deepEqual( Stem("child"), "child" );
	deepEqual( Stem("childed"), "child" );
	deepEqual( Stem("childeric"), "childer" );
	deepEqual( Stem("childhood"), "childhood" );
	deepEqual( Stem("childhoods"), "childhood" );
	deepEqual( Stem("childing"), "child" );
	deepEqual( Stem("childish"), "childish" );
	deepEqual( Stem("childishness"), "childish" );
	deepEqual( Stem("childlike"), "childlik" );
	deepEqual( Stem("childness"), "child" );
	deepEqual( Stem("children"), "children" );
	deepEqual( Stem("chili"), "chili" );
	deepEqual( Stem("chilis"), "chili" );
	deepEqual( Stem("chill"), "chill" );
	deepEqual( Stem("chilling"), "chill" );
	deepEqual( Stem("chillum"), "chillum" );
	deepEqual( Stem("chime"), "chime" );
	deepEqual( Stem("chimed"), "chime" );
	deepEqual( Stem("chimes"), "chime" );
	deepEqual( Stem("chimney"), "chimnei" );
	deepEqual( Stem("chimneypiece"), "chimneypiec" );
	deepEqual( Stem("chimneys"), "chimnei" );
	deepEqual( Stem("chimurcho"), "chimurcho" );
	deepEqual( Stem("chin"), "chin" );
	deepEqual( Stem("china"), "china" );
	deepEqual( Stem("chine"), "chine" );
	deepEqual( Stem("chines"), "chine" );
	deepEqual( Stem("chinese"), "chines" );
	deepEqual( Stem("chink"), "chink" );
	deepEqual( Stem("chinking"), "chink" );
	deepEqual( Stem("chinks"), "chink" );
	deepEqual( Stem("chins"), "chin" );
	deepEqual( Stem("chintz"), "chintz" );
	deepEqual( Stem("chipp"), "chipp" );
	deepEqual( Stem("chippenham"), "chippenham" );
	deepEqual( Stem("chipper"), "chipper" );
	deepEqual( Stem("chips"), "chip" );
	deepEqual( Stem("chiron"), "chiron" );
	deepEqual( Stem("chirped"), "chirp" );
	deepEqual( Stem("chirping"), "chirp" );
	deepEqual( Stem("chirrah"), "chirrah" );
	deepEqual( Stem("chirurgeonly"), "chirurgeonli" );
	deepEqual( Stem("chisel"), "chisel" );
	deepEqual( Stem("chiswick"), "chiswick" );
	deepEqual( Stem("chit"), "chit" );
	deepEqual( Stem("chitopher"), "chitoph" );
	deepEqual( Stem("chits"), "chit" );
	deepEqual( Stem("chivalrous"), "chivalr" );
	deepEqual( Stem("chivalry"), "chivalri" );
	deepEqual( Stem("chocolate"), "chocol" );
	deepEqual( Stem("choice"), "choic" );
	deepEqual( Stem("choicely"), "choic" );
	deepEqual( Stem("choicest"), "choicest" );
	deepEqual( Stem("choir"), "choir" );
	deepEqual( Stem("choirs"), "choir" );
	deepEqual( Stem("chok"), "chok" );
	deepEqual( Stem("choke"), "choke" );
	deepEqual( Stem("choked"), "choke" );
	deepEqual( Stem("chokes"), "choke" );
	deepEqual( Stem("choking"), "choke" );
	deepEqual( Stem("choky"), "choki" );
	deepEqual( Stem("choler"), "choler" );
	deepEqual( Stem("choleric"), "choler" );
	deepEqual( Stem("cholers"), "choler" );
	deepEqual( Stem("chollors"), "chollor" );
	deepEqual( Stem("choose"), "choos" );
	deepEqual( Stem("chooser"), "chooser" );
	deepEqual( Stem("chooses"), "choos" );
	deepEqual( Stem("chooseth"), "chooseth" );
	deepEqual( Stem("choosing"), "choos" );
	deepEqual( Stem("chop"), "chop" );
	deepEqual( Stem("chopine"), "chopin" );
	deepEqual( Stem("choplogic"), "choplog" );
	deepEqual( Stem("chopp"), "chopp" );
	deepEqual( Stem("chopped"), "chop" );
	deepEqual( Stem("chopper"), "chopper" );
	deepEqual( Stem("chopping"), "chop" );
	deepEqual( Stem("choppy"), "choppi" );
	deepEqual( Stem("chops"), "chop" );
	deepEqual( Stem("chopt"), "chopt" );
	deepEqual( Stem("chor"), "chor" );
	deepEqual( Stem("choristers"), "chorist" );
	deepEqual( Stem("chorus"), "choru" );
	deepEqual( Stem("chose"), "chose" );
	deepEqual( Stem("chosen"), "chosen" );
	deepEqual( Stem("choufleur"), "choufleur" );
	deepEqual( Stem("chough"), "chough" );
	deepEqual( Stem("choughs"), "chough" );
	deepEqual( Stem("chowringhee"), "chowringhe" );
	deepEqual( Stem("chrish"), "chrish" );
	deepEqual( Stem("christ"), "christ" );
	deepEqual( Stem("christchurch"), "christchurch" );
	deepEqual( Stem("christen"), "christen" );
	deepEqual( Stem("christendom"), "christendom" );
	deepEqual( Stem("christendoms"), "christendom" );
	deepEqual( Stem("christened"), "christen" );
	deepEqual( Stem("christening"), "christen" );
	deepEqual( Stem("christenings"), "christen" );
	deepEqual( Stem("christian"), "christian" );
	deepEqual( Stem("christianlike"), "christianlik" );
	deepEqual( Stem("christians"), "christian" );
	deepEqual( Stem("christmas"), "christma" );
	deepEqual( Stem("christom"), "christom" );
	deepEqual( Stem("christopher"), "christoph" );
	deepEqual( Stem("christophero"), "christophero" );
	deepEqual( Stem("chronicle"), "chronicl" );
	deepEqual( Stem("chronicled"), "chronicl" );
	deepEqual( Stem("chronicler"), "chronicl" );
	deepEqual( Stem("chroniclers"), "chronicl" );
	deepEqual( Stem("chronicles"), "chronicl" );
	deepEqual( Stem("chronometer"), "chronomet" );
	deepEqual( Stem("chrysolite"), "chrysolit" );
	deepEqual( Stem("chuck"), "chuck" );
	deepEqual( Stem("chuckled"), "chuckl" );
	deepEqual( Stem("chuckling"), "chuckl" );
	deepEqual( Stem("chucks"), "chuck" );
	deepEqual( Stem("chud"), "chud" );
	deepEqual( Stem("chuffs"), "chuff" );
	deepEqual( Stem("chummy"), "chummi" );
	deepEqual( Stem("chune"), "chune" );
	deepEqual( Stem("church"), "church" );
	deepEqual( Stem("churches"), "church" );
	deepEqual( Stem("churchill"), "churchil" );
	deepEqual( Stem("churchman"), "churchman" );
	deepEqual( Stem("churchmen"), "churchmen" );
	deepEqual( Stem("churchyard"), "churchyard" );
	deepEqual( Stem("churchyards"), "churchyard" );
	deepEqual( Stem("churl"), "churl" );
	deepEqual( Stem("churlish"), "churlish" );
	deepEqual( Stem("churlishly"), "churlishli" );
	deepEqual( Stem("churls"), "churl" );
	deepEqual( Stem("churn"), "churn" );
	deepEqual( Stem("chus"), "chu" );
	deepEqual( Stem("chutney"), "chutnei" );
	deepEqual( Stem("cicatrice"), "cicatric" );
	deepEqual( Stem("cicatrices"), "cicatric" );
	deepEqual( Stem("cicatrized"), "cicatr" );
	deepEqual( Stem("cicely"), "cice" );
	deepEqual( Stem("cicero"), "cicero" );
	deepEqual( Stem("ciceter"), "cicet" );
	deepEqual( Stem("ciel"), "ciel" );
	deepEqual( Stem("cigar"), "cigar" );
	deepEqual( Stem("cigars"), "cigar" );
	deepEqual( Stem("ciitzens"), "ciitzen" );
	deepEqual( Stem("cilicia"), "cilicia" );
	deepEqual( Stem("cimarosa"), "cimarosa" );
	deepEqual( Stem("cimber"), "cimber" );
	deepEqual( Stem("cimmerian"), "cimmerian" );
	deepEqual( Stem("cinable"), "cinabl" );
	deepEqual( Stem("cincture"), "cinctur" );
	deepEqual( Stem("cinder"), "cinder" );
	deepEqual( Stem("cinderella"), "cinderella" );
	deepEqual( Stem("cinders"), "cinder" );
	deepEqual( Stem("cine"), "cine" );
	deepEqual( Stem("cinna"), "cinna" );
	deepEqual( Stem("cinqbars"), "cinqbar" );
	deepEqual( Stem("cinque"), "cinqu" );
	deepEqual( Stem("cipher"), "cipher" );
	deepEqual( Stem("ciphers"), "cipher" );
	deepEqual( Stem("circa"), "circa" );
	deepEqual( Stem("circassian"), "circassian" );
	deepEqual( Stem("circe"), "circ" );
	deepEqual( Stem("circle"), "circl" );
	deepEqual( Stem("circled"), "circl" );
	deepEqual( Stem("circles"), "circl" );
	deepEqual( Stem("circlets"), "circlet" );
	deepEqual( Stem("circling"), "circl" );
	deepEqual( Stem("circuit"), "circuit" );
	deepEqual( Stem("circulars"), "circular" );
	deepEqual( Stem("circulation"), "circul" );
	deepEqual( Stem("circum"), "circum" );
	deepEqual( Stem("circumcised"), "circumcis" );
	deepEqual( Stem("circumference"), "circumfer" );
	deepEqual( Stem("circummur"), "circummur" );
	deepEqual( Stem("circumscrib"), "circumscrib" );
	deepEqual( Stem("circumscribed"), "circumscrib" );
	deepEqual( Stem("circumscription"), "circumscript" );
	deepEqual( Stem("circumspect"), "circumspect" );
	deepEqual( Stem("circumspection"), "circumspect" );
	deepEqual( Stem("circumstance"), "circumst" );
	deepEqual( Stem("circumstanced"), "circumstanc" );
	deepEqual( Stem("circumstances"), "circumst" );
	deepEqual( Stem("circumstantial"), "circumstanti" );
	deepEqual( Stem("circumvent"), "circumv" );
	deepEqual( Stem("circumvention"), "circumvent" );
	deepEqual( Stem("cistercian"), "cistercian" );
	deepEqual( Stem("cistercians"), "cistercian" );
	deepEqual( Stem("cistern"), "cistern" );
	deepEqual( Stem("citadel"), "citadel" );
	deepEqual( Stem("cital"), "cital" );
	deepEqual( Stem("cite"), "cite" );
	deepEqual( Stem("cited"), "cite" );
	deepEqual( Stem("cites"), "cite" );
	deepEqual( Stem("cities"), "citi" );
	deepEqual( Stem("citing"), "cite" );
	deepEqual( Stem("citizen"), "citizen" );
	deepEqual( Stem("citizens"), "citizen" );
	deepEqual( Stem("citron"), "citron" );
	deepEqual( Stem("cittern"), "cittern" );
	deepEqual( Stem("city"), "citi" );
	deepEqual( Stem("civet"), "civet" );
	deepEqual( Stem("civil"), "civil" );
	deepEqual( Stem("civilian"), "civilian" );
	deepEqual( Stem("civilians"), "civilian" );
	deepEqual( Stem("civility"), "civil" );
	deepEqual( Stem("civilization"), "civil" );
	deepEqual( Stem("civilized"), "civil" );
	deepEqual( Stem("civilly"), "civilli" );
	deepEqual( Stem("ck"), "ck" );
	deepEqual( Stem("clack"), "clack" );
	deepEqual( Stem("clad"), "clad" );
	deepEqual( Stem("claim"), "claim" );
	deepEqual( Stem("claimed"), "claim" );
	deepEqual( Stem("claiming"), "claim" );
	deepEqual( Stem("claims"), "claim" );
	deepEqual( Stem("clamb"), "clamb" );
	deepEqual( Stem("clamber"), "clamber" );
	deepEqual( Stem("clambered"), "clamber" );
	deepEqual( Stem("clammer"), "clammer" );
	deepEqual( Stem("clamor"), "clamor" );
	deepEqual( Stem("clamorous"), "clamor" );
	deepEqual( Stem("clamors"), "clamor" );
	deepEqual( Stem("clamour"), "clamour" );
	deepEqual( Stem("clamours"), "clamour" );
	deepEqual( Stem("clandestine"), "clandestin" );
	deepEqual( Stem("clandestinely"), "clandestin" );
	deepEqual( Stem("clang"), "clang" );
	deepEqual( Stem("clanging"), "clang" );
	deepEqual( Stem("clangor"), "clangor" );
	deepEqual( Stem("clap"), "clap" );
	deepEqual( Stem("clapham"), "clapham" );
	deepEqual( Stem("clapp"), "clapp" );
	deepEqual( Stem("clapped"), "clap" );
	deepEqual( Stem("clapper"), "clapper" );
	deepEqual( Stem("clapping"), "clap" );
	deepEqual( Stem("claps"), "clap" );
	deepEqual( Stem("clar"), "clar" );
	deepEqual( Stem("clare"), "clare" );
	deepEqual( Stem("clarence"), "clarenc" );
	deepEqual( Stem("claret"), "claret" );
	deepEqual( Stem("claribel"), "claribel" );
	deepEqual( Stem("clarke"), "clark" );
	deepEqual( Stem("clasp"), "clasp" );
	deepEqual( Stem("clasped"), "clasp" );
	deepEqual( Stem("clasping"), "clasp" );
	deepEqual( Stem("clasps"), "clasp" );
	deepEqual( Stem("class"), "class" );
	deepEqual( Stem("classes"), "class" );
	deepEqual( Stem("classical"), "classic" );
	deepEqual( Stem("clatter"), "clatter" );
	deepEqual( Stem("clattering"), "clatter" );
	deepEqual( Stem("claud"), "claud" );
	deepEqual( Stem("claudio"), "claudio" );
	deepEqual( Stem("claudius"), "claudiu" );
	deepEqual( Stem("clause"), "claus" );
	deepEqual( Stem("clavers"), "claver" );
	deepEqual( Stem("claw"), "claw" );
	deepEqual( Stem("clawed"), "claw" );
	deepEqual( Stem("clawing"), "claw" );
	deepEqual( Stem("claws"), "claw" );
	deepEqual( Stem("clay"), "clai" );
	deepEqual( Stem("clays"), "clai" );
	deepEqual( Stem("clean"), "clean" );
	deepEqual( Stem("cleaned"), "clean" );
	deepEqual( Stem("cleanliest"), "cleanliest" );
	deepEqual( Stem("cleanly"), "cleanli" );
	deepEqual( Stem("cleans"), "clean" );
	deepEqual( Stem("cleanse"), "cleans" );
	deepEqual( Stem("cleansing"), "cleans" );
	deepEqual( Stem("clear"), "clear" );
	deepEqual( Stem("cleared"), "clear" );
	deepEqual( Stem("clearer"), "clearer" );
	deepEqual( Stem("clearest"), "clearest" );
	deepEqual( Stem("clearing"), "clear" );
	deepEqual( Stem("clearly"), "clearli" );
	deepEqual( Stem("clearness"), "clear" );
	deepEqual( Stem("clears"), "clear" );
	deepEqual( Stem("cleave"), "cleav" );
	deepEqual( Stem("cleaving"), "cleav" );
	deepEqual( Stem("clef"), "clef" );
	deepEqual( Stem("cleft"), "cleft" );
	deepEqual( Stem("cleitus"), "cleitu" );
	deepEqual( Stem("clemency"), "clemenc" );
	deepEqual( Stem("clement"), "clement" );
	deepEqual( Stem("clementi"), "clementi" );
	deepEqual( Stem("clench"), "clench" );
	deepEqual( Stem("clenched"), "clench" );
	deepEqual( Stem("cleomenes"), "cleomen" );
	deepEqual( Stem("cleopatpa"), "cleopatpa" );
	deepEqual( Stem("cleopatra"), "cleopatra" );
	deepEqual( Stem("clepeth"), "clepeth" );
	deepEqual( Stem("clept"), "clept" );
	deepEqual( Stem("clerestories"), "clerestori" );
	deepEqual( Stem("clergy"), "clergi" );
	deepEqual( Stem("clergyman"), "clergyman" );
	deepEqual( Stem("clergymen"), "clergymen" );
	deepEqual( Stem("clerical"), "cleric" );
	deepEqual( Stem("clerics"), "cleric" );
	deepEqual( Stem("clerk"), "clerk" );
	deepEqual( Stem("clerklike"), "clerklik" );
	deepEqual( Stem("clerkly"), "clerkli" );
	deepEqual( Stem("clerks"), "clerk" );
	deepEqual( Stem("clever"), "clever" );
	deepEqual( Stem("cleverer"), "clever" );
	deepEqual( Stem("cleverest"), "cleverest" );
	deepEqual( Stem("cleverly"), "cleverli" );
	deepEqual( Stem("cleverness"), "clever" );
	deepEqual( Stem("clew"), "clew" );
	deepEqual( Stem("clicked"), "click" );
	deepEqual( Stem("clicking"), "click" );
	deepEqual( Stem("client"), "client" );
	deepEqual( Stem("clients"), "client" );
	deepEqual( Stem("cliff"), "cliff" );
	deepEqual( Stem("clifford"), "clifford" );
	deepEqual( Stem("cliffords"), "clifford" );
	deepEqual( Stem("cliffs"), "cliff" );
	deepEqual( Stem("clifton"), "clifton" );
	deepEqual( Stem("climate"), "climat" );
	deepEqual( Stem("climature"), "climatur" );
	deepEqual( Stem("climb"), "climb" );
	deepEqual( Stem("climbed"), "climb" );
	deepEqual( Stem("climber"), "climber" );
	deepEqual( Stem("climbeth"), "climbeth" );
	deepEqual( Stem("climbing"), "climb" );
	deepEqual( Stem("climbs"), "climb" );
	deepEqual( Stem("clime"), "clime" );
	deepEqual( Stem("cling"), "cling" );
	deepEqual( Stem("clinging"), "cling" );
	deepEqual( Stem("clink"), "clink" );
	deepEqual( Stem("clinked"), "clink" );
	deepEqual( Stem("clinker"), "clinker" );
	deepEqual( Stem("clinking"), "clink" );
	deepEqual( Stem("clinquant"), "clinquant" );
	deepEqual( Stem("clip"), "clip" );
	deepEqual( Stem("clipp"), "clipp" );
	deepEqual( Stem("clipped"), "clip" );
	deepEqual( Stem("clipper"), "clipper" );
	deepEqual( Stem("clippers"), "clipper" );
	deepEqual( Stem("clippeth"), "clippeth" );
	deepEqual( Stem("clipping"), "clip" );
	deepEqual( Stem("clipt"), "clipt" );
	deepEqual( Stem("clique"), "cliqu" );
	deepEqual( Stem("clitus"), "clitu" );
	deepEqual( Stem("clive"), "clive" );
	deepEqual( Stem("clo"), "clo" );
	deepEqual( Stem("cloak"), "cloak" );
	deepEqual( Stem("cloakbag"), "cloakbag" );
	deepEqual( Stem("cloaks"), "cloak" );
	deepEqual( Stem("clock"), "clock" );
	deepEqual( Stem("clocks"), "clock" );
	deepEqual( Stem("clod"), "clod" );
	deepEqual( Stem("cloddy"), "cloddi" );
	deepEqual( Stem("clodpole"), "clodpol" );
	deepEqual( Stem("clog"), "clog" );
	deepEqual( Stem("clogging"), "clog" );
	deepEqual( Stem("clogs"), "clog" );
	deepEqual( Stem("cloister"), "cloister" );
	deepEqual( Stem("cloistress"), "cloistress" );
	deepEqual( Stem("cloquence"), "cloquenc" );
	deepEqual( Stem("clos"), "clo" );
	deepEqual( Stem("close"), "close" );
	deepEqual( Stem("closed"), "close" );
	deepEqual( Stem("closely"), "close" );
	deepEqual( Stem("closeness"), "close" );
	deepEqual( Stem("closer"), "closer" );
	deepEqual( Stem("closes"), "close" );
	deepEqual( Stem("closest"), "closest" );
	deepEqual( Stem("closet"), "closet" );
	deepEqual( Stem("closeted"), "closet" );
	deepEqual( Stem("closets"), "closet" );
	deepEqual( Stem("closing"), "close" );
	deepEqual( Stem("closure"), "closur" );
	deepEqual( Stem("cloten"), "cloten" );
	deepEqual( Stem("clotens"), "cloten" );
	deepEqual( Stem("cloth"), "cloth" );
	deepEqual( Stem("clothair"), "clothair" );
	deepEqual( Stem("clotharius"), "clothariu" );
	deepEqual( Stem("clothe"), "cloth" );
	deepEqual( Stem("clothed"), "cloth" );
	deepEqual( Stem("clothes"), "cloth" );
	deepEqual( Stem("clothier"), "clothier" );
	deepEqual( Stem("clothiers"), "clothier" );
	deepEqual( Stem("clothing"), "cloth" );
	deepEqual( Stem("cloths"), "cloth" );
	deepEqual( Stem("clotpoles"), "clotpol" );
	deepEqual( Stem("clotpoll"), "clotpol" );
	deepEqual( Stem("cloud"), "cloud" );
	deepEqual( Stem("clouded"), "cloud" );
	deepEqual( Stem("cloudiness"), "cloudi" );
	deepEqual( Stem("clouds"), "cloud" );
	deepEqual( Stem("cloudy"), "cloudi" );
	deepEqual( Stem("clout"), "clout" );
	deepEqual( Stem("clouted"), "clout" );
	deepEqual( Stem("clouts"), "clout" );
	deepEqual( Stem("cloven"), "cloven" );
	deepEqual( Stem("clover"), "clover" );
	deepEqual( Stem("cloves"), "clove" );
	deepEqual( Stem("clovest"), "clovest" );
	deepEqual( Stem("clowder"), "clowder" );
	deepEqual( Stem("clown"), "clown" );
	deepEqual( Stem("clownish"), "clownish" );
	deepEqual( Stem("clowns"), "clown" );
	deepEqual( Stem("cloy"), "cloi" );
	deepEqual( Stem("cloyed"), "cloi" );
	deepEqual( Stem("cloying"), "cloi" );
	deepEqual( Stem("cloyless"), "cloyless" );
	deepEqual( Stem("cloyment"), "cloyment" );
	deepEqual( Stem("cloys"), "cloi" );
	deepEqual( Stem("club"), "club" );
	deepEqual( Stem("clubbed"), "club" );
	deepEqual( Stem("clubs"), "club" );
	deepEqual( Stem("cluck"), "cluck" );
	deepEqual( Stem("clue"), "clue" );
	deepEqual( Stem("clump"), "clump" );
	deepEqual( Stem("clumsiest"), "clumsiest" );
	deepEqual( Stem("clumsiness"), "clumsi" );
	deepEqual( Stem("clumsy"), "clumsi" );
	deepEqual( Stem("clung"), "clung" );
	deepEqual( Stem("clust"), "clust" );
	deepEqual( Stem("cluster"), "cluster" );
	deepEqual( Stem("clustered"), "cluster" );
	deepEqual( Stem("clusters"), "cluster" );
	deepEqual( Stem("clutch"), "clutch" );
	deepEqual( Stem("clutches"), "clutch" );
	deepEqual( Stem("clutching"), "clutch" );
	deepEqual( Stem("clyster"), "clyster" );
	deepEqual( Stem("clytemnestra"), "clytemnestra" );
	deepEqual( Stem("cneius"), "cneiu" );
	deepEqual( Stem("cnemies"), "cnemi" );
	deepEqual( Stem("co"), "co" );
	deepEqual( Stem("coach"), "coach" );
	deepEqual( Stem("coached"), "coach" );
	deepEqual( Stem("coaches"), "coach" );
	deepEqual( Stem("coachmakers"), "coachmak" );
	deepEqual( Stem("coachman"), "coachman" );
	deepEqual( Stem("coachmen"), "coachmen" );
	deepEqual( Stem("coact"), "coact" );
	deepEqual( Stem("coactive"), "coactiv" );
	deepEqual( Stem("coagulate"), "coagul" );
	deepEqual( Stem("coal"), "coal" );
	deepEqual( Stem("coals"), "coal" );
	deepEqual( Stem("coarse"), "coars" );
	deepEqual( Stem("coarsely"), "coars" );
	deepEqual( Stem("coarsest"), "coarsest" );
	deepEqual( Stem("coast"), "coast" );
	deepEqual( Stem("coasting"), "coast" );
	deepEqual( Stem("coasts"), "coast" );
	deepEqual( Stem("coat"), "coat" );
	deepEqual( Stem("coated"), "coat" );
	deepEqual( Stem("coating"), "coat" );
	deepEqual( Stem("coats"), "coat" );
	deepEqual( Stem("coax"), "coax" );
	deepEqual( Stem("coaxed"), "coax" );
	deepEqual( Stem("coaxes"), "coax" );
	deepEqual( Stem("coaxing"), "coax" );
	deepEqual( Stem("coaxings"), "coax" );
	deepEqual( Stem("cob"), "cob" );
	deepEqual( Stem("cobble"), "cobbl" );
	deepEqual( Stem("cobbled"), "cobbl" );
	deepEqual( Stem("cobbler"), "cobbler" );
	deepEqual( Stem("cobham"), "cobham" );
	deepEqual( Stem("cobloaf"), "cobloaf" );
	deepEqual( Stem("cobweb"), "cobweb" );
	deepEqual( Stem("cobwebs"), "cobweb" );
	deepEqual( Stem("cochere"), "cocher" );
	deepEqual( Stem("cock"), "cock" );
	deepEqual( Stem("cockades"), "cockad" );
	deepEqual( Stem("cockatrice"), "cockatric" );
	deepEqual( Stem("cockatrices"), "cockatric" );
	deepEqual( Stem("cocked"), "cock" );
	deepEqual( Stem("cockle"), "cockl" );
	deepEqual( Stem("cockled"), "cockl" );
	deepEqual( Stem("cockney"), "cocknei" );
	deepEqual( Stem("cockneyesses"), "cockneyess" );
	deepEqual( Stem("cockneys"), "cocknei" );
	deepEqual( Stem("cockpit"), "cockpit" );
	deepEqual( Stem("cocks"), "cock" );
	deepEqual( Stem("cocksure"), "cocksur" );
	deepEqual( Stem("cocoa"), "cocoa" );
	deepEqual( Stem("cocoanut"), "cocoanut" );
	deepEqual( Stem("coctus"), "coctu" );
	deepEqual( Stem("cocytus"), "cocytu" );
	deepEqual( Stem("cod"), "cod" );
	deepEqual( Stem("codding"), "cod" );
	deepEqual( Stem("code"), "code" );
	deepEqual( Stem("codling"), "codl" );
	deepEqual( Stem("codpiece"), "codpiec" );
	deepEqual( Stem("codpieces"), "codpiec" );
	deepEqual( Stem("cods"), "cod" );
	deepEqual( Stem("coelestibus"), "coelestibu" );
	deepEqual( Stem("coesar"), "coesar" );
	deepEqual( Stem("coeur"), "coeur" );
	deepEqual( Stem("coffee"), "coffe" );
	deepEqual( Stem("coffer"), "coffer" );
	deepEqual( Stem("coffers"), "coffer" );
	deepEqual( Stem("coffin"), "coffin" );
	deepEqual( Stem("coffins"), "coffin" );
	deepEqual( Stem("coffy"), "coffi" );
	deepEqual( Stem("cog"), "cog" );
	deepEqual( Stem("cogging"), "cog" );
	deepEqual( Stem("cogitation"), "cogit" );
	deepEqual( Stem("cogitations"), "cogit" );
	deepEqual( Stem("cognac"), "cognac" );
	deepEqual( Stem("cognition"), "cognit" );
	deepEqual( Stem("cognizance"), "cogniz" );
	deepEqual( Stem("cogscomb"), "cogscomb" );
	deepEqual( Stem("cohabitants"), "cohabit" );
	deepEqual( Stem("coher"), "coher" );
	deepEqual( Stem("cohere"), "coher" );
	deepEqual( Stem("coherence"), "coher" );
	deepEqual( Stem("coherent"), "coher" );
	deepEqual( Stem("cohorts"), "cohort" );
	deepEqual( Stem("coif"), "coif" );
	deepEqual( Stem("coign"), "coign" );
	deepEqual( Stem("coil"), "coil" );
	deepEqual( Stem("coiled"), "coil" );
	deepEqual( Stem("coin"), "coin" );
	deepEqual( Stem("coinage"), "coinag" );
	deepEqual( Stem("coincided"), "coincid" );
	deepEqual( Stem("coiner"), "coiner" );
	deepEqual( Stem("coining"), "coin" );
	deepEqual( Stem("coins"), "coin" );
	deepEqual( Stem("col"), "col" );
	deepEqual( Stem("colbrand"), "colbrand" );
	deepEqual( Stem("colchos"), "colcho" );
	deepEqual( Stem("cold"), "cold" );
	deepEqual( Stem("colder"), "colder" );
	deepEqual( Stem("coldest"), "coldest" );
	deepEqual( Stem("coldly"), "coldli" );
	deepEqual( Stem("coldness"), "cold" );
	deepEqual( Stem("coldspur"), "coldspur" );
	deepEqual( Stem("colebrook"), "colebrook" );
	deepEqual( Stem("colic"), "colic" );
	deepEqual( Stem("collapsed"), "collaps" );
	deepEqual( Stem("collar"), "collar" );
	deepEqual( Stem("collars"), "collar" );
	deepEqual( Stem("collateral"), "collater" );
	deepEqual( Stem("colleague"), "colleagu" );
	deepEqual( Stem("colleagued"), "colleagu" );
	deepEqual( Stem("collect"), "collect" );
	deepEqual( Stem("collected"), "collect" );
	deepEqual( Stem("collection"), "collect" );
	deepEqual( Stem("collections"), "collect" );
	deepEqual( Stem("collector"), "collector" );
	deepEqual( Stem("collectorship"), "collectorship" );
	deepEqual( Stem("college"), "colleg" );
	deepEqual( Stem("colleges"), "colleg" );
	deepEqual( Stem("collegian"), "collegian" );
	deepEqual( Stem("collegiate"), "collegi" );
	deepEqual( Stem("collied"), "colli" );
	deepEqual( Stem("collier"), "collier" );
	deepEqual( Stem("colliers"), "collier" );
	deepEqual( Stem("collingwood"), "collingwood" );
	deepEqual( Stem("collop"), "collop" );
	deepEqual( Stem("colloquies"), "colloqui" );
	deepEqual( Stem("colloquy"), "colloqui" );
	deepEqual( Stem("collusion"), "collus" );
	deepEqual( Stem("colme"), "colm" );
	deepEqual( Stem("colmekill"), "colmekil" );
	deepEqual( Stem("colnaghi"), "colnaghi" );
	deepEqual( Stem("cologne"), "cologn" );
	deepEqual( Stem("colonel"), "colonel" );
	deepEqual( Stem("colonels"), "colonel" );
	deepEqual( Stem("colonial"), "coloni" );
	deepEqual( Stem("colonies"), "coloni" );
	deepEqual( Stem("colony"), "coloni" );
	deepEqual( Stem("coloquintida"), "coloquintida" );
	deepEqual( Stem("color"), "color" );
	deepEqual( Stem("colors"), "color" );
	deepEqual( Stem("colossus"), "colossu" );
	deepEqual( Stem("colour"), "colour" );
	deepEqual( Stem("colourable"), "colour" );
	deepEqual( Stem("coloured"), "colour" );
	deepEqual( Stem("colouring"), "colour" );
	deepEqual( Stem("colours"), "colour" );
	deepEqual( Stem("colt"), "colt" );
	deepEqual( Stem("colted"), "colt" );
	deepEqual( Stem("colts"), "colt" );
	deepEqual( Stem("columbine"), "columbin" );
	deepEqual( Stem("columbines"), "columbin" );
	deepEqual( Stem("column"), "column" );
	deepEqual( Stem("columns"), "column" );
	deepEqual( Stem("colville"), "colvil" );
	deepEqual( Stem("com"), "com" );
	deepEqual( Stem("comagene"), "comagen" );
	deepEqual( Stem("comart"), "comart" );
	deepEqual( Stem("comb"), "comb" );
	deepEqual( Stem("combat"), "combat" );
	deepEqual( Stem("combatant"), "combat" );
	deepEqual( Stem("combatants"), "combat" );
	deepEqual( Stem("combated"), "combat" );
	deepEqual( Stem("combating"), "combat" );
	deepEqual( Stem("combats"), "combat" );
	deepEqual( Stem("combed"), "comb" );
	deepEqual( Stem("combin"), "combin" );
	deepEqual( Stem("combinate"), "combin" );
	deepEqual( Stem("combination"), "combin" );
	deepEqual( Stem("combine"), "combin" );
	deepEqual( Stem("combined"), "combin" );
	deepEqual( Stem("combing"), "comb" );
	deepEqual( Stem("combless"), "combless" );
	deepEqual( Stem("comboined"), "comboin" );
	deepEqual( Stem("combs"), "comb" );
	deepEqual( Stem("combustion"), "combust" );
	deepEqual( Stem("come"), "come" );
	deepEqual( Stem("comedian"), "comedian" );
	deepEqual( Stem("comedians"), "comedian" );
	deepEqual( Stem("comedies"), "comedi" );
	deepEqual( Stem("comedy"), "comedi" );
	deepEqual( Stem("comeliness"), "comeli" );
	deepEqual( Stem("comely"), "come" );
	deepEqual( Stem("comer"), "comer" );
	deepEqual( Stem("comers"), "comer" );
	deepEqual( Stem("comes"), "come" );
	deepEqual( Stem("comest"), "comest" );
	deepEqual( Stem("comestibles"), "comest" );
	deepEqual( Stem("comet"), "comet" );
	deepEqual( Stem("cometh"), "cometh" );
	deepEqual( Stem("comets"), "comet" );
	deepEqual( Stem("comfect"), "comfect" );
	deepEqual( Stem("comfit"), "comfit" );
	deepEqual( Stem("comfits"), "comfit" );
	deepEqual( Stem("comfort"), "comfort" );
	deepEqual( Stem("comfortable"), "comfort" );
	deepEqual( Stem("comfortably"), "comfort" );
	deepEqual( Stem("comforted"), "comfort" );
	deepEqual( Stem("comforter"), "comfort" );
	deepEqual( Stem("comforters"), "comfort" );
	deepEqual( Stem("comforting"), "comfort" );
	deepEqual( Stem("comfortless"), "comfortless" );
	deepEqual( Stem("comforts"), "comfort" );
	deepEqual( Stem("comic"), "comic" );
	deepEqual( Stem("comical"), "comic" );
	deepEqual( Stem("coming"), "come" );
	deepEqual( Stem("comings"), "come" );
	deepEqual( Stem("cominius"), "cominiu" );
	deepEqual( Stem("comite"), "comit" );
	deepEqual( Stem("comma"), "comma" );
	deepEqual( Stem("command"), "command" );
	deepEqual( Stem("commandant"), "command" );
	deepEqual( Stem("commande"), "command" );
	deepEqual( Stem("commanded"), "command" );
	deepEqual( Stem("commander"), "command" );
	deepEqual( Stem("commanders"), "command" );
	deepEqual( Stem("commanding"), "command" );
	deepEqual( Stem("commandment"), "command" );
	deepEqual( Stem("commandments"), "command" );
	deepEqual( Stem("commands"), "command" );
	deepEqual( Stem("comme"), "comm" );
	deepEqual( Stem("commemorating"), "commemor" );
	deepEqual( Stem("commenc"), "commenc" );
	deepEqual( Stem("commence"), "commenc" );
	deepEqual( Stem("commenced"), "commenc" );
	deepEqual( Stem("commencement"), "commenc" );
	deepEqual( Stem("commences"), "commenc" );
	deepEqual( Stem("commencing"), "commenc" );
	deepEqual( Stem("commend"), "commend" );
	deepEqual( Stem("commendable"), "commend" );
	deepEqual( Stem("commendation"), "commend" );
	deepEqual( Stem("commendations"), "commend" );
	deepEqual( Stem("commended"), "commend" );
	deepEqual( Stem("commending"), "commend" );
	deepEqual( Stem("commends"), "commend" );
	deepEqual( Stem("comment"), "comment" );
	deepEqual( Stem("commentaries"), "commentari" );
	deepEqual( Stem("commenting"), "comment" );
	deepEqual( Stem("comments"), "comment" );
	deepEqual( Stem("commerce"), "commerc" );
	deepEqual( Stem("commercial"), "commerci" );
	deepEqual( Stem("comminations"), "commin" );
	deepEqual( Stem("commingled"), "commingl" );
	deepEqual( Stem("commiserate"), "commiser" );
	deepEqual( Stem("commiseration"), "commiser" );
	deepEqual( Stem("commissary"), "commissari" );
	deepEqual( Stem("commission"), "commiss" );
	deepEqual( Stem("commissioned"), "commiss" );
	deepEqual( Stem("commissioner"), "commission" );
	deepEqual( Stem("commissioners"), "commission" );
	deepEqual( Stem("commissions"), "commiss" );
	deepEqual( Stem("commit"), "commit" );
	deepEqual( Stem("commits"), "commit" );
	deepEqual( Stem("committ"), "committ" );
	deepEqual( Stem("committal"), "committ" );
	deepEqual( Stem("committed"), "commit" );
	deepEqual( Stem("committee"), "committe" );
	deepEqual( Stem("committing"), "commit" );
	deepEqual( Stem("commix"), "commix" );
	deepEqual( Stem("commixed"), "commix" );
	deepEqual( Stem("commixtion"), "commixt" );
	deepEqual( Stem("commixture"), "commixtur" );
	deepEqual( Stem("commodious"), "commodi" );
	deepEqual( Stem("commodities"), "commod" );
	deepEqual( Stem("commodity"), "commod" );
	deepEqual( Stem("common"), "common" );
	deepEqual( Stem("commonage"), "commonag" );
	deepEqual( Stem("commonalty"), "commonalti" );
	deepEqual( Stem("commoner"), "common" );
	deepEqual( Stem("commoners"), "common" );
	deepEqual( Stem("commonly"), "commonli" );
	deepEqual( Stem("commons"), "common" );
	deepEqual( Stem("commonweal"), "commonw" );
	deepEqual( Stem("commonwealth"), "commonwealth" );
	deepEqual( Stem("commotion"), "commot" );
	deepEqual( Stem("commotions"), "commot" );
	deepEqual( Stem("commune"), "commun" );
	deepEqual( Stem("communed"), "commun" );
	deepEqual( Stem("communicat"), "communicat" );
	deepEqual( Stem("communicate"), "commun" );
	deepEqual( Stem("communicated"), "commun" );
	deepEqual( Stem("communicating"), "commun" );
	deepEqual( Stem("communication"), "commun" );
	deepEqual( Stem("communications"), "commun" );
	deepEqual( Stem("communicative"), "commun" );
	deepEqual( Stem("communing"), "commun" );
	deepEqual( Stem("communion"), "communion" );
	deepEqual( Stem("communities"), "commun" );
	deepEqual( Stem("community"), "commun" );
	deepEqual( Stem("comonty"), "comonti" );
	deepEqual( Stem("compact"), "compact" );
	deepEqual( Stem("compagnie"), "compagni" );
	deepEqual( Stem("companies"), "compani" );
	deepEqual( Stem("companion"), "companion" );
	deepEqual( Stem("companions"), "companion" );
	deepEqual( Stem("companionship"), "companionship" );
	deepEqual( Stem("company"), "compani" );
	deepEqual( Stem("compar"), "compar" );
	deepEqual( Stem("comparable"), "compar" );
	deepEqual( Stem("comparative"), "compar" );
	deepEqual( Stem("comparatively"), "compar" );
	deepEqual( Stem("compare"), "compar" );
	deepEqual( Stem("compared"), "compar" );
	deepEqual( Stem("comparing"), "compar" );
	deepEqual( Stem("comparison"), "comparison" );
	deepEqual( Stem("comparisons"), "comparison" );
	deepEqual( Stem("compartner"), "compartn" );
	deepEqual( Stem("compass"), "compass" );
	deepEqual( Stem("compasses"), "compass" );
	deepEqual( Stem("compassing"), "compass" );
	deepEqual( Stem("compassion"), "compass" );
	deepEqual( Stem("compassionate"), "compassion" );
	deepEqual( Stem("compassionating"), "compassion" );
	deepEqual( Stem("compatriot"), "compatriot" );
	deepEqual( Stem("compeers"), "compeer" );
	deepEqual( Stem("compel"), "compel" );
	deepEqual( Stem("compell"), "compel" );
	deepEqual( Stem("compelled"), "compel" );
	deepEqual( Stem("compelling"), "compel" );
	deepEqual( Stem("compels"), "compel" );
	deepEqual( Stem("compensate"), "compens" );
	deepEqual( Stem("compensated"), "compens" );
	deepEqual( Stem("compensation"), "compens" );
	deepEqual( Stem("compete"), "compet" );
	deepEqual( Stem("competence"), "compet" );
	deepEqual( Stem("competency"), "compet" );
	deepEqual( Stem("competent"), "compet" );
	deepEqual( Stem("competition"), "competit" );
	deepEqual( Stem("competitor"), "competitor" );
	deepEqual( Stem("competitors"), "competitor" );
	deepEqual( Stem("compil"), "compil" );
	deepEqual( Stem("compile"), "compil" );
	deepEqual( Stem("compiled"), "compil" );
	deepEqual( Stem("compiling"), "compil" );
	deepEqual( Stem("complacency"), "complac" );
	deepEqual( Stem("complacently"), "complac" );
	deepEqual( Stem("complain"), "complain" );
	deepEqual( Stem("complainer"), "complain" );
	deepEqual( Stem("complainest"), "complainest" );
	deepEqual( Stem("complaining"), "complain" );
	deepEqual( Stem("complainings"), "complain" );
	deepEqual( Stem("complains"), "complain" );
	deepEqual( Stem("complaint"), "complaint" );
	deepEqual( Stem("complaints"), "complaint" );
	deepEqual( Stem("complaisance"), "complais" );
	deepEqual( Stem("complement"), "complement" );
	deepEqual( Stem("complements"), "complement" );
	deepEqual( Stem("complete"), "complet" );
	deepEqual( Stem("completed"), "complet" );
	deepEqual( Stem("completely"), "complet" );
	deepEqual( Stem("completing"), "complet" );
	deepEqual( Stem("completion"), "complet" );
	deepEqual( Stem("complexion"), "complexion" );
	deepEqual( Stem("complexioned"), "complexion" );
	deepEqual( Stem("complexions"), "complexion" );
	deepEqual( Stem("complicated"), "complic" );
	deepEqual( Stem("complications"), "complic" );
	deepEqual( Stem("complices"), "complic" );
	deepEqual( Stem("complies"), "compli" );
	deepEqual( Stem("compliment"), "compliment" );
	deepEqual( Stem("complimental"), "compliment" );
	deepEqual( Stem("complimentary"), "complimentari" );
	deepEqual( Stem("complimented"), "compliment" );
	deepEqual( Stem("compliments"), "compliment" );
	deepEqual( Stem("complot"), "complot" );
	deepEqual( Stem("complots"), "complot" );
	deepEqual( Stem("complotted"), "complot" );
	deepEqual( Stem("comply"), "compli" );
	deepEqual( Stem("complying"), "compli" );
	deepEqual( Stem("comported"), "comport" );
	deepEqual( Stem("compos"), "compo" );
	deepEqual( Stem("compose"), "compos" );
	deepEqual( Stem("composed"), "compos" );
	deepEqual( Stem("composing"), "compos" );
	deepEqual( Stem("composition"), "composit" );
	deepEqual( Stem("compositions"), "composit" );
	deepEqual( Stem("compositor"), "compositor" );
	deepEqual( Stem("compost"), "compost" );
	deepEqual( Stem("composture"), "compostur" );
	deepEqual( Stem("composure"), "composur" );
	deepEqual( Stem("compound"), "compound" );
	deepEqual( Stem("compounded"), "compound" );
	deepEqual( Stem("compounds"), "compound" );
	deepEqual( Stem("comprehend"), "comprehend" );
	deepEqual( Stem("comprehended"), "comprehend" );
	deepEqual( Stem("comprehending"), "comprehend" );
	deepEqual( Stem("comprehends"), "comprehend" );
	deepEqual( Stem("comprehension"), "comprehens" );
	deepEqual( Stem("compremises"), "compremis" );
	deepEqual( Stem("compris"), "compri" );
	deepEqual( Stem("comprising"), "compris" );
	deepEqual( Stem("compromis"), "compromi" );
	deepEqual( Stem("compromise"), "compromis" );
	deepEqual( Stem("compromised"), "compromis" );
	deepEqual( Stem("compt"), "compt" );
	deepEqual( Stem("comptible"), "comptibl" );
	deepEqual( Stem("comptrollers"), "comptrol" );
	deepEqual( Stem("compulsatory"), "compulsatori" );
	deepEqual( Stem("compulsion"), "compuls" );
	deepEqual( Stem("compulsive"), "compuls" );
	deepEqual( Stem("compunction"), "compunct" );
	deepEqual( Stem("compunctious"), "compuncti" );
	deepEqual( Stem("computation"), "comput" );
	deepEqual( Stem("comrade"), "comrad" );
	deepEqual( Stem("comrades"), "comrad" );
	deepEqual( Stem("comte"), "comt" );
	deepEqual( Stem("comtesse"), "comtess" );
	deepEqual( Stem("comus"), "comu" );
	deepEqual( Stem("comutual"), "comutu" );
	deepEqual( Stem("con"), "con" );
	deepEqual( Stem("concave"), "concav" );
	deepEqual( Stem("concavities"), "concav" );
	deepEqual( Stem("conceal"), "conceal" );
	deepEqual( Stem("concealed"), "conceal" );
	deepEqual( Stem("concealing"), "conceal" );
	deepEqual( Stem("concealment"), "conceal" );
	deepEqual( Stem("concealments"), "conceal" );
	deepEqual( Stem("conceals"), "conceal" );
	deepEqual( Stem("conceit"), "conceit" );
	deepEqual( Stem("conceited"), "conceit" );
	deepEqual( Stem("conceitless"), "conceitless" );
	deepEqual( Stem("conceits"), "conceit" );
	deepEqual( Stem("conceiv"), "conceiv" );
	deepEqual( Stem("conceivable"), "conceiv" );
	deepEqual( Stem("conceive"), "conceiv" );
	deepEqual( Stem("conceived"), "conceiv" );
	deepEqual( Stem("conceives"), "conceiv" );
	deepEqual( Stem("conceiving"), "conceiv" );
	deepEqual( Stem("conception"), "concept" );
	deepEqual( Stem("conceptions"), "concept" );
	deepEqual( Stem("conceptious"), "concepti" );
	deepEqual( Stem("concern"), "concern" );
	deepEqual( Stem("concernancy"), "concern" );
	deepEqual( Stem("concerned"), "concern" );
	deepEqual( Stem("concerneth"), "concerneth" );
	deepEqual( Stem("concerning"), "concern" );
	deepEqual( Stem("concernings"), "concern" );
	deepEqual( Stem("concerns"), "concern" );
	deepEqual( Stem("concert"), "concert" );
	deepEqual( Stem("concerts"), "concert" );
	deepEqual( Stem("conchs"), "conch" );
	deepEqual( Stem("conciliate"), "concili" );
	deepEqual( Stem("conciliation"), "concili" );
	deepEqual( Stem("conclave"), "conclav" );
	deepEqual( Stem("conclaves"), "conclav" );
	deepEqual( Stem("conclud"), "conclud" );
	deepEqual( Stem("conclude"), "conclud" );
	deepEqual( Stem("concluded"), "conclud" );
	deepEqual( Stem("concludes"), "conclud" );
	deepEqual( Stem("concluding"), "conclud" );
	deepEqual( Stem("conclusion"), "conclus" );
	deepEqual( Stem("conclusions"), "conclus" );
	deepEqual( Stem("concoct"), "concoct" );
	deepEqual( Stem("concocted"), "concoct" );
	deepEqual( Stem("concolinel"), "concolinel" );
	deepEqual( Stem("concord"), "concord" );
	deepEqual( Stem("concubine"), "concubin" );
	deepEqual( Stem("concupiscible"), "concupisc" );
	deepEqual( Stem("concupy"), "concupi" );
	deepEqual( Stem("concur"), "concur" );
	deepEqual( Stem("concurrence"), "concurr" );
	deepEqual( Stem("concurring"), "concur" );
	deepEqual( Stem("concurs"), "concur" );
	deepEqual( Stem("condemn"), "condemn" );
	deepEqual( Stem("condemnation"), "condemn" );
	deepEqual( Stem("condemned"), "condemn" );
	deepEqual( Stem("condemning"), "condemn" );
	deepEqual( Stem("condemns"), "condemn" );
	deepEqual( Stem("condescend"), "condescend" );
	deepEqual( Stem("condescended"), "condescend" );
	deepEqual( Stem("condescending"), "condescend" );
	deepEqual( Stem("condescends"), "condescend" );
	deepEqual( Stem("condescension"), "condescens" );
	deepEqual( Stem("condign"), "condign" );
	deepEqual( Stem("condiment"), "condiment" );
	deepEqual( Stem("condition"), "condit" );
	deepEqual( Stem("conditionally"), "condition" );
	deepEqual( Stem("conditions"), "condit" );
	deepEqual( Stem("conditorey"), "conditorei" );
	deepEqual( Stem("condole"), "condol" );
	deepEqual( Stem("condoled"), "condol" );
	deepEqual( Stem("condolement"), "condol" );
	deepEqual( Stem("condolence"), "condol" );
	deepEqual( Stem("condolences"), "condol" );
	deepEqual( Stem("condoles"), "condol" );
	deepEqual( Stem("condoling"), "condol" );
	deepEqual( Stem("conduce"), "conduc" );
	deepEqual( Stem("conduct"), "conduct" );
	deepEqual( Stem("conducted"), "conduct" );
	deepEqual( Stem("conducting"), "conduct" );
	deepEqual( Stem("conductor"), "conductor" );
	deepEqual( Stem("conductors"), "conductor" );
	deepEqual( Stem("conducts"), "conduct" );
	deepEqual( Stem("conduit"), "conduit" );
	deepEqual( Stem("conduits"), "conduit" );
	deepEqual( Stem("conected"), "conect" );
	deepEqual( Stem("cones"), "cone" );
	deepEqual( Stem("coney"), "conei" );
	deepEqual( Stem("confection"), "confect" );
	deepEqual( Stem("confectionary"), "confectionari" );
	deepEqual( Stem("confections"), "confect" );
	deepEqual( Stem("confederacy"), "confederaci" );
	deepEqual( Stem("confederate"), "confeder" );
	deepEqual( Stem("confederates"), "confeder" );
	deepEqual( Stem("confer"), "confer" );
	deepEqual( Stem("conference"), "confer" );
	deepEqual( Stem("conferences"), "confer" );
	deepEqual( Stem("conferr"), "conferr" );
	deepEqual( Stem("conferred"), "confer" );
	deepEqual( Stem("conferring"), "confer" );
	deepEqual( Stem("confess"), "confess" );
	deepEqual( Stem("confessed"), "confess" );
	deepEqual( Stem("confesses"), "confess" );
	deepEqual( Stem("confesseth"), "confesseth" );
	deepEqual( Stem("confessing"), "confess" );
	deepEqual( Stem("confession"), "confess" );
	deepEqual( Stem("confessions"), "confess" );
	deepEqual( Stem("confessor"), "confessor" );
	deepEqual( Stem("confidant"), "confid" );
	deepEqual( Stem("confidante"), "confidant" );
	deepEqual( Stem("confidantes"), "confidant" );
	deepEqual( Stem("confide"), "confid" );
	deepEqual( Stem("confided"), "confid" );
	deepEqual( Stem("confidence"), "confid" );
	deepEqual( Stem("confidences"), "confid" );
	deepEqual( Stem("confident"), "confid" );
	deepEqual( Stem("confidential"), "confidenti" );
	deepEqual( Stem("confidentially"), "confidenti" );
	deepEqual( Stem("confidently"), "confid" );
	deepEqual( Stem("confides"), "confid" );
	deepEqual( Stem("confiding"), "confid" );
	deepEqual( Stem("confin"), "confin" );
	deepEqual( Stem("confine"), "confin" );
	deepEqual( Stem("confined"), "confin" );
	deepEqual( Stem("confineless"), "confineless" );
	deepEqual( Stem("confinement"), "confin" );
	deepEqual( Stem("confiners"), "confin" );
	deepEqual( Stem("confines"), "confin" );
	deepEqual( Stem("confining"), "confin" );
	deepEqual( Stem("confirm"), "confirm" );
	deepEqual( Stem("confirmation"), "confirm" );
	deepEqual( Stem("confirmations"), "confirm" );
	deepEqual( Stem("confirmed"), "confirm" );
	deepEqual( Stem("confirmer"), "confirm" );
	deepEqual( Stem("confirmers"), "confirm" );
	deepEqual( Stem("confirming"), "confirm" );
	deepEqual( Stem("confirmities"), "confirm" );
	deepEqual( Stem("confirms"), "confirm" );
	deepEqual( Stem("confiscate"), "confisc" );
	deepEqual( Stem("confiscated"), "confisc" );
	deepEqual( Stem("confiscation"), "confisc" );
	deepEqual( Stem("confiscations"), "confisc" );
	deepEqual( Stem("confixed"), "confix" );
	deepEqual( Stem("conflict"), "conflict" );
	deepEqual( Stem("conflicting"), "conflict" );
	deepEqual( Stem("conflicts"), "conflict" );
	deepEqual( Stem("confluence"), "confluenc" );
	deepEqual( Stem("conflux"), "conflux" );
	deepEqual( Stem("conform"), "conform" );
	deepEqual( Stem("conformable"), "conform" );
	deepEqual( Stem("confound"), "confound" );
	deepEqual( Stem("confounded"), "confound" );
	deepEqual( Stem("confounding"), "confound" );
	deepEqual( Stem("confounds"), "confound" );
	deepEqual( Stem("confront"), "confront" );
	deepEqual( Stem("confronted"), "confront" );
	deepEqual( Stem("confus"), "confu" );
	deepEqual( Stem("confused"), "confus" );
	deepEqual( Stem("confusedly"), "confusedli" );
	deepEqual( Stem("confusion"), "confus" );
	deepEqual( Stem("confusions"), "confus" );
	deepEqual( Stem("confutation"), "confut" );
	deepEqual( Stem("confutes"), "confut" );
	deepEqual( Stem("conge"), "cong" );
	deepEqual( Stem("congeal"), "congeal" );
	deepEqual( Stem("congealed"), "congeal" );
	deepEqual( Stem("congealment"), "congeal" );
	deepEqual( Stem("congee"), "conge" );
	deepEqual( Stem("conger"), "conger" );
	deepEqual( Stem("congest"), "congest" );
	deepEqual( Stem("congied"), "congi" );
	deepEqual( Stem("congratulate"), "congratul" );
	deepEqual( Stem("congratulated"), "congratul" );
	deepEqual( Stem("congratulating"), "congratul" );
	deepEqual( Stem("congratulations"), "congratul" );
	deepEqual( Stem("congreeing"), "congre" );
	deepEqual( Stem("congreeted"), "congreet" );
	deepEqual( Stem("congregate"), "congreg" );
	deepEqual( Stem("congregated"), "congreg" );
	deepEqual( Stem("congregation"), "congreg" );
	deepEqual( Stem("congregations"), "congreg" );
	deepEqual( Stem("congress"), "congress" );
	deepEqual( Stem("congruent"), "congruent" );
	deepEqual( Stem("congruing"), "congru" );
	deepEqual( Stem("conies"), "coni" );
	deepEqual( Stem("conjectural"), "conjectur" );
	deepEqual( Stem("conjecture"), "conjectur" );
	deepEqual( Stem("conjectured"), "conjectur" );
	deepEqual( Stem("conjectures"), "conjectur" );
	deepEqual( Stem("conjecturing"), "conjectur" );
	deepEqual( Stem("conjoin"), "conjoin" );
	deepEqual( Stem("conjoined"), "conjoin" );
	deepEqual( Stem("conjoins"), "conjoin" );
	deepEqual( Stem("conjointly"), "conjointli" );
	deepEqual( Stem("conjugal"), "conjug" );
	deepEqual( Stem("conjunct"), "conjunct" );
	deepEqual( Stem("conjunction"), "conjunct" );
	deepEqual( Stem("conjunctive"), "conjunct" );
	deepEqual( Stem("conjur"), "conjur" );
	deepEqual( Stem("conjuration"), "conjur" );
	deepEqual( Stem("conjurations"), "conjur" );
	deepEqual( Stem("conjure"), "conjur" );
	deepEqual( Stem("conjured"), "conjur" );
	deepEqual( Stem("conjurer"), "conjur" );
	deepEqual( Stem("conjurers"), "conjur" );
	deepEqual( Stem("conjures"), "conjur" );
	deepEqual( Stem("conjuring"), "conjur" );
	deepEqual( Stem("conjuro"), "conjuro" );
	deepEqual( Stem("conjurors"), "conjuror" );
	deepEqual( Stem("conn"), "conn" );
	deepEqual( Stem("connected"), "connect" );
	deepEqual( Stem("connection"), "connect" );
	deepEqual( Stem("connections"), "connect" );
	deepEqual( Stem("conned"), "con" );
	deepEqual( Stem("connexion"), "connexion" );
	deepEqual( Stem("connexions"), "connexion" );
	deepEqual( Stem("conning"), "con" );
	deepEqual( Stem("connive"), "conniv" );
	deepEqual( Stem("connoisseur"), "connoisseur" );
	deepEqual( Stem("connoisseurs"), "connoisseur" );
	deepEqual( Stem("conqu"), "conqu" );
	deepEqual( Stem("conquer"), "conquer" );
	deepEqual( Stem("conquered"), "conquer" );
	deepEqual( Stem("conquering"), "conquer" );
	deepEqual( Stem("conqueror"), "conqueror" );
	deepEqual( Stem("conquerors"), "conqueror" );
	deepEqual( Stem("conquers"), "conquer" );
	deepEqual( Stem("conquest"), "conquest" );
	deepEqual( Stem("conquests"), "conquest" );
	deepEqual( Stem("conquring"), "conqur" );
	deepEqual( Stem("conrade"), "conrad" );
	deepEqual( Stem("cons"), "con" );
	deepEqual( Stem("consanguineous"), "consanguin" );
	deepEqual( Stem("consanguinity"), "consanguin" );
	deepEqual( Stem("conscienc"), "conscienc" );
	deepEqual( Stem("conscience"), "conscienc" );
	deepEqual( Stem("conscienceless"), "conscienceless" );
	deepEqual( Stem("consciences"), "conscienc" );
	deepEqual( Stem("conscionable"), "conscion" );
	deepEqual( Stem("conscious"), "consciou" );
	deepEqual( Stem("consciousness"), "conscious" );
	deepEqual( Stem("consecrate"), "consecr" );
	deepEqual( Stem("consecrated"), "consecr" );
	deepEqual( Stem("consecrating"), "consecr" );
	deepEqual( Stem("consecrations"), "consecr" );
	deepEqual( Stem("consent"), "consent" );
	deepEqual( Stem("consented"), "consent" );
	deepEqual( Stem("consenting"), "consent" );
	deepEqual( Stem("consents"), "consent" );
	deepEqual( Stem("consequence"), "consequ" );
	deepEqual( Stem("consequences"), "consequ" );
	deepEqual( Stem("consequent"), "consequ" );
	deepEqual( Stem("consequently"), "consequ" );
	deepEqual( Stem("conservatories"), "conservatori" );
	deepEqual( Stem("conserve"), "conserv" );
	deepEqual( Stem("conserved"), "conserv" );
	deepEqual( Stem("conserves"), "conserv" );
	deepEqual( Stem("consider"), "consid" );
	deepEqual( Stem("considerable"), "consider" );
	deepEqual( Stem("considerably"), "consider" );
	deepEqual( Stem("considerance"), "consider" );
	deepEqual( Stem("considerate"), "consider" );
	deepEqual( Stem("consideration"), "consider" );
	deepEqual( Stem("considerations"), "consider" );
	deepEqual( Stem("considered"), "consid" );
	deepEqual( Stem("considering"), "consid" );
	deepEqual( Stem("considerings"), "consid" );
	deepEqual( Stem("considers"), "consid" );
	deepEqual( Stem("consign"), "consign" );
	deepEqual( Stem("consigned"), "consign" );
	deepEqual( Stem("consigning"), "consign" );
	deepEqual( Stem("consignment"), "consign" );
	deepEqual( Stem("consist"), "consist" );
	deepEqual( Stem("consisted"), "consist" );
	deepEqual( Stem("consistency"), "consist" );
	deepEqual( Stem("consistent"), "consist" );
	deepEqual( Stem("consisteth"), "consisteth" );
	deepEqual( Stem("consisting"), "consist" );
	deepEqual( Stem("consistory"), "consistori" );
	deepEqual( Stem("consists"), "consist" );
	deepEqual( Stem("consolate"), "consol" );
	deepEqual( Stem("consolation"), "consol" );
	deepEqual( Stem("consolations"), "consol" );
	deepEqual( Stem("console"), "consol" );
	deepEqual( Stem("consoled"), "consol" );
	deepEqual( Stem("consoler"), "consol" );
	deepEqual( Stem("consolidation"), "consolid" );
	deepEqual( Stem("consoling"), "consol" );
	deepEqual( Stem("consols"), "consol" );
	deepEqual( Stem("consonancy"), "conson" );
	deepEqual( Stem("consonant"), "conson" );
	deepEqual( Stem("consort"), "consort" );
	deepEqual( Stem("consorted"), "consort" );
	deepEqual( Stem("consortest"), "consortest" );
	deepEqual( Stem("consorting"), "consort" );
	deepEqual( Stem("conspectuities"), "conspectu" );
	deepEqual( Stem("conspicuous"), "conspicu" );
	deepEqual( Stem("conspicuously"), "conspicu" );
	deepEqual( Stem("conspir"), "conspir" );
	deepEqual( Stem("conspiracy"), "conspiraci" );
	deepEqual( Stem("conspirant"), "conspir" );
	deepEqual( Stem("conspirator"), "conspir" );
	deepEqual( Stem("conspirators"), "conspir" );
	deepEqual( Stem("conspire"), "conspir" );
	deepEqual( Stem("conspired"), "conspir" );
	deepEqual( Stem("conspirers"), "conspir" );
	deepEqual( Stem("conspires"), "conspir" );
	deepEqual( Stem("conspiring"), "conspir" );
	deepEqual( Stem("constable"), "constabl" );
	deepEqual( Stem("constables"), "constabl" );
	deepEqual( Stem("constance"), "constanc" );
	deepEqual( Stem("constancies"), "constanc" );
	deepEqual( Stem("constancy"), "constanc" );
	deepEqual( Stem("constant"), "constant" );
	deepEqual( Stem("constantine"), "constantin" );
	deepEqual( Stem("constantinople"), "constantinopl" );
	deepEqual( Stem("constantly"), "constantli" );
	deepEqual( Stem("constellation"), "constel" );
	deepEqual( Stem("consternation"), "constern" );
	deepEqual( Stem("constituted"), "constitut" );
	deepEqual( Stem("constitution"), "constitut" );
	deepEqual( Stem("constitutional"), "constitut" );
	deepEqual( Stem("constrain"), "constrain" );
	deepEqual( Stem("constrained"), "constrain" );
	deepEqual( Stem("constraineth"), "constraineth" );
	deepEqual( Stem("constrains"), "constrain" );
	deepEqual( Stem("constraint"), "constraint" );
	deepEqual( Stem("constring"), "constr" );
	deepEqual( Stem("construct"), "construct" );
	deepEqual( Stem("constructed"), "construct" );
	deepEqual( Stem("construction"), "construct" );
	deepEqual( Stem("construe"), "constru" );
	deepEqual( Stem("consul"), "consul" );
	deepEqual( Stem("consuls"), "consul" );
	deepEqual( Stem("consulship"), "consulship" );
	deepEqual( Stem("consulships"), "consulship" );
	deepEqual( Stem("consult"), "consult" );
	deepEqual( Stem("consultation"), "consult" );
	deepEqual( Stem("consulted"), "consult" );
	deepEqual( Stem("consulting"), "consult" );
	deepEqual( Stem("consults"), "consult" );
	deepEqual( Stem("consum"), "consum" );
	deepEqual( Stem("consume"), "consum" );
	deepEqual( Stem("consumed"), "consum" );
	deepEqual( Stem("consumedly"), "consumedli" );
	deepEqual( Stem("consumes"), "consum" );
	deepEqual( Stem("consuming"), "consum" );
	deepEqual( Stem("consummate"), "consumm" );
	deepEqual( Stem("consummated"), "consumm" );
	deepEqual( Stem("consummation"), "consumm" );
	deepEqual( Stem("consumption"), "consumpt" );
	deepEqual( Stem("consumptions"), "consumpt" );
	deepEqual( Stem("consumptive"), "consumpt" );
	deepEqual( Stem("contact"), "contact" );
	deepEqual( Stem("contagion"), "contagion" );
	deepEqual( Stem("contagious"), "contagi" );
	deepEqual( Stem("contain"), "contain" );
	deepEqual( Stem("contained"), "contain" );
	deepEqual( Stem("containing"), "contain" );
	deepEqual( Stem("contains"), "contain" );
	deepEqual( Stem("contaminate"), "contamin" );
	deepEqual( Stem("contaminated"), "contamin" );
	deepEqual( Stem("contemn"), "contemn" );
	deepEqual( Stem("contemned"), "contemn" );
	deepEqual( Stem("contemning"), "contemn" );
	deepEqual( Stem("contemns"), "contemn" );
	deepEqual( Stem("contemplate"), "contempl" );
	deepEqual( Stem("contemplated"), "contempl" );
	deepEqual( Stem("contemplation"), "contempl" );
	deepEqual( Stem("contemplative"), "contempl" );
	deepEqual( Stem("contemporaries"), "contemporari" );
	deepEqual( Stem("contempt"), "contempt" );
	deepEqual( Stem("contemptible"), "contempt" );
	deepEqual( Stem("contempts"), "contempt" );
	deepEqual( Stem("contemptuous"), "contemptu" );
	deepEqual( Stem("contemptuously"), "contemptu" );
	deepEqual( Stem("contend"), "contend" );
	deepEqual( Stem("contended"), "contend" );
	deepEqual( Stem("contending"), "contend" );
	deepEqual( Stem("contendon"), "contendon" );
	deepEqual( Stem("content"), "content" );
	deepEqual( Stem("contenta"), "contenta" );
	deepEqual( Stem("contented"), "content" );
	deepEqual( Stem("contentedly"), "contentedli" );
	deepEqual( Stem("contenteth"), "contenteth" );
	deepEqual( Stem("contenting"), "content" );
	deepEqual( Stem("contention"), "content" );
	deepEqual( Stem("contentious"), "contenti" );
	deepEqual( Stem("contentless"), "contentless" );
	deepEqual( Stem("contentment"), "content" );
	deepEqual( Stem("contento"), "contento" );
	deepEqual( Stem("contents"), "content" );
	deepEqual( Stem("contest"), "contest" );
	deepEqual( Stem("contestation"), "contest" );
	deepEqual( Stem("contests"), "contest" );
	deepEqual( Stem("contiguous"), "contigu" );
	deepEqual( Stem("continence"), "contin" );
	deepEqual( Stem("continency"), "contin" );
	deepEqual( Stem("continent"), "contin" );
	deepEqual( Stem("continental"), "continent" );
	deepEqual( Stem("continents"), "contin" );
	deepEqual( Stem("contingent"), "conting" );
	deepEqual( Stem("continu"), "continu" );
	deepEqual( Stem("continual"), "continu" );
	deepEqual( Stem("continually"), "continu" );
	deepEqual( Stem("continuance"), "continu" );
	deepEqual( Stem("continuantly"), "continuantli" );
	deepEqual( Stem("continuate"), "continu" );
	deepEqual( Stem("continue"), "continu" );
	deepEqual( Stem("continued"), "continu" );
	deepEqual( Stem("continuer"), "continu" );
	deepEqual( Stem("continues"), "continu" );
	deepEqual( Stem("continuing"), "continu" );
	deepEqual( Stem("continuous"), "continu" );
	deepEqual( Stem("contract"), "contract" );
	deepEqual( Stem("contracted"), "contract" );
	deepEqual( Stem("contracting"), "contract" );
	deepEqual( Stem("contraction"), "contract" );
	deepEqual( Stem("contracts"), "contract" );
	deepEqual( Stem("contradict"), "contradict" );
	deepEqual( Stem("contradicted"), "contradict" );
	deepEqual( Stem("contradiction"), "contradict" );
	deepEqual( Stem("contradicts"), "contradict" );
	deepEqual( Stem("contraries"), "contrari" );
	deepEqual( Stem("contrarieties"), "contrarieti" );
	deepEqual( Stem("contrariety"), "contrarieti" );
	deepEqual( Stem("contrarious"), "contrari" );
	deepEqual( Stem("contrariously"), "contrari" );
	deepEqual( Stem("contrary"), "contrari" );
	deepEqual( Stem("contrast"), "contrast" );
	deepEqual( Stem("contrasted"), "contrast" );
	deepEqual( Stem("contrasts"), "contrast" );
	deepEqual( Stem("contre"), "contr" );
	deepEqual( Stem("contretemps"), "contretemp" );
	deepEqual( Stem("contribute"), "contribut" );
	deepEqual( Stem("contribution"), "contribut" );
	deepEqual( Stem("contributions"), "contribut" );
	deepEqual( Stem("contributors"), "contributor" );
	deepEqual( Stem("contrite"), "contrit" );
	deepEqual( Stem("contrition"), "contrit" );
	deepEqual( Stem("contriv"), "contriv" );
	deepEqual( Stem("contrivances"), "contriv" );
	deepEqual( Stem("contrive"), "contriv" );
	deepEqual( Stem("contrived"), "contriv" );
	deepEqual( Stem("contriver"), "contriv" );
	deepEqual( Stem("contrives"), "contriv" );
	deepEqual( Stem("contriving"), "contriv" );
	deepEqual( Stem("control"), "control" );
	deepEqual( Stem("controll"), "control" );
	deepEqual( Stem("controlled"), "control" );
	deepEqual( Stem("controller"), "control" );
	deepEqual( Stem("controlling"), "control" );
	deepEqual( Stem("controlment"), "control" );
	deepEqual( Stem("controls"), "control" );
	deepEqual( Stem("controversy"), "controversi" );
	deepEqual( Stem("contumelious"), "contumeli" );
	deepEqual( Stem("contumeliously"), "contumeli" );
	deepEqual( Stem("contumely"), "contum" );
	deepEqual( Stem("contusions"), "contus" );
	deepEqual( Stem("convalescence"), "convalesc" );
	deepEqual( Stem("convalescent"), "convalesc" );
	deepEqual( Stem("convenience"), "conveni" );
	deepEqual( Stem("conveniences"), "conveni" );
	deepEqual( Stem("conveniency"), "conveni" );
	deepEqual( Stem("convenient"), "conveni" );
	deepEqual( Stem("conveniently"), "conveni" );
	deepEqual( Stem("convent"), "convent" );
	deepEqual( Stem("convented"), "convent" );
	deepEqual( Stem("conventicles"), "conventicl" );
	deepEqual( Stem("convents"), "convent" );
	deepEqual( Stem("conventual"), "conventu" );
	deepEqual( Stem("convers"), "conver" );
	deepEqual( Stem("conversant"), "convers" );
	deepEqual( Stem("conversation"), "convers" );
	deepEqual( Stem("conversational"), "convers" );
	deepEqual( Stem("conversations"), "convers" );
	deepEqual( Stem("conversazioni"), "conversazioni" );
	deepEqual( Stem("converse"), "convers" );
	deepEqual( Stem("conversed"), "convers" );
	deepEqual( Stem("converses"), "convers" );
	deepEqual( Stem("conversing"), "convers" );
	deepEqual( Stem("conversion"), "convers" );
	deepEqual( Stem("convert"), "convert" );
	deepEqual( Stem("converted"), "convert" );
	deepEqual( Stem("convertest"), "convertest" );
	deepEqual( Stem("converting"), "convert" );
	deepEqual( Stem("convertite"), "convertit" );
	deepEqual( Stem("convertites"), "convertit" );
	deepEqual( Stem("converts"), "convert" );
	deepEqual( Stem("convey"), "convei" );
	deepEqual( Stem("conveyance"), "convey" );
	deepEqual( Stem("conveyances"), "convey" );
	deepEqual( Stem("conveyed"), "convei" );
	deepEqual( Stem("conveyers"), "convey" );
	deepEqual( Stem("conveying"), "convei" );
	deepEqual( Stem("convict"), "convict" );
	deepEqual( Stem("convicted"), "convict" );
	deepEqual( Stem("conviction"), "convict" );
	deepEqual( Stem("convictions"), "convict" );
	deepEqual( Stem("convince"), "convinc" );
	deepEqual( Stem("convinced"), "convinc" );
	deepEqual( Stem("convinces"), "convinc" );
	deepEqual( Stem("convive"), "conviv" );
	deepEqual( Stem("convocation"), "convoc" );
	deepEqual( Stem("convoy"), "convoi" );
	deepEqual( Stem("convulsion"), "convuls" );
	deepEqual( Stem("convulsions"), "convuls" );
	deepEqual( Stem("convulsively"), "convuls" );
	deepEqual( Stem("cony"), "coni" );
	deepEqual( Stem("coo"), "coo" );
	deepEqual( Stem("cooing"), "coo" );
	deepEqual( Stem("cook"), "cook" );
	deepEqual( Stem("cooked"), "cook" );
	deepEqual( Stem("cookery"), "cookeri" );
	deepEqual( Stem("cooking"), "cook" );
	deepEqual( Stem("cooks"), "cook" );
	deepEqual( Stem("cooky"), "cooki" );
	deepEqual( Stem("cool"), "cool" );
	deepEqual( Stem("cooled"), "cool" );
	deepEqual( Stem("coolers"), "cooler" );
	deepEqual( Stem("cooling"), "cool" );
	deepEqual( Stem("coolly"), "coolli" );
	deepEqual( Stem("coolness"), "cool" );
	deepEqual( Stem("cools"), "cool" );
	deepEqual( Stem("coom"), "coom" );
	deepEqual( Stem("coop"), "coop" );
	deepEqual( Stem("coops"), "coop" );
	deepEqual( Stem("coorted"), "coort" );
	deepEqual( Stem("cop"), "cop" );
	deepEqual( Stem("copatain"), "copatain" );
	deepEqual( Stem("cope"), "cope" );
	deepEqual( Stem("cophetua"), "cophetua" );
	deepEqual( Stem("copied"), "copi" );
	deepEqual( Stem("copies"), "copi" );
	deepEqual( Stem("copious"), "copiou" );
	deepEqual( Stem("copiously"), "copious" );
	deepEqual( Stem("copper"), "copper" );
	deepEqual( Stem("copperspur"), "copperspur" );
	deepEqual( Stem("coppice"), "coppic" );
	deepEqual( Stem("copses"), "cops" );
	deepEqual( Stem("copulation"), "copul" );
	deepEqual( Stem("copulatives"), "copul" );
	deepEqual( Stem("copy"), "copi" );
	deepEqual( Stem("copying"), "copi" );
	deepEqual( Stem("coquet"), "coquet" );
	deepEqual( Stem("coquette"), "coquett" );
	deepEqual( Stem("coquettes"), "coquett" );
	deepEqual( Stem("cor"), "cor" );
	deepEqual( Stem("coragio"), "coragio" );
	deepEqual( Stem("coral"), "coral" );
	deepEqual( Stem("corals"), "coral" );
	deepEqual( Stem("coram"), "coram" );
	deepEqual( Stem("corambus"), "corambu" );
	deepEqual( Stem("coranto"), "coranto" );
	deepEqual( Stem("corantos"), "coranto" );
	deepEqual( Stem("corbleu"), "corbleu" );
	deepEqual( Stem("corbo"), "corbo" );
	deepEqual( Stem("cord"), "cord" );
	deepEqual( Stem("corded"), "cord" );
	deepEqual( Stem("cordelia"), "cordelia" );
	deepEqual( Stem("cordial"), "cordial" );
	deepEqual( Stem("cordiality"), "cordial" );
	deepEqual( Stem("cordially"), "cordial" );
	deepEqual( Stem("cordis"), "cordi" );
	deepEqual( Stem("cordon"), "cordon" );
	deepEqual( Stem("cordons"), "cordon" );
	deepEqual( Stem("cordovan"), "cordovan" );
	deepEqual( Stem("cords"), "cord" );
	deepEqual( Stem("corduroy"), "corduroi" );
	deepEqual( Stem("corduroys"), "corduroi" );
	deepEqual( Stem("core"), "core" );
	deepEqual( Stem("corin"), "corin" );
	deepEqual( Stem("corinth"), "corinth" );
	deepEqual( Stem("corinthian"), "corinthian" );
	deepEqual( Stem("coriolanus"), "coriolanu" );
	deepEqual( Stem("corioli"), "corioli" );
	deepEqual( Stem("cork"), "cork" );
	deepEqual( Stem("corky"), "corki" );
	deepEqual( Stem("cormorant"), "cormor" );
	deepEqual( Stem("corn"), "corn" );
	deepEqual( Stem("cornelia"), "cornelia" );
	deepEqual( Stem("cornelian"), "cornelian" );
	deepEqual( Stem("cornelius"), "corneliu" );
	deepEqual( Stem("corner"), "corner" );
	deepEqual( Stem("cornered"), "corner" );
	deepEqual( Stem("corners"), "corner" );
	deepEqual( Stem("cornerstone"), "cornerston" );
	deepEqual( Stem("cornet"), "cornet" );
	deepEqual( Stem("cornets"), "cornet" );
	deepEqual( Stem("cornfactors"), "cornfactor" );
	deepEqual( Stem("cornhill"), "cornhil" );
	deepEqual( Stem("cornices"), "cornic" );
	deepEqual( Stem("cornish"), "cornish" );
	deepEqual( Stem("corns"), "corn" );
	deepEqual( Stem("cornuto"), "cornuto" );
	deepEqual( Stem("cornwall"), "cornwal" );
	deepEqual( Stem("corollary"), "corollari" );
	deepEqual( Stem("coronal"), "coron" );
	deepEqual( Stem("coronation"), "coron" );
	deepEqual( Stem("coronet"), "coronet" );
	deepEqual( Stem("coronets"), "coronet" );
	deepEqual( Stem("corporal"), "corpor" );
	deepEqual( Stem("corporals"), "corpor" );
	deepEqual( Stem("corporate"), "corpor" );
	deepEqual( Stem("corps"), "corp" );
	deepEqual( Stem("corpse"), "corps" );
	deepEqual( Stem("corpses"), "corps" );
	deepEqual( Stem("corpulent"), "corpul" );
	deepEqual( Stem("corpus"), "corpu" );
	deepEqual( Stem("correct"), "correct" );
	deepEqual( Stem("corrected"), "correct" );
	deepEqual( Stem("correcting"), "correct" );
	deepEqual( Stem("correction"), "correct" );
	deepEqual( Stem("correctioner"), "correction" );
	deepEqual( Stem("correctly"), "correctli" );
	deepEqual( Stem("correctness"), "correct" );
	deepEqual( Stem("corrects"), "correct" );
	deepEqual( Stem("correspond"), "correspond" );
	deepEqual( Stem("correspondence"), "correspond" );
	deepEqual( Stem("correspondences"), "correspond" );
	deepEqual( Stem("correspondent"), "correspond" );
	deepEqual( Stem("correspondents"), "correspond" );
	deepEqual( Stem("corresponding"), "correspond" );
	deepEqual( Stem("corresponsive"), "correspons" );
	deepEqual( Stem("corridor"), "corridor" );
	deepEqual( Stem("corridors"), "corridor" );
	deepEqual( Stem("corrigible"), "corrig" );
	deepEqual( Stem("corrival"), "corriv" );
	deepEqual( Stem("corrivals"), "corriv" );
	deepEqual( Stem("corroborate"), "corrobor" );
	deepEqual( Stem("corrosive"), "corros" );
	deepEqual( Stem("corrupt"), "corrupt" );
	deepEqual( Stem("corrupted"), "corrupt" );
	deepEqual( Stem("corrupter"), "corrupt" );
	deepEqual( Stem("corrupters"), "corrupt" );
	deepEqual( Stem("corruptible"), "corrupt" );
	deepEqual( Stem("corruptibly"), "corruptibli" );
	deepEqual( Stem("corrupting"), "corrupt" );
	deepEqual( Stem("corruption"), "corrupt" );
	deepEqual( Stem("corruptly"), "corruptli" );
	deepEqual( Stem("corrupts"), "corrupt" );
	deepEqual( Stem("corsage"), "corsag" );
	deepEqual( Stem("corse"), "cors" );
	deepEqual( Stem("corses"), "cors" );
	deepEqual( Stem("corsetiere"), "corsetier" );
	deepEqual( Stem("corsican"), "corsican" );
	deepEqual( Stem("corslet"), "corslet" );
	deepEqual( Stem("cortege"), "corteg" );
	deepEqual( Stem("corydon"), "corydon" );
	deepEqual( Stem("cosmo"), "cosmo" );
	deepEqual( Stem("cossacks"), "cossack" );
	deepEqual( Stem("cost"), "cost" );
	deepEqual( Stem("costard"), "costard" );
	deepEqual( Stem("costermongers"), "costermong" );
	deepEqual( Stem("costlier"), "costlier" );
	deepEqual( Stem("costly"), "costli" );
	deepEqual( Stem("costs"), "cost" );
	deepEqual( Stem("costume"), "costum" );
	deepEqual( Stem("costumes"), "costum" );
	deepEqual( Stem("cosway"), "coswai" );
	deepEqual( Stem("cot"), "cot" );
	deepEqual( Stem("cote"), "cote" );
	deepEqual( Stem("coted"), "cote" );
	deepEqual( Stem("cotillon"), "cotillon" );
	deepEqual( Stem("cotsall"), "cotsal" );
	deepEqual( Stem("cotsole"), "cotsol" );
	deepEqual( Stem("cotswold"), "cotswold" );
	deepEqual( Stem("cottage"), "cottag" );
	deepEqual( Stem("cottagers"), "cottag" );
	deepEqual( Stem("cottages"), "cottag" );
	deepEqual( Stem("cotton"), "cotton" );
	deepEqual( Stem("cotus"), "cotu" );
	deepEqual( Stem("couch"), "couch" );
	deepEqual( Stem("couchant"), "couchant" );
	deepEqual( Stem("couched"), "couch" );
	deepEqual( Stem("couches"), "couch" );
	deepEqual( Stem("couching"), "couch" );
	deepEqual( Stem("couchings"), "couch" );
	deepEqual( Stem("coude"), "coud" );
	deepEqual( Stem("cough"), "cough" );
	deepEqual( Stem("coughing"), "cough" );
	deepEqual( Stem("could"), "could" );
	deepEqual( Stem("couldn"), "couldn" );
	deepEqual( Stem("couldst"), "couldst" );
	deepEqual( Stem("coulter"), "coulter" );
	deepEqual( Stem("council"), "council" );
	deepEqual( Stem("councillor"), "councillor" );
	deepEqual( Stem("councillors"), "councillor" );
	deepEqual( Stem("councils"), "council" );
	deepEqual( Stem("counsel"), "counsel" );
	deepEqual( Stem("counsell"), "counsel" );
	deepEqual( Stem("counselled"), "counsel" );
	deepEqual( Stem("counsellor"), "counsellor" );
	deepEqual( Stem("counsellors"), "counsellor" );
	deepEqual( Stem("counselor"), "counselor" );
	deepEqual( Stem("counselors"), "counselor" );
	deepEqual( Stem("counsels"), "counsel" );
	deepEqual( Stem("count"), "count" );
	deepEqual( Stem("counted"), "count" );
	deepEqual( Stem("countenanc"), "countenanc" );
	deepEqual( Stem("countenance"), "counten" );
	deepEqual( Stem("countenances"), "counten" );
	deepEqual( Stem("counter"), "counter" );
	deepEqual( Stem("counteracted"), "counteract" );
	deepEqual( Stem("counterchange"), "counterchang" );
	deepEqual( Stem("countercheck"), "countercheck" );
	deepEqual( Stem("counterfeit"), "counterfeit" );
	deepEqual( Stem("counterfeited"), "counterfeit" );
	deepEqual( Stem("counterfeiting"), "counterfeit" );
	deepEqual( Stem("counterfeitly"), "counterfeitli" );
	deepEqual( Stem("counterfeits"), "counterfeit" );
	deepEqual( Stem("countermand"), "countermand" );
	deepEqual( Stem("countermands"), "countermand" );
	deepEqual( Stem("countermines"), "countermin" );
	deepEqual( Stem("counterpane"), "counterpan" );
	deepEqual( Stem("counterpanes"), "counterpan" );
	deepEqual( Stem("counterpart"), "counterpart" );
	deepEqual( Stem("counterpoints"), "counterpoint" );
	deepEqual( Stem("counterpois"), "counterpoi" );
	deepEqual( Stem("counterpoise"), "counterpois" );
	deepEqual( Stem("counters"), "counter" );
	deepEqual( Stem("countervail"), "countervail" );
	deepEqual( Stem("countess"), "countess" );
	deepEqual( Stem("countesses"), "countess" );
	deepEqual( Stem("counties"), "counti" );
	deepEqual( Stem("counting"), "count" );
	deepEqual( Stem("countless"), "countless" );
	deepEqual( Stem("countries"), "countri" );
	deepEqual( Stem("countrv"), "countrv" );
	deepEqual( Stem("country"), "countri" );
	deepEqual( Stem("countryman"), "countryman" );
	deepEqual( Stem("countrymen"), "countrymen" );
	deepEqual( Stem("counts"), "count" );
	deepEqual( Stem("county"), "counti" );
	deepEqual( Stem("coup"), "coup" );
	deepEqual( Stem("couper"), "couper" );
	deepEqual( Stem("coupez"), "coupez" );
	deepEqual( Stem("couple"), "coupl" );
	deepEqual( Stem("coupled"), "coupl" );
	deepEqual( Stem("couplement"), "couplement" );
	deepEqual( Stem("couples"), "coupl" );
	deepEqual( Stem("couplet"), "couplet" );
	deepEqual( Stem("couplets"), "couplet" );
	deepEqual( Stem("coupy"), "coupi" );
	deepEqual( Stem("cour"), "cour" );
	deepEqual( Stem("courage"), "courag" );
	deepEqual( Stem("courageous"), "courag" );
	deepEqual( Stem("courageously"), "courag" );
	deepEqual( Stem("courages"), "courag" );
	deepEqual( Stem("courier"), "courier" );
	deepEqual( Stem("couriers"), "courier" );
	deepEqual( Stem("couronne"), "couronn" );
	deepEqual( Stem("cours"), "cour" );
	deepEqual( Stem("course"), "cours" );
	deepEqual( Stem("coursed"), "cours" );
	deepEqual( Stem("courser"), "courser" );
	deepEqual( Stem("coursers"), "courser" );
	deepEqual( Stem("courses"), "cours" );
	deepEqual( Stem("coursing"), "cours" );
	deepEqual( Stem("court"), "court" );
	deepEqual( Stem("courte"), "court" );
	deepEqual( Stem("courted"), "court" );
	deepEqual( Stem("courteous"), "courteou" );
	deepEqual( Stem("courteously"), "courteous" );
	deepEqual( Stem("courtesan"), "courtesan" );
	deepEqual( Stem("courtesies"), "courtesi" );
	deepEqual( Stem("courtesy"), "courtesi" );
	deepEqual( Stem("courtezan"), "courtezan" );
	deepEqual( Stem("courtezans"), "courtezan" );
	deepEqual( Stem("courtier"), "courtier" );
	deepEqual( Stem("courtiers"), "courtier" );
	deepEqual( Stem("courting"), "court" );
	deepEqual( Stem("courtlike"), "courtlik" );
	deepEqual( Stem("courtly"), "courtli" );
	deepEqual( Stem("courtney"), "courtnei" );
	deepEqual( Stem("courts"), "court" );
	deepEqual( Stem("courtship"), "courtship" );
	deepEqual( Stem("courtships"), "courtship" );
	deepEqual( Stem("courtyard"), "courtyard" );
	deepEqual( Stem("cousin"), "cousin" );
	deepEqual( Stem("cousins"), "cousin" );
	deepEqual( Stem("couterfeit"), "couterfeit" );
	deepEqual( Stem("coutume"), "coutum" );
	deepEqual( Stem("covenant"), "coven" );
	deepEqual( Stem("covenants"), "coven" );
	deepEqual( Stem("covent"), "covent" );
	deepEqual( Stem("coventry"), "coventri" );
	deepEqual( Stem("cover"), "cover" );
	deepEqual( Stem("covered"), "cover" );
	deepEqual( Stem("covering"), "cover" );
	deepEqual( Stem("coverings"), "cover" );
	deepEqual( Stem("coverlet"), "coverlet" );
	deepEqual( Stem("covers"), "cover" );
	deepEqual( Stem("covert"), "covert" );
	deepEqual( Stem("covertly"), "covertli" );
	deepEqual( Stem("coverture"), "covertur" );
	deepEqual( Stem("covet"), "covet" );
	deepEqual( Stem("coveted"), "covet" );
	deepEqual( Stem("coveting"), "covet" );
	deepEqual( Stem("covetings"), "covet" );
	deepEqual( Stem("covetous"), "covet" );
	deepEqual( Stem("covetously"), "covet" );
	deepEqual( Stem("covetousness"), "covet" );
	deepEqual( Stem("covets"), "covet" );
	deepEqual( Stem("cow"), "cow" );
	deepEqual( Stem("coward"), "coward" );
	deepEqual( Stem("cowarded"), "coward" );
	deepEqual( Stem("cowardice"), "cowardic" );
	deepEqual( Stem("cowardly"), "cowardli" );
	deepEqual( Stem("cowards"), "coward" );
	deepEqual( Stem("cowardship"), "cowardship" );
	deepEqual( Stem("cowed"), "cow" );
	deepEqual( Stem("cowering"), "cower" );
	deepEqual( Stem("cowes"), "cow" );
	deepEqual( Stem("cowish"), "cowish" );
	deepEqual( Stem("cowl"), "cowl" );
	deepEqual( Stem("cows"), "cow" );
	deepEqual( Stem("cowslip"), "cowslip" );
	deepEqual( Stem("cowslips"), "cowslip" );
	deepEqual( Stem("cox"), "cox" );
	deepEqual( Stem("coxcomb"), "coxcomb" );
	deepEqual( Stem("coxcombs"), "coxcomb" );
	deepEqual( Stem("coy"), "coi" );
	deepEqual( Stem("coyness"), "coy" );
	deepEqual( Stem("coystrill"), "coystril" );
	deepEqual( Stem("coz"), "coz" );
	deepEqual( Stem("cozen"), "cozen" );
	deepEqual( Stem("cozenage"), "cozenag" );
	deepEqual( Stem("cozened"), "cozen" );
	deepEqual( Stem("cozener"), "cozen" );
	deepEqual( Stem("cozeners"), "cozen" );
	deepEqual( Stem("cozening"), "cozen" );
	deepEqual( Stem("coziers"), "cozier" );
	deepEqual( Stem("crab"), "crab" );
	deepEqual( Stem("crabbed"), "crab" );
	deepEqual( Stem("crabs"), "crab" );
	deepEqual( Stem("crack"), "crack" );
	deepEqual( Stem("cracked"), "crack" );
	deepEqual( Stem("crackenbury"), "crackenburi" );
	deepEqual( Stem("cracker"), "cracker" );
	deepEqual( Stem("crackers"), "cracker" );
	deepEqual( Stem("cracking"), "crack" );
	deepEqual( Stem("crackled"), "crackl" );
	deepEqual( Stem("crackling"), "crackl" );
	deepEqual( Stem("cracks"), "crack" );
	deepEqual( Stem("cracksman"), "cracksman" );
	deepEqual( Stem("cradle"), "cradl" );
	deepEqual( Stem("cradled"), "cradl" );
	deepEqual( Stem("cradles"), "cradl" );
	deepEqual( Stem("craft"), "craft" );
	deepEqual( Stem("crafted"), "craft" );
	deepEqual( Stem("craftied"), "crafti" );
	deepEqual( Stem("craftier"), "craftier" );
	deepEqual( Stem("craftily"), "craftili" );
	deepEqual( Stem("crafts"), "craft" );
	deepEqual( Stem("craftsmen"), "craftsmen" );
	deepEqual( Stem("crafty"), "crafti" );
	deepEqual( Stem("crags"), "crag" );
	deepEqual( Stem("cram"), "cram" );
	deepEqual( Stem("cramm"), "cramm" );
	deepEqual( Stem("crammed"), "cram" );
	deepEqual( Stem("cramp"), "cramp" );
	deepEqual( Stem("cramps"), "cramp" );
	deepEqual( Stem("crams"), "cram" );
	deepEqual( Stem("cranberry"), "cranberri" );
	deepEqual( Stem("cranking"), "crank" );
	deepEqual( Stem("cranks"), "crank" );
	deepEqual( Stem("cranmer"), "cranmer" );
	deepEqual( Stem("crannied"), "cranni" );
	deepEqual( Stem("crannies"), "cranni" );
	deepEqual( Stem("cranny"), "cranni" );
	deepEqual( Stem("crants"), "crant" );
	deepEqual( Stem("crape"), "crape" );
	deepEqual( Stem("crapes"), "crape" );
	deepEqual( Stem("crare"), "crare" );
	deepEqual( Stem("cras"), "cra" );
	deepEqual( Stem("crash"), "crash" );
	deepEqual( Stem("crashing"), "crash" );
	deepEqual( Stem("crassus"), "crassu" );
	deepEqual( Stem("crav"), "crav" );
	deepEqual( Stem("cravat"), "cravat" );
	deepEqual( Stem("cravatted"), "cravat" );
	deepEqual( Stem("crave"), "crave" );
	deepEqual( Stem("craved"), "crave" );
	deepEqual( Stem("craven"), "craven" );
	deepEqual( Stem("cravens"), "craven" );
	deepEqual( Stem("craves"), "crave" );
	deepEqual( Stem("craveth"), "craveth" );
	deepEqual( Stem("craving"), "crave" );
	deepEqual( Stem("cravley"), "cravlei" );
	deepEqual( Stem("crawl"), "crawl" );
	deepEqual( Stem("crawled"), "crawl" );
	deepEqual( Stem("crawlers"), "crawler" );
	deepEqual( Stem("crawley"), "crawlei" );
	deepEqual( Stem("crawleys"), "crawlei" );
	deepEqual( Stem("crawling"), "crawl" );
	deepEqual( Stem("crawls"), "crawl" );
	deepEqual( Stem("craz"), "craz" );
	deepEqual( Stem("crazed"), "craze" );
	deepEqual( Stem("crazy"), "crazi" );
	deepEqual( Stem("creak"), "creak" );
	deepEqual( Stem("creaked"), "creak" );
	deepEqual( Stem("creaking"), "creak" );
	deepEqual( Stem("cream"), "cream" );
	deepEqual( Stem("creamer"), "creamer" );
	deepEqual( Stem("create"), "creat" );
	deepEqual( Stem("created"), "creat" );
	deepEqual( Stem("creates"), "creat" );
	deepEqual( Stem("creating"), "creat" );
	deepEqual( Stem("creation"), "creation" );
	deepEqual( Stem("creator"), "creator" );
	deepEqual( Stem("creature"), "creatur" );
	deepEqual( Stem("creatures"), "creatur" );
	deepEqual( Stem("crebillon"), "crebillon" );
	deepEqual( Stem("credence"), "credenc" );
	deepEqual( Stem("credent"), "credent" );
	deepEqual( Stem("credible"), "credibl" );
	deepEqual( Stem("credit"), "credit" );
	deepEqual( Stem("creditable"), "credit" );
	deepEqual( Stem("creditor"), "creditor" );
	deepEqual( Stem("creditors"), "creditor" );
	deepEqual( Stem("credo"), "credo" );
	deepEqual( Stem("credulity"), "credul" );
	deepEqual( Stem("credulous"), "credul" );
	deepEqual( Stem("creed"), "creed" );
	deepEqual( Stem("creek"), "creek" );
	deepEqual( Stem("creeks"), "creek" );
	deepEqual( Stem("creep"), "creep" );
	deepEqual( Stem("creeping"), "creep" );
	deepEqual( Stem("creeps"), "creep" );
	deepEqual( Stem("creole"), "creol" );
	deepEqual( Stem("crept"), "crept" );
	deepEqual( Stem("crescent"), "crescent" );
	deepEqual( Stem("crescive"), "cresciv" );
	deepEqual( Stem("cressets"), "cresset" );
	deepEqual( Stem("cressid"), "cressid" );
	deepEqual( Stem("cressida"), "cressida" );
	deepEqual( Stem("cressids"), "cressid" );
	deepEqual( Stem("cressy"), "cressi" );
	deepEqual( Stem("crest"), "crest" );
	deepEqual( Stem("crested"), "crest" );
	deepEqual( Stem("crestfall"), "crestfal" );
	deepEqual( Stem("crestfallen"), "crestfallen" );
	deepEqual( Stem("crestless"), "crestless" );
	deepEqual( Stem("crests"), "crest" );
	deepEqual( Stem("cretan"), "cretan" );
	deepEqual( Stem("crete"), "crete" );
	deepEqual( Stem("crevice"), "crevic" );
	deepEqual( Stem("crew"), "crew" );
	deepEqual( Stem("crews"), "crew" );
	deepEqual( Stem("crib"), "crib" );
	deepEqual( Stem("cribb"), "cribb" );
	deepEqual( Stem("cribbage"), "cribbag" );
	deepEqual( Stem("crible"), "cribl" );
	deepEqual( Stem("cribs"), "crib" );
	deepEqual( Stem("crichton"), "crichton" );
	deepEqual( Stem("cricket"), "cricket" );
	deepEqual( Stem("crickets"), "cricket" );
	deepEqual( Stem("cried"), "cri" );
	deepEqual( Stem("criedst"), "criedst" );
	deepEqual( Stem("crier"), "crier" );
	deepEqual( Stem("cries"), "cri" );
	deepEqual( Stem("criest"), "criest" );
	deepEqual( Stem("crieth"), "crieth" );
	deepEqual( Stem("crime"), "crime" );
	deepEqual( Stem("crimeful"), "crime" );
	deepEqual( Stem("crimeless"), "crimeless" );
	deepEqual( Stem("crimes"), "crime" );
	deepEqual( Stem("criminal"), "crimin" );
	deepEqual( Stem("crimped"), "crimp" );
	deepEqual( Stem("crimson"), "crimson" );
	deepEqual( Stem("cringe"), "cring" );
	deepEqual( Stem("cringed"), "cring" );
	deepEqual( Stem("cringing"), "cring" );
	deepEqual( Stem("crinoline"), "crinolin" );
	deepEqual( Stem("cripple"), "crippl" );
	deepEqual( Stem("crisis"), "crisi" );
	deepEqual( Stem("crisp"), "crisp" );
	deepEqual( Stem("crisped"), "crisp" );
	deepEqual( Stem("crispian"), "crispian" );
	deepEqual( Stem("crispianus"), "crispianu" );
	deepEqual( Stem("crispin"), "crispin" );
	deepEqual( Stem("critic"), "critic" );
	deepEqual( Stem("critical"), "critic" );
	deepEqual( Stem("criticisms"), "critic" );
	deepEqual( Stem("critics"), "critic" );
	deepEqual( Stem("croak"), "croak" );
	deepEqual( Stem("croaking"), "croak" );
	deepEqual( Stem("croaks"), "croak" );
	deepEqual( Stem("crockery"), "crockeri" );
	deepEqual( Stem("crocky"), "crocki" );
	deepEqual( Stem("crocodile"), "crocodil" );
	deepEqual( Stem("croesus"), "croesu" );
	deepEqual( Stem("cromer"), "cromer" );
	deepEqual( Stem("cromwell"), "cromwel" );
	deepEqual( Stem("crone"), "crone" );
	deepEqual( Stem("cronies"), "croni" );
	deepEqual( Stem("crony"), "croni" );
	deepEqual( Stem("crook"), "crook" );
	deepEqual( Stem("crookback"), "crookback" );
	deepEqual( Stem("crooked"), "crook" );
	deepEqual( Stem("crooking"), "crook" );
	deepEqual( Stem("crop"), "crop" );
	deepEqual( Stem("cropp"), "cropp" );
	deepEqual( Stem("cropped"), "crop" );
	deepEqual( Stem("crops"), "crop" );
	deepEqual( Stem("crosby"), "crosbi" );
	deepEqual( Stem("cross"), "cross" );
	deepEqual( Stem("crossed"), "cross" );
	deepEqual( Stem("crosses"), "cross" );
	deepEqual( Stem("crossest"), "crossest" );
	deepEqual( Stem("crossing"), "cross" );
	deepEqual( Stem("crossings"), "cross" );
	deepEqual( Stem("crossly"), "crossli" );
	deepEqual( Stem("crossness"), "cross" );
	deepEqual( Stem("crost"), "crost" );
	deepEqual( Stem("crotchets"), "crotchet" );
	deepEqual( Stem("crouch"), "crouch" );
	deepEqual( Stem("crouching"), "crouch" );
	deepEqual( Stem("croup"), "croup" );
	deepEqual( Stem("croupier"), "croupier" );
	deepEqual( Stem("croupiers"), "croupier" );
	deepEqual( Stem("crow"), "crow" );
	deepEqual( Stem("crowd"), "crowd" );
	deepEqual( Stem("crowded"), "crowd" );
	deepEqual( Stem("crowding"), "crowd" );
	deepEqual( Stem("crowds"), "crowd" );
	deepEqual( Stem("crowed"), "crow" );
	deepEqual( Stem("crowflowers"), "crowflow" );
	deepEqual( Stem("crowing"), "crow" );
	deepEqual( Stem("crowkeeper"), "crowkeep" );
	deepEqual( Stem("crown"), "crown" );
	deepEqual( Stem("crowned"), "crown" );
	deepEqual( Stem("crowner"), "crowner" );
	deepEqual( Stem("crownet"), "crownet" );
	deepEqual( Stem("crownets"), "crownet" );
	deepEqual( Stem("crowning"), "crown" );
	deepEqual( Stem("crowns"), "crown" );
	deepEqual( Stem("crows"), "crow" );
	deepEqual( Stem("cruchecassee"), "cruchecasse" );
	deepEqual( Stem("crudy"), "crudi" );
	deepEqual( Stem("cruel"), "cruel" );
	deepEqual( Stem("cruell"), "cruell" );
	deepEqual( Stem("crueller"), "crueller" );
	deepEqual( Stem("cruellest"), "cruellest" );
	deepEqual( Stem("cruelly"), "cruelli" );
	deepEqual( Stem("cruels"), "cruel" );
	deepEqual( Stem("cruelty"), "cruelti" );
	deepEqual( Stem("cruet"), "cruet" );
	deepEqual( Stem("crum"), "crum" );
	deepEqual( Stem("crumble"), "crumbl" );
	deepEqual( Stem("crumbs"), "crumb" );
	deepEqual( Stem("crump"), "crump" );
	deepEqual( Stem("crumpled"), "crumpl" );
	deepEqual( Stem("crupper"), "crupper" );
	deepEqual( Stem("crusadoes"), "crusado" );
	deepEqual( Stem("crush"), "crush" );
	deepEqual( Stem("crushed"), "crush" );
	deepEqual( Stem("crushes"), "crush" );
	deepEqual( Stem("crushest"), "crushest" );
	deepEqual( Stem("crushing"), "crush" );
	deepEqual( Stem("crust"), "crust" );
	deepEqual( Stem("crusts"), "crust" );
	deepEqual( Stem("crusty"), "crusti" );
	deepEqual( Stem("crutch"), "crutch" );
	deepEqual( Stem("crutched"), "crutch" );
	deepEqual( Stem("crutches"), "crutch" );
	deepEqual( Stem("cry"), "cry" );
	deepEqual( Stem("crying"), "cry" );
	deepEqual( Stem("crypt"), "crypt" );
	deepEqual( Stem("crystal"), "crystal" );
	deepEqual( Stem("crystalline"), "crystallin" );
	deepEqual( Stem("crystals"), "crystal" );
	deepEqual( Stem("cub"), "cub" );
	deepEqual( Stem("cubbert"), "cubbert" );
	deepEqual( Stem("cubiculo"), "cubiculo" );
	deepEqual( Stem("cubit"), "cubit" );
	deepEqual( Stem("cubs"), "cub" );
	deepEqual( Stem("cuckold"), "cuckold" );
	deepEqual( Stem("cuckoldly"), "cuckoldli" );
	deepEqual( Stem("cuckolds"), "cuckold" );
	deepEqual( Stem("cuckoo"), "cuckoo" );
	deepEqual( Stem("cucullus"), "cucullu" );
	deepEqual( Stem("cuddle"), "cuddl" );
	deepEqual( Stem("cuddled"), "cuddl" );
	deepEqual( Stem("cuddling"), "cuddl" );
	deepEqual( Stem("cuddy"), "cuddi" );
	deepEqual( Stem("cudgel"), "cudgel" );
	deepEqual( Stem("cudgeled"), "cudgel" );
	deepEqual( Stem("cudgell"), "cudgel" );
	deepEqual( Stem("cudgelling"), "cudgel" );
	deepEqual( Stem("cudgels"), "cudgel" );
	deepEqual( Stem("cue"), "cue" );
	deepEqual( Stem("cues"), "cue" );
	deepEqual( Stem("cuff"), "cuff" );
	deepEqual( Stem("cuffs"), "cuff" );
	deepEqual( Stem("cuique"), "cuiqu" );
	deepEqual( Stem("cuirasses"), "cuirass" );
	deepEqual( Stem("cull"), "cull" );
	deepEqual( Stem("culling"), "cull" );
	deepEqual( Stem("cullion"), "cullion" );
	deepEqual( Stem("cullionly"), "cullionli" );
	deepEqual( Stem("cullions"), "cullion" );
	deepEqual( Stem("culmination"), "culmin" );
	deepEqual( Stem("culotte"), "culott" );
	deepEqual( Stem("culpable"), "culpabl" );
	deepEqual( Stem("culprit"), "culprit" );
	deepEqual( Stem("cultivate"), "cultiv" );
	deepEqual( Stem("cultivated"), "cultiv" );
	deepEqual( Stem("cultivating"), "cultiv" );
	deepEqual( Stem("culverin"), "culverin" );
	deepEqual( Stem("cum"), "cum" );
	deepEqual( Stem("cumber"), "cumber" );
	deepEqual( Stem("cumberland"), "cumberland" );
	deepEqual( Stem("cumbrous"), "cumbrou" );
	deepEqual( Stem("cunning"), "cun" );
	deepEqual( Stem("cunningly"), "cunningli" );
	deepEqual( Stem("cunnings"), "cun" );
	deepEqual( Stem("cuore"), "cuor" );
	deepEqual( Stem("cup"), "cup" );
	deepEqual( Stem("cupbearer"), "cupbear" );
	deepEqual( Stem("cupboard"), "cupboard" );
	deepEqual( Stem("cupboarding"), "cupboard" );
	deepEqual( Stem("cupboards"), "cupboard" );
	deepEqual( Stem("cupid"), "cupid" );
	deepEqual( Stem("cupids"), "cupid" );
	deepEqual( Stem("cupola"), "cupola" );
	deepEqual( Stem("cupped"), "cup" );
	deepEqual( Stem("cuppele"), "cuppel" );
	deepEqual( Stem("cuppers"), "cupper" );
	deepEqual( Stem("cups"), "cup" );
	deepEqual( Stem("cur"), "cur" );
	deepEqual( Stem("curacao"), "curacao" );
	deepEqual( Stem("curan"), "curan" );
	deepEqual( Stem("curas"), "cura" );
	deepEqual( Stem("curate"), "curat" );
	deepEqual( Stem("curates"), "curat" );
	deepEqual( Stem("curb"), "curb" );
	deepEqual( Stem("curbed"), "curb" );
	deepEqual( Stem("curbing"), "curb" );
	deepEqual( Stem("curbs"), "curb" );
	deepEqual( Stem("curd"), "curd" );
	deepEqual( Stem("curdied"), "curdi" );
	deepEqual( Stem("curds"), "curd" );
	deepEqual( Stem("cure"), "cure" );
	deepEqual( Stem("cured"), "cure" );
	deepEqual( Stem("cureless"), "cureless" );
	deepEqual( Stem("curer"), "curer" );
	deepEqual( Stem("cures"), "cure" );
	deepEqual( Stem("curfew"), "curfew" );
	deepEqual( Stem("curing"), "cure" );
	deepEqual( Stem("curio"), "curio" );
	deepEqual( Stem("curiosity"), "curios" );
	deepEqual( Stem("curious"), "curiou" );
	deepEqual( Stem("curiously"), "curious" );
	deepEqual( Stem("curl"), "curl" );
	deepEqual( Stem("curled"), "curl" );
	deepEqual( Stem("curling"), "curl" );
	deepEqual( Stem("curls"), "curl" );
	deepEqual( Stem("curly"), "curli" );
	deepEqual( Stem("curragh"), "curragh" );
	deepEqual( Stem("currance"), "curranc" );
	deepEqual( Stem("currant"), "currant" );
	deepEqual( Stem("currants"), "currant" );
	deepEqual( Stem("current"), "current" );
	deepEqual( Stem("currently"), "current" );
	deepEqual( Stem("currents"), "current" );
	deepEqual( Stem("curricle"), "curricl" );
	deepEqual( Stem("curriculum"), "curriculum" );
	deepEqual( Stem("curries"), "curri" );
	deepEqual( Stem("currish"), "currish" );
	deepEqual( Stem("curry"), "curri" );
	deepEqual( Stem("curs"), "cur" );
	deepEqual( Stem("curse"), "curs" );
	deepEqual( Stem("cursed"), "curs" );
	deepEqual( Stem("curses"), "curs" );
	deepEqual( Stem("cursies"), "cursi" );
	deepEqual( Stem("cursing"), "curs" );
	deepEqual( Stem("cursitor"), "cursitor" );
	deepEqual( Stem("cursorary"), "cursorari" );
	deepEqual( Stem("cursorily"), "cursorili" );
	deepEqual( Stem("curst"), "curst" );
	deepEqual( Stem("curster"), "curster" );
	deepEqual( Stem("curstest"), "curstest" );
	deepEqual( Stem("curstness"), "curst" );
	deepEqual( Stem("cursy"), "cursi" );
	deepEqual( Stem("curt"), "curt" );
	deepEqual( Stem("curtail"), "curtail" );
	deepEqual( Stem("curtailed"), "curtail" );
	deepEqual( Stem("curtain"), "curtain" );
	deepEqual( Stem("curtains"), "curtain" );
	deepEqual( Stem("curtal"), "curtal" );
	deepEqual( Stem("curtis"), "curti" );
	deepEqual( Stem("curtle"), "curtl" );
	deepEqual( Stem("curtsey"), "curtsei" );
	deepEqual( Stem("curtseying"), "curtsei" );
	deepEqual( Stem("curtseys"), "curtsei" );
	deepEqual( Stem("curtsied"), "curtsi" );
	deepEqual( Stem("curtsies"), "curtsi" );
	deepEqual( Stem("curtsy"), "curtsi" );
	deepEqual( Stem("curvet"), "curvet" );
	deepEqual( Stem("curvets"), "curvet" );
	deepEqual( Stem("curvetted"), "curvet" );
	deepEqual( Stem("curzon"), "curzon" );
	deepEqual( Stem("cushes"), "cush" );
	deepEqual( Stem("cushion"), "cushion" );
	deepEqual( Stem("cushions"), "cushion" );
	deepEqual( Stem("custalorum"), "custalorum" );
	deepEqual( Stem("custard"), "custard" );
	deepEqual( Stem("custody"), "custodi" );
	deepEqual( Stem("custom"), "custom" );
	deepEqual( Stem("customary"), "customari" );
	deepEqual( Stem("customed"), "custom" );
	deepEqual( Stem("customer"), "custom" );
	deepEqual( Stem("customers"), "custom" );
	deepEqual( Stem("customs"), "custom" );
	deepEqual( Stem("custure"), "custur" );
	deepEqual( Stem("cut"), "cut" );
	deepEqual( Stem("cutcherry"), "cutcherri" );
	deepEqual( Stem("cutler"), "cutler" );
	deepEqual( Stem("cutlery"), "cutleri" );
	deepEqual( Stem("cutlets"), "cutlet" );
	deepEqual( Stem("cutpurse"), "cutpurs" );
	deepEqual( Stem("cutpurses"), "cutpurs" );
	deepEqual( Stem("cuts"), "cut" );
	deepEqual( Stem("cutsum"), "cutsum" );
	deepEqual( Stem("cutter"), "cutter" );
	deepEqual( Stem("cutting"), "cut" );
	deepEqual( Stem("cuttle"), "cuttl" );
	deepEqual( Stem("cutts"), "cutt" );
	deepEqual( Stem("cxsar"), "cxsar" );
	deepEqual( Stem("cyclops"), "cyclop" );
	deepEqual( Stem("cydnus"), "cydnu" );
	deepEqual( Stem("cygnet"), "cygnet" );
	deepEqual( Stem("cygnets"), "cygnet" );
	deepEqual( Stem("cym"), "cym" );
	deepEqual( Stem("cymbal"), "cymbal" );
	deepEqual( Stem("cymbals"), "cymbal" );
	deepEqual( Stem("cymbeline"), "cymbelin" );
	deepEqual( Stem("cyme"), "cyme" );
	deepEqual( Stem("cynic"), "cynic" );
	deepEqual( Stem("cynical"), "cynic" );
	deepEqual( Stem("cynthia"), "cynthia" );
	deepEqual( Stem("cypress"), "cypress" );
	deepEqual( Stem("cypriot"), "cypriot" );
	deepEqual( Stem("cyprus"), "cypru" );
	deepEqual( Stem("cyrus"), "cyru" );
	deepEqual( Stem("cytherea"), "cytherea" );
	deepEqual( Stem("d"), "d" );
	deepEqual( Stem("dabbled"), "dabbl" );
	deepEqual( Stem("dabbling"), "dabbl" );
	deepEqual( Stem("dace"), "dace" );
	deepEqual( Stem("dad"), "dad" );
	deepEqual( Stem("daedalus"), "daedalu" );
	deepEqual( Stem("daemon"), "daemon" );
	deepEqual( Stem("daff"), "daff" );
	deepEqual( Stem("daffed"), "daf" );
	deepEqual( Stem("daffest"), "daffest" );
	deepEqual( Stem("daffodils"), "daffodil" );
	deepEqual( Stem("daffy"), "daffi" );
	deepEqual( Stem("dagger"), "dagger" );
	deepEqual( Stem("daggers"), "dagger" );
	deepEqual( Stem("dagonet"), "dagonet" );
	deepEqual( Stem("daguilet"), "daguilet" );
	deepEqual( Stem("dahlia"), "dahlia" );
	deepEqual( Stem("daily"), "daili" );
	deepEqual( Stem("daintier"), "daintier" );
	deepEqual( Stem("dainties"), "dainti" );
	deepEqual( Stem("daintiest"), "daintiest" );
	deepEqual( Stem("daintily"), "daintili" );
	deepEqual( Stem("daintiness"), "dainti" );
	deepEqual( Stem("daintry"), "daintri" );
	deepEqual( Stem("dainty"), "dainti" );
	deepEqual( Stem("daisied"), "daisi" );
	deepEqual( Stem("daisies"), "daisi" );
	deepEqual( Stem("daisy"), "daisi" );
	deepEqual( Stem("dakruoen"), "dakruoen" );
	deepEqual( Stem("dale"), "dale" );
	deepEqual( Stem("dalliance"), "dallianc" );
	deepEqual( Stem("dallied"), "dalli" );
	deepEqual( Stem("dallies"), "dalli" );
	deepEqual( Stem("dally"), "dalli" );
	deepEqual( Stem("dallying"), "dalli" );
	deepEqual( Stem("dalmatia"), "dalmatia" );
	deepEqual( Stem("dalmatians"), "dalmatian" );
	deepEqual( Stem("dam"), "dam" );
	deepEqual( Stem("damage"), "damag" );
	deepEqual( Stem("damaged"), "damag" );
	deepEqual( Stem("damascus"), "damascu" );
	deepEqual( Stem("damask"), "damask" );
	deepEqual( Stem("damasked"), "damask" );
	deepEqual( Stem("dame"), "dame" );
	deepEqual( Stem("dames"), "dame" );
	deepEqual( Stem("damm"), "damm" );
	deepEqual( Stem("damme"), "damm" );
	deepEqual( Stem("dammy"), "dammi" );
	deepEqual( Stem("damn"), "damn" );
	deepEqual( Stem("damnable"), "damnabl" );
	deepEqual( Stem("damnably"), "damnabl" );
	deepEqual( Stem("damnation"), "damnat" );
	deepEqual( Stem("damned"), "damn" );
	deepEqual( Stem("damns"), "damn" );
	deepEqual( Stem("damocles"), "damocl" );
	deepEqual( Stem("damoiselle"), "damoisel" );
	deepEqual( Stem("damon"), "damon" );
	deepEqual( Stem("damosella"), "damosella" );
	deepEqual( Stem("damp"), "damp" );
	deepEqual( Stem("damped"), "damp" );
	deepEqual( Stem("dampness"), "damp" );
	deepEqual( Stem("dams"), "dam" );
	deepEqual( Stem("damsel"), "damsel" );
	deepEqual( Stem("damsons"), "damson" );
	deepEqual( Stem("dan"), "dan" );
	deepEqual( Stem("danc"), "danc" );
	deepEqual( Stem("dance"), "danc" );
	deepEqual( Stem("danced"), "danc" );
	deepEqual( Stem("dancer"), "dancer" );
	deepEqual( Stem("dancers"), "dancer" );
	deepEqual( Stem("dances"), "danc" );
	deepEqual( Stem("dancing"), "danc" );
	deepEqual( Stem("dandies"), "dandi" );
	deepEqual( Stem("dandified"), "dandifi" );
	deepEqual( Stem("dandle"), "dandl" );
	deepEqual( Stem("dandling"), "dandl" );
	deepEqual( Stem("dandy"), "dandi" );
	deepEqual( Stem("dandyfied"), "dandyfi" );
	deepEqual( Stem("dane"), "dane" );
	deepEqual( Stem("dang"), "dang" );
	deepEqual( Stem("danger"), "danger" );
	deepEqual( Stem("dangerous"), "danger" );
	deepEqual( Stem("dangerously"), "danger" );
	deepEqual( Stem("dangers"), "danger" );
	deepEqual( Stem("dangled"), "dangl" );
	deepEqual( Stem("dangling"), "dangl" );
	deepEqual( Stem("daniel"), "daniel" );
	deepEqual( Stem("danish"), "danish" );
	deepEqual( Stem("dank"), "dank" );
	deepEqual( Stem("dankish"), "dankish" );
	deepEqual( Stem("dans"), "dan" );
	deepEqual( Stem("danskers"), "dansker" );
	deepEqual( Stem("danube"), "danub" );
	deepEqual( Stem("danubian"), "danubian" );
	deepEqual( Stem("daphne"), "daphn" );
	deepEqual( Stem("dappled"), "dappl" );
	deepEqual( Stem("dapples"), "dappl" );
	deepEqual( Stem("dar"), "dar" );
	deepEqual( Stem("darbyite"), "darbyit" );
	deepEqual( Stem("dardan"), "dardan" );
	deepEqual( Stem("dardanian"), "dardanian" );
	deepEqual( Stem("dardanius"), "dardaniu" );
	deepEqual( Stem("dare"), "dare" );
	deepEqual( Stem("dared"), "dare" );
	deepEqual( Stem("daredn"), "daredn" );
	deepEqual( Stem("dareful"), "dare" );
	deepEqual( Stem("daren"), "daren" );
	deepEqual( Stem("dares"), "dare" );
	deepEqual( Stem("daresay"), "daresai" );
	deepEqual( Stem("darest"), "darest" );
	deepEqual( Stem("daring"), "dare" );
	deepEqual( Stem("darius"), "dariu" );
	deepEqual( Stem("dark"), "dark" );
	deepEqual( Stem("darken"), "darken" );
	deepEqual( Stem("darkened"), "darken" );
	deepEqual( Stem("darkening"), "darken" );
	deepEqual( Stem("darkens"), "darken" );
	deepEqual( Stem("darker"), "darker" );
	deepEqual( Stem("darkest"), "darkest" );
	deepEqual( Stem("darkling"), "darkl" );
	deepEqual( Stem("darkly"), "darkli" );
	deepEqual( Stem("darkness"), "dark" );
	deepEqual( Stem("darksome"), "darksom" );
	deepEqual( Stem("darling"), "darl" );
	deepEqual( Stem("darlings"), "darl" );
	deepEqual( Stem("darned"), "darn" );
	deepEqual( Stem("darnel"), "darnel" );
	deepEqual( Stem("darraign"), "darraign" );
	deepEqual( Stem("dart"), "dart" );
	deepEqual( Stem("darted"), "dart" );
	deepEqual( Stem("darter"), "darter" );
	deepEqual( Stem("dartford"), "dartford" );
	deepEqual( Stem("darting"), "dart" );
	deepEqual( Stem("darton"), "darton" );
	deepEqual( Stem("darts"), "dart" );
	deepEqual( Stem("dash"), "dash" );
	deepEqual( Stem("dashed"), "dash" );
	deepEqual( Stem("dashes"), "dash" );
	deepEqual( Stem("dashing"), "dash" );
	deepEqual( Stem("dastard"), "dastard" );
	deepEqual( Stem("dastardly"), "dastardli" );
	deepEqual( Stem("dastards"), "dastard" );
	deepEqual( Stem("dat"), "dat" );
	deepEqual( Stem("datchet"), "datchet" );
	deepEqual( Stem("date"), "date" );
	deepEqual( Stem("dated"), "date" );
	deepEqual( Stem("dateless"), "dateless" );
	deepEqual( Stem("dates"), "date" );
	deepEqual( Stem("daub"), "daub" );
	deepEqual( Stem("daughter"), "daughter" );
	deepEqual( Stem("daughters"), "daughter" );
	deepEqual( Stem("daunt"), "daunt" );
	deepEqual( Stem("daunted"), "daunt" );
	deepEqual( Stem("dauntless"), "dauntless" );
	deepEqual( Stem("dauphin"), "dauphin" );
	deepEqual( Stem("dauphiness"), "dauphi" );
	deepEqual( Stem("daventry"), "daventri" );
	deepEqual( Stem("david"), "david" );
	deepEqual( Stem("davids"), "david" );
	deepEqual( Stem("davy"), "davi" );
	deepEqual( Stem("daw"), "daw" );
	deepEqual( Stem("dawdle"), "dawdl" );
	deepEqual( Stem("dawdling"), "dawdl" );
	deepEqual( Stem("dawg"), "dawg" );
	deepEqual( Stem("dawgs"), "dawg" );
	deepEqual( Stem("dawn"), "dawn" );
	deepEqual( Stem("dawned"), "dawn" );
	deepEqual( Stem("dawning"), "dawn" );
	deepEqual( Stem("daws"), "daw" );
	deepEqual( Stem("dawson"), "dawson" );
	deepEqual( Stem("day"), "dai" );
	deepEqual( Stem("daybreak"), "daybreak" );
	deepEqual( Stem("daylight"), "daylight" );
	deepEqual( Stem("days"), "dai" );
	deepEqual( Stem("dazzle"), "dazzl" );
	deepEqual( Stem("dazzled"), "dazzl" );
	deepEqual( Stem("dazzling"), "dazzl" );
	deepEqual( Stem("de"), "de" );
	deepEqual( Stem("dead"), "dead" );
	deepEqual( Stem("deadened"), "deaden" );
	deepEqual( Stem("deadliest"), "deadliest" );
	deepEqual( Stem("deadly"), "deadli" );
	deepEqual( Stem("deaf"), "deaf" );
	deepEqual( Stem("deafing"), "deaf" );
	deepEqual( Stem("deafness"), "deaf" );
	deepEqual( Stem("deafs"), "deaf" );
	deepEqual( Stem("deal"), "deal" );
	deepEqual( Stem("dealer"), "dealer" );
	deepEqual( Stem("dealers"), "dealer" );
	deepEqual( Stem("dealest"), "dealest" );
	deepEqual( Stem("dealing"), "deal" );
	deepEqual( Stem("dealings"), "deal" );
	deepEqual( Stem("deals"), "deal" );
	deepEqual( Stem("dealt"), "dealt" );
	deepEqual( Stem("dean"), "dean" );
	deepEqual( Stem("deanery"), "deaneri" );
	deepEqual( Stem("deans"), "dean" );
	deepEqual( Stem("dear"), "dear" );
	deepEqual( Stem("deared"), "dear" );
	deepEqual( Stem("dearer"), "dearer" );
	deepEqual( Stem("dearest"), "dearest" );
	deepEqual( Stem("dearly"), "dearli" );
	deepEqual( Stem("dearness"), "dear" );
	deepEqual( Stem("dears"), "dear" );
	deepEqual( Stem("dearth"), "dearth" );
	deepEqual( Stem("dearths"), "dearth" );
	deepEqual( Stem("death"), "death" );
	deepEqual( Stem("deathbed"), "deathb" );
	deepEqual( Stem("deathful"), "death" );
	deepEqual( Stem("deaths"), "death" );
	deepEqual( Stem("deathsman"), "deathsman" );
	deepEqual( Stem("deathsmen"), "deathsmen" );
	deepEqual( Stem("debacle"), "debacl" );
	deepEqual( Stem("debarred"), "debar" );
	deepEqual( Stem("debase"), "debas" );
	deepEqual( Stem("debasement"), "debas" );
	deepEqual( Stem("debate"), "debat" );
	deepEqual( Stem("debated"), "debat" );
	deepEqual( Stem("debatement"), "debat" );
	deepEqual( Stem("debates"), "debat" );
	deepEqual( Stem("debateth"), "debateth" );
	deepEqual( Stem("debating"), "debat" );
	deepEqual( Stem("debauch"), "debauch" );
	deepEqual( Stem("debauched"), "debauch" );
	deepEqual( Stem("debile"), "debil" );
	deepEqual( Stem("debility"), "debil" );
	deepEqual( Stem("debitor"), "debitor" );
	deepEqual( Stem("debonair"), "debonair" );
	deepEqual( Stem("deborah"), "deborah" );
	deepEqual( Stem("debosh"), "debosh" );
	deepEqual( Stem("debrett"), "debrett" );
	deepEqual( Stem("debt"), "debt" );
	deepEqual( Stem("debted"), "debt" );
	deepEqual( Stem("debtor"), "debtor" );
	deepEqual( Stem("debtors"), "debtor" );
	deepEqual( Stem("debts"), "debt" );
	deepEqual( Stem("debut"), "debut" );
	deepEqual( Stem("debutante"), "debutant" );
	deepEqual( Stem("debuty"), "debuti" );
	deepEqual( Stem("dec"), "dec" );
	deepEqual( Stem("decamp"), "decamp" );
	deepEqual( Stem("decamped"), "decamp" );
	deepEqual( Stem("decanter"), "decant" );
	deepEqual( Stem("decanters"), "decant" );
	deepEqual( Stem("decay"), "decai" );
	deepEqual( Stem("decayed"), "decai" );
	deepEqual( Stem("decayer"), "decay" );
	deepEqual( Stem("decaying"), "decai" );
	deepEqual( Stem("decays"), "decai" );
	deepEqual( Stem("deceas"), "decea" );
	deepEqual( Stem("decease"), "deceas" );
	deepEqual( Stem("deceased"), "deceas" );
	deepEqual( Stem("deceit"), "deceit" );
	deepEqual( Stem("deceitful"), "deceit" );
	deepEqual( Stem("deceits"), "deceit" );
	deepEqual( Stem("deceiv"), "deceiv" );
	deepEqual( Stem("deceivable"), "deceiv" );
	deepEqual( Stem("deceive"), "deceiv" );
	deepEqual( Stem("deceived"), "deceiv" );
	deepEqual( Stem("deceiver"), "deceiv" );
	deepEqual( Stem("deceivers"), "deceiv" );
	deepEqual( Stem("deceives"), "deceiv" );
	deepEqual( Stem("deceivest"), "deceivest" );
	deepEqual( Stem("deceiveth"), "deceiveth" );
	deepEqual( Stem("deceiving"), "deceiv" );
	deepEqual( Stem("december"), "decemb" );
	deepEqual( Stem("decency"), "decenc" );
	deepEqual( Stem("decent"), "decent" );
	deepEqual( Stem("decently"), "decent" );
	deepEqual( Stem("deception"), "decept" );
	deepEqual( Stem("deceptious"), "decepti" );
	deepEqual( Stem("decerns"), "decern" );
	deepEqual( Stem("decide"), "decid" );
	deepEqual( Stem("decided"), "decid" );
	deepEqual( Stem("decidedly"), "decidedli" );
	deepEqual( Stem("decides"), "decid" );
	deepEqual( Stem("decimation"), "decim" );
	deepEqual( Stem("decipher"), "deciph" );
	deepEqual( Stem("deciphers"), "deciph" );
	deepEqual( Stem("decision"), "decis" );
	deepEqual( Stem("decisive"), "decis" );
	deepEqual( Stem("decius"), "deciu" );
	deepEqual( Stem("deck"), "deck" );
	deepEqual( Stem("decking"), "deck" );
	deepEqual( Stem("decks"), "deck" );
	deepEqual( Stem("deckt"), "deckt" );
	deepEqual( Stem("declaration"), "declar" );
	deepEqual( Stem("declarations"), "declar" );
	deepEqual( Stem("declare"), "declar" );
	deepEqual( Stem("declared"), "declar" );
	deepEqual( Stem("declares"), "declar" );
	deepEqual( Stem("declaring"), "declar" );
	deepEqual( Stem("declension"), "declens" );
	deepEqual( Stem("declensions"), "declens" );
	deepEqual( Stem("declin"), "declin" );
	deepEqual( Stem("decline"), "declin" );
	deepEqual( Stem("declined"), "declin" );
	deepEqual( Stem("declines"), "declin" );
	deepEqual( Stem("declining"), "declin" );
	deepEqual( Stem("declivity"), "decliv" );
	deepEqual( Stem("decoct"), "decoct" );
	deepEqual( Stem("decolletee"), "decollete" );
	deepEqual( Stem("decorated"), "decor" );
	deepEqual( Stem("decorating"), "decor" );
	deepEqual( Stem("decorations"), "decor" );
	deepEqual( Stem("decorous"), "decor" );
	deepEqual( Stem("decorum"), "decorum" );
	deepEqual( Stem("decreas"), "decrea" );
	deepEqual( Stem("decrease"), "decreas" );
	deepEqual( Stem("decreasing"), "decreas" );
	deepEqual( Stem("decree"), "decre" );
	deepEqual( Stem("decreed"), "decre" );
	deepEqual( Stem("decrees"), "decre" );
	deepEqual( Stem("decrepit"), "decrepit" );
	deepEqual( Stem("dedicate"), "dedic" );
	deepEqual( Stem("dedicated"), "dedic" );
	deepEqual( Stem("dedicates"), "dedic" );
	deepEqual( Stem("dedication"), "dedic" );
	deepEqual( Stem("dee"), "dee" );
	deepEqual( Stem("deed"), "deed" );
	deepEqual( Stem("deedless"), "deedless" );
	deepEqual( Stem("deeds"), "deed" );
	deepEqual( Stem("deem"), "deem" );
	deepEqual( Stem("deemed"), "deem" );
	deepEqual( Stem("deep"), "deep" );
	deepEqual( Stem("deepened"), "deepen" );
	deepEqual( Stem("deepening"), "deepen" );
	deepEqual( Stem("deeper"), "deeper" );
	deepEqual( Stem("deepest"), "deepest" );
	deepEqual( Stem("deeply"), "deepli" );
	deepEqual( Stem("deeps"), "deep" );
	deepEqual( Stem("deepvow"), "deepvow" );
	deepEqual( Stem("deer"), "deer" );
	deepEqual( Stem("deesse"), "deess" );
	deepEqual( Stem("defac"), "defac" );
	deepEqual( Stem("deface"), "defac" );
	deepEqual( Stem("defaced"), "defac" );
	deepEqual( Stem("defacer"), "defac" );
	deepEqual( Stem("defacers"), "defac" );
	deepEqual( Stem("defacing"), "defac" );
	deepEqual( Stem("defam"), "defam" );
	deepEqual( Stem("default"), "default" );
	deepEqual( Stem("defaulter"), "default" );
	deepEqual( Stem("defeat"), "defeat" );
	deepEqual( Stem("defeated"), "defeat" );
	deepEqual( Stem("defeats"), "defeat" );
	deepEqual( Stem("defeatures"), "defeatur" );
	deepEqual( Stem("defect"), "defect" );
	deepEqual( Stem("defective"), "defect" );
	deepEqual( Stem("defects"), "defect" );
	deepEqual( Stem("defence"), "defenc" );
	deepEqual( Stem("defences"), "defenc" );
	deepEqual( Stem("defend"), "defend" );
	deepEqual( Stem("defendant"), "defend" );
	deepEqual( Stem("defended"), "defend" );
	deepEqual( Stem("defender"), "defend" );
	deepEqual( Stem("defenders"), "defend" );
	deepEqual( Stem("defending"), "defend" );
	deepEqual( Stem("defends"), "defend" );
	deepEqual( Stem("defense"), "defens" );
	deepEqual( Stem("defensible"), "defens" );
	deepEqual( Stem("defensive"), "defens" );
	deepEqual( Stem("defer"), "defer" );
	deepEqual( Stem("deference"), "defer" );
	deepEqual( Stem("deferential"), "deferenti" );
	deepEqual( Stem("deferentially"), "deferenti" );
	deepEqual( Stem("deferr"), "deferr" );
	deepEqual( Stem("defiance"), "defianc" );
	deepEqual( Stem("deficiency"), "defici" );
	deepEqual( Stem("deficient"), "defici" );
	deepEqual( Stem("defied"), "defi" );
	deepEqual( Stem("defies"), "defi" );
	deepEqual( Stem("defil"), "defil" );
	deepEqual( Stem("defile"), "defil" );
	deepEqual( Stem("defiler"), "defil" );
	deepEqual( Stem("defiles"), "defil" );
	deepEqual( Stem("defiling"), "defil" );
	deepEqual( Stem("define"), "defin" );
	deepEqual( Stem("definement"), "defin" );
	deepEqual( Stem("definite"), "definit" );
	deepEqual( Stem("definitive"), "definit" );
	deepEqual( Stem("definitively"), "definit" );
	deepEqual( Stem("deflow"), "deflow" );
	deepEqual( Stem("deflower"), "deflow" );
	deepEqual( Stem("deflowered"), "deflow" );
	deepEqual( Stem("deform"), "deform" );
	deepEqual( Stem("deformed"), "deform" );
	deepEqual( Stem("deformities"), "deform" );
	deepEqual( Stem("deformity"), "deform" );
	deepEqual( Stem("defray"), "defrai" );
	deepEqual( Stem("defrayed"), "defrai" );
	deepEqual( Stem("defrays"), "defrai" );
	deepEqual( Stem("deftly"), "deftli" );
	deepEqual( Stem("defunct"), "defunct" );
	deepEqual( Stem("defunction"), "defunct" );
	deepEqual( Stem("defuse"), "defus" );
	deepEqual( Stem("defy"), "defi" );
	deepEqual( Stem("defying"), "defi" );
	deepEqual( Stem("degenerate"), "degener" );
	deepEqual( Stem("degradation"), "degrad" );
	deepEqual( Stem("degrade"), "degrad" );
	deepEqual( Stem("degraded"), "degrad" );
	deepEqual( Stem("degrading"), "degrad" );
	deepEqual( Stem("degree"), "degre" );
	deepEqual( Stem("degrees"), "degre" );
	deepEqual( Stem("dehors"), "dehor" );
	deepEqual( Stem("deified"), "deifi" );
	deepEqual( Stem("deifying"), "deifi" );
	deepEqual( Stem("deign"), "deign" );
	deepEqual( Stem("deigned"), "deign" );
	deepEqual( Stem("deiphobus"), "deiphobu" );
	deepEqual( Stem("deities"), "deiti" );
	deepEqual( Stem("deity"), "deiti" );
	deepEqual( Stem("deja"), "deja" );
	deepEqual( Stem("deject"), "deject" );
	deepEqual( Stem("dejected"), "deject" );
	deepEqual( Stem("dejeuner"), "dejeun" );
	deepEqual( Stem("dejeuners"), "dejeun" );
	deepEqual( Stem("delabreth"), "delabreth" );
	deepEqual( Stem("delamere"), "delamer" );
	deepEqual( Stem("delay"), "delai" );
	deepEqual( Stem("delayed"), "delai" );
	deepEqual( Stem("delaying"), "delai" );
	deepEqual( Stem("delays"), "delai" );
	deepEqual( Stem("delectable"), "delect" );
	deepEqual( Stem("delectation"), "delect" );
	deepEqual( Stem("deleterious"), "deleteri" );
	deepEqual( Stem("deliberate"), "deliber" );
	deepEqual( Stem("delicacies"), "delicaci" );
	deepEqual( Stem("delicacy"), "delicaci" );
	deepEqual( Stem("delicate"), "delic" );
	deepEqual( Stem("delicately"), "delic" );
	deepEqual( Stem("delicates"), "delic" );
	deepEqual( Stem("delicious"), "delici" );
	deepEqual( Stem("deliciousness"), "delici" );
	deepEqual( Stem("delight"), "delight" );
	deepEqual( Stem("delighted"), "delight" );
	deepEqual( Stem("delightful"), "delight" );
	deepEqual( Stem("delightfully"), "delightfulli" );
	deepEqual( Stem("delighting"), "delight" );
	deepEqual( Stem("delights"), "delight" );
	deepEqual( Stem("delilah"), "delilah" );
	deepEqual( Stem("delinquents"), "delinqu" );
	deepEqual( Stem("delirious"), "deliri" );
	deepEqual( Stem("delirium"), "delirium" );
	deepEqual( Stem("deliv"), "deliv" );
	deepEqual( Stem("deliver"), "deliv" );
	deepEqual( Stem("deliverance"), "deliver" );
	deepEqual( Stem("delivered"), "deliv" );
	deepEqual( Stem("delivering"), "deliv" );
	deepEqual( Stem("delivers"), "deliv" );
	deepEqual( Stem("delivery"), "deliveri" );
	deepEqual( Stem("della"), "della" );
	deepEqual( Stem("deloighted"), "deloight" );
	deepEqual( Stem("delphos"), "delpho" );
	deepEqual( Stem("deluded"), "delud" );
	deepEqual( Stem("deluding"), "delud" );
	deepEqual( Stem("deluge"), "delug" );
	deepEqual( Stem("deluged"), "delug" );
	deepEqual( Stem("delusion"), "delus" );
	deepEqual( Stem("delve"), "delv" );
	deepEqual( Stem("delver"), "delver" );
	deepEqual( Stem("delves"), "delv" );
	deepEqual( Stem("dem"), "dem" );
	deepEqual( Stem("demagogue"), "demagogu" );
	deepEqual( Stem("demand"), "demand" );
	deepEqual( Stem("demanded"), "demand" );
	deepEqual( Stem("demanding"), "demand" );
	deepEqual( Stem("demands"), "demand" );
	deepEqual( Stem("demean"), "demean" );
	deepEqual( Stem("demeaned"), "demean" );
	deepEqual( Stem("demeanor"), "demeanor" );
	deepEqual( Stem("demeanour"), "demeanour" );
	deepEqual( Stem("demerara"), "demerara" );
	deepEqual( Stem("demerits"), "demerit" );
	deepEqual( Stem("demesnes"), "demesn" );
	deepEqual( Stem("demetrius"), "demetriu" );
	deepEqual( Stem("demi"), "demi" );
	deepEqual( Stem("demigod"), "demigod" );
	deepEqual( Stem("demireps"), "demirep" );
	deepEqual( Stem("demise"), "demis" );
	deepEqual( Stem("demmy"), "demmi" );
	deepEqual( Stem("demoiselles"), "demoisel" );
	deepEqual( Stem("demon"), "demon" );
	deepEqual( Stem("demoniacal"), "demoniac" );
	deepEqual( Stem("demonstrable"), "demonstr" );
	deepEqual( Stem("demonstrate"), "demonstr" );
	deepEqual( Stem("demonstrated"), "demonstr" );
	deepEqual( Stem("demonstrating"), "demonstr" );
	deepEqual( Stem("demonstration"), "demonstr" );
	deepEqual( Stem("demonstrations"), "demonstr" );
	deepEqual( Stem("demonstrative"), "demonstr" );
	deepEqual( Stem("demure"), "demur" );
	deepEqual( Stem("demurely"), "demur" );
	deepEqual( Stem("demuring"), "demur" );
	deepEqual( Stem("den"), "den" );
	deepEqual( Stem("denay"), "denai" );
	deepEqual( Stem("deni"), "deni" );
	deepEqual( Stem("denial"), "denial" );
	deepEqual( Stem("denials"), "denial" );
	deepEqual( Stem("denied"), "deni" );
	deepEqual( Stem("denier"), "denier" );
	deepEqual( Stem("denies"), "deni" );
	deepEqual( Stem("deniest"), "deniest" );
	deepEqual( Stem("denis"), "deni" );
	deepEqual( Stem("denmark"), "denmark" );
	deepEqual( Stem("dennis"), "denni" );
	deepEqual( Stem("denny"), "denni" );
	deepEqual( Stem("denominated"), "denomin" );
	deepEqual( Stem("denote"), "denot" );
	deepEqual( Stem("denoted"), "denot" );
	deepEqual( Stem("denotement"), "denot" );
	deepEqual( Stem("denounc"), "denounc" );
	deepEqual( Stem("denounce"), "denounc" );
	deepEqual( Stem("denouncing"), "denounc" );
	deepEqual( Stem("dens"), "den" );
	deepEqual( Stem("denunciation"), "denunci" );
	deepEqual( Stem("denunciations"), "denunci" );
	deepEqual( Stem("deny"), "deni" );
	deepEqual( Stem("denying"), "deni" );
	deepEqual( Stem("deo"), "deo" );
	deepEqual( Stem("depart"), "depart" );
	deepEqual( Stem("departed"), "depart" );
	deepEqual( Stem("departest"), "departest" );
	deepEqual( Stem("departing"), "depart" );
	deepEqual( Stem("departs"), "depart" );
	deepEqual( Stem("departure"), "departur" );
	deepEqual( Stem("depeche"), "depech" );
	deepEqual( Stem("depend"), "depend" );
	deepEqual( Stem("dependant"), "depend" );
	deepEqual( Stem("dependants"), "depend" );
	deepEqual( Stem("depended"), "depend" );
	deepEqual( Stem("dependence"), "depend" );
	deepEqual( Stem("dependences"), "depend" );
	deepEqual( Stem("dependency"), "depend" );
	deepEqual( Stem("dependent"), "depend" );
	deepEqual( Stem("dependents"), "depend" );
	deepEqual( Stem("depender"), "depend" );
	deepEqual( Stem("depending"), "depend" );
	deepEqual( Stem("depends"), "depend" );
	deepEqual( Stem("depict"), "depict" );
	deepEqual( Stem("depicted"), "depict" );
	deepEqual( Stem("deplorable"), "deplor" );
	deepEqual( Stem("deplore"), "deplor" );
	deepEqual( Stem("deplored"), "deplor" );
	deepEqual( Stem("deploring"), "deplor" );
	deepEqual( Stem("depopulate"), "depopul" );
	deepEqual( Stem("deportment"), "deport" );
	deepEqual( Stem("depos"), "depo" );
	deepEqual( Stem("depose"), "depos" );
	deepEqual( Stem("deposed"), "depos" );
	deepEqual( Stem("deposing"), "depos" );
	deepEqual( Stem("depositaries"), "depositari" );
	deepEqual( Stem("deposited"), "deposit" );
	deepEqual( Stem("depot"), "depot" );
	deepEqual( Stem("depots"), "depot" );
	deepEqual( Stem("deprav"), "deprav" );
	deepEqual( Stem("depravation"), "deprav" );
	deepEqual( Stem("deprave"), "deprav" );
	deepEqual( Stem("depraved"), "deprav" );
	deepEqual( Stem("depraves"), "deprav" );
	deepEqual( Stem("deprecate"), "deprec" );
	deepEqual( Stem("deprecatingly"), "deprecatingli" );
	deepEqual( Stem("deprecatory"), "deprecatori" );
	deepEqual( Stem("depress"), "depress" );
	deepEqual( Stem("depressed"), "depress" );
	deepEqual( Stem("depression"), "depress" );
	deepEqual( Stem("depriv"), "depriv" );
	deepEqual( Stem("deprive"), "depriv" );
	deepEqual( Stem("deprived"), "depriv" );
	deepEqual( Stem("depth"), "depth" );
	deepEqual( Stem("depths"), "depth" );
	deepEqual( Stem("deputation"), "deput" );
	deepEqual( Stem("depute"), "deput" );
	deepEqual( Stem("deputed"), "deput" );
	deepEqual( Stem("deputies"), "deputi" );
	deepEqual( Stem("deputing"), "deput" );
	deepEqual( Stem("deputy"), "deputi" );
	deepEqual( Stem("der"), "der" );
	deepEqual( Stem("deracinate"), "deracin" );
	deepEqual( Stem("derby"), "derbi" );
	deepEqual( Stem("dercetas"), "derceta" );
	deepEqual( Stem("dere"), "dere" );
	deepEqual( Stem("derides"), "derid" );
	deepEqual( Stem("derision"), "deris" );
	deepEqual( Stem("deriv"), "deriv" );
	deepEqual( Stem("derivation"), "deriv" );
	deepEqual( Stem("derivative"), "deriv" );
	deepEqual( Stem("derive"), "deriv" );
	deepEqual( Stem("derived"), "deriv" );
	deepEqual( Stem("derives"), "deriv" );
	deepEqual( Stem("derogate"), "derog" );
	deepEqual( Stem("derogately"), "derog" );
	deepEqual( Stem("derogation"), "derog" );
	deepEqual( Stem("des"), "de" );
	deepEqual( Stem("desartless"), "desartless" );
	deepEqual( Stem("descant"), "descant" );
	deepEqual( Stem("descanted"), "descant" );
	deepEqual( Stem("descanting"), "descant" );
	deepEqual( Stem("descend"), "descend" );
	deepEqual( Stem("descendant"), "descend" );
	deepEqual( Stem("descended"), "descend" );
	deepEqual( Stem("descending"), "descend" );
	deepEqual( Stem("descends"), "descend" );
	deepEqual( Stem("descension"), "descens" );
	deepEqual( Stem("descent"), "descent" );
	deepEqual( Stem("descents"), "descent" );
	deepEqual( Stem("describe"), "describ" );
	deepEqual( Stem("described"), "describ" );
	deepEqual( Stem("describes"), "describ" );
	deepEqual( Stem("describing"), "describ" );
	deepEqual( Stem("descried"), "descri" );
	deepEqual( Stem("description"), "descript" );
	deepEqual( Stem("descriptions"), "descript" );
	deepEqual( Stem("descry"), "descri" );
	deepEqual( Stem("desdemon"), "desdemon" );
	deepEqual( Stem("desdemona"), "desdemona" );
	deepEqual( Stem("desecration"), "desecr" );
	deepEqual( Stem("desert"), "desert" );
	deepEqual( Stem("deserted"), "desert" );
	deepEqual( Stem("desertion"), "desert" );
	deepEqual( Stem("deserts"), "desert" );
	deepEqual( Stem("deserv"), "deserv" );
	deepEqual( Stem("deserve"), "deserv" );
	deepEqual( Stem("deserved"), "deserv" );
	deepEqual( Stem("deservedly"), "deservedli" );
	deepEqual( Stem("deserver"), "deserv" );
	deepEqual( Stem("deservers"), "deserv" );
	deepEqual( Stem("deserves"), "deserv" );
	deepEqual( Stem("deservest"), "deservest" );
	deepEqual( Stem("deserving"), "deserv" );
	deepEqual( Stem("deservings"), "deserv" );
	deepEqual( Stem("desideratum"), "desideratum" );
	deepEqual( Stem("design"), "design" );
	deepEqual( Stem("designing"), "design" );
	deepEqual( Stem("designment"), "design" );
	deepEqual( Stem("designments"), "design" );
	deepEqual( Stem("designs"), "design" );
	deepEqual( Stem("desir"), "desir" );
	deepEqual( Stem("desirable"), "desir" );
	deepEqual( Stem("desire"), "desir" );
	deepEqual( Stem("desired"), "desir" );
	deepEqual( Stem("desirers"), "desir" );
	deepEqual( Stem("desires"), "desir" );
	deepEqual( Stem("desirest"), "desirest" );
	deepEqual( Stem("desiring"), "desir" );
	deepEqual( Stem("desirous"), "desir" );
	deepEqual( Stem("desist"), "desist" );
	deepEqual( Stem("desisted"), "desist" );
	deepEqual( Stem("desk"), "desk" );
	deepEqual( Stem("desks"), "desk" );
	deepEqual( Stem("desolate"), "desol" );
	deepEqual( Stem("desolation"), "desol" );
	deepEqual( Stem("desp"), "desp" );
	deepEqual( Stem("despair"), "despair" );
	deepEqual( Stem("despaired"), "despair" );
	deepEqual( Stem("despairing"), "despair" );
	deepEqual( Stem("despairs"), "despair" );
	deepEqual( Stem("despatch"), "despatch" );
	deepEqual( Stem("despatched"), "despatch" );
	deepEqual( Stem("despatches"), "despatch" );
	deepEqual( Stem("desperate"), "desper" );
	deepEqual( Stem("desperately"), "desper" );
	deepEqual( Stem("desperation"), "desper" );
	deepEqual( Stem("despicable"), "despic" );
	deepEqual( Stem("despis"), "despi" );
	deepEqual( Stem("despise"), "despis" );
	deepEqual( Stem("despised"), "despis" );
	deepEqual( Stem("despiser"), "despis" );
	deepEqual( Stem("despises"), "despis" );
	deepEqual( Stem("despiseth"), "despiseth" );
	deepEqual( Stem("despising"), "despis" );
	deepEqual( Stem("despite"), "despit" );
	deepEqual( Stem("despiteful"), "despit" );
	deepEqual( Stem("despoiled"), "despoil" );
	deepEqual( Stem("despond"), "despond" );
	deepEqual( Stem("despondency"), "despond" );
	deepEqual( Stem("despondent"), "despond" );
	deepEqual( Stem("desponding"), "despond" );
	deepEqual( Stem("despotism"), "despot" );
	deepEqual( Stem("despots"), "despot" );
	deepEqual( Stem("dessert"), "dessert" );
	deepEqual( Stem("dest"), "dest" );
	deepEqual( Stem("destin"), "destin" );
	deepEqual( Stem("destination"), "destin" );
	deepEqual( Stem("destinations"), "destin" );
	deepEqual( Stem("destined"), "destin" );
	deepEqual( Stem("destinies"), "destini" );
	deepEqual( Stem("destiny"), "destini" );
	deepEqual( Stem("destitute"), "destitut" );
	deepEqual( Stem("destroy"), "destroi" );
	deepEqual( Stem("destroyed"), "destroi" );
	deepEqual( Stem("destroyer"), "destroy" );
	deepEqual( Stem("destroyers"), "destroy" );
	deepEqual( Stem("destroying"), "destroi" );
	deepEqual( Stem("destroys"), "destroi" );
	deepEqual( Stem("destruction"), "destruct" );
	deepEqual( Stem("destructions"), "destruct" );
	deepEqual( Stem("det"), "det" );
	deepEqual( Stem("detachment"), "detach" );
	deepEqual( Stem("details"), "detail" );
	deepEqual( Stem("detain"), "detain" );
	deepEqual( Stem("detained"), "detain" );
	deepEqual( Stem("detaining"), "detain" );
	deepEqual( Stem("detains"), "detain" );
	deepEqual( Stem("detect"), "detect" );
	deepEqual( Stem("detected"), "detect" );
	deepEqual( Stem("detecting"), "detect" );
	deepEqual( Stem("detection"), "detect" );
	deepEqual( Stem("detector"), "detector" );
	deepEqual( Stem("detects"), "detect" );
	deepEqual( Stem("detention"), "detent" );
	deepEqual( Stem("deterioration"), "deterior" );
	deepEqual( Stem("determin"), "determin" );
	deepEqual( Stem("determinate"), "determin" );
	deepEqual( Stem("determination"), "determin" );
	deepEqual( Stem("determinations"), "determin" );
	deepEqual( Stem("determine"), "determin" );
	deepEqual( Stem("determined"), "determin" );
	deepEqual( Stem("determines"), "determin" );
	deepEqual( Stem("determining"), "determin" );
	deepEqual( Stem("detest"), "detest" );
	deepEqual( Stem("detestable"), "detest" );
	deepEqual( Stem("detested"), "detest" );
	deepEqual( Stem("detesting"), "detest" );
	deepEqual( Stem("detests"), "detest" );
	deepEqual( Stem("dethroned"), "dethron" );
	deepEqual( Stem("detract"), "detract" );
	deepEqual( Stem("detraction"), "detract" );
	deepEqual( Stem("detractions"), "detract" );
	deepEqual( Stem("detriment"), "detriment" );
	deepEqual( Stem("dettes"), "dett" );
	deepEqual( Stem("deucalion"), "deucalion" );
	deepEqual( Stem("deuce"), "deuc" );
	deepEqual( Stem("deuceace"), "deuceac" );
	deepEqual( Stem("deuced"), "deuc" );
	deepEqual( Stem("deuces"), "deuc" );
	deepEqual( Stem("deum"), "deum" );
	deepEqual( Stem("deux"), "deux" );
	deepEqual( Stem("dev"), "dev" );
	deepEqual( Stem("devant"), "devant" );
	deepEqual( Stem("development"), "develop" );
	deepEqual( Stem("devereux"), "devereux" );
	deepEqual( Stem("devesting"), "devest" );
	deepEqual( Stem("device"), "devic" );
	deepEqual( Stem("devices"), "devic" );
	deepEqual( Stem("devil"), "devil" );
	deepEqual( Stem("devilish"), "devilish" );
	deepEqual( Stem("devilled"), "devil" );
	deepEqual( Stem("devils"), "devil" );
	deepEqual( Stem("devis"), "devi" );
	deepEqual( Stem("devise"), "devis" );
	deepEqual( Stem("devised"), "devis" );
	deepEqual( Stem("devises"), "devis" );
	deepEqual( Stem("devising"), "devis" );
	deepEqual( Stem("devlish"), "devlish" );
	deepEqual( Stem("devoid"), "devoid" );
	deepEqual( Stem("devolved"), "devolv" );
	deepEqual( Stem("devonshire"), "devonshir" );
	deepEqual( Stem("devote"), "devot" );
	deepEqual( Stem("devoted"), "devot" );
	deepEqual( Stem("devotedness"), "devoted" );
	deepEqual( Stem("devotion"), "devot" );
	deepEqual( Stem("devotional"), "devot" );
	deepEqual( Stem("devotions"), "devot" );
	deepEqual( Stem("devour"), "devour" );
	deepEqual( Stem("devoured"), "devour" );
	deepEqual( Stem("devourers"), "devour" );
	deepEqual( Stem("devouring"), "devour" );
	deepEqual( Stem("devours"), "devour" );
	deepEqual( Stem("devout"), "devout" );
	deepEqual( Stem("devoutly"), "devoutli" );
	deepEqual( Stem("devrient"), "devrient" );
	deepEqual( Stem("dew"), "dew" );
	deepEqual( Stem("dewberries"), "dewberri" );
	deepEqual( Stem("dewdrops"), "dewdrop" );
	deepEqual( Stem("dewlap"), "dewlap" );
	deepEqual( Stem("dewlapp"), "dewlapp" );
	deepEqual( Stem("dews"), "dew" );
	deepEqual( Stem("dewy"), "dewi" );
	deepEqual( Stem("dexter"), "dexter" );
	deepEqual( Stem("dexteriously"), "dexteri" );
	deepEqual( Stem("dexterity"), "dexter" );
	deepEqual( Stem("dexterous"), "dexter" );
	deepEqual( Stem("dexterously"), "dexter" );
	deepEqual( Stem("di"), "di" );
	deepEqual( Stem("diable"), "diabl" );
	deepEqual( Stem("diablo"), "diablo" );
	deepEqual( Stem("diabolically"), "diabol" );
	deepEqual( Stem("diadem"), "diadem" );
	deepEqual( Stem("dial"), "dial" );
	deepEqual( Stem("dialect"), "dialect" );
	deepEqual( Stem("dialogue"), "dialogu" );
	deepEqual( Stem("dialogued"), "dialogu" );
	deepEqual( Stem("dialogues"), "dialogu" );
	deepEqual( Stem("dials"), "dial" );
	deepEqual( Stem("diameter"), "diamet" );
	deepEqual( Stem("diamond"), "diamond" );
	deepEqual( Stem("diamonds"), "diamond" );
	deepEqual( Stem("dian"), "dian" );
	deepEqual( Stem("diana"), "diana" );
	deepEqual( Stem("diaper"), "diaper" );
	deepEqual( Stem("dib"), "dib" );
	deepEqual( Stem("dibble"), "dibbl" );
	deepEqual( Stem("dic"), "dic" );
	deepEqual( Stem("dice"), "dice" );
	deepEqual( Stem("dicers"), "dicer" );
	deepEqual( Stem("dich"), "dich" );
	deepEqual( Stem("dick"), "dick" );
	deepEqual( Stem("dickens"), "dicken" );
	deepEqual( Stem("dickon"), "dickon" );
	deepEqual( Stem("dicky"), "dicki" );
	deepEqual( Stem("dictate"), "dictat" );
	deepEqual( Stem("dictated"), "dictat" );
	deepEqual( Stem("dictates"), "dictat" );
	deepEqual( Stem("dictation"), "dictat" );
	deepEqual( Stem("dictator"), "dictat" );
	deepEqual( Stem("diction"), "diction" );
	deepEqual( Stem("dictionaries"), "dictionari" );
	deepEqual( Stem("dictionary"), "dictionari" );
	deepEqual( Stem("dictynna"), "dictynna" );
	deepEqual( Stem("did"), "did" );
	deepEqual( Stem("diddle"), "diddl" );
	deepEqual( Stem("diddlesex"), "diddlesex" );
	deepEqual( Stem("didelot"), "didelot" );
	deepEqual( Stem("didest"), "didest" );
	deepEqual( Stem("didn"), "didn" );
	deepEqual( Stem("dido"), "dido" );
	deepEqual( Stem("didst"), "didst" );
	deepEqual( Stem("die"), "die" );
	deepEqual( Stem("died"), "di" );
	deepEqual( Stem("diedst"), "diedst" );
	deepEqual( Stem("dieppe"), "diepp" );
	deepEqual( Stem("dies"), "di" );
	deepEqual( Stem("diest"), "diest" );
	deepEqual( Stem("diet"), "diet" );
	deepEqual( Stem("dieted"), "diet" );
	deepEqual( Stem("dieter"), "dieter" );
	deepEqual( Stem("dieu"), "dieu" );
	deepEqual( Stem("diff"), "diff" );
	deepEqual( Stem("differ"), "differ" );
	deepEqual( Stem("differed"), "differ" );
	deepEqual( Stem("difference"), "differ" );
	deepEqual( Stem("differences"), "differ" );
	deepEqual( Stem("differency"), "differ" );
	deepEqual( Stem("different"), "differ" );
	deepEqual( Stem("differing"), "differ" );
	deepEqual( Stem("differs"), "differ" );
	deepEqual( Stem("difficile"), "difficil" );
	deepEqual( Stem("difficult"), "difficult" );
	deepEqual( Stem("difficulties"), "difficulti" );
	deepEqual( Stem("difficulty"), "difficulti" );
	deepEqual( Stem("diffidence"), "diffid" );
	deepEqual( Stem("diffidences"), "diffid" );
	deepEqual( Stem("diffident"), "diffid" );
	deepEqual( Stem("diffus"), "diffu" );
	deepEqual( Stem("diffused"), "diffus" );
	deepEqual( Stem("diffusest"), "diffusest" );
	deepEqual( Stem("dig"), "dig" );
	deepEqual( Stem("digest"), "digest" );
	deepEqual( Stem("digested"), "digest" );
	deepEqual( Stem("digestion"), "digest" );
	deepEqual( Stem("digestions"), "digest" );
	deepEqual( Stem("digg"), "digg" );
	deepEqual( Stem("digging"), "dig" );
	deepEqual( Stem("dighton"), "dighton" );
	deepEqual( Stem("dignified"), "dignifi" );
	deepEqual( Stem("dignifies"), "dignifi" );
	deepEqual( Stem("dignify"), "dignifi" );
	deepEqual( Stem("dignitaries"), "dignitari" );
	deepEqual( Stem("dignitary"), "dignitari" );
	deepEqual( Stem("dignities"), "digniti" );
	deepEqual( Stem("dignity"), "digniti" );
	deepEqual( Stem("digress"), "digress" );
	deepEqual( Stem("digressing"), "digress" );
	deepEqual( Stem("digression"), "digress" );
	deepEqual( Stem("digressions"), "digress" );
	deepEqual( Stem("digs"), "dig" );
	deepEqual( Stem("digt"), "digt" );
	deepEqual( Stem("dike"), "dike" );
	deepEqual( Stem("dilapidated"), "dilapid" );
	deepEqual( Stem("dilate"), "dilat" );
	deepEqual( Stem("dilated"), "dilat" );
	deepEqual( Stem("dilations"), "dilat" );
	deepEqual( Stem("dilatory"), "dilatori" );
	deepEqual( Stem("dild"), "dild" );
	deepEqual( Stem("dildos"), "dildo" );
	deepEqual( Stem("dilemma"), "dilemma" );
	deepEqual( Stem("dilemmas"), "dilemma" );
	deepEqual( Stem("diligence"), "dilig" );
	deepEqual( Stem("diligent"), "dilig" );
	deepEqual( Stem("diluculo"), "diluculo" );
	deepEqual( Stem("dim"), "dim" );
	deepEqual( Stem("dimension"), "dimens" );
	deepEqual( Stem("dimensions"), "dimens" );
	deepEqual( Stem("diminish"), "diminish" );
	deepEqual( Stem("diminished"), "diminish" );
	deepEqual( Stem("diminishing"), "diminish" );
	deepEqual( Stem("diminution"), "diminut" );
	deepEqual( Stem("diminutive"), "diminut" );
	deepEqual( Stem("diminutives"), "diminut" );
	deepEqual( Stem("dimity"), "dimiti" );
	deepEqual( Stem("dimm"), "dimm" );
	deepEqual( Stem("dimmed"), "dim" );
	deepEqual( Stem("dimming"), "dim" );
	deepEqual( Stem("dimpled"), "dimpl" );
	deepEqual( Stem("dimples"), "dimpl" );
	deepEqual( Stem("dims"), "dim" );
	deepEqual( Stem("din"), "din" );
	deepEqual( Stem("dine"), "dine" );
	deepEqual( Stem("dined"), "dine" );
	deepEqual( Stem("diner"), "diner" );
	deepEqual( Stem("dines"), "dine" );
	deepEqual( Stem("ding"), "ding" );
	deepEqual( Stem("dingy"), "dingi" );
	deepEqual( Stem("dining"), "dine" );
	deepEqual( Stem("dinner"), "dinner" );
	deepEqual( Stem("dinners"), "dinner" );
	deepEqual( Stem("dinnertime"), "dinnertim" );
	deepEqual( Stem("dint"), "dint" );
	deepEqual( Stem("diogenes"), "diogen" );
	deepEqual( Stem("diomed"), "diom" );
	deepEqual( Stem("diomede"), "diomed" );
	deepEqual( Stem("diomedes"), "diomed" );
	deepEqual( Stem("dion"), "dion" );
	deepEqual( Stem("dip"), "dip" );
	deepEqual( Stem("dipley"), "diplei" );
	deepEqual( Stem("diplomacy"), "diplomaci" );
	deepEqual( Stem("diplomatic"), "diplomat" );
	deepEqual( Stem("diplomatist"), "diplomatist" );
	deepEqual( Stem("diplomatists"), "diplomatist" );
	deepEqual( Stem("dipp"), "dipp" );
	deepEqual( Stem("dipping"), "dip" );
	deepEqual( Stem("dips"), "dip" );
	deepEqual( Stem("dir"), "dir" );
	deepEqual( Stem("dire"), "dire" );
	deepEqual( Stem("direct"), "direct" );
	deepEqual( Stem("directed"), "direct" );
	deepEqual( Stem("directing"), "direct" );
	deepEqual( Stem("direction"), "direct" );
	deepEqual( Stem("directions"), "direct" );
	deepEqual( Stem("directitude"), "directitud" );
	deepEqual( Stem("directive"), "direct" );
	deepEqual( Stem("directly"), "directli" );
	deepEqual( Stem("director"), "director" );
	deepEqual( Stem("directs"), "direct" );
	deepEqual( Stem("direful"), "dire" );
	deepEqual( Stem("direfully"), "direfulli" );
	deepEqual( Stem("direly"), "dire" );
	deepEqual( Stem("direness"), "dire" );
	deepEqual( Stem("direst"), "direst" );
	deepEqual( Stem("dirge"), "dirg" );
	deepEqual( Stem("dirges"), "dirg" );
	deepEqual( Stem("dirt"), "dirt" );
	deepEqual( Stem("dirty"), "dirti" );
	deepEqual( Stem("dis"), "di" );
	deepEqual( Stem("disability"), "disabl" );
	deepEqual( Stem("disable"), "disabl" );
	deepEqual( Stem("disabled"), "disabl" );
	deepEqual( Stem("disabling"), "disabl" );
	deepEqual( Stem("disadvantage"), "disadvantag" );
	deepEqual( Stem("disaffected"), "disaffect" );
	deepEqual( Stem("disagree"), "disagre" );
	deepEqual( Stem("disagreeable"), "disagre" );
	deepEqual( Stem("disagreeing"), "disagre" );
	deepEqual( Stem("disallow"), "disallow" );
	deepEqual( Stem("disanimates"), "disanim" );
	deepEqual( Stem("disannul"), "disannul" );
	deepEqual( Stem("disannuls"), "disannul" );
	deepEqual( Stem("disappear"), "disappear" );
	deepEqual( Stem("disappeared"), "disappear" );
	deepEqual( Stem("disappears"), "disappear" );
	deepEqual( Stem("disappointed"), "disappoint" );
	deepEqual( Stem("disappointment"), "disappoint" );
	deepEqual( Stem("disappointments"), "disappoint" );
	deepEqual( Stem("disarm"), "disarm" );
	deepEqual( Stem("disarmed"), "disarm" );
	deepEqual( Stem("disarmeth"), "disarmeth" );
	deepEqual( Stem("disarms"), "disarm" );
	deepEqual( Stem("disarrangement"), "disarrang" );
	deepEqual( Stem("disaster"), "disast" );
	deepEqual( Stem("disasters"), "disast" );
	deepEqual( Stem("disastrous"), "disastr" );
	deepEqual( Stem("disbench"), "disbench" );
	deepEqual( Stem("disbranch"), "disbranch" );
	deepEqual( Stem("disburdened"), "disburden" );
	deepEqual( Stem("disburs"), "disbur" );
	deepEqual( Stem("disburse"), "disburs" );
	deepEqual( Stem("disbursed"), "disburs" );
	deepEqual( Stem("disburthening"), "disburthen" );
	deepEqual( Stem("discandy"), "discandi" );
	deepEqual( Stem("discandying"), "discandi" );
	deepEqual( Stem("discard"), "discard" );
	deepEqual( Stem("discarded"), "discard" );
	deepEqual( Stem("discase"), "discas" );
	deepEqual( Stem("discased"), "discas" );
	deepEqual( Stem("discern"), "discern" );
	deepEqual( Stem("discerner"), "discern" );
	deepEqual( Stem("discerning"), "discern" );
	deepEqual( Stem("discernings"), "discern" );
	deepEqual( Stem("discernment"), "discern" );
	deepEqual( Stem("discerns"), "discern" );
	deepEqual( Stem("discharg"), "discharg" );
	deepEqual( Stem("discharge"), "discharg" );
	deepEqual( Stem("discharged"), "discharg" );
	deepEqual( Stem("discharging"), "discharg" );
	deepEqual( Stem("disciple"), "discipl" );
	deepEqual( Stem("discipled"), "discipl" );
	deepEqual( Stem("disciples"), "discipl" );
	deepEqual( Stem("disciplin"), "disciplin" );
	deepEqual( Stem("discipline"), "disciplin" );
	deepEqual( Stem("disciplined"), "disciplin" );
	deepEqual( Stem("disciplines"), "disciplin" );
	deepEqual( Stem("disclaim"), "disclaim" );
	deepEqual( Stem("disclaiming"), "disclaim" );
	deepEqual( Stem("disclaims"), "disclaim" );
	deepEqual( Stem("disclos"), "disclo" );
	deepEqual( Stem("disclose"), "disclos" );
	deepEqual( Stem("disclosed"), "disclos" );
	deepEqual( Stem("discloses"), "disclos" );
	deepEqual( Stem("discolour"), "discolour" );
	deepEqual( Stem("discoloured"), "discolour" );
	deepEqual( Stem("discolours"), "discolour" );
	deepEqual( Stem("discomfit"), "discomfit" );
	deepEqual( Stem("discomfited"), "discomfit" );
	deepEqual( Stem("discomfiture"), "discomfitur" );
	deepEqual( Stem("discomfort"), "discomfort" );
	deepEqual( Stem("discomfortable"), "discomfort" );
	deepEqual( Stem("discommend"), "discommend" );
	deepEqual( Stem("discomposed"), "discompos" );
	deepEqual( Stem("disconcerted"), "disconcert" );
	deepEqual( Stem("disconsolate"), "disconsol" );
	deepEqual( Stem("disconsolately"), "disconsol" );
	deepEqual( Stem("discontent"), "discont" );
	deepEqual( Stem("discontented"), "discont" );
	deepEqual( Stem("discontentedly"), "discontentedli" );
	deepEqual( Stem("discontenting"), "discont" );
	deepEqual( Stem("discontents"), "discont" );
	deepEqual( Stem("discontinue"), "discontinu" );
	deepEqual( Stem("discontinued"), "discontinu" );
	deepEqual( Stem("discord"), "discord" );
	deepEqual( Stem("discordant"), "discord" );
	deepEqual( Stem("discorded"), "discord" );
	deepEqual( Stem("discords"), "discord" );
	deepEqual( Stem("discounts"), "discount" );
	deepEqual( Stem("discourse"), "discours" );
	deepEqual( Stem("discoursed"), "discours" );
	deepEqual( Stem("discourser"), "discours" );
	deepEqual( Stem("discourses"), "discours" );
	deepEqual( Stem("discoursing"), "discours" );
	deepEqual( Stem("discoursive"), "discours" );
	deepEqual( Stem("discourtesy"), "discourtesi" );
	deepEqual( Stem("discov"), "discov" );
	deepEqual( Stem("discover"), "discov" );
	deepEqual( Stem("discovered"), "discov" );
	deepEqual( Stem("discoverer"), "discover" );
	deepEqual( Stem("discoverers"), "discover" );
	deepEqual( Stem("discoveries"), "discoveri" );
	deepEqual( Stem("discovering"), "discov" );
	deepEqual( Stem("discovers"), "discov" );
	deepEqual( Stem("discovery"), "discoveri" );
	deepEqual( Stem("discredit"), "discredit" );
	deepEqual( Stem("discreditable"), "discredit" );
	deepEqual( Stem("discredited"), "discredit" );
	deepEqual( Stem("discredits"), "discredit" );
	deepEqual( Stem("discreet"), "discreet" );
	deepEqual( Stem("discreetly"), "discreetli" );
	deepEqual( Stem("discretion"), "discret" );
	deepEqual( Stem("discretions"), "discret" );
	deepEqual( Stem("discriminating"), "discrimin" );
	deepEqual( Stem("discrimination"), "discrimin" );
	deepEqual( Stem("discuss"), "discuss" );
	deepEqual( Stem("discussed"), "discuss" );
	deepEqual( Stem("discussing"), "discuss" );
	deepEqual( Stem("discussions"), "discuss" );
	deepEqual( Stem("disdain"), "disdain" );
	deepEqual( Stem("disdained"), "disdain" );
	deepEqual( Stem("disdaineth"), "disdaineth" );
	deepEqual( Stem("disdainful"), "disdain" );
	deepEqual( Stem("disdainfully"), "disdainfulli" );
	deepEqual( Stem("disdaining"), "disdain" );
	deepEqual( Stem("disdains"), "disdain" );
	deepEqual( Stem("disdnguish"), "disdnguish" );
	deepEqual( Stem("diseas"), "disea" );
	deepEqual( Stem("disease"), "diseas" );
	deepEqual( Stem("diseased"), "diseas" );
	deepEqual( Stem("diseases"), "diseas" );
	deepEqual( Stem("disedg"), "disedg" );
	deepEqual( Stem("disembark"), "disembark" );
	deepEqual( Stem("disenchanted"), "disench" );
	deepEqual( Stem("disengage"), "disengag" );
	deepEqual( Stem("disengaged"), "disengag" );
	deepEqual( Stem("disfavour"), "disfavour" );
	deepEqual( Stem("disfigure"), "disfigur" );
	deepEqual( Stem("disfigured"), "disfigur" );
	deepEqual( Stem("disfurnish"), "disfurnish" );
	deepEqual( Stem("disgorge"), "disgorg" );
	deepEqual( Stem("disgrac"), "disgrac" );
	deepEqual( Stem("disgrace"), "disgrac" );
	deepEqual( Stem("disgraced"), "disgrac" );
	deepEqual( Stem("disgraceful"), "disgrac" );
	deepEqual( Stem("disgraces"), "disgrac" );
	deepEqual( Stem("disgracing"), "disgrac" );
	deepEqual( Stem("disgracious"), "disgraci" );
	deepEqual( Stem("disguis"), "disgui" );
	deepEqual( Stem("disguise"), "disguis" );
	deepEqual( Stem("disguised"), "disguis" );
	deepEqual( Stem("disguiser"), "disguis" );
	deepEqual( Stem("disguises"), "disguis" );
	deepEqual( Stem("disguising"), "disguis" );
	deepEqual( Stem("disgust"), "disgust" );
	deepEqual( Stem("dish"), "dish" );
	deepEqual( Stem("dishabited"), "dishabit" );
	deepEqual( Stem("dishclout"), "dishclout" );
	deepEqual( Stem("dishearten"), "dishearten" );
	deepEqual( Stem("disheartening"), "dishearten" );
	deepEqual( Stem("disheartens"), "dishearten" );
	deepEqual( Stem("dished"), "dish" );
	deepEqual( Stem("dishes"), "dish" );
	deepEqual( Stem("dishevelled"), "dishevel" );
	deepEqual( Stem("dishonest"), "dishonest" );
	deepEqual( Stem("dishonestly"), "dishonestli" );
	deepEqual( Stem("dishonesty"), "dishonesti" );
	deepEqual( Stem("dishonor"), "dishonor" );
	deepEqual( Stem("dishonorable"), "dishonor" );
	deepEqual( Stem("dishonors"), "dishonor" );
	deepEqual( Stem("dishonour"), "dishonour" );
	deepEqual( Stem("dishonourable"), "dishonour" );
	deepEqual( Stem("dishonoured"), "dishonour" );
	deepEqual( Stem("dishonours"), "dishonour" );
	deepEqual( Stem("disinclined"), "disinclin" );
	deepEqual( Stem("disinherit"), "disinherit" );
	deepEqual( Stem("disinherited"), "disinherit" );
	deepEqual( Stem("disinheriting"), "disinherit" );
	deepEqual( Stem("disinterested"), "disinterest" );
	deepEqual( Stem("disjoin"), "disjoin" );
	deepEqual( Stem("disjoining"), "disjoin" );
	deepEqual( Stem("disjoins"), "disjoin" );
	deepEqual( Stem("disjoint"), "disjoint" );
	deepEqual( Stem("disjunction"), "disjunct" );
	deepEqual( Stem("dislik"), "dislik" );
	deepEqual( Stem("dislike"), "dislik" );
	deepEqual( Stem("disliked"), "dislik" );
	deepEqual( Stem("disliken"), "disliken" );
	deepEqual( Stem("dislikes"), "dislik" );
	deepEqual( Stem("disliking"), "dislik" );
	deepEqual( Stem("dislimns"), "dislimn" );
	deepEqual( Stem("dislocate"), "disloc" );
	deepEqual( Stem("dislodg"), "dislodg" );
	deepEqual( Stem("dislodge"), "dislodg" );
	deepEqual( Stem("dislodged"), "dislodg" );
	deepEqual( Stem("disloyal"), "disloy" );
	deepEqual( Stem("disloyalty"), "disloyalti" );
	deepEqual( Stem("dismal"), "dismal" );
	deepEqual( Stem("dismallest"), "dismallest" );
	deepEqual( Stem("dismally"), "dismal" );
	deepEqual( Stem("dismantle"), "dismantl" );
	deepEqual( Stem("dismantled"), "dismantl" );
	deepEqual( Stem("dismask"), "dismask" );
	deepEqual( Stem("dismay"), "dismai" );
	deepEqual( Stem("dismayed"), "dismai" );
	deepEqual( Stem("dismemb"), "dismemb" );
	deepEqual( Stem("dismember"), "dismemb" );
	deepEqual( Stem("dismes"), "dism" );
	deepEqual( Stem("dismiss"), "dismiss" );
	deepEqual( Stem("dismissal"), "dismiss" );
	deepEqual( Stem("dismissals"), "dismiss" );
	deepEqual( Stem("dismissed"), "dismiss" );
	deepEqual( Stem("dismissing"), "dismiss" );
	deepEqual( Stem("dismission"), "dismiss" );
	deepEqual( Stem("dismount"), "dismount" );
	deepEqual( Stem("dismounted"), "dismount" );
	deepEqual( Stem("disnatur"), "disnatur" );
	deepEqual( Stem("disobedience"), "disobedi" );
	deepEqual( Stem("disobedient"), "disobedi" );
	deepEqual( Stem("disobey"), "disobei" );
	deepEqual( Stem("disobeyed"), "disobei" );
	deepEqual( Stem("disobeys"), "disobei" );
	deepEqual( Stem("disorb"), "disorb" );
	deepEqual( Stem("disorder"), "disord" );
	deepEqual( Stem("disordered"), "disord" );
	deepEqual( Stem("disorderly"), "disorderli" );
	deepEqual( Stem("disorders"), "disord" );
	deepEqual( Stem("disorganised"), "disorganis" );
	deepEqual( Stem("disown"), "disown" );
	deepEqual( Stem("disowned"), "disown" );
	deepEqual( Stem("disowns"), "disown" );
	deepEqual( Stem("disparage"), "disparag" );
	deepEqual( Stem("disparagement"), "disparag" );
	deepEqual( Stem("disparagements"), "disparag" );
	deepEqual( Stem("dispark"), "dispark" );
	deepEqual( Stem("dispatch"), "dispatch" );
	deepEqual( Stem("dispatched"), "dispatch" );
	deepEqual( Stem("dispatches"), "dispatch" );
	deepEqual( Stem("dispatching"), "dispatch" );
	deepEqual( Stem("dispensation"), "dispens" );
	deepEqual( Stem("dispense"), "dispens" );
	deepEqual( Stem("dispenses"), "dispens" );
	deepEqual( Stem("dispers"), "disper" );
	deepEqual( Stem("disperse"), "dispers" );
	deepEqual( Stem("dispersed"), "dispers" );
	deepEqual( Stem("dispersedly"), "dispersedli" );
	deepEqual( Stem("dispersing"), "dispers" );
	deepEqual( Stem("dispiteous"), "dispit" );
	deepEqual( Stem("displac"), "displac" );
	deepEqual( Stem("displace"), "displac" );
	deepEqual( Stem("displaced"), "displac" );
	deepEqual( Stem("displant"), "displant" );
	deepEqual( Stem("displanting"), "displant" );
	deepEqual( Stem("display"), "displai" );
	deepEqual( Stem("displayed"), "displai" );
	deepEqual( Stem("displaying"), "displai" );
	deepEqual( Stem("displeas"), "displea" );
	deepEqual( Stem("displease"), "displeas" );
	deepEqual( Stem("displeased"), "displeas" );
	deepEqual( Stem("displeasing"), "displeas" );
	deepEqual( Stem("displeasure"), "displeasur" );
	deepEqual( Stem("displeasures"), "displeasur" );
	deepEqual( Stem("disponge"), "dispong" );
	deepEqual( Stem("disport"), "disport" );
	deepEqual( Stem("disports"), "disport" );
	deepEqual( Stem("dispos"), "dispo" );
	deepEqual( Stem("disposal"), "dispos" );
	deepEqual( Stem("dispose"), "dispos" );
	deepEqual( Stem("disposed"), "dispos" );
	deepEqual( Stem("disposer"), "dispos" );
	deepEqual( Stem("disposing"), "dispos" );
	deepEqual( Stem("disposition"), "disposit" );
	deepEqual( Stem("dispositions"), "disposit" );
	deepEqual( Stem("dispossess"), "dispossess" );
	deepEqual( Stem("dispossessing"), "dispossess" );
	deepEqual( Stem("disprais"), "disprai" );
	deepEqual( Stem("dispraise"), "disprais" );
	deepEqual( Stem("dispraising"), "disprais" );
	deepEqual( Stem("dispraisingly"), "dispraisingli" );
	deepEqual( Stem("dispropertied"), "disproperti" );
	deepEqual( Stem("disproportion"), "disproport" );
	deepEqual( Stem("disproportioned"), "disproport" );
	deepEqual( Stem("disprov"), "disprov" );
	deepEqual( Stem("disprove"), "disprov" );
	deepEqual( Stem("disproved"), "disprov" );
	deepEqual( Stem("dispursed"), "dispurs" );
	deepEqual( Stem("disputable"), "disput" );
	deepEqual( Stem("disputation"), "disput" );
	deepEqual( Stem("disputations"), "disput" );
	deepEqual( Stem("dispute"), "disput" );
	deepEqual( Stem("disputed"), "disput" );
	deepEqual( Stem("disputes"), "disput" );
	deepEqual( Stem("disputing"), "disput" );
	deepEqual( Stem("disquantity"), "disquant" );
	deepEqual( Stem("disquiet"), "disquiet" );
	deepEqual( Stem("disquieted"), "disquiet" );
	deepEqual( Stem("disquietly"), "disquietli" );
	deepEqual( Stem("disquietude"), "disquietud" );
	deepEqual( Stem("disregarded"), "disregard" );
	deepEqual( Stem("disrelish"), "disrelish" );
	deepEqual( Stem("disreputable"), "disreput" );
	deepEqual( Stem("disrespectability"), "disrespect" );
	deepEqual( Stem("disrespectfully"), "disrespectfulli" );
	deepEqual( Stem("disrobe"), "disrob" );
	deepEqual( Stem("dissatisfied"), "dissatisfi" );
	deepEqual( Stem("disseat"), "disseat" );
	deepEqual( Stem("dissemble"), "dissembl" );
	deepEqual( Stem("dissembled"), "dissembl" );
	deepEqual( Stem("dissembler"), "dissembl" );
	deepEqual( Stem("dissemblers"), "dissembl" );
	deepEqual( Stem("dissembling"), "dissembl" );
	deepEqual( Stem("dissembly"), "dissembli" );
	deepEqual( Stem("dissension"), "dissens" );
	deepEqual( Stem("dissensions"), "dissens" );
	deepEqual( Stem("dissenters"), "dissent" );
	deepEqual( Stem("dissenting"), "dissent" );
	deepEqual( Stem("dissentious"), "dissenti" );
	deepEqual( Stem("dissever"), "dissev" );
	deepEqual( Stem("dissipated"), "dissip" );
	deepEqual( Stem("dissipating"), "dissip" );
	deepEqual( Stem("dissipation"), "dissip" );
	deepEqual( Stem("dissolute"), "dissolut" );
	deepEqual( Stem("dissolutely"), "dissolut" );
	deepEqual( Stem("dissolution"), "dissolut" );
	deepEqual( Stem("dissolutions"), "dissolut" );
	deepEqual( Stem("dissolv"), "dissolv" );
	deepEqual( Stem("dissolve"), "dissolv" );
	deepEqual( Stem("dissolved"), "dissolv" );
	deepEqual( Stem("dissolves"), "dissolv" );
	deepEqual( Stem("dissuade"), "dissuad" );
	deepEqual( Stem("dissuaded"), "dissuad" );
	deepEqual( Stem("distaff"), "distaff" );
	deepEqual( Stem("distaffs"), "distaff" );
	deepEqual( Stem("distain"), "distain" );
	deepEqual( Stem("distains"), "distain" );
	deepEqual( Stem("distance"), "distanc" );
	deepEqual( Stem("distances"), "distanc" );
	deepEqual( Stem("distangy"), "distangi" );
	deepEqual( Stem("distant"), "distant" );
	deepEqual( Stem("distaste"), "distast" );
	deepEqual( Stem("distasted"), "distast" );
	deepEqual( Stem("distasteful"), "distast" );
	deepEqual( Stem("distemp"), "distemp" );
	deepEqual( Stem("distemper"), "distemp" );
	deepEqual( Stem("distemperature"), "distemperatur" );
	deepEqual( Stem("distemperatures"), "distemperatur" );
	deepEqual( Stem("distempered"), "distemp" );
	deepEqual( Stem("distempering"), "distemp" );
	deepEqual( Stem("distil"), "distil" );
	deepEqual( Stem("distill"), "distil" );
	deepEqual( Stem("distillation"), "distil" );
	deepEqual( Stem("distilled"), "distil" );
	deepEqual( Stem("distills"), "distil" );
	deepEqual( Stem("distilment"), "distil" );
	deepEqual( Stem("distinct"), "distinct" );
	deepEqual( Stem("distinction"), "distinct" );
	deepEqual( Stem("distinctly"), "distinctli" );
	deepEqual( Stem("distingue"), "distingu" );
	deepEqual( Stem("distinguee"), "distingue" );
	deepEqual( Stem("distinguish"), "distinguish" );
	deepEqual( Stem("distinguished"), "distinguish" );
	deepEqual( Stem("distinguishes"), "distinguish" );
	deepEqual( Stem("distinguishing"), "distinguish" );
	deepEqual( Stem("distinguishment"), "distinguish" );
	deepEqual( Stem("distorted"), "distort" );
	deepEqual( Stem("distract"), "distract" );
	deepEqual( Stem("distracted"), "distract" );
	deepEqual( Stem("distractedly"), "distractedli" );
	deepEqual( Stem("distraction"), "distract" );
	deepEqual( Stem("distractions"), "distract" );
	deepEqual( Stem("distracts"), "distract" );
	deepEqual( Stem("distrain"), "distrain" );
	deepEqual( Stem("distraining"), "distrain" );
	deepEqual( Stem("distraite"), "distrait" );
	deepEqual( Stem("distraught"), "distraught" );
	deepEqual( Stem("distress"), "distress" );
	deepEqual( Stem("distressed"), "distress" );
	deepEqual( Stem("distresses"), "distress" );
	deepEqual( Stem("distressful"), "distress" );
	deepEqual( Stem("distribute"), "distribut" );
	deepEqual( Stem("distributed"), "distribut" );
	deepEqual( Stem("distributing"), "distribut" );
	deepEqual( Stem("distribution"), "distribut" );
	deepEqual( Stem("district"), "district" );
	deepEqual( Stem("distrust"), "distrust" );
	deepEqual( Stem("distrustful"), "distrust" );
	deepEqual( Stem("disturb"), "disturb" );
	deepEqual( Stem("disturbance"), "disturb" );
	deepEqual( Stem("disturbances"), "disturb" );
	deepEqual( Stem("disturbed"), "disturb" );
	deepEqual( Stem("disturbers"), "disturb" );
	deepEqual( Stem("disturbing"), "disturb" );
	deepEqual( Stem("disunite"), "disunit" );
	deepEqual( Stem("disvalued"), "disvalu" );
	deepEqual( Stem("disvouch"), "disvouch" );
	deepEqual( Stem("dit"), "dit" );
	deepEqual( Stem("ditch"), "ditch" );
	deepEqual( Stem("ditchers"), "ditcher" );
	deepEqual( Stem("ditches"), "ditch" );
	deepEqual( Stem("dites"), "dite" );
	deepEqual( Stem("ditties"), "ditti" );
	deepEqual( Stem("ditto"), "ditto" );
	deepEqual( Stem("ditty"), "ditti" );
	deepEqual( Stem("diurnal"), "diurnal" );
	deepEqual( Stem("div"), "div" );
	deepEqual( Stem("divagation"), "divag" );
	deepEqual( Stem("divan"), "divan" );
	deepEqual( Stem("dive"), "dive" );
	deepEqual( Stem("dived"), "dive" );
	deepEqual( Stem("diver"), "diver" );
	deepEqual( Stem("diverge"), "diverg" );
	deepEqual( Stem("divers"), "diver" );
	deepEqual( Stem("diversely"), "divers" );
	deepEqual( Stem("diversion"), "divers" );
	deepEqual( Stem("diversity"), "divers" );
	deepEqual( Stem("divert"), "divert" );
	deepEqual( Stem("diverted"), "divert" );
	deepEqual( Stem("diverting"), "divert" );
	deepEqual( Stem("diverts"), "divert" );
	deepEqual( Stem("dives"), "dive" );
	deepEqual( Stem("divest"), "divest" );
	deepEqual( Stem("divested"), "divest" );
	deepEqual( Stem("divests"), "divest" );
	deepEqual( Stem("dividable"), "divid" );
	deepEqual( Stem("dividant"), "divid" );
	deepEqual( Stem("divide"), "divid" );
	deepEqual( Stem("divided"), "divid" );
	deepEqual( Stem("dividend"), "dividend" );
	deepEqual( Stem("dividends"), "dividend" );
	deepEqual( Stem("divides"), "divid" );
	deepEqual( Stem("divideth"), "divideth" );
	deepEqual( Stem("divin"), "divin" );
	deepEqual( Stem("divination"), "divin" );
	deepEqual( Stem("divine"), "divin" );
	deepEqual( Stem("divined"), "divin" );
	deepEqual( Stem("divinely"), "divin" );
	deepEqual( Stem("divineness"), "divin" );
	deepEqual( Stem("diviner"), "divin" );
	deepEqual( Stem("divines"), "divin" );
	deepEqual( Stem("divinest"), "divinest" );
	deepEqual( Stem("divining"), "divin" );
	deepEqual( Stem("divinity"), "divin" );
	deepEqual( Stem("division"), "divis" );
	deepEqual( Stem("divisions"), "divis" );
	deepEqual( Stem("divorc"), "divorc" );
	deepEqual( Stem("divorce"), "divorc" );
	deepEqual( Stem("divorced"), "divorc" );
	deepEqual( Stem("divorcement"), "divorc" );
	deepEqual( Stem("divorcing"), "divorc" );
	deepEqual( Stem("divulg"), "divulg" );
	deepEqual( Stem("divulge"), "divulg" );
	deepEqual( Stem("divulged"), "divulg" );
	deepEqual( Stem("divulging"), "divulg" );
	deepEqual( Stem("divvle"), "divvl" );
	deepEqual( Stem("diwinity"), "diwin" );
	deepEqual( Stem("dixonary"), "dixonari" );
	deepEqual( Stem("dizy"), "dizi" );
	deepEqual( Stem("dizzy"), "dizzi" );
	deepEqual( Stem("do"), "do" );
	deepEqual( Stem("doating"), "doat" );
	deepEqual( Stem("dob"), "dob" );
	deepEqual( Stem("dobbin"), "dobbin" );
	deepEqual( Stem("dobbs"), "dobb" );
	deepEqual( Stem("doblin"), "doblin" );
	deepEqual( Stem("docility"), "docil" );
	deepEqual( Stem("dock"), "dock" );
	deepEqual( Stem("docketed"), "docket" );
	deepEqual( Stem("docks"), "dock" );
	deepEqual( Stem("doct"), "doct" );
	deepEqual( Stem("docther"), "docther" );
	deepEqual( Stem("doctor"), "doctor" );
	deepEqual( Stem("doctored"), "doctor" );
	deepEqual( Stem("doctors"), "doctor" );
	deepEqual( Stem("doctrine"), "doctrin" );
	deepEqual( Stem("doctrines"), "doctrin" );
	deepEqual( Stem("document"), "document" );
	deepEqual( Stem("documents"), "document" );
	deepEqual( Stem("dodge"), "dodg" );
	deepEqual( Stem("doe"), "doe" );
	deepEqual( Stem("doer"), "doer" );
	deepEqual( Stem("doers"), "doer" );
	deepEqual( Stem("does"), "doe" );
	deepEqual( Stem("doesn"), "doesn" );
	deepEqual( Stem("doest"), "doest" );
	deepEqual( Stem("doff"), "doff" );
	deepEqual( Stem("dog"), "dog" );
	deepEqual( Stem("dogberry"), "dogberri" );
	deepEqual( Stem("dogfish"), "dogfish" );
	deepEqual( Stem("dogg"), "dogg" );
	deepEqual( Stem("dogged"), "dog" );
	deepEqual( Stem("doggedly"), "doggedli" );
	deepEqual( Stem("dogs"), "dog" );
	deepEqual( Stem("doigts"), "doigt" );
	deepEqual( Stem("doing"), "do" );
	deepEqual( Stem("doings"), "do" );
	deepEqual( Stem("doit"), "doit" );
	deepEqual( Stem("doits"), "doit" );
	deepEqual( Stem("dolabella"), "dolabella" );
	deepEqual( Stem("dolby"), "dolbi" );
	deepEqual( Stem("dole"), "dole" );
	deepEqual( Stem("doleful"), "dole" );
	deepEqual( Stem("doll"), "doll" );
	deepEqual( Stem("dollar"), "dollar" );
	deepEqual( Stem("dollars"), "dollar" );
	deepEqual( Stem("dolly"), "dolli" );
	deepEqual( Stem("dolor"), "dolor" );
	deepEqual( Stem("dolorous"), "dolor" );
	deepEqual( Stem("dolour"), "dolour" );
	deepEqual( Stem("dolours"), "dolour" );
	deepEqual( Stem("dolphin"), "dolphin" );
	deepEqual( Stem("dolt"), "dolt" );
	deepEqual( Stem("dolts"), "dolt" );
	deepEqual( Stem("domain"), "domain" );
	deepEqual( Stem("domestic"), "domest" );
	deepEqual( Stem("domestics"), "domest" );
	deepEqual( Stem("domicile"), "domicil" );
	deepEqual( Stem("dominance"), "domin" );
	deepEqual( Stem("dominating"), "domin" );
	deepEqual( Stem("dominations"), "domin" );
	deepEqual( Stem("dominator"), "domin" );
	deepEqual( Stem("domine"), "domin" );
	deepEqual( Stem("domineer"), "domin" );
	deepEqual( Stem("domineered"), "domin" );
	deepEqual( Stem("domineering"), "domin" );
	deepEqual( Stem("domini"), "domini" );
	deepEqual( Stem("dominical"), "domin" );
	deepEqual( Stem("dominion"), "dominion" );
	deepEqual( Stem("dominions"), "dominion" );
	deepEqual( Stem("domino"), "domino" );
	deepEqual( Stem("dominoes"), "domino" );
	deepEqual( Stem("domitius"), "domitiu" );
	deepEqual( Stem("dommelton"), "dommelton" );
	deepEqual( Stem("don"), "don" );
	deepEqual( Stem("donalbain"), "donalbain" );
	deepEqual( Stem("donald"), "donald" );
	deepEqual( Stem("donation"), "donat" );
	deepEqual( Stem("donc"), "donc" );
	deepEqual( Stem("doncaster"), "doncast" );
	deepEqual( Stem("done"), "done" );
	deepEqual( Stem("dong"), "dong" );
	deepEqual( Stem("donizettian"), "donizettian" );
	deepEqual( Stem("donkey"), "donkei" );
	deepEqual( Stem("donkeys"), "donkei" );
	deepEqual( Stem("donn"), "donn" );
	deepEqual( Stem("donne"), "donn" );
	deepEqual( Stem("donner"), "donner" );
	deepEqual( Stem("donnerai"), "donnerai" );
	deepEqual( Stem("donnerwetter"), "donnerwett" );
	deepEqual( Stem("donor"), "donor" );
	deepEqual( Stem("doo"), "doo" );
	deepEqual( Stem("dooce"), "dooc" );
	deepEqual( Stem("doom"), "doom" );
	deepEqual( Stem("doomed"), "doom" );
	deepEqual( Stem("doomsday"), "doomsdai" );
	deepEqual( Stem("door"), "door" );
	deepEqual( Stem("doorbell"), "doorbel" );
	deepEqual( Stem("doorkeeper"), "doorkeep" );
	deepEqual( Stem("doorpost"), "doorpost" );
	deepEqual( Stem("doors"), "door" );
	deepEqual( Stem("doorsteps"), "doorstep" );
	deepEqual( Stem("doose"), "doos" );
	deepEqual( Stem("dooze"), "dooz" );
	deepEqual( Stem("dorcas"), "dorca" );
	deepEqual( Stem("doreus"), "doreu" );
	deepEqual( Stem("doricles"), "doricl" );
	deepEqual( Stem("dormez"), "dormez" );
	deepEqual( Stem("dormouse"), "dormous" );
	deepEqual( Stem("dorothy"), "dorothi" );
	deepEqual( Stem("dorset"), "dorset" );
	deepEqual( Stem("dorsetshire"), "dorsetshir" );
	deepEqual( Stem("dose"), "dose" );
	deepEqual( Stem("dosed"), "dose" );
	deepEqual( Stem("doses"), "dose" );
	deepEqual( Stem("dost"), "dost" );
	deepEqual( Stem("dot"), "dot" );
	deepEqual( Stem("dotage"), "dotag" );
	deepEqual( Stem("dotant"), "dotant" );
	deepEqual( Stem("dotard"), "dotard" );
	deepEqual( Stem("dotards"), "dotard" );
	deepEqual( Stem("dote"), "dote" );
	deepEqual( Stem("doted"), "dote" );
	deepEqual( Stem("doter"), "doter" );
	deepEqual( Stem("doters"), "doter" );
	deepEqual( Stem("dotes"), "dote" );
	deepEqual( Stem("doteth"), "doteth" );
	deepEqual( Stem("doth"), "doth" );
	deepEqual( Stem("doting"), "dote" );
	deepEqual( Stem("double"), "doubl" );
	deepEqual( Stem("doubled"), "doubl" );
	deepEqual( Stem("doubleness"), "doubl" );
	deepEqual( Stem("doubler"), "doubler" );
	deepEqual( Stem("doublet"), "doublet" );
	deepEqual( Stem("doublets"), "doublet" );
	deepEqual( Stem("doubling"), "doubl" );
	deepEqual( Stem("doubly"), "doubli" );
	deepEqual( Stem("doubt"), "doubt" );
	deepEqual( Stem("doubted"), "doubt" );
	deepEqual( Stem("doubtful"), "doubt" );
	deepEqual( Stem("doubtfully"), "doubtfulli" );
	deepEqual( Stem("doubting"), "doubt" );
	deepEqual( Stem("doubtless"), "doubtless" );
	deepEqual( Stem("doubts"), "doubt" );
	deepEqual( Stem("doug"), "doug" );
	deepEqual( Stem("dough"), "dough" );
	deepEqual( Stem("doughty"), "doughti" );
	deepEqual( Stem("doughy"), "doughi" );
	deepEqual( Stem("douglas"), "dougla" );
	deepEqual( Stem("dout"), "dout" );
	deepEqual( Stem("doute"), "dout" );
	deepEqual( Stem("douts"), "dout" );
	deepEqual( Stem("doux"), "doux" );
	deepEqual( Stem("dove"), "dove" );
	deepEqual( Stem("dovecot"), "dovecot" );
	deepEqual( Stem("dovedale"), "dovedal" );
	deepEqual( Stem("dovehouse"), "dovehous" );
	deepEqual( Stem("dover"), "dover" );
	deepEqual( Stem("doves"), "dove" );
	deepEqual( Stem("dow"), "dow" );
	deepEqual( Stem("dowager"), "dowag" );
	deepEqual( Stem("dowagerism"), "dowager" );
	deepEqual( Stem("dowagers"), "dowag" );
	deepEqual( Stem("dowd"), "dowd" );
	deepEqual( Stem("dowdstown"), "dowdstown" );
	deepEqual( Stem("dowdy"), "dowdi" );
	deepEqual( Stem("dower"), "dower" );
	deepEqual( Stem("dowerless"), "dowerless" );
	deepEqual( Stem("dowers"), "dower" );
	deepEqual( Stem("dowlas"), "dowla" );
	deepEqual( Stem("dowle"), "dowl" );
	deepEqual( Stem("down"), "down" );
	deepEqual( Stem("downcast"), "downcast" );
	deepEqual( Stem("downfall"), "downfal" );
	deepEqual( Stem("downright"), "downright" );
	deepEqual( Stem("downs"), "down" );
	deepEqual( Stem("downstairs"), "downstair" );
	deepEqual( Stem("downtrod"), "downtrod" );
	deepEqual( Stem("downward"), "downward" );
	deepEqual( Stem("downwards"), "downward" );
	deepEqual( Stem("downy"), "downi" );
	deepEqual( Stem("dowries"), "dowri" );
	deepEqual( Stem("dowry"), "dowri" );
	deepEqual( Stem("dowsabel"), "dowsabel" );
	deepEqual( Stem("dowton"), "dowton" );
	deepEqual( Stem("doxy"), "doxi" );
	deepEqual( Stem("doyle"), "doyl" );
	deepEqual( Stem("doze"), "doze" );
	deepEqual( Stem("dozed"), "doze" );
	deepEqual( Stem("dozen"), "dozen" );
	deepEqual( Stem("dozens"), "dozen" );
	deepEqual( Stem("dozing"), "doze" );
	deepEqual( Stem("dozy"), "dozi" );
	deepEqual( Stem("dr"), "dr" );
	deepEqual( Stem("drab"), "drab" );
	deepEqual( Stem("drabbing"), "drab" );
	deepEqual( Stem("drabs"), "drab" );
	deepEqual( Stem("drachma"), "drachma" );
	deepEqual( Stem("drachmas"), "drachma" );
	deepEqual( Stem("draff"), "draff" );
	deepEqual( Stem("draft"), "draft" );
	deepEqual( Stem("drafted"), "draft" );
	deepEqual( Stem("drafts"), "draft" );
	deepEqual( Stem("drag"), "drag" );
	deepEqual( Stem("dragg"), "dragg" );
	deepEqual( Stem("dragged"), "drag" );
	deepEqual( Stem("dragging"), "drag" );
	deepEqual( Stem("draggled"), "draggl" );
	deepEqual( Stem("dragoman"), "dragoman" );
	deepEqual( Stem("dragon"), "dragon" );
	deepEqual( Stem("dragonish"), "dragonish" );
	deepEqual( Stem("dragons"), "dragon" );
	deepEqual( Stem("dragoon"), "dragoon" );
	deepEqual( Stem("dragoons"), "dragoon" );
	deepEqual( Stem("drain"), "drain" );
	deepEqual( Stem("drained"), "drain" );
	deepEqual( Stem("draining"), "drain" );
	deepEqual( Stem("drains"), "drain" );
	deepEqual( Stem("drake"), "drake" );
	deepEqual( Stem("dram"), "dram" );
	deepEqual( Stem("drama"), "drama" );
	deepEqual( Stem("dramas"), "drama" );
	deepEqual( Stem("dramatic"), "dramat" );
	deepEqual( Stem("dramatis"), "dramati" );
	deepEqual( Stem("drank"), "drank" );
	deepEqual( Stem("draper"), "draper" );
	deepEqual( Stem("drapery"), "draperi" );
	deepEqual( Stem("draught"), "draught" );
	deepEqual( Stem("draughts"), "draught" );
	deepEqual( Stem("drave"), "drave" );
	deepEqual( Stem("draw"), "draw" );
	deepEqual( Stem("drawback"), "drawback" );
	deepEqual( Stem("drawbridge"), "drawbridg" );
	deepEqual( Stem("drawer"), "drawer" );
	deepEqual( Stem("drawers"), "drawer" );
	deepEqual( Stem("draweth"), "draweth" );
	deepEqual( Stem("drawing"), "draw" );
	deepEqual( Stem("drawingroom"), "drawingroom" );
	deepEqual( Stem("drawings"), "draw" );
	deepEqual( Stem("drawled"), "drawl" );
	deepEqual( Stem("drawling"), "drawl" );
	deepEqual( Stem("drawn"), "drawn" );
	deepEqual( Stem("draws"), "draw" );
	deepEqual( Stem("drayman"), "drayman" );
	deepEqual( Stem("draymen"), "draymen" );
	deepEqual( Stem("dread"), "dread" );
	deepEqual( Stem("dreaded"), "dread" );
	deepEqual( Stem("dreadful"), "dread" );
	deepEqual( Stem("dreadfully"), "dreadfulli" );
	deepEqual( Stem("dreading"), "dread" );
	deepEqual( Stem("dreads"), "dread" );
	deepEqual( Stem("dream"), "dream" );
	deepEqual( Stem("dreamed"), "dream" );
	deepEqual( Stem("dreamer"), "dreamer" );
	deepEqual( Stem("dreamers"), "dreamer" );
	deepEqual( Stem("dreaming"), "dream" );
	deepEqual( Stem("dreams"), "dream" );
	deepEqual( Stem("dreamt"), "dreamt" );
	deepEqual( Stem("dreariest"), "dreariest" );
	deepEqual( Stem("drearily"), "drearili" );
	deepEqual( Stem("dreariness"), "dreari" );
	deepEqual( Stem("drearning"), "drearn" );
	deepEqual( Stem("dreary"), "dreari" );
	deepEqual( Stem("dreg"), "dreg" );
	deepEqual( Stem("dregs"), "dreg" );
	deepEqual( Stem("drench"), "drench" );
	deepEqual( Stem("drenched"), "drench" );
	deepEqual( Stem("dresden"), "dresden" );
	deepEqual( Stem("dress"), "dress" );
	deepEqual( Stem("dressed"), "dress" );
	deepEqual( Stem("dresser"), "dresser" );
	deepEqual( Stem("dresses"), "dress" );
	deepEqual( Stem("dressing"), "dress" );
	deepEqual( Stem("dressings"), "dress" );
	deepEqual( Stem("dressy"), "dressi" );
	deepEqual( Stem("drest"), "drest" );
	deepEqual( Stem("drew"), "drew" );
	deepEqual( Stem("dribbling"), "dribbl" );
	deepEqual( Stem("dried"), "dri" );
	deepEqual( Stem("drier"), "drier" );
	deepEqual( Stem("dries"), "dri" );
	deepEqual( Stem("drift"), "drift" );
	deepEqual( Stem("drilling"), "drill" );
	deepEqual( Stem("drills"), "drill" );
	deepEqual( Stem("drily"), "drili" );
	deepEqual( Stem("drink"), "drink" );
	deepEqual( Stem("drinketh"), "drinketh" );
	deepEqual( Stem("drinkin"), "drinkin" );
	deepEqual( Stem("drinking"), "drink" );
	deepEqual( Stem("drinkings"), "drink" );
	deepEqual( Stem("drinks"), "drink" );
	deepEqual( Stem("dripping"), "drip" );
	deepEqual( Stem("driv"), "driv" );
	deepEqual( Stem("drive"), "drive" );
	deepEqual( Stem("drivelling"), "drivel" );
	deepEqual( Stem("driven"), "driven" );
	deepEqual( Stem("driver"), "driver" );
	deepEqual( Stem("drives"), "drive" );
	deepEqual( Stem("driveth"), "driveth" );
	deepEqual( Stem("driving"), "drive" );
	deepEqual( Stem("drizzle"), "drizzl" );
	deepEqual( Stem("drizzled"), "drizzl" );
	deepEqual( Stem("drizzles"), "drizzl" );
	deepEqual( Stem("droit"), "droit" );
	deepEqual( Stem("droll"), "droll" );
	deepEqual( Stem("drollery"), "drolleri" );
	deepEqual( Stem("drolly"), "drolli" );
	deepEqual( Stem("dromedaries"), "dromedari" );
	deepEqual( Stem("dromedary"), "dromedari" );
	deepEqual( Stem("dromio"), "dromio" );
	deepEqual( Stem("dromios"), "dromio" );
	deepEqual( Stem("drone"), "drone" );
	deepEqual( Stem("drones"), "drone" );
	deepEqual( Stem("droop"), "droop" );
	deepEqual( Stem("droopeth"), "droopeth" );
	deepEqual( Stem("drooping"), "droop" );
	deepEqual( Stem("droops"), "droop" );
	deepEqual( Stem("drop"), "drop" );
	deepEqual( Stem("dropheir"), "dropheir" );
	deepEqual( Stem("droplets"), "droplet" );
	deepEqual( Stem("dropp"), "dropp" );
	deepEqual( Stem("dropped"), "drop" );
	deepEqual( Stem("dropper"), "dropper" );
	deepEqual( Stem("droppeth"), "droppeth" );
	deepEqual( Stem("dropping"), "drop" );
	deepEqual( Stem("droppings"), "drop" );
	deepEqual( Stem("drops"), "drop" );
	deepEqual( Stem("dropsied"), "dropsi" );
	deepEqual( Stem("dropsies"), "dropsi" );
	deepEqual( Stem("dropsy"), "dropsi" );
	deepEqual( Stem("dropt"), "dropt" );
	deepEqual( Stem("dross"), "dross" );
	deepEqual( Stem("drossy"), "drossi" );
	deepEqual( Stem("drought"), "drought" );
	deepEqual( Stem("drove"), "drove" );
	deepEqual( Stem("droven"), "droven" );
	deepEqual( Stem("drovier"), "drovier" );
	deepEqual( Stem("drown"), "drown" );
	deepEqual( Stem("drowned"), "drown" );
	deepEqual( Stem("drowning"), "drown" );
	deepEqual( Stem("drowns"), "drown" );
	deepEqual( Stem("drows"), "drow" );
	deepEqual( Stem("drowse"), "drows" );
	deepEqual( Stem("drowsily"), "drowsili" );
	deepEqual( Stem("drowsiness"), "drowsi" );
	deepEqual( Stem("drowsy"), "drowsi" );
	deepEqual( Stem("drudge"), "drudg" );
	deepEqual( Stem("drudgery"), "drudgeri" );
	deepEqual( Stem("drudges"), "drudg" );
	deepEqual( Stem("drug"), "drug" );
	deepEqual( Stem("drugg"), "drugg" );
	deepEqual( Stem("drugs"), "drug" );
	deepEqual( Stem("druid"), "druid" );
	deepEqual( Stem("drum"), "drum" );
	deepEqual( Stem("drumble"), "drumbl" );
	deepEqual( Stem("drummer"), "drummer" );
	deepEqual( Stem("drumming"), "drum" );
	deepEqual( Stem("drums"), "drum" );
	deepEqual( Stem("drunk"), "drunk" );
	deepEqual( Stem("drunkard"), "drunkard" );
	deepEqual( Stem("drunkards"), "drunkard" );
	deepEqual( Stem("drunken"), "drunken" );
	deepEqual( Stem("drunkenly"), "drunkenli" );
	deepEqual( Stem("drunkenness"), "drunken" );
	deepEqual( Stem("drury"), "druri" );
	deepEqual( Stem("dry"), "dry" );
	deepEqual( Stem("dryly"), "dryli" );
	deepEqual( Stem("dryness"), "dryness" );
	deepEqual( Stem("drysalter"), "drysalt" );
	deepEqual( Stem("dst"), "dst" );
	deepEqual( Stem("du"), "du" );
	deepEqual( Stem("dub"), "dub" );
	deepEqual( Stem("dubb"), "dubb" );
	deepEqual( Stem("dubbed"), "dub" );
	deepEqual( Stem("dubious"), "dubiou" );
	deepEqual( Stem("dubiously"), "dubious" );
	deepEqual( Stem("dublin"), "dublin" );
	deepEqual( Stem("duc"), "duc" );
	deepEqual( Stem("ducal"), "ducal" );
	deepEqual( Stem("ducat"), "ducat" );
	deepEqual( Stem("ducats"), "ducat" );
	deepEqual( Stem("ducdame"), "ducdam" );
	deepEqual( Stem("duchess"), "duchess" );
	deepEqual( Stem("duchesses"), "duchess" );
	deepEqual( Stem("duchies"), "duchi" );
	deepEqual( Stem("duchy"), "duchi" );
	deepEqual( Stem("duck"), "duck" );
	deepEqual( Stem("ducked"), "duck" );
	deepEqual( Stem("ducking"), "duck" );
	deepEqual( Stem("ducks"), "duck" );
	deepEqual( Stem("dudgeon"), "dudgeon" );
	deepEqual( Stem("due"), "due" );
	deepEqual( Stem("duel"), "duel" );
	deepEqual( Stem("duelling"), "duell" );
	deepEqual( Stem("duellist"), "duellist" );
	deepEqual( Stem("duello"), "duello" );
	deepEqual( Stem("duels"), "duel" );
	deepEqual( Stem("duer"), "duer" );
	deepEqual( Stem("dues"), "due" );
	deepEqual( Stem("duet"), "duet" );
	deepEqual( Stem("duets"), "duet" );
	deepEqual( Stem("duff"), "duff" );
	deepEqual( Stem("dug"), "dug" );
	deepEqual( Stem("dugs"), "dug" );
	deepEqual( Stem("duke"), "duke" );
	deepEqual( Stem("dukedom"), "dukedom" );
	deepEqual( Stem("dukedoms"), "dukedom" );
	deepEqual( Stem("dukes"), "duke" );
	deepEqual( Stem("dulce"), "dulc" );
	deepEqual( Stem("dulcet"), "dulcet" );
	deepEqual( Stem("dulche"), "dulch" );
	deepEqual( Stem("dull"), "dull" );
	deepEqual( Stem("dullard"), "dullard" );
	deepEqual( Stem("duller"), "duller" );
	deepEqual( Stem("dullest"), "dullest" );
	deepEqual( Stem("dulling"), "dull" );
	deepEqual( Stem("dullness"), "dull" );
	deepEqual( Stem("dulls"), "dull" );
	deepEqual( Stem("dully"), "dulli" );
	deepEqual( Stem("dulness"), "dul" );
	deepEqual( Stem("dulwich"), "dulwich" );
	deepEqual( Stem("duly"), "duli" );
	deepEqual( Stem("dumain"), "dumain" );
	deepEqual( Stem("dumb"), "dumb" );
	deepEqual( Stem("dumbe"), "dumb" );
	deepEqual( Stem("dumbly"), "dumbli" );
	deepEqual( Stem("dumbness"), "dumb" );
	deepEqual( Stem("dumdum"), "dumdum" );
	deepEqual( Stem("dump"), "dump" );
	deepEqual( Stem("dumps"), "dump" );
	deepEqual( Stem("dumpy"), "dumpi" );
	deepEqual( Stem("dun"), "dun" );
	deepEqual( Stem("duncan"), "duncan" );
	deepEqual( Stem("dundas"), "dunda" );
	deepEqual( Stem("dung"), "dung" );
	deepEqual( Stem("dungeon"), "dungeon" );
	deepEqual( Stem("dungeons"), "dungeon" );
	deepEqual( Stem("dunghill"), "dunghil" );
	deepEqual( Stem("dunghills"), "dunghil" );
	deepEqual( Stem("dungy"), "dungi" );
	deepEqual( Stem("dunkirk"), "dunkirk" );
	deepEqual( Stem("dunnest"), "dunnest" );
	deepEqual( Stem("dunning"), "dun" );
	deepEqual( Stem("duns"), "dun" );
	deepEqual( Stem("dunsinane"), "dunsinan" );
	deepEqual( Stem("dunsmore"), "dunsmor" );
	deepEqual( Stem("dunstable"), "dunstabl" );
	deepEqual( Stem("dupp"), "dupp" );
	deepEqual( Stem("durable"), "durabl" );
	deepEqual( Stem("durance"), "duranc" );
	deepEqual( Stem("duration"), "durat" );
	deepEqual( Stem("during"), "dure" );
	deepEqual( Stem("durst"), "durst" );
	deepEqual( Stem("dusky"), "duski" );
	deepEqual( Stem("dust"), "dust" );
	deepEqual( Stem("dusted"), "dust" );
	deepEqual( Stem("dusty"), "dusti" );
	deepEqual( Stem("dutch"), "dutch" );
	deepEqual( Stem("dutchman"), "dutchman" );
	deepEqual( Stem("duteous"), "duteou" );
	deepEqual( Stem("duties"), "duti" );
	deepEqual( Stem("dutiful"), "duti" );
	deepEqual( Stem("dutifully"), "dutifulli" );
	deepEqual( Stem("dutton"), "dutton" );
	deepEqual( Stem("duty"), "duti" );
	deepEqual( Stem("dwarf"), "dwarf" );
	deepEqual( Stem("dwarfish"), "dwarfish" );
	deepEqual( Stem("dwell"), "dwell" );
	deepEqual( Stem("dwellers"), "dweller" );
	deepEqual( Stem("dwelling"), "dwell" );
	deepEqual( Stem("dwells"), "dwell" );
	deepEqual( Stem("dwelt"), "dwelt" );
	deepEqual( Stem("dwindle"), "dwindl" );
	deepEqual( Stem("dwindling"), "dwindl" );
	deepEqual( Stem("dy"), "dy" );
	deepEqual( Stem("dye"), "dye" );
	deepEqual( Stem("dyed"), "dy" );
	deepEqual( Stem("dyer"), "dyer" );
	deepEqual( Stem("dying"), "dy" );
	deepEqual( Stem("dykes"), "dyke" );
	deepEqual( Stem("e"), "e" );
	deepEqual( Stem("each"), "each" );
	deepEqual( Stem("eager"), "eager" );
	deepEqual( Stem("eagerly"), "eagerli" );
	deepEqual( Stem("eagerness"), "eager" );
	deepEqual( Stem("eagle"), "eagl" );
	deepEqual( Stem("eagles"), "eagl" );
	deepEqual( Stem("ealing"), "eal" );
	deepEqual( Stem("ealth"), "ealth" );
	deepEqual( Stem("eaning"), "ean" );
	deepEqual( Stem("eanlings"), "eanl" );
	deepEqual( Stem("ear"), "ear" );
	deepEqual( Stem("eared"), "ear" );
	deepEqual( Stem("earing"), "ear" );
	deepEqual( Stem("earl"), "earl" );
	deepEqual( Stem("earldom"), "earldom" );
	deepEqual( Stem("earlier"), "earlier" );
	deepEqual( Stem("earliest"), "earliest" );
	deepEqual( Stem("earliness"), "earli" );
	deepEqual( Stem("earls"), "earl" );
	deepEqual( Stem("early"), "earli" );
	deepEqual( Stem("earn"), "earn" );
	deepEqual( Stem("earned"), "earn" );
	deepEqual( Stem("earnest"), "earnest" );
	deepEqual( Stem("earnestly"), "earnestli" );
	deepEqual( Stem("earnestness"), "earnest" );
	deepEqual( Stem("earnings"), "earn" );
	deepEqual( Stem("earns"), "earn" );
	deepEqual( Stem("earrings"), "ear" );
	deepEqual( Stem("ears"), "ear" );
	deepEqual( Stem("earth"), "earth" );
	deepEqual( Stem("earthen"), "earthen" );
	deepEqual( Stem("earthenware"), "earthenwar" );
	deepEqual( Stem("earthlier"), "earthlier" );
	deepEqual( Stem("earthly"), "earthli" );
	deepEqual( Stem("earthquake"), "earthquak" );
	deepEqual( Stem("earthquakes"), "earthquak" );
	deepEqual( Stem("earthy"), "earthi" );
	deepEqual( Stem("eas"), "ea" );
	deepEqual( Stem("ease"), "eas" );
	deepEqual( Stem("eased"), "eas" );
	deepEqual( Stem("easeful"), "eas" );
	deepEqual( Stem("eases"), "eas" );
	deepEqual( Stem("easier"), "easier" );
	deepEqual( Stem("easiest"), "easiest" );
	deepEqual( Stem("easiliest"), "easiliest" );
	deepEqual( Stem("easily"), "easili" );
	deepEqual( Stem("easiness"), "easi" );
	deepEqual( Stem("easing"), "eas" );
	deepEqual( Stem("east"), "east" );
	deepEqual( Stem("eastbourne"), "eastbourn" );
	deepEqual( Stem("eastcheap"), "eastcheap" );
	deepEqual( Stem("easter"), "easter" );
	deepEqual( Stem("eastern"), "eastern" );
	deepEqual( Stem("eastward"), "eastward" );
	deepEqual( Stem("eastwards"), "eastward" );
	deepEqual( Stem("easy"), "easi" );
	deepEqual( Stem("eat"), "eat" );
	deepEqual( Stem("eaten"), "eaten" );
	deepEqual( Stem("eater"), "eater" );
	deepEqual( Stem("eaters"), "eater" );
	deepEqual( Stem("eating"), "eat" );
	deepEqual( Stem("eats"), "eat" );
	deepEqual( Stem("eau"), "eau" );
	deepEqual( Stem("eaux"), "eaux" );
	deepEqual( Stem("eaves"), "eav" );
	deepEqual( Stem("ebb"), "ebb" );
	deepEqual( Stem("ebbing"), "eb" );
	deepEqual( Stem("ebbs"), "ebb" );
	deepEqual( Stem("ebon"), "ebon" );
	deepEqual( Stem("ebony"), "eboni" );
	deepEqual( Stem("ebrew"), "ebrew" );
	deepEqual( Stem("ebullition"), "ebullit" );
	deepEqual( Stem("ebullitions"), "ebullit" );
	deepEqual( Stem("ecarte"), "ecart" );
	deepEqual( Stem("ecce"), "ecc" );
	deepEqual( Stem("eccentricities"), "eccentr" );
	deepEqual( Stem("ecclesiastical"), "ecclesiast" );
	deepEqual( Stem("eccolo"), "eccolo" );
	deepEqual( Stem("echapper"), "echapp" );
	deepEqual( Stem("echo"), "echo" );
	deepEqual( Stem("echoed"), "echo" );
	deepEqual( Stem("echoes"), "echo" );
	deepEqual( Stem("eclaircissement"), "eclairciss" );
	deepEqual( Stem("eclips"), "eclip" );
	deepEqual( Stem("eclipse"), "eclips" );
	deepEqual( Stem("eclipsed"), "eclips" );
	deepEqual( Stem("eclipses"), "eclips" );
	deepEqual( Stem("ecolier"), "ecoli" );
	deepEqual( Stem("economist"), "economist" );
	deepEqual( Stem("economy"), "economi" );
	deepEqual( Stem("ecossais"), "ecossai" );
	deepEqual( Stem("ecossaise"), "ecossais" );
	deepEqual( Stem("ecoutez"), "ecoutez" );
	deepEqual( Stem("ecrased"), "ecras" );
	deepEqual( Stem("ecstacy"), "ecstaci" );
	deepEqual( Stem("ecstasies"), "ecstasi" );
	deepEqual( Stem("ecstasy"), "ecstasi" );
	deepEqual( Stem("ecstatic"), "ecstat" );
	deepEqual( Stem("ecus"), "ecu" );
	deepEqual( Stem("ecuyer"), "ecuy" );
	deepEqual( Stem("eden"), "eden" );
	deepEqual( Stem("edg"), "edg" );
	deepEqual( Stem("edgar"), "edgar" );
	deepEqual( Stem("edge"), "edg" );
	deepEqual( Stem("edged"), "edg" );
	deepEqual( Stem("edgeless"), "edgeless" );
	deepEqual( Stem("edges"), "edg" );
	deepEqual( Stem("edict"), "edict" );
	deepEqual( Stem("edicts"), "edict" );
	deepEqual( Stem("edification"), "edif" );
	deepEqual( Stem("edifice"), "edific" );
	deepEqual( Stem("edifices"), "edific" );
	deepEqual( Stem("edified"), "edifi" );
	deepEqual( Stem("edifies"), "edifi" );
	deepEqual( Stem("edifying"), "edifi" );
	deepEqual( Stem("edinburgh"), "edinburgh" );
	deepEqual( Stem("edition"), "edit" );
	deepEqual( Stem("edm"), "edm" );
	deepEqual( Stem("edmund"), "edmund" );
	deepEqual( Stem("edmunds"), "edmund" );
	deepEqual( Stem("edmundsbury"), "edmundsburi" );
	deepEqual( Stem("educate"), "educ" );
	deepEqual( Stem("educated"), "educ" );
	deepEqual( Stem("educating"), "educ" );
	deepEqual( Stem("education"), "educ" );
	deepEqual( Stem("educational"), "educ" );
	deepEqual( Stem("edward"), "edward" );
	deepEqual( Stem("edwards"), "edward" );
	deepEqual( Stem("ee"), "ee" );
	deepEqual( Stem("eel"), "eel" );
	deepEqual( Stem("eels"), "eel" );
	deepEqual( Stem("ees"), "ee" );
	deepEqual( Stem("effect"), "effect" );
	deepEqual( Stem("effected"), "effect" );
	deepEqual( Stem("effectless"), "effectless" );
	deepEqual( Stem("effects"), "effect" );
	deepEqual( Stem("effectual"), "effectu" );
	deepEqual( Stem("effectually"), "effectu" );
	deepEqual( Stem("effeminate"), "effemin" );
	deepEqual( Stem("effigies"), "effigi" );
	deepEqual( Stem("effort"), "effort" );
	deepEqual( Stem("efforts"), "effort" );
	deepEqual( Stem("effus"), "effu" );
	deepEqual( Stem("effuse"), "effus" );
	deepEqual( Stem("effusion"), "effus" );
	deepEqual( Stem("eftest"), "eftest" );
	deepEqual( Stem("egad"), "egad" );
	deepEqual( Stem("egal"), "egal" );
	deepEqual( Stem("egalite"), "egalit" );
	deepEqual( Stem("egally"), "egal" );
	deepEqual( Stem("egeria"), "egeria" );
	deepEqual( Stem("eget"), "eget" );
	deepEqual( Stem("egeus"), "egeu" );
	deepEqual( Stem("egg"), "egg" );
	deepEqual( Stem("eggs"), "egg" );
	deepEqual( Stem("eggshell"), "eggshel" );
	deepEqual( Stem("eglamour"), "eglamour" );
	deepEqual( Stem("eglantine"), "eglantin" );
	deepEqual( Stem("egma"), "egma" );
	deepEqual( Stem("ego"), "ego" );
	deepEqual( Stem("egotism"), "egot" );
	deepEqual( Stem("egregious"), "egregi" );
	deepEqual( Stem("egregiously"), "egregi" );
	deepEqual( Stem("egress"), "egress" );
	deepEqual( Stem("egypt"), "egypt" );
	deepEqual( Stem("egyptian"), "egyptian" );
	deepEqual( Stem("egyptians"), "egyptian" );
	deepEqual( Stem("eh"), "eh" );
	deepEqual( Stem("eie"), "eie" );
	deepEqual( Stem("eight"), "eight" );
	deepEqual( Stem("eighteen"), "eighteen" );
	deepEqual( Stem("eighteenth"), "eighteenth" );
	deepEqual( Stem("eighth"), "eighth" );
	deepEqual( Stem("eightpence"), "eightpenc" );
	deepEqual( Stem("eightpences"), "eightpenc" );
	deepEqual( Stem("eightpenny"), "eightpenni" );
	deepEqual( Stem("eighty"), "eighti" );
	deepEqual( Stem("eilwagen"), "eilwagen" );
	deepEqual( Stem("einsam"), "einsam" );
	deepEqual( Stem("eisel"), "eisel" );
	deepEqual( Stem("either"), "either" );
	deepEqual( Stem("ejaculate"), "ejacul" );
	deepEqual( Stem("ejaculated"), "ejacul" );
	deepEqual( Stem("ejaculations"), "ejacul" );
	deepEqual( Stem("ejaculatory"), "ejaculatori" );
	deepEqual( Stem("eject"), "eject" );
	deepEqual( Stem("eke"), "ek" );
	deepEqual( Stem("el"), "el" );
	deepEqual( Stem("elaborate"), "elabor" );
	deepEqual( Stem("elaborately"), "elabor" );
	deepEqual( Stem("elapse"), "elaps" );
	deepEqual( Stem("elapsed"), "elaps" );
	deepEqual( Stem("elated"), "elat" );
	deepEqual( Stem("elating"), "elat" );
	deepEqual( Stem("elation"), "elat" );
	deepEqual( Stem("elba"), "elba" );
	deepEqual( Stem("elban"), "elban" );
	deepEqual( Stem("elbe"), "elb" );
	deepEqual( Stem("elbow"), "elbow" );
	deepEqual( Stem("elbows"), "elbow" );
	deepEqual( Stem("eld"), "eld" );
	deepEqual( Stem("elder"), "elder" );
	deepEqual( Stem("elderly"), "elderli" );
	deepEqual( Stem("elders"), "elder" );
	deepEqual( Stem("eldest"), "eldest" );
	deepEqual( Stem("eldon"), "eldon" );
	deepEqual( Stem("eleanor"), "eleanor" );
	deepEqual( Stem("elect"), "elect" );
	deepEqual( Stem("elected"), "elect" );
	deepEqual( Stem("election"), "elect" );
	deepEqual( Stem("electrifying"), "electrifi" );
	deepEqual( Stem("elegance"), "eleg" );
	deepEqual( Stem("elegances"), "eleg" );
	deepEqual( Stem("elegancy"), "eleg" );
	deepEqual( Stem("elegant"), "eleg" );
	deepEqual( Stem("elegantly"), "elegantli" );
	deepEqual( Stem("elegies"), "elegi" );
	deepEqual( Stem("element"), "element" );
	deepEqual( Stem("elements"), "element" );
	deepEqual( Stem("elephant"), "eleph" );
	deepEqual( Stem("elephants"), "eleph" );
	deepEqual( Stem("elevated"), "elev" );
	deepEqual( Stem("eleven"), "eleven" );
	deepEqual( Stem("eleventh"), "eleventh" );
	deepEqual( Stem("elf"), "elf" );
	deepEqual( Stem("elflocks"), "elflock" );
	deepEqual( Stem("eli"), "eli" );
	deepEqual( Stem("eliads"), "eliad" );
	deepEqual( Stem("elicited"), "elicit" );
	deepEqual( Stem("eligible"), "elig" );
	deepEqual( Stem("eliminated"), "elimin" );
	deepEqual( Stem("elinor"), "elinor" );
	deepEqual( Stem("elixir"), "elixir" );
	deepEqual( Stem("eliza"), "eliza" );
	deepEqual( Stem("elizabeth"), "elizabeth" );
	deepEqual( Stem("ell"), "ell" );
	deepEqual( Stem("elle"), "ell" );
	deepEqual( Stem("ellen"), "ellen" );
	deepEqual( Stem("elliotson"), "elliotson" );
	deepEqual( Stem("elliston"), "elliston" );
	deepEqual( Stem("elm"), "elm" );
	deepEqual( Stem("elms"), "elm" );
	deepEqual( Stem("elopement"), "elop" );
	deepEqual( Stem("eloquence"), "eloqu" );
	deepEqual( Stem("eloquent"), "eloqu" );
	deepEqual( Stem("else"), "els" );
	deepEqual( Stem("elsewhere"), "elsewher" );
	deepEqual( Stem("elsinore"), "elsinor" );
	deepEqual( Stem("eltham"), "eltham" );
	deepEqual( Stem("elude"), "elud" );
	deepEqual( Stem("eluded"), "elud" );
	deepEqual( Stem("elves"), "elv" );
	deepEqual( Stem("elvino"), "elvino" );
	deepEqual( Stem("elvish"), "elvish" );
	deepEqual( Stem("ely"), "eli" );
	deepEqual( Stem("elysium"), "elysium" );
	deepEqual( Stem("em"), "em" );
	deepEqual( Stem("emancipation"), "emancip" );
	deepEqual( Stem("emballing"), "embal" );
	deepEqual( Stem("embalm"), "embalm" );
	deepEqual( Stem("embalms"), "embalm" );
	deepEqual( Stem("embark"), "embark" );
	deepEqual( Stem("embarked"), "embark" );
	deepEqual( Stem("embarks"), "embark" );
	deepEqual( Stem("embarquements"), "embarqu" );
	deepEqual( Stem("embarrassed"), "embarrass" );
	deepEqual( Stem("embarrassments"), "embarrass" );
	deepEqual( Stem("embassade"), "embassad" );
	deepEqual( Stem("embassage"), "embassag" );
	deepEqual( Stem("embassies"), "embassi" );
	deepEqual( Stem("embassy"), "embassi" );
	deepEqual( Stem("embattailed"), "embattail" );
	deepEqual( Stem("embattl"), "embattl" );
	deepEqual( Stem("embattle"), "embattl" );
	deepEqual( Stem("embay"), "embai" );
	deepEqual( Stem("embellished"), "embellish" );
	deepEqual( Stem("embers"), "ember" );
	deepEqual( Stem("emblaze"), "emblaz" );
	deepEqual( Stem("emblazoned"), "emblazon" );
	deepEqual( Stem("emblem"), "emblem" );
	deepEqual( Stem("emblems"), "emblem" );
	deepEqual( Stem("embodied"), "embodi" );
	deepEqual( Stem("embold"), "embold" );
	deepEqual( Stem("emboldens"), "embolden" );
	deepEqual( Stem("emboss"), "emboss" );
	deepEqual( Stem("embossed"), "emboss" );
	deepEqual( Stem("embounded"), "embound" );
	deepEqual( Stem("embowel"), "embowel" );
	deepEqual( Stem("embowell"), "embowel" );
	deepEqual( Stem("embrac"), "embrac" );
	deepEqual( Stem("embrace"), "embrac" );
	deepEqual( Stem("embraced"), "embrac" );
	deepEqual( Stem("embracement"), "embrac" );
	deepEqual( Stem("embracements"), "embrac" );
	deepEqual( Stem("embraces"), "embrac" );
	deepEqual( Stem("embracing"), "embrac" );
	deepEqual( Stem("embrasures"), "embrasur" );
	deepEqual( Stem("embroider"), "embroid" );
	deepEqual( Stem("embroidered"), "embroid" );
	deepEqual( Stem("embroidery"), "embroideri" );
	deepEqual( Stem("emendations"), "emend" );
	deepEqual( Stem("emerged"), "emerg" );
	deepEqual( Stem("emergencies"), "emerg" );
	deepEqual( Stem("emerging"), "emerg" );
	deepEqual( Stem("emhracing"), "emhrac" );
	deepEqual( Stem("emigrants"), "emigr" );
	deepEqual( Stem("emigrate"), "emigr" );
	deepEqual( Stem("emigration"), "emigr" );
	deepEqual( Stem("emigres"), "emigr" );
	deepEqual( Stem("emilia"), "emilia" );
	deepEqual( Stem("emily"), "emili" );
	deepEqual( Stem("eminence"), "emin" );
	deepEqual( Stem("eminent"), "emin" );
	deepEqual( Stem("eminently"), "emin" );
	deepEqual( Stem("emissaries"), "emissari" );
	deepEqual( Stem("emissary"), "emissari" );
	deepEqual( Stem("emma"), "emma" );
	deepEqual( Stem("emmanuel"), "emmanuel" );
	deepEqual( Stem("emmy"), "emmi" );
	deepEqual( Stem("emnity"), "emniti" );
	deepEqual( Stem("emotion"), "emot" );
	deepEqual( Stem("emotions"), "emot" );
	deepEqual( Stem("empale"), "empal" );
	deepEqual( Stem("emperal"), "emper" );
	deepEqual( Stem("emperess"), "emperess" );
	deepEqual( Stem("empereur"), "empereur" );
	deepEqual( Stem("emperial"), "emperi" );
	deepEqual( Stem("emperor"), "emperor" );
	deepEqual( Stem("emperors"), "emperor" );
	deepEqual( Stem("empery"), "emperi" );
	deepEqual( Stem("emphasis"), "emphasi" );
	deepEqual( Stem("empire"), "empir" );
	deepEqual( Stem("empires"), "empir" );
	deepEqual( Stem("empirics"), "empir" );
	deepEqual( Stem("empiricutic"), "empiricut" );
	deepEqual( Stem("empleached"), "empleach" );
	deepEqual( Stem("employ"), "emploi" );
	deepEqual( Stem("employed"), "emploi" );
	deepEqual( Stem("employer"), "employ" );
	deepEqual( Stem("employers"), "employ" );
	deepEqual( Stem("employing"), "emploi" );
	deepEqual( Stem("employment"), "employ" );
	deepEqual( Stem("employments"), "employ" );
	deepEqual( Stem("employs"), "emploi" );
	deepEqual( Stem("empoison"), "empoison" );
	deepEqual( Stem("emporium"), "emporium" );
	deepEqual( Stem("empowered"), "empow" );
	deepEqual( Stem("empress"), "empress" );
	deepEqual( Stem("emptied"), "empti" );
	deepEqual( Stem("emptier"), "emptier" );
	deepEqual( Stem("empties"), "empti" );
	deepEqual( Stem("emptiness"), "empti" );
	deepEqual( Stem("empty"), "empti" );
	deepEqual( Stem("emptying"), "empti" );
	deepEqual( Stem("ems"), "em" );
	deepEqual( Stem("emulate"), "emul" );
	deepEqual( Stem("emulation"), "emul" );
	deepEqual( Stem("emulations"), "emul" );
	deepEqual( Stem("emulator"), "emul" );
	deepEqual( Stem("emulous"), "emul" );
	deepEqual( Stem("en"), "en" );
	deepEqual( Stem("enable"), "enabl" );
	deepEqual( Stem("enabled"), "enabl" );
	deepEqual( Stem("enabling"), "enabl" );
	deepEqual( Stem("enact"), "enact" );
	deepEqual( Stem("enacted"), "enact" );
	deepEqual( Stem("enacting"), "enact" );
	deepEqual( Stem("enacts"), "enact" );
	deepEqual( Stem("enactures"), "enactur" );
	deepEqual( Stem("enamel"), "enamel" );
	deepEqual( Stem("enamell"), "enamel" );
	deepEqual( Stem("enamelled"), "enamel" );
	deepEqual( Stem("enamour"), "enamour" );
	deepEqual( Stem("enamoured"), "enamour" );
	deepEqual( Stem("enanmour"), "enanmour" );
	deepEqual( Stem("encamp"), "encamp" );
	deepEqual( Stem("encamped"), "encamp" );
	deepEqual( Stem("encave"), "encav" );
	deepEqual( Stem("enceladus"), "enceladu" );
	deepEqual( Stem("enchaf"), "enchaf" );
	deepEqual( Stem("enchafed"), "enchaf" );
	deepEqual( Stem("enchant"), "enchant" );
	deepEqual( Stem("enchanted"), "enchant" );
	deepEqual( Stem("enchanting"), "enchant" );
	deepEqual( Stem("enchantingly"), "enchantingli" );
	deepEqual( Stem("enchantment"), "enchant" );
	deepEqual( Stem("enchantress"), "enchantress" );
	deepEqual( Stem("enchants"), "enchant" );
	deepEqual( Stem("enchas"), "encha" );
	deepEqual( Stem("encircle"), "encircl" );
	deepEqual( Stem("encircled"), "encircl" );
	deepEqual( Stem("enclos"), "enclo" );
	deepEqual( Stem("enclose"), "enclos" );
	deepEqual( Stem("enclosed"), "enclos" );
	deepEqual( Stem("encloses"), "enclos" );
	deepEqual( Stem("encloseth"), "encloseth" );
	deepEqual( Stem("enclosing"), "enclos" );
	deepEqual( Stem("enclouded"), "encloud" );
	deepEqual( Stem("encompass"), "encompass" );
	deepEqual( Stem("encompassed"), "encompass" );
	deepEqual( Stem("encompasseth"), "encompasseth" );
	deepEqual( Stem("encompassment"), "encompass" );
	deepEqual( Stem("encore"), "encor" );
	deepEqual( Stem("encoring"), "encor" );
	deepEqual( Stem("encorporal"), "encorpor" );
	deepEqual( Stem("encount"), "encount" );
	deepEqual( Stem("encounter"), "encount" );
	deepEqual( Stem("encountered"), "encount" );
	deepEqual( Stem("encountering"), "encount" );
	deepEqual( Stem("encounters"), "encount" );
	deepEqual( Stem("encourage"), "encourag" );
	deepEqual( Stem("encouraged"), "encourag" );
	deepEqual( Stem("encouragement"), "encourag" );
	deepEqual( Stem("encouraging"), "encourag" );
	deepEqual( Stem("encouragingly"), "encouragingli" );
	deepEqual( Stem("encrimsoned"), "encrimson" );
	deepEqual( Stem("encroaching"), "encroach" );
	deepEqual( Stem("encumb"), "encumb" );
	deepEqual( Stem("encumbered"), "encumb" );
	deepEqual( Stem("end"), "end" );
	deepEqual( Stem("endamage"), "endamag" );
	deepEqual( Stem("endamagement"), "endamag" );
	deepEqual( Stem("endanger"), "endang" );
	deepEqual( Stem("endangering"), "endang" );
	deepEqual( Stem("endart"), "endart" );
	deepEqual( Stem("endear"), "endear" );
	deepEqual( Stem("endeared"), "endear" );
	deepEqual( Stem("endearment"), "endear" );
	deepEqual( Stem("endearments"), "endear" );
	deepEqual( Stem("endeavour"), "endeavour" );
	deepEqual( Stem("endeavoured"), "endeavour" );
	deepEqual( Stem("endeavouring"), "endeavour" );
	deepEqual( Stem("endeavours"), "endeavour" );
	deepEqual( Stem("ended"), "end" );
	deepEqual( Stem("ender"), "ender" );
	deepEqual( Stem("ending"), "end" );
	deepEqual( Stem("endings"), "end" );
	deepEqual( Stem("endite"), "endit" );
	deepEqual( Stem("endless"), "endless" );
	deepEqual( Stem("endow"), "endow" );
	deepEqual( Stem("endowed"), "endow" );
	deepEqual( Stem("endowments"), "endow" );
	deepEqual( Stem("endows"), "endow" );
	deepEqual( Stem("ends"), "end" );
	deepEqual( Stem("endu"), "endu" );
	deepEqual( Stem("endue"), "endu" );
	deepEqual( Stem("endur"), "endur" );
	deepEqual( Stem("endurance"), "endur" );
	deepEqual( Stem("endure"), "endur" );
	deepEqual( Stem("endured"), "endur" );
	deepEqual( Stem("endures"), "endur" );
	deepEqual( Stem("enduring"), "endur" );
	deepEqual( Stem("endymion"), "endymion" );
	deepEqual( Stem("eneas"), "enea" );
	deepEqual( Stem("enemies"), "enemi" );
	deepEqual( Stem("enemy"), "enemi" );
	deepEqual( Stem("energetic"), "energet" );
	deepEqual( Stem("energetically"), "energet" );
	deepEqual( Stem("energies"), "energi" );
	deepEqual( Stem("energy"), "energi" );
	deepEqual( Stem("enernies"), "enerni" );
	deepEqual( Stem("enew"), "enew" );
	deepEqual( Stem("enfant"), "enfant" );
	deepEqual( Stem("enfeebled"), "enfeebl" );
	deepEqual( Stem("enfeebles"), "enfeebl" );
	deepEqual( Stem("enfeoff"), "enfeoff" );
	deepEqual( Stem("enfetter"), "enfett" );
	deepEqual( Stem("enfoldings"), "enfold" );
	deepEqual( Stem("enforc"), "enforc" );
	deepEqual( Stem("enforce"), "enforc" );
	deepEqual( Stem("enforced"), "enforc" );
	deepEqual( Stem("enforcedly"), "enforcedli" );
	deepEqual( Stem("enforcement"), "enforc" );
	deepEqual( Stem("enforces"), "enforc" );
	deepEqual( Stem("enforcest"), "enforcest" );
	deepEqual( Stem("enfranched"), "enfranch" );
	deepEqual( Stem("enfranchis"), "enfranchi" );
	deepEqual( Stem("enfranchise"), "enfranchis" );
	deepEqual( Stem("enfranchised"), "enfranchis" );
	deepEqual( Stem("enfranchisement"), "enfranchis" );
	deepEqual( Stem("enfreed"), "enfre" );
	deepEqual( Stem("enfreedoming"), "enfreedom" );
	deepEqual( Stem("engag"), "engag" );
	deepEqual( Stem("engage"), "engag" );
	deepEqual( Stem("engaged"), "engag" );
	deepEqual( Stem("engagement"), "engag" );
	deepEqual( Stem("engagements"), "engag" );
	deepEqual( Stem("engaging"), "engag" );
	deepEqual( Stem("engaol"), "engaol" );
	deepEqual( Stem("engend"), "engend" );
	deepEqual( Stem("engender"), "engend" );
	deepEqual( Stem("engenders"), "engend" );
	deepEqual( Stem("engilds"), "engild" );
	deepEqual( Stem("engine"), "engin" );
	deepEqual( Stem("engineer"), "engin" );
	deepEqual( Stem("engineers"), "engin" );
	deepEqual( Stem("enginer"), "engin" );
	deepEqual( Stem("engines"), "engin" );
	deepEqual( Stem("engirt"), "engirt" );
	deepEqual( Stem("england"), "england" );
	deepEqual( Stem("englanderinn"), "englanderinn" );
	deepEqual( Stem("english"), "english" );
	deepEqual( Stem("englishman"), "englishman" );
	deepEqual( Stem("englishmen"), "englishmen" );
	deepEqual( Stem("englishwomen"), "englishwomen" );
	deepEqual( Stem("engluts"), "englut" );
	deepEqual( Stem("englutted"), "englut" );
	deepEqual( Stem("engoument"), "engoument" );
	deepEqual( Stem("engraffed"), "engraf" );
	deepEqual( Stem("engraft"), "engraft" );
	deepEqual( Stem("engrafted"), "engraft" );
	deepEqual( Stem("engrav"), "engrav" );
	deepEqual( Stem("engrave"), "engrav" );
	deepEqual( Stem("engraved"), "engrav" );
	deepEqual( Stem("engraven"), "engraven" );
	deepEqual( Stem("engross"), "engross" );
	deepEqual( Stem("engrossed"), "engross" );
	deepEqual( Stem("engrossest"), "engrossest" );
	deepEqual( Stem("engrossing"), "engross" );
	deepEqual( Stem("engrossments"), "engross" );
	deepEqual( Stem("enguard"), "enguard" );
	deepEqual( Stem("enhanced"), "enhanc" );
	deepEqual( Stem("enigma"), "enigma" );
	deepEqual( Stem("enigmatical"), "enigmat" );
	deepEqual( Stem("enigmatically"), "enigmat" );
	deepEqual( Stem("enjoin"), "enjoin" );
	deepEqual( Stem("enjoined"), "enjoin" );
	deepEqual( Stem("enjoining"), "enjoin" );
	deepEqual( Stem("enjoy"), "enjoi" );
	deepEqual( Stem("enjoyed"), "enjoi" );
	deepEqual( Stem("enjoyer"), "enjoy" );
	deepEqual( Stem("enjoying"), "enjoi" );
	deepEqual( Stem("enjoyment"), "enjoy" );
	deepEqual( Stem("enjoyments"), "enjoy" );
	deepEqual( Stem("enjoys"), "enjoi" );
	deepEqual( Stem("enkindle"), "enkindl" );
	deepEqual( Stem("enkindled"), "enkindl" );
	deepEqual( Stem("enlard"), "enlard" );
	deepEqual( Stem("enlarg"), "enlarg" );
	deepEqual( Stem("enlarge"), "enlarg" );
	deepEqual( Stem("enlarged"), "enlarg" );
	deepEqual( Stem("enlargement"), "enlarg" );
	deepEqual( Stem("enlargeth"), "enlargeth" );
	deepEqual( Stem("enlighten"), "enlighten" );
	deepEqual( Stem("enlightened"), "enlighten" );
	deepEqual( Stem("enlink"), "enlink" );
	deepEqual( Stem("enlist"), "enlist" );
	deepEqual( Stem("enlisted"), "enlist" );
	deepEqual( Stem("enliven"), "enliven" );
	deepEqual( Stem("enlivened"), "enliven" );
	deepEqual( Stem("enlivening"), "enliven" );
	deepEqual( Stem("enmesh"), "enmesh" );
	deepEqual( Stem("enmities"), "enmiti" );
	deepEqual( Stem("enmity"), "enmiti" );
	deepEqual( Stem("ennoble"), "ennobl" );
	deepEqual( Stem("ennobled"), "ennobl" );
	deepEqual( Stem("ennui"), "ennui" );
	deepEqual( Stem("ennuis"), "ennui" );
	deepEqual( Stem("enobarb"), "enobarb" );
	deepEqual( Stem("enobarbus"), "enobarbu" );
	deepEqual( Stem("enon"), "enon" );
	deepEqual( Stem("enormity"), "enorm" );
	deepEqual( Stem("enormous"), "enorm" );
	deepEqual( Stem("enormously"), "enorm" );
	deepEqual( Stem("enough"), "enough" );
	deepEqual( Stem("enow"), "enow" );
	deepEqual( Stem("enpatron"), "enpatron" );
	deepEqual( Stem("enpierced"), "enpierc" );
	deepEqual( Stem("enquir"), "enquir" );
	deepEqual( Stem("enquire"), "enquir" );
	deepEqual( Stem("enquired"), "enquir" );
	deepEqual( Stem("enrag"), "enrag" );
	deepEqual( Stem("enrage"), "enrag" );
	deepEqual( Stem("enraged"), "enrag" );
	deepEqual( Stem("enrages"), "enrag" );
	deepEqual( Stem("enrank"), "enrank" );
	deepEqual( Stem("enrapt"), "enrapt" );
	deepEqual( Stem("enraptured"), "enraptur" );
	deepEqual( Stem("enrich"), "enrich" );
	deepEqual( Stem("enriched"), "enrich" );
	deepEqual( Stem("enriches"), "enrich" );
	deepEqual( Stem("enridged"), "enridg" );
	deepEqual( Stem("enrings"), "enr" );
	deepEqual( Stem("enrob"), "enrob" );
	deepEqual( Stem("enrobe"), "enrob" );
	deepEqual( Stem("enroll"), "enrol" );
	deepEqual( Stem("enrolled"), "enrol" );
	deepEqual( Stem("enrooted"), "enroot" );
	deepEqual( Stem("enrounded"), "enround" );
	deepEqual( Stem("enschedul"), "enschedul" );
	deepEqual( Stem("ensconce"), "ensconc" );
	deepEqual( Stem("ensconced"), "ensconc" );
	deepEqual( Stem("ensconcing"), "ensconc" );
	deepEqual( Stem("enseamed"), "enseam" );
	deepEqual( Stem("ensear"), "ensear" );
	deepEqual( Stem("enseigne"), "enseign" );
	deepEqual( Stem("enseignez"), "enseignez" );
	deepEqual( Stem("ensemble"), "ensembl" );
	deepEqual( Stem("enshelter"), "enshelt" );
	deepEqual( Stem("enshielded"), "enshield" );
	deepEqual( Stem("enshrines"), "enshrin" );
	deepEqual( Stem("ensign"), "ensign" );
	deepEqual( Stem("ensigns"), "ensign" );
	deepEqual( Stem("enskied"), "enski" );
	deepEqual( Stem("ensman"), "ensman" );
	deepEqual( Stem("ensnare"), "ensnar" );
	deepEqual( Stem("ensnared"), "ensnar" );
	deepEqual( Stem("ensnareth"), "ensnareth" );
	deepEqual( Stem("ensteep"), "ensteep" );
	deepEqual( Stem("ensu"), "ensu" );
	deepEqual( Stem("ensue"), "ensu" );
	deepEqual( Stem("ensued"), "ensu" );
	deepEqual( Stem("ensues"), "ensu" );
	deepEqual( Stem("ensuing"), "ensu" );
	deepEqual( Stem("enswathed"), "enswath" );
	deepEqual( Stem("ent"), "ent" );
	deepEqual( Stem("entail"), "entail" );
	deepEqual( Stem("entame"), "entam" );
	deepEqual( Stem("entangled"), "entangl" );
	deepEqual( Stem("entangles"), "entangl" );
	deepEqual( Stem("entendre"), "entendr" );
	deepEqual( Stem("enter"), "enter" );
	deepEqual( Stem("entered"), "enter" );
	deepEqual( Stem("entering"), "enter" );
	deepEqual( Stem("enterprise"), "enterpris" );
	deepEqual( Stem("enterprises"), "enterpris" );
	deepEqual( Stem("enterprising"), "enterpris" );
	deepEqual( Stem("enters"), "enter" );
	deepEqual( Stem("entertain"), "entertain" );
	deepEqual( Stem("entertained"), "entertain" );
	deepEqual( Stem("entertainer"), "entertain" );
	deepEqual( Stem("entertaining"), "entertain" );
	deepEqual( Stem("entertainment"), "entertain" );
	deepEqual( Stem("entertainments"), "entertain" );
	deepEqual( Stem("entertains"), "entertain" );
	deepEqual( Stem("enthrall"), "enthral" );
	deepEqual( Stem("enthralled"), "enthral" );
	deepEqual( Stem("enthron"), "enthron" );
	deepEqual( Stem("enthroned"), "enthron" );
	deepEqual( Stem("enthusiasm"), "enthusiasm" );
	deepEqual( Stem("enthusiast"), "enthusiast" );
	deepEqual( Stem("enthusiastic"), "enthusiast" );
	deepEqual( Stem("enthusiastically"), "enthusiast" );
	deepEqual( Stem("entice"), "entic" );
	deepEqual( Stem("enticements"), "entic" );
	deepEqual( Stem("enticing"), "entic" );
	deepEqual( Stem("entire"), "entir" );
	deepEqual( Stem("entirely"), "entir" );
	deepEqual( Stem("entitle"), "entitl" );
	deepEqual( Stem("entitled"), "entitl" );
	deepEqual( Stem("entitling"), "entitl" );
	deepEqual( Stem("entomb"), "entomb" );
	deepEqual( Stem("entombed"), "entomb" );
	deepEqual( Stem("entomological"), "entomolog" );
	deepEqual( Stem("entrails"), "entrail" );
	deepEqual( Stem("entrance"), "entranc" );
	deepEqual( Stem("entrances"), "entranc" );
	deepEqual( Stem("entrap"), "entrap" );
	deepEqual( Stem("entrapp"), "entrapp" );
	deepEqual( Stem("entre"), "entr" );
	deepEqual( Stem("entreat"), "entreat" );
	deepEqual( Stem("entreated"), "entreat" );
	deepEqual( Stem("entreaties"), "entreati" );
	deepEqual( Stem("entreating"), "entreat" );
	deepEqual( Stem("entreatments"), "entreat" );
	deepEqual( Stem("entreats"), "entreat" );
	deepEqual( Stem("entreaty"), "entreati" );
	deepEqual( Stem("entrechats"), "entrechat" );
	deepEqual( Stem("entree"), "entre" );
	deepEqual( Stem("entrees"), "entre" );
	deepEqual( Stem("entrench"), "entrench" );
	deepEqual( Stem("entresol"), "entresol" );
	deepEqual( Stem("entrez"), "entrez" );
	deepEqual( Stem("entrusted"), "entrust" );
	deepEqual( Stem("entry"), "entri" );
	deepEqual( Stem("entwist"), "entwist" );
	deepEqual( Stem("enumerated"), "enumer" );
	deepEqual( Stem("enumeration"), "enumer" );
	deepEqual( Stem("envelop"), "envelop" );
	deepEqual( Stem("envelope"), "envelop" );
	deepEqual( Stem("enveloped"), "envelop" );
	deepEqual( Stem("envelopes"), "envelop" );
	deepEqual( Stem("envenom"), "envenom" );
	deepEqual( Stem("envenomed"), "envenom" );
	deepEqual( Stem("envenoms"), "envenom" );
	deepEqual( Stem("envied"), "envi" );
	deepEqual( Stem("envies"), "envi" );
	deepEqual( Stem("envious"), "enviou" );
	deepEqual( Stem("enviously"), "envious" );
	deepEqual( Stem("environ"), "environ" );
	deepEqual( Stem("environed"), "environ" );
	deepEqual( Stem("envoy"), "envoi" );
	deepEqual( Stem("envy"), "envi" );
	deepEqual( Stem("envying"), "envi" );
	deepEqual( Stem("enwheel"), "enwheel" );
	deepEqual( Stem("enwombed"), "enwomb" );
	deepEqual( Stem("enwraps"), "enwrap" );
	deepEqual( Stem("eothen"), "eothen" );
	deepEqual( Stem("epaulet"), "epaulet" );
	deepEqual( Stem("epaulets"), "epaulet" );
	deepEqual( Stem("ephesian"), "ephesian" );
	deepEqual( Stem("ephesians"), "ephesian" );
	deepEqual( Stem("ephesus"), "ephesu" );
	deepEqual( Stem("epicure"), "epicur" );
	deepEqual( Stem("epicurean"), "epicurean" );
	deepEqual( Stem("epicures"), "epicur" );
	deepEqual( Stem("epicurism"), "epicur" );
	deepEqual( Stem("epicurus"), "epicuru" );
	deepEqual( Stem("epidamnum"), "epidamnum" );
	deepEqual( Stem("epidaurus"), "epidauru" );
	deepEqual( Stem("epigram"), "epigram" );
	deepEqual( Stem("epigrams"), "epigram" );
	deepEqual( Stem("epilepsy"), "epilepsi" );
	deepEqual( Stem("epileptic"), "epilept" );
	deepEqual( Stem("epilogue"), "epilogu" );
	deepEqual( Stem("epilogues"), "epilogu" );
	deepEqual( Stem("episode"), "episod" );
	deepEqual( Stem("epistle"), "epistl" );
	deepEqual( Stem("epistles"), "epistl" );
	deepEqual( Stem("epistolarily"), "epistolarili" );
	deepEqual( Stem("epistrophus"), "epistrophu" );
	deepEqual( Stem("epitaph"), "epitaph" );
	deepEqual( Stem("epitaphs"), "epitaph" );
	deepEqual( Stem("epithet"), "epithet" );
	deepEqual( Stem("epitheton"), "epitheton" );
	deepEqual( Stem("epithets"), "epithet" );
	deepEqual( Stem("epitome"), "epitom" );
	deepEqual( Stem("epris"), "epri" );
	deepEqual( Stem("equal"), "equal" );
	deepEqual( Stem("equalities"), "equal" );
	deepEqual( Stem("equality"), "equal" );
	deepEqual( Stem("equalizing"), "equal" );
	deepEqual( Stem("equall"), "equal" );
	deepEqual( Stem("equally"), "equal" );
	deepEqual( Stem("equalness"), "equal" );
	deepEqual( Stem("equals"), "equal" );
	deepEqual( Stem("equanimity"), "equanim" );
	deepEqual( Stem("equerries"), "equerri" );
	deepEqual( Stem("equestrian"), "equestrian" );
	deepEqual( Stem("equinoctial"), "equinocti" );
	deepEqual( Stem("equinox"), "equinox" );
	deepEqual( Stem("equipage"), "equipag" );
	deepEqual( Stem("equipages"), "equipag" );
	deepEqual( Stem("equipments"), "equip" );
	deepEqual( Stem("equity"), "equiti" );
	deepEqual( Stem("equivalent"), "equival" );
	deepEqual( Stem("equivocal"), "equivoc" );
	deepEqual( Stem("equivocate"), "equivoc" );
	deepEqual( Stem("equivocates"), "equivoc" );
	deepEqual( Stem("equivocation"), "equivoc" );
	deepEqual( Stem("equivocator"), "equivoc" );
	deepEqual( Stem("er"), "er" );
	deepEqual( Stem("erbear"), "erbear" );
	deepEqual( Stem("erbearing"), "erbear" );
	deepEqual( Stem("erbears"), "erbear" );
	deepEqual( Stem("erbeat"), "erbeat" );
	deepEqual( Stem("erblows"), "erblow" );
	deepEqual( Stem("erboard"), "erboard" );
	deepEqual( Stem("erborne"), "erborn" );
	deepEqual( Stem("erbprinz"), "erbprinz" );
	deepEqual( Stem("ercame"), "ercam" );
	deepEqual( Stem("ercast"), "ercast" );
	deepEqual( Stem("ercharg"), "ercharg" );
	deepEqual( Stem("ercharged"), "ercharg" );
	deepEqual( Stem("ercharging"), "ercharg" );
	deepEqual( Stem("ercles"), "ercl" );
	deepEqual( Stem("ercome"), "ercom" );
	deepEqual( Stem("ercover"), "ercov" );
	deepEqual( Stem("ercrows"), "ercrow" );
	deepEqual( Stem("erdoing"), "erdo" );
	deepEqual( Stem("ere"), "er" );
	deepEqual( Stem("erebus"), "erebu" );
	deepEqual( Stem("erect"), "erect" );
	deepEqual( Stem("erected"), "erect" );
	deepEqual( Stem("erecting"), "erect" );
	deepEqual( Stem("erection"), "erect" );
	deepEqual( Stem("erects"), "erect" );
	deepEqual( Stem("erewhile"), "erewhil" );
	deepEqual( Stem("erflourish"), "erflourish" );
	deepEqual( Stem("erflow"), "erflow" );
	deepEqual( Stem("erflowing"), "erflow" );
	deepEqual( Stem("erflows"), "erflow" );
	deepEqual( Stem("erfraught"), "erfraught" );
	deepEqual( Stem("erga"), "erga" );
	deepEqual( Stem("ergalled"), "ergal" );
	deepEqual( Stem("erglanced"), "erglanc" );
	deepEqual( Stem("ergo"), "ergo" );
	deepEqual( Stem("ergone"), "ergon" );
	deepEqual( Stem("ergrow"), "ergrow" );
	deepEqual( Stem("ergrown"), "ergrown" );
	deepEqual( Stem("ergrowth"), "ergrowth" );
	deepEqual( Stem("erhang"), "erhang" );
	deepEqual( Stem("erhanging"), "erhang" );
	deepEqual( Stem("erhasty"), "erhasti" );
	deepEqual( Stem("erhear"), "erhear" );
	deepEqual( Stem("erheard"), "erheard" );
	deepEqual( Stem("eringoes"), "eringo" );
	deepEqual( Stem("erjoy"), "erjoi" );
	deepEqual( Stem("erleap"), "erleap" );
	deepEqual( Stem("erleaps"), "erleap" );
	deepEqual( Stem("erleavens"), "erleaven" );
	deepEqual( Stem("erlebt"), "erlebt" );
	deepEqual( Stem("erlook"), "erlook" );
	deepEqual( Stem("erlooking"), "erlook" );
	deepEqual( Stem("erly"), "erli" );
	deepEqual( Stem("ermaster"), "ermast" );
	deepEqual( Stem("ermengare"), "ermengar" );
	deepEqual( Stem("ermine"), "ermin" );
	deepEqual( Stem("ermount"), "ermount" );
	deepEqual( Stem("ern"), "ern" );
	deepEqual( Stem("ernight"), "ernight" );
	deepEqual( Stem("eros"), "ero" );
	deepEqual( Stem("erpaid"), "erpaid" );
	deepEqual( Stem("erparted"), "erpart" );
	deepEqual( Stem("erpast"), "erpast" );
	deepEqual( Stem("erpays"), "erpai" );
	deepEqual( Stem("erpeer"), "erpeer" );
	deepEqual( Stem("erperch"), "erperch" );
	deepEqual( Stem("erpicturing"), "erpictur" );
	deepEqual( Stem("erpingham"), "erpingham" );
	deepEqual( Stem("erposting"), "erpost" );
	deepEqual( Stem("erpow"), "erpow" );
	deepEqual( Stem("erpress"), "erpress" );
	deepEqual( Stem("erpressed"), "erpress" );
	deepEqual( Stem("err"), "err" );
	deepEqual( Stem("errand"), "errand" );
	deepEqual( Stem("errands"), "errand" );
	deepEqual( Stem("errant"), "errant" );
	deepEqual( Stem("errate"), "errat" );
	deepEqual( Stem("erraught"), "erraught" );
	deepEqual( Stem("erreaches"), "erreach" );
	deepEqual( Stem("erred"), "er" );
	deepEqual( Stem("errest"), "errest" );
	deepEqual( Stem("erring"), "er" );
	deepEqual( Stem("erroneous"), "erron" );
	deepEqual( Stem("error"), "error" );
	deepEqual( Stem("errors"), "error" );
	deepEqual( Stem("errs"), "err" );
	deepEqual( Stem("errule"), "errul" );
	deepEqual( Stem("errun"), "errun" );
	deepEqual( Stem("erset"), "erset" );
	deepEqual( Stem("ershade"), "ershad" );
	deepEqual( Stem("ershades"), "ershad" );
	deepEqual( Stem("ershine"), "ershin" );
	deepEqual( Stem("ershot"), "ershot" );
	deepEqual( Stem("ersized"), "ersiz" );
	deepEqual( Stem("erskip"), "erskip" );
	deepEqual( Stem("erslips"), "erslip" );
	deepEqual( Stem("erspreads"), "erspread" );
	deepEqual( Stem("erst"), "erst" );
	deepEqual( Stem("erstare"), "erstar" );
	deepEqual( Stem("erstep"), "erstep" );
	deepEqual( Stem("erstunk"), "erstunk" );
	deepEqual( Stem("ersway"), "erswai" );
	deepEqual( Stem("ersways"), "erswai" );
	deepEqual( Stem("erswell"), "erswel" );
	deepEqual( Stem("erta"), "erta" );
	deepEqual( Stem("ertake"), "ertak" );
	deepEqual( Stem("erteemed"), "erteem" );
	deepEqual( Stem("erthrow"), "erthrow" );
	deepEqual( Stem("erthrown"), "erthrown" );
	deepEqual( Stem("erthrows"), "erthrow" );
	deepEqual( Stem("ertook"), "ertook" );
	deepEqual( Stem("ertop"), "ertop" );
	deepEqual( Stem("ertopping"), "ertop" );
	deepEqual( Stem("ertrip"), "ertrip" );
	deepEqual( Stem("erturn"), "erturn" );
	deepEqual( Stem("erudition"), "erudit" );
	deepEqual( Stem("eruption"), "erupt" );
	deepEqual( Stem("eruptions"), "erupt" );
	deepEqual( Stem("ervalues"), "ervalu" );
	deepEqual( Stem("erwalk"), "erwalk" );
	deepEqual( Stem("erwatch"), "erwatch" );
	deepEqual( Stem("erween"), "erween" );
	deepEqual( Stem("erweens"), "erween" );
	deepEqual( Stem("erweigh"), "erweigh" );
	deepEqual( Stem("erweighs"), "erweigh" );
	deepEqual( Stem("erwhelm"), "erwhelm" );
	deepEqual( Stem("erwhelmed"), "erwhelm" );
	deepEqual( Stem("erworn"), "erworn" );
	deepEqual( Stem("es"), "e" );
	deepEqual( Stem("escalus"), "escalu" );
	deepEqual( Stem("escap"), "escap" );
	deepEqual( Stem("escape"), "escap" );
	deepEqual( Stem("escaped"), "escap" );
	deepEqual( Stem("escapes"), "escap" );
	deepEqual( Stem("escaping"), "escap" );
	deepEqual( Stem("eschew"), "eschew" );
	deepEqual( Stem("eschewed"), "eschew" );
	deepEqual( Stem("escort"), "escort" );
	deepEqual( Stem("escorted"), "escort" );
	deepEqual( Stem("escoted"), "escot" );
	deepEqual( Stem("escritoire"), "escritoir" );
	deepEqual( Stem("escritoires"), "escritoir" );
	deepEqual( Stem("esill"), "esil" );
	deepEqual( Stem("especial"), "especi" );
	deepEqual( Stem("especially"), "especi" );
	deepEqual( Stem("esperance"), "esper" );
	deepEqual( Stem("espials"), "espial" );
	deepEqual( Stem("espied"), "espi" );
	deepEqual( Stem("espiegle"), "espiegl" );
	deepEqual( Stem("espieglerie"), "espiegleri" );
	deepEqual( Stem("espies"), "espi" );
	deepEqual( Stem("espous"), "espou" );
	deepEqual( Stem("espouse"), "espous" );
	deepEqual( Stem("esprit"), "esprit" );
	deepEqual( Stem("espy"), "espi" );
	deepEqual( Stem("esq"), "esq" );
	deepEqual( Stem("esquire"), "esquir" );
	deepEqual( Stem("esquires"), "esquir" );
	deepEqual( Stem("essay"), "essai" );
	deepEqual( Stem("essays"), "essai" );
	deepEqual( Stem("essence"), "essenc" );
	deepEqual( Stem("essences"), "essenc" );
	deepEqual( Stem("essential"), "essenti" );
	deepEqual( Stem("essentially"), "essenti" );
	deepEqual( Stem("esses"), "ess" );
	deepEqual( Stem("essex"), "essex" );
	deepEqual( Stem("est"), "est" );
	deepEqual( Stem("establish"), "establish" );
	deepEqual( Stem("established"), "establish" );
	deepEqual( Stem("establishing"), "establish" );
	deepEqual( Stem("establishment"), "establish" );
	deepEqual( Stem("estaminets"), "estaminet" );
	deepEqual( Stem("estate"), "estat" );
	deepEqual( Stem("estates"), "estat" );
	deepEqual( Stem("esteem"), "esteem" );
	deepEqual( Stem("esteemed"), "esteem" );
	deepEqual( Stem("esteemeth"), "esteemeth" );
	deepEqual( Stem("esteeming"), "esteem" );
	deepEqual( Stem("esteems"), "esteem" );
	deepEqual( Stem("esther"), "esther" );
	deepEqual( Stem("estimable"), "estim" );
	deepEqual( Stem("estimate"), "estim" );
	deepEqual( Stem("estimated"), "estim" );
	deepEqual( Stem("estimation"), "estim" );
	deepEqual( Stem("estimations"), "estim" );
	deepEqual( Stem("estime"), "estim" );
	deepEqual( Stem("estrange"), "estrang" );
	deepEqual( Stem("estranged"), "estrang" );
	deepEqual( Stem("estrangement"), "estrang" );
	deepEqual( Stem("estridge"), "estridg" );
	deepEqual( Stem("estridges"), "estridg" );
	deepEqual( Stem("et"), "et" );
	deepEqual( Stem("etat"), "etat" );
	deepEqual( Stem("etc"), "etc" );
	deepEqual( Stem("etceteras"), "etcetera" );
	deepEqual( Stem("ete"), "et" );
	deepEqual( Stem("eternal"), "etern" );
	deepEqual( Stem("eternally"), "etern" );
	deepEqual( Stem("eterne"), "etern" );
	deepEqual( Stem("eternity"), "etern" );
	deepEqual( Stem("eterniz"), "eterniz" );
	deepEqual( Stem("etes"), "et" );
	deepEqual( Stem("etheke"), "ethek" );
	deepEqual( Stem("ethiop"), "ethiop" );
	deepEqual( Stem("ethiope"), "ethiop" );
	deepEqual( Stem("ethiopes"), "ethiop" );
	deepEqual( Stem("ethiopian"), "ethiopian" );
	deepEqual( Stem("etna"), "etna" );
	deepEqual( Stem("eton"), "eton" );
	deepEqual( Stem("etre"), "etr" );
	deepEqual( Stem("eunuch"), "eunuch" );
	deepEqual( Stem("eunuchs"), "eunuch" );
	deepEqual( Stem("euphrates"), "euphrat" );
	deepEqual( Stem("euphronius"), "euphroniu" );
	deepEqual( Stem("euriphile"), "euriphil" );
	deepEqual( Stem("europa"), "europa" );
	deepEqual( Stem("europe"), "europ" );
	deepEqual( Stem("european"), "european" );
	deepEqual( Stem("eutropis"), "eutropi" );
	deepEqual( Stem("eutropius"), "eutropiu" );
	deepEqual( Stem("ev"), "ev" );
	deepEqual( Stem("evade"), "evad" );
	deepEqual( Stem("evades"), "evad" );
	deepEqual( Stem("evangelical"), "evangel" );
	deepEqual( Stem("evans"), "evan" );
	deepEqual( Stem("evasion"), "evas" );
	deepEqual( Stem("evasions"), "evas" );
	deepEqual( Stem("eve"), "ev" );
	deepEqual( Stem("even"), "even" );
	deepEqual( Stem("evening"), "even" );
	deepEqual( Stem("evenings"), "even" );
	deepEqual( Stem("evenly"), "evenli" );
	deepEqual( Stem("event"), "event" );
	deepEqual( Stem("eventful"), "event" );
	deepEqual( Stem("events"), "event" );
	deepEqual( Stem("evenue"), "evenu" );
	deepEqual( Stem("ever"), "ever" );
	deepEqual( Stem("evergreens"), "evergreen" );
	deepEqual( Stem("everlasting"), "everlast" );
	deepEqual( Stem("everlastingly"), "everlastingli" );
	deepEqual( Stem("evermore"), "evermor" );
	deepEqual( Stem("every"), "everi" );
	deepEqual( Stem("everybody"), "everybodi" );
	deepEqual( Stem("everyday"), "everydai" );
	deepEqual( Stem("everyone"), "everyon" );
	deepEqual( Stem("everything"), "everyth" );
	deepEqual( Stem("everythink"), "everythink" );
	deepEqual( Stem("everywhere"), "everywher" );
	deepEqual( Stem("evidence"), "evid" );
	deepEqual( Stem("evidences"), "evid" );
	deepEqual( Stem("evident"), "evid" );
	deepEqual( Stem("evidently"), "evid" );
	deepEqual( Stem("evil"), "evil" );
	deepEqual( Stem("evilly"), "evilli" );
	deepEqual( Stem("evils"), "evil" );
	deepEqual( Stem("evincing"), "evinc" );
	deepEqual( Stem("evitate"), "evit" );
	deepEqual( Stem("ewe"), "ew" );
	deepEqual( Stem("ewer"), "ewer" );
	deepEqual( Stem("ewers"), "ewer" );
	deepEqual( Stem("ewes"), "ew" );
	deepEqual( Stem("ex"), "ex" );
	deepEqual( Stem("exact"), "exact" );
	deepEqual( Stem("exacted"), "exact" );
	deepEqual( Stem("exactest"), "exactest" );
	deepEqual( Stem("exacting"), "exact" );
	deepEqual( Stem("exaction"), "exact" );
	deepEqual( Stem("exactions"), "exact" );
	deepEqual( Stem("exactly"), "exactli" );
	deepEqual( Stem("exacts"), "exact" );
	deepEqual( Stem("exaggerate"), "exagger" );
	deepEqual( Stem("exaggerated"), "exagger" );
	deepEqual( Stem("exaggerates"), "exagger" );
	deepEqual( Stem("exaggerating"), "exagger" );
	deepEqual( Stem("exalt"), "exalt" );
	deepEqual( Stem("exalted"), "exalt" );
	deepEqual( Stem("exalteth"), "exalteth" );
	deepEqual( Stem("examin"), "examin" );
	deepEqual( Stem("examination"), "examin" );
	deepEqual( Stem("examinations"), "examin" );
	deepEqual( Stem("examine"), "examin" );
	deepEqual( Stem("examined"), "examin" );
	deepEqual( Stem("examines"), "examin" );
	deepEqual( Stem("examining"), "examin" );
	deepEqual( Stem("exampl"), "exampl" );
	deepEqual( Stem("example"), "exampl" );
	deepEqual( Stem("exampled"), "exampl" );
	deepEqual( Stem("examples"), "exampl" );
	deepEqual( Stem("exasperate"), "exasper" );
	deepEqual( Stem("exasperated"), "exasper" );
	deepEqual( Stem("exasperates"), "exasper" );
	deepEqual( Stem("exasperating"), "exasper" );
	deepEqual( Stem("excaytement"), "excayt" );
	deepEqual( Stem("exceed"), "exce" );
	deepEqual( Stem("exceeded"), "exceed" );
	deepEqual( Stem("exceedeth"), "exceedeth" );
	deepEqual( Stem("exceeding"), "exceed" );
	deepEqual( Stem("exceedingly"), "exceedingli" );
	deepEqual( Stem("exceeds"), "exce" );
	deepEqual( Stem("excel"), "excel" );
	deepEqual( Stem("excelled"), "excel" );
	deepEqual( Stem("excellence"), "excel" );
	deepEqual( Stem("excellences"), "excel" );
	deepEqual( Stem("excellencies"), "excel" );
	deepEqual( Stem("excellency"), "excel" );
	deepEqual( Stem("excellent"), "excel" );
	deepEqual( Stem("excellently"), "excel" );
	deepEqual( Stem("excellenz"), "excellenz" );
	deepEqual( Stem("excelling"), "excel" );
	deepEqual( Stem("excels"), "excel" );
	deepEqual( Stem("except"), "except" );
	deepEqual( Stem("excepted"), "except" );
	deepEqual( Stem("excepting"), "except" );
	deepEqual( Stem("exception"), "except" );
	deepEqual( Stem("exceptions"), "except" );
	deepEqual( Stem("exceptless"), "exceptless" );
	deepEqual( Stem("excess"), "excess" );
	deepEqual( Stem("excessive"), "excess" );
	deepEqual( Stem("excessively"), "excess" );
	deepEqual( Stem("exchang"), "exchang" );
	deepEqual( Stem("exchange"), "exchang" );
	deepEqual( Stem("exchanged"), "exchang" );
	deepEqual( Stem("exchanges"), "exchang" );
	deepEqual( Stem("exchanging"), "exchang" );
	deepEqual( Stem("exchequer"), "exchequ" );
	deepEqual( Stem("exchequers"), "exchequ" );
	deepEqual( Stem("excite"), "excit" );
	deepEqual( Stem("excited"), "excit" );
	deepEqual( Stem("excitement"), "excit" );
	deepEqual( Stem("excitements"), "excit" );
	deepEqual( Stem("excites"), "excit" );
	deepEqual( Stem("exciting"), "excit" );
	deepEqual( Stem("exclaim"), "exclaim" );
	deepEqual( Stem("exclaimed"), "exclaim" );
	deepEqual( Stem("exclaiming"), "exclaim" );
	deepEqual( Stem("exclaims"), "exclaim" );
	deepEqual( Stem("exclamation"), "exclam" );
	deepEqual( Stem("exclamations"), "exclam" );
	deepEqual( Stem("excluded"), "exclud" );
	deepEqual( Stem("excludes"), "exclud" );
	deepEqual( Stem("excluding"), "exclud" );
	deepEqual( Stem("exclusive"), "exclus" );
	deepEqual( Stem("exclusively"), "exclus" );
	deepEqual( Stem("excommunicate"), "excommun" );
	deepEqual( Stem("excommunication"), "excommun" );
	deepEqual( Stem("excrement"), "excrement" );
	deepEqual( Stem("excrements"), "excrement" );
	deepEqual( Stem("excruciate"), "excruci" );
	deepEqual( Stem("excruciating"), "excruci" );
	deepEqual( Stem("excursion"), "excurs" );
	deepEqual( Stem("excursions"), "excurs" );
	deepEqual( Stem("excus"), "excu" );
	deepEqual( Stem("excusable"), "excus" );
	deepEqual( Stem("excuse"), "excus" );
	deepEqual( Stem("excused"), "excus" );
	deepEqual( Stem("excuses"), "excus" );
	deepEqual( Stem("excusez"), "excusez" );
	deepEqual( Stem("excusing"), "excus" );
	deepEqual( Stem("execrable"), "execr" );
	deepEqual( Stem("execrations"), "execr" );
	deepEqual( Stem("execute"), "execut" );
	deepEqual( Stem("executed"), "execut" );
	deepEqual( Stem("executes"), "execut" );
	deepEqual( Stem("executing"), "execut" );
	deepEqual( Stem("execution"), "execut" );
	deepEqual( Stem("executioner"), "execution" );
	deepEqual( Stem("executioners"), "execution" );
	deepEqual( Stem("executor"), "executor" );
	deepEqual( Stem("executors"), "executor" );
	deepEqual( Stem("exemplary"), "exemplari" );
	deepEqual( Stem("exemplifying"), "exemplifi" );
	deepEqual( Stem("exempt"), "exempt" );
	deepEqual( Stem("exempted"), "exempt" );
	deepEqual( Stem("exequies"), "exequi" );
	deepEqual( Stem("exercise"), "exercis" );
	deepEqual( Stem("exercised"), "exercis" );
	deepEqual( Stem("exercises"), "exercis" );
	deepEqual( Stem("exercising"), "exercis" );
	deepEqual( Stem("exerted"), "exert" );
	deepEqual( Stem("exerting"), "exert" );
	deepEqual( Stem("exertions"), "exert" );
	deepEqual( Stem("exeter"), "exet" );
	deepEqual( Stem("exeunt"), "exeunt" );
	deepEqual( Stem("exhal"), "exhal" );
	deepEqual( Stem("exhalation"), "exhal" );
	deepEqual( Stem("exhalations"), "exhal" );
	deepEqual( Stem("exhale"), "exhal" );
	deepEqual( Stem("exhales"), "exhal" );
	deepEqual( Stem("exhaust"), "exhaust" );
	deepEqual( Stem("exhausted"), "exhaust" );
	deepEqual( Stem("exhaustion"), "exhaust" );
	deepEqual( Stem("exhibit"), "exhibit" );
	deepEqual( Stem("exhibited"), "exhibit" );
	deepEqual( Stem("exhibiters"), "exhibit" );
	deepEqual( Stem("exhibiting"), "exhibit" );
	deepEqual( Stem("exhibition"), "exhibit" );
	deepEqual( Stem("exhibitions"), "exhibit" );
	deepEqual( Stem("exhibits"), "exhibit" );
	deepEqual( Stem("exhilarated"), "exhilar" );
	deepEqual( Stem("exhort"), "exhort" );
	deepEqual( Stem("exhortation"), "exhort" );
	deepEqual( Stem("exhorting"), "exhort" );
	deepEqual( Stem("exigent"), "exig" );
	deepEqual( Stem("exil"), "exil" );
	deepEqual( Stem("exile"), "exil" );
	deepEqual( Stem("exiled"), "exil" );
	deepEqual( Stem("exion"), "exion" );
	deepEqual( Stem("exist"), "exist" );
	deepEqual( Stem("existed"), "exist" );
	deepEqual( Stem("existence"), "exist" );
	deepEqual( Stem("exists"), "exist" );
	deepEqual( Stem("exit"), "exit" );
	deepEqual( Stem("exits"), "exit" );
	deepEqual( Stem("exorbitant"), "exorbit" );
	deepEqual( Stem("exorciser"), "exorcis" );
	deepEqual( Stem("exorcisms"), "exorc" );
	deepEqual( Stem("exorcist"), "exorcist" );
	deepEqual( Stem("expanded"), "expand" );
	deepEqual( Stem("expansiveness"), "expans" );
	deepEqual( Stem("expatiating"), "expati" );
	deepEqual( Stem("expect"), "expect" );
	deepEqual( Stem("expectance"), "expect" );
	deepEqual( Stem("expectancy"), "expect" );
	deepEqual( Stem("expectant"), "expect" );
	deepEqual( Stem("expectation"), "expect" );
	deepEqual( Stem("expectations"), "expect" );
	deepEqual( Stem("expected"), "expect" );
	deepEqual( Stem("expecters"), "expect" );
	deepEqual( Stem("expecting"), "expect" );
	deepEqual( Stem("expects"), "expect" );
	deepEqual( Stem("expedience"), "expedi" );
	deepEqual( Stem("expedient"), "expedi" );
	deepEqual( Stem("expediently"), "expedi" );
	deepEqual( Stem("expedition"), "expedit" );
	deepEqual( Stem("expeditions"), "expedit" );
	deepEqual( Stem("expeditious"), "expediti" );
	deepEqual( Stem("expel"), "expel" );
	deepEqual( Stem("expell"), "expel" );
	deepEqual( Stem("expelling"), "expel" );
	deepEqual( Stem("expels"), "expel" );
	deepEqual( Stem("expend"), "expend" );
	deepEqual( Stem("expended"), "expend" );
	deepEqual( Stem("expenditure"), "expenditur" );
	deepEqual( Stem("expense"), "expens" );
	deepEqual( Stem("expenses"), "expens" );
	deepEqual( Stem("expensive"), "expens" );
	deepEqual( Stem("experienc"), "experienc" );
	deepEqual( Stem("experience"), "experi" );
	deepEqual( Stem("experienced"), "experienc" );
	deepEqual( Stem("experiences"), "experi" );
	deepEqual( Stem("experiment"), "experi" );
	deepEqual( Stem("experimental"), "experiment" );
	deepEqual( Stem("experiments"), "experi" );
	deepEqual( Stem("expert"), "expert" );
	deepEqual( Stem("expertness"), "expert" );
	deepEqual( Stem("expiate"), "expiat" );
	deepEqual( Stem("expiation"), "expiat" );
	deepEqual( Stem("expince"), "expinc" );
	deepEqual( Stem("expir"), "expir" );
	deepEqual( Stem("expiration"), "expir" );
	deepEqual( Stem("expire"), "expir" );
	deepEqual( Stem("expired"), "expir" );
	deepEqual( Stem("expires"), "expir" );
	deepEqual( Stem("expiring"), "expir" );
	deepEqual( Stem("explain"), "explain" );
	deepEqual( Stem("explained"), "explain" );
	deepEqual( Stem("explaining"), "explain" );
	deepEqual( Stem("explanation"), "explan" );
	deepEqual( Stem("explanations"), "explan" );
	deepEqual( Stem("explication"), "explic" );
	deepEqual( Stem("explode"), "explod" );
	deepEqual( Stem("exploded"), "explod" );
	deepEqual( Stem("exploding"), "explod" );
	deepEqual( Stem("exploit"), "exploit" );
	deepEqual( Stem("exploits"), "exploit" );
	deepEqual( Stem("explosion"), "explos" );
	deepEqual( Stem("explosions"), "explos" );
	deepEqual( Stem("expos"), "expo" );
	deepEqual( Stem("expose"), "expos" );
	deepEqual( Stem("exposed"), "expos" );
	deepEqual( Stem("exposing"), "expos" );
	deepEqual( Stem("exposition"), "exposit" );
	deepEqual( Stem("expositor"), "expositor" );
	deepEqual( Stem("expostulate"), "expostul" );
	deepEqual( Stem("expostulated"), "expostul" );
	deepEqual( Stem("expostulation"), "expostul" );
	deepEqual( Stem("expostulations"), "expostul" );
	deepEqual( Stem("exposture"), "expostur" );
	deepEqual( Stem("exposure"), "exposur" );
	deepEqual( Stem("expound"), "expound" );
	deepEqual( Stem("expounded"), "expound" );
	deepEqual( Stem("expounding"), "expound" );
	deepEqual( Stem("express"), "express" );
	deepEqual( Stem("expressed"), "express" );
	deepEqual( Stem("expresses"), "express" );
	deepEqual( Stem("expresseth"), "expresseth" );
	deepEqual( Stem("expressing"), "express" );
	deepEqual( Stem("expression"), "express" );
	deepEqual( Stem("expressive"), "express" );
	deepEqual( Stem("expressly"), "expressli" );
	deepEqual( Stem("expressure"), "expressur" );
	deepEqual( Stem("expuls"), "expul" );
	deepEqual( Stem("expulsion"), "expuls" );
	deepEqual( Stem("exquisite"), "exquisit" );
	deepEqual( Stem("exquisitely"), "exquisit" );
	deepEqual( Stem("exsufflicate"), "exsuffl" );
	deepEqual( Stem("extant"), "extant" );
	deepEqual( Stem("extemporal"), "extempor" );
	deepEqual( Stem("extemporally"), "extempor" );
	deepEqual( Stem("extempore"), "extempor" );
	deepEqual( Stem("extend"), "extend" );
	deepEqual( Stem("extended"), "extend" );
	deepEqual( Stem("extending"), "extend" );
	deepEqual( Stem("extends"), "extend" );
	deepEqual( Stem("extension"), "extens" );
	deepEqual( Stem("extent"), "extent" );
	deepEqual( Stem("extenuate"), "extenu" );
	deepEqual( Stem("extenuated"), "extenu" );
	deepEqual( Stem("extenuates"), "extenu" );
	deepEqual( Stem("extenuation"), "extenu" );
	deepEqual( Stem("exterior"), "exterior" );
	deepEqual( Stem("exteriorly"), "exteriorli" );
	deepEqual( Stem("exteriors"), "exterior" );
	deepEqual( Stem("extermin"), "extermin" );
	deepEqual( Stem("extermination"), "extermin" );
	deepEqual( Stem("extern"), "extern" );
	deepEqual( Stem("external"), "extern" );
	deepEqual( Stem("extinct"), "extinct" );
	deepEqual( Stem("extincted"), "extinct" );
	deepEqual( Stem("extincture"), "extinctur" );
	deepEqual( Stem("extinguish"), "extinguish" );
	deepEqual( Stem("extinguished"), "extinguish" );
	deepEqual( Stem("extinguishers"), "extinguish" );
	deepEqual( Stem("extirp"), "extirp" );
	deepEqual( Stem("extirpate"), "extirp" );
	deepEqual( Stem("extirped"), "extirp" );
	deepEqual( Stem("extol"), "extol" );
	deepEqual( Stem("extoll"), "extol" );
	deepEqual( Stem("extolling"), "extol" );
	deepEqual( Stem("extolment"), "extol" );
	deepEqual( Stem("exton"), "exton" );
	deepEqual( Stem("extort"), "extort" );
	deepEqual( Stem("extorted"), "extort" );
	deepEqual( Stem("extortion"), "extort" );
	deepEqual( Stem("extortions"), "extort" );
	deepEqual( Stem("extra"), "extra" );
	deepEqual( Stem("extract"), "extract" );
	deepEqual( Stem("extracted"), "extract" );
	deepEqual( Stem("extracting"), "extract" );
	deepEqual( Stem("extracts"), "extract" );
	deepEqual( Stem("extraordinarily"), "extraordinarili" );
	deepEqual( Stem("extraordinary"), "extraordinari" );
	deepEqual( Stem("extraught"), "extraught" );
	deepEqual( Stem("extravagance"), "extravag" );
	deepEqual( Stem("extravagances"), "extravag" );
	deepEqual( Stem("extravagancy"), "extravag" );
	deepEqual( Stem("extravagant"), "extravag" );
	deepEqual( Stem("extreme"), "extrem" );
	deepEqual( Stem("extremely"), "extrem" );
	deepEqual( Stem("extremes"), "extrem" );
	deepEqual( Stem("extremest"), "extremest" );
	deepEqual( Stem("extremities"), "extrem" );
	deepEqual( Stem("extremity"), "extrem" );
	deepEqual( Stem("exuent"), "exuent" );
	deepEqual( Stem("exult"), "exult" );
	deepEqual( Stem("exultation"), "exult" );
	deepEqual( Stem("exulting"), "exult" );
	deepEqual( Stem("ey"), "ei" );
	deepEqual( Stem("eyas"), "eya" );
	deepEqual( Stem("eyases"), "eyas" );
	deepEqual( Stem("eye"), "ey" );
	deepEqual( Stem("eyeball"), "eyebal" );
	deepEqual( Stem("eyeballs"), "eyebal" );
	deepEqual( Stem("eyebrow"), "eyebrow" );
	deepEqual( Stem("eyebrows"), "eyebrow" );
	deepEqual( Stem("eyed"), "ei" );
	deepEqual( Stem("eyeless"), "eyeless" );
	deepEqual( Stem("eyelets"), "eyelet" );
	deepEqual( Stem("eyelid"), "eyelid" );
	deepEqual( Stem("eyelids"), "eyelid" );
	deepEqual( Stem("eyes"), "ey" );
	deepEqual( Stem("eyesight"), "eyesight" );
	deepEqual( Stem("eyestrings"), "eyestr" );
	deepEqual( Stem("eying"), "ei" );
	deepEqual( Stem("eyne"), "eyn" );
	deepEqual( Stem("eyrie"), "eyri" );
	deepEqual( Stem("f"), "f" );
	deepEqual( Stem("fa"), "fa" );
	deepEqual( Stem("fabian"), "fabian" );
	deepEqual( Stem("fable"), "fabl" );
	deepEqual( Stem("fables"), "fabl" );
	deepEqual( Stem("fabric"), "fabric" );
	deepEqual( Stem("fabulous"), "fabul" );
	deepEqual( Stem("fac"), "fac" );
	deepEqual( Stem("face"), "face" );
	deepEqual( Stem("faced"), "face" );
	deepEqual( Stem("facere"), "facer" );
	deepEqual( Stem("faces"), "face" );
	deepEqual( Stem("facetious"), "faceti" );
	deepEqual( Stem("facetiously"), "faceti" );
	deepEqual( Stem("faciant"), "faciant" );
	deepEqual( Stem("facile"), "facil" );
	deepEqual( Stem("facility"), "facil" );
	deepEqual( Stem("facinerious"), "facineri" );
	deepEqual( Stem("facing"), "face" );
	deepEqual( Stem("facings"), "face" );
	deepEqual( Stem("facit"), "facit" );
	deepEqual( Stem("fact"), "fact" );
	deepEqual( Stem("faction"), "faction" );
	deepEqual( Stem("factionary"), "factionari" );
	deepEqual( Stem("factions"), "faction" );
	deepEqual( Stem("factious"), "factiou" );
	deepEqual( Stem("factor"), "factor" );
	deepEqual( Stem("factors"), "factor" );
	deepEqual( Stem("factotum"), "factotum" );
	deepEqual( Stem("facts"), "fact" );
	deepEqual( Stem("faculties"), "faculti" );
	deepEqual( Stem("faculty"), "faculti" );
	deepEqual( Stem("faddle"), "faddl" );
	deepEqual( Stem("fade"), "fade" );
	deepEqual( Stem("faded"), "fade" );
	deepEqual( Stem("fadeth"), "fadeth" );
	deepEqual( Stem("fadge"), "fadg" );
	deepEqual( Stem("fading"), "fade" );
	deepEqual( Stem("fadings"), "fade" );
	deepEqual( Stem("fadom"), "fadom" );
	deepEqual( Stem("fadoms"), "fadom" );
	deepEqual( Stem("fag"), "fag" );
	deepEqual( Stem("fagging"), "fag" );
	deepEqual( Stem("fagot"), "fagot" );
	deepEqual( Stem("fagots"), "fagot" );
	deepEqual( Stem("fail"), "fail" );
	deepEqual( Stem("failed"), "fail" );
	deepEqual( Stem("failing"), "fail" );
	deepEqual( Stem("fails"), "fail" );
	deepEqual( Stem("failure"), "failur" );
	deepEqual( Stem("fain"), "fain" );
	deepEqual( Stem("faint"), "faint" );
	deepEqual( Stem("fainted"), "faint" );
	deepEqual( Stem("fainter"), "fainter" );
	deepEqual( Stem("faintest"), "faintest" );
	deepEqual( Stem("fainting"), "faint" );
	deepEqual( Stem("faintly"), "faintli" );
	deepEqual( Stem("faintness"), "faint" );
	deepEqual( Stem("faints"), "faint" );
	deepEqual( Stem("fair"), "fair" );
	deepEqual( Stem("faire"), "fair" );
	deepEqual( Stem("fairer"), "fairer" );
	deepEqual( Stem("fairest"), "fairest" );
	deepEqual( Stem("fairian"), "fairian" );
	deepEqual( Stem("fairies"), "fairi" );
	deepEqual( Stem("fairing"), "fair" );
	deepEqual( Stem("fairings"), "fair" );
	deepEqual( Stem("fairly"), "fairli" );
	deepEqual( Stem("fairness"), "fair" );
	deepEqual( Stem("fairs"), "fair" );
	deepEqual( Stem("fairwell"), "fairwel" );
	deepEqual( Stem("fairy"), "fairi" );
	deepEqual( Stem("fais"), "fai" );
	deepEqual( Stem("fait"), "fait" );
	deepEqual( Stem("faites"), "fait" );
	deepEqual( Stem("faith"), "faith" );
	deepEqual( Stem("faithful"), "faith" );
	deepEqual( Stem("faithfull"), "faithful" );
	deepEqual( Stem("faithfully"), "faithfulli" );
	deepEqual( Stem("faithless"), "faithless" );
	deepEqual( Stem("faiths"), "faith" );
	deepEqual( Stem("faitors"), "faitor" );
	deepEqual( Stem("fake"), "fake" );
	deepEqual( Stem("fal"), "fal" );
	deepEqual( Stem("falchion"), "falchion" );
	deepEqual( Stem("falcon"), "falcon" );
	deepEqual( Stem("falconbridge"), "falconbridg" );
	deepEqual( Stem("falconer"), "falcon" );
	deepEqual( Stem("falconers"), "falcon" );
	deepEqual( Stem("fall"), "fall" );
	deepEqual( Stem("fallacy"), "fallaci" );
	deepEqual( Stem("fallals"), "fallal" );
	deepEqual( Stem("fallen"), "fallen" );
	deepEqual( Stem("falleth"), "falleth" );
	deepEqual( Stem("falliable"), "falliabl" );
	deepEqual( Stem("fallible"), "fallibl" );
	deepEqual( Stem("falling"), "fall" );
	deepEqual( Stem("fallow"), "fallow" );
	deepEqual( Stem("fallows"), "fallow" );
	deepEqual( Stem("falls"), "fall" );
	deepEqual( Stem("fally"), "falli" );
	deepEqual( Stem("falorous"), "falor" );
	deepEqual( Stem("false"), "fals" );
	deepEqual( Stem("falsehood"), "falsehood" );
	deepEqual( Stem("falsehoods"), "falsehood" );
	deepEqual( Stem("falsely"), "fals" );
	deepEqual( Stem("falseness"), "fals" );
	deepEqual( Stem("falsenesses"), "fals" );
	deepEqual( Stem("falser"), "falser" );
	deepEqual( Stem("falsify"), "falsifi" );
	deepEqual( Stem("falsing"), "fals" );
	deepEqual( Stem("falstaff"), "falstaff" );
	deepEqual( Stem("falstaffs"), "falstaff" );
	deepEqual( Stem("falter"), "falter" );
	deepEqual( Stem("faltered"), "falter" );
	deepEqual( Stem("faltering"), "falter" );
	deepEqual( Stem("fam"), "fam" );
	deepEqual( Stem("fame"), "fame" );
	deepEqual( Stem("famed"), "fame" );
	deepEqual( Stem("familiar"), "familiar" );
	deepEqual( Stem("familiarise"), "familiaris" );
	deepEqual( Stem("familiarities"), "familiar" );
	deepEqual( Stem("familiarity"), "familiar" );
	deepEqual( Stem("familiarly"), "familiarli" );
	deepEqual( Stem("familiars"), "familiar" );
	deepEqual( Stem("families"), "famili" );
	deepEqual( Stem("family"), "famili" );
	deepEqual( Stem("famine"), "famin" );
	deepEqual( Stem("famish"), "famish" );
	deepEqual( Stem("famished"), "famish" );
	deepEqual( Stem("famous"), "famou" );
	deepEqual( Stem("famoused"), "famous" );
	deepEqual( Stem("famously"), "famous" );
	deepEqual( Stem("fan"), "fan" );
	deepEqual( Stem("fanatical"), "fanat" );
	deepEqual( Stem("fanatically"), "fanat" );
	deepEqual( Stem("fancied"), "fanci" );
	deepEqual( Stem("fanciers"), "fancier" );
	deepEqual( Stem("fancies"), "fanci" );
	deepEqual( Stem("fanciful"), "fanci" );
	deepEqual( Stem("fancy"), "fanci" );
	deepEqual( Stem("fancying"), "fanci" );
	deepEqual( Stem("fane"), "fane" );
	deepEqual( Stem("fanes"), "fane" );
	deepEqual( Stem("fang"), "fang" );
	deepEqual( Stem("fangled"), "fangl" );
	deepEqual( Stem("fangless"), "fangless" );
	deepEqual( Stem("fangs"), "fang" );
	deepEqual( Stem("fann"), "fann" );
	deepEqual( Stem("fanning"), "fan" );
	deepEqual( Stem("fanny"), "fanni" );
	deepEqual( Stem("fans"), "fan" );
	deepEqual( Stem("fantasied"), "fantasi" );
	deepEqual( Stem("fantasies"), "fantasi" );
	deepEqual( Stem("fantastic"), "fantast" );
	deepEqual( Stem("fantastical"), "fantast" );
	deepEqual( Stem("fantastically"), "fantast" );
	deepEqual( Stem("fantasticoes"), "fantastico" );
	deepEqual( Stem("fantasy"), "fantasi" );
	deepEqual( Stem("fap"), "fap" );
	deepEqual( Stem("far"), "far" );
	deepEqual( Stem("farborough"), "farborough" );
	deepEqual( Stem("farce"), "farc" );
	deepEqual( Stem("farced"), "farc" );
	deepEqual( Stem("fardel"), "fardel" );
	deepEqual( Stem("fardels"), "fardel" );
	deepEqual( Stem("farden"), "farden" );
	deepEqual( Stem("fare"), "fare" );
	deepEqual( Stem("fares"), "fare" );
	deepEqual( Stem("farewell"), "farewel" );
	deepEqual( Stem("farewells"), "farewel" );
	deepEqual( Stem("fariner"), "farin" );
	deepEqual( Stem("faring"), "fare" );
	deepEqual( Stem("farm"), "farm" );
	deepEqual( Stem("farmed"), "farm" );
	deepEqual( Stem("farmer"), "farmer" );
	deepEqual( Stem("farmers"), "farmer" );
	deepEqual( Stem("farmhouse"), "farmhous" );
	deepEqual( Stem("farming"), "farm" );
	deepEqual( Stem("farms"), "farm" );
	deepEqual( Stem("farnham"), "farnham" );
	deepEqual( Stem("faro"), "faro" );
	deepEqual( Stem("farre"), "farr" );
	deepEqual( Stem("farrow"), "farrow" );
	deepEqual( Stem("farther"), "farther" );
	deepEqual( Stem("farthest"), "farthest" );
	deepEqual( Stem("farthing"), "farth" );
	deepEqual( Stem("farthingale"), "farthingal" );
	deepEqual( Stem("farthingales"), "farthingal" );
	deepEqual( Stem("farthings"), "farth" );
	deepEqual( Stem("fartuous"), "fartuou" );
	deepEqual( Stem("fas"), "fa" );
	deepEqual( Stem("fascinate"), "fascin" );
	deepEqual( Stem("fascinated"), "fascin" );
	deepEqual( Stem("fascinating"), "fascin" );
	deepEqual( Stem("fascination"), "fascin" );
	deepEqual( Stem("fascinations"), "fascin" );
	deepEqual( Stem("fashion"), "fashion" );
	deepEqual( Stem("fashionable"), "fashion" );
	deepEqual( Stem("fashionables"), "fashion" );
	deepEqual( Stem("fashioned"), "fashion" );
	deepEqual( Stem("fashioning"), "fashion" );
	deepEqual( Stem("fashions"), "fashion" );
	deepEqual( Stem("fast"), "fast" );
	deepEqual( Stem("fasted"), "fast" );
	deepEqual( Stem("fasten"), "fasten" );
	deepEqual( Stem("fastened"), "fasten" );
	deepEqual( Stem("faster"), "faster" );
	deepEqual( Stem("fastest"), "fastest" );
	deepEqual( Stem("fasting"), "fast" );
	deepEqual( Stem("fastly"), "fastli" );
	deepEqual( Stem("fastolfe"), "fastolf" );
	deepEqual( Stem("fasts"), "fast" );
	deepEqual( Stem("fat"), "fat" );
	deepEqual( Stem("fatal"), "fatal" );
	deepEqual( Stem("fatally"), "fatal" );
	deepEqual( Stem("fate"), "fate" );
	deepEqual( Stem("fated"), "fate" );
	deepEqual( Stem("fateful"), "fate" );
	deepEqual( Stem("fates"), "fate" );
	deepEqual( Stem("father"), "father" );
	deepEqual( Stem("fathered"), "father" );
	deepEqual( Stem("fatherless"), "fatherless" );
	deepEqual( Stem("fatherly"), "fatherli" );
	deepEqual( Stem("fathers"), "father" );
	deepEqual( Stem("fathom"), "fathom" );
	deepEqual( Stem("fathomless"), "fathomless" );
	deepEqual( Stem("fathoms"), "fathom" );
	deepEqual( Stem("fatigate"), "fatig" );
	deepEqual( Stem("fatigue"), "fatigu" );
	deepEqual( Stem("fatigued"), "fatigu" );
	deepEqual( Stem("fatigues"), "fatigu" );
	deepEqual( Stem("fatness"), "fat" );
	deepEqual( Stem("fats"), "fat" );
	deepEqual( Stem("fatted"), "fat" );
	deepEqual( Stem("fatter"), "fatter" );
	deepEqual( Stem("fattest"), "fattest" );
	deepEqual( Stem("fatting"), "fat" );
	deepEqual( Stem("fatuus"), "fatuu" );
	deepEqual( Stem("faubourg"), "faubourg" );
	deepEqual( Stem("fauconbridge"), "fauconbridg" );
	deepEqual( Stem("faugh"), "faugh" );
	deepEqual( Stem("faulconbridge"), "faulconbridg" );
	deepEqual( Stem("fault"), "fault" );
	deepEqual( Stem("faultiness"), "faulti" );
	deepEqual( Stem("faultless"), "faultless" );
	deepEqual( Stem("faultlessly"), "faultlessli" );
	deepEqual( Stem("faults"), "fault" );
	deepEqual( Stem("faulty"), "faulti" );
	deepEqual( Stem("fausse"), "fauss" );
	deepEqual( Stem("fauste"), "faust" );
	deepEqual( Stem("faustuses"), "faustus" );
	deepEqual( Stem("faut"), "faut" );
	deepEqual( Stem("faver"), "faver" );
	deepEqual( Stem("faviour"), "faviour" );
	deepEqual( Stem("favor"), "favor" );
	deepEqual( Stem("favorable"), "favor" );
	deepEqual( Stem("favorably"), "favor" );
	deepEqual( Stem("favors"), "favor" );
	deepEqual( Stem("favour"), "favour" );
	deepEqual( Stem("favourable"), "favour" );
	deepEqual( Stem("favourably"), "favour" );
	deepEqual( Stem("favoured"), "favour" );
	deepEqual( Stem("favouredly"), "favouredli" );
	deepEqual( Stem("favourer"), "favour" );
	deepEqual( Stem("favourers"), "favour" );
	deepEqual( Stem("favouring"), "favour" );
	deepEqual( Stem("favourite"), "favourit" );
	deepEqual( Stem("favourites"), "favourit" );
	deepEqual( Stem("favours"), "favour" );
	deepEqual( Stem("favout"), "favout" );
	deepEqual( Stem("fawn"), "fawn" );
	deepEqual( Stem("fawneth"), "fawneth" );
	deepEqual( Stem("fawning"), "fawn" );
	deepEqual( Stem("fawns"), "fawn" );
	deepEqual( Stem("fawther"), "fawther" );
	deepEqual( Stem("fay"), "fai" );
	deepEqual( Stem("fe"), "fe" );
	deepEqual( Stem("fealty"), "fealti" );
	deepEqual( Stem("fear"), "fear" );
	deepEqual( Stem("feared"), "fear" );
	deepEqual( Stem("fearest"), "fearest" );
	deepEqual( Stem("fearful"), "fear" );
	deepEqual( Stem("fearfull"), "fearful" );
	deepEqual( Stem("fearfully"), "fearfulli" );
	deepEqual( Stem("fearfulness"), "fear" );
	deepEqual( Stem("fearing"), "fear" );
	deepEqual( Stem("fearless"), "fearless" );
	deepEqual( Stem("fears"), "fear" );
	deepEqual( Stem("feast"), "feast" );
	deepEqual( Stem("feasted"), "feast" );
	deepEqual( Stem("feasters"), "feaster" );
	deepEqual( Stem("feasting"), "feast" );
	deepEqual( Stem("feasts"), "feast" );
	deepEqual( Stem("feat"), "feat" );
	deepEqual( Stem("feated"), "feat" );
	deepEqual( Stem("feater"), "feater" );
	deepEqual( Stem("feather"), "feather" );
	deepEqual( Stem("featherbed"), "featherb" );
	deepEqual( Stem("feathered"), "feather" );
	deepEqual( Stem("feathers"), "feather" );
	deepEqual( Stem("featly"), "featli" );
	deepEqual( Stem("feats"), "feat" );
	deepEqual( Stem("featur"), "featur" );
	deepEqual( Stem("feature"), "featur" );
	deepEqual( Stem("featured"), "featur" );
	deepEqual( Stem("featureless"), "featureless" );
	deepEqual( Stem("features"), "featur" );
	deepEqual( Stem("february"), "februari" );
	deepEqual( Stem("fecks"), "feck" );
	deepEqual( Stem("fed"), "fed" );
	deepEqual( Stem("fedary"), "fedari" );
	deepEqual( Stem("federary"), "federari" );
	deepEqual( Stem("fee"), "fee" );
	deepEqual( Stem("feeble"), "feebl" );
	deepEqual( Stem("feebled"), "feebl" );
	deepEqual( Stem("feebleness"), "feebl" );
	deepEqual( Stem("feebling"), "feebl" );
	deepEqual( Stem("feebly"), "feebli" );
	deepEqual( Stem("feed"), "feed" );
	deepEqual( Stem("feeder"), "feeder" );
	deepEqual( Stem("feeders"), "feeder" );
	deepEqual( Stem("feedeth"), "feedeth" );
	deepEqual( Stem("feeding"), "feed" );
	deepEqual( Stem("feeds"), "feed" );
	deepEqual( Stem("feel"), "feel" );
	deepEqual( Stem("feeler"), "feeler" );
	deepEqual( Stem("feeling"), "feel" );
	deepEqual( Stem("feelingly"), "feelingli" );
	deepEqual( Stem("feelings"), "feel" );
	deepEqual( Stem("feels"), "feel" );
	deepEqual( Stem("fees"), "fee" );
	deepEqual( Stem("feet"), "feet" );
	deepEqual( Stem("fehemently"), "fehement" );
	deepEqual( Stem("feign"), "feign" );
	deepEqual( Stem("feigned"), "feign" );
	deepEqual( Stem("feigning"), "feign" );
	deepEqual( Stem("feil"), "feil" );
	deepEqual( Stem("feith"), "feith" );
	deepEqual( Stem("felicita"), "felicita" );
	deepEqual( Stem("felicitate"), "felicit" );
	deepEqual( Stem("felicitous"), "felicit" );
	deepEqual( Stem("felicity"), "felic" );
	deepEqual( Stem("felix"), "felix" );
	deepEqual( Stem("fell"), "fell" );
	deepEqual( Stem("fellar"), "fellar" );
	deepEqual( Stem("feller"), "feller" );
	deepEqual( Stem("fellers"), "feller" );
	deepEqual( Stem("fellest"), "fellest" );
	deepEqual( Stem("fellies"), "felli" );
	deepEqual( Stem("felling"), "fell" );
	deepEqual( Stem("fellow"), "fellow" );
	deepEqual( Stem("fellowly"), "fellowli" );
	deepEqual( Stem("fellows"), "fellow" );
	deepEqual( Stem("fellowship"), "fellowship" );
	deepEqual( Stem("fellowships"), "fellowship" );
	deepEqual( Stem("fells"), "fell" );
	deepEqual( Stem("felon"), "felon" );
	deepEqual( Stem("felonious"), "feloni" );
	deepEqual( Stem("felony"), "feloni" );
	deepEqual( Stem("felt"), "felt" );
	deepEqual( Stem("feltham"), "feltham" );
	deepEqual( Stem("female"), "femal" );
	deepEqual( Stem("females"), "femal" );
	deepEqual( Stem("feminine"), "feminin" );
	deepEqual( Stem("femme"), "femm" );
	deepEqual( Stem("femmes"), "femm" );
	deepEqual( Stem("fen"), "fen" );
	deepEqual( Stem("fenc"), "fenc" );
	deepEqual( Stem("fence"), "fenc" );
	deepEqual( Stem("fencer"), "fencer" );
	deepEqual( Stem("fences"), "fenc" );
	deepEqual( Stem("fencing"), "fenc" );
	deepEqual( Stem("fends"), "fend" );
	deepEqual( Stem("fennel"), "fennel" );
	deepEqual( Stem("fenny"), "fenni" );
	deepEqual( Stem("fens"), "fen" );
	deepEqual( Stem("fenton"), "fenton" );
	deepEqual( Stem("fer"), "fer" );
	deepEqual( Stem("ferdinand"), "ferdinand" );
	deepEqual( Stem("fere"), "fere" );
	deepEqual( Stem("fernseed"), "fernse" );
	deepEqual( Stem("ferocity"), "feroc" );
	deepEqual( Stem("ferrara"), "ferrara" );
	deepEqual( Stem("ferrers"), "ferrer" );
	deepEqual( Stem("ferret"), "ferret" );
	deepEqual( Stem("ferrets"), "ferret" );
	deepEqual( Stem("ferry"), "ferri" );
	deepEqual( Stem("ferryman"), "ferryman" );
	deepEqual( Stem("fertile"), "fertil" );
	deepEqual( Stem("fertility"), "fertil" );
	deepEqual( Stem("fertilizing"), "fertil" );
	deepEqual( Stem("fervency"), "fervenc" );
	deepEqual( Stem("fervently"), "fervent" );
	deepEqual( Stem("fervour"), "fervour" );
	deepEqual( Stem("fery"), "feri" );
	deepEqual( Stem("fest"), "fest" );
	deepEqual( Stem("feste"), "fest" );
	deepEqual( Stem("fester"), "fester" );
	deepEqual( Stem("festin"), "festin" );
	deepEqual( Stem("festinate"), "festin" );
	deepEqual( Stem("festinately"), "festin" );
	deepEqual( Stem("festival"), "festiv" );
	deepEqual( Stem("festivals"), "festiv" );
	deepEqual( Stem("festive"), "festiv" );
	deepEqual( Stem("festivities"), "festiv" );
	deepEqual( Stem("festivity"), "festiv" );
	deepEqual( Stem("fet"), "fet" );
	deepEqual( Stem("fetch"), "fetch" );
	deepEqual( Stem("fetched"), "fetch" );
	deepEqual( Stem("fetches"), "fetch" );
	deepEqual( Stem("fetching"), "fetch" );
	deepEqual( Stem("fete"), "fete" );
	deepEqual( Stem("fetes"), "fete" );
	deepEqual( Stem("fetlock"), "fetlock" );
	deepEqual( Stem("fetlocks"), "fetlock" );
	deepEqual( Stem("fett"), "fett" );
	deepEqual( Stem("fetter"), "fetter" );
	deepEqual( Stem("fettering"), "fetter" );
	deepEqual( Stem("fetters"), "fetter" );
	deepEqual( Stem("fettle"), "fettl" );
	deepEqual( Stem("feu"), "feu" );
	deepEqual( Stem("feud"), "feud" );
	deepEqual( Stem("feuds"), "feud" );
	deepEqual( Stem("fever"), "fever" );
	deepEqual( Stem("fevered"), "fever" );
	deepEqual( Stem("feverish"), "feverish" );
	deepEqual( Stem("feverishly"), "feverishli" );
	deepEqual( Stem("feverous"), "fever" );
	deepEqual( Stem("fevers"), "fever" );
	deepEqual( Stem("few"), "few" );
	deepEqual( Stem("fewer"), "fewer" );
	deepEqual( Stem("fewest"), "fewest" );
	deepEqual( Stem("fewness"), "few" );
	deepEqual( Stem("fib"), "fib" );
	deepEqual( Stem("fibber"), "fibber" );
	deepEqual( Stem("fibre"), "fibr" );
	deepEqual( Stem("fibs"), "fib" );
	deepEqual( Stem("fibster"), "fibster" );
	deepEqual( Stem("ficci"), "ficci" );
	deepEqual( Stem("fiche"), "fich" );
	deepEqual( Stem("fichus"), "fichu" );
	deepEqual( Stem("fickle"), "fickl" );
	deepEqual( Stem("fickleness"), "fickl" );
	deepEqual( Stem("fico"), "fico" );
	deepEqual( Stem("fiction"), "fiction" );
	deepEqual( Stem("fictitious"), "fictiti" );
	deepEqual( Stem("fiddle"), "fiddl" );
	deepEqual( Stem("fiddlede"), "fiddled" );
	deepEqual( Stem("fiddler"), "fiddler" );
	deepEqual( Stem("fiddlers"), "fiddler" );
	deepEqual( Stem("fiddlestick"), "fiddlestick" );
	deepEqual( Stem("fiddling"), "fiddl" );
	deepEqual( Stem("fidele"), "fidel" );
	deepEqual( Stem("fidelicet"), "fidelicet" );
	deepEqual( Stem("fidelio"), "fidelio" );
	deepEqual( Stem("fidelity"), "fidel" );
	deepEqual( Stem("fidius"), "fidiu" );
	deepEqual( Stem("fie"), "fie" );
	deepEqual( Stem("field"), "field" );
	deepEqual( Stem("fielded"), "field" );
	deepEqual( Stem("fielding"), "field" );
	deepEqual( Stem("fields"), "field" );
	deepEqual( Stem("fiend"), "fiend" );
	deepEqual( Stem("fiendish"), "fiendish" );
	deepEqual( Stem("fiends"), "fiend" );
	deepEqual( Stem("fierce"), "fierc" );
	deepEqual( Stem("fiercely"), "fierc" );
	deepEqual( Stem("fierceness"), "fierc" );
	deepEqual( Stem("fiery"), "fieri" );
	deepEqual( Stem("fife"), "fife" );
	deepEqual( Stem("fifes"), "fife" );
	deepEqual( Stem("fifine"), "fifin" );
	deepEqual( Stem("fifteen"), "fifteen" );
	deepEqual( Stem("fifteens"), "fifteen" );
	deepEqual( Stem("fifteenth"), "fifteenth" );
	deepEqual( Stem("fifth"), "fifth" );
	deepEqual( Stem("fiftieth"), "fiftieth" );
	deepEqual( Stem("fifty"), "fifti" );
	deepEqual( Stem("fiftyfold"), "fiftyfold" );
	deepEqual( Stem("fig"), "fig" );
	deepEqual( Stem("fight"), "fight" );
	deepEqual( Stem("fighter"), "fighter" );
	deepEqual( Stem("fightest"), "fightest" );
	deepEqual( Stem("fighteth"), "fighteth" );
	deepEqual( Stem("fighting"), "fight" );
	deepEqual( Stem("fights"), "fight" );
	deepEqual( Stem("figo"), "figo" );
	deepEqual( Stem("figs"), "fig" );
	deepEqual( Stem("figur"), "figur" );
	deepEqual( Stem("figure"), "figur" );
	deepEqual( Stem("figured"), "figur" );
	deepEqual( Stem("figures"), "figur" );
	deepEqual( Stem("figuring"), "figur" );
	deepEqual( Stem("fiji"), "fiji" );
	deepEqual( Stem("fike"), "fike" );
	deepEqual( Stem("fil"), "fil" );
	deepEqual( Stem("filberts"), "filbert" );
	deepEqual( Stem("filch"), "filch" );
	deepEqual( Stem("filches"), "filch" );
	deepEqual( Stem("filching"), "filch" );
	deepEqual( Stem("file"), "file" );
	deepEqual( Stem("filed"), "file" );
	deepEqual( Stem("files"), "file" );
	deepEqual( Stem("filial"), "filial" );
	deepEqual( Stem("filigree"), "filigre" );
	deepEqual( Stem("filius"), "filiu" );
	deepEqual( Stem("fill"), "fill" );
	deepEqual( Stem("filled"), "fill" );
	deepEqual( Stem("fillet"), "fillet" );
	deepEqual( Stem("filling"), "fill" );
	deepEqual( Stem("fillip"), "fillip" );
	deepEqual( Stem("fills"), "fill" );
	deepEqual( Stem("filly"), "filli" );
	deepEqual( Stem("film"), "film" );
	deepEqual( Stem("fils"), "fil" );
	deepEqual( Stem("filth"), "filth" );
	deepEqual( Stem("filths"), "filth" );
	deepEqual( Stem("filthy"), "filthi" );
	deepEqual( Stem("fin"), "fin" );
	deepEqual( Stem("final"), "final" );
	deepEqual( Stem("finale"), "final" );
	deepEqual( Stem("finally"), "final" );
	deepEqual( Stem("finances"), "financ" );
	deepEqual( Stem("financier"), "financi" );
	deepEqual( Stem("finch"), "finch" );
	deepEqual( Stem("finchley"), "finchlei" );
	deepEqual( Stem("find"), "find" );
	deepEqual( Stem("finder"), "finder" );
	deepEqual( Stem("findeth"), "findeth" );
	deepEqual( Stem("finding"), "find" );
	deepEqual( Stem("findings"), "find" );
	deepEqual( Stem("finds"), "find" );
	deepEqual( Stem("fine"), "fine" );
	deepEqual( Stem("fineless"), "fineless" );
	deepEqual( Stem("finely"), "fine" );
	deepEqual( Stem("finem"), "finem" );
	deepEqual( Stem("fineness"), "fine" );
	deepEqual( Stem("finer"), "finer" );
	deepEqual( Stem("finery"), "fineri" );
	deepEqual( Stem("fines"), "fine" );
	deepEqual( Stem("finest"), "finest" );
	deepEqual( Stem("finette"), "finett" );
	deepEqual( Stem("fing"), "fing" );
	deepEqual( Stem("finger"), "finger" );
	deepEqual( Stem("fingered"), "finger" );
	deepEqual( Stem("fingering"), "finger" );
	deepEqual( Stem("fingers"), "finger" );
	deepEqual( Stem("fingre"), "fingr" );
	deepEqual( Stem("fingres"), "fingr" );
	deepEqual( Stem("finical"), "finic" );
	deepEqual( Stem("finikin"), "finikin" );
	deepEqual( Stem("finish"), "finish" );
	deepEqual( Stem("finished"), "finish" );
	deepEqual( Stem("finisher"), "finish" );
	deepEqual( Stem("finishing"), "finish" );
	deepEqual( Stem("finless"), "finless" );
	deepEqual( Stem("finn"), "finn" );
	deepEqual( Stem("fins"), "fin" );
	deepEqual( Stem("finsbury"), "finsburi" );
	deepEqual( Stem("fipps"), "fipp" );
	deepEqual( Stem("fir"), "fir" );
	deepEqual( Stem("firago"), "firago" );
	deepEqual( Stem("fire"), "fire" );
	deepEqual( Stem("firebrace"), "firebrac" );
	deepEqual( Stem("firebrand"), "firebrand" );
	deepEqual( Stem("firebrands"), "firebrand" );
	deepEqual( Stem("fired"), "fire" );
	deepEqual( Stem("fireplace"), "fireplac" );
	deepEqual( Stem("fires"), "fire" );
	deepEqual( Stem("fireside"), "firesid" );
	deepEqual( Stem("firework"), "firework" );
	deepEqual( Stem("fireworks"), "firework" );
	deepEqual( Stem("firing"), "fire" );
	deepEqual( Stem("firk"), "firk" );
	deepEqual( Stem("firkin"), "firkin" );
	deepEqual( Stem("firm"), "firm" );
	deepEqual( Stem("firmament"), "firmament" );
	deepEqual( Stem("firman"), "firman" );
	deepEqual( Stem("firmly"), "firmli" );
	deepEqual( Stem("firmness"), "firm" );
	deepEqual( Stem("firms"), "firm" );
	deepEqual( Stem("first"), "first" );
	deepEqual( Stem("firstlings"), "firstl" );
	deepEqual( Stem("fish"), "fish" );
	deepEqual( Stem("fishamble"), "fishambl" );
	deepEqual( Stem("fisher"), "fisher" );
	deepEqual( Stem("fishermen"), "fishermen" );
	deepEqual( Stem("fishers"), "fisher" );
	deepEqual( Stem("fishes"), "fish" );
	deepEqual( Stem("fishified"), "fishifi" );
	deepEqual( Stem("fishing"), "fish" );
	deepEqual( Stem("fishmonger"), "fishmong" );
	deepEqual( Stem("fishpond"), "fishpond" );
	deepEqual( Stem("fisnomy"), "fisnomi" );
	deepEqual( Stem("fist"), "fist" );
	deepEqual( Stem("fisting"), "fist" );
	deepEqual( Stem("fists"), "fist" );
	deepEqual( Stem("fistula"), "fistula" );
	deepEqual( Stem("fit"), "fit" );
	deepEqual( Stem("fitchew"), "fitchew" );
	deepEqual( Stem("fitful"), "fit" );
	deepEqual( Stem("fitly"), "fitli" );
	deepEqual( Stem("fitment"), "fitment" );
	deepEqual( Stem("fitness"), "fit" );
	deepEqual( Stem("fits"), "fit" );
	deepEqual( Stem("fitted"), "fit" );
	deepEqual( Stem("fitter"), "fitter" );
	deepEqual( Stem("fittest"), "fittest" );
	deepEqual( Stem("fitteth"), "fitteth" );
	deepEqual( Stem("fitting"), "fit" );
	deepEqual( Stem("fitz"), "fitz" );
	deepEqual( Stem("fitzjurld"), "fitzjurld" );
	deepEqual( Stem("fitzoof"), "fitzoof" );
	deepEqual( Stem("fitzrufus"), "fitzrufu" );
	deepEqual( Stem("fitzurse"), "fitzurs" );
	deepEqual( Stem("fitzwater"), "fitzwat" );
	deepEqual( Stem("five"), "five" );
	deepEqual( Stem("fivepence"), "fivep" );
	deepEqual( Stem("fives"), "five" );
	deepEqual( Stem("fix"), "fix" );
	deepEqual( Stem("fixed"), "fix" );
	deepEqual( Stem("fixes"), "fix" );
	deepEqual( Stem("fixeth"), "fixeth" );
	deepEqual( Stem("fixing"), "fix" );
	deepEqual( Stem("fixture"), "fixtur" );
	deepEqual( Stem("fl"), "fl" );
	deepEqual( Stem("flaccid"), "flaccid" );
	deepEqual( Stem("flag"), "flag" );
	deepEqual( Stem("flagging"), "flag" );
	deepEqual( Stem("flagon"), "flagon" );
	deepEqual( Stem("flagons"), "flagon" );
	deepEqual( Stem("flagrant"), "flagrant" );
	deepEqual( Stem("flags"), "flag" );
	deepEqual( Stem("flail"), "flail" );
	deepEqual( Stem("flakes"), "flake" );
	deepEqual( Stem("flaky"), "flaki" );
	deepEqual( Stem("flam"), "flam" );
	deepEqual( Stem("flambeau"), "flambeau" );
	deepEqual( Stem("flame"), "flame" );
	deepEqual( Stem("flamed"), "flame" );
	deepEqual( Stem("flamen"), "flamen" );
	deepEqual( Stem("flamens"), "flamen" );
	deepEqual( Stem("flames"), "flame" );
	deepEqual( Stem("flaming"), "flame" );
	deepEqual( Stem("flamingo"), "flamingo" );
	deepEqual( Stem("flaminius"), "flaminiu" );
	deepEqual( Stem("flanagan"), "flanagan" );
	deepEqual( Stem("flanahan"), "flanahan" );
	deepEqual( Stem("flanders"), "flander" );
	deepEqual( Stem("flank"), "flank" );
	deepEqual( Stem("flanked"), "flank" );
	deepEqual( Stem("flannel"), "flannel" );
	deepEqual( Stem("flannigan"), "flannigan" );
	deepEqual( Stem("flap"), "flap" );
	deepEqual( Stem("flapping"), "flap" );
	deepEqual( Stem("flaps"), "flap" );
	deepEqual( Stem("flare"), "flare" );
	deepEqual( Stem("flaring"), "flare" );
	deepEqual( Stem("flash"), "flash" );
	deepEqual( Stem("flashed"), "flash" );
	deepEqual( Stem("flashes"), "flash" );
	deepEqual( Stem("flashing"), "flash" );
	deepEqual( Stem("flask"), "flask" );
	deepEqual( Stem("flasks"), "flask" );
	deepEqual( Stem("flat"), "flat" );
	deepEqual( Stem("flatly"), "flatli" );
	deepEqual( Stem("flatness"), "flat" );
	deepEqual( Stem("flats"), "flat" );
	deepEqual( Stem("flatt"), "flatt" );
	deepEqual( Stem("flattened"), "flatten" );
	deepEqual( Stem("flatter"), "flatter" );
	deepEqual( Stem("flattered"), "flatter" );
	deepEqual( Stem("flatterer"), "flatter" );
	deepEqual( Stem("flatterers"), "flatter" );
	deepEqual( Stem("flatterest"), "flatterest" );
	deepEqual( Stem("flatteries"), "flatteri" );
	deepEqual( Stem("flattering"), "flatter" );
	deepEqual( Stem("flatters"), "flatter" );
	deepEqual( Stem("flattery"), "flatteri" );
	deepEqual( Stem("flaunted"), "flaunt" );
	deepEqual( Stem("flaunting"), "flaunt" );
	deepEqual( Stem("flaunts"), "flaunt" );
	deepEqual( Stem("flavio"), "flavio" );
	deepEqual( Stem("flavius"), "flaviu" );
	deepEqual( Stem("flavour"), "flavour" );
	deepEqual( Stem("flaw"), "flaw" );
	deepEqual( Stem("flaws"), "flaw" );
	deepEqual( Stem("flax"), "flax" );
	deepEqual( Stem("flaxen"), "flaxen" );
	deepEqual( Stem("flay"), "flai" );
	deepEqual( Stem("flaying"), "flai" );
	deepEqual( Stem("flea"), "flea" );
	deepEqual( Stem("fleance"), "fleanc" );
	deepEqual( Stem("fleas"), "flea" );
	deepEqual( Stem("flecked"), "fleck" );
	deepEqual( Stem("fled"), "fled" );
	deepEqual( Stem("fledge"), "fledg" );
	deepEqual( Stem("flee"), "flee" );
	deepEqual( Stem("fleec"), "fleec" );
	deepEqual( Stem("fleece"), "fleec" );
	deepEqual( Stem("fleeced"), "fleec" );
	deepEqual( Stem("fleeces"), "fleec" );
	deepEqual( Stem("fleer"), "fleer" );
	deepEqual( Stem("fleering"), "fleer" );
	deepEqual( Stem("fleers"), "fleer" );
	deepEqual( Stem("fleet"), "fleet" );
	deepEqual( Stem("fleeter"), "fleeter" );
	deepEqual( Stem("fleeting"), "fleet" );
	deepEqual( Stem("fleming"), "fleme" );
	deepEqual( Stem("flemish"), "flemish" );
	deepEqual( Stem("flesh"), "flesh" );
	deepEqual( Stem("fleshes"), "flesh" );
	deepEqual( Stem("fleshly"), "fleshli" );
	deepEqual( Stem("fleshment"), "fleshment" );
	deepEqual( Stem("fleshmonger"), "fleshmong" );
	deepEqual( Stem("fleshpots"), "fleshpot" );
	deepEqual( Stem("flethers"), "flether" );
	deepEqual( Stem("fleuve"), "fleuv" );
	deepEqual( Stem("flew"), "flew" );
	deepEqual( Stem("flexible"), "flexibl" );
	deepEqual( Stem("flexure"), "flexur" );
	deepEqual( Stem("flibbertigibbet"), "flibbertigibbet" );
	deepEqual( Stem("flick"), "flick" );
	deepEqual( Stem("flickered"), "flicker" );
	deepEqual( Stem("flickering"), "flicker" );
	deepEqual( Stem("flicks"), "flick" );
	deepEqual( Stem("flidge"), "flidg" );
	deepEqual( Stem("fliers"), "flier" );
	deepEqual( Stem("flies"), "fli" );
	deepEqual( Stem("flieth"), "flieth" );
	deepEqual( Stem("flight"), "flight" );
	deepEqual( Stem("flights"), "flight" );
	deepEqual( Stem("flighty"), "flighti" );
	deepEqual( Stem("flinch"), "flinch" );
	deepEqual( Stem("fling"), "fling" );
	deepEqual( Stem("flinging"), "fling" );
	deepEqual( Stem("flings"), "fling" );
	deepEqual( Stem("flint"), "flint" );
	deepEqual( Stem("flints"), "flint" );
	deepEqual( Stem("flinty"), "flinti" );
	deepEqual( Stem("flippancy"), "flippanc" );
	deepEqual( Stem("flirt"), "flirt" );
	deepEqual( Stem("flirtation"), "flirtat" );
	deepEqual( Stem("flirted"), "flirt" );
	deepEqual( Stem("flirting"), "flirt" );
	deepEqual( Stem("flitting"), "flit" );
	deepEqual( Stem("float"), "float" );
	deepEqual( Stem("floated"), "float" );
	deepEqual( Stem("floating"), "float" );
	deepEqual( Stem("floats"), "float" );
	deepEqual( Stem("flock"), "flock" );
	deepEqual( Stem("flocks"), "flock" );
	deepEqual( Stem("flog"), "flog" );
	deepEqual( Stem("flogged"), "flog" );
	deepEqual( Stem("floggings"), "flog" );
	deepEqual( Stem("flood"), "flood" );
	deepEqual( Stem("floodgates"), "floodgat" );
	deepEqual( Stem("floods"), "flood" );
	deepEqual( Stem("floor"), "floor" );
	deepEqual( Stem("floored"), "floor" );
	deepEqual( Stem("floors"), "floor" );
	deepEqual( Stem("flora"), "flora" );
	deepEqual( Stem("florence"), "florenc" );
	deepEqual( Stem("florentine"), "florentin" );
	deepEqual( Stem("florentines"), "florentin" );
	deepEqual( Stem("florentius"), "florentiu" );
	deepEqual( Stem("florestan"), "florestan" );
	deepEqual( Stem("florid"), "florid" );
	deepEqual( Stem("florins"), "florin" );
	deepEqual( Stem("florizel"), "florizel" );
	deepEqual( Stem("floss"), "floss" );
	deepEqual( Stem("flote"), "flote" );
	deepEqual( Stem("floulish"), "floulish" );
	deepEqual( Stem("flouncing"), "flounc" );
	deepEqual( Stem("floundered"), "flounder" );
	deepEqual( Stem("flour"), "flour" );
	deepEqual( Stem("flourish"), "flourish" );
	deepEqual( Stem("flourishes"), "flourish" );
	deepEqual( Stem("flourisheth"), "flourisheth" );
	deepEqual( Stem("flourishing"), "flourish" );
	deepEqual( Stem("flout"), "flout" );
	deepEqual( Stem("flouted"), "flout" );
	deepEqual( Stem("flouting"), "flout" );
	deepEqual( Stem("flouts"), "flout" );
	deepEqual( Stem("flow"), "flow" );
	deepEqual( Stem("flowed"), "flow" );
	deepEqual( Stem("flower"), "flower" );
	deepEqual( Stem("flowerdale"), "flowerdal" );
	deepEqual( Stem("flowerdew"), "flowerdew" );
	deepEqual( Stem("flowered"), "flower" );
	deepEqual( Stem("flowerets"), "floweret" );
	deepEqual( Stem("flowers"), "flower" );
	deepEqual( Stem("flowing"), "flow" );
	deepEqual( Stem("flown"), "flown" );
	deepEqual( Stem("flows"), "flow" );
	deepEqual( Stem("fluellen"), "fluellen" );
	deepEqual( Stem("fluency"), "fluenci" );
	deepEqual( Stem("fluent"), "fluent" );
	deepEqual( Stem("fluid"), "fluid" );
	deepEqual( Stem("flung"), "flung" );
	deepEqual( Stem("flures"), "flure" );
	deepEqual( Stem("flurried"), "flurri" );
	deepEqual( Stem("flurry"), "flurri" );
	deepEqual( Stem("flush"), "flush" );
	deepEqual( Stem("flushed"), "flush" );
	deepEqual( Stem("flushing"), "flush" );
	deepEqual( Stem("fluster"), "fluster" );
	deepEqual( Stem("flute"), "flute" );
	deepEqual( Stem("flutes"), "flute" );
	deepEqual( Stem("flutter"), "flutter" );
	deepEqual( Stem("fluttering"), "flutter" );
	deepEqual( Stem("fluvy"), "fluvi" );
	deepEqual( Stem("flux"), "flux" );
	deepEqual( Stem("fluxive"), "fluxiv" );
	deepEqual( Stem("fly"), "fly" );
	deepEqual( Stem("flyer"), "flyer" );
	deepEqual( Stem("flying"), "fly" );
	deepEqual( Stem("fo"), "fo" );
	deepEqual( Stem("foal"), "foal" );
	deepEqual( Stem("foals"), "foal" );
	deepEqual( Stem("foam"), "foam" );
	deepEqual( Stem("foamed"), "foam" );
	deepEqual( Stem("foaming"), "foam" );
	deepEqual( Stem("foams"), "foam" );
	deepEqual( Stem("foamy"), "foami" );
	deepEqual( Stem("fob"), "fob" );
	deepEqual( Stem("focative"), "foc" );
	deepEqual( Stem("fodder"), "fodder" );
	deepEqual( Stem("foe"), "foe" );
	deepEqual( Stem("foeman"), "foeman" );
	deepEqual( Stem("foemen"), "foemen" );
	deepEqual( Stem("foes"), "foe" );
	deepEqual( Stem("fog"), "fog" );
	deepEqual( Stem("fogarty"), "fogarti" );
	deepEqual( Stem("fogey"), "fogei" );
	deepEqual( Stem("foggy"), "foggi" );
	deepEqual( Stem("fogle"), "fogl" );
	deepEqual( Stem("fogles"), "fogl" );
	deepEqual( Stem("fogs"), "fog" );
	deepEqual( Stem("foh"), "foh" );
	deepEqual( Stem("foi"), "foi" );
	deepEqual( Stem("foibles"), "foibl" );
	deepEqual( Stem("foie"), "foie" );
	deepEqual( Stem("foil"), "foil" );
	deepEqual( Stem("foiled"), "foil" );
	deepEqual( Stem("foils"), "foil" );
	deepEqual( Stem("foin"), "foin" );
	deepEqual( Stem("foining"), "foin" );
	deepEqual( Stem("foins"), "foin" );
	deepEqual( Stem("fois"), "foi" );
	deepEqual( Stem("foison"), "foison" );
	deepEqual( Stem("foisons"), "foison" );
	deepEqual( Stem("foist"), "foist" );
	deepEqual( Stem("foix"), "foix" );
	deepEqual( Stem("fold"), "fold" );
	deepEqual( Stem("folded"), "fold" );
	deepEqual( Stem("folds"), "fold" );
	deepEqual( Stem("foliage"), "foliag" );
	deepEqual( Stem("folio"), "folio" );
	deepEqual( Stem("folk"), "folk" );
	deepEqual( Stem("folks"), "folk" );
	deepEqual( Stem("follies"), "folli" );
	deepEqual( Stem("follow"), "follow" );
	deepEqual( Stem("followed"), "follow" );
	deepEqual( Stem("follower"), "follow" );
	deepEqual( Stem("followers"), "follow" );
	deepEqual( Stem("followest"), "followest" );
	deepEqual( Stem("following"), "follow" );
	deepEqual( Stem("follows"), "follow" );
	deepEqual( Stem("folly"), "folli" );
	deepEqual( Stem("fond"), "fond" );
	deepEqual( Stem("fonder"), "fonder" );
	deepEqual( Stem("fondest"), "fondest" );
	deepEqual( Stem("fondle"), "fondl" );
	deepEqual( Stem("fondly"), "fondli" );
	deepEqual( Stem("fondness"), "fond" );
	deepEqual( Stem("font"), "font" );
	deepEqual( Stem("fontibell"), "fontibel" );
	deepEqual( Stem("food"), "food" );
	deepEqual( Stem("fool"), "fool" );
	deepEqual( Stem("fooleries"), "fooleri" );
	deepEqual( Stem("foolery"), "fooleri" );
	deepEqual( Stem("foolhardy"), "foolhardi" );
	deepEqual( Stem("fooling"), "fool" );
	deepEqual( Stem("foolish"), "foolish" );
	deepEqual( Stem("foolishly"), "foolishli" );
	deepEqual( Stem("foolishness"), "foolish" );
	deepEqual( Stem("fools"), "fool" );
	deepEqual( Stem("foot"), "foot" );
	deepEqual( Stem("football"), "footbal" );
	deepEqual( Stem("footboard"), "footboard" );
	deepEqual( Stem("footboy"), "footboi" );
	deepEqual( Stem("footboys"), "footboi" );
	deepEqual( Stem("footed"), "foot" );
	deepEqual( Stem("footfall"), "footfal" );
	deepEqual( Stem("footing"), "foot" );
	deepEqual( Stem("footman"), "footman" );
	deepEqual( Stem("footmen"), "footmen" );
	deepEqual( Stem("footpath"), "footpath" );
	deepEqual( Stem("footsteps"), "footstep" );
	deepEqual( Stem("footstool"), "footstool" );
	deepEqual( Stem("footstools"), "footstool" );
	deepEqual( Stem("fopp"), "fopp" );
	deepEqual( Stem("fopped"), "fop" );
	deepEqual( Stem("foppery"), "fopperi" );
	deepEqual( Stem("foppish"), "foppish" );
	deepEqual( Stem("fops"), "fop" );
	deepEqual( Stem("for"), "for" );
	deepEqual( Stem("forage"), "forag" );
	deepEqual( Stem("foragers"), "forag" );
	deepEqual( Stem("foraging"), "forag" );
	deepEqual( Stem("forbade"), "forbad" );
	deepEqual( Stem("forbear"), "forbear" );
	deepEqual( Stem("forbearance"), "forbear" );
	deepEqual( Stem("forbears"), "forbear" );
	deepEqual( Stem("forbid"), "forbid" );
	deepEqual( Stem("forbidden"), "forbidden" );
	deepEqual( Stem("forbiddenly"), "forbiddenli" );
	deepEqual( Stem("forbids"), "forbid" );
	deepEqual( Stem("forbod"), "forbod" );
	deepEqual( Stem("forborne"), "forborn" );
	deepEqual( Stem("forc"), "forc" );
	deepEqual( Stem("force"), "forc" );
	deepEqual( Stem("forced"), "forc" );
	deepEqual( Stem("forceful"), "forc" );
	deepEqual( Stem("forceless"), "forceless" );
	deepEqual( Stem("forceps"), "forcep" );
	deepEqual( Stem("forces"), "forc" );
	deepEqual( Stem("forcible"), "forcibl" );
	deepEqual( Stem("forcibly"), "forcibli" );
	deepEqual( Stem("forcing"), "forc" );
	deepEqual( Stem("ford"), "ford" );
	deepEqual( Stem("fordid"), "fordid" );
	deepEqual( Stem("fordo"), "fordo" );
	deepEqual( Stem("fordoes"), "fordo" );
	deepEqual( Stem("fordone"), "fordon" );
	deepEqual( Stem("fore"), "fore" );
	deepEqual( Stem("foreboded"), "forebod" );
	deepEqual( Stem("forebodings"), "forebod" );
	deepEqual( Stem("forecast"), "forecast" );
	deepEqual( Stem("foredeck"), "foredeck" );
	deepEqual( Stem("forefather"), "forefath" );
	deepEqual( Stem("forefathers"), "forefath" );
	deepEqual( Stem("forefinger"), "forefing" );
	deepEqual( Stem("forego"), "forego" );
	deepEqual( Stem("foregoing"), "forego" );
	deepEqual( Stem("foregone"), "foregon" );
	deepEqual( Stem("foreground"), "foreground" );
	deepEqual( Stem("forehand"), "forehand" );
	deepEqual( Stem("forehead"), "forehead" );
	deepEqual( Stem("foreheads"), "forehead" );
	deepEqual( Stem("forehorse"), "forehors" );
	deepEqual( Stem("foreign"), "foreign" );
	deepEqual( Stem("foreigner"), "foreign" );
	deepEqual( Stem("foreigners"), "foreign" );
	deepEqual( Stem("foreknowing"), "foreknow" );
	deepEqual( Stem("foreknowledge"), "foreknowledg" );
	deepEqual( Stem("foremost"), "foremost" );
	deepEqual( Stem("forenamed"), "forenam" );
	deepEqual( Stem("forenoon"), "forenoon" );
	deepEqual( Stem("forenoons"), "forenoon" );
	deepEqual( Stem("forerun"), "forerun" );
	deepEqual( Stem("forerunner"), "forerunn" );
	deepEqual( Stem("forerunning"), "forerun" );
	deepEqual( Stem("foreruns"), "forerun" );
	deepEqual( Stem("foresaid"), "foresaid" );
	deepEqual( Stem("foresaw"), "foresaw" );
	deepEqual( Stem("foresay"), "foresai" );
	deepEqual( Stem("foresee"), "forese" );
	deepEqual( Stem("foreseeing"), "forese" );
	deepEqual( Stem("foresees"), "forese" );
	deepEqual( Stem("foreshow"), "foreshow" );
	deepEqual( Stem("foresight"), "foresight" );
	deepEqual( Stem("foreskirt"), "foreskirt" );
	deepEqual( Stem("forespent"), "foresp" );
	deepEqual( Stem("forest"), "forest" );
	deepEqual( Stem("forestall"), "forestal" );
	deepEqual( Stem("forestalled"), "forestal" );
	deepEqual( Stem("forester"), "forest" );
	deepEqual( Stem("foresters"), "forest" );
	deepEqual( Stem("forests"), "forest" );
	deepEqual( Stem("foretell"), "foretel" );
	deepEqual( Stem("foretelling"), "foretel" );
	deepEqual( Stem("foretells"), "foretel" );
	deepEqual( Stem("forethink"), "forethink" );
	deepEqual( Stem("forethought"), "forethought" );
	deepEqual( Stem("foretold"), "foretold" );
	deepEqual( Stem("forever"), "forev" );
	deepEqual( Stem("foreward"), "foreward" );
	deepEqual( Stem("forewarn"), "forewarn" );
	deepEqual( Stem("forewarned"), "forewarn" );
	deepEqual( Stem("forewarning"), "forewarn" );
	deepEqual( Stem("forfeit"), "forfeit" );
	deepEqual( Stem("forfeited"), "forfeit" );
	deepEqual( Stem("forfeiters"), "forfeit" );
	deepEqual( Stem("forfeiting"), "forfeit" );
	deepEqual( Stem("forfeits"), "forfeit" );
	deepEqual( Stem("forfeiture"), "forfeitur" );
	deepEqual( Stem("forfeitures"), "forfeitur" );
	deepEqual( Stem("forfend"), "forfend" );
	deepEqual( Stem("forfended"), "forfend" );
	deepEqual( Stem("forg"), "forg" );
	deepEqual( Stem("forgave"), "forgav" );
	deepEqual( Stem("forge"), "forg" );
	deepEqual( Stem("forged"), "forg" );
	deepEqual( Stem("forgeries"), "forgeri" );
	deepEqual( Stem("forgery"), "forgeri" );
	deepEqual( Stem("forges"), "forg" );
	deepEqual( Stem("forget"), "forget" );
	deepEqual( Stem("forgetful"), "forget" );
	deepEqual( Stem("forgetfulness"), "forget" );
	deepEqual( Stem("forgetive"), "forget" );
	deepEqual( Stem("forgets"), "forget" );
	deepEqual( Stem("forgetting"), "forget" );
	deepEqual( Stem("forgive"), "forgiv" );
	deepEqual( Stem("forgiven"), "forgiven" );
	deepEqual( Stem("forgiveness"), "forgiv" );
	deepEqual( Stem("forgives"), "forgiv" );
	deepEqual( Stem("forgiving"), "forgiv" );
	deepEqual( Stem("forgo"), "forgo" );
	deepEqual( Stem("forgoing"), "forgo" );
	deepEqual( Stem("forgone"), "forgon" );
	deepEqual( Stem("forgot"), "forgot" );
	deepEqual( Stem("forgotten"), "forgotten" );
	deepEqual( Stem("fork"), "fork" );
	deepEqual( Stem("forked"), "fork" );
	deepEqual( Stem("forks"), "fork" );
	deepEqual( Stem("forlorn"), "forlorn" );
	deepEqual( Stem("form"), "form" );
	deepEqual( Stem("formal"), "formal" );
	deepEqual( Stem("formality"), "formal" );
	deepEqual( Stem("formally"), "formal" );
	deepEqual( Stem("formed"), "form" );
	deepEqual( Stem("former"), "former" );
	deepEqual( Stem("formerly"), "formerli" );
	deepEqual( Stem("forming"), "form" );
	deepEqual( Stem("formless"), "formless" );
	deepEqual( Stem("forms"), "form" );
	deepEqual( Stem("formula"), "formula" );
	deepEqual( Stem("fornication"), "fornic" );
	deepEqual( Stem("fornications"), "fornic" );
	deepEqual( Stem("fornicatress"), "fornicatress" );
	deepEqual( Stem("forres"), "forr" );
	deepEqual( Stem("forrest"), "forrest" );
	deepEqual( Stem("forsake"), "forsak" );
	deepEqual( Stem("forsaken"), "forsaken" );
	deepEqual( Stem("forsaketh"), "forsaketh" );
	deepEqual( Stem("forslow"), "forslow" );
	deepEqual( Stem("forsook"), "forsook" );
	deepEqual( Stem("forsooth"), "forsooth" );
	deepEqual( Stem("forspent"), "forspent" );
	deepEqual( Stem("forspoke"), "forspok" );
	deepEqual( Stem("forswear"), "forswear" );
	deepEqual( Stem("forswearing"), "forswear" );
	deepEqual( Stem("forswore"), "forswor" );
	deepEqual( Stem("forsworn"), "forsworn" );
	deepEqual( Stem("fort"), "fort" );
	deepEqual( Stem("forte"), "fort" );
	deepEqual( Stem("forted"), "fort" );
	deepEqual( Stem("forth"), "forth" );
	deepEqual( Stem("forthcoming"), "forthcom" );
	deepEqual( Stem("forthlight"), "forthlight" );
	deepEqual( Stem("forthright"), "forthright" );
	deepEqual( Stem("forthwith"), "forthwith" );
	deepEqual( Stem("fortification"), "fortif" );
	deepEqual( Stem("fortifications"), "fortif" );
	deepEqual( Stem("fortified"), "fortifi" );
	deepEqual( Stem("fortifies"), "fortifi" );
	deepEqual( Stem("fortify"), "fortifi" );
	deepEqual( Stem("fortinbras"), "fortinbra" );
	deepEqual( Stem("fortitude"), "fortitud" );
	deepEqual( Stem("fortnight"), "fortnight" );
	deepEqual( Stem("fortress"), "fortress" );
	deepEqual( Stem("fortresses"), "fortress" );
	deepEqual( Stem("forts"), "fort" );
	deepEqual( Stem("fortun"), "fortun" );
	deepEqual( Stem("fortuna"), "fortuna" );
	deepEqual( Stem("fortunate"), "fortun" );
	deepEqual( Stem("fortunately"), "fortun" );
	deepEqual( Stem("fortune"), "fortun" );
	deepEqual( Stem("fortuned"), "fortun" );
	deepEqual( Stem("fortunes"), "fortun" );
	deepEqual( Stem("fortward"), "fortward" );
	deepEqual( Stem("forty"), "forti" );
	deepEqual( Stem("forum"), "forum" );
	deepEqual( Stem("forward"), "forward" );
	deepEqual( Stem("forwarding"), "forward" );
	deepEqual( Stem("forwardness"), "forward" );
	deepEqual( Stem("forwards"), "forward" );
	deepEqual( Stem("forwearied"), "forweari" );
	deepEqual( Stem("fosset"), "fosset" );
	deepEqual( Stem("fost"), "fost" );
	deepEqual( Stem("foster"), "foster" );
	deepEqual( Stem("fostered"), "foster" );
	deepEqual( Stem("fought"), "fought" );
	deepEqual( Stem("foughten"), "foughten" );
	deepEqual( Stem("foul"), "foul" );
	deepEqual( Stem("fouler"), "fouler" );
	deepEqual( Stem("foulest"), "foulest" );
	deepEqual( Stem("foully"), "foulli" );
	deepEqual( Stem("foulness"), "foul" );
	deepEqual( Stem("found"), "found" );
	deepEqual( Stem("foundation"), "foundat" );
	deepEqual( Stem("foundations"), "foundat" );
	deepEqual( Stem("founded"), "found" );
	deepEqual( Stem("founder"), "founder" );
	deepEqual( Stem("founders"), "founder" );
	deepEqual( Stem("foundling"), "foundl" );
	deepEqual( Stem("fount"), "fount" );
	deepEqual( Stem("fountain"), "fountain" );
	deepEqual( Stem("fountains"), "fountain" );
	deepEqual( Stem("founts"), "fount" );
	deepEqual( Stem("four"), "four" );
	deepEqual( Stem("fourchette"), "fourchett" );
	deepEqual( Stem("fourgon"), "fourgon" );
	deepEqual( Stem("fourgons"), "fourgon" );
	deepEqual( Stem("fourscore"), "fourscor" );
	deepEqual( Stem("fourteen"), "fourteen" );
	deepEqual( Stem("fourth"), "fourth" );
	deepEqual( Stem("fourths"), "fourth" );
	deepEqual( Stem("foutra"), "foutra" );
	deepEqual( Stem("fowl"), "fowl" );
	deepEqual( Stem("fowler"), "fowler" );
	deepEqual( Stem("fowling"), "fowl" );
	deepEqual( Stem("fowls"), "fowl" );
	deepEqual( Stem("fowr"), "fowr" );
	deepEqual( Stem("fox"), "fox" );
	deepEqual( Stem("foxes"), "fox" );
	deepEqual( Stem("foxship"), "foxship" );
	deepEqual( Stem("fracas"), "fraca" );
	deepEqual( Stem("fracted"), "fract" );
	deepEqual( Stem("fraction"), "fraction" );
	deepEqual( Stem("fractions"), "fraction" );
	deepEqual( Stem("fragile"), "fragil" );
	deepEqual( Stem("fragment"), "fragment" );
	deepEqual( Stem("fragments"), "fragment" );
	deepEqual( Stem("fragrance"), "fragranc" );
	deepEqual( Stem("fragrant"), "fragrant" );
	deepEqual( Stem("fraiches"), "fraich" );
	deepEqual( Stem("frail"), "frail" );
	deepEqual( Stem("frailer"), "frailer" );
	deepEqual( Stem("frailties"), "frailti" );
	deepEqual( Stem("frailty"), "frailti" );
	deepEqual( Stem("fram"), "fram" );
	deepEqual( Stem("frame"), "frame" );
	deepEqual( Stem("framed"), "frame" );
	deepEqual( Stem("frames"), "frame" );
	deepEqual( Stem("frampold"), "frampold" );
	deepEqual( Stem("fran"), "fran" );
	deepEqual( Stem("franc"), "franc" );
	deepEqual( Stem("francais"), "francai" );
	deepEqual( Stem("france"), "franc" );
	deepEqual( Stem("frances"), "franc" );
	deepEqual( Stem("franchise"), "franchis" );
	deepEqual( Stem("franchised"), "franchis" );
	deepEqual( Stem("franchisement"), "franchis" );
	deepEqual( Stem("franchises"), "franchis" );
	deepEqual( Stem("franciae"), "francia" );
	deepEqual( Stem("francis"), "franci" );
	deepEqual( Stem("francisca"), "francisca" );
	deepEqual( Stem("franciscan"), "franciscan" );
	deepEqual( Stem("francisco"), "francisco" );
	deepEqual( Stem("francs"), "franc" );
	deepEqual( Stem("frank"), "frank" );
	deepEqual( Stem("franker"), "franker" );
	deepEqual( Stem("frankest"), "frankest" );
	deepEqual( Stem("frankfort"), "frankfort" );
	deepEqual( Stem("franklin"), "franklin" );
	deepEqual( Stem("franklins"), "franklin" );
	deepEqual( Stem("frankly"), "frankli" );
	deepEqual( Stem("frankness"), "frank" );
	deepEqual( Stem("frantic"), "frantic" );
	deepEqual( Stem("frantically"), "frantic" );
	deepEqual( Stem("franticly"), "franticli" );
	deepEqual( Stem("frascati"), "frascati" );
	deepEqual( Stem("frateretto"), "frateretto" );
	deepEqual( Stem("fraternally"), "fratern" );
	deepEqual( Stem("fraternity"), "fratern" );
	deepEqual( Stem("fratrum"), "fratrum" );
	deepEqual( Stem("fraud"), "fraud" );
	deepEqual( Stem("fraudful"), "fraud" );
	deepEqual( Stem("fraught"), "fraught" );
	deepEqual( Stem("fraughtage"), "fraughtag" );
	deepEqual( Stem("fraughting"), "fraught" );
	deepEqual( Stem("fray"), "frai" );
	deepEqual( Stem("frays"), "frai" );
	deepEqual( Stem("freckl"), "freckl" );
	deepEqual( Stem("freckled"), "freckl" );
	deepEqual( Stem("freckles"), "freckl" );
	deepEqual( Stem("fred"), "fred" );
	deepEqual( Stem("fredaines"), "fredain" );
	deepEqual( Stem("frederica"), "frederica" );
	deepEqual( Stem("frederick"), "frederick" );
	deepEqual( Stem("free"), "free" );
	deepEqual( Stem("freed"), "freed" );
	deepEqual( Stem("freedom"), "freedom" );
	deepEqual( Stem("freedoms"), "freedom" );
	deepEqual( Stem("freehearted"), "freeheart" );
	deepEqual( Stem("freehold"), "freehold" );
	deepEqual( Stem("freeing"), "free" );
	deepEqual( Stem("freelier"), "freelier" );
	deepEqual( Stem("freely"), "freeli" );
	deepEqual( Stem("freeman"), "freeman" );
	deepEqual( Stem("freemasonry"), "freemasonri" );
	deepEqual( Stem("freemen"), "freemen" );
	deepEqual( Stem("freeness"), "freeness" );
	deepEqual( Stem("freer"), "freer" );
	deepEqual( Stem("frees"), "free" );
	deepEqual( Stem("freestone"), "freeston" );
	deepEqual( Stem("freetown"), "freetown" );
	deepEqual( Stem("freeze"), "freez" );
	deepEqual( Stem("freezes"), "freez" );
	deepEqual( Stem("freezing"), "freez" );
	deepEqual( Stem("freezings"), "freez" );
	deepEqual( Stem("french"), "french" );
	deepEqual( Stem("frenchman"), "frenchman" );
	deepEqual( Stem("frenchmen"), "frenchmen" );
	deepEqual( Stem("frenchwoman"), "frenchwoman" );
	deepEqual( Stem("frenzied"), "frenzi" );
	deepEqual( Stem("frenzy"), "frenzi" );
	deepEqual( Stem("frequency"), "frequenc" );
	deepEqual( Stem("frequent"), "frequent" );
	deepEqual( Stem("frequented"), "frequent" );
	deepEqual( Stem("frequenter"), "frequent" );
	deepEqual( Stem("frequenters"), "frequent" );
	deepEqual( Stem("frequenting"), "frequent" );
	deepEqual( Stem("frequently"), "frequent" );
	deepEqual( Stem("frequents"), "frequent" );
	deepEqual( Stem("fresh"), "fresh" );
	deepEqual( Stem("fresher"), "fresher" );
	deepEqual( Stem("freshes"), "fresh" );
	deepEqual( Stem("freshest"), "freshest" );
	deepEqual( Stem("freshly"), "freshli" );
	deepEqual( Stem("freshness"), "fresh" );
	deepEqual( Stem("fret"), "fret" );
	deepEqual( Stem("fretful"), "fret" );
	deepEqual( Stem("frets"), "fret" );
	deepEqual( Stem("fretted"), "fret" );
	deepEqual( Stem("fretten"), "fretten" );
	deepEqual( Stem("fretting"), "fret" );
	deepEqual( Stem("friar"), "friar" );
	deepEqual( Stem("friars"), "friar" );
	deepEqual( Stem("friday"), "fridai" );
	deepEqual( Stem("fridays"), "fridai" );
	deepEqual( Stem("friedland"), "friedland" );
	deepEqual( Stem("friend"), "friend" );
	deepEqual( Stem("friended"), "friend" );
	deepEqual( Stem("friending"), "friend" );
	deepEqual( Stem("friendless"), "friendless" );
	deepEqual( Stem("friendliest"), "friendliest" );
	deepEqual( Stem("friendliness"), "friendli" );
	deepEqual( Stem("friendly"), "friendli" );
	deepEqual( Stem("friends"), "friend" );
	deepEqual( Stem("friendship"), "friendship" );
	deepEqual( Stem("friendships"), "friendship" );
	deepEqual( Stem("frieze"), "friez" );
	deepEqual( Stem("fright"), "fright" );
	deepEqual( Stem("frighted"), "fright" );
	deepEqual( Stem("frighten"), "frighten" );
	deepEqual( Stem("frightened"), "frighten" );
	deepEqual( Stem("frightening"), "frighten" );
	deepEqual( Stem("frightful"), "fright" );
	deepEqual( Stem("frightfully"), "frightfulli" );
	deepEqual( Stem("frighting"), "fright" );
	deepEqual( Stem("frights"), "fright" );
	deepEqual( Stem("frigid"), "frigid" );
	deepEqual( Stem("frigidity"), "frigid" );
	deepEqual( Stem("frill"), "frill" );
	deepEqual( Stem("frilled"), "frill" );
	deepEqual( Stem("fringe"), "fring" );
	deepEqual( Stem("fringed"), "fring" );
	deepEqual( Stem("frippery"), "fripperi" );
	deepEqual( Stem("frisk"), "frisk" );
	deepEqual( Stem("frisks"), "frisk" );
	deepEqual( Stem("frith"), "frith" );
	deepEqual( Stem("fritters"), "fritter" );
	deepEqual( Stem("fritz"), "fritz" );
	deepEqual( Stem("frivolity"), "frivol" );
	deepEqual( Stem("frivolous"), "frivol" );
	deepEqual( Stem("fro"), "fro" );
	deepEqual( Stem("frock"), "frock" );
	deepEqual( Stem("frockcoat"), "frockcoat" );
	deepEqual( Stem("frocks"), "frock" );
	deepEqual( Stem("frog"), "frog" );
	deepEqual( Stem("frogged"), "frog" );
	deepEqual( Stem("frogmore"), "frogmor" );
	deepEqual( Stem("frogs"), "frog" );
	deepEqual( Stem("froissart"), "froissart" );
	deepEqual( Stem("frolic"), "frolic" );
	deepEqual( Stem("from"), "from" );
	deepEqual( Stem("front"), "front" );
	deepEqual( Stem("frontal"), "frontal" );
	deepEqual( Stem("fronted"), "front" );
	deepEqual( Stem("frontier"), "frontier" );
	deepEqual( Stem("frontiers"), "frontier" );
	deepEqual( Stem("fronting"), "front" );
	deepEqual( Stem("frontispiece"), "frontispiec" );
	deepEqual( Stem("frontispieces"), "frontispiec" );
	deepEqual( Stem("frontlet"), "frontlet" );
	deepEqual( Stem("fronts"), "front" );
	deepEqual( Stem("frost"), "frost" );
	deepEqual( Stem("frosts"), "frost" );
	deepEqual( Stem("frosty"), "frosti" );
	deepEqual( Stem("froth"), "froth" );
	deepEqual( Stem("frothed"), "froth" );
	deepEqual( Stem("frothing"), "froth" );
	deepEqual( Stem("froward"), "froward" );
	deepEqual( Stem("frown"), "frown" );
	deepEqual( Stem("frowning"), "frown" );
	deepEqual( Stem("frowningly"), "frowningli" );
	deepEqual( Stem("frowns"), "frown" );
	deepEqual( Stem("frowser"), "frowser" );
	deepEqual( Stem("froze"), "froze" );
	deepEqual( Stem("frozen"), "frozen" );
	deepEqual( Stem("fructify"), "fructifi" );
	deepEqual( Stem("frugal"), "frugal" );
	deepEqual( Stem("fruit"), "fruit" );
	deepEqual( Stem("fruiterer"), "fruiter" );
	deepEqual( Stem("fruitful"), "fruit" );
	deepEqual( Stem("fruitfully"), "fruitfulli" );
	deepEqual( Stem("fruitfulness"), "fruit" );
	deepEqual( Stem("fruition"), "fruition" );
	deepEqual( Stem("fruitless"), "fruitless" );
	deepEqual( Stem("fruits"), "fruit" );
	deepEqual( Stem("frush"), "frush" );
	deepEqual( Stem("frustrate"), "frustrat" );
	deepEqual( Stem("frutify"), "frutifi" );
	deepEqual( Stem("fry"), "fry" );
	deepEqual( Stem("frying"), "fry" );
	deepEqual( Stem("fubb"), "fubb" );
	deepEqual( Stem("fuchs"), "fuch" );
	deepEqual( Stem("fuddled"), "fuddl" );
	deepEqual( Stem("fuddleston"), "fuddleston" );
	deepEqual( Stem("fuddlestone"), "fuddleston" );
	deepEqual( Stem("fuddlestones"), "fuddleston" );
	deepEqual( Stem("fuel"), "fuel" );
	deepEqual( Stem("fugitive"), "fugit" );
	deepEqual( Stem("fugitives"), "fugit" );
	deepEqual( Stem("fulfil"), "fulfil" );
	deepEqual( Stem("fulfill"), "fulfil" );
	deepEqual( Stem("fulfilling"), "fulfil" );
	deepEqual( Stem("fulfilment"), "fulfil" );
	deepEqual( Stem("fulfils"), "fulfil" );
	deepEqual( Stem("fulham"), "fulham" );
	deepEqual( Stem("full"), "full" );
	deepEqual( Stem("fullam"), "fullam" );
	deepEqual( Stem("fuller"), "fuller" );
	deepEqual( Stem("fullers"), "fuller" );
	deepEqual( Stem("fullest"), "fullest" );
	deepEqual( Stem("fullness"), "full" );
	deepEqual( Stem("fully"), "fulli" );
	deepEqual( Stem("fulness"), "ful" );
	deepEqual( Stem("fulsome"), "fulsom" );
	deepEqual( Stem("fulvia"), "fulvia" );
	deepEqual( Stem("fum"), "fum" );
	deepEqual( Stem("fumble"), "fumbl" );
	deepEqual( Stem("fumbles"), "fumbl" );
	deepEqual( Stem("fumblest"), "fumblest" );
	deepEqual( Stem("fumbling"), "fumbl" );
	deepEqual( Stem("fume"), "fume" );
	deepEqual( Stem("fumed"), "fume" );
	deepEqual( Stem("fumes"), "fume" );
	deepEqual( Stem("fuming"), "fume" );
	deepEqual( Stem("fumiter"), "fumit" );
	deepEqual( Stem("fumitory"), "fumitori" );
	deepEqual( Stem("fumum"), "fumum" );
	deepEqual( Stem("fun"), "fun" );
	deepEqual( Stem("function"), "function" );
	deepEqual( Stem("functionaries"), "functionari" );
	deepEqual( Stem("functionary"), "functionari" );
	deepEqual( Stem("functions"), "function" );
	deepEqual( Stem("fund"), "fund" );
	deepEqual( Stem("fundamental"), "fundament" );
	deepEqual( Stem("funded"), "fund" );
	deepEqual( Stem("funds"), "fund" );
	deepEqual( Stem("funeral"), "funer" );
	deepEqual( Stem("funerals"), "funer" );
	deepEqual( Stem("funereal"), "funer" );
	deepEqual( Stem("funny"), "funni" );
	deepEqual( Stem("fur"), "fur" );
	deepEqual( Stem("furbish"), "furbish" );
	deepEqual( Stem("furbished"), "furbish" );
	deepEqual( Stem("furies"), "furi" );
	deepEqual( Stem("furious"), "furiou" );
	deepEqual( Stem("furiously"), "furious" );
	deepEqual( Stem("furlongs"), "furlong" );
	deepEqual( Stem("furlough"), "furlough" );
	deepEqual( Stem("furnace"), "furnac" );
	deepEqual( Stem("furnaces"), "furnac" );
	deepEqual( Stem("furnish"), "furnish" );
	deepEqual( Stem("furnished"), "furnish" );
	deepEqual( Stem("furnishings"), "furnish" );
	deepEqual( Stem("furniture"), "furnitur" );
	deepEqual( Stem("furnival"), "furniv" );
	deepEqual( Stem("furor"), "furor" );
	deepEqual( Stem("furr"), "furr" );
	deepEqual( Stem("furrow"), "furrow" );
	deepEqual( Stem("furrowed"), "furrow" );
	deepEqual( Stem("furrows"), "furrow" );
	deepEqual( Stem("furs"), "fur" );
	deepEqual( Stem("furth"), "furth" );
	deepEqual( Stem("further"), "further" );
	deepEqual( Stem("furtherance"), "further" );
	deepEqual( Stem("furtherer"), "further" );
	deepEqual( Stem("furthermore"), "furthermor" );
	deepEqual( Stem("furthest"), "furthest" );
	deepEqual( Stem("furtive"), "furtiv" );
	deepEqual( Stem("furtively"), "furtiv" );
	deepEqual( Stem("fury"), "furi" );
	deepEqual( Stem("furze"), "furz" );
	deepEqual( Stem("furzes"), "furz" );
	deepEqual( Stem("fust"), "fust" );
	deepEqual( Stem("fustian"), "fustian" );
	deepEqual( Stem("fustilarian"), "fustilarian" );
	deepEqual( Stem("fusty"), "fusti" );
	deepEqual( Stem("fut"), "fut" );
	deepEqual( Stem("future"), "futur" );
	deepEqual( Stem("futurity"), "futur" );
	deepEqual( Stem("g"), "g" );
	deepEqual( Stem("gabble"), "gabbl" );
	deepEqual( Stem("gaberdine"), "gaberdin" );
	deepEqual( Stem("gable"), "gabl" );
	deepEqual( Stem("gables"), "gabl" );
	deepEqual( Stem("gabriel"), "gabriel" );
	deepEqual( Stem("gaby"), "gabi" );
	deepEqual( Stem("gad"), "gad" );
	deepEqual( Stem("gadding"), "gad" );
	deepEqual( Stem("gads"), "gad" );
	deepEqual( Stem("gadshill"), "gadshil" );
	deepEqual( Stem("gaffer"), "gaffer" );
	deepEqual( Stem("gag"), "gag" );
	deepEqual( Stem("gage"), "gage" );
	deepEqual( Stem("gaged"), "gage" );
	deepEqual( Stem("gagg"), "gagg" );
	deepEqual( Stem("gaging"), "gage" );
	deepEqual( Stem("gagne"), "gagn" );
	deepEqual( Stem("gaieties"), "gaieti" );
	deepEqual( Stem("gaiety"), "gaieti" );
	deepEqual( Stem("gaily"), "gaili" );
	deepEqual( Stem("gain"), "gain" );
	deepEqual( Stem("gained"), "gain" );
	deepEqual( Stem("gainer"), "gainer" );
	deepEqual( Stem("gaingiving"), "gaingiv" );
	deepEqual( Stem("gaining"), "gain" );
	deepEqual( Stem("gains"), "gain" );
	deepEqual( Stem("gainsaid"), "gainsaid" );
	deepEqual( Stem("gainsay"), "gainsai" );
	deepEqual( Stem("gainsaying"), "gainsai" );
	deepEqual( Stem("gainsays"), "gainsai" );
	deepEqual( Stem("gainst"), "gainst" );
	deepEqual( Stem("gait"), "gait" );
	deepEqual( Stem("gaited"), "gait" );
	deepEqual( Stem("gaiters"), "gaiter" );
	deepEqual( Stem("gal"), "gal" );
	deepEqual( Stem("galathe"), "galath" );
	deepEqual( Stem("gale"), "gale" );
	deepEqual( Stem("galen"), "galen" );
	deepEqual( Stem("gales"), "gale" );
	deepEqual( Stem("galignani"), "galignani" );
	deepEqual( Stem("gall"), "gall" );
	deepEqual( Stem("gallant"), "gallant" );
	deepEqual( Stem("gallantly"), "gallantli" );
	deepEqual( Stem("gallantry"), "gallantri" );
	deepEqual( Stem("gallants"), "gallant" );
	deepEqual( Stem("galled"), "gall" );
	deepEqual( Stem("galleries"), "galleri" );
	deepEqual( Stem("gallery"), "galleri" );
	deepEqual( Stem("galley"), "gallei" );
	deepEqual( Stem("galleys"), "gallei" );
	deepEqual( Stem("gallia"), "gallia" );
	deepEqual( Stem("gallian"), "gallian" );
	deepEqual( Stem("galliard"), "galliard" );
	deepEqual( Stem("galliasses"), "galliass" );
	deepEqual( Stem("gallimaufry"), "gallimaufri" );
	deepEqual( Stem("galling"), "gall" );
	deepEqual( Stem("gallons"), "gallon" );
	deepEqual( Stem("gallop"), "gallop" );
	deepEqual( Stem("galloping"), "gallop" );
	deepEqual( Stem("gallops"), "gallop" );
	deepEqual( Stem("gallow"), "gallow" );
	deepEqual( Stem("galloway"), "gallowai" );
	deepEqual( Stem("gallowglasses"), "gallowglass" );
	deepEqual( Stem("gallows"), "gallow" );
	deepEqual( Stem("gallowses"), "gallows" );
	deepEqual( Stem("galls"), "gall" );
	deepEqual( Stem("gallus"), "gallu" );
	deepEqual( Stem("gam"), "gam" );
	deepEqual( Stem("gamble"), "gambl" );
	deepEqual( Stem("gambled"), "gambl" );
	deepEqual( Stem("gambler"), "gambler" );
	deepEqual( Stem("gamblers"), "gambler" );
	deepEqual( Stem("gambling"), "gambl" );
	deepEqual( Stem("gambol"), "gambol" );
	deepEqual( Stem("gambold"), "gambold" );
	deepEqual( Stem("gambols"), "gambol" );
	deepEqual( Stem("gamboys"), "gamboi" );
	deepEqual( Stem("game"), "game" );
	deepEqual( Stem("gamers"), "gamer" );
	deepEqual( Stem("games"), "game" );
	deepEqual( Stem("gamesome"), "gamesom" );
	deepEqual( Stem("gamester"), "gamest" );
	deepEqual( Stem("gaming"), "game" );
	deepEqual( Stem("gammon"), "gammon" );
	deepEqual( Stem("gamut"), "gamut" );
	deepEqual( Stem("gan"), "gan" );
	deepEqual( Stem("gand"), "gand" );
	deepEqual( Stem("gangren"), "gangren" );
	deepEqual( Stem("gangways"), "gangwai" );
	deepEqual( Stem("ganymede"), "ganymed" );
	deepEqual( Stem("gaol"), "gaol" );
	deepEqual( Stem("gaoler"), "gaoler" );
	deepEqual( Stem("gaolers"), "gaoler" );
	deepEqual( Stem("gaols"), "gaol" );
	deepEqual( Stem("gap"), "gap" );
	deepEqual( Stem("gape"), "gape" );
	deepEqual( Stem("gapes"), "gape" );
	deepEqual( Stem("gaping"), "gape" );
	deepEqual( Stem("gaps"), "gap" );
	deepEqual( Stem("gar"), "gar" );
	deepEqual( Stem("garb"), "garb" );
	deepEqual( Stem("garbage"), "garbag" );
	deepEqual( Stem("garbled"), "garbl" );
	deepEqual( Stem("garboils"), "garboil" );
	deepEqual( Stem("garcon"), "garcon" );
	deepEqual( Stem("gard"), "gard" );
	deepEqual( Stem("garde"), "gard" );
	deepEqual( Stem("garden"), "garden" );
	deepEqual( Stem("gardener"), "garden" );
	deepEqual( Stem("gardeners"), "garden" );
	deepEqual( Stem("gardens"), "garden" );
	deepEqual( Stem("gardez"), "gardez" );
	deepEqual( Stem("gardiner"), "gardin" );
	deepEqual( Stem("gardon"), "gardon" );
	deepEqual( Stem("gare"), "gare" );
	deepEqual( Stem("gargantua"), "gargantua" );
	deepEqual( Stem("garge"), "garg" );
	deepEqual( Stem("gargrave"), "gargrav" );
	deepEqual( Stem("garish"), "garish" );
	deepEqual( Stem("garland"), "garland" );
	deepEqual( Stem("garlands"), "garland" );
	deepEqual( Stem("garlic"), "garlic" );
	deepEqual( Stem("garment"), "garment" );
	deepEqual( Stem("garments"), "garment" );
	deepEqual( Stem("garmet"), "garmet" );
	deepEqual( Stem("garner"), "garner" );
	deepEqual( Stem("garners"), "garner" );
	deepEqual( Stem("garnish"), "garnish" );
	deepEqual( Stem("garnished"), "garnish" );
	deepEqual( Stem("garret"), "garret" );
	deepEqual( Stem("garrets"), "garret" );
	deepEqual( Stem("garrison"), "garrison" );
	deepEqual( Stem("garrisons"), "garrison" );
	deepEqual( Stem("gart"), "gart" );
	deepEqual( Stem("garter"), "garter" );
	deepEqual( Stem("garterd"), "garterd" );
	deepEqual( Stem("gartering"), "garter" );
	deepEqual( Stem("garters"), "garter" );
	deepEqual( Stem("gascony"), "gasconi" );
	deepEqual( Stem("gash"), "gash" );
	deepEqual( Stem("gashes"), "gash" );
	deepEqual( Stem("gaskins"), "gaskin" );
	deepEqual( Stem("gasp"), "gasp" );
	deepEqual( Stem("gasped"), "gasp" );
	deepEqual( Stem("gasping"), "gasp" );
	deepEqual( Stem("gast"), "gast" );
	deepEqual( Stem("gasted"), "gast" );
	deepEqual( Stem("gastness"), "gast" );
	deepEqual( Stem("gat"), "gat" );
	deepEqual( Stem("gate"), "gate" );
	deepEqual( Stem("gated"), "gate" );
	deepEqual( Stem("gates"), "gate" );
	deepEqual( Stem("gath"), "gath" );
	deepEqual( Stem("gather"), "gather" );
	deepEqual( Stem("gathered"), "gather" );
	deepEqual( Stem("gathering"), "gather" );
	deepEqual( Stem("gathers"), "gather" );
	deepEqual( Stem("gatories"), "gatori" );
	deepEqual( Stem("gatory"), "gatori" );
	deepEqual( Stem("gaud"), "gaud" );
	deepEqual( Stem("gaudeo"), "gaudeo" );
	deepEqual( Stem("gaudy"), "gaudi" );
	deepEqual( Stem("gauge"), "gaug" );
	deepEqual( Stem("gaul"), "gaul" );
	deepEqual( Stem("gaultree"), "gaultre" );
	deepEqual( Stem("gaunt"), "gaunt" );
	deepEqual( Stem("gauntlet"), "gauntlet" );
	deepEqual( Stem("gauntlets"), "gauntlet" );
	deepEqual( Stem("gauntly"), "gauntli" );
	deepEqual( Stem("gaunts"), "gaunt" );
	deepEqual( Stem("gav"), "gav" );
	deepEqual( Stem("gave"), "gave" );
	deepEqual( Stem("gavest"), "gavest" );
	deepEqual( Stem("gavottes"), "gavott" );
	deepEqual( Stem("gawd"), "gawd" );
	deepEqual( Stem("gawded"), "gawd" );
	deepEqual( Stem("gawds"), "gawd" );
	deepEqual( Stem("gawky"), "gawki" );
	deepEqual( Stem("gawsey"), "gawsei" );
	deepEqual( Stem("gay"), "gai" );
	deepEqual( Stem("gayd"), "gayd" );
	deepEqual( Stem("gayer"), "gayer" );
	deepEqual( Stem("gayest"), "gayest" );
	deepEqual( Stem("gayness"), "gay" );
	deepEqual( Stem("gaz"), "gaz" );
	deepEqual( Stem("gazabo"), "gazabo" );
	deepEqual( Stem("gaze"), "gaze" );
	deepEqual( Stem("gazed"), "gaze" );
	deepEqual( Stem("gazer"), "gazer" );
	deepEqual( Stem("gazers"), "gazer" );
	deepEqual( Stem("gazes"), "gaze" );
	deepEqual( Stem("gazeth"), "gazeth" );
	deepEqual( Stem("gazette"), "gazett" );
	deepEqual( Stem("gazetted"), "gazet" );
	deepEqual( Stem("gazing"), "gaze" );
	deepEqual( Stem("ge"), "ge" );
	deepEqual( Stem("gear"), "gear" );
	deepEqual( Stem("geck"), "geck" );
	deepEqual( Stem("gee"), "gee" );
	deepEqual( Stem("geese"), "gees" );
	deepEqual( Stem("geffrey"), "geffrei" );
	deepEqual( Stem("gelasasa"), "gelasasa" );
	deepEqual( Stem("geld"), "geld" );
	deepEqual( Stem("gelded"), "geld" );
	deepEqual( Stem("gelding"), "geld" );
	deepEqual( Stem("gelebet"), "gelebet" );
	deepEqual( Stem("gelida"), "gelida" );
	deepEqual( Stem("gelidus"), "gelidu" );
	deepEqual( Stem("geliebt"), "geliebt" );
	deepEqual( Stem("gelt"), "gelt" );
	deepEqual( Stem("gem"), "gem" );
	deepEqual( Stem("geminy"), "gemini" );
	deepEqual( Stem("gems"), "gem" );
	deepEqual( Stem("gen"), "gen" );
	deepEqual( Stem("gender"), "gender" );
	deepEqual( Stem("genders"), "gender" );
	deepEqual( Stem("general"), "gener" );
	deepEqual( Stem("generally"), "gener" );
	deepEqual( Stem("generals"), "gener" );
	deepEqual( Stem("generating"), "gener" );
	deepEqual( Stem("generation"), "gener" );
	deepEqual( Stem("generations"), "gener" );
	deepEqual( Stem("generative"), "gener" );
	deepEqual( Stem("generosity"), "generos" );
	deepEqual( Stem("generous"), "gener" );
	deepEqual( Stem("generousest"), "generousest" );
	deepEqual( Stem("generously"), "gener" );
	deepEqual( Stem("genevieve"), "geneviev" );
	deepEqual( Stem("genievre"), "genievr" );
	deepEqual( Stem("genitive"), "genit" );
	deepEqual( Stem("genitivo"), "genitivo" );
	deepEqual( Stem("genius"), "geniu" );
	deepEqual( Stem("geniuses"), "genius" );
	deepEqual( Stem("gennets"), "gennet" );
	deepEqual( Stem("genoa"), "genoa" );
	deepEqual( Stem("genoux"), "genoux" );
	deepEqual( Stem("gens"), "gen" );
	deepEqual( Stem("gent"), "gent" );
	deepEqual( Stem("genteel"), "genteel" );
	deepEqual( Stem("genteeler"), "genteel" );
	deepEqual( Stem("genteelest"), "genteelest" );
	deepEqual( Stem("genteelly"), "genteelli" );
	deepEqual( Stem("gentilhomme"), "gentilhomm" );
	deepEqual( Stem("gentility"), "gentil" );
	deepEqual( Stem("gentle"), "gentl" );
	deepEqual( Stem("gentlefolks"), "gentlefolk" );
	deepEqual( Stem("gentleman"), "gentleman" );
	deepEqual( Stem("gentlemanlike"), "gentlemanlik" );
	deepEqual( Stem("gentlemanly"), "gentlemanli" );
	deepEqual( Stem("gentlemen"), "gentlemen" );
	deepEqual( Stem("gentleness"), "gentl" );
	deepEqual( Stem("gentler"), "gentler" );
	deepEqual( Stem("gentles"), "gentl" );
	deepEqual( Stem("gentlest"), "gentlest" );
	deepEqual( Stem("gentlewoman"), "gentlewoman" );
	deepEqual( Stem("gentlewomanhood"), "gentlewomanhood" );
	deepEqual( Stem("gentlewomen"), "gentlewomen" );
	deepEqual( Stem("gently"), "gentli" );
	deepEqual( Stem("gentry"), "gentri" );
	deepEqual( Stem("gents"), "gent" );
	deepEqual( Stem("genuine"), "genuin" );
	deepEqual( Stem("geography"), "geographi" );
	deepEqual( Stem("geological"), "geolog" );
	deepEqual( Stem("geologically"), "geolog" );
	deepEqual( Stem("geologies"), "geologi" );
	deepEqual( Stem("geology"), "geologi" );
	deepEqual( Stem("george"), "georg" );
	deepEqual( Stem("georges"), "georg" );
	deepEqual( Stem("georgina"), "georgina" );
	deepEqual( Stem("georgy"), "georgi" );
	deepEqual( Stem("geranium"), "geranium" );
	deepEqual( Stem("geraniums"), "geranium" );
	deepEqual( Stem("gerard"), "gerard" );
	deepEqual( Stem("germain"), "germain" );
	deepEqual( Stem("germaines"), "germain" );
	deepEqual( Stem("germains"), "germain" );
	deepEqual( Stem("german"), "german" );
	deepEqual( Stem("germane"), "german" );
	deepEqual( Stem("germans"), "german" );
	deepEqual( Stem("germany"), "germani" );
	deepEqual( Stem("gerrard"), "gerrard" );
	deepEqual( Stem("gertrude"), "gertrud" );
	deepEqual( Stem("gest"), "gest" );
	deepEqual( Stem("gests"), "gest" );
	deepEqual( Stem("gesture"), "gestur" );
	deepEqual( Stem("gestures"), "gestur" );
	deepEqual( Stem("get"), "get" );
	deepEqual( Stem("getrude"), "getrud" );
	deepEqual( Stem("gets"), "get" );
	deepEqual( Stem("getter"), "getter" );
	deepEqual( Stem("gettin"), "gettin" );
	deepEqual( Stem("getting"), "get" );
	deepEqual( Stem("ghastly"), "ghastli" );
	deepEqual( Stem("ghent"), "ghent" );
	deepEqual( Stem("ghost"), "ghost" );
	deepEqual( Stem("ghosted"), "ghost" );
	deepEqual( Stem("ghostly"), "ghostli" );
	deepEqual( Stem("ghosts"), "ghost" );
	deepEqual( Stem("gi"), "gi" );
	deepEqual( Stem("giant"), "giant" );
	deepEqual( Stem("giantess"), "giantess" );
	deepEqual( Stem("giantlike"), "giantlik" );
	deepEqual( Stem("giants"), "giant" );
	deepEqual( Stem("gib"), "gib" );
	deepEqual( Stem("gibber"), "gibber" );
	deepEqual( Stem("gibbet"), "gibbet" );
	deepEqual( Stem("gibbeted"), "gibbet" );
	deepEqual( Stem("gibbets"), "gibbet" );
	deepEqual( Stem("gibe"), "gibe" );
	deepEqual( Stem("giber"), "giber" );
	deepEqual( Stem("gibes"), "gibe" );
	deepEqual( Stem("gibing"), "gibe" );
	deepEqual( Stem("gibingly"), "gibingli" );
	deepEqual( Stem("giddily"), "giddili" );
	deepEqual( Stem("giddiness"), "giddi" );
	deepEqual( Stem("giddy"), "giddi" );
	deepEqual( Stem("gift"), "gift" );
	deepEqual( Stem("gifted"), "gift" );
	deepEqual( Stem("gifts"), "gift" );
	deepEqual( Stem("gig"), "gig" );
	deepEqual( Stem("gigantic"), "gigant" );
	deepEqual( Stem("giggle"), "giggl" );
	deepEqual( Stem("giggled"), "giggl" );
	deepEqual( Stem("giggling"), "giggl" );
	deepEqual( Stem("giglets"), "giglet" );
	deepEqual( Stem("giglot"), "giglot" );
	deepEqual( Stem("gigots"), "gigot" );
	deepEqual( Stem("gilbert"), "gilbert" );
	deepEqual( Stem("gild"), "gild" );
	deepEqual( Stem("gilded"), "gild" );
	deepEqual( Stem("gilding"), "gild" );
	deepEqual( Stem("giles"), "gile" );
	deepEqual( Stem("gillespie"), "gillespi" );
	deepEqual( Stem("gilliams"), "gilliam" );
	deepEqual( Stem("gillian"), "gillian" );
	deepEqual( Stem("gillows"), "gillow" );
	deepEqual( Stem("gills"), "gill" );
	deepEqual( Stem("gillyflower"), "gillyflow" );
	deepEqual( Stem("gillyvors"), "gillyvor" );
	deepEqual( Stem("gilt"), "gilt" );
	deepEqual( Stem("gim"), "gim" );
	deepEqual( Stem("gimcrack"), "gimcrack" );
	deepEqual( Stem("gimcracks"), "gimcrack" );
	deepEqual( Stem("gimmal"), "gimmal" );
	deepEqual( Stem("gimmers"), "gimmer" );
	deepEqual( Stem("gin"), "gin" );
	deepEqual( Stem("ging"), "ging" );
	deepEqual( Stem("ginger"), "ginger" );
	deepEqual( Stem("gingerbread"), "gingerbread" );
	deepEqual( Stem("gingerly"), "gingerli" );
	deepEqual( Stem("ginn"), "ginn" );
	deepEqual( Stem("gins"), "gin" );
	deepEqual( Stem("gioucestershire"), "gioucestershir" );
	deepEqual( Stem("giovanni"), "giovanni" );
	deepEqual( Stem("gipes"), "gipe" );
	deepEqual( Stem("gipsies"), "gipsi" );
	deepEqual( Stem("gipsy"), "gipsi" );
	deepEqual( Stem("gird"), "gird" );
	deepEqual( Stem("girded"), "gird" );
	deepEqual( Stem("girdle"), "girdl" );
	deepEqual( Stem("girdled"), "girdl" );
	deepEqual( Stem("girdles"), "girdl" );
	deepEqual( Stem("girdling"), "girdl" );
	deepEqual( Stem("girl"), "girl" );
	deepEqual( Stem("girlish"), "girlish" );
	deepEqual( Stem("girls"), "girl" );
	deepEqual( Stem("girt"), "girt" );
	deepEqual( Stem("girth"), "girth" );
	deepEqual( Stem("girthed"), "girth" );
	deepEqual( Stem("gis"), "gi" );
	deepEqual( Stem("git"), "git" );
	deepEqual( Stem("gittin"), "gittin" );
	deepEqual( Stem("giv"), "giv" );
	deepEqual( Stem("give"), "give" );
	deepEqual( Stem("given"), "given" );
	deepEqual( Stem("giver"), "giver" );
	deepEqual( Stem("givers"), "giver" );
	deepEqual( Stem("gives"), "give" );
	deepEqual( Stem("givest"), "givest" );
	deepEqual( Stem("giveth"), "giveth" );
	deepEqual( Stem("giving"), "give" );
	deepEqual( Stem("givings"), "give" );
	deepEqual( Stem("gizzard"), "gizzard" );
	deepEqual( Stem("glad"), "glad" );
	deepEqual( Stem("gladded"), "glad" );
	deepEqual( Stem("gladding"), "glad" );
	deepEqual( Stem("gladly"), "gladli" );
	deepEqual( Stem("gladness"), "glad" );
	deepEqual( Stem("glamis"), "glami" );
	deepEqual( Stem("glanc"), "glanc" );
	deepEqual( Stem("glance"), "glanc" );
	deepEqual( Stem("glanced"), "glanc" );
	deepEqual( Stem("glances"), "glanc" );
	deepEqual( Stem("glancing"), "glanc" );
	deepEqual( Stem("glanders"), "glander" );
	deepEqual( Stem("glandier"), "glandier" );
	deepEqual( Stem("glansdale"), "glansdal" );
	deepEqual( Stem("glare"), "glare" );
	deepEqual( Stem("glared"), "glare" );
	deepEqual( Stem("glares"), "glare" );
	deepEqual( Stem("glass"), "glass" );
	deepEqual( Stem("glasses"), "glass" );
	deepEqual( Stem("glassy"), "glassi" );
	deepEqual( Stem("glauber"), "glauber" );
	deepEqual( Stem("glaz"), "glaz" );
	deepEqual( Stem("glazed"), "glaze" );
	deepEqual( Stem("glazier"), "glazier" );
	deepEqual( Stem("gleams"), "gleam" );
	deepEqual( Stem("glean"), "glean" );
	deepEqual( Stem("gleaned"), "glean" );
	deepEqual( Stem("gleaning"), "glean" );
	deepEqual( Stem("glee"), "glee" );
	deepEqual( Stem("gleeful"), "gleeful" );
	deepEqual( Stem("gleek"), "gleek" );
	deepEqual( Stem("gleeking"), "gleek" );
	deepEqual( Stem("gleeks"), "gleek" );
	deepEqual( Stem("glend"), "glend" );
	deepEqual( Stem("glendower"), "glendow" );
	deepEqual( Stem("glenmalony"), "glenmaloni" );
	deepEqual( Stem("glib"), "glib" );
	deepEqual( Stem("glide"), "glide" );
	deepEqual( Stem("glided"), "glide" );
	deepEqual( Stem("glides"), "glide" );
	deepEqual( Stem("glideth"), "glideth" );
	deepEqual( Stem("gliding"), "glide" );
	deepEqual( Stem("glimmer"), "glimmer" );
	deepEqual( Stem("glimmering"), "glimmer" );
	deepEqual( Stem("glimmers"), "glimmer" );
	deepEqual( Stem("glimpse"), "glimps" );
	deepEqual( Stem("glimpses"), "glimps" );
	deepEqual( Stem("glist"), "glist" );
	deepEqual( Stem("glistened"), "glisten" );
	deepEqual( Stem("glistening"), "glisten" );
	deepEqual( Stem("glister"), "glister" );
	deepEqual( Stem("glistering"), "glister" );
	deepEqual( Stem("glisters"), "glister" );
	deepEqual( Stem("glitt"), "glitt" );
	deepEqual( Stem("glitter"), "glitter" );
	deepEqual( Stem("glittered"), "glitter" );
	deepEqual( Stem("glittering"), "glitter" );
	deepEqual( Stem("gloating"), "gloat" );
	deepEqual( Stem("globe"), "globe" );
	deepEqual( Stem("globes"), "globe" );
	deepEqual( Stem("gloom"), "gloom" );
	deepEqual( Stem("gloomily"), "gloomili" );
	deepEqual( Stem("glooming"), "gloom" );
	deepEqual( Stem("gloomy"), "gloomi" );
	deepEqual( Stem("glories"), "glori" );
	deepEqual( Stem("glorified"), "glorifi" );
	deepEqual( Stem("glorify"), "glorifi" );
	deepEqual( Stem("glorifying"), "glorifi" );
	deepEqual( Stem("glorious"), "gloriou" );
	deepEqual( Stem("gloriously"), "glorious" );
	deepEqual( Stem("glorvina"), "glorvina" );
	deepEqual( Stem("glory"), "glori" );
	deepEqual( Stem("glose"), "glose" );
	deepEqual( Stem("gloss"), "gloss" );
	deepEqual( Stem("glosses"), "gloss" );
	deepEqual( Stem("glossy"), "glossi" );
	deepEqual( Stem("gloster"), "gloster" );
	deepEqual( Stem("glou"), "glou" );
	deepEqual( Stem("glouceste"), "gloucest" );
	deepEqual( Stem("gloucester"), "gloucest" );
	deepEqual( Stem("gloucestershire"), "gloucestershir" );
	deepEqual( Stem("glove"), "glove" );
	deepEqual( Stem("gloved"), "glove" );
	deepEqual( Stem("glover"), "glover" );
	deepEqual( Stem("gloves"), "glove" );
	deepEqual( Stem("glow"), "glow" );
	deepEqual( Stem("glowed"), "glow" );
	deepEqual( Stem("glowing"), "glow" );
	deepEqual( Stem("glowry"), "glowri" );
	deepEqual( Stem("glowworm"), "glowworm" );
	deepEqual( Stem("gloz"), "gloz" );
	deepEqual( Stem("gloze"), "gloze" );
	deepEqual( Stem("glozes"), "gloze" );
	deepEqual( Stem("glu"), "glu" );
	deepEqual( Stem("glue"), "glue" );
	deepEqual( Stem("glued"), "glu" );
	deepEqual( Stem("glues"), "glue" );
	deepEqual( Stem("glum"), "glum" );
	deepEqual( Stem("glut"), "glut" );
	deepEqual( Stem("glutt"), "glutt" );
	deepEqual( Stem("glutted"), "glut" );
	deepEqual( Stem("glutton"), "glutton" );
	deepEqual( Stem("gluttoning"), "glutton" );
	deepEqual( Stem("gluttony"), "gluttoni" );
	deepEqual( Stem("gnarled"), "gnarl" );
	deepEqual( Stem("gnarling"), "gnarl" );
	deepEqual( Stem("gnat"), "gnat" );
	deepEqual( Stem("gnats"), "gnat" );
	deepEqual( Stem("gnaw"), "gnaw" );
	deepEqual( Stem("gnawing"), "gnaw" );
	deepEqual( Stem("gnawn"), "gnawn" );
	deepEqual( Stem("gnaws"), "gnaw" );
	deepEqual( Stem("go"), "go" );
	deepEqual( Stem("goad"), "goad" );
	deepEqual( Stem("goaded"), "goad" );
	deepEqual( Stem("goads"), "goad" );
	deepEqual( Stem("goal"), "goal" );
	deepEqual( Stem("goat"), "goat" );
	deepEqual( Stem("goatish"), "goatish" );
	deepEqual( Stem("goats"), "goat" );
	deepEqual( Stem("gobbets"), "gobbet" );
	deepEqual( Stem("gobbled"), "gobbl" );
	deepEqual( Stem("gobbling"), "gobbl" );
	deepEqual( Stem("gobbo"), "gobbo" );
	deepEqual( Stem("goblet"), "goblet" );
	deepEqual( Stem("goblets"), "goblet" );
	deepEqual( Stem("goblin"), "goblin" );
	deepEqual( Stem("goblins"), "goblin" );
	deepEqual( Stem("god"), "god" );
	deepEqual( Stem("godded"), "god" );
	deepEqual( Stem("goddem"), "goddem" );
	deepEqual( Stem("godden"), "godden" );
	deepEqual( Stem("goddess"), "goddess" );
	deepEqual( Stem("goddesses"), "goddess" );
	deepEqual( Stem("goddild"), "goddild" );
	deepEqual( Stem("godfather"), "godfath" );
	deepEqual( Stem("godfathers"), "godfath" );
	deepEqual( Stem("godhead"), "godhead" );
	deepEqual( Stem("godless"), "godless" );
	deepEqual( Stem("godlike"), "godlik" );
	deepEqual( Stem("godliness"), "godli" );
	deepEqual( Stem("godly"), "godli" );
	deepEqual( Stem("godmother"), "godmoth" );
	deepEqual( Stem("godpapa"), "godpapa" );
	deepEqual( Stem("gods"), "god" );
	deepEqual( Stem("godson"), "godson" );
	deepEqual( Stem("goer"), "goer" );
	deepEqual( Stem("goers"), "goer" );
	deepEqual( Stem("goes"), "goe" );
	deepEqual( Stem("goest"), "goest" );
	deepEqual( Stem("goeth"), "goeth" );
	deepEqual( Stem("goethe"), "goeth" );
	deepEqual( Stem("goffe"), "goff" );
	deepEqual( Stem("gogs"), "gog" );
	deepEqual( Stem("goin"), "goin" );
	deepEqual( Stem("going"), "go" );
	deepEqual( Stem("golconda"), "golconda" );
	deepEqual( Stem("gold"), "gold" );
	deepEqual( Stem("golden"), "golden" );
	deepEqual( Stem("goldenly"), "goldenli" );
	deepEqual( Stem("golding"), "gold" );
	deepEqual( Stem("goldmore"), "goldmor" );
	deepEqual( Stem("goldsmith"), "goldsmith" );
	deepEqual( Stem("goldsmiths"), "goldsmith" );
	deepEqual( Stem("golgotha"), "golgotha" );
	deepEqual( Stem("goliases"), "golias" );
	deepEqual( Stem("goliath"), "goliath" );
	deepEqual( Stem("gollop"), "gollop" );
	deepEqual( Stem("gon"), "gon" );
	deepEqual( Stem("gondola"), "gondola" );
	deepEqual( Stem("gondolier"), "gondoli" );
	deepEqual( Stem("gone"), "gone" );
	deepEqual( Stem("goneril"), "goneril" );
	deepEqual( Stem("gong"), "gong" );
	deepEqual( Stem("gonnoisance"), "gonnois" );
	deepEqual( Stem("gonzago"), "gonzago" );
	deepEqual( Stem("gonzalo"), "gonzalo" );
	deepEqual( Stem("goo"), "goo" );
	deepEqual( Stem("good"), "good" );
	deepEqual( Stem("goodfellow"), "goodfellow" );
	deepEqual( Stem("goodish"), "goodish" );
	deepEqual( Stem("goodlier"), "goodlier" );
	deepEqual( Stem("goodliest"), "goodliest" );
	deepEqual( Stem("goodly"), "goodli" );
	deepEqual( Stem("goodman"), "goodman" );
	deepEqual( Stem("goodness"), "good" );
	deepEqual( Stem("goodnight"), "goodnight" );
	deepEqual( Stem("goodrig"), "goodrig" );
	deepEqual( Stem("goods"), "good" );
	deepEqual( Stem("goodwife"), "goodwif" );
	deepEqual( Stem("goodwill"), "goodwil" );
	deepEqual( Stem("goodwin"), "goodwin" );
	deepEqual( Stem("goodwins"), "goodwin" );
	deepEqual( Stem("goodwood"), "goodwood" );
	deepEqual( Stem("goody"), "goodi" );
	deepEqual( Stem("goodyear"), "goodyear" );
	deepEqual( Stem("goodyears"), "goodyear" );
	deepEqual( Stem("goold"), "goold" );
	deepEqual( Stem("goose"), "goos" );
	deepEqual( Stem("gooseberry"), "gooseberri" );
	deepEqual( Stem("goosequills"), "goosequil" );
	deepEqual( Stem("goosey"), "goosei" );
	deepEqual( Stem("goot"), "goot" );
	deepEqual( Stem("gor"), "gor" );
	deepEqual( Stem("gorbellied"), "gorbelli" );
	deepEqual( Stem("gorboduc"), "gorboduc" );
	deepEqual( Stem("gordian"), "gordian" );
	deepEqual( Stem("gore"), "gore" );
	deepEqual( Stem("gored"), "gore" );
	deepEqual( Stem("gorer"), "gorer" );
	deepEqual( Stem("gorg"), "gorg" );
	deepEqual( Stem("gorge"), "gorg" );
	deepEqual( Stem("gorgeous"), "gorgeou" );
	deepEqual( Stem("gorgeously"), "gorgeous" );
	deepEqual( Stem("gorget"), "gorget" );
	deepEqual( Stem("gorging"), "gorg" );
	deepEqual( Stem("gorgon"), "gorgon" );
	deepEqual( Stem("gormandize"), "gormand" );
	deepEqual( Stem("gormandizing"), "gormand" );
	deepEqual( Stem("gory"), "gori" );
	deepEqual( Stem("gosling"), "gosl" );
	deepEqual( Stem("gospel"), "gospel" );
	deepEqual( Stem("gospels"), "gospel" );
	deepEqual( Stem("goss"), "goss" );
	deepEqual( Stem("gossamer"), "gossam" );
	deepEqual( Stem("gossip"), "gossip" );
	deepEqual( Stem("gossiping"), "gossip" );
	deepEqual( Stem("gossiplike"), "gossiplik" );
	deepEqual( Stem("gossips"), "gossip" );
	deepEqual( Stem("got"), "got" );
	deepEqual( Stem("goth"), "goth" );
	deepEqual( Stem("gothic"), "gothic" );
	deepEqual( Stem("goths"), "goth" );
	deepEqual( Stem("gotten"), "gotten" );
	deepEqual( Stem("gourd"), "gourd" );
	deepEqual( Stem("gourmand"), "gourmand" );
	deepEqual( Stem("gourmandise"), "gourmandis" );
	deepEqual( Stem("gout"), "gout" );
	deepEqual( Stem("gouts"), "gout" );
	deepEqual( Stem("gouty"), "gouti" );
	deepEqual( Stem("govern"), "govern" );
	deepEqual( Stem("governance"), "govern" );
	deepEqual( Stem("governed"), "govern" );
	deepEqual( Stem("governess"), "gover" );
	deepEqual( Stem("governesses"), "gover" );
	deepEqual( Stem("government"), "govern" );
	deepEqual( Stem("governor"), "governor" );
	deepEqual( Stem("governors"), "governor" );
	deepEqual( Stem("governorship"), "governorship" );
	deepEqual( Stem("governs"), "govern" );
	deepEqual( Stem("gower"), "gower" );
	deepEqual( Stem("gown"), "gown" );
	deepEqual( Stem("gownds"), "gownd" );
	deepEqual( Stem("gowns"), "gown" );
	deepEqual( Stem("grac"), "grac" );
	deepEqual( Stem("grace"), "grace" );
	deepEqual( Stem("graced"), "grace" );
	deepEqual( Stem("graceful"), "grace" );
	deepEqual( Stem("gracefully"), "gracefulli" );
	deepEqual( Stem("graceless"), "graceless" );
	deepEqual( Stem("graces"), "grace" );
	deepEqual( Stem("gracing"), "grace" );
	deepEqual( Stem("gracious"), "graciou" );
	deepEqual( Stem("graciously"), "gracious" );
	deepEqual( Stem("graciousness"), "gracious" );
	deepEqual( Stem("gradation"), "gradat" );
	deepEqual( Stem("gradual"), "gradual" );
	deepEqual( Stem("gradually"), "gradual" );
	deepEqual( Stem("grady"), "gradi" );
	deepEqual( Stem("graf"), "graf" );
	deepEqual( Stem("graff"), "graff" );
	deepEqual( Stem("graffing"), "graf" );
	deepEqual( Stem("grafinn"), "grafinn" );
	deepEqual( Stem("graft"), "graft" );
	deepEqual( Stem("grafted"), "graft" );
	deepEqual( Stem("grafters"), "grafter" );
	deepEqual( Stem("grain"), "grain" );
	deepEqual( Stem("grained"), "grain" );
	deepEqual( Stem("grains"), "grain" );
	deepEqual( Stem("gramercies"), "gramerci" );
	deepEqual( Stem("gramercy"), "gramerci" );
	deepEqual( Stem("grammar"), "grammar" );
	deepEqual( Stem("grammars"), "grammar" );
	deepEqual( Stem("grand"), "grand" );
	deepEqual( Stem("grandam"), "grandam" );
	deepEqual( Stem("grandame"), "grandam" );
	deepEqual( Stem("grandchild"), "grandchild" );
	deepEqual( Stem("grandchildren"), "grandchildren" );
	deepEqual( Stem("granddaughter"), "granddaught" );
	deepEqual( Stem("grande"), "grand" );
	deepEqual( Stem("grandee"), "grande" );
	deepEqual( Stem("grandees"), "grande" );
	deepEqual( Stem("grandes"), "grand" );
	deepEqual( Stem("grandest"), "grandest" );
	deepEqual( Stem("grandeur"), "grandeur" );
	deepEqual( Stem("grandfather"), "grandfath" );
	deepEqual( Stem("grandfathers"), "grandfath" );
	deepEqual( Stem("grandjurors"), "grandjuror" );
	deepEqual( Stem("grandmother"), "grandmoth" );
	deepEqual( Stem("grandmothers"), "grandmoth" );
	deepEqual( Stem("grandpapa"), "grandpapa" );
	deepEqual( Stem("grandpre"), "grandpr" );
	deepEqual( Stem("grandsir"), "grandsir" );
	deepEqual( Stem("grandsire"), "grandsir" );
	deepEqual( Stem("grandsires"), "grandsir" );
	deepEqual( Stem("grandson"), "grandson" );
	deepEqual( Stem("grange"), "grang" );
	deepEqual( Stem("granite"), "granit" );
	deepEqual( Stem("grant"), "grant" );
	deepEqual( Stem("granted"), "grant" );
	deepEqual( Stem("granting"), "grant" );
	deepEqual( Stem("grants"), "grant" );
	deepEqual( Stem("grape"), "grape" );
	deepEqual( Stem("graperies"), "graperi" );
	deepEqual( Stem("grapes"), "grape" );
	deepEqual( Stem("grapple"), "grappl" );
	deepEqual( Stem("grapples"), "grappl" );
	deepEqual( Stem("grappling"), "grappl" );
	deepEqual( Stem("gras"), "gra" );
	deepEqual( Stem("grasp"), "grasp" );
	deepEqual( Stem("grasped"), "grasp" );
	deepEqual( Stem("grasping"), "grasp" );
	deepEqual( Stem("grasps"), "grasp" );
	deepEqual( Stem("grass"), "grass" );
	deepEqual( Stem("grasshoppers"), "grasshopp" );
	deepEqual( Stem("grassy"), "grassi" );
	deepEqual( Stem("grate"), "grate" );
	deepEqual( Stem("grated"), "grate" );
	deepEqual( Stem("grateful"), "grate" );
	deepEqual( Stem("gratefully"), "gratefulli" );
	deepEqual( Stem("grates"), "grate" );
	deepEqual( Stem("gratiano"), "gratiano" );
	deepEqual( Stem("gratification"), "gratif" );
	deepEqual( Stem("gratified"), "gratifi" );
	deepEqual( Stem("gratify"), "gratifi" );
	deepEqual( Stem("gratifying"), "gratifi" );
	deepEqual( Stem("gratii"), "gratii" );
	deepEqual( Stem("gratillity"), "gratil" );
	deepEqual( Stem("grating"), "grate" );
	deepEqual( Stem("gratis"), "grati" );
	deepEqual( Stem("gratitude"), "gratitud" );
	deepEqual( Stem("gratuities"), "gratuiti" );
	deepEqual( Stem("gratulate"), "gratul" );
	deepEqual( Stem("grav"), "grav" );
	deepEqual( Stem("grave"), "grave" );
	deepEqual( Stem("gravediggers"), "gravedigg" );
	deepEqual( Stem("gravel"), "gravel" );
	deepEqual( Stem("graveless"), "graveless" );
	deepEqual( Stem("gravell"), "gravel" );
	deepEqual( Stem("gravely"), "grave" );
	deepEqual( Stem("graven"), "graven" );
	deepEqual( Stem("graveness"), "grave" );
	deepEqual( Stem("graver"), "graver" );
	deepEqual( Stem("graves"), "grave" );
	deepEqual( Stem("gravesend"), "gravesend" );
	deepEqual( Stem("gravest"), "gravest" );
	deepEqual( Stem("gravestone"), "graveston" );
	deepEqual( Stem("gravities"), "graviti" );
	deepEqual( Stem("gravity"), "graviti" );
	deepEqual( Stem("gravy"), "gravi" );
	deepEqual( Stem("gray"), "grai" );
	deepEqual( Stem("graymalkin"), "graymalkin" );
	deepEqual( Stem("graz"), "graz" );
	deepEqual( Stem("graze"), "graze" );
	deepEqual( Stem("grazed"), "graze" );
	deepEqual( Stem("grazing"), "graze" );
	deepEqual( Stem("grease"), "greas" );
	deepEqual( Stem("greased"), "greas" );
	deepEqual( Stem("greases"), "greas" );
	deepEqual( Stem("greasily"), "greasili" );
	deepEqual( Stem("greasy"), "greasi" );
	deepEqual( Stem("great"), "great" );
	deepEqual( Stem("greatcoat"), "greatcoat" );
	deepEqual( Stem("greater"), "greater" );
	deepEqual( Stem("greatest"), "greatest" );
	deepEqual( Stem("greatly"), "greatli" );
	deepEqual( Stem("greatness"), "great" );
	deepEqual( Stem("grecian"), "grecian" );
	deepEqual( Stem("grecians"), "grecian" );
	deepEqual( Stem("gredin"), "gredin" );
	deepEqual( Stem("gree"), "gree" );
	deepEqual( Stem("greece"), "greec" );
	deepEqual( Stem("greed"), "greed" );
	deepEqual( Stem("greedily"), "greedili" );
	deepEqual( Stem("greediness"), "greedi" );
	deepEqual( Stem("greedy"), "greedi" );
	deepEqual( Stem("greeing"), "gree" );
	deepEqual( Stem("greek"), "greek" );
	deepEqual( Stem("greekish"), "greekish" );
	deepEqual( Stem("greeks"), "greek" );
	deepEqual( Stem("green"), "green" );
	deepEqual( Stem("greener"), "greener" );
	deepEqual( Stem("greenest"), "greenest" );
	deepEqual( Stem("greengrocer"), "greengroc" );
	deepEqual( Stem("greengroceries"), "greengroceri" );
	deepEqual( Stem("greengrocers"), "greengroc" );
	deepEqual( Stem("greenhorn"), "greenhorn" );
	deepEqual( Stem("greenly"), "greenli" );
	deepEqual( Stem("greens"), "green" );
	deepEqual( Stem("greensleeves"), "greensleev" );
	deepEqual( Stem("greenwich"), "greenwich" );
	deepEqual( Stem("greenwood"), "greenwood" );
	deepEqual( Stem("greeps"), "greep" );
	deepEqual( Stem("greet"), "greet" );
	deepEqual( Stem("greeted"), "greet" );
	deepEqual( Stem("greeting"), "greet" );
	deepEqual( Stem("greetings"), "greet" );
	deepEqual( Stem("greets"), "greet" );
	deepEqual( Stem("greg"), "greg" );
	deepEqual( Stem("gregory"), "gregori" );
	deepEqual( Stem("gremio"), "gremio" );
	deepEqual( Stem("grenadier"), "grenadi" );
	deepEqual( Stem("grenadiers"), "grenadi" );
	deepEqual( Stem("gretney"), "gretnei" );
	deepEqual( Stem("grew"), "grew" );
	deepEqual( Stem("grey"), "grei" );
	deepEqual( Stem("greybeard"), "greybeard" );
	deepEqual( Stem("greybeards"), "greybeard" );
	deepEqual( Stem("greyhound"), "greyhound" );
	deepEqual( Stem("greyhounds"), "greyhound" );
	deepEqual( Stem("greys"), "grei" );
	deepEqual( Stem("grief"), "grief" );
	deepEqual( Stem("griefs"), "grief" );
	deepEqual( Stem("griev"), "griev" );
	deepEqual( Stem("grievance"), "grievanc" );
	deepEqual( Stem("grievances"), "grievanc" );
	deepEqual( Stem("grieve"), "griev" );
	deepEqual( Stem("grieved"), "griev" );
	deepEqual( Stem("grieves"), "griev" );
	deepEqual( Stem("grievest"), "grievest" );
	deepEqual( Stem("grieving"), "griev" );
	deepEqual( Stem("grievingly"), "grievingli" );
	deepEqual( Stem("grievous"), "grievou" );
	deepEqual( Stem("grievously"), "grievous" );
	deepEqual( Stem("griffin"), "griffin" );
	deepEqual( Stem("griffith"), "griffith" );
	deepEqual( Stem("grigg"), "grigg" );
	deepEqual( Stem("grignac"), "grignac" );
	deepEqual( Stem("grills"), "grill" );
	deepEqual( Stem("grillsby"), "grillsbi" );
	deepEqual( Stem("grim"), "grim" );
	deepEqual( Stem("grimace"), "grimac" );
	deepEqual( Stem("grimaces"), "grimac" );
	deepEqual( Stem("grime"), "grime" );
	deepEqual( Stem("grimly"), "grimli" );
	deepEqual( Stem("grin"), "grin" );
	deepEqual( Stem("grind"), "grind" );
	deepEqual( Stem("grinding"), "grind" );
	deepEqual( Stem("grindstone"), "grindston" );
	deepEqual( Stem("grinned"), "grin" );
	deepEqual( Stem("grinning"), "grin" );
	deepEqual( Stem("grins"), "grin" );
	deepEqual( Stem("grinstone"), "grinston" );
	deepEqual( Stem("grip"), "grip" );
	deepEqual( Stem("gripe"), "gripe" );
	deepEqual( Stem("gripes"), "gripe" );
	deepEqual( Stem("griping"), "gripe" );
	deepEqual( Stem("gripped"), "grip" );
	deepEqual( Stem("gris"), "gri" );
	deepEqual( Stem("grise"), "grise" );
	deepEqual( Stem("griselda"), "griselda" );
	deepEqual( Stem("grisly"), "grisli" );
	deepEqual( Stem("grissel"), "grissel" );
	deepEqual( Stem("grits"), "grit" );
	deepEqual( Stem("grize"), "grize" );
	deepEqual( Stem("grizzel"), "grizzel" );
	deepEqual( Stem("grizzle"), "grizzl" );
	deepEqual( Stem("grizzled"), "grizzl" );
	deepEqual( Stem("groan"), "groan" );
	deepEqual( Stem("groaned"), "groan" );
	deepEqual( Stem("groaning"), "groan" );
	deepEqual( Stem("groans"), "groan" );
	deepEqual( Stem("groat"), "groat" );
	deepEqual( Stem("groats"), "groat" );
	deepEqual( Stem("grocer"), "grocer" );
	deepEqual( Stem("grocers"), "grocer" );
	deepEqual( Stem("grog"), "grog" );
	deepEqual( Stem("groggy"), "groggi" );
	deepEqual( Stem("grogram"), "grogram" );
	deepEqual( Stem("grogwitz"), "grogwitz" );
	deepEqual( Stem("groin"), "groin" );
	deepEqual( Stem("groom"), "groom" );
	deepEqual( Stem("grooms"), "groom" );
	deepEqual( Stem("groomsman"), "groomsman" );
	deepEqual( Stem("grop"), "grop" );
	deepEqual( Stem("groping"), "grope" );
	deepEqual( Stem("gros"), "gro" );
	deepEqual( Stem("gross"), "gross" );
	deepEqual( Stem("grosser"), "grosser" );
	deepEqual( Stem("grossly"), "grossli" );
	deepEqual( Stem("grossness"), "gross" );
	deepEqual( Stem("grosvenor"), "grosvenor" );
	deepEqual( Stem("ground"), "ground" );
	deepEqual( Stem("grounded"), "ground" );
	deepEqual( Stem("groundless"), "groundless" );
	deepEqual( Stem("groundlings"), "groundl" );
	deepEqual( Stem("grounds"), "ground" );
	deepEqual( Stem("group"), "group" );
	deepEqual( Stem("grove"), "grove" );
	deepEqual( Stem("grovel"), "grovel" );
	deepEqual( Stem("grovelled"), "grovel" );
	deepEqual( Stem("grovelling"), "grovel" );
	deepEqual( Stem("groves"), "grove" );
	deepEqual( Stem("grow"), "grow" );
	deepEqual( Stem("groweth"), "groweth" );
	deepEqual( Stem("growing"), "grow" );
	deepEqual( Stem("growl"), "growl" );
	deepEqual( Stem("growled"), "growl" );
	deepEqual( Stem("growling"), "growl" );
	deepEqual( Stem("grown"), "grown" );
	deepEqual( Stem("grows"), "grow" );
	deepEqual( Stem("growth"), "growth" );
	deepEqual( Stem("growths"), "growth" );
	deepEqual( Stem("grub"), "grub" );
	deepEqual( Stem("grubb"), "grubb" );
	deepEqual( Stem("grubbing"), "grub" );
	deepEqual( Stem("grubs"), "grub" );
	deepEqual( Stem("grudge"), "grudg" );
	deepEqual( Stem("grudged"), "grudg" );
	deepEqual( Stem("grudges"), "grudg" );
	deepEqual( Stem("grudging"), "grudg" );
	deepEqual( Stem("gruel"), "gruel" );
	deepEqual( Stem("gruffly"), "gruffli" );
	deepEqual( Stem("grumble"), "grumbl" );
	deepEqual( Stem("grumbled"), "grumbl" );
	deepEqual( Stem("grumblest"), "grumblest" );
	deepEqual( Stem("grumbling"), "grumbl" );
	deepEqual( Stem("grumblings"), "grumbl" );
	deepEqual( Stem("grumio"), "grumio" );
	deepEqual( Stem("grund"), "grund" );
	deepEqual( Stem("grundy"), "grundi" );
	deepEqual( Stem("grunt"), "grunt" );
	deepEqual( Stem("gruyere"), "gruyer" );
	deepEqual( Stem("gualtier"), "gualtier" );
	deepEqual( Stem("guard"), "guard" );
	deepEqual( Stem("guardage"), "guardag" );
	deepEqual( Stem("guardant"), "guardant" );
	deepEqual( Stem("guarded"), "guard" );
	deepEqual( Stem("guardian"), "guardian" );
	deepEqual( Stem("guardians"), "guardian" );
	deepEqual( Stem("guardianship"), "guardianship" );
	deepEqual( Stem("guarding"), "guard" );
	deepEqual( Stem("guards"), "guard" );
	deepEqual( Stem("guardsman"), "guardsman" );
	deepEqual( Stem("guardsmen"), "guardsmen" );
	deepEqual( Stem("guava"), "guava" );
	deepEqual( Stem("gud"), "gud" );
	deepEqual( Stem("gudgeon"), "gudgeon" );
	deepEqual( Stem("guerdon"), "guerdon" );
	deepEqual( Stem("guerra"), "guerra" );
	deepEqual( Stem("guess"), "guess" );
	deepEqual( Stem("guessed"), "guess" );
	deepEqual( Stem("guesses"), "guess" );
	deepEqual( Stem("guessingly"), "guessingli" );
	deepEqual( Stem("guest"), "guest" );
	deepEqual( Stem("guests"), "guest" );
	deepEqual( Stem("guffaw"), "guffaw" );
	deepEqual( Stem("guggling"), "guggl" );
	deepEqual( Stem("guiana"), "guiana" );
	deepEqual( Stem("guichard"), "guichard" );
	deepEqual( Stem("guidance"), "guidanc" );
	deepEqual( Stem("guide"), "guid" );
	deepEqual( Stem("guided"), "guid" );
	deepEqual( Stem("guider"), "guider" );
	deepEqual( Stem("guiderius"), "guideriu" );
	deepEqual( Stem("guides"), "guid" );
	deepEqual( Stem("guiding"), "guid" );
	deepEqual( Stem("guidon"), "guidon" );
	deepEqual( Stem("guienne"), "guienn" );
	deepEqual( Stem("guil"), "guil" );
	deepEqual( Stem("guilbert"), "guilbert" );
	deepEqual( Stem("guildenstern"), "guildenstern" );
	deepEqual( Stem("guilders"), "guilder" );
	deepEqual( Stem("guildford"), "guildford" );
	deepEqual( Stem("guildhall"), "guildhal" );
	deepEqual( Stem("guile"), "guil" );
	deepEqual( Stem("guiled"), "guil" );
	deepEqual( Stem("guileful"), "guil" );
	deepEqual( Stem("guileless"), "guileless" );
	deepEqual( Stem("guilfords"), "guilford" );
	deepEqual( Stem("guilt"), "guilt" );
	deepEqual( Stem("guiltian"), "guiltian" );
	deepEqual( Stem("guiltier"), "guiltier" );
	deepEqual( Stem("guiltily"), "guiltili" );
	deepEqual( Stem("guiltiness"), "guilti" );
	deepEqual( Stem("guiltless"), "guiltless" );
	deepEqual( Stem("guilts"), "guilt" );
	deepEqual( Stem("guilty"), "guilti" );
	deepEqual( Stem("guinea"), "guinea" );
	deepEqual( Stem("guineas"), "guinea" );
	deepEqual( Stem("guinever"), "guinev" );
	deepEqual( Stem("guise"), "guis" );
	deepEqual( Stem("guises"), "guis" );
	deepEqual( Stem("gul"), "gul" );
	deepEqual( Stem("gules"), "gule" );
	deepEqual( Stem("gulf"), "gulf" );
	deepEqual( Stem("gulfs"), "gulf" );
	deepEqual( Stem("gulielmo"), "gulielmo" );
	deepEqual( Stem("gull"), "gull" );
	deepEqual( Stem("gulls"), "gull" );
	deepEqual( Stem("gulp"), "gulp" );
	deepEqual( Stem("gulping"), "gulp" );
	deepEqual( Stem("gum"), "gum" );
	deepEqual( Stem("gumm"), "gumm" );
	deepEqual( Stem("gums"), "gum" );
	deepEqual( Stem("gun"), "gun" );
	deepEqual( Stem("gunner"), "gunner" );
	deepEqual( Stem("gunpowder"), "gunpowd" );
	deepEqual( Stem("guns"), "gun" );
	deepEqual( Stem("gunter"), "gunter" );
	deepEqual( Stem("gurgled"), "gurgl" );
	deepEqual( Stem("gurgling"), "gurgl" );
	deepEqual( Stem("gurnet"), "gurnet" );
	deepEqual( Stem("gurney"), "gurnei" );
	deepEqual( Stem("gush"), "gush" );
	deepEqual( Stem("gushing"), "gush" );
	deepEqual( Stem("gust"), "gust" );
	deepEqual( Stem("gustavus"), "gustavu" );
	deepEqual( Stem("gusto"), "gusto" );
	deepEqual( Stem("gusts"), "gust" );
	deepEqual( Stem("gusty"), "gusti" );
	deepEqual( Stem("guthrie"), "guthri" );
	deepEqual( Stem("guts"), "gut" );
	deepEqual( Stem("gutter"), "gutter" );
	deepEqual( Stem("guy"), "gui" );
	deepEqual( Stem("guynes"), "guyn" );
	deepEqual( Stem("guysors"), "guysor" );
	deepEqual( Stem("gwendoline"), "gwendolin" );
	deepEqual( Stem("gypsy"), "gypsi" );
	deepEqual( Stem("gyve"), "gyve" );
	deepEqual( Stem("gyved"), "gyve" );
	deepEqual( Stem("gyves"), "gyve" );
	deepEqual( Stem("h"), "h" );
	deepEqual( Stem("ha"), "ha" );
	deepEqual( Stem("haberdasher"), "haberdash" );
	deepEqual( Stem("habiliment"), "habili" );
	deepEqual( Stem("habiliments"), "habili" );
	deepEqual( Stem("habit"), "habit" );
	deepEqual( Stem("habitation"), "habit" );
	deepEqual( Stem("habitations"), "habit" );
	deepEqual( Stem("habited"), "habit" );
	deepEqual( Stem("habits"), "habit" );
	deepEqual( Stem("habitual"), "habitu" );
	deepEqual( Stem("habitually"), "habitu" );
	deepEqual( Stem("habitude"), "habitud" );
	deepEqual( Stem("habitues"), "habitu" );
	deepEqual( Stem("hack"), "hack" );
	deepEqual( Stem("hacked"), "hack" );
	deepEqual( Stem("hacket"), "hacket" );
	deepEqual( Stem("hackney"), "hacknei" );
	deepEqual( Stem("hackneyed"), "hacknei" );
	deepEqual( Stem("hacks"), "hack" );
	deepEqual( Stem("had"), "had" );
	deepEqual( Stem("hadn"), "hadn" );
	deepEqual( Stem("hadst"), "hadst" );
	deepEqual( Stem("haec"), "haec" );
	deepEqual( Stem("haeres"), "haer" );
	deepEqual( Stem("hag"), "hag" );
	deepEqual( Stem("hagar"), "hagar" );
	deepEqual( Stem("haggard"), "haggard" );
	deepEqual( Stem("haggards"), "haggard" );
	deepEqual( Stem("haggish"), "haggish" );
	deepEqual( Stem("haggistoun"), "haggistoun" );
	deepEqual( Stem("haggle"), "haggl" );
	deepEqual( Stem("haggled"), "haggl" );
	deepEqual( Stem("haggles"), "haggl" );
	deepEqual( Stem("hags"), "hag" );
	deepEqual( Stem("hail"), "hail" );
	deepEqual( Stem("hailed"), "hail" );
	deepEqual( Stem("hailstone"), "hailston" );
	deepEqual( Stem("hailstones"), "hailston" );
	deepEqual( Stem("hair"), "hair" );
	deepEqual( Stem("hairdresser"), "hairdress" );
	deepEqual( Stem("haired"), "hair" );
	deepEqual( Stem("hairless"), "hairless" );
	deepEqual( Stem("hairs"), "hair" );
	deepEqual( Stem("hairy"), "hairi" );
	deepEqual( Stem("hal"), "hal" );
	deepEqual( Stem("halberd"), "halberd" );
	deepEqual( Stem("halberds"), "halberd" );
	deepEqual( Stem("halcyon"), "halcyon" );
	deepEqual( Stem("hale"), "hale" );
	deepEqual( Stem("haled"), "hale" );
	deepEqual( Stem("hales"), "hale" );
	deepEqual( Stem("half"), "half" );
	deepEqual( Stem("halfcan"), "halfcan" );
	deepEqual( Stem("halfpence"), "halfpenc" );
	deepEqual( Stem("halfpenny"), "halfpenni" );
	deepEqual( Stem("halfpennyworth"), "halfpennyworth" );
	deepEqual( Stem("halfway"), "halfwai" );
	deepEqual( Stem("halidom"), "halidom" );
	deepEqual( Stem("halixander"), "halixand" );
	deepEqual( Stem("hall"), "hall" );
	deepEqual( Stem("halloa"), "halloa" );
	deepEqual( Stem("halloing"), "hallo" );
	deepEqual( Stem("hallond"), "hallond" );
	deepEqual( Stem("halloo"), "halloo" );
	deepEqual( Stem("hallooing"), "halloo" );
	deepEqual( Stem("hallow"), "hallow" );
	deepEqual( Stem("hallowed"), "hallow" );
	deepEqual( Stem("hallowmas"), "hallowma" );
	deepEqual( Stem("hallown"), "hallown" );
	deepEqual( Stem("halls"), "hall" );
	deepEqual( Stem("halo"), "halo" );
	deepEqual( Stem("hals"), "hal" );
	deepEqual( Stem("halt"), "halt" );
	deepEqual( Stem("halter"), "halter" );
	deepEqual( Stem("halters"), "halter" );
	deepEqual( Stem("halting"), "halt" );
	deepEqual( Stem("halts"), "halt" );
	deepEqual( Stem("halves"), "halv" );
	deepEqual( Stem("ham"), "ham" );
	deepEqual( Stem("hames"), "hame" );
	deepEqual( Stem("hamlet"), "hamlet" );
	deepEqual( Stem("hamlets"), "hamlet" );
	deepEqual( Stem("hammer"), "hammer" );
	deepEqual( Stem("hammerdown"), "hammerdown" );
	deepEqual( Stem("hammered"), "hammer" );
	deepEqual( Stem("hammering"), "hammer" );
	deepEqual( Stem("hammers"), "hammer" );
	deepEqual( Stem("hammersmith"), "hammersmith" );
	deepEqual( Stem("hammock"), "hammock" );
	deepEqual( Stem("hamper"), "hamper" );
	deepEqual( Stem("hampers"), "hamper" );
	deepEqual( Stem("hampshire"), "hampshir" );
	deepEqual( Stem("hampstead"), "hampstead" );
	deepEqual( Stem("hampton"), "hampton" );
	deepEqual( Stem("hams"), "ham" );
	deepEqual( Stem("hamstring"), "hamstr" );
	deepEqual( Stem("hand"), "hand" );
	deepEqual( Stem("handcuffs"), "handcuff" );
	deepEqual( Stem("handed"), "hand" );
	deepEqual( Stem("handel"), "handel" );
	deepEqual( Stem("handful"), "hand" );
	deepEqual( Stem("handicraft"), "handicraft" );
	deepEqual( Stem("handicraftsmen"), "handicraftsmen" );
	deepEqual( Stem("handing"), "hand" );
	deepEqual( Stem("handiwork"), "handiwork" );
	deepEqual( Stem("handkercher"), "handkerch" );
	deepEqual( Stem("handkerchers"), "handkerch" );
	deepEqual( Stem("handkerchief"), "handkerchief" );
	deepEqual( Stem("handkerchiefs"), "handkerchief" );
	deepEqual( Stem("handle"), "handl" );
	deepEqual( Stem("handled"), "handl" );
	deepEqual( Stem("handles"), "handl" );
	deepEqual( Stem("handless"), "handless" );
	deepEqual( Stem("handlest"), "handlest" );
	deepEqual( Stem("handling"), "handl" );
	deepEqual( Stem("handmaid"), "handmaid" );
	deepEqual( Stem("handmaids"), "handmaid" );
	deepEqual( Stem("hands"), "hand" );
	deepEqual( Stem("handsaw"), "handsaw" );
	deepEqual( Stem("handscreens"), "handscreen" );
	deepEqual( Stem("handshaking"), "handshak" );
	deepEqual( Stem("handsome"), "handsom" );
	deepEqual( Stem("handsomely"), "handsom" );
	deepEqual( Stem("handsomeness"), "handsom" );
	deepEqual( Stem("handsomer"), "handsom" );
	deepEqual( Stem("handsomest"), "handsomest" );
	deepEqual( Stem("handwriting"), "handwrit" );
	deepEqual( Stem("handwritings"), "handwrit" );
	deepEqual( Stem("handy"), "handi" );
	deepEqual( Stem("hang"), "hang" );
	deepEqual( Stem("hanged"), "hang" );
	deepEqual( Stem("hanger"), "hanger" );
	deepEqual( Stem("hangers"), "hanger" );
	deepEqual( Stem("hangeth"), "hangeth" );
	deepEqual( Stem("hanging"), "hang" );
	deepEqual( Stem("hangings"), "hang" );
	deepEqual( Stem("hangman"), "hangman" );
	deepEqual( Stem("hangmen"), "hangmen" );
	deepEqual( Stem("hangs"), "hang" );
	deepEqual( Stem("hankered"), "hanker" );
	deepEqual( Stem("hankering"), "hanker" );
	deepEqual( Stem("hannah"), "hannah" );
	deepEqual( Stem("hannibal"), "hannib" );
	deepEqual( Stem("hanover"), "hanov" );
	deepEqual( Stem("hanoverian"), "hanoverian" );
	deepEqual( Stem("hans"), "han" );
	deepEqual( Stem("hants"), "hant" );
	deepEqual( Stem("hap"), "hap" );
	deepEqual( Stem("hapless"), "hapless" );
	deepEqual( Stem("haply"), "hapli" );
	deepEqual( Stem("happ"), "happ" );
	deepEqual( Stem("happen"), "happen" );
	deepEqual( Stem("happened"), "happen" );
	deepEqual( Stem("happening"), "happen" );
	deepEqual( Stem("happens"), "happen" );
	deepEqual( Stem("happier"), "happier" );
	deepEqual( Stem("happies"), "happi" );
	deepEqual( Stem("happiest"), "happiest" );
	deepEqual( Stem("happily"), "happili" );
	deepEqual( Stem("happiness"), "happi" );
	deepEqual( Stem("happy"), "happi" );
	deepEqual( Stem("haps"), "hap" );
	deepEqual( Stem("har"), "har" );
	deepEqual( Stem("harangues"), "harangu" );
	deepEqual( Stem("haranguing"), "harangu" );
	deepEqual( Stem("harassed"), "harass" );
	deepEqual( Stem("harassing"), "harass" );
	deepEqual( Stem("harassment"), "harass" );
	deepEqual( Stem("harbinger"), "harbing" );
	deepEqual( Stem("harbingers"), "harbing" );
	deepEqual( Stem("harbor"), "harbor" );
	deepEqual( Stem("harbour"), "harbour" );
	deepEqual( Stem("harbourage"), "harbourag" );
	deepEqual( Stem("harbouring"), "harbour" );
	deepEqual( Stem("harbours"), "harbour" );
	deepEqual( Stem("harcourt"), "harcourt" );
	deepEqual( Stem("hard"), "hard" );
	deepEqual( Stem("hardbake"), "hardbak" );
	deepEqual( Stem("hardcastle"), "hardcastl" );
	deepEqual( Stem("hardenberg"), "hardenberg" );
	deepEqual( Stem("hardened"), "harden" );
	deepEqual( Stem("harder"), "harder" );
	deepEqual( Stem("hardest"), "hardest" );
	deepEqual( Stem("hardiest"), "hardiest" );
	deepEqual( Stem("hardiment"), "hardiment" );
	deepEqual( Stem("hardiness"), "hardi" );
	deepEqual( Stem("hardly"), "hardli" );
	deepEqual( Stem("hardness"), "hard" );
	deepEqual( Stem("hardocks"), "hardock" );
	deepEqual( Stem("hardy"), "hardi" );
	deepEqual( Stem("hardyman"), "hardyman" );
	deepEqual( Stem("hare"), "hare" );
	deepEqual( Stem("hareem"), "hareem" );
	deepEqual( Stem("harelip"), "harelip" );
	deepEqual( Stem("hares"), "hare" );
	deepEqual( Stem("harfleur"), "harfleur" );
	deepEqual( Stem("hark"), "hark" );
	deepEqual( Stem("harlequin"), "harlequin" );
	deepEqual( Stem("harlot"), "harlot" );
	deepEqual( Stem("harlotry"), "harlotri" );
	deepEqual( Stem("harlots"), "harlot" );
	deepEqual( Stem("harm"), "harm" );
	deepEqual( Stem("harmed"), "harm" );
	deepEqual( Stem("harmful"), "harm" );
	deepEqual( Stem("harming"), "harm" );
	deepEqual( Stem("harmless"), "harmless" );
	deepEqual( Stem("harmonies"), "harmoni" );
	deepEqual( Stem("harmonious"), "harmoni" );
	deepEqual( Stem("harmonized"), "harmon" );
	deepEqual( Stem("harmony"), "harmoni" );
	deepEqual( Stem("harms"), "harm" );
	deepEqual( Stem("harness"), "har" );
	deepEqual( Stem("harp"), "harp" );
	deepEqual( Stem("harper"), "harper" );
	deepEqual( Stem("harpier"), "harpier" );
	deepEqual( Stem("harpies"), "harpi" );
	deepEqual( Stem("harping"), "harp" );
	deepEqual( Stem("harps"), "harp" );
	deepEqual( Stem("harpy"), "harpi" );
	deepEqual( Stem("harridan"), "harridan" );
	deepEqual( Stem("harridans"), "harridan" );
	deepEqual( Stem("harried"), "harri" );
	deepEqual( Stem("harrow"), "harrow" );
	deepEqual( Stem("harrowgate"), "harrowg" );
	deepEqual( Stem("harrowing"), "harrow" );
	deepEqual( Stem("harrows"), "harrow" );
	deepEqual( Stem("harry"), "harri" );
	deepEqual( Stem("harsh"), "harsh" );
	deepEqual( Stem("harshly"), "harshli" );
	deepEqual( Stem("harshness"), "harsh" );
	deepEqual( Stem("hart"), "hart" );
	deepEqual( Stem("harts"), "hart" );
	deepEqual( Stem("harum"), "harum" );
	deepEqual( Stem("harvest"), "harvest" );
	deepEqual( Stem("harvey"), "harvei" );
	deepEqual( Stem("harwich"), "harwich" );
	deepEqual( Stem("has"), "ha" );
	deepEqual( Stem("hasn"), "hasn" );
	deepEqual( Stem("hassan"), "hassan" );
	deepEqual( Stem("hast"), "hast" );
	deepEqual( Stem("haste"), "hast" );
	deepEqual( Stem("hasted"), "hast" );
	deepEqual( Stem("hasten"), "hasten" );
	deepEqual( Stem("hastened"), "hasten" );
	deepEqual( Stem("hastes"), "hast" );
	deepEqual( Stem("hastily"), "hastili" );
	deepEqual( Stem("hasting"), "hast" );
	deepEqual( Stem("hastings"), "hast" );
	deepEqual( Stem("hasty"), "hasti" );
	deepEqual( Stem("hat"), "hat" );
	deepEqual( Stem("hatband"), "hatband" );
	deepEqual( Stem("hatbands"), "hatband" );
	deepEqual( Stem("hatch"), "hatch" );
	deepEqual( Stem("hatches"), "hatch" );
	deepEqual( Stem("hatchet"), "hatchet" );
	deepEqual( Stem("hatching"), "hatch" );
	deepEqual( Stem("hatchment"), "hatchment" );
	deepEqual( Stem("hatchments"), "hatchment" );
	deepEqual( Stem("hate"), "hate" );
	deepEqual( Stem("hated"), "hate" );
	deepEqual( Stem("hateful"), "hate" );
	deepEqual( Stem("hater"), "hater" );
	deepEqual( Stem("haters"), "hater" );
	deepEqual( Stem("hates"), "hate" );
	deepEqual( Stem("hateth"), "hateth" );
	deepEqual( Stem("hatfield"), "hatfield" );
	deepEqual( Stem("hath"), "hath" );
	deepEqual( Stem("hating"), "hate" );
	deepEqual( Stem("hatless"), "hatless" );
	deepEqual( Stem("hatred"), "hatr" );
	deepEqual( Stem("hats"), "hat" );
	deepEqual( Stem("hatted"), "hat" );
	deepEqual( Stem("hatter"), "hatter" );
	deepEqual( Stem("hatters"), "hatter" );
	deepEqual( Stem("haud"), "haud" );
	deepEqual( Stem("hauf"), "hauf" );
	deepEqual( Stem("haught"), "haught" );
	deepEqual( Stem("haughtiest"), "haughtiest" );
	deepEqual( Stem("haughtily"), "haughtili" );
	deepEqual( Stem("haughtiness"), "haughti" );
	deepEqual( Stem("haughty"), "haughti" );
	deepEqual( Stem("haunch"), "haunch" );
	deepEqual( Stem("haunches"), "haunch" );
	deepEqual( Stem("haunt"), "haunt" );
	deepEqual( Stem("haunted"), "haunt" );
	deepEqual( Stem("haunting"), "haunt" );
	deepEqual( Stem("haunts"), "haunt" );
	deepEqual( Stem("hautboy"), "hautboi" );
	deepEqual( Stem("hautboys"), "hautboi" );
	deepEqual( Stem("have"), "have" );
	deepEqual( Stem("haven"), "haven" );
	deepEqual( Stem("havens"), "haven" );
	deepEqual( Stem("haver"), "haver" );
	deepEqual( Stem("having"), "have" );
	deepEqual( Stem("havings"), "have" );
	deepEqual( Stem("havior"), "havior" );
	deepEqual( Stem("haviour"), "haviour" );
	deepEqual( Stem("havoc"), "havoc" );
	deepEqual( Stem("haw"), "haw" );
	deepEqual( Stem("hawk"), "hawk" );
	deepEqual( Stem("hawking"), "hawk" );
	deepEqual( Stem("hawks"), "hawk" );
	deepEqual( Stem("hawky"), "hawki" );
	deepEqual( Stem("haws"), "haw" );
	deepEqual( Stem("hawthorn"), "hawthorn" );
	deepEqual( Stem("hawthorns"), "hawthorn" );
	deepEqual( Stem("hay"), "hai" );
	deepEqual( Stem("haydn"), "haydn" );
	deepEqual( Stem("haye"), "hay" );
	deepEqual( Stem("hayes"), "hay" );
	deepEqual( Stem("haymarket"), "haymarket" );
	deepEqual( Stem("haystack"), "haystack" );
	deepEqual( Stem("haystacks"), "haystack" );
	deepEqual( Stem("hazard"), "hazard" );
	deepEqual( Stem("hazarded"), "hazard" );
	deepEqual( Stem("hazards"), "hazard" );
	deepEqual( Stem("haze"), "haze" );
	deepEqual( Stem("hazel"), "hazel" );
	deepEqual( Stem("hazelnut"), "hazelnut" );
	deepEqual( Stem("hazy"), "hazi" );
	deepEqual( Stem("he"), "he" );
	deepEqual( Stem("head"), "head" );
	deepEqual( Stem("headache"), "headach" );
	deepEqual( Stem("headaches"), "headach" );
	deepEqual( Stem("headborough"), "headborough" );
	deepEqual( Stem("headed"), "head" );
	deepEqual( Stem("headier"), "headier" );
	deepEqual( Stem("heading"), "head" );
	deepEqual( Stem("headland"), "headland" );
	deepEqual( Stem("headless"), "headless" );
	deepEqual( Stem("headlong"), "headlong" );
	deepEqual( Stem("headquarters"), "headquart" );
	deepEqual( Stem("heads"), "head" );
	deepEqual( Stem("headsman"), "headsman" );
	deepEqual( Stem("headstrong"), "headstrong" );
	deepEqual( Stem("heady"), "headi" );
	deepEqual( Stem("heal"), "heal" );
	deepEqual( Stem("healed"), "heal" );
	deepEqual( Stem("healing"), "heal" );
	deepEqual( Stem("heals"), "heal" );
	deepEqual( Stem("health"), "health" );
	deepEqual( Stem("healthful"), "health" );
	deepEqual( Stem("healths"), "health" );
	deepEqual( Stem("healthsome"), "healthsom" );
	deepEqual( Stem("healthy"), "healthi" );
	deepEqual( Stem("heap"), "heap" );
	deepEqual( Stem("heaped"), "heap" );
	deepEqual( Stem("heaping"), "heap" );
	deepEqual( Stem("heaps"), "heap" );
	deepEqual( Stem("hear"), "hear" );
	deepEqual( Stem("heard"), "heard" );
	deepEqual( Stem("hearer"), "hearer" );
	deepEqual( Stem("hearers"), "hearer" );
	deepEqual( Stem("hearest"), "hearest" );
	deepEqual( Stem("heareth"), "heareth" );
	deepEqual( Stem("hearing"), "hear" );
	deepEqual( Stem("hearings"), "hear" );
	deepEqual( Stem("heark"), "heark" );
	deepEqual( Stem("hearken"), "hearken" );
	deepEqual( Stem("hearkens"), "hearken" );
	deepEqual( Stem("hears"), "hear" );
	deepEqual( Stem("hearsay"), "hearsai" );
	deepEqual( Stem("hearse"), "hears" );
	deepEqual( Stem("hearsed"), "hears" );
	deepEqual( Stem("hearst"), "hearst" );
	deepEqual( Stem("heart"), "heart" );
	deepEqual( Stem("heartache"), "heartach" );
	deepEqual( Stem("heartbreak"), "heartbreak" );
	deepEqual( Stem("heartbreaking"), "heartbreak" );
	deepEqual( Stem("heartburn"), "heartburn" );
	deepEqual( Stem("hearted"), "heart" );
	deepEqual( Stem("heartedness"), "hearted" );
	deepEqual( Stem("hearten"), "hearten" );
	deepEqual( Stem("hearth"), "hearth" );
	deepEqual( Stem("hearths"), "hearth" );
	deepEqual( Stem("heartily"), "heartili" );
	deepEqual( Stem("heartiness"), "hearti" );
	deepEqual( Stem("heartless"), "heartless" );
	deepEqual( Stem("heartlings"), "heartl" );
	deepEqual( Stem("heartly"), "heartli" );
	deepEqual( Stem("hearts"), "heart" );
	deepEqual( Stem("heartsick"), "heartsick" );
	deepEqual( Stem("heartstrings"), "heartstr" );
	deepEqual( Stem("hearty"), "hearti" );
	deepEqual( Stem("heat"), "heat" );
	deepEqual( Stem("heated"), "heat" );
	deepEqual( Stem("heath"), "heath" );
	deepEqual( Stem("heathen"), "heathen" );
	deepEqual( Stem("heathenish"), "heathenish" );
	deepEqual( Stem("heating"), "heat" );
	deepEqual( Stem("heats"), "heat" );
	deepEqual( Stem("heauties"), "heauti" );
	deepEqual( Stem("heav"), "heav" );
	deepEqual( Stem("heave"), "heav" );
	deepEqual( Stem("heaved"), "heav" );
	deepEqual( Stem("heaven"), "heaven" );
	deepEqual( Stem("heavenly"), "heavenli" );
	deepEqual( Stem("heavens"), "heaven" );
	deepEqual( Stem("heaves"), "heav" );
	deepEqual( Stem("heavier"), "heavier" );
	deepEqual( Stem("heavies"), "heavi" );
	deepEqual( Stem("heaviest"), "heaviest" );
	deepEqual( Stem("heavily"), "heavili" );
	deepEqual( Stem("heaviness"), "heavi" );
	deepEqual( Stem("heaving"), "heav" );
	deepEqual( Stem("heavings"), "heav" );
	deepEqual( Stem("heavy"), "heavi" );
	deepEqual( Stem("heavytop"), "heavytop" );
	deepEqual( Stem("hebona"), "hebona" );
	deepEqual( Stem("hebrew"), "hebrew" );
	deepEqual( Stem("hecate"), "hecat" );
	deepEqual( Stem("hectic"), "hectic" );
	deepEqual( Stem("hector"), "hector" );
	deepEqual( Stem("hectoring"), "hector" );
	deepEqual( Stem("hectors"), "hector" );
	deepEqual( Stem("hecuba"), "hecuba" );
	deepEqual( Stem("hedg"), "hedg" );
	deepEqual( Stem("hedge"), "hedg" );
	deepEqual( Stem("hedgehog"), "hedgehog" );
	deepEqual( Stem("hedgehogs"), "hedgehog" );
	deepEqual( Stem("hedges"), "hedg" );
	deepEqual( Stem("heed"), "heed" );
	deepEqual( Stem("heeded"), "heed" );
	deepEqual( Stem("heedful"), "heed" );
	deepEqual( Stem("heedfull"), "heedful" );
	deepEqual( Stem("heedfully"), "heedfulli" );
	deepEqual( Stem("heeding"), "heed" );
	deepEqual( Stem("heedless"), "heedless" );
	deepEqual( Stem("heehaw"), "heehaw" );
	deepEqual( Stem("heel"), "heel" );
	deepEqual( Stem("heeled"), "heel" );
	deepEqual( Stem("heels"), "heel" );
	deepEqual( Stem("heeltap"), "heeltap" );
	deepEqual( Stem("hefted"), "heft" );
	deepEqual( Stem("hefts"), "heft" );
	deepEqual( Stem("heggs"), "hegg" );
	deepEqual( Stem("heifer"), "heifer" );
	deepEqual( Stem("heifers"), "heifer" );
	deepEqual( Stem("heigh"), "heigh" );
	deepEqual( Stem("heigho"), "heigho" );
	deepEqual( Stem("height"), "height" );
	deepEqual( Stem("heighten"), "heighten" );
	deepEqual( Stem("heightened"), "heighten" );
	deepEqual( Stem("heights"), "height" );
	deepEqual( Stem("heinous"), "heinou" );
	deepEqual( Stem("heinously"), "heinous" );
	deepEqual( Stem("heir"), "heir" );
	deepEqual( Stem("heiress"), "heiress" );
	deepEqual( Stem("heirless"), "heirless" );
	deepEqual( Stem("heirs"), "heir" );
	deepEqual( Stem("held"), "held" );
	deepEqual( Stem("helder"), "helder" );
	deepEqual( Stem("helen"), "helen" );
	deepEqual( Stem("helena"), "helena" );
	deepEqual( Stem("helenus"), "helenu" );
	deepEqual( Stem("helias"), "helia" );
	deepEqual( Stem("helicons"), "helicon" );
	deepEqual( Stem("hell"), "hell" );
	deepEqual( Stem("hellborough"), "hellborough" );
	deepEqual( Stem("hellespont"), "hellespont" );
	deepEqual( Stem("hellfire"), "hellfir" );
	deepEqual( Stem("hellish"), "hellish" );
	deepEqual( Stem("helm"), "helm" );
	deepEqual( Stem("helmed"), "helm" );
	deepEqual( Stem("helmet"), "helmet" );
	deepEqual( Stem("helmets"), "helmet" );
	deepEqual( Stem("helms"), "helm" );
	deepEqual( Stem("help"), "help" );
	deepEqual( Stem("helped"), "help" );
	deepEqual( Stem("helper"), "helper" );
	deepEqual( Stem("helpers"), "helper" );
	deepEqual( Stem("helpful"), "help" );
	deepEqual( Stem("helping"), "help" );
	deepEqual( Stem("helpless"), "helpless" );
	deepEqual( Stem("helplessly"), "helplessli" );
	deepEqual( Stem("helps"), "help" );
	deepEqual( Stem("helter"), "helter" );
	deepEqual( Stem("helvellyn"), "helvellyn" );
	deepEqual( Stem("hem"), "hem" );
	deepEqual( Stem("heme"), "heme" );
	deepEqual( Stem("hemlock"), "hemlock" );
	deepEqual( Stem("hemm"), "hemm" );
	deepEqual( Stem("hemmed"), "hem" );
	deepEqual( Stem("hemming"), "hem" );
	deepEqual( Stem("hemp"), "hemp" );
	deepEqual( Stem("hempen"), "hempen" );
	deepEqual( Stem("hems"), "hem" );
	deepEqual( Stem("hen"), "hen" );
	deepEqual( Stem("hence"), "henc" );
	deepEqual( Stem("henceforth"), "henceforth" );
	deepEqual( Stem("henceforward"), "henceforward" );
	deepEqual( Stem("henchman"), "henchman" );
	deepEqual( Stem("henri"), "henri" );
	deepEqual( Stem("henricus"), "henricu" );
	deepEqual( Stem("henry"), "henri" );
	deepEqual( Stem("hens"), "hen" );
	deepEqual( Stem("hent"), "hent" );
	deepEqual( Stem("henton"), "henton" );
	deepEqual( Stem("her"), "her" );
	deepEqual( Stem("herald"), "herald" );
	deepEqual( Stem("heraldic"), "herald" );
	deepEqual( Stem("heraldry"), "heraldri" );
	deepEqual( Stem("heralds"), "herald" );
	deepEqual( Stem("herb"), "herb" );
	deepEqual( Stem("herbert"), "herbert" );
	deepEqual( Stem("herblets"), "herblet" );
	deepEqual( Stem("herbs"), "herb" );
	deepEqual( Stem("herculean"), "herculean" );
	deepEqual( Stem("hercules"), "hercul" );
	deepEqual( Stem("herd"), "herd" );
	deepEqual( Stem("herding"), "herd" );
	deepEqual( Stem("herds"), "herd" );
	deepEqual( Stem("herdsman"), "herdsman" );
	deepEqual( Stem("herdsmen"), "herdsmen" );
	deepEqual( Stem("here"), "here" );
	deepEqual( Stem("hereabout"), "hereabout" );
	deepEqual( Stem("hereabouts"), "hereabout" );
	deepEqual( Stem("hereafter"), "hereaft" );
	deepEqual( Stem("hereby"), "herebi" );
	deepEqual( Stem("hereditary"), "hereditari" );
	deepEqual( Stem("hereford"), "hereford" );
	deepEqual( Stem("herefordshire"), "herefordshir" );
	deepEqual( Stem("herein"), "herein" );
	deepEqual( Stem("hereof"), "hereof" );
	deepEqual( Stem("heresies"), "heresi" );
	deepEqual( Stem("heresy"), "heresi" );
	deepEqual( Stem("heretic"), "heret" );
	deepEqual( Stem("heretics"), "heret" );
	deepEqual( Stem("hereto"), "hereto" );
	deepEqual( Stem("heretofore"), "heretofor" );
	deepEqual( Stem("hereupon"), "hereupon" );
	deepEqual( Stem("herewith"), "herewith" );
	deepEqual( Stem("heritage"), "heritag" );
	deepEqual( Stem("heritier"), "heriti" );
	deepEqual( Stem("hermes"), "herm" );
	deepEqual( Stem("hermia"), "hermia" );
	deepEqual( Stem("hermione"), "hermion" );
	deepEqual( Stem("hermit"), "hermit" );
	deepEqual( Stem("hermitage"), "hermitag" );
	deepEqual( Stem("hermits"), "hermit" );
	deepEqual( Stem("herne"), "hern" );
	deepEqual( Stem("hero"), "hero" );
	deepEqual( Stem("herod"), "herod" );
	deepEqual( Stem("herods"), "herod" );
	deepEqual( Stem("heroes"), "hero" );
	deepEqual( Stem("heroic"), "heroic" );
	deepEqual( Stem("heroical"), "heroic" );
	deepEqual( Stem("heroine"), "heroin" );
	deepEqual( Stem("heroines"), "heroin" );
	deepEqual( Stem("heroism"), "heroism" );
	deepEqual( Stem("herr"), "herr" );
	deepEqual( Stem("herring"), "her" );
	deepEqual( Stem("herrings"), "her" );
	deepEqual( Stem("hers"), "her" );
	deepEqual( Stem("herself"), "herself" );
	deepEqual( Stem("herz"), "herz" );
	deepEqual( Stem("hesitate"), "hesit" );
	deepEqual( Stem("hesitated"), "hesit" );
	deepEqual( Stem("hesitating"), "hesit" );
	deepEqual( Stem("hesitation"), "hesit" );
	deepEqual( Stem("hesperides"), "hesperid" );
	deepEqual( Stem("hesperus"), "hesperu" );
	deepEqual( Stem("hessian"), "hessian" );
	deepEqual( Stem("hessians"), "hessian" );
	deepEqual( Stem("hest"), "hest" );
	deepEqual( Stem("hester"), "hester" );
	deepEqual( Stem("hests"), "hest" );
	deepEqual( Stem("heure"), "heur" );
	deepEqual( Stem("heureux"), "heureux" );
	deepEqual( Stem("hew"), "hew" );
	deepEqual( Stem("hewgh"), "hewgh" );
	deepEqual( Stem("hewing"), "hew" );
	deepEqual( Stem("hewn"), "hewn" );
	deepEqual( Stem("hews"), "hew" );
	deepEqual( Stem("hey"), "hei" );
	deepEqual( Stem("heyday"), "heydai" );
	deepEqual( Stem("hi"), "hi" );
	deepEqual( Stem("hibocrates"), "hibocr" );
	deepEqual( Stem("hic"), "hic" );
	deepEqual( Stem("hiccupped"), "hiccup" );
	deepEqual( Stem("hiccupping"), "hiccup" );
	deepEqual( Stem("hiccups"), "hiccup" );
	deepEqual( Stem("hick"), "hick" );
	deepEqual( Stem("hicks"), "hick" );
	deepEqual( Stem("hid"), "hid" );
	deepEqual( Stem("hidden"), "hidden" );
	deepEqual( Stem("hide"), "hide" );
	deepEqual( Stem("hideous"), "hideou" );
	deepEqual( Stem("hideously"), "hideous" );
	deepEqual( Stem("hideousness"), "hideous" );
	deepEqual( Stem("hides"), "hide" );
	deepEqual( Stem("hidest"), "hidest" );
	deepEqual( Stem("hiding"), "hide" );
	deepEqual( Stem("hie"), "hie" );
	deepEqual( Stem("hied"), "hi" );
	deepEqual( Stem("hieing"), "hie" );
	deepEqual( Stem("hiems"), "hiem" );
	deepEqual( Stem("hies"), "hi" );
	deepEqual( Stem("hig"), "hig" );
	deepEqual( Stem("higgs"), "higg" );
	deepEqual( Stem("high"), "high" );
	deepEqual( Stem("higham"), "higham" );
	deepEqual( Stem("highbury"), "highburi" );
	deepEqual( Stem("higher"), "higher" );
	deepEqual( Stem("highest"), "highest" );
	deepEqual( Stem("highflyer"), "highflyer" );
	deepEqual( Stem("highgate"), "highgat" );
	deepEqual( Stem("highlander"), "highland" );
	deepEqual( Stem("highly"), "highli" );
	deepEqual( Stem("highmost"), "highmost" );
	deepEqual( Stem("highness"), "high" );
	deepEqual( Stem("highnesses"), "high" );
	deepEqual( Stem("hight"), "hight" );
	deepEqual( Stem("highty"), "highti" );
	deepEqual( Stem("highway"), "highwai" );
	deepEqual( Stem("highways"), "highwai" );
	deepEqual( Stem("hilarity"), "hilar" );
	deepEqual( Stem("hilding"), "hild" );
	deepEqual( Stem("hildings"), "hild" );
	deepEqual( Stem("hill"), "hill" );
	deepEqual( Stem("hillisberg"), "hillisberg" );
	deepEqual( Stem("hillo"), "hillo" );
	deepEqual( Stem("hilloa"), "hilloa" );
	deepEqual( Stem("hills"), "hill" );
	deepEqual( Stem("hilt"), "hilt" );
	deepEqual( Stem("hilts"), "hilt" );
	deepEqual( Stem("hily"), "hili" );
	deepEqual( Stem("him"), "him" );
	deepEqual( Stem("himself"), "himself" );
	deepEqual( Stem("hinc"), "hinc" );
	deepEqual( Stem("hinckley"), "hincklei" );
	deepEqual( Stem("hind"), "hind" );
	deepEqual( Stem("hinder"), "hinder" );
	deepEqual( Stem("hindered"), "hinder" );
	deepEqual( Stem("hinders"), "hinder" );
	deepEqual( Stem("hindmost"), "hindmost" );
	deepEqual( Stem("hinds"), "hind" );
	deepEqual( Stem("hing"), "hing" );
	deepEqual( Stem("hinge"), "hing" );
	deepEqual( Stem("hinges"), "hing" );
	deepEqual( Stem("hint"), "hint" );
	deepEqual( Stem("hinted"), "hint" );
	deepEqual( Stem("hinting"), "hint" );
	deepEqual( Stem("hints"), "hint" );
	deepEqual( Stem("hip"), "hip" );
	deepEqual( Stem("hipp"), "hipp" );
	deepEqual( Stem("hipparchus"), "hipparchu" );
	deepEqual( Stem("hippolyta"), "hippolyta" );
	deepEqual( Stem("hips"), "hip" );
	deepEqual( Stem("hir"), "hir" );
	deepEqual( Stem("hire"), "hire" );
	deepEqual( Stem("hired"), "hire" );
	deepEqual( Stem("hireling"), "hirel" );
	deepEqual( Stem("hiren"), "hiren" );
	deepEqual( Stem("hiring"), "hire" );
	deepEqual( Stem("hirsute"), "hirsut" );
	deepEqual( Stem("hirtius"), "hirtiu" );
	deepEqual( Stem("his"), "hi" );
	deepEqual( Stem("hisperia"), "hisperia" );
	deepEqual( Stem("hiss"), "hiss" );
	deepEqual( Stem("hissed"), "hiss" );
	deepEqual( Stem("hisses"), "hiss" );
	deepEqual( Stem("hissing"), "hiss" );
	deepEqual( Stem("hist"), "hist" );
	deepEqual( Stem("historian"), "historian" );
	deepEqual( Stem("historians"), "historian" );
	deepEqual( Stem("historical"), "histor" );
	deepEqual( Stem("histories"), "histori" );
	deepEqual( Stem("history"), "histori" );
	deepEqual( Stem("hit"), "hit" );
	deepEqual( Stem("hither"), "hither" );
	deepEqual( Stem("hitherto"), "hitherto" );
	deepEqual( Stem("hitherward"), "hitherward" );
	deepEqual( Stem("hitherwards"), "hitherward" );
	deepEqual( Stem("hits"), "hit" );
	deepEqual( Stem("hitting"), "hit" );
	deepEqual( Stem("hive"), "hive" );
	deepEqual( Stem("hives"), "hive" );
	deepEqual( Stem("hizzing"), "hizz" );
	deepEqual( Stem("hm"), "hm" );
	deepEqual( Stem("ho"), "ho" );
	deepEqual( Stem("hoa"), "hoa" );
	deepEqual( Stem("hoar"), "hoar" );
	deepEqual( Stem("hoard"), "hoard" );
	deepEqual( Stem("hoarded"), "hoard" );
	deepEqual( Stem("hoarding"), "hoard" );
	deepEqual( Stem("hoars"), "hoar" );
	deepEqual( Stem("hoarse"), "hoars" );
	deepEqual( Stem("hoary"), "hoari" );
	deepEqual( Stem("hob"), "hob" );
	deepEqual( Stem("hobbadehoy"), "hobbadehoi" );
	deepEqual( Stem("hobbadyhoy"), "hobbadyhoi" );
	deepEqual( Stem("hobbididence"), "hobbidid" );
	deepEqual( Stem("hobbled"), "hobbl" );
	deepEqual( Stem("hobbling"), "hobbl" );
	deepEqual( Stem("hobbs"), "hobb" );
	deepEqual( Stem("hobby"), "hobbi" );
	deepEqual( Stem("hobbyhorse"), "hobbyhors" );
	deepEqual( Stem("hobgoblin"), "hobgoblin" );
	deepEqual( Stem("hobnails"), "hobnail" );
	deepEqual( Stem("hoc"), "hoc" );
	deepEqual( Stem("hocussed"), "hocuss" );
	deepEqual( Stem("hod"), "hod" );
	deepEqual( Stem("hodge"), "hodg" );
	deepEqual( Stem("hodson"), "hodson" );
	deepEqual( Stem("hof"), "hof" );
	deepEqual( Stem("hoff"), "hoff" );
	deepEqual( Stem("hog"), "hog" );
	deepEqual( Stem("hoggarty"), "hoggarti" );
	deepEqual( Stem("hogs"), "hog" );
	deepEqual( Stem("hogshead"), "hogshead" );
	deepEqual( Stem("hogsheads"), "hogshead" );
	deepEqual( Stem("hohenlaufen"), "hohenlaufen" );
	deepEqual( Stem("hois"), "hoi" );
	deepEqual( Stem("hoise"), "hois" );
	deepEqual( Stem("hoist"), "hoist" );
	deepEqual( Stem("hoisted"), "hoist" );
	deepEqual( Stem("hoists"), "hoist" );
	deepEqual( Stem("holborn"), "holborn" );
	deepEqual( Stem("hold"), "hold" );
	deepEqual( Stem("holden"), "holden" );
	deepEqual( Stem("holder"), "holder" );
	deepEqual( Stem("holdeth"), "holdeth" );
	deepEqual( Stem("holdfast"), "holdfast" );
	deepEqual( Stem("holding"), "hold" );
	deepEqual( Stem("holds"), "hold" );
	deepEqual( Stem("hole"), "hole" );
	deepEqual( Stem("holes"), "hole" );
	deepEqual( Stem("holidam"), "holidam" );
	deepEqual( Stem("holidame"), "holidam" );
	deepEqual( Stem("holiday"), "holidai" );
	deepEqual( Stem("holidays"), "holidai" );
	deepEqual( Stem("holier"), "holier" );
	deepEqual( Stem("holiest"), "holiest" );
	deepEqual( Stem("holily"), "holili" );
	deepEqual( Stem("holiness"), "holi" );
	deepEqual( Stem("holla"), "holla" );
	deepEqual( Stem("holland"), "holland" );
	deepEqual( Stem("hollander"), "holland" );
	deepEqual( Stem("hollanders"), "holland" );
	deepEqual( Stem("holloa"), "holloa" );
	deepEqual( Stem("holloaing"), "holloa" );
	deepEqual( Stem("hollow"), "hollow" );
	deepEqual( Stem("hollowly"), "hollowli" );
	deepEqual( Stem("hollowness"), "hollow" );
	deepEqual( Stem("holly"), "holli" );
	deepEqual( Stem("hollyock"), "hollyock" );
	deepEqual( Stem("holmedon"), "holmedon" );
	deepEqual( Stem("holofernes"), "holofern" );
	deepEqual( Stem("holp"), "holp" );
	deepEqual( Stem("holsters"), "holster" );
	deepEqual( Stem("holy"), "holi" );
	deepEqual( Stem("hom"), "hom" );
	deepEqual( Stem("homage"), "homag" );
	deepEqual( Stem("homager"), "homag" );
	deepEqual( Stem("home"), "home" );
	deepEqual( Stem("homely"), "home" );
	deepEqual( Stem("homer"), "homer" );
	deepEqual( Stem("homes"), "home" );
	deepEqual( Stem("homespuns"), "homespun" );
	deepEqual( Stem("homestead"), "homestead" );
	deepEqual( Stem("homesteads"), "homestead" );
	deepEqual( Stem("homeward"), "homeward" );
	deepEqual( Stem("homewards"), "homeward" );
	deepEqual( Stem("homicide"), "homicid" );
	deepEqual( Stem("homicides"), "homicid" );
	deepEqual( Stem("homilies"), "homili" );
	deepEqual( Stem("homily"), "homili" );
	deepEqual( Stem("hominem"), "hominem" );
	deepEqual( Stem("homlets"), "homlet" );
	deepEqual( Stem("homme"), "homm" );
	deepEqual( Stem("hommes"), "homm" );
	deepEqual( Stem("homo"), "homo" );
	deepEqual( Stem("hon"), "hon" );
	deepEqual( Stem("honest"), "honest" );
	deepEqual( Stem("honester"), "honest" );
	deepEqual( Stem("honestest"), "honestest" );
	deepEqual( Stem("honestly"), "honestli" );
	deepEqual( Stem("honesty"), "honesti" );
	deepEqual( Stem("honey"), "honei" );
	deepEqual( Stem("honeycomb"), "honeycomb" );
	deepEqual( Stem("honeying"), "honei" );
	deepEqual( Stem("honeyless"), "honeyless" );
	deepEqual( Stem("honeymoon"), "honeymoon" );
	deepEqual( Stem("honeysuckle"), "honeysuckl" );
	deepEqual( Stem("honeysuckles"), "honeysuckl" );
	deepEqual( Stem("honi"), "honi" );
	deepEqual( Stem("honneur"), "honneur" );
	deepEqual( Stem("honor"), "honor" );
	deepEqual( Stem("honorable"), "honor" );
	deepEqual( Stem("honorably"), "honor" );
	deepEqual( Stem("honorato"), "honorato" );
	deepEqual( Stem("honorificabilitudinitatibus"), "honorificabilitudinitatibu" );
	deepEqual( Stem("honors"), "honor" );
	deepEqual( Stem("honour"), "honour" );
	deepEqual( Stem("honourable"), "honour" );
	deepEqual( Stem("honourables"), "honour" );
	deepEqual( Stem("honourably"), "honour" );
	deepEqual( Stem("honoured"), "honour" );
	deepEqual( Stem("honourest"), "honourest" );
	deepEqual( Stem("honourible"), "honour" );
	deepEqual( Stem("honouring"), "honour" );
	deepEqual( Stem("honours"), "honour" );
	deepEqual( Stem("hoo"), "hoo" );
	deepEqual( Stem("hood"), "hood" );
	deepEqual( Stem("hooded"), "hood" );
	deepEqual( Stem("hoodman"), "hoodman" );
	deepEqual( Stem("hoods"), "hood" );
	deepEqual( Stem("hoodwink"), "hoodwink" );
	deepEqual( Stem("hoodwinked"), "hoodwink" );
	deepEqual( Stem("hoof"), "hoof" );
	deepEqual( Stem("hoofs"), "hoof" );
	deepEqual( Stem("hook"), "hook" );
	deepEqual( Stem("hookah"), "hookah" );
	deepEqual( Stem("hooked"), "hook" );
	deepEqual( Stem("hooking"), "hook" );
	deepEqual( Stem("hooks"), "hook" );
	deepEqual( Stem("hoop"), "hoop" );
	deepEqual( Stem("hooper"), "hooper" );
	deepEqual( Stem("hooping"), "hoop" );
	deepEqual( Stem("hoops"), "hoop" );
	deepEqual( Stem("hooray"), "hoorai" );
	deepEqual( Stem("hoot"), "hoot" );
	deepEqual( Stem("hooted"), "hoot" );
	deepEqual( Stem("hooting"), "hoot" );
	deepEqual( Stem("hoots"), "hoot" );
	deepEqual( Stem("hop"), "hop" );
	deepEqual( Stem("hope"), "hope" );
	deepEqual( Stem("hoped"), "hope" );
	deepEqual( Stem("hopeful"), "hope" );
	deepEqual( Stem("hopeless"), "hopeless" );
	deepEqual( Stem("hopelessly"), "hopelessli" );
	deepEqual( Stem("hopes"), "hope" );
	deepEqual( Stem("hopest"), "hopest" );
	deepEqual( Stem("hoping"), "hope" );
	deepEqual( Stem("hopkins"), "hopkin" );
	deepEqual( Stem("hoppedance"), "hopped" );
	deepEqual( Stem("hopping"), "hop" );
	deepEqual( Stem("hor"), "hor" );
	deepEqual( Stem("horace"), "horac" );
	deepEqual( Stem("horatio"), "horatio" );
	deepEqual( Stem("horizon"), "horizon" );
	deepEqual( Stem("horn"), "horn" );
	deepEqual( Stem("hornblower"), "hornblow" );
	deepEqual( Stem("hornbook"), "hornbook" );
	deepEqual( Stem("hornby"), "hornbi" );
	deepEqual( Stem("horned"), "horn" );
	deepEqual( Stem("horner"), "horner" );
	deepEqual( Stem("horning"), "horn" );
	deepEqual( Stem("hornpipes"), "hornpip" );
	deepEqual( Stem("horns"), "horn" );
	deepEqual( Stem("hornsey"), "hornsei" );
	deepEqual( Stem("horny"), "horni" );
	deepEqual( Stem("horologe"), "horolog" );
	deepEqual( Stem("horrible"), "horribl" );
	deepEqual( Stem("horribly"), "horribli" );
	deepEqual( Stem("horrid"), "horrid" );
	deepEqual( Stem("horrider"), "horrid" );
	deepEqual( Stem("horridly"), "horridli" );
	deepEqual( Stem("horrified"), "horrifi" );
	deepEqual( Stem("horrocks"), "horrock" );
	deepEqual( Stem("horror"), "horror" );
	deepEqual( Stem("horrors"), "horror" );
	deepEqual( Stem("horrud"), "horrud" );
	deepEqual( Stem("hors"), "hor" );
	deepEqual( Stem("horse"), "hors" );
	deepEqual( Stem("horseback"), "horseback" );
	deepEqual( Stem("horsed"), "hors" );
	deepEqual( Stem("horsehairs"), "horsehair" );
	deepEqual( Stem("horsejockey"), "horsejockei" );
	deepEqual( Stem("horseless"), "horseless" );
	deepEqual( Stem("horseman"), "horseman" );
	deepEqual( Stem("horsemanship"), "horsemanship" );
	deepEqual( Stem("horsemen"), "horsemen" );
	deepEqual( Stem("horses"), "hors" );
	deepEqual( Stem("horseway"), "horsewai" );
	deepEqual( Stem("horsewhip"), "horsewhip" );
	deepEqual( Stem("horsewhipped"), "horsewhip" );
	deepEqual( Stem("horsing"), "hors" );
	deepEqual( Stem("hortensio"), "hortensio" );
	deepEqual( Stem("hortensius"), "hortensiu" );
	deepEqual( Stem("horticultural"), "horticultur" );
	deepEqual( Stem("horum"), "horum" );
	deepEqual( Stem("hosbin"), "hosbin" );
	deepEqual( Stem("hose"), "hose" );
	deepEqual( Stem("hospitable"), "hospit" );
	deepEqual( Stem("hospital"), "hospit" );
	deepEqual( Stem("hospitalities"), "hospit" );
	deepEqual( Stem("hospitality"), "hospit" );
	deepEqual( Stem("hospitals"), "hospit" );
	deepEqual( Stem("hospodar"), "hospodar" );
	deepEqual( Stem("hoss"), "hoss" );
	deepEqual( Stem("hosses"), "hoss" );
	deepEqual( Stem("host"), "host" );
	deepEqual( Stem("hostage"), "hostag" );
	deepEqual( Stem("hostages"), "hostag" );
	deepEqual( Stem("hostess"), "hostess" );
	deepEqual( Stem("hostile"), "hostil" );
	deepEqual( Stem("hostilities"), "hostil" );
	deepEqual( Stem("hostility"), "hostil" );
	deepEqual( Stem("hostilius"), "hostiliu" );
	deepEqual( Stem("hosts"), "host" );
	deepEqual( Stem("hot"), "hot" );
	deepEqual( Stem("hote"), "hote" );
	deepEqual( Stem("hotel"), "hotel" );
	deepEqual( Stem("hotels"), "hotel" );
	deepEqual( Stem("hotly"), "hotli" );
	deepEqual( Stem("hotspur"), "hotspur" );
	deepEqual( Stem("hottentot"), "hottentot" );
	deepEqual( Stem("hotter"), "hotter" );
	deepEqual( Stem("hottest"), "hottest" );
	deepEqual( Stem("hoty"), "hoti" );
	deepEqual( Stem("hould"), "hould" );
	deepEqual( Stem("hound"), "hound" );
	deepEqual( Stem("hounds"), "hound" );
	deepEqual( Stem("houndsditch"), "houndsditch" );
	deepEqual( Stem("hour"), "hour" );
	deepEqual( Stem("houri"), "houri" );
	deepEqual( Stem("hourly"), "hourli" );
	deepEqual( Stem("hours"), "hour" );
	deepEqual( Stem("hous"), "hou" );
	deepEqual( Stem("house"), "hous" );
	deepEqual( Stem("housed"), "hous" );
	deepEqual( Stem("household"), "household" );
	deepEqual( Stem("householder"), "household" );
	deepEqual( Stem("householders"), "household" );
	deepEqual( Stem("households"), "household" );
	deepEqual( Stem("housekeeper"), "housekeep" );
	deepEqual( Stem("housekeepers"), "housekeep" );
	deepEqual( Stem("housekeeping"), "housekeep" );
	deepEqual( Stem("houseless"), "houseless" );
	deepEqual( Stem("housemaid"), "housemaid" );
	deepEqual( Stem("houses"), "hous" );
	deepEqual( Stem("housewife"), "housewif" );
	deepEqual( Stem("housewifery"), "housewiferi" );
	deepEqual( Stem("housewives"), "housew" );
	deepEqual( Stem("housings"), "hous" );
	deepEqual( Stem("hout"), "hout" );
	deepEqual( Stem("hovel"), "hovel" );
	deepEqual( Stem("hover"), "hover" );
	deepEqual( Stem("hovered"), "hover" );
	deepEqual( Stem("hovering"), "hover" );
	deepEqual( Stem("hovers"), "hover" );
	deepEqual( Stem("how"), "how" );
	deepEqual( Stem("howard"), "howard" );
	deepEqual( Stem("howbeit"), "howbeit" );
	deepEqual( Stem("howe"), "how" );
	deepEqual( Stem("howeer"), "howeer" );
	deepEqual( Stem("howell"), "howel" );
	deepEqual( Stem("however"), "howev" );
	deepEqual( Stem("howl"), "howl" );
	deepEqual( Stem("howled"), "howl" );
	deepEqual( Stem("howlet"), "howlet" );
	deepEqual( Stem("howling"), "howl" );
	deepEqual( Stem("howls"), "howl" );
	deepEqual( Stem("howsoe"), "howso" );
	deepEqual( Stem("howsoever"), "howsoev" );
	deepEqual( Stem("howsome"), "howsom" );
	deepEqual( Stem("hoxes"), "hox" );
	deepEqual( Stem("hoy"), "hoi" );
	deepEqual( Stem("hoyday"), "hoydai" );
	deepEqual( Stem("hozier"), "hozier" );
	deepEqual( Stem("hubert"), "hubert" );
	deepEqual( Stem("huckster"), "huckster" );
	deepEqual( Stem("huddled"), "huddl" );
	deepEqual( Stem("huddleston"), "huddleston" );
	deepEqual( Stem("huddlestone"), "huddleston" );
	deepEqual( Stem("huddlestons"), "huddleston" );
	deepEqual( Stem("huddling"), "huddl" );
	deepEqual( Stem("hue"), "hue" );
	deepEqual( Stem("hued"), "hu" );
	deepEqual( Stem("hues"), "hue" );
	deepEqual( Stem("huff"), "huff" );
	deepEqual( Stem("hug"), "hug" );
	deepEqual( Stem("huge"), "huge" );
	deepEqual( Stem("hugely"), "huge" );
	deepEqual( Stem("hugeness"), "huge" );
	deepEqual( Stem("hugest"), "hugest" );
	deepEqual( Stem("hugg"), "hugg" );
	deepEqual( Stem("hugger"), "hugger" );
	deepEqual( Stem("hugging"), "hug" );
	deepEqual( Stem("huggleton"), "huggleton" );
	deepEqual( Stem("hugh"), "hugh" );
	deepEqual( Stem("hugs"), "hug" );
	deepEqual( Stem("hugues"), "hugu" );
	deepEqual( Stem("hujus"), "huju" );
	deepEqual( Stem("hulk"), "hulk" );
	deepEqual( Stem("hulker"), "hulker" );
	deepEqual( Stem("hulkers"), "hulker" );
	deepEqual( Stem("hulking"), "hulk" );
	deepEqual( Stem("hulks"), "hulk" );
	deepEqual( Stem("hull"), "hull" );
	deepEqual( Stem("hulling"), "hull" );
	deepEqual( Stem("hullo"), "hullo" );
	deepEqual( Stem("hum"), "hum" );
	deepEqual( Stem("human"), "human" );
	deepEqual( Stem("humane"), "human" );
	deepEqual( Stem("humanely"), "human" );
	deepEqual( Stem("humanity"), "human" );
	deepEqual( Stem("humble"), "humbl" );
	deepEqual( Stem("humbled"), "humbl" );
	deepEqual( Stem("humbleness"), "humbl" );
	deepEqual( Stem("humbler"), "humbler" );
	deepEqual( Stem("humbles"), "humbl" );
	deepEqual( Stem("humblest"), "humblest" );
	deepEqual( Stem("humbling"), "humbl" );
	deepEqual( Stem("humbly"), "humbli" );
	deepEqual( Stem("humbourg"), "humbourg" );
	deepEqual( Stem("humbug"), "humbug" );
	deepEqual( Stem("humbugs"), "humbug" );
	deepEqual( Stem("humby"), "humbi" );
	deepEqual( Stem("humdrum"), "humdrum" );
	deepEqual( Stem("hume"), "hume" );
	deepEqual( Stem("humh"), "humh" );
	deepEqual( Stem("humidity"), "humid" );
	deepEqual( Stem("humiliate"), "humili" );
	deepEqual( Stem("humiliated"), "humili" );
	deepEqual( Stem("humiliation"), "humili" );
	deepEqual( Stem("humiliations"), "humili" );
	deepEqual( Stem("humility"), "humil" );
	deepEqual( Stem("humming"), "hum" );
	deepEqual( Stem("hummums"), "hummum" );
	deepEqual( Stem("humor"), "humor" );
	deepEqual( Stem("humorous"), "humor" );
	deepEqual( Stem("humors"), "humor" );
	deepEqual( Stem("humour"), "humour" );
	deepEqual( Stem("humoured"), "humour" );
	deepEqual( Stem("humouredly"), "humouredli" );
	deepEqual( Stem("humourists"), "humourist" );
	deepEqual( Stem("humours"), "humour" );
	deepEqual( Stem("hump"), "hump" );
	deepEqual( Stem("humph"), "humph" );
	deepEqual( Stem("humphrey"), "humphrei" );
	deepEqual( Stem("humphry"), "humphri" );
	deepEqual( Stem("hums"), "hum" );
	deepEqual( Stem("hundred"), "hundr" );
	deepEqual( Stem("hundreds"), "hundr" );
	deepEqual( Stem("hundredth"), "hundredth" );
	deepEqual( Stem("hung"), "hung" );
	deepEqual( Stem("hungarian"), "hungarian" );
	deepEqual( Stem("hungary"), "hungari" );
	deepEqual( Stem("hunger"), "hunger" );
	deepEqual( Stem("hungerford"), "hungerford" );
	deepEqual( Stem("hungerly"), "hungerli" );
	deepEqual( Stem("hungry"), "hungri" );
	deepEqual( Stem("hunt"), "hunt" );
	deepEqual( Stem("hunted"), "hunt" );
	deepEqual( Stem("hunter"), "hunter" );
	deepEqual( Stem("hunters"), "hunter" );
	deepEqual( Stem("hunteth"), "hunteth" );
	deepEqual( Stem("hunting"), "hunt" );
	deepEqual( Stem("huntington"), "huntington" );
	deepEqual( Stem("huntress"), "huntress" );
	deepEqual( Stem("hunts"), "hunt" );
	deepEqual( Stem("huntsman"), "huntsman" );
	deepEqual( Stem("huntsmen"), "huntsmen" );
	deepEqual( Stem("hupstarts"), "hupstart" );
	deepEqual( Stem("hurdle"), "hurdl" );
	deepEqual( Stem("hurl"), "hurl" );
	deepEqual( Stem("hurled"), "hurl" );
	deepEqual( Stem("hurling"), "hurl" );
	deepEqual( Stem("hurls"), "hurl" );
	deepEqual( Stem("hurly"), "hurli" );
	deepEqual( Stem("hurlyburly"), "hurlyburli" );
	deepEqual( Stem("hurrahing"), "hurrah" );
	deepEqual( Stem("hurray"), "hurrai" );
	deepEqual( Stem("hurraying"), "hurrai" );
	deepEqual( Stem("hurricano"), "hurricano" );
	deepEqual( Stem("hurricanoes"), "hurricano" );
	deepEqual( Stem("hurried"), "hurri" );
	deepEqual( Stem("hurriedly"), "hurriedli" );
	deepEqual( Stem("hurries"), "hurri" );
	deepEqual( Stem("hurry"), "hurri" );
	deepEqual( Stem("hurrying"), "hurri" );
	deepEqual( Stem("hurt"), "hurt" );
	deepEqual( Stem("hurting"), "hurt" );
	deepEqual( Stem("hurtled"), "hurtl" );
	deepEqual( Stem("hurtless"), "hurtless" );
	deepEqual( Stem("hurtling"), "hurtl" );
	deepEqual( Stem("hurts"), "hurt" );
	deepEqual( Stem("husband"), "husband" );
	deepEqual( Stem("husbanded"), "husband" );
	deepEqual( Stem("husbandless"), "husbandless" );
	deepEqual( Stem("husbandmen"), "husbandmen" );
	deepEqual( Stem("husbandry"), "husbandri" );
	deepEqual( Stem("husbands"), "husband" );
	deepEqual( Stem("hush"), "hush" );
	deepEqual( Stem("hushed"), "hush" );
	deepEqual( Stem("hushes"), "hush" );
	deepEqual( Stem("husht"), "husht" );
	deepEqual( Stem("husks"), "husk" );
	deepEqual( Stem("husky"), "huski" );
	deepEqual( Stem("hussar"), "hussar" );
	deepEqual( Stem("hussars"), "hussar" );
	deepEqual( Stem("hussy"), "hussi" );
	deepEqual( Stem("huswife"), "huswif" );
	deepEqual( Stem("huswifes"), "huswif" );
	deepEqual( Stem("hut"), "hut" );
	deepEqual( Stem("hutch"), "hutch" );
	deepEqual( Stem("hwhat"), "hwhat" );
	deepEqual( Stem("hybla"), "hybla" );
	deepEqual( Stem("hyde"), "hyde" );
	deepEqual( Stem("hydra"), "hydra" );
	deepEqual( Stem("hyen"), "hyen" );
	deepEqual( Stem("hyena"), "hyena" );
	deepEqual( Stem("hygeia"), "hygeia" );
	deepEqual( Stem("hymen"), "hymen" );
	deepEqual( Stem("hymenaeus"), "hymenaeu" );
	deepEqual( Stem("hymeneal"), "hymen" );
	deepEqual( Stem("hymn"), "hymn" );
	deepEqual( Stem("hymns"), "hymn" );
	deepEqual( Stem("hyperboles"), "hyperbol" );
	deepEqual( Stem("hyperbolical"), "hyperbol" );
	deepEqual( Stem("hyperion"), "hyperion" );
	deepEqual( Stem("hypocrisy"), "hypocrisi" );
	deepEqual( Stem("hypocrite"), "hypocrit" );
	deepEqual( Stem("hypocrites"), "hypocrit" );
	deepEqual( Stem("hypocritical"), "hypocrit" );
	deepEqual( Stem("hyrcan"), "hyrcan" );
	deepEqual( Stem("hyrcania"), "hyrcania" );
	deepEqual( Stem("hyrcanian"), "hyrcanian" );
	deepEqual( Stem("hyssop"), "hyssop" );
	deepEqual( Stem("hysteric"), "hyster" );
	deepEqual( Stem("hysterica"), "hysterica" );
	deepEqual( Stem("hysterical"), "hyster" );
	deepEqual( Stem("hysterically"), "hyster" );
	deepEqual( Stem("hysterics"), "hyster" );
	deepEqual( Stem("i"), "i" );
	deepEqual( Stem("iachimo"), "iachimo" );
	deepEqual( Stem("iaculis"), "iaculi" );
	deepEqual( Stem("iago"), "iago" );
	deepEqual( Stem("iament"), "iament" );
	deepEqual( Stem("ibat"), "ibat" );
	deepEqual( Stem("icarus"), "icaru" );
	deepEqual( Stem("ice"), "ic" );
	deepEqual( Stem("iced"), "ic" );
	deepEqual( Stem("iceland"), "iceland" );
	deepEqual( Stem("ices"), "ic" );
	deepEqual( Stem("ich"), "ich" );
	deepEqual( Stem("ici"), "ici" );
	deepEqual( Stem("icicle"), "icicl" );
	deepEqual( Stem("icicles"), "icicl" );
	deepEqual( Stem("icy"), "ici" );
	deepEqual( Stem("ida"), "ida" );
	deepEqual( Stem("idea"), "idea" );
	deepEqual( Stem("ideal"), "ideal" );
	deepEqual( Stem("ideas"), "idea" );
	deepEqual( Stem("idem"), "idem" );
	deepEqual( Stem("iden"), "iden" );
	deepEqual( Stem("identical"), "ident" );
	deepEqual( Stem("ides"), "id" );
	deepEqual( Stem("idiom"), "idiom" );
	deepEqual( Stem("idiot"), "idiot" );
	deepEqual( Stem("idiots"), "idiot" );
	deepEqual( Stem("idle"), "idl" );
	deepEqual( Stem("idled"), "idl" );
	deepEqual( Stem("idleness"), "idl" );
	deepEqual( Stem("idlers"), "idler" );
	deepEqual( Stem("idles"), "idl" );
	deepEqual( Stem("idly"), "idli" );
	deepEqual( Stem("idol"), "idol" );
	deepEqual( Stem("idolatrous"), "idolatr" );
	deepEqual( Stem("idolatry"), "idolatri" );
	deepEqual( Stem("idolizes"), "idol" );
	deepEqual( Stem("idols"), "idol" );
	deepEqual( Stem("ied"), "i" );
	deepEqual( Stem("ield"), "ield" );
	deepEqual( Stem("if"), "if" );
	deepEqual( Stem("iffley"), "ifflei" );
	deepEqual( Stem("ifs"), "if" );
	deepEqual( Stem("ignis"), "igni" );
	deepEqual( Stem("ignoble"), "ignobl" );
	deepEqual( Stem("ignobly"), "ignobli" );
	deepEqual( Stem("ignominious"), "ignomini" );
	deepEqual( Stem("ignominy"), "ignomini" );
	deepEqual( Stem("ignomy"), "ignomi" );
	deepEqual( Stem("ignorance"), "ignor" );
	deepEqual( Stem("ignorant"), "ignor" );
	deepEqual( Stem("ignore"), "ignor" );
	deepEqual( Stem("ignored"), "ignor" );
	deepEqual( Stem("ii"), "ii" );
	deepEqual( Stem("iii"), "iii" );
	deepEqual( Stem("iiii"), "iiii" );
	deepEqual( Stem("il"), "il" );
	deepEqual( Stem("ilbow"), "ilbow" );
	deepEqual( Stem("ild"), "ild" );
	deepEqual( Stem("ilion"), "ilion" );
	deepEqual( Stem("ilium"), "ilium" );
	deepEqual( Stem("ill"), "ill" );
	deepEqual( Stem("illegibility"), "illeg" );
	deepEqual( Stem("illegitimate"), "illegitim" );
	deepEqual( Stem("illiterate"), "illiter" );
	deepEqual( Stem("illness"), "ill" );
	deepEqual( Stem("illnesses"), "ill" );
	deepEqual( Stem("illo"), "illo" );
	deepEqual( Stem("ills"), "ill" );
	deepEqual( Stem("illume"), "illum" );
	deepEqual( Stem("illumin"), "illumin" );
	deepEqual( Stem("illuminate"), "illumin" );
	deepEqual( Stem("illuminated"), "illumin" );
	deepEqual( Stem("illumination"), "illumin" );
	deepEqual( Stem("illuminations"), "illumin" );
	deepEqual( Stem("illumineth"), "illumineth" );
	deepEqual( Stem("illusion"), "illus" );
	deepEqual( Stem("illusions"), "illus" );
	deepEqual( Stem("illustrate"), "illustr" );
	deepEqual( Stem("illustrated"), "illustr" );
	deepEqual( Stem("illustrative"), "illustr" );
	deepEqual( Stem("illustrious"), "illustri" );
	deepEqual( Stem("illyria"), "illyria" );
	deepEqual( Stem("illyrian"), "illyrian" );
	deepEqual( Stem("ils"), "il" );
	deepEqual( Stem("ilyssus"), "ilyssu" );
	deepEqual( Stem("im"), "im" );
	deepEqual( Stem("image"), "imag" );
	deepEqual( Stem("imagery"), "imageri" );
	deepEqual( Stem("images"), "imag" );
	deepEqual( Stem("imagin"), "imagin" );
	deepEqual( Stem("imaginable"), "imagin" );
	deepEqual( Stem("imaginary"), "imaginari" );
	deepEqual( Stem("imagination"), "imagin" );
	deepEqual( Stem("imaginations"), "imagin" );
	deepEqual( Stem("imagine"), "imagin" );
	deepEqual( Stem("imagined"), "imagin" );
	deepEqual( Stem("imagining"), "imagin" );
	deepEqual( Stem("imaginings"), "imagin" );
	deepEqual( Stem("imbar"), "imbar" );
	deepEqual( Stem("imbecility"), "imbecil" );
	deepEqual( Stem("imbibed"), "imbib" );
	deepEqual( Stem("imbibing"), "imbib" );
	deepEqual( Stem("imbrue"), "imbru" );
	deepEqual( Stem("imitari"), "imitari" );
	deepEqual( Stem("imitate"), "imit" );
	deepEqual( Stem("imitated"), "imit" );
	deepEqual( Stem("imitating"), "imit" );
	deepEqual( Stem("imitation"), "imit" );
	deepEqual( Stem("imitations"), "imit" );
	deepEqual( Stem("immaculate"), "immacul" );
	deepEqual( Stem("immanity"), "imman" );
	deepEqual( Stem("immask"), "immask" );
	deepEqual( Stem("immaterial"), "immateri" );
	deepEqual( Stem("immeasurably"), "immeasur" );
	deepEqual( Stem("immediacy"), "immediaci" );
	deepEqual( Stem("immediate"), "immedi" );
	deepEqual( Stem("immediately"), "immedi" );
	deepEqual( Stem("immemorial"), "immemori" );
	deepEqual( Stem("immense"), "immens" );
	deepEqual( Stem("immensely"), "immens" );
	deepEqual( Stem("immersed"), "immers" );
	deepEqual( Stem("imminence"), "immin" );
	deepEqual( Stem("imminent"), "immin" );
	deepEqual( Stem("immoderate"), "immoder" );
	deepEqual( Stem("immoderately"), "immoder" );
	deepEqual( Stem("immodest"), "immodest" );
	deepEqual( Stem("immolating"), "immol" );
	deepEqual( Stem("immoment"), "immoment" );
	deepEqual( Stem("immoral"), "immor" );
	deepEqual( Stem("immoralist"), "immoralist" );
	deepEqual( Stem("immortal"), "immort" );
	deepEqual( Stem("immortaliz"), "immortaliz" );
	deepEqual( Stem("immortally"), "immort" );
	deepEqual( Stem("immur"), "immur" );
	deepEqual( Stem("immured"), "immur" );
	deepEqual( Stem("immures"), "immur" );
	deepEqual( Stem("imogen"), "imogen" );
	deepEqual( Stem("imp"), "imp" );
	deepEqual( Stem("impaint"), "impaint" );
	deepEqual( Stem("impair"), "impair" );
	deepEqual( Stem("impaired"), "impair" );
	deepEqual( Stem("impairing"), "impair" );
	deepEqual( Stem("impale"), "impal" );
	deepEqual( Stem("impaled"), "impal" );
	deepEqual( Stem("impanelled"), "impanel" );
	deepEqual( Stem("impart"), "impart" );
	deepEqual( Stem("imparted"), "impart" );
	deepEqual( Stem("impartial"), "imparti" );
	deepEqual( Stem("impartment"), "impart" );
	deepEqual( Stem("imparts"), "impart" );
	deepEqual( Stem("impassable"), "impass" );
	deepEqual( Stem("impasted"), "impast" );
	deepEqual( Stem("impatience"), "impati" );
	deepEqual( Stem("impatient"), "impati" );
	deepEqual( Stem("impatiently"), "impati" );
	deepEqual( Stem("impawn"), "impawn" );
	deepEqual( Stem("impeach"), "impeach" );
	deepEqual( Stem("impeached"), "impeach" );
	deepEqual( Stem("impeachment"), "impeach" );
	deepEqual( Stem("impeachments"), "impeach" );
	deepEqual( Stem("impedes"), "imped" );
	deepEqual( Stem("impediment"), "impedi" );
	deepEqual( Stem("impediments"), "impedi" );
	deepEqual( Stem("impending"), "impend" );
	deepEqual( Stem("impenetrable"), "impenetr" );
	deepEqual( Stem("imperative"), "imper" );
	deepEqual( Stem("imperator"), "imper" );
	deepEqual( Stem("imperceiverant"), "imperceiver" );
	deepEqual( Stem("imperfect"), "imperfect" );
	deepEqual( Stem("imperfection"), "imperfect" );
	deepEqual( Stem("imperfections"), "imperfect" );
	deepEqual( Stem("imperfectly"), "imperfectli" );
	deepEqual( Stem("imperial"), "imperi" );
	deepEqual( Stem("imperials"), "imperi" );
	deepEqual( Stem("imperious"), "imperi" );
	deepEqual( Stem("imperiously"), "imperi" );
	deepEqual( Stem("imperiousness"), "imperi" );
	deepEqual( Stem("impertinence"), "impertin" );
	deepEqual( Stem("impertinences"), "impertin" );
	deepEqual( Stem("impertinency"), "impertin" );
	deepEqual( Stem("impertinent"), "impertin" );
	deepEqual( Stem("impeticos"), "impetico" );
	deepEqual( Stem("impetuosity"), "impetuos" );
	deepEqual( Stem("impetuous"), "impetu" );
	deepEqual( Stem("impetuously"), "impetu" );
	deepEqual( Stem("impieties"), "impieti" );
	deepEqual( Stem("impiety"), "impieti" );
	deepEqual( Stem("impious"), "impiou" );
	deepEqual( Stem("impiously"), "impious" );
	deepEqual( Stem("implacable"), "implac" );
	deepEqual( Stem("implement"), "implement" );
	deepEqual( Stem("implements"), "implement" );
	deepEqual( Stem("implicated"), "implic" );
	deepEqual( Stem("implicitly"), "implicitli" );
	deepEqual( Stem("implies"), "impli" );
	deepEqual( Stem("implor"), "implor" );
	deepEqual( Stem("implorators"), "implor" );
	deepEqual( Stem("implore"), "implor" );
	deepEqual( Stem("implored"), "implor" );
	deepEqual( Stem("imploring"), "implor" );
	deepEqual( Stem("imploringly"), "imploringli" );
	deepEqual( Stem("impon"), "impon" );
	deepEqual( Stem("import"), "import" );
	deepEqual( Stem("importance"), "import" );
	deepEqual( Stem("importancy"), "import" );
	deepEqual( Stem("important"), "import" );
	deepEqual( Stem("importantly"), "importantli" );
	deepEqual( Stem("imported"), "import" );
	deepEqual( Stem("importeth"), "importeth" );
	deepEqual( Stem("importing"), "import" );
	deepEqual( Stem("importless"), "importless" );
	deepEqual( Stem("imports"), "import" );
	deepEqual( Stem("importun"), "importun" );
	deepEqual( Stem("importunacy"), "importunaci" );
	deepEqual( Stem("importunate"), "importun" );
	deepEqual( Stem("importune"), "importun" );
	deepEqual( Stem("importunes"), "importun" );
	deepEqual( Stem("importunity"), "importun" );
	deepEqual( Stem("impos"), "impo" );
	deepEqual( Stem("impose"), "impos" );
	deepEqual( Stem("imposed"), "impos" );
	deepEqual( Stem("imposing"), "impos" );
	deepEqual( Stem("imposition"), "imposit" );
	deepEqual( Stem("impositions"), "imposit" );
	deepEqual( Stem("impossibilities"), "imposs" );
	deepEqual( Stem("impossibility"), "imposs" );
	deepEqual( Stem("impossible"), "imposs" );
	deepEqual( Stem("imposter"), "impost" );
	deepEqual( Stem("imposthume"), "imposthum" );
	deepEqual( Stem("impostor"), "impostor" );
	deepEqual( Stem("impostors"), "impostor" );
	deepEqual( Stem("impotence"), "impot" );
	deepEqual( Stem("impotent"), "impot" );
	deepEqual( Stem("impounded"), "impound" );
	deepEqual( Stem("impoverish"), "impoverish" );
	deepEqual( Stem("impracticable"), "impractic" );
	deepEqual( Stem("imprecations"), "imprec" );
	deepEqual( Stem("impregnable"), "impregn" );
	deepEqual( Stem("imprese"), "impres" );
	deepEqual( Stem("impress"), "impress" );
	deepEqual( Stem("impressed"), "impress" );
	deepEqual( Stem("impressest"), "impressest" );
	deepEqual( Stem("impression"), "impress" );
	deepEqual( Stem("impressions"), "impress" );
	deepEqual( Stem("impressive"), "impress" );
	deepEqual( Stem("impressure"), "impressur" );
	deepEqual( Stem("imprimendum"), "imprimendum" );
	deepEqual( Stem("imprimis"), "imprimi" );
	deepEqual( Stem("imprint"), "imprint" );
	deepEqual( Stem("imprinted"), "imprint" );
	deepEqual( Stem("imprison"), "imprison" );
	deepEqual( Stem("imprisoned"), "imprison" );
	deepEqual( Stem("imprisoning"), "imprison" );
	deepEqual( Stem("imprisonment"), "imprison" );
	deepEqual( Stem("improbable"), "improb" );
	deepEqual( Stem("improper"), "improp" );
	deepEqual( Stem("improve"), "improv" );
	deepEqual( Stem("improved"), "improv" );
	deepEqual( Stem("improvements"), "improv" );
	deepEqual( Stem("improvidence"), "improvid" );
	deepEqual( Stem("improvident"), "improvid" );
	deepEqual( Stem("imprudence"), "imprud" );
	deepEqual( Stem("imprudences"), "imprud" );
	deepEqual( Stem("imprudent"), "imprud" );
	deepEqual( Stem("impudence"), "impud" );
	deepEqual( Stem("impudency"), "impud" );
	deepEqual( Stem("impudent"), "impud" );
	deepEqual( Stem("impudently"), "impud" );
	deepEqual( Stem("impudique"), "impudiqu" );
	deepEqual( Stem("impugn"), "impugn" );
	deepEqual( Stem("impugns"), "impugn" );
	deepEqual( Stem("impulse"), "impuls" );
	deepEqual( Stem("impure"), "impur" );
	deepEqual( Stem("imputation"), "imput" );
	deepEqual( Stem("impute"), "imput" );
	deepEqual( Stem("in"), "in" );
	deepEqual( Stem("inaccessible"), "inaccess" );
	deepEqual( Stem("inaidable"), "inaid" );
	deepEqual( Stem("inamorato"), "inamorato" );
	deepEqual( Stem("inarticulate"), "inarticul" );
	deepEqual( Stem("inarticulately"), "inarticul" );
	deepEqual( Stem("inattention"), "inattent" );
	deepEqual( Stem("inaudible"), "inaud" );
	deepEqual( Stem("inauspicious"), "inauspici" );
	deepEqual( Stem("incaged"), "incag" );
	deepEqual( Stem("incantations"), "incant" );
	deepEqual( Stem("incapable"), "incap" );
	deepEqual( Stem("incapacitate"), "incapacit" );
	deepEqual( Stem("incapacity"), "incapac" );
	deepEqual( Stem("incardinate"), "incardin" );
	deepEqual( Stem("incarnadine"), "incarnadin" );
	deepEqual( Stem("incarnate"), "incarn" );
	deepEqual( Stem("incarnation"), "incarn" );
	deepEqual( Stem("incens"), "incen" );
	deepEqual( Stem("incense"), "incens" );
	deepEqual( Stem("incensed"), "incens" );
	deepEqual( Stem("incensement"), "incens" );
	deepEqual( Stem("incenses"), "incens" );
	deepEqual( Stem("incensing"), "incens" );
	deepEqual( Stem("incentive"), "incent" );
	deepEqual( Stem("incertain"), "incertain" );
	deepEqual( Stem("incertainties"), "incertainti" );
	deepEqual( Stem("incertainty"), "incertainti" );
	deepEqual( Stem("incessant"), "incess" );
	deepEqual( Stem("incessantly"), "incessantli" );
	deepEqual( Stem("incest"), "incest" );
	deepEqual( Stem("incestuous"), "incestu" );
	deepEqual( Stem("inch"), "inch" );
	deepEqual( Stem("incharitable"), "incharit" );
	deepEqual( Stem("inches"), "inch" );
	deepEqual( Stem("incidency"), "incid" );
	deepEqual( Stem("incident"), "incid" );
	deepEqual( Stem("incidents"), "incid" );
	deepEqual( Stem("incision"), "incis" );
	deepEqual( Stem("incite"), "incit" );
	deepEqual( Stem("incited"), "incit" );
	deepEqual( Stem("incites"), "incit" );
	deepEqual( Stem("incivil"), "incivil" );
	deepEqual( Stem("incivility"), "incivil" );
	deepEqual( Stem("inclin"), "inclin" );
	deepEqual( Stem("inclinable"), "inclin" );
	deepEqual( Stem("inclination"), "inclin" );
	deepEqual( Stem("incline"), "inclin" );
	deepEqual( Stem("inclined"), "inclin" );
	deepEqual( Stem("inclines"), "inclin" );
	deepEqual( Stem("inclining"), "inclin" );
	deepEqual( Stem("inclips"), "inclip" );
	deepEqual( Stem("inclosed"), "inclos" );
	deepEqual( Stem("inclosure"), "inclosur" );
	deepEqual( Stem("include"), "includ" );
	deepEqual( Stem("included"), "includ" );
	deepEqual( Stem("includes"), "includ" );
	deepEqual( Stem("including"), "includ" );
	deepEqual( Stem("inclusive"), "inclus" );
	deepEqual( Stem("incoherent"), "incoher" );
	deepEqual( Stem("incoherently"), "incoher" );
	deepEqual( Stem("income"), "incom" );
	deepEqual( Stem("incomings"), "incom" );
	deepEqual( Stem("incomparable"), "incompar" );
	deepEqual( Stem("incomparably"), "incompar" );
	deepEqual( Stem("incompetency"), "incompet" );
	deepEqual( Stem("incomplete"), "incomplet" );
	deepEqual( Stem("incomprehensible"), "incomprehens" );
	deepEqual( Stem("incongruous"), "incongru" );
	deepEqual( Stem("inconsiderate"), "inconsider" );
	deepEqual( Stem("inconstancy"), "inconst" );
	deepEqual( Stem("inconstant"), "inconst" );
	deepEqual( Stem("incontinency"), "incontin" );
	deepEqual( Stem("incontinent"), "incontin" );
	deepEqual( Stem("incontinently"), "incontin" );
	deepEqual( Stem("inconvenience"), "inconveni" );
	deepEqual( Stem("inconvenienced"), "inconvenienc" );
	deepEqual( Stem("inconveniences"), "inconveni" );
	deepEqual( Stem("inconvenient"), "inconveni" );
	deepEqual( Stem("incony"), "inconi" );
	deepEqual( Stem("incorporate"), "incorpor" );
	deepEqual( Stem("incorps"), "incorp" );
	deepEqual( Stem("incorrect"), "incorrect" );
	deepEqual( Stem("incorrectness"), "incorrect" );
	deepEqual( Stem("incorrigible"), "incorrig" );
	deepEqual( Stem("increas"), "increa" );
	deepEqual( Stem("increase"), "increas" );
	deepEqual( Stem("increased"), "increas" );
	deepEqual( Stem("increases"), "increas" );
	deepEqual( Stem("increaseth"), "increaseth" );
	deepEqual( Stem("increasing"), "increas" );
	deepEqual( Stem("incredible"), "incred" );
	deepEqual( Stem("incredulity"), "incredul" );
	deepEqual( Stem("incredulous"), "incredul" );
	deepEqual( Stem("inculcated"), "inculc" );
	deepEqual( Stem("incumbent"), "incumb" );
	deepEqual( Stem("incumbrances"), "incumbr" );
	deepEqual( Stem("incur"), "incur" );
	deepEqual( Stem("incurable"), "incur" );
	deepEqual( Stem("incurr"), "incurr" );
	deepEqual( Stem("incurred"), "incur" );
	deepEqual( Stem("incurring"), "incur" );
	deepEqual( Stem("incursions"), "incurs" );
	deepEqual( Stem("ind"), "ind" );
	deepEqual( Stem("inde"), "ind" );
	deepEqual( Stem("indebted"), "indebt" );
	deepEqual( Stem("indecent"), "indec" );
	deepEqual( Stem("indecorous"), "indecor" );
	deepEqual( Stem("indeed"), "inde" );
	deepEqual( Stem("indefatigable"), "indefatig" );
	deepEqual( Stem("indefinite"), "indefinit" );
	deepEqual( Stem("indelible"), "indel" );
	deepEqual( Stem("indent"), "indent" );
	deepEqual( Stem("indented"), "indent" );
	deepEqual( Stem("indenture"), "indentur" );
	deepEqual( Stem("indentures"), "indentur" );
	deepEqual( Stem("independence"), "independ" );
	deepEqual( Stem("independent"), "independ" );
	deepEqual( Stem("indescribably"), "indescrib" );
	deepEqual( Stem("index"), "index" );
	deepEqual( Stem("indexes"), "index" );
	deepEqual( Stem("india"), "india" );
	deepEqual( Stem("indiaman"), "indiaman" );
	deepEqual( Stem("indian"), "indian" );
	deepEqual( Stem("indians"), "indian" );
	deepEqual( Stem("indicate"), "indic" );
	deepEqual( Stem("indicated"), "indic" );
	deepEqual( Stem("indicative"), "indic" );
	deepEqual( Stem("indict"), "indict" );
	deepEqual( Stem("indicted"), "indict" );
	deepEqual( Stem("indictment"), "indict" );
	deepEqual( Stem("indies"), "indi" );
	deepEqual( Stem("indifference"), "indiffer" );
	deepEqual( Stem("indifferency"), "indiffer" );
	deepEqual( Stem("indifferent"), "indiffer" );
	deepEqual( Stem("indifferently"), "indiffer" );
	deepEqual( Stem("indigent"), "indig" );
	deepEqual( Stem("indigest"), "indigest" );
	deepEqual( Stem("indigested"), "indigest" );
	deepEqual( Stem("indign"), "indign" );
	deepEqual( Stem("indignant"), "indign" );
	deepEqual( Stem("indignantly"), "indignantli" );
	deepEqual( Stem("indignation"), "indign" );
	deepEqual( Stem("indignations"), "indign" );
	deepEqual( Stem("indigne"), "indign" );
	deepEqual( Stem("indignities"), "indign" );
	deepEqual( Stem("indignity"), "indign" );
	deepEqual( Stem("indirect"), "indirect" );
	deepEqual( Stem("indirection"), "indirect" );
	deepEqual( Stem("indirections"), "indirect" );
	deepEqual( Stem("indirectly"), "indirectli" );
	deepEqual( Stem("indiscreet"), "indiscreet" );
	deepEqual( Stem("indiscreetly"), "indiscreetli" );
	deepEqual( Stem("indiscretion"), "indiscret" );
	deepEqual( Stem("indispos"), "indispo" );
	deepEqual( Stem("indisposed"), "indispos" );
	deepEqual( Stem("indisposition"), "indisposit" );
	deepEqual( Stem("indisputable"), "indisput" );
	deepEqual( Stem("indissoluble"), "indissolubl" );
	deepEqual( Stem("indistinct"), "indistinct" );
	deepEqual( Stem("indistinguish"), "indistinguish" );
	deepEqual( Stem("indistinguishable"), "indistinguish" );
	deepEqual( Stem("indited"), "indit" );
	deepEqual( Stem("individable"), "individ" );
	deepEqual( Stem("individual"), "individu" );
	deepEqual( Stem("indolence"), "indol" );
	deepEqual( Stem("indolent"), "indol" );
	deepEqual( Stem("indomitable"), "indomit" );
	deepEqual( Stem("indrench"), "indrench" );
	deepEqual( Stem("indu"), "indu" );
	deepEqual( Stem("indubitate"), "indubit" );
	deepEqual( Stem("induc"), "induc" );
	deepEqual( Stem("induce"), "induc" );
	deepEqual( Stem("induced"), "induc" );
	deepEqual( Stem("inducement"), "induc" );
	deepEqual( Stem("induces"), "induc" );
	deepEqual( Stem("inducted"), "induct" );
	deepEqual( Stem("induction"), "induct" );
	deepEqual( Stem("inductions"), "induct" );
	deepEqual( Stem("indue"), "indu" );
	deepEqual( Stem("indued"), "indu" );
	deepEqual( Stem("indues"), "indu" );
	deepEqual( Stem("indulge"), "indulg" );
	deepEqual( Stem("indulged"), "indulg" );
	deepEqual( Stem("indulgence"), "indulg" );
	deepEqual( Stem("indulgences"), "indulg" );
	deepEqual( Stem("indulgent"), "indulg" );
	deepEqual( Stem("indulgently"), "indulg" );
	deepEqual( Stem("indulging"), "indulg" );
	deepEqual( Stem("indurance"), "indur" );
	deepEqual( Stem("industrious"), "industri" );
	deepEqual( Stem("industriously"), "industri" );
	deepEqual( Stem("industry"), "industri" );
	deepEqual( Stem("inebriated"), "inebri" );
	deepEqual( Stem("inequality"), "inequ" );
	deepEqual( Stem("inestimable"), "inestim" );
	deepEqual( Stem("inevitable"), "inevit" );
	deepEqual( Stem("inevitably"), "inevit" );
	deepEqual( Stem("inexecrable"), "inexecr" );
	deepEqual( Stem("inexorable"), "inexor" );
	deepEqual( Stem("inexperienced"), "inexperienc" );
	deepEqual( Stem("inexplicable"), "inexplic" );
	deepEqual( Stem("inexpressible"), "inexpress" );
	deepEqual( Stem("inexpressibly"), "inexpressibli" );
	deepEqual( Stem("infallible"), "infal" );
	deepEqual( Stem("infallibly"), "infallibli" );
	deepEqual( Stem("infames"), "infam" );
	deepEqual( Stem("infamonize"), "infamon" );
	deepEqual( Stem("infamous"), "infam" );
	deepEqual( Stem("infamously"), "infam" );
	deepEqual( Stem("infamy"), "infami" );
	deepEqual( Stem("infancy"), "infanc" );
	deepEqual( Stem("infant"), "infant" );
	deepEqual( Stem("infantine"), "infantin" );
	deepEqual( Stem("infantry"), "infantri" );
	deepEqual( Stem("infants"), "infant" );
	deepEqual( Stem("infatuated"), "infatu" );
	deepEqual( Stem("infatuation"), "infatu" );
	deepEqual( Stem("infatyated"), "infaty" );
	deepEqual( Stem("infect"), "infect" );
	deepEqual( Stem("infected"), "infect" );
	deepEqual( Stem("infecting"), "infect" );
	deepEqual( Stem("infection"), "infect" );
	deepEqual( Stem("infections"), "infect" );
	deepEqual( Stem("infectious"), "infecti" );
	deepEqual( Stem("infectiously"), "infecti" );
	deepEqual( Stem("infects"), "infect" );
	deepEqual( Stem("infer"), "infer" );
	deepEqual( Stem("inference"), "infer" );
	deepEqual( Stem("inferior"), "inferior" );
	deepEqual( Stem("inferiors"), "inferior" );
	deepEqual( Stem("infernal"), "infern" );
	deepEqual( Stem("inferr"), "inferr" );
	deepEqual( Stem("inferred"), "infer" );
	deepEqual( Stem("inferreth"), "inferreth" );
	deepEqual( Stem("inferring"), "infer" );
	deepEqual( Stem("infest"), "infest" );
	deepEqual( Stem("infidel"), "infidel" );
	deepEqual( Stem("infidels"), "infidel" );
	deepEqual( Stem("infinite"), "infinit" );
	deepEqual( Stem("infinitely"), "infinit" );
	deepEqual( Stem("infinitive"), "infinit" );
	deepEqual( Stem("infinity"), "infin" );
	deepEqual( Stem("infirm"), "infirm" );
	deepEqual( Stem("infirmities"), "infirm" );
	deepEqual( Stem("infirmity"), "infirm" );
	deepEqual( Stem("infixed"), "infix" );
	deepEqual( Stem("infixing"), "infix" );
	deepEqual( Stem("inflam"), "inflam" );
	deepEqual( Stem("inflame"), "inflam" );
	deepEqual( Stem("inflamed"), "inflam" );
	deepEqual( Stem("inflaming"), "inflam" );
	deepEqual( Stem("inflammation"), "inflamm" );
	deepEqual( Stem("inflammatory"), "inflammatori" );
	deepEqual( Stem("inflection"), "inflect" );
	deepEqual( Stem("inflict"), "inflict" );
	deepEqual( Stem("inflicted"), "inflict" );
	deepEqual( Stem("infliction"), "inflict" );
	deepEqual( Stem("influence"), "influenc" );
	deepEqual( Stem("influenced"), "influenc" );
	deepEqual( Stem("influences"), "influenc" );
	deepEqual( Stem("infold"), "infold" );
	deepEqual( Stem("inform"), "inform" );
	deepEqual( Stem("informal"), "inform" );
	deepEqual( Stem("informant"), "inform" );
	deepEqual( Stem("informants"), "inform" );
	deepEqual( Stem("information"), "inform" );
	deepEqual( Stem("informations"), "inform" );
	deepEqual( Stem("informed"), "inform" );
	deepEqual( Stem("informer"), "inform" );
	deepEqual( Stem("informing"), "inform" );
	deepEqual( Stem("informs"), "inform" );
	deepEqual( Stem("infortunate"), "infortun" );
	deepEqual( Stem("infring"), "infr" );
	deepEqual( Stem("infringe"), "infring" );
	deepEqual( Stem("infringed"), "infring" );
	deepEqual( Stem("infuriate"), "infuri" );
	deepEqual( Stem("infuriated"), "infuri" );
	deepEqual( Stem("infus"), "infu" );
	deepEqual( Stem("infuse"), "infus" );
	deepEqual( Stem("infused"), "infus" );
	deepEqual( Stem("infusing"), "infus" );
	deepEqual( Stem("infusion"), "infus" );
	deepEqual( Stem("ingener"), "ingen" );
	deepEqual( Stem("ingenious"), "ingeni" );
	deepEqual( Stem("ingeniously"), "ingeni" );
	deepEqual( Stem("ingens"), "ingen" );
	deepEqual( Stem("ingenue"), "ingenu" );
	deepEqual( Stem("ingenuity"), "ingenu" );
	deepEqual( Stem("ingenuous"), "ingenu" );
	deepEqual( Stem("ingenuousness"), "ingenu" );
	deepEqual( Stem("inglorious"), "inglori" );
	deepEqual( Stem("ingots"), "ingot" );
	deepEqual( Stem("ingraffed"), "ingraf" );
	deepEqual( Stem("ingraft"), "ingraft" );
	deepEqual( Stem("ingrate"), "ingrat" );
	deepEqual( Stem("ingrated"), "ingrat" );
	deepEqual( Stem("ingrateful"), "ingrat" );
	deepEqual( Stem("ingratiated"), "ingrati" );
	deepEqual( Stem("ingratitude"), "ingratitud" );
	deepEqual( Stem("ingratitudes"), "ingratitud" );
	deepEqual( Stem("ingredient"), "ingredi" );
	deepEqual( Stem("ingredients"), "ingredi" );
	deepEqual( Stem("ingross"), "ingross" );
	deepEqual( Stem("inhabit"), "inhabit" );
	deepEqual( Stem("inhabitable"), "inhabit" );
	deepEqual( Stem("inhabitant"), "inhabit" );
	deepEqual( Stem("inhabitants"), "inhabit" );
	deepEqual( Stem("inhabited"), "inhabit" );
	deepEqual( Stem("inhabits"), "inhabit" );
	deepEqual( Stem("inhaling"), "inhal" );
	deepEqual( Stem("inhearse"), "inhears" );
	deepEqual( Stem("inhearsed"), "inhears" );
	deepEqual( Stem("inherent"), "inher" );
	deepEqual( Stem("inherit"), "inherit" );
	deepEqual( Stem("inheritance"), "inherit" );
	deepEqual( Stem("inherited"), "inherit" );
	deepEqual( Stem("inheriting"), "inherit" );
	deepEqual( Stem("inheritor"), "inheritor" );
	deepEqual( Stem("inheritors"), "inheritor" );
	deepEqual( Stem("inheritrix"), "inheritrix" );
	deepEqual( Stem("inherits"), "inherit" );
	deepEqual( Stem("inhibited"), "inhibit" );
	deepEqual( Stem("inhibition"), "inhibit" );
	deepEqual( Stem("inhoop"), "inhoop" );
	deepEqual( Stem("inhuman"), "inhuman" );
	deepEqual( Stem("inimical"), "inim" );
	deepEqual( Stem("iniquities"), "iniqu" );
	deepEqual( Stem("iniquity"), "iniqu" );
	deepEqual( Stem("initials"), "initi" );
	deepEqual( Stem("initiate"), "initi" );
	deepEqual( Stem("initiated"), "initi" );
	deepEqual( Stem("injee"), "inje" );
	deepEqual( Stem("injointed"), "injoint" );
	deepEqual( Stem("injunction"), "injunct" );
	deepEqual( Stem("injunctions"), "injunct" );
	deepEqual( Stem("injur"), "injur" );
	deepEqual( Stem("injure"), "injur" );
	deepEqual( Stem("injured"), "injur" );
	deepEqual( Stem("injurer"), "injur" );
	deepEqual( Stem("injuries"), "injuri" );
	deepEqual( Stem("injurious"), "injuri" );
	deepEqual( Stem("injury"), "injuri" );
	deepEqual( Stem("injustice"), "injustic" );
	deepEqual( Stem("ink"), "ink" );
	deepEqual( Stem("inkhorn"), "inkhorn" );
	deepEqual( Stem("inkle"), "inkl" );
	deepEqual( Stem("inkles"), "inkl" );
	deepEqual( Stem("inkling"), "inkl" );
	deepEqual( Stem("inkstand"), "inkstand" );
	deepEqual( Stem("inky"), "inki" );
	deepEqual( Stem("inlaid"), "inlaid" );
	deepEqual( Stem("inland"), "inland" );
	deepEqual( Stem("inlay"), "inlai" );
	deepEqual( Stem("inly"), "inli" );
	deepEqual( Stem("inmates"), "inmat" );
	deepEqual( Stem("inmost"), "inmost" );
	deepEqual( Stem("inn"), "inn" );
	deepEqual( Stem("inner"), "inner" );
	deepEqual( Stem("innkeeper"), "innkeep" );
	deepEqual( Stem("innocence"), "innoc" );
	deepEqual( Stem("innocency"), "innoc" );
	deepEqual( Stem("innocent"), "innoc" );
	deepEqual( Stem("innocently"), "innoc" );
	deepEqual( Stem("innocents"), "innoc" );
	deepEqual( Stem("innovation"), "innov" );
	deepEqual( Stem("innovator"), "innov" );
	deepEqual( Stem("inns"), "inn" );
	deepEqual( Stem("innuendoes"), "innuendo" );
	deepEqual( Stem("innumerable"), "innumer" );
	deepEqual( Stem("inoculate"), "inocul" );
	deepEqual( Stem("inoffensive"), "inoffens" );
	deepEqual( Stem("inordinate"), "inordin" );
	deepEqual( Stem("inprimis"), "inprimi" );
	deepEqual( Stem("inquir"), "inquir" );
	deepEqual( Stem("inquire"), "inquir" );
	deepEqual( Stem("inquired"), "inquir" );
	deepEqual( Stem("inquiries"), "inquiri" );
	deepEqual( Stem("inquiring"), "inquir" );
	deepEqual( Stem("inquiry"), "inquiri" );
	deepEqual( Stem("inquisition"), "inquisit" );
	deepEqual( Stem("inquisitive"), "inquisit" );
	deepEqual( Stem("inroads"), "inroad" );
	deepEqual( Stem("insane"), "insan" );
	deepEqual( Stem("insanie"), "insani" );
	deepEqual( Stem("insanity"), "insan" );
	deepEqual( Stem("insatiable"), "insati" );
	deepEqual( Stem("insatiate"), "insati" );
	deepEqual( Stem("insconce"), "insconc" );
	deepEqual( Stem("inscrib"), "inscrib" );
	deepEqual( Stem("inscribed"), "inscrib" );
	deepEqual( Stem("inscription"), "inscript" );
	deepEqual( Stem("inscriptions"), "inscript" );
	deepEqual( Stem("inscroll"), "inscrol" );
	deepEqual( Stem("inscrutable"), "inscrut" );
	deepEqual( Stem("insculp"), "insculp" );
	deepEqual( Stem("insculpture"), "insculptur" );
	deepEqual( Stem("insensibility"), "insens" );
	deepEqual( Stem("insensible"), "insens" );
	deepEqual( Stem("inseparable"), "insepar" );
	deepEqual( Stem("inseparate"), "insepar" );
	deepEqual( Stem("insert"), "insert" );
	deepEqual( Stem("inserted"), "insert" );
	deepEqual( Stem("inset"), "inset" );
	deepEqual( Stem("inshell"), "inshel" );
	deepEqual( Stem("inshipp"), "inshipp" );
	deepEqual( Stem("inside"), "insid" );
	deepEqual( Stem("insignificant"), "insignific" );
	deepEqual( Stem("insinewed"), "insinew" );
	deepEqual( Stem("insinuate"), "insinu" );
	deepEqual( Stem("insinuateth"), "insinuateth" );
	deepEqual( Stem("insinuating"), "insinu" );
	deepEqual( Stem("insinuation"), "insinu" );
	deepEqual( Stem("insipid"), "insipid" );
	deepEqual( Stem("insist"), "insist" );
	deepEqual( Stem("insisted"), "insist" );
	deepEqual( Stem("insisting"), "insist" );
	deepEqual( Stem("insisture"), "insistur" );
	deepEqual( Stem("insociable"), "insoci" );
	deepEqual( Stem("insolence"), "insol" );
	deepEqual( Stem("insolent"), "insol" );
	deepEqual( Stem("insolently"), "insol" );
	deepEqual( Stem("insomuch"), "insomuch" );
	deepEqual( Stem("inspect"), "inspect" );
	deepEqual( Stem("inspecting"), "inspect" );
	deepEqual( Stem("inspection"), "inspect" );
	deepEqual( Stem("inspir"), "inspir" );
	deepEqual( Stem("inspiration"), "inspir" );
	deepEqual( Stem("inspirations"), "inspir" );
	deepEqual( Stem("inspire"), "inspir" );
	deepEqual( Stem("inspired"), "inspir" );
	deepEqual( Stem("inspiriting"), "inspirit" );
	deepEqual( Stem("install"), "instal" );
	deepEqual( Stem("installed"), "instal" );
	deepEqual( Stem("instalment"), "instal" );
	deepEqual( Stem("instance"), "instanc" );
	deepEqual( Stem("instances"), "instanc" );
	deepEqual( Stem("instant"), "instant" );
	deepEqual( Stem("instantaneous"), "instantan" );
	deepEqual( Stem("instantly"), "instantli" );
	deepEqual( Stem("instate"), "instat" );
	deepEqual( Stem("instead"), "instead" );
	deepEqual( Stem("insteeped"), "insteep" );
	deepEqual( Stem("instigate"), "instig" );
	deepEqual( Stem("instigated"), "instig" );
	deepEqual( Stem("instigation"), "instig" );
	deepEqual( Stem("instigations"), "instig" );
	deepEqual( Stem("instigator"), "instig" );
	deepEqual( Stem("instil"), "instil" );
	deepEqual( Stem("instinct"), "instinct" );
	deepEqual( Stem("instinctive"), "instinct" );
	deepEqual( Stem("instinctively"), "instinct" );
	deepEqual( Stem("institute"), "institut" );
	deepEqual( Stem("instituted"), "institut" );
	deepEqual( Stem("institution"), "institut" );
	deepEqual( Stem("institutions"), "institut" );
	deepEqual( Stem("instruct"), "instruct" );
	deepEqual( Stem("instructed"), "instruct" );
	deepEqual( Stem("instructing"), "instruct" );
	deepEqual( Stem("instruction"), "instruct" );
	deepEqual( Stem("instructions"), "instruct" );
	deepEqual( Stem("instructive"), "instruct" );
	deepEqual( Stem("instructor"), "instructor" );
	deepEqual( Stem("instructors"), "instructor" );
	deepEqual( Stem("instructress"), "instructress" );
	deepEqual( Stem("instructs"), "instruct" );
	deepEqual( Stem("instrument"), "instrument" );
	deepEqual( Stem("instrumental"), "instrument" );
	deepEqual( Stem("instruments"), "instrument" );
	deepEqual( Stem("insubordination"), "insubordin" );
	deepEqual( Stem("insubstantial"), "insubstanti" );
	deepEqual( Stem("insufferable"), "insuffer" );
	deepEqual( Stem("insufferably"), "insuffer" );
	deepEqual( Stem("insufficience"), "insuffici" );
	deepEqual( Stem("insufficiency"), "insuffici" );
	deepEqual( Stem("insufficient"), "insuffici" );
	deepEqual( Stem("insular"), "insular" );
	deepEqual( Stem("insult"), "insult" );
	deepEqual( Stem("insulted"), "insult" );
	deepEqual( Stem("insulting"), "insult" );
	deepEqual( Stem("insultment"), "insult" );
	deepEqual( Stem("insults"), "insult" );
	deepEqual( Stem("insuperable"), "insuper" );
	deepEqual( Stem("insupportable"), "insupport" );
	deepEqual( Stem("insuppressive"), "insuppress" );
	deepEqual( Stem("insurance"), "insur" );
	deepEqual( Stem("insure"), "insur" );
	deepEqual( Stem("insured"), "insur" );
	deepEqual( Stem("insurrection"), "insurrect" );
	deepEqual( Stem("insurrections"), "insurrect" );
	deepEqual( Stem("int"), "int" );
	deepEqual( Stem("integer"), "integ" );
	deepEqual( Stem("integritas"), "integrita" );
	deepEqual( Stem("integrity"), "integr" );
	deepEqual( Stem("intellect"), "intellect" );
	deepEqual( Stem("intellects"), "intellect" );
	deepEqual( Stem("intellectual"), "intellectu" );
	deepEqual( Stem("intelligence"), "intellig" );
	deepEqual( Stem("intelligencer"), "intelligenc" );
	deepEqual( Stem("intelligencing"), "intelligenc" );
	deepEqual( Stem("intelligent"), "intellig" );
	deepEqual( Stem("intelligis"), "intelligi" );
	deepEqual( Stem("intelligo"), "intelligo" );
	deepEqual( Stem("intemperance"), "intemper" );
	deepEqual( Stem("intemperate"), "intemper" );
	deepEqual( Stem("intend"), "intend" );
	deepEqual( Stem("intended"), "intend" );
	deepEqual( Stem("intendeth"), "intendeth" );
	deepEqual( Stem("intending"), "intend" );
	deepEqual( Stem("intendment"), "intend" );
	deepEqual( Stem("intends"), "intend" );
	deepEqual( Stem("intenible"), "inten" );
	deepEqual( Stem("intense"), "intens" );
	deepEqual( Stem("intensely"), "intens" );
	deepEqual( Stem("intent"), "intent" );
	deepEqual( Stem("intention"), "intent" );
	deepEqual( Stem("intentions"), "intent" );
	deepEqual( Stem("intentively"), "intent" );
	deepEqual( Stem("intents"), "intent" );
	deepEqual( Stem("inter"), "inter" );
	deepEqual( Stem("intercede"), "interced" );
	deepEqual( Stem("intercept"), "intercept" );
	deepEqual( Stem("intercepted"), "intercept" );
	deepEqual( Stem("intercepter"), "intercept" );
	deepEqual( Stem("interception"), "intercept" );
	deepEqual( Stem("intercepts"), "intercept" );
	deepEqual( Stem("intercession"), "intercess" );
	deepEqual( Stem("intercessors"), "intercessor" );
	deepEqual( Stem("interchained"), "interchain" );
	deepEqual( Stem("interchang"), "interchang" );
	deepEqual( Stem("interchange"), "interchang" );
	deepEqual( Stem("interchangeably"), "interchang" );
	deepEqual( Stem("interchangement"), "interchang" );
	deepEqual( Stem("interchanging"), "interchang" );
	deepEqual( Stem("intercourse"), "intercours" );
	deepEqual( Stem("interdiction"), "interdict" );
	deepEqual( Stem("interest"), "interest" );
	deepEqual( Stem("interested"), "interest" );
	deepEqual( Stem("interesting"), "interest" );
	deepEqual( Stem("interests"), "interest" );
	deepEqual( Stem("interfere"), "interfer" );
	deepEqual( Stem("interfered"), "interf" );
	deepEqual( Stem("interferes"), "interfer" );
	deepEqual( Stem("interim"), "interim" );
	deepEqual( Stem("interims"), "interim" );
	deepEqual( Stem("interior"), "interior" );
	deepEqual( Stem("interjections"), "interject" );
	deepEqual( Stem("interjoin"), "interjoin" );
	deepEqual( Stem("interlocutor"), "interlocutor" );
	deepEqual( Stem("interlude"), "interlud" );
	deepEqual( Stem("interminable"), "intermin" );
	deepEqual( Stem("intermingle"), "intermingl" );
	deepEqual( Stem("intermingled"), "intermingl" );
	deepEqual( Stem("intermission"), "intermiss" );
	deepEqual( Stem("intermissive"), "intermiss" );
	deepEqual( Stem("intermit"), "intermit" );
	deepEqual( Stem("intermix"), "intermix" );
	deepEqual( Stem("intermixed"), "intermix" );
	deepEqual( Stem("interpose"), "interpos" );
	deepEqual( Stem("interposed"), "interpos" );
	deepEqual( Stem("interposer"), "interpos" );
	deepEqual( Stem("interposes"), "interpos" );
	deepEqual( Stem("interpret"), "interpret" );
	deepEqual( Stem("interpretation"), "interpret" );
	deepEqual( Stem("interpreted"), "interpret" );
	deepEqual( Stem("interpreter"), "interpret" );
	deepEqual( Stem("interpreters"), "interpret" );
	deepEqual( Stem("interprets"), "interpret" );
	deepEqual( Stem("interr"), "interr" );
	deepEqual( Stem("interred"), "inter" );
	deepEqual( Stem("interrogatories"), "interrogatori" );
	deepEqual( Stem("interrogatory"), "interrogatori" );
	deepEqual( Stem("interrupt"), "interrupt" );
	deepEqual( Stem("interrupted"), "interrupt" );
	deepEqual( Stem("interrupter"), "interrupt" );
	deepEqual( Stem("interruptest"), "interruptest" );
	deepEqual( Stem("interrupting"), "interrupt" );
	deepEqual( Stem("interruption"), "interrupt" );
	deepEqual( Stem("interrupts"), "interrupt" );
	deepEqual( Stem("interstices"), "interstic" );
	deepEqual( Stem("intertissued"), "intertissu" );
	deepEqual( Stem("interval"), "interv" );
	deepEqual( Stem("intervallums"), "intervallum" );
	deepEqual( Stem("intervals"), "interv" );
	deepEqual( Stem("intervened"), "interven" );
	deepEqual( Stem("intervention"), "intervent" );
	deepEqual( Stem("interview"), "interview" );
	deepEqual( Stem("interviews"), "interview" );
	deepEqual( Stem("intestate"), "intest" );
	deepEqual( Stem("intestine"), "intestin" );
	deepEqual( Stem("intil"), "intil" );
	deepEqual( Stem("intimacy"), "intimaci" );
	deepEqual( Stem("intimate"), "intim" );
	deepEqual( Stem("intimated"), "intim" );
	deepEqual( Stem("intimately"), "intim" );
	deepEqual( Stem("intimates"), "intim" );
	deepEqual( Stem("intimating"), "intim" );
	deepEqual( Stem("intimation"), "intim" );
	deepEqual( Stem("intitled"), "intitl" );
	deepEqual( Stem("intituled"), "intitul" );
	deepEqual( Stem("into"), "into" );
	deepEqual( Stem("intolerable"), "intoler" );
	deepEqual( Stem("intolerably"), "intoler" );
	deepEqual( Stem("intonation"), "inton" );
	deepEqual( Stem("intoxicated"), "intox" );
	deepEqual( Stem("intoxicates"), "intox" );
	deepEqual( Stem("intoxication"), "intox" );
	deepEqual( Stem("intreasured"), "intreasur" );
	deepEqual( Stem("intreat"), "intreat" );
	deepEqual( Stem("intrench"), "intrench" );
	deepEqual( Stem("intrenchant"), "intrench" );
	deepEqual( Stem("intrepid"), "intrepid" );
	deepEqual( Stem("intrepidly"), "intrepidli" );
	deepEqual( Stem("intricate"), "intric" );
	deepEqual( Stem("intrigue"), "intrigu" );
	deepEqual( Stem("intrigues"), "intrigu" );
	deepEqual( Stem("intrinse"), "intrins" );
	deepEqual( Stem("intrinsicate"), "intrins" );
	deepEqual( Stem("introduce"), "introduc" );
	deepEqual( Stem("introduced"), "introduc" );
	deepEqual( Stem("introducing"), "introduc" );
	deepEqual( Stem("introduction"), "introduct" );
	deepEqual( Stem("introductions"), "introduct" );
	deepEqual( Stem("introjuice"), "introjuic" );
	deepEqual( Stem("introjuicing"), "introju" );
	deepEqual( Stem("intrude"), "intrud" );
	deepEqual( Stem("intruder"), "intrud" );
	deepEqual( Stem("intruding"), "intrud" );
	deepEqual( Stem("intrusion"), "intrus" );
	deepEqual( Stem("intrusted"), "intrust" );
	deepEqual( Stem("inundation"), "inund" );
	deepEqual( Stem("inure"), "inur" );
	deepEqual( Stem("inurn"), "inurn" );
	deepEqual( Stem("invade"), "invad" );
	deepEqual( Stem("invaded"), "invad" );
	deepEqual( Stem("invades"), "invad" );
	deepEqual( Stem("invalid"), "invalid" );
	deepEqual( Stem("invalided"), "invalid" );
	deepEqual( Stem("invaluable"), "invalu" );
	deepEqual( Stem("invariable"), "invari" );
	deepEqual( Stem("invariably"), "invari" );
	deepEqual( Stem("invasion"), "invas" );
	deepEqual( Stem("invasive"), "invas" );
	deepEqual( Stem("invectively"), "invect" );
	deepEqual( Stem("invectives"), "invect" );
	deepEqual( Stem("inveigh"), "inveigh" );
	deepEqual( Stem("inveigle"), "inveigl" );
	deepEqual( Stem("inveigled"), "inveigl" );
	deepEqual( Stem("invent"), "invent" );
	deepEqual( Stem("invented"), "invent" );
	deepEqual( Stem("inventing"), "invent" );
	deepEqual( Stem("invention"), "invent" );
	deepEqual( Stem("inventions"), "invent" );
	deepEqual( Stem("inventor"), "inventor" );
	deepEqual( Stem("inventorially"), "inventori" );
	deepEqual( Stem("inventoried"), "inventori" );
	deepEqual( Stem("inventories"), "inventori" );
	deepEqual( Stem("inventors"), "inventor" );
	deepEqual( Stem("inventory"), "inventori" );
	deepEqual( Stem("inverness"), "inver" );
	deepEqual( Stem("invert"), "invert" );
	deepEqual( Stem("invest"), "invest" );
	deepEqual( Stem("invested"), "invest" );
	deepEqual( Stem("investing"), "invest" );
	deepEqual( Stem("investment"), "invest" );
	deepEqual( Stem("investments"), "invest" );
	deepEqual( Stem("inveterate"), "inveter" );
	deepEqual( Stem("invigorated"), "invigor" );
	deepEqual( Stem("invigorating"), "invigor" );
	deepEqual( Stem("invincible"), "invinc" );
	deepEqual( Stem("inviolable"), "inviol" );
	deepEqual( Stem("invised"), "invis" );
	deepEqual( Stem("invisible"), "invis" );
	deepEqual( Stem("invitation"), "invit" );
	deepEqual( Stem("invitations"), "invit" );
	deepEqual( Stem("invite"), "invit" );
	deepEqual( Stem("invited"), "invit" );
	deepEqual( Stem("invites"), "invit" );
	deepEqual( Stem("inviting"), "invit" );
	deepEqual( Stem("invitis"), "inviti" );
	deepEqual( Stem("invocate"), "invoc" );
	deepEqual( Stem("invocation"), "invoc" );
	deepEqual( Stem("invoice"), "invoic" );
	deepEqual( Stem("invoke"), "invok" );
	deepEqual( Stem("invoked"), "invok" );
	deepEqual( Stem("involuntary"), "involuntari" );
	deepEqual( Stem("involved"), "involv" );
	deepEqual( Stem("involves"), "involv" );
	deepEqual( Stem("invulnerable"), "invulner" );
	deepEqual( Stem("inward"), "inward" );
	deepEqual( Stem("inwardly"), "inwardli" );
	deepEqual( Stem("inwardness"), "inward" );
	deepEqual( Stem("inwards"), "inward" );
	deepEqual( Stem("ionia"), "ionia" );
	deepEqual( Stem("ionian"), "ionian" );
	deepEqual( Stem("iou"), "iou" );
	deepEqual( Stem("iphigenia"), "iphigenia" );
	deepEqual( Stem("ipse"), "ips" );
	deepEqual( Stem("ipswich"), "ipswich" );
	deepEqual( Stem("ira"), "ira" );
	deepEqual( Stem("irae"), "ira" );
	deepEqual( Stem("iras"), "ira" );
	deepEqual( Stem("ire"), "ir" );
	deepEqual( Stem("ireful"), "ir" );
	deepEqual( Stem("ireland"), "ireland" );
	deepEqual( Stem("iris"), "iri" );
	deepEqual( Stem("irish"), "irish" );
	deepEqual( Stem("irishman"), "irishman" );
	deepEqual( Stem("irishmen"), "irishmen" );
	deepEqual( Stem("irishwoman"), "irishwoman" );
	deepEqual( Stem("irks"), "irk" );
	deepEqual( Stem("irksome"), "irksom" );
	deepEqual( Stem("iron"), "iron" );
	deepEqual( Stem("ironmonger"), "ironmong" );
	deepEqual( Stem("irons"), "iron" );
	deepEqual( Stem("irreconcil"), "irreconcil" );
	deepEqual( Stem("irrecoverable"), "irrecover" );
	deepEqual( Stem("irregular"), "irregular" );
	deepEqual( Stem("irregularities"), "irregular" );
	deepEqual( Stem("irregularity"), "irregular" );
	deepEqual( Stem("irregulars"), "irregular" );
	deepEqual( Stem("irregulous"), "irregul" );
	deepEqual( Stem("irreligious"), "irreligi" );
	deepEqual( Stem("irremediable"), "irremedi" );
	deepEqual( Stem("irremovable"), "irremov" );
	deepEqual( Stem("irreparable"), "irrepar" );
	deepEqual( Stem("irreproachable"), "irreproach" );
	deepEqual( Stem("irresistible"), "irresist" );
	deepEqual( Stem("irresolute"), "irresolut" );
	deepEqual( Stem("irresolutely"), "irresolut" );
	deepEqual( Stem("irretrievable"), "irretriev" );
	deepEqual( Stem("irretrievably"), "irretriev" );
	deepEqual( Stem("irrevocable"), "irrevoc" );
	deepEqual( Stem("irritate"), "irrit" );
	deepEqual( Stem("irritated"), "irrit" );
	deepEqual( Stem("irritation"), "irrit" );
	deepEqual( Stem("irruption"), "irrupt" );
	deepEqual( Stem("is"), "i" );
	deepEqual( Stem("isaac"), "isaac" );
	deepEqual( Stem("isabel"), "isabel" );
	deepEqual( Stem("isabella"), "isabella" );
	deepEqual( Stem("isbel"), "isbel" );
	deepEqual( Stem("isbels"), "isbel" );
	deepEqual( Stem("iscariot"), "iscariot" );
	deepEqual( Stem("ise"), "is" );
	deepEqual( Stem("ish"), "ish" );
	deepEqual( Stem("ishmaelite"), "ishmaelit" );
	deepEqual( Stem("isidor"), "isidor" );
	deepEqual( Stem("isidore"), "isidor" );
	deepEqual( Stem("isis"), "isi" );
	deepEqual( Stem("island"), "island" );
	deepEqual( Stem("islander"), "island" );
	deepEqual( Stem("islanders"), "island" );
	deepEqual( Stem("islands"), "island" );
	deepEqual( Stem("isle"), "isl" );
	deepEqual( Stem("isles"), "isl" );
	deepEqual( Stem("islington"), "islington" );
	deepEqual( Stem("isn"), "isn" );
	deepEqual( Stem("isolated"), "isol" );
	deepEqual( Stem("israel"), "israel" );
	deepEqual( Stem("israelites"), "israelit" );
	deepEqual( Stem("issu"), "issu" );
	deepEqual( Stem("issue"), "issu" );
	deepEqual( Stem("issued"), "issu" );
	deepEqual( Stem("issueless"), "issueless" );
	deepEqual( Stem("issues"), "issu" );
	deepEqual( Stem("issuing"), "issu" );
	deepEqual( Stem("ist"), "ist" );
	deepEqual( Stem("ista"), "ista" );
	deepEqual( Stem("it"), "it" );
	deepEqual( Stem("italian"), "italian" );
	deepEqual( Stem("italics"), "ital" );
	deepEqual( Stem("italy"), "itali" );
	deepEqual( Stem("itch"), "itch" );
	deepEqual( Stem("itches"), "itch" );
	deepEqual( Stem("itching"), "itch" );
	deepEqual( Stem("item"), "item" );
	deepEqual( Stem("items"), "item" );
	deepEqual( Stem("iterabimus"), "iterabimu" );
	deepEqual( Stem("iteration"), "iter" );
	deepEqual( Stem("ithaca"), "ithaca" );
	deepEqual( Stem("its"), "it" );
	deepEqual( Stem("itself"), "itself" );
	deepEqual( Stem("itshall"), "itshal" );
	deepEqual( Stem("iv"), "iv" );
	deepEqual( Stem("ivory"), "ivori" );
	deepEqual( Stem("ivy"), "ivi" );
	deepEqual( Stem("iwis"), "iwi" );
	deepEqual( Stem("ix"), "ix" );
	deepEqual( Stem("j"), "j" );
	deepEqual( Stem("jabbering"), "jabber" );
	deepEqual( Stem("jabotiere"), "jabotier" );
	deepEqual( Stem("jacet"), "jacet" );
	deepEqual( Stem("jack"), "jack" );
	deepEqual( Stem("jackals"), "jackal" );
	deepEqual( Stem("jackanapes"), "jackanap" );
	deepEqual( Stem("jackass"), "jackass" );
	deepEqual( Stem("jacket"), "jacket" );
	deepEqual( Stem("jacketed"), "jacket" );
	deepEqual( Stem("jackets"), "jacket" );
	deepEqual( Stem("jacks"), "jack" );
	deepEqual( Stem("jacksauce"), "jacksauc" );
	deepEqual( Stem("jackslave"), "jackslav" );
	deepEqual( Stem("jacob"), "jacob" );
	deepEqual( Stem("jade"), "jade" );
	deepEqual( Stem("jaded"), "jade" );
	deepEqual( Stem("jades"), "jade" );
	deepEqual( Stem("jail"), "jail" );
	deepEqual( Stem("jaisey"), "jaisei" );
	deepEqual( Stem("jakes"), "jake" );
	deepEqual( Stem("jam"), "jam" );
	deepEqual( Stem("jamaica"), "jamaica" );
	deepEqual( Stem("jamany"), "jamani" );
	deepEqual( Stem("james"), "jame" );
	deepEqual( Stem("jams"), "jam" );
	deepEqual( Stem("jamy"), "jami" );
	deepEqual( Stem("jane"), "jane" );
	deepEqual( Stem("janeiro"), "janeiro" );
	deepEqual( Stem("janey"), "janei" );
	deepEqual( Stem("jangled"), "jangl" );
	deepEqual( Stem("jangling"), "jangl" );
	deepEqual( Stem("janissary"), "janissari" );
	deepEqual( Stem("janitor"), "janitor" );
	deepEqual( Stem("janizaries"), "janizari" );
	deepEqual( Stem("january"), "januari" );
	deepEqual( Stem("janus"), "janu" );
	deepEqual( Stem("japan"), "japan" );
	deepEqual( Stem("japhet"), "japhet" );
	deepEqual( Stem("jaquenetta"), "jaquenetta" );
	deepEqual( Stem("jaques"), "jaqu" );
	deepEqual( Stem("jar"), "jar" );
	deepEqual( Stem("jargon"), "jargon" );
	deepEqual( Stem("jarred"), "jar" );
	deepEqual( Stem("jarring"), "jar" );
	deepEqual( Stem("jars"), "jar" );
	deepEqual( Stem("jarteer"), "jarteer" );
	deepEqual( Stem("jasey"), "jasei" );
	deepEqual( Stem("jasons"), "jason" );
	deepEqual( Stem("jaunce"), "jaunc" );
	deepEqual( Stem("jauncing"), "jaunc" );
	deepEqual( Stem("jaunders"), "jaunder" );
	deepEqual( Stem("jaundice"), "jaundic" );
	deepEqual( Stem("jaundies"), "jaundi" );
	deepEqual( Stem("jaunt"), "jaunt" );
	deepEqual( Stem("jaunts"), "jaunt" );
	deepEqual( Stem("jaunty"), "jaunti" );
	deepEqual( Stem("jaw"), "jaw" );
	deepEqual( Stem("jawbone"), "jawbon" );
	deepEqual( Stem("jaws"), "jaw" );
	deepEqual( Stem("jay"), "jai" );
	deepEqual( Stem("jays"), "jai" );
	deepEqual( Stem("jc"), "jc" );
	deepEqual( Stem("je"), "je" );
	deepEqual( Stem("jealous"), "jealou" );
	deepEqual( Stem("jealousies"), "jealousi" );
	deepEqual( Stem("jealousy"), "jealousi" );
	deepEqual( Stem("jeames"), "jeam" );
	deepEqual( Stem("jean"), "jean" );
	deepEqual( Stem("jeannette"), "jeannett" );
	deepEqual( Stem("jeer"), "jeer" );
	deepEqual( Stem("jeered"), "jeer" );
	deepEqual( Stem("jeering"), "jeer" );
	deepEqual( Stem("jeeringly"), "jeeringli" );
	deepEqual( Stem("jeers"), "jeer" );
	deepEqual( Stem("jefferson"), "jefferson" );
	deepEqual( Stem("jehu"), "jehu" );
	deepEqual( Stem("jellies"), "jelli" );
	deepEqual( Stem("jelly"), "jelli" );
	deepEqual( Stem("jemima"), "jemima" );
	deepEqual( Stem("jemmy"), "jemmi" );
	deepEqual( Stem("jena"), "jena" );
	deepEqual( Stem("jenkins"), "jenkin" );
	deepEqual( Stem("jenkinses"), "jenkins" );
	deepEqual( Stem("jenny"), "jenni" );
	deepEqual( Stem("jeopardised"), "jeopardis" );
	deepEqual( Stem("jeopardy"), "jeopardi" );
	deepEqual( Stem("jephtha"), "jephtha" );
	deepEqual( Stem("jephthah"), "jephthah" );
	deepEqual( Stem("jericho"), "jericho" );
	deepEqual( Stem("jerkin"), "jerkin" );
	deepEqual( Stem("jerkins"), "jerkin" );
	deepEqual( Stem("jerks"), "jerk" );
	deepEqual( Stem("jeronimy"), "jeronimi" );
	deepEqual( Stem("jerusalem"), "jerusalem" );
	deepEqual( Stem("jeshu"), "jeshu" );
	deepEqual( Stem("jesses"), "jess" );
	deepEqual( Stem("jessica"), "jessica" );
	deepEqual( Stem("jest"), "jest" );
	deepEqual( Stem("jested"), "jest" );
	deepEqual( Stem("jester"), "jester" );
	deepEqual( Stem("jesters"), "jester" );
	deepEqual( Stem("jesting"), "jest" );
	deepEqual( Stem("jests"), "jest" );
	deepEqual( Stem("jesu"), "jesu" );
	deepEqual( Stem("jesus"), "jesu" );
	deepEqual( Stem("jet"), "jet" );
	deepEqual( Stem("jets"), "jet" );
	deepEqual( Stem("jetty"), "jetti" );
	deepEqual( Stem("jeune"), "jeun" );
	deepEqual( Stem("jew"), "jew" );
	deepEqual( Stem("jewab"), "jewab" );
	deepEqual( Stem("jewel"), "jewel" );
	deepEqual( Stem("jewelled"), "jewel" );
	deepEqual( Stem("jeweller"), "jewel" );
	deepEqual( Stem("jewellers"), "jewel" );
	deepEqual( Stem("jewellery"), "jewelleri" );
	deepEqual( Stem("jewels"), "jewel" );
	deepEqual( Stem("jewess"), "jewess" );
	deepEqual( Stem("jewish"), "jewish" );
	deepEqual( Stem("jewry"), "jewri" );
	deepEqual( Stem("jews"), "jew" );
	deepEqual( Stem("jezebel"), "jezebel" );
	deepEqual( Stem("jibb"), "jibb" );
	deepEqual( Stem("jig"), "jig" );
	deepEqual( Stem("jigging"), "jig" );
	deepEqual( Stem("jigs"), "jig" );
	deepEqual( Stem("jill"), "jill" );
	deepEqual( Stem("jills"), "jill" );
	deepEqual( Stem("jilted"), "jilt" );
	deepEqual( Stem("jilting"), "jilt" );
	deepEqual( Stem("jim"), "jim" );
	deepEqual( Stem("jingling"), "jingl" );
	deepEqual( Stem("jingo"), "jingo" );
	deepEqual( Stem("jist"), "jist" );
	deepEqual( Stem("joan"), "joan" );
	deepEqual( Stem("job"), "job" );
	deepEqual( Stem("jobbed"), "job" );
	deepEqual( Stem("jobber"), "jobber" );
	deepEqual( Stem("jobbers"), "jobber" );
	deepEqual( Stem("jobs"), "job" );
	deepEqual( Stem("jockey"), "jockei" );
	deepEqual( Stem("jockeyed"), "jockei" );
	deepEqual( Stem("jocular"), "jocular" );
	deepEqual( Stem("jocularly"), "jocularli" );
	deepEqual( Stem("jocund"), "jocund" );
	deepEqual( Stem("joe"), "joe" );
	deepEqual( Stem("jog"), "jog" );
	deepEqual( Stem("jogging"), "jog" );
	deepEqual( Stem("johannisberger"), "johannisberg" );
	deepEqual( Stem("john"), "john" );
	deepEqual( Stem("johnes"), "john" );
	deepEqual( Stem("johns"), "john" );
	deepEqual( Stem("johnson"), "johnson" );
	deepEqual( Stem("join"), "join" );
	deepEqual( Stem("joinder"), "joinder" );
	deepEqual( Stem("joined"), "join" );
	deepEqual( Stem("joiner"), "joiner" );
	deepEqual( Stem("joineth"), "joineth" );
	deepEqual( Stem("joining"), "join" );
	deepEqual( Stem("joins"), "join" );
	deepEqual( Stem("joint"), "joint" );
	deepEqual( Stem("jointed"), "joint" );
	deepEqual( Stem("jointing"), "joint" );
	deepEqual( Stem("jointly"), "jointli" );
	deepEqual( Stem("jointress"), "jointress" );
	deepEqual( Stem("joints"), "joint" );
	deepEqual( Stem("jointure"), "jointur" );
	deepEqual( Stem("joinville"), "joinvil" );
	deepEqual( Stem("joke"), "joke" );
	deepEqual( Stem("joked"), "joke" );
	deepEqual( Stem("joker"), "joker" );
	deepEqual( Stem("jokes"), "joke" );
	deepEqual( Stem("joking"), "joke" );
	deepEqual( Stem("jollity"), "jolliti" );
	deepEqual( Stem("jolly"), "jolli" );
	deepEqual( Stem("jolt"), "jolt" );
	deepEqual( Stem("joltheads"), "jolthead" );
	deepEqual( Stem("jones"), "jone" );
	deepEqual( Stem("joneses"), "jones" );
	deepEqual( Stem("jordan"), "jordan" );
	deepEqual( Stem("jos"), "jo" );
	deepEqual( Stem("joseph"), "joseph" );
	deepEqual( Stem("josephing"), "joseph" );
	deepEqual( Stem("joshua"), "joshua" );
	deepEqual( Stem("jot"), "jot" );
	deepEqual( Stem("joueur"), "joueur" );
	deepEqual( Stem("jour"), "jour" );
	deepEqual( Stem("jourdain"), "jourdain" );
	deepEqual( Stem("journal"), "journal" );
	deepEqual( Stem("journals"), "journal" );
	deepEqual( Stem("journey"), "journei" );
	deepEqual( Stem("journeying"), "journei" );
	deepEqual( Stem("journeyman"), "journeyman" );
	deepEqual( Stem("journeymen"), "journeymen" );
	deepEqual( Stem("journeys"), "journei" );
	deepEqual( Stem("jove"), "jove" );
	deepEqual( Stem("jovem"), "jovem" );
	deepEqual( Stem("jovial"), "jovial" );
	deepEqual( Stem("joviality"), "jovial" );
	deepEqual( Stem("jowl"), "jowl" );
	deepEqual( Stem("jowls"), "jowl" );
	deepEqual( Stem("joy"), "joi" );
	deepEqual( Stem("joyed"), "joi" );
	deepEqual( Stem("joyful"), "joy" );
	deepEqual( Stem("joyfully"), "joyfulli" );
	deepEqual( Stem("joyless"), "joyless" );
	deepEqual( Stem("joyous"), "joyou" );
	deepEqual( Stem("joys"), "joi" );
	deepEqual( Stem("juan"), "juan" );
	deepEqual( Stem("jubilation"), "jubil" );
	deepEqual( Stem("jubilee"), "jubile" );
	deepEqual( Stem("jud"), "jud" );
	deepEqual( Stem("judah"), "judah" );
	deepEqual( Stem("judas"), "juda" );
	deepEqual( Stem("judases"), "judas" );
	deepEqual( Stem("jude"), "jude" );
	deepEqual( Stem("judenstadt"), "judenstadt" );
	deepEqual( Stem("judg"), "judg" );
	deepEqual( Stem("judge"), "judg" );
	deepEqual( Stem("judged"), "judg" );
	deepEqual( Stem("judgement"), "judgement" );
	deepEqual( Stem("judges"), "judg" );
	deepEqual( Stem("judgest"), "judgest" );
	deepEqual( Stem("judging"), "judg" );
	deepEqual( Stem("judgment"), "judgment" );
	deepEqual( Stem("judgments"), "judgment" );
	deepEqual( Stem("judicious"), "judici" );
	deepEqual( Stem("judiciously"), "judici" );
	deepEqual( Stem("jug"), "jug" );
	deepEqual( Stem("juggle"), "juggl" );
	deepEqual( Stem("juggled"), "juggl" );
	deepEqual( Stem("juggler"), "juggler" );
	deepEqual( Stem("jugglers"), "juggler" );
	deepEqual( Stem("juggling"), "juggl" );
	deepEqual( Stem("jugs"), "jug" );
	deepEqual( Stem("juice"), "juic" );
	deepEqual( Stem("juiced"), "juic" );
	deepEqual( Stem("juke"), "juke" );
	deepEqual( Stem("jul"), "jul" );
	deepEqual( Stem("jule"), "jule" );
	deepEqual( Stem("julia"), "julia" );
	deepEqual( Stem("juliet"), "juliet" );
	deepEqual( Stem("julietta"), "julietta" );
	deepEqual( Stem("julio"), "julio" );
	deepEqual( Stem("julius"), "juliu" );
	deepEqual( Stem("july"), "juli" );
	deepEqual( Stem("jump"), "jump" );
	deepEqual( Stem("jumped"), "jump" );
	deepEqual( Stem("jumpeth"), "jumpeth" );
	deepEqual( Stem("jumping"), "jump" );
	deepEqual( Stem("jumps"), "jump" );
	deepEqual( Stem("jun"), "jun" );
	deepEqual( Stem("juncture"), "junctur" );
	deepEqual( Stem("june"), "june" );
	deepEqual( Stem("junes"), "june" );
	deepEqual( Stem("jungle"), "jungl" );
	deepEqual( Stem("jungly"), "jungli" );
	deepEqual( Stem("junior"), "junior" );
	deepEqual( Stem("juniors"), "junior" );
	deepEqual( Stem("junius"), "juniu" );
	deepEqual( Stem("junket"), "junket" );
	deepEqual( Stem("junkets"), "junket" );
	deepEqual( Stem("juno"), "juno" );
	deepEqual( Stem("jupiter"), "jupit" );
	deepEqual( Stem("jure"), "jure" );
	deepEqual( Stem("jurement"), "jurement" );
	deepEqual( Stem("jurisdiction"), "jurisdict" );
	deepEqual( Stem("juror"), "juror" );
	deepEqual( Stem("jurors"), "juror" );
	deepEqual( Stem("jury"), "juri" );
	deepEqual( Stem("jurymen"), "jurymen" );
	deepEqual( Stem("just"), "just" );
	deepEqual( Stem("justeius"), "justeiu" );
	deepEqual( Stem("justest"), "justest" );
	deepEqual( Stem("justice"), "justic" );
	deepEqual( Stem("justicer"), "justic" );
	deepEqual( Stem("justicers"), "justic" );
	deepEqual( Stem("justices"), "justic" );
	deepEqual( Stem("justifiable"), "justifi" );
	deepEqual( Stem("justification"), "justif" );
	deepEqual( Stem("justified"), "justifi" );
	deepEqual( Stem("justify"), "justifi" );
	deepEqual( Stem("justle"), "justl" );
	deepEqual( Stem("justled"), "justl" );
	deepEqual( Stem("justles"), "justl" );
	deepEqual( Stem("justling"), "justl" );
	deepEqual( Stem("justly"), "justli" );
	deepEqual( Stem("justness"), "just" );
	deepEqual( Stem("justs"), "just" );
	deepEqual( Stem("jutting"), "jut" );
	deepEqual( Stem("jutty"), "jutti" );
	deepEqual( Stem("juvenal"), "juven" );
	deepEqual( Stem("juvenile"), "juvenil" );
	deepEqual( Stem("k"), "k" );
	deepEqual( Stem("kalydor"), "kalydor" );
	deepEqual( Stem("kam"), "kam" );
	deepEqual( Stem("kangaroo"), "kangaroo" );
	deepEqual( Stem("kartoffeln"), "kartoffeln" );
	deepEqual( Stem("kate"), "kate" );
	deepEqual( Stem("kated"), "kate" );
	deepEqual( Stem("kates"), "kate" );
	deepEqual( Stem("katharine"), "katharin" );
	deepEqual( Stem("katherina"), "katherina" );
	deepEqual( Stem("katherine"), "katherin" );
	deepEqual( Stem("kattervang"), "kattervang" );
	deepEqual( Stem("kean"), "kean" );
	deepEqual( Stem("kecksies"), "kecksi" );
	deepEqual( Stem("keech"), "keech" );
	deepEqual( Stem("keel"), "keel" );
	deepEqual( Stem("keels"), "keel" );
	deepEqual( Stem("keen"), "keen" );
	deepEqual( Stem("keenest"), "keenest" );
	deepEqual( Stem("keenly"), "keenli" );
	deepEqual( Stem("keenness"), "keen" );
	deepEqual( Stem("keep"), "keep" );
	deepEqual( Stem("keepdown"), "keepdown" );
	deepEqual( Stem("keeper"), "keeper" );
	deepEqual( Stem("keepers"), "keeper" );
	deepEqual( Stem("keepest"), "keepest" );
	deepEqual( Stem("keeping"), "keep" );
	deepEqual( Stem("keeps"), "keep" );
	deepEqual( Stem("keepsakes"), "keepsak" );
	deepEqual( Stem("keiser"), "keiser" );
	deepEqual( Stem("kemble"), "kembl" );
	deepEqual( Stem("ken"), "ken" );
	deepEqual( Stem("kenal"), "kenal" );
	deepEqual( Stem("kendal"), "kendal" );
	deepEqual( Stem("kennel"), "kennel" );
	deepEqual( Stem("kennels"), "kennel" );
	deepEqual( Stem("kensington"), "kensington" );
	deepEqual( Stem("kent"), "kent" );
	deepEqual( Stem("kentish"), "kentish" );
	deepEqual( Stem("kentishman"), "kentishman" );
	deepEqual( Stem("kentishmen"), "kentishmen" );
	deepEqual( Stem("kep"), "kep" );
	deepEqual( Stem("kept"), "kept" );
	deepEqual( Stem("kerchief"), "kerchief" );
	deepEqual( Stem("kerely"), "kere" );
	deepEqual( Stem("kern"), "kern" );
	deepEqual( Stem("kernal"), "kernal" );
	deepEqual( Stem("kernel"), "kernel" );
	deepEqual( Stem("kernels"), "kernel" );
	deepEqual( Stem("kerns"), "kern" );
	deepEqual( Stem("kersey"), "kersei" );
	deepEqual( Stem("ketch"), "ketch" );
	deepEqual( Stem("kettle"), "kettl" );
	deepEqual( Stem("kettledrum"), "kettledrum" );
	deepEqual( Stem("kettledrums"), "kettledrum" );
	deepEqual( Stem("kettles"), "kettl" );
	deepEqual( Stem("kew"), "kew" );
	deepEqual( Stem("key"), "kei" );
	deepEqual( Stem("keyhole"), "keyhol" );
	deepEqual( Stem("keys"), "kei" );
	deepEqual( Stem("kibe"), "kibe" );
	deepEqual( Stem("kibes"), "kibe" );
	deepEqual( Stem("kibob"), "kibob" );
	deepEqual( Stem("kibobjee"), "kibobje" );
	deepEqual( Stem("kick"), "kick" );
	deepEqual( Stem("kicked"), "kick" );
	deepEqual( Stem("kicker"), "kicker" );
	deepEqual( Stem("kicking"), "kick" );
	deepEqual( Stem("kicklebury"), "kickleburi" );
	deepEqual( Stem("kickshaws"), "kickshaw" );
	deepEqual( Stem("kickshawses"), "kickshaws" );
	deepEqual( Stem("kicky"), "kicki" );
	deepEqual( Stem("kid"), "kid" );
	deepEqual( Stem("kidney"), "kidnei" );
	deepEqual( Stem("kidneys"), "kidnei" );
	deepEqual( Stem("kikely"), "kike" );
	deepEqual( Stem("kildare"), "kildar" );
	deepEqual( Stem("kill"), "kill" );
	deepEqual( Stem("killarney"), "killarnei" );
	deepEqual( Stem("killed"), "kill" );
	deepEqual( Stem("killer"), "killer" );
	deepEqual( Stem("killeth"), "killeth" );
	deepEqual( Stem("killing"), "kill" );
	deepEqual( Stem("killingworth"), "killingworth" );
	deepEqual( Stem("kills"), "kill" );
	deepEqual( Stem("kiln"), "kiln" );
	deepEqual( Stem("kimbolton"), "kimbolton" );
	deepEqual( Stem("kin"), "kin" );
	deepEqual( Stem("kind"), "kind" );
	deepEqual( Stem("kinder"), "kinder" );
	deepEqual( Stem("kindest"), "kindest" );
	deepEqual( Stem("kindle"), "kindl" );
	deepEqual( Stem("kindled"), "kindl" );
	deepEqual( Stem("kindless"), "kindless" );
	deepEqual( Stem("kindlier"), "kindlier" );
	deepEqual( Stem("kindliest"), "kindliest" );
	deepEqual( Stem("kindling"), "kindl" );
	deepEqual( Stem("kindly"), "kindli" );
	deepEqual( Stem("kindness"), "kind" );
	deepEqual( Stem("kindnesses"), "kind" );
	deepEqual( Stem("kindred"), "kindr" );
	deepEqual( Stem("kindreds"), "kindr" );
	deepEqual( Stem("kinds"), "kind" );
	deepEqual( Stem("kine"), "kine" );
	deepEqual( Stem("king"), "king" );
	deepEqual( Stem("kingdom"), "kingdom" );
	deepEqual( Stem("kingdoms"), "kingdom" );
	deepEqual( Stem("kingly"), "kingli" );
	deepEqual( Stem("kings"), "king" );
	deepEqual( Stem("kingstreet"), "kingstreet" );
	deepEqual( Stem("kinred"), "kinr" );
	deepEqual( Stem("kins"), "kin" );
	deepEqual( Stem("kinsfolk"), "kinsfolk" );
	deepEqual( Stem("kinsman"), "kinsman" );
	deepEqual( Stem("kinsmen"), "kinsmen" );
	deepEqual( Stem("kinswoman"), "kinswoman" );
	deepEqual( Stem("kinswomen"), "kinswomen" );
	deepEqual( Stem("kirk"), "kirk" );
	deepEqual( Stem("kirsch"), "kirsch" );
	deepEqual( Stem("kirtle"), "kirtl" );
	deepEqual( Stem("kirtles"), "kirtl" );
	deepEqual( Stem("kislar"), "kislar" );
	deepEqual( Stem("kiss"), "kiss" );
	deepEqual( Stem("kissed"), "kiss" );
	deepEqual( Stem("kisses"), "kiss" );
	deepEqual( Stem("kissing"), "kiss" );
	deepEqual( Stem("kissingen"), "kissingen" );
	deepEqual( Stem("kit"), "kit" );
	deepEqual( Stem("kitchen"), "kitchen" );
	deepEqual( Stem("kitchens"), "kitchen" );
	deepEqual( Stem("kite"), "kite" );
	deepEqual( Stem("kitely"), "kite" );
	deepEqual( Stem("kites"), "kite" );
	deepEqual( Stem("kitt"), "kitt" );
	deepEqual( Stem("kitten"), "kitten" );
	deepEqual( Stem("kitts"), "kitt" );
	deepEqual( Stem("kj"), "kj" );
	deepEqual( Stem("kl"), "kl" );
	deepEqual( Stem("klingenspohr"), "klingenspohr" );
	deepEqual( Stem("klll"), "klll" );
	deepEqual( Stem("knack"), "knack" );
	deepEqual( Stem("knacks"), "knack" );
	deepEqual( Stem("knapp"), "knapp" );
	deepEqual( Stem("knapsack"), "knapsack" );
	deepEqual( Stem("knav"), "knav" );
	deepEqual( Stem("knave"), "knave" );
	deepEqual( Stem("knaveries"), "knaveri" );
	deepEqual( Stem("knavery"), "knaveri" );
	deepEqual( Stem("knaves"), "knave" );
	deepEqual( Stem("knavish"), "knavish" );
	deepEqual( Stem("knead"), "knead" );
	deepEqual( Stem("kneaded"), "knead" );
	deepEqual( Stem("kneading"), "knead" );
	deepEqual( Stem("knee"), "knee" );
	deepEqual( Stem("kneel"), "kneel" );
	deepEqual( Stem("kneeling"), "kneel" );
	deepEqual( Stem("kneels"), "kneel" );
	deepEqual( Stem("knees"), "knee" );
	deepEqual( Stem("knell"), "knell" );
	deepEqual( Stem("knelled"), "knell" );
	deepEqual( Stem("knelt"), "knelt" );
	deepEqual( Stem("knew"), "knew" );
	deepEqual( Stem("knewest"), "knewest" );
	deepEqual( Stem("knick"), "knick" );
	deepEqual( Stem("knicknacks"), "knicknack" );
	deepEqual( Stem("knife"), "knife" );
	deepEqual( Stem("knight"), "knight" );
	deepEqual( Stem("knighted"), "knight" );
	deepEqual( Stem("knighthood"), "knighthood" );
	deepEqual( Stem("knighthoods"), "knighthood" );
	deepEqual( Stem("knightly"), "knightli" );
	deepEqual( Stem("knights"), "knight" );
	deepEqual( Stem("knightsbridge"), "knightsbridg" );
	deepEqual( Stem("knit"), "knit" );
	deepEqual( Stem("knits"), "knit" );
	deepEqual( Stem("knitters"), "knitter" );
	deepEqual( Stem("knitteth"), "knitteth" );
	deepEqual( Stem("knitting"), "knit" );
	deepEqual( Stem("knives"), "knive" );
	deepEqual( Stem("knobs"), "knob" );
	deepEqual( Stem("knock"), "knock" );
	deepEqual( Stem("knocked"), "knock" );
	deepEqual( Stem("knocker"), "knocker" );
	deepEqual( Stem("knocking"), "knock" );
	deepEqual( Stem("knocks"), "knock" );
	deepEqual( Stem("knog"), "knog" );
	deepEqual( Stem("knoll"), "knoll" );
	deepEqual( Stem("knot"), "knot" );
	deepEqual( Stem("knots"), "knot" );
	deepEqual( Stem("knotted"), "knot" );
	deepEqual( Stem("knotty"), "knotti" );
	deepEqual( Stem("knout"), "knout" );
	deepEqual( Stem("know"), "know" );
	deepEqual( Stem("knower"), "knower" );
	deepEqual( Stem("knowest"), "knowest" );
	deepEqual( Stem("knowing"), "know" );
	deepEqual( Stem("knowingest"), "knowingest" );
	deepEqual( Stem("knowingly"), "knowingli" );
	deepEqual( Stem("knowingness"), "knowing" );
	deepEqual( Stem("knowings"), "know" );
	deepEqual( Stem("knowledge"), "knowledg" );
	deepEqual( Stem("known"), "known" );
	deepEqual( Stem("knows"), "know" );
	deepEqual( Stem("knuckled"), "knuckl" );
	deepEqual( Stem("knuckles"), "knuckl" );
	deepEqual( Stem("knuckling"), "knuckl" );
	deepEqual( Stem("konigswinter"), "konigswint" );
	deepEqual( Stem("kunz"), "kunz" );
	deepEqual( Stem("kyind"), "kyind" );
	deepEqual( Stem("l"), "l" );
	deepEqual( Stem("la"), "la" );
	deepEqual( Stem("laban"), "laban" );
	deepEqual( Stem("label"), "label" );
	deepEqual( Stem("labell"), "label" );
	deepEqual( Stem("labienus"), "labienu" );
	deepEqual( Stem("labio"), "labio" );
	deepEqual( Stem("labor"), "labor" );
	deepEqual( Stem("laboring"), "labor" );
	deepEqual( Stem("laborious"), "labori" );
	deepEqual( Stem("laboriously"), "labori" );
	deepEqual( Stem("labors"), "labor" );
	deepEqual( Stem("labour"), "labour" );
	deepEqual( Stem("laboured"), "labour" );
	deepEqual( Stem("labourer"), "labour" );
	deepEqual( Stem("labourers"), "labour" );
	deepEqual( Stem("labouring"), "labour" );
	deepEqual( Stem("labours"), "labour" );
	deepEqual( Stem("laboursome"), "laboursom" );
	deepEqual( Stem("labras"), "labra" );
	deepEqual( Stem("labyrinth"), "labyrinth" );
	deepEqual( Stem("lac"), "lac" );
	deepEqual( Stem("lace"), "lace" );
	deepEqual( Stem("laced"), "lace" );
	deepEqual( Stem("lacedaemon"), "lacedaemon" );
	deepEqual( Stem("laces"), "lace" );
	deepEqual( Stem("lacies"), "laci" );
	deepEqual( Stem("lack"), "lack" );
	deepEqual( Stem("lackadaisical"), "lackadais" );
	deepEqual( Stem("lackbeard"), "lackbeard" );
	deepEqual( Stem("lacked"), "lack" );
	deepEqual( Stem("lackey"), "lackei" );
	deepEqual( Stem("lackeying"), "lackei" );
	deepEqual( Stem("lackeys"), "lackei" );
	deepEqual( Stem("lacking"), "lack" );
	deepEqual( Stem("lacks"), "lack" );
	deepEqual( Stem("lacquered"), "lacquer" );
	deepEqual( Stem("lacqueys"), "lacquei" );
	deepEqual( Stem("lacs"), "lac" );
	deepEqual( Stem("lad"), "lad" );
	deepEqual( Stem("ladder"), "ladder" );
	deepEqual( Stem("ladders"), "ladder" );
	deepEqual( Stem("lade"), "lade" );
	deepEqual( Stem("laden"), "laden" );
	deepEqual( Stem("ladies"), "ladi" );
	deepEqual( Stem("lading"), "lade" );
	deepEqual( Stem("ladle"), "ladl" );
	deepEqual( Stem("lads"), "lad" );
	deepEqual( Stem("lady"), "ladi" );
	deepEqual( Stem("ladybird"), "ladybird" );
	deepEqual( Stem("ladylike"), "ladylik" );
	deepEqual( Stem("ladyship"), "ladyship" );
	deepEqual( Stem("ladyships"), "ladyship" );
	deepEqual( Stem("laeken"), "laeken" );
	deepEqual( Stem("laer"), "laer" );
	deepEqual( Stem("laertes"), "laert" );
	deepEqual( Stem("lafeu"), "lafeu" );
	deepEqual( Stem("lafitte"), "lafitt" );
	deepEqual( Stem("lag"), "lag" );
	deepEqual( Stem("lagging"), "lag" );
	deepEqual( Stem("lagrime"), "lagrim" );
	deepEqual( Stem("laics"), "laic" );
	deepEqual( Stem("laid"), "laid" );
	deepEqual( Stem("lain"), "lain" );
	deepEqual( Stem("laissez"), "laissez" );
	deepEqual( Stem("lake"), "lake" );
	deepEqual( Stem("lakes"), "lake" );
	deepEqual( Stem("lakin"), "lakin" );
	deepEqual( Stem("lam"), "lam" );
	deepEqual( Stem("lamb"), "lamb" );
	deepEqual( Stem("lambert"), "lambert" );
	deepEqual( Stem("lambeth"), "lambeth" );
	deepEqual( Stem("lambkin"), "lambkin" );
	deepEqual( Stem("lambkins"), "lambkin" );
	deepEqual( Stem("lambs"), "lamb" );
	deepEqual( Stem("lame"), "lame" );
	deepEqual( Stem("lamely"), "lame" );
	deepEqual( Stem("lameness"), "lame" );
	deepEqual( Stem("lament"), "lament" );
	deepEqual( Stem("lamentable"), "lament" );
	deepEqual( Stem("lamentably"), "lament" );
	deepEqual( Stem("lamentation"), "lament" );
	deepEqual( Stem("lamentations"), "lament" );
	deepEqual( Stem("lamented"), "lament" );
	deepEqual( Stem("lamenting"), "lament" );
	deepEqual( Stem("lamentings"), "lament" );
	deepEqual( Stem("laments"), "lament" );
	deepEqual( Stem("lames"), "lame" );
	deepEqual( Stem("laming"), "lame" );
	deepEqual( Stem("lammas"), "lamma" );
	deepEqual( Stem("lammastide"), "lammastid" );
	deepEqual( Stem("lamound"), "lamound" );
	deepEqual( Stem("lamp"), "lamp" );
	deepEqual( Stem("lampass"), "lampass" );
	deepEqual( Stem("lampions"), "lampion" );
	deepEqual( Stem("lamplight"), "lamplight" );
	deepEqual( Stem("lamps"), "lamp" );
	deepEqual( Stem("lanc"), "lanc" );
	deepEqual( Stem("lancaster"), "lancast" );
	deepEqual( Stem("lance"), "lanc" );
	deepEqual( Stem("lancelot"), "lancelot" );
	deepEqual( Stem("lancer"), "lancer" );
	deepEqual( Stem("lances"), "lanc" );
	deepEqual( Stem("lanceth"), "lanceth" );
	deepEqual( Stem("lanch"), "lanch" );
	deepEqual( Stem("land"), "land" );
	deepEqual( Stem("landed"), "land" );
	deepEqual( Stem("landing"), "land" );
	deepEqual( Stem("landlady"), "landladi" );
	deepEqual( Stem("landless"), "landless" );
	deepEqual( Stem("landlord"), "landlord" );
	deepEqual( Stem("landlords"), "landlord" );
	deepEqual( Stem("landmen"), "landmen" );
	deepEqual( Stem("lands"), "land" );
	deepEqual( Stem("landscape"), "landscap" );
	deepEqual( Stem("lane"), "lane" );
	deepEqual( Stem("lanes"), "lane" );
	deepEqual( Stem("langage"), "langag" );
	deepEqual( Stem("langley"), "langlei" );
	deepEqual( Stem("langton"), "langton" );
	deepEqual( Stem("language"), "languag" );
	deepEqual( Stem("languageless"), "languageless" );
	deepEqual( Stem("languages"), "languag" );
	deepEqual( Stem("langues"), "langu" );
	deepEqual( Stem("languid"), "languid" );
	deepEqual( Stem("languidly"), "languidli" );
	deepEqual( Stem("languish"), "languish" );
	deepEqual( Stem("languished"), "languish" );
	deepEqual( Stem("languishes"), "languish" );
	deepEqual( Stem("languishing"), "languish" );
	deepEqual( Stem("languishings"), "languish" );
	deepEqual( Stem("languishment"), "languish" );
	deepEqual( Stem("languor"), "languor" );
	deepEqual( Stem("lank"), "lank" );
	deepEqual( Stem("lanky"), "lanki" );
	deepEqual( Stem("lantern"), "lantern" );
	deepEqual( Stem("lanterns"), "lantern" );
	deepEqual( Stem("lanthorn"), "lanthorn" );
	deepEqual( Stem("lap"), "lap" );
	deepEqual( Stem("lapin"), "lapin" );
	deepEqual( Stem("lapis"), "lapi" );
	deepEqual( Stem("lapland"), "lapland" );
	deepEqual( Stem("lapp"), "lapp" );
	deepEqual( Stem("lappets"), "lappet" );
	deepEqual( Stem("laps"), "lap" );
	deepEqual( Stem("lapse"), "laps" );
	deepEqual( Stem("lapsed"), "laps" );
	deepEqual( Stem("lapsing"), "laps" );
	deepEqual( Stem("lapwing"), "lapw" );
	deepEqual( Stem("laquais"), "laquai" );
	deepEqual( Stem("lar"), "lar" );
	deepEqual( Stem("larded"), "lard" );
	deepEqual( Stem("larder"), "larder" );
	deepEqual( Stem("larding"), "lard" );
	deepEqual( Stem("lards"), "lard" );
	deepEqual( Stem("lares"), "lare" );
	deepEqual( Stem("large"), "larg" );
	deepEqual( Stem("largely"), "larg" );
	deepEqual( Stem("largeness"), "larg" );
	deepEqual( Stem("larger"), "larger" );
	deepEqual( Stem("largess"), "largess" );
	deepEqual( Stem("largest"), "largest" );
	deepEqual( Stem("lark"), "lark" );
	deepEqual( Stem("larked"), "lark" );
	deepEqual( Stem("larking"), "lark" );
	deepEqual( Stem("larks"), "lark" );
	deepEqual( Stem("larron"), "larron" );
	deepEqual( Stem("lartius"), "lartiu" );
	deepEqual( Stem("larum"), "larum" );
	deepEqual( Stem("larums"), "larum" );
	deepEqual( Stem("las"), "la" );
	deepEqual( Stem("lascivious"), "lascivi" );
	deepEqual( Stem("lash"), "lash" );
	deepEqual( Stem("lashed"), "lash" );
	deepEqual( Stem("lashing"), "lash" );
	deepEqual( Stem("lass"), "lass" );
	deepEqual( Stem("lassata"), "lassata" );
	deepEqual( Stem("lasses"), "lass" );
	deepEqual( Stem("last"), "last" );
	deepEqual( Stem("lasted"), "last" );
	deepEqual( Stem("lasting"), "last" );
	deepEqual( Stem("lastly"), "lastli" );
	deepEqual( Stem("lasts"), "last" );
	deepEqual( Stem("latch"), "latch" );
	deepEqual( Stem("latches"), "latch" );
	deepEqual( Stem("late"), "late" );
	deepEqual( Stem("lated"), "late" );
	deepEqual( Stem("lately"), "late" );
	deepEqual( Stem("later"), "later" );
	deepEqual( Stem("latest"), "latest" );
	deepEqual( Stem("lath"), "lath" );
	deepEqual( Stem("lathe"), "lath" );
	deepEqual( Stem("latimer"), "latim" );
	deepEqual( Stem("latin"), "latin" );
	deepEqual( Stem("latten"), "latten" );
	deepEqual( Stem("latter"), "latter" );
	deepEqual( Stem("lattice"), "lattic" );
	deepEqual( Stem("latude"), "latud" );
	deepEqual( Stem("laud"), "laud" );
	deepEqual( Stem("laudable"), "laudabl" );
	deepEqual( Stem("laudanum"), "laudanum" );
	deepEqual( Stem("lauded"), "laud" );
	deepEqual( Stem("laudis"), "laudi" );
	deepEqual( Stem("laugh"), "laugh" );
	deepEqual( Stem("laughable"), "laughabl" );
	deepEqual( Stem("laughed"), "laugh" );
	deepEqual( Stem("laugher"), "laugher" );
	deepEqual( Stem("laughest"), "laughest" );
	deepEqual( Stem("laughing"), "laugh" );
	deepEqual( Stem("laughingly"), "laughingli" );
	deepEqual( Stem("laughs"), "laugh" );
	deepEqual( Stem("laughter"), "laughter" );
	deepEqual( Stem("launce"), "launc" );
	deepEqual( Stem("launcelot"), "launcelot" );
	deepEqual( Stem("launces"), "launc" );
	deepEqual( Stem("launch"), "launch" );
	deepEqual( Stem("launched"), "launch" );
	deepEqual( Stem("laund"), "laund" );
	deepEqual( Stem("laundress"), "laundress" );
	deepEqual( Stem("laundry"), "laundri" );
	deepEqual( Stem("laur"), "laur" );
	deepEqual( Stem("laura"), "laura" );
	deepEqual( Stem("laurel"), "laurel" );
	deepEqual( Stem("laurels"), "laurel" );
	deepEqual( Stem("laurence"), "laurenc" );
	deepEqual( Stem("laurentinum"), "laurentinum" );
	deepEqual( Stem("laurie"), "lauri" );
	deepEqual( Stem("laus"), "lau" );
	deepEqual( Stem("lausanne"), "lausann" );
	deepEqual( Stem("lavache"), "lavach" );
	deepEqual( Stem("lave"), "lave" );
	deepEqual( Stem("lavee"), "lave" );
	deepEqual( Stem("lavender"), "lavend" );
	deepEqual( Stem("laves"), "lave" );
	deepEqual( Stem("lavina"), "lavina" );
	deepEqual( Stem("lavinia"), "lavinia" );
	deepEqual( Stem("lavish"), "lavish" );
	deepEqual( Stem("lavished"), "lavish" );
	deepEqual( Stem("lavishly"), "lavishli" );
	deepEqual( Stem("lavolt"), "lavolt" );
	deepEqual( Stem("lavoltas"), "lavolta" );
	deepEqual( Stem("law"), "law" );
	deepEqual( Stem("lawful"), "law" );
	deepEqual( Stem("lawfully"), "lawfulli" );
	deepEqual( Stem("lawless"), "lawless" );
	deepEqual( Stem("lawlessly"), "lawlessli" );
	deepEqual( Stem("lawn"), "lawn" );
	deepEqual( Stem("lawns"), "lawn" );
	deepEqual( Stem("lawrence"), "lawrenc" );
	deepEqual( Stem("laws"), "law" );
	deepEqual( Stem("lawsuit"), "lawsuit" );
	deepEqual( Stem("lawsuits"), "lawsuit" );
	deepEqual( Stem("lawyer"), "lawyer" );
	deepEqual( Stem("lawyers"), "lawyer" );
	deepEqual( Stem("lay"), "lai" );
	deepEqual( Stem("layer"), "layer" );
	deepEqual( Stem("layest"), "layest" );
	deepEqual( Stem("laying"), "lai" );
	deepEqual( Stem("laymen"), "laymen" );
	deepEqual( Stem("lays"), "lai" );
	deepEqual( Stem("lazar"), "lazar" );
	deepEqual( Stem("lazars"), "lazar" );
	deepEqual( Stem("lazarus"), "lazaru" );
	deepEqual( Stem("lazily"), "lazili" );
	deepEqual( Stem("laziness"), "lazi" );
	deepEqual( Stem("lazy"), "lazi" );
	deepEqual( Stem("lazzaroni"), "lazzaroni" );
	deepEqual( Stem("lc"), "lc" );
	deepEqual( Stem("ld"), "ld" );
	deepEqual( Stem("ldst"), "ldst" );
	deepEqual( Stem("le"), "le" );
	deepEqual( Stem("lead"), "lead" );
	deepEqual( Stem("leaden"), "leaden" );
	deepEqual( Stem("leadenhall"), "leadenhal" );
	deepEqual( Stem("leader"), "leader" );
	deepEqual( Stem("leaders"), "leader" );
	deepEqual( Stem("leadest"), "leadest" );
	deepEqual( Stem("leading"), "lead" );
	deepEqual( Stem("leads"), "lead" );
	deepEqual( Stem("leaf"), "leaf" );
	deepEqual( Stem("leafless"), "leafless" );
	deepEqual( Stem("leagu"), "leagu" );
	deepEqual( Stem("league"), "leagu" );
	deepEqual( Stem("leagued"), "leagu" );
	deepEqual( Stem("leaguer"), "leaguer" );
	deepEqual( Stem("leagues"), "leagu" );
	deepEqual( Stem("leah"), "leah" );
	deepEqual( Stem("leak"), "leak" );
	deepEqual( Stem("leakington"), "leakington" );
	deepEqual( Stem("leaky"), "leaki" );
	deepEqual( Stem("lean"), "lean" );
	deepEqual( Stem("leander"), "leander" );
	deepEqual( Stem("leaned"), "lean" );
	deepEqual( Stem("leaner"), "leaner" );
	deepEqual( Stem("leaning"), "lean" );
	deepEqual( Stem("leanness"), "lean" );
	deepEqual( Stem("leans"), "lean" );
	deepEqual( Stem("leant"), "leant" );
	deepEqual( Stem("leap"), "leap" );
	deepEqual( Stem("leaped"), "leap" );
	deepEqual( Stem("leaping"), "leap" );
	deepEqual( Stem("leaps"), "leap" );
	deepEqual( Stem("leapt"), "leapt" );
	deepEqual( Stem("lear"), "lear" );
	deepEqual( Stem("learn"), "learn" );
	deepEqual( Stem("learned"), "learn" );
	deepEqual( Stem("learnedly"), "learnedli" );
	deepEqual( Stem("learning"), "learn" );
	deepEqual( Stem("learnings"), "learn" );
	deepEqual( Stem("learns"), "learn" );
	deepEqual( Stem("learnt"), "learnt" );
	deepEqual( Stem("leas"), "lea" );
	deepEqual( Stem("lease"), "leas" );
	deepEqual( Stem("leases"), "leas" );
	deepEqual( Stem("leash"), "leash" );
	deepEqual( Stem("leasing"), "leas" );
	deepEqual( Stem("least"), "least" );
	deepEqual( Stem("leather"), "leather" );
	deepEqual( Stem("leathern"), "leathern" );
	deepEqual( Stem("leav"), "leav" );
	deepEqual( Stem("leave"), "leav" );
	deepEqual( Stem("leaven"), "leaven" );
	deepEqual( Stem("leavening"), "leaven" );
	deepEqual( Stem("leaver"), "leaver" );
	deepEqual( Stem("leaves"), "leav" );
	deepEqual( Stem("leaving"), "leav" );
	deepEqual( Stem("leavy"), "leavi" );
	deepEqual( Stem("lecher"), "lecher" );
	deepEqual( Stem("lecherous"), "lecher" );
	deepEqual( Stem("lechers"), "lecher" );
	deepEqual( Stem("lechery"), "lecheri" );
	deepEqual( Stem("lecon"), "lecon" );
	deepEqual( Stem("lecture"), "lectur" );
	deepEqual( Stem("lectured"), "lectur" );
	deepEqual( Stem("lectures"), "lectur" );
	deepEqual( Stem("lecturing"), "lectur" );
	deepEqual( Stem("led"), "led" );
	deepEqual( Stem("leda"), "leda" );
	deepEqual( Stem("lederlung"), "lederlung" );
	deepEqual( Stem("ledger"), "ledger" );
	deepEqual( Stem("lee"), "lee" );
	deepEqual( Stem("leech"), "leech" );
	deepEqual( Stem("leeches"), "leech" );
	deepEqual( Stem("leeds"), "leed" );
	deepEqual( Stem("leek"), "leek" );
	deepEqual( Stem("leeks"), "leek" );
	deepEqual( Stem("leer"), "leer" );
	deepEqual( Stem("leered"), "leer" );
	deepEqual( Stem("leering"), "leer" );
	deepEqual( Stem("leers"), "leer" );
	deepEqual( Stem("leery"), "leeri" );
	deepEqual( Stem("lees"), "lee" );
	deepEqual( Stem("leese"), "lees" );
	deepEqual( Stem("leet"), "leet" );
	deepEqual( Stem("leeterature"), "leeteratur" );
	deepEqual( Stem("leets"), "leet" );
	deepEqual( Stem("left"), "left" );
	deepEqual( Stem("leg"), "leg" );
	deepEqual( Stem("legacies"), "legaci" );
	deepEqual( Stem("legacy"), "legaci" );
	deepEqual( Stem("legal"), "legal" );
	deepEqual( Stem("legate"), "legat" );
	deepEqual( Stem("legatine"), "legatin" );
	deepEqual( Stem("legation"), "legat" );
	deepEqual( Stem("lege"), "lege" );
	deepEqual( Stem("legend"), "legend" );
	deepEqual( Stem("legends"), "legend" );
	deepEqual( Stem("leger"), "leger" );
	deepEqual( Stem("legerity"), "leger" );
	deepEqual( Stem("leges"), "lege" );
	deepEqual( Stem("legg"), "legg" );
	deepEqual( Stem("legged"), "leg" );
	deepEqual( Stem("legion"), "legion" );
	deepEqual( Stem("legions"), "legion" );
	deepEqual( Stem("legislation"), "legisl" );
	deepEqual( Stem("legislature"), "legislatur" );
	deepEqual( Stem("legitimate"), "legitim" );
	deepEqual( Stem("legitimation"), "legitim" );
	deepEqual( Stem("legs"), "leg" );
	deepEqual( Stem("leicester"), "leicest" );
	deepEqual( Stem("leicestershire"), "leicestershir" );
	deepEqual( Stem("leiger"), "leiger" );
	deepEqual( Stem("leigers"), "leiger" );
	deepEqual( Stem("leipsic"), "leipsic" );
	deepEqual( Stem("leipzig"), "leipzig" );
	deepEqual( Stem("leisure"), "leisur" );
	deepEqual( Stem("leisurely"), "leisur" );
	deepEqual( Stem("leisures"), "leisur" );
	deepEqual( Stem("leman"), "leman" );
	deepEqual( Stem("lemon"), "lemon" );
	deepEqual( Stem("lempriere"), "lemprier" );
	deepEqual( Stem("lena"), "lena" );
	deepEqual( Stem("lend"), "lend" );
	deepEqual( Stem("lender"), "lender" );
	deepEqual( Stem("lending"), "lend" );
	deepEqual( Stem("lendings"), "lend" );
	deepEqual( Stem("lends"), "lend" );
	deepEqual( Stem("length"), "length" );
	deepEqual( Stem("lengthen"), "lengthen" );
	deepEqual( Stem("lengthens"), "lengthen" );
	deepEqual( Stem("lengths"), "length" );
	deepEqual( Stem("lenity"), "leniti" );
	deepEqual( Stem("lennox"), "lennox" );
	deepEqual( Stem("lent"), "lent" );
	deepEqual( Stem("lenten"), "lenten" );
	deepEqual( Stem("lentus"), "lentu" );
	deepEqual( Stem("leo"), "leo" );
	deepEqual( Stem("leon"), "leon" );
	deepEqual( Stem("leonardo"), "leonardo" );
	deepEqual( Stem("leonati"), "leonati" );
	deepEqual( Stem("leonato"), "leonato" );
	deepEqual( Stem("leonatus"), "leonatu" );
	deepEqual( Stem("leonora"), "leonora" );
	deepEqual( Stem("leontes"), "leont" );
	deepEqual( Stem("leopard"), "leopard" );
	deepEqual( Stem("leopards"), "leopard" );
	deepEqual( Stem("leper"), "leper" );
	deepEqual( Stem("leperous"), "leper" );
	deepEqual( Stem("lepidus"), "lepidu" );
	deepEqual( Stem("leprosy"), "leprosi" );
	deepEqual( Stem("lequel"), "lequel" );
	deepEqual( Stem("leroy"), "leroi" );
	deepEqual( Stem("lers"), "ler" );
	deepEqual( Stem("les"), "le" );
	deepEqual( Stem("less"), "less" );
	deepEqual( Stem("lessen"), "lessen" );
	deepEqual( Stem("lessened"), "lessen" );
	deepEqual( Stem("lessens"), "lessen" );
	deepEqual( Stem("lesser"), "lesser" );
	deepEqual( Stem("lesson"), "lesson" );
	deepEqual( Stem("lessoned"), "lesson" );
	deepEqual( Stem("lessons"), "lesson" );
	deepEqual( Stem("lest"), "lest" );
	deepEqual( Stem("lestrake"), "lestrak" );
	deepEqual( Stem("let"), "let" );
	deepEqual( Stem("lethargied"), "lethargi" );
	deepEqual( Stem("lethargies"), "lethargi" );
	deepEqual( Stem("lethargy"), "lethargi" );
	deepEqual( Stem("lethe"), "leth" );
	deepEqual( Stem("letitia"), "letitia" );
	deepEqual( Stem("lets"), "let" );
	deepEqual( Stem("lett"), "lett" );
	deepEqual( Stem("letter"), "letter" );
	deepEqual( Stem("letters"), "letter" );
	deepEqual( Stem("letterth"), "letterth" );
	deepEqual( Stem("letting"), "let" );
	deepEqual( Stem("lettuce"), "lettuc" );
	deepEqual( Stem("leur"), "leur" );
	deepEqual( Stem("levant"), "levant" );
	deepEqual( Stem("leve"), "leve" );
	deepEqual( Stem("levee"), "leve" );
	deepEqual( Stem("level"), "level" );
	deepEqual( Stem("levell"), "level" );
	deepEqual( Stem("levelled"), "level" );
	deepEqual( Stem("levelling"), "level" );
	deepEqual( Stem("levels"), "level" );
	deepEqual( Stem("leven"), "leven" );
	deepEqual( Stem("levers"), "lever" );
	deepEqual( Stem("leviathan"), "leviathan" );
	deepEqual( Stem("leviathans"), "leviathan" );
	deepEqual( Stem("levied"), "levi" );
	deepEqual( Stem("levies"), "levi" );
	deepEqual( Stem("levity"), "leviti" );
	deepEqual( Stem("levy"), "levi" );
	deepEqual( Stem("levying"), "levi" );
	deepEqual( Stem("lewd"), "lewd" );
	deepEqual( Stem("lewdly"), "lewdli" );
	deepEqual( Stem("lewdness"), "lewd" );
	deepEqual( Stem("lewdsters"), "lewdster" );
	deepEqual( Stem("lewes"), "lew" );
	deepEqual( Stem("lewis"), "lewi" );
	deepEqual( Stem("lexicographer"), "lexicograph" );
	deepEqual( Stem("li"), "li" );
	deepEqual( Stem("liabilities"), "liabil" );
	deepEqual( Stem("liable"), "liabl" );
	deepEqual( Stem("liaison"), "liaison" );
	deepEqual( Stem("liar"), "liar" );
	deepEqual( Stem("liars"), "liar" );
	deepEqual( Stem("libbard"), "libbard" );
	deepEqual( Stem("libelling"), "libel" );
	deepEqual( Stem("libels"), "libel" );
	deepEqual( Stem("liberal"), "liber" );
	deepEqual( Stem("liberality"), "liber" );
	deepEqual( Stem("liberally"), "liber" );
	deepEqual( Stem("liberated"), "liber" );
	deepEqual( Stem("liberation"), "liber" );
	deepEqual( Stem("liberte"), "libert" );
	deepEqual( Stem("liberties"), "liberti" );
	deepEqual( Stem("libertine"), "libertin" );
	deepEqual( Stem("libertines"), "libertin" );
	deepEqual( Stem("liberty"), "liberti" );
	deepEqual( Stem("libraries"), "librari" );
	deepEqual( Stem("library"), "librari" );
	deepEqual( Stem("libya"), "libya" );
	deepEqual( Stem("licence"), "licenc" );
	deepEqual( Stem("licens"), "licen" );
	deepEqual( Stem("license"), "licens" );
	deepEqual( Stem("licensed"), "licens" );
	deepEqual( Stem("licentious"), "licenti" );
	deepEqual( Stem("licentiousness"), "licenti" );
	deepEqual( Stem("lichas"), "licha" );
	deepEqual( Stem("licio"), "licio" );
	deepEqual( Stem("lick"), "lick" );
	deepEqual( Stem("licked"), "lick" );
	deepEqual( Stem("licker"), "licker" );
	deepEqual( Stem("licking"), "lick" );
	deepEqual( Stem("lictors"), "lictor" );
	deepEqual( Stem("lid"), "lid" );
	deepEqual( Stem("lids"), "lid" );
	deepEqual( Stem("lie"), "lie" );
	deepEqual( Stem("liebe"), "lieb" );
	deepEqual( Stem("lied"), "li" );
	deepEqual( Stem("lief"), "lief" );
	deepEqual( Stem("liefest"), "liefest" );
	deepEqual( Stem("liege"), "lieg" );
	deepEqual( Stem("liegeman"), "liegeman" );
	deepEqual( Stem("liegemen"), "liegemen" );
	deepEqual( Stem("lien"), "lien" );
	deepEqual( Stem("lies"), "li" );
	deepEqual( Stem("liest"), "liest" );
	deepEqual( Stem("lieth"), "lieth" );
	deepEqual( Stem("lieu"), "lieu" );
	deepEqual( Stem("lieut"), "lieut" );
	deepEqual( Stem("lieutenant"), "lieuten" );
	deepEqual( Stem("lieutenantry"), "lieutenantri" );
	deepEqual( Stem("lieutenants"), "lieuten" );
	deepEqual( Stem("lieve"), "liev" );
	deepEqual( Stem("life"), "life" );
	deepEqual( Stem("lifeblood"), "lifeblood" );
	deepEqual( Stem("lifeless"), "lifeless" );
	deepEqual( Stem("lifelings"), "lifel" );
	deepEqual( Stem("lifetime"), "lifetim" );
	deepEqual( Stem("lift"), "lift" );
	deepEqual( Stem("lifted"), "lift" );
	deepEqual( Stem("lifter"), "lifter" );
	deepEqual( Stem("lifteth"), "lifteth" );
	deepEqual( Stem("lifting"), "lift" );
	deepEqual( Stem("lifts"), "lift" );
	deepEqual( Stem("lig"), "lig" );
	deepEqual( Stem("ligarius"), "ligariu" );
	deepEqual( Stem("liggens"), "liggen" );
	deepEqual( Stem("light"), "light" );
	deepEqual( Stem("lighted"), "light" );
	deepEqual( Stem("lighten"), "lighten" );
	deepEqual( Stem("lightened"), "lighten" );
	deepEqual( Stem("lightens"), "lighten" );
	deepEqual( Stem("lighter"), "lighter" );
	deepEqual( Stem("lightest"), "lightest" );
	deepEqual( Stem("lighting"), "light" );
	deepEqual( Stem("lightly"), "lightli" );
	deepEqual( Stem("lightness"), "light" );
	deepEqual( Stem("lightning"), "lightn" );
	deepEqual( Stem("lightnings"), "lightn" );
	deepEqual( Stem("lights"), "light" );
	deepEqual( Stem("lightsome"), "lightsom" );
	deepEqual( Stem("ligny"), "ligni" );
	deepEqual( Stem("lii"), "lii" );
	deepEqual( Stem("liii"), "liii" );
	deepEqual( Stem("lik"), "lik" );
	deepEqual( Stem("like"), "like" );
	deepEqual( Stem("liked"), "like" );
	deepEqual( Stem("likeliest"), "likeliest" );
	deepEqual( Stem("likelihood"), "likelihood" );
	deepEqual( Stem("likelihoods"), "likelihood" );
	deepEqual( Stem("likely"), "like" );
	deepEqual( Stem("likeness"), "like" );
	deepEqual( Stem("liker"), "liker" );
	deepEqual( Stem("likes"), "like" );
	deepEqual( Stem("likest"), "likest" );
	deepEqual( Stem("likewise"), "likewis" );
	deepEqual( Stem("liking"), "like" );
	deepEqual( Stem("likings"), "like" );
	deepEqual( Stem("lilac"), "lilac" );
	deepEqual( Stem("lilies"), "lili" );
	deepEqual( Stem("lily"), "lili" );
	deepEqual( Stem("lim"), "lim" );
	deepEqual( Stem("limander"), "limand" );
	deepEqual( Stem("limb"), "limb" );
	deepEqual( Stem("limbeck"), "limbeck" );
	deepEqual( Stem("limbecks"), "limbeck" );
	deepEqual( Stem("limber"), "limber" );
	deepEqual( Stem("limbo"), "limbo" );
	deepEqual( Stem("limbs"), "limb" );
	deepEqual( Stem("lime"), "lime" );
	deepEqual( Stem("limed"), "lime" );
	deepEqual( Stem("limehouse"), "limehous" );
	deepEqual( Stem("limekilns"), "limekiln" );
	deepEqual( Stem("limes"), "lime" );
	deepEqual( Stem("limit"), "limit" );
	deepEqual( Stem("limitation"), "limit" );
	deepEqual( Stem("limited"), "limit" );
	deepEqual( Stem("limits"), "limit" );
	deepEqual( Stem("limn"), "limn" );
	deepEqual( Stem("limp"), "limp" );
	deepEqual( Stem("limping"), "limp" );
	deepEqual( Stem("limps"), "limp" );
	deepEqual( Stem("lin"), "lin" );
	deepEqual( Stem("lincoln"), "lincoln" );
	deepEqual( Stem("lincolnshire"), "lincolnshir" );
	deepEqual( Stem("line"), "line" );
	deepEqual( Stem("lineal"), "lineal" );
	deepEqual( Stem("lineally"), "lineal" );
	deepEqual( Stem("lineament"), "lineament" );
	deepEqual( Stem("lineaments"), "lineament" );
	deepEqual( Stem("lined"), "line" );
	deepEqual( Stem("linen"), "linen" );
	deepEqual( Stem("linens"), "linen" );
	deepEqual( Stem("lines"), "line" );
	deepEqual( Stem("ling"), "ling" );
	deepEqual( Stem("lingare"), "lingar" );
	deepEqual( Stem("linger"), "linger" );
	deepEqual( Stem("lingered"), "linger" );
	deepEqual( Stem("lingering"), "linger" );
	deepEqual( Stem("lingers"), "linger" );
	deepEqual( Stem("linguist"), "linguist" );
	deepEqual( Stem("lining"), "line" );
	deepEqual( Stem("link"), "link" );
	deepEqual( Stem("links"), "link" );
	deepEqual( Stem("linning"), "lin" );
	deepEqual( Stem("linsey"), "linsei" );
	deepEqual( Stem("linstock"), "linstock" );
	deepEqual( Stem("linta"), "linta" );
	deepEqual( Stem("linton"), "linton" );
	deepEqual( Stem("lion"), "lion" );
	deepEqual( Stem("lionel"), "lionel" );
	deepEqual( Stem("lioness"), "lioness" );
	deepEqual( Stem("lions"), "lion" );
	deepEqual( Stem("lip"), "lip" );
	deepEqual( Stem("lipp"), "lipp" );
	deepEqual( Stem("lips"), "lip" );
	deepEqual( Stem("lipsbury"), "lipsburi" );
	deepEqual( Stem("liqueurs"), "liqueur" );
	deepEqual( Stem("liquid"), "liquid" );
	deepEqual( Stem("liquor"), "liquor" );
	deepEqual( Stem("liquorish"), "liquorish" );
	deepEqual( Stem("liquors"), "liquor" );
	deepEqual( Stem("lirra"), "lirra" );
	deepEqual( Stem("lisbon"), "lisbon" );
	deepEqual( Stem("lish"), "lish" );
	deepEqual( Stem("lisp"), "lisp" );
	deepEqual( Stem("lisped"), "lisp" );
	deepEqual( Stem("lisping"), "lisp" );
	deepEqual( Stem("list"), "list" );
	deepEqual( Stem("listen"), "listen" );
	deepEqual( Stem("listened"), "listen" );
	deepEqual( Stem("listeners"), "listen" );
	deepEqual( Stem("listening"), "listen" );
	deepEqual( Stem("listless"), "listless" );
	deepEqual( Stem("liston"), "liston" );
	deepEqual( Stem("lists"), "list" );
	deepEqual( Stem("literary"), "literari" );
	deepEqual( Stem("literature"), "literatur" );
	deepEqual( Stem("literatured"), "literatur" );
	deepEqual( Stem("lither"), "lither" );
	deepEqual( Stem("litter"), "litter" );
	deepEqual( Stem("littered"), "litter" );
	deepEqual( Stem("litters"), "litter" );
	deepEqual( Stem("littery"), "litteri" );
	deepEqual( Stem("littl"), "littl" );
	deepEqual( Stem("little"), "littl" );
	deepEqual( Stem("littlest"), "littlest" );
	deepEqual( Stem("liv"), "liv" );
	deepEqual( Stem("live"), "live" );
	deepEqual( Stem("lived"), "live" );
	deepEqual( Stem("livelier"), "liveli" );
	deepEqual( Stem("livelihood"), "livelihood" );
	deepEqual( Stem("liveliness"), "liveli" );
	deepEqual( Stem("livelong"), "livelong" );
	deepEqual( Stem("lively"), "live" );
	deepEqual( Stem("liver"), "liver" );
	deepEqual( Stem("liveries"), "liveri" );
	deepEqual( Stem("livermore"), "livermor" );
	deepEqual( Stem("liverpool"), "liverpool" );
	deepEqual( Stem("livers"), "liver" );
	deepEqual( Stem("liverseege"), "liverseeg" );
	deepEqual( Stem("livery"), "liveri" );
	deepEqual( Stem("lives"), "live" );
	deepEqual( Stem("livest"), "livest" );
	deepEqual( Stem("liveth"), "liveth" );
	deepEqual( Stem("livia"), "livia" );
	deepEqual( Stem("livid"), "livid" );
	deepEqual( Stem("living"), "live" );
	deepEqual( Stem("livings"), "live" );
	deepEqual( Stem("lix"), "lix" );
	deepEqual( Stem("lizard"), "lizard" );
	deepEqual( Stem("lizards"), "lizard" );
	deepEqual( Stem("ll"), "ll" );
	deepEqual( Stem("lll"), "lll" );
	deepEqual( Stem("llous"), "llou" );
	deepEqual( Stem("lnd"), "lnd" );
	deepEqual( Stem("lo"), "lo" );
	deepEqual( Stem("loa"), "loa" );
	deepEqual( Stem("loach"), "loach" );
	deepEqual( Stem("load"), "load" );
	deepEqual( Stem("loaded"), "load" );
	deepEqual( Stem("loaden"), "loaden" );
	deepEqual( Stem("loading"), "load" );
	deepEqual( Stem("loads"), "load" );
	deepEqual( Stem("loaf"), "loaf" );
	deepEqual( Stem("loam"), "loam" );
	deepEqual( Stem("loan"), "loan" );
	deepEqual( Stem("loath"), "loath" );
	deepEqual( Stem("loathe"), "loath" );
	deepEqual( Stem("loathed"), "loath" );
	deepEqual( Stem("loather"), "loather" );
	deepEqual( Stem("loathes"), "loath" );
	deepEqual( Stem("loathing"), "loath" );
	deepEqual( Stem("loathly"), "loathli" );
	deepEqual( Stem("loathness"), "loath" );
	deepEqual( Stem("loathsome"), "loathsom" );
	deepEqual( Stem("loathsomeness"), "loathsom" );
	deepEqual( Stem("loathsomest"), "loathsomest" );
	deepEqual( Stem("loaves"), "loav" );
	deepEqual( Stem("lob"), "lob" );
	deepEqual( Stem("lobbies"), "lobbi" );
	deepEqual( Stem("lobby"), "lobbi" );
	deepEqual( Stem("lobster"), "lobster" );
	deepEqual( Stem("lobsters"), "lobster" );
	deepEqual( Stem("local"), "local" );
	deepEqual( Stem("locality"), "local" );
	deepEqual( Stem("locataires"), "locatair" );
	deepEqual( Stem("located"), "locat" );
	deepEqual( Stem("lochaber"), "lochab" );
	deepEqual( Stem("lock"), "lock" );
	deepEqual( Stem("locked"), "lock" );
	deepEqual( Stem("locker"), "locker" );
	deepEqual( Stem("locket"), "locket" );
	deepEqual( Stem("locking"), "lock" );
	deepEqual( Stem("lockram"), "lockram" );
	deepEqual( Stem("locks"), "lock" );
	deepEqual( Stem("locomotion"), "locomot" );
	deepEqual( Stem("locusts"), "locust" );
	deepEqual( Stem("lode"), "lode" );
	deepEqual( Stem("loder"), "loder" );
	deepEqual( Stem("lodg"), "lodg" );
	deepEqual( Stem("lodge"), "lodg" );
	deepEqual( Stem("lodged"), "lodg" );
	deepEqual( Stem("lodger"), "lodger" );
	deepEqual( Stem("lodgers"), "lodger" );
	deepEqual( Stem("lodges"), "lodg" );
	deepEqual( Stem("lodging"), "lodg" );
	deepEqual( Stem("lodgings"), "lodg" );
	deepEqual( Stem("lodgment"), "lodgment" );
	deepEqual( Stem("lodovico"), "lodovico" );
	deepEqual( Stem("lodowick"), "lodowick" );
	deepEqual( Stem("loftier"), "loftier" );
	deepEqual( Stem("loftiest"), "loftiest" );
	deepEqual( Stem("lofty"), "lofti" );
	deepEqual( Stem("log"), "log" );
	deepEqual( Stem("logarithms"), "logarithm" );
	deepEqual( Stem("loge"), "loge" );
	deepEqual( Stem("logger"), "logger" );
	deepEqual( Stem("loggerhead"), "loggerhead" );
	deepEqual( Stem("loggerheads"), "loggerhead" );
	deepEqual( Stem("loggets"), "logget" );
	deepEqual( Stem("logic"), "logic" );
	deepEqual( Stem("logical"), "logic" );
	deepEqual( Stem("logically"), "logic" );
	deepEqual( Stem("logies"), "logi" );
	deepEqual( Stem("logs"), "log" );
	deepEqual( Stem("logy"), "logi" );
	deepEqual( Stem("loif"), "loif" );
	deepEqual( Stem("loin"), "loin" );
	deepEqual( Stem("loins"), "loin" );
	deepEqual( Stem("loiter"), "loiter" );
	deepEqual( Stem("loitered"), "loiter" );
	deepEqual( Stem("loiterer"), "loiter" );
	deepEqual( Stem("loiterers"), "loiter" );
	deepEqual( Stem("loitering"), "loiter" );
	deepEqual( Stem("loll"), "loll" );
	deepEqual( Stem("lolled"), "loll" );
	deepEqual( Stem("lolling"), "loll" );
	deepEqual( Stem("lollipop"), "lollipop" );
	deepEqual( Stem("lollipops"), "lollipop" );
	deepEqual( Stem("lolls"), "loll" );
	deepEqual( Stem("lollypop"), "lollypop" );
	deepEqual( Stem("lombard"), "lombard" );
	deepEqual( Stem("lombardy"), "lombardi" );
	deepEqual( Stem("london"), "london" );
	deepEqual( Stem("londonderry"), "londonderri" );
	deepEqual( Stem("londoner"), "london" );
	deepEqual( Stem("londoners"), "london" );
	deepEqual( Stem("lone"), "lone" );
	deepEqual( Stem("loneliness"), "loneli" );
	deepEqual( Stem("lonely"), "lone" );
	deepEqual( Stem("long"), "long" );
	deepEqual( Stem("longaville"), "longavil" );
	deepEqual( Stem("longboat"), "longboat" );
	deepEqual( Stem("longed"), "long" );
	deepEqual( Stem("longer"), "longer" );
	deepEqual( Stem("longest"), "longest" );
	deepEqual( Stem("longeth"), "longeth" );
	deepEqual( Stem("longing"), "long" );
	deepEqual( Stem("longings"), "long" );
	deepEqual( Stem("longly"), "longli" );
	deepEqual( Stem("longs"), "long" );
	deepEqual( Stem("longtail"), "longtail" );
	deepEqual( Stem("longwood"), "longwood" );
	deepEqual( Stem("loo"), "loo" );
	deepEqual( Stem("loof"), "loof" );
	deepEqual( Stem("look"), "look" );
	deepEqual( Stem("looked"), "look" );
	deepEqual( Stem("looker"), "looker" );
	deepEqual( Stem("lookers"), "looker" );
	deepEqual( Stem("lookest"), "lookest" );
	deepEqual( Stem("looking"), "look" );
	deepEqual( Stem("looks"), "look" );
	deepEqual( Stem("loon"), "loon" );
	deepEqual( Stem("loop"), "loop" );
	deepEqual( Stem("loos"), "loo" );
	deepEqual( Stem("loose"), "loos" );
	deepEqual( Stem("loosed"), "loos" );
	deepEqual( Stem("loosely"), "loos" );
	deepEqual( Stem("loosen"), "loosen" );
	deepEqual( Stem("loosing"), "loos" );
	deepEqual( Stem("lop"), "lop" );
	deepEqual( Stem("lopp"), "lopp" );
	deepEqual( Stem("lopped"), "lop" );
	deepEqual( Stem("loquitur"), "loquitur" );
	deepEqual( Stem("lor"), "lor" );
	deepEqual( Stem("lord"), "lord" );
	deepEqual( Stem("lorded"), "lord" );
	deepEqual( Stem("lording"), "lord" );
	deepEqual( Stem("lordings"), "lord" );
	deepEqual( Stem("lordliness"), "lordli" );
	deepEqual( Stem("lordly"), "lordli" );
	deepEqual( Stem("lords"), "lord" );
	deepEqual( Stem("lordship"), "lordship" );
	deepEqual( Stem("lordships"), "lordship" );
	deepEqual( Stem("lorenzo"), "lorenzo" );
	deepEqual( Stem("lorgnon"), "lorgnon" );
	deepEqual( Stem("lorn"), "lorn" );
	deepEqual( Stem("lorraine"), "lorrain" );
	deepEqual( Stem("lorship"), "lorship" );
	deepEqual( Stem("los"), "lo" );
	deepEqual( Stem("lose"), "lose" );
	deepEqual( Stem("loser"), "loser" );
	deepEqual( Stem("losers"), "loser" );
	deepEqual( Stem("loses"), "lose" );
	deepEqual( Stem("losest"), "losest" );
	deepEqual( Stem("loseth"), "loseth" );
	deepEqual( Stem("losing"), "lose" );
	deepEqual( Stem("losings"), "lose" );
	deepEqual( Stem("loss"), "loss" );
	deepEqual( Stem("losses"), "loss" );
	deepEqual( Stem("lost"), "lost" );
	deepEqual( Stem("lot"), "lot" );
	deepEqual( Stem("loth"), "loth" );
	deepEqual( Stem("lots"), "lot" );
	deepEqual( Stem("lott"), "lott" );
	deepEqual( Stem("lottery"), "lotteri" );
	deepEqual( Stem("loud"), "loud" );
	deepEqual( Stem("louder"), "louder" );
	deepEqual( Stem("loudest"), "loudest" );
	deepEqual( Stem("loudly"), "loudli" );
	deepEqual( Stem("loudness"), "loud" );
	deepEqual( Stem("louis"), "loui" );
	deepEqual( Stem("louisa"), "louisa" );
	deepEqual( Stem("lounged"), "loung" );
	deepEqual( Stem("loungers"), "lounger" );
	deepEqual( Stem("lounging"), "loung" );
	deepEqual( Stem("lour"), "lour" );
	deepEqual( Stem("loureth"), "loureth" );
	deepEqual( Stem("louring"), "lour" );
	deepEqual( Stem("louse"), "lous" );
	deepEqual( Stem("louses"), "lous" );
	deepEqual( Stem("lousy"), "lousi" );
	deepEqual( Stem("lout"), "lout" );
	deepEqual( Stem("louted"), "lout" );
	deepEqual( Stem("louts"), "lout" );
	deepEqual( Stem("louvre"), "louvr" );
	deepEqual( Stem("lov"), "lov" );
	deepEqual( Stem("love"), "love" );
	deepEqual( Stem("loved"), "love" );
	deepEqual( Stem("lovedst"), "lovedst" );
	deepEqual( Stem("lovel"), "lovel" );
	deepEqual( Stem("lovelier"), "loveli" );
	deepEqual( Stem("loveliness"), "loveli" );
	deepEqual( Stem("lovell"), "lovel" );
	deepEqual( Stem("lovely"), "love" );
	deepEqual( Stem("lover"), "lover" );
	deepEqual( Stem("lovered"), "lover" );
	deepEqual( Stem("lovers"), "lover" );
	deepEqual( Stem("loves"), "love" );
	deepEqual( Stem("lovest"), "lovest" );
	deepEqual( Stem("loveth"), "loveth" );
	deepEqual( Stem("loving"), "love" );
	deepEqual( Stem("lovingly"), "lovingli" );
	deepEqual( Stem("low"), "low" );
	deepEqual( Stem("lowe"), "low" );
	deepEqual( Stem("lower"), "lower" );
	deepEqual( Stem("lowest"), "lowest" );
	deepEqual( Stem("lowing"), "low" );
	deepEqual( Stem("lowliness"), "lowli" );
	deepEqual( Stem("lowly"), "lowli" );
	deepEqual( Stem("lown"), "lown" );
	deepEqual( Stem("lowness"), "low" );
	deepEqual( Stem("loyal"), "loyal" );
	deepEqual( Stem("loyalist"), "loyalist" );
	deepEqual( Stem("loyally"), "loyal" );
	deepEqual( Stem("loyalties"), "loyalti" );
	deepEqual( Stem("loyalty"), "loyalti" );
	deepEqual( Stem("loyola"), "loyola" );
	deepEqual( Stem("lozel"), "lozel" );
	deepEqual( Stem("lozenge"), "lozeng" );
	deepEqual( Stem("lozenges"), "lozeng" );
	deepEqual( Stem("lt"), "lt" );
	deepEqual( Stem("lubber"), "lubber" );
	deepEqual( Stem("lubberly"), "lubberli" );
	deepEqual( Stem("luc"), "luc" );
	deepEqual( Stem("luccicos"), "luccico" );
	deepEqual( Stem("luce"), "luce" );
	deepEqual( Stem("lucentio"), "lucentio" );
	deepEqual( Stem("luces"), "luce" );
	deepEqual( Stem("lucetta"), "lucetta" );
	deepEqual( Stem("luciana"), "luciana" );
	deepEqual( Stem("lucianus"), "lucianu" );
	deepEqual( Stem("lucid"), "lucid" );
	deepEqual( Stem("lucifer"), "lucif" );
	deepEqual( Stem("lucifier"), "lucifi" );
	deepEqual( Stem("lucilius"), "luciliu" );
	deepEqual( Stem("lucina"), "lucina" );
	deepEqual( Stem("lucio"), "lucio" );
	deepEqual( Stem("lucius"), "luciu" );
	deepEqual( Stem("luck"), "luck" );
	deepEqual( Stem("luckier"), "luckier" );
	deepEqual( Stem("luckiest"), "luckiest" );
	deepEqual( Stem("luckily"), "luckili" );
	deepEqual( Stem("luckless"), "luckless" );
	deepEqual( Stem("lucky"), "lucki" );
	deepEqual( Stem("lucrative"), "lucr" );
	deepEqual( Stem("lucre"), "lucr" );
	deepEqual( Stem("lucrece"), "lucrec" );
	deepEqual( Stem("lucretia"), "lucretia" );
	deepEqual( Stem("lucullius"), "luculliu" );
	deepEqual( Stem("lucullus"), "lucullu" );
	deepEqual( Stem("lucy"), "luci" );
	deepEqual( Stem("lud"), "lud" );
	deepEqual( Stem("ludgate"), "ludgat" );
	deepEqual( Stem("ludicrous"), "ludicr" );
	deepEqual( Stem("ludlow"), "ludlow" );
	deepEqual( Stem("lug"), "lug" );
	deepEqual( Stem("lugg"), "lugg" );
	deepEqual( Stem("luggage"), "luggag" );
	deepEqual( Stem("luke"), "luke" );
	deepEqual( Stem("lukewarm"), "lukewarm" );
	deepEqual( Stem("lull"), "lull" );
	deepEqual( Stem("lulla"), "lulla" );
	deepEqual( Stem("lullaby"), "lullabi" );
	deepEqual( Stem("lulls"), "lull" );
	deepEqual( Stem("lumbago"), "lumbago" );
	deepEqual( Stem("lumber"), "lumber" );
	deepEqual( Stem("lumbert"), "lumbert" );
	deepEqual( Stem("lump"), "lump" );
	deepEqual( Stem("lumpish"), "lumpish" );
	deepEqual( Stem("luna"), "luna" );
	deepEqual( Stem("lunacies"), "lunaci" );
	deepEqual( Stem("lunacy"), "lunaci" );
	deepEqual( Stem("lunatic"), "lunat" );
	deepEqual( Stem("lunatics"), "lunat" );
	deepEqual( Stem("lunch"), "lunch" );
	deepEqual( Stem("luncheon"), "luncheon" );
	deepEqual( Stem("lunes"), "lune" );
	deepEqual( Stem("lunging"), "lung" );
	deepEqual( Stem("lungs"), "lung" );
	deepEqual( Stem("lupercal"), "luperc" );
	deepEqual( Stem("lurch"), "lurch" );
	deepEqual( Stem("lure"), "lure" );
	deepEqual( Stem("lurk"), "lurk" );
	deepEqual( Stem("lurked"), "lurk" );
	deepEqual( Stem("lurketh"), "lurketh" );
	deepEqual( Stem("lurking"), "lurk" );
	deepEqual( Stem("lurks"), "lurk" );
	deepEqual( Stem("luscious"), "lusciou" );
	deepEqual( Stem("lush"), "lush" );
	deepEqual( Stem("lust"), "lust" );
	deepEqual( Stem("lusted"), "lust" );
	deepEqual( Stem("luster"), "luster" );
	deepEqual( Stem("lustful"), "lust" );
	deepEqual( Stem("lustier"), "lustier" );
	deepEqual( Stem("lustiest"), "lustiest" );
	deepEqual( Stem("lustig"), "lustig" );
	deepEqual( Stem("lustihood"), "lustihood" );
	deepEqual( Stem("lustily"), "lustili" );
	deepEqual( Stem("lustre"), "lustr" );
	deepEqual( Stem("lustrous"), "lustrou" );
	deepEqual( Stem("lusts"), "lust" );
	deepEqual( Stem("lusty"), "lusti" );
	deepEqual( Stem("lute"), "lute" );
	deepEqual( Stem("lutes"), "lute" );
	deepEqual( Stem("lutestring"), "lutestr" );
	deepEqual( Stem("lutheran"), "lutheran" );
	deepEqual( Stem("luxuries"), "luxuri" );
	deepEqual( Stem("luxurious"), "luxuri" );
	deepEqual( Stem("luxuriously"), "luxuri" );
	deepEqual( Stem("luxury"), "luxuri" );
	deepEqual( Stem("lv"), "lv" );
	deepEqual( Stem("lvi"), "lvi" );
	deepEqual( Stem("lvii"), "lvii" );
	deepEqual( Stem("lviii"), "lviii" );
	deepEqual( Stem("lx"), "lx" );
	deepEqual( Stem("lxi"), "lxi" );
	deepEqual( Stem("lxii"), "lxii" );
	deepEqual( Stem("lxiii"), "lxiii" );
	deepEqual( Stem("lxiv"), "lxiv" );
	deepEqual( Stem("lxv"), "lxv" );
	deepEqual( Stem("lxvi"), "lxvi" );
	deepEqual( Stem("lxvii"), "lxvii" );
	deepEqual( Stem("ly"), "ly" );
	deepEqual( Stem("lycaonia"), "lycaonia" );
	deepEqual( Stem("lycurguses"), "lycurgus" );
	deepEqual( Stem("lydia"), "lydia" );
	deepEqual( Stem("lye"), "lye" );
	deepEqual( Stem("lyen"), "lyen" );
	deepEqual( Stem("lying"), "ly" );
	deepEqual( Stem("lym"), "lym" );
	deepEqual( Stem("lymoges"), "lymog" );
	deepEqual( Stem("lynn"), "lynn" );
	deepEqual( Stem("lyons"), "lyon" );
	deepEqual( Stem("lyrics"), "lyric" );
	deepEqual( Stem("lysander"), "lysand" );
	deepEqual( Stem("m"), "m" );
	deepEqual( Stem("ma"), "ma" );
	deepEqual( Stem("maan"), "maan" );
	deepEqual( Stem("mab"), "mab" );
	deepEqual( Stem("mac"), "mac" );
	deepEqual( Stem("macabau"), "macabau" );
	deepEqual( Stem("macadam"), "macadam" );
	deepEqual( Stem("macaroons"), "macaroon" );
	deepEqual( Stem("macbeth"), "macbeth" );
	deepEqual( Stem("macbeths"), "macbeth" );
	deepEqual( Stem("maccabaeus"), "maccabaeu" );
	deepEqual( Stem("macdonwald"), "macdonwald" );
	deepEqual( Stem("macduff"), "macduff" );
	deepEqual( Stem("mace"), "mace" );
	deepEqual( Stem("macedon"), "macedon" );
	deepEqual( Stem("maces"), "mace" );
	deepEqual( Stem("machiavel"), "machiavel" );
	deepEqual( Stem("machiavellian"), "machiavellian" );
	deepEqual( Stem("machination"), "machin" );
	deepEqual( Stem("machinations"), "machin" );
	deepEqual( Stem("machine"), "machin" );
	deepEqual( Stem("machines"), "machin" );
	deepEqual( Stem("mack"), "mack" );
	deepEqual( Stem("macmorris"), "macmorri" );
	deepEqual( Stem("macmurdo"), "macmurdo" );
	deepEqual( Stem("macraw"), "macraw" );
	deepEqual( Stem("mactavish"), "mactavish" );
	deepEqual( Stem("maculate"), "macul" );
	deepEqual( Stem("maculation"), "macul" );
	deepEqual( Stem("macwhirter"), "macwhirt" );
	deepEqual( Stem("mad"), "mad" );
	deepEqual( Stem("madam"), "madam" );
	deepEqual( Stem("madame"), "madam" );
	deepEqual( Stem("madams"), "madam" );
	deepEqual( Stem("madcap"), "madcap" );
	deepEqual( Stem("madded"), "mad" );
	deepEqual( Stem("maddened"), "madden" );
	deepEqual( Stem("maddening"), "madden" );
	deepEqual( Stem("madding"), "mad" );
	deepEqual( Stem("made"), "made" );
	deepEqual( Stem("madeira"), "madeira" );
	deepEqual( Stem("mademoiselle"), "mademoisel" );
	deepEqual( Stem("madly"), "madli" );
	deepEqual( Stem("madman"), "madman" );
	deepEqual( Stem("madmen"), "madmen" );
	deepEqual( Stem("madness"), "mad" );
	deepEqual( Stem("madonna"), "madonna" );
	deepEqual( Stem("madras"), "madra" );
	deepEqual( Stem("madrigals"), "madrig" );
	deepEqual( Stem("mads"), "mad" );
	deepEqual( Stem("maecenas"), "maecena" );
	deepEqual( Stem("magasin"), "magasin" );
	deepEqual( Stem("magazine"), "magazin" );
	deepEqual( Stem("magenis"), "mageni" );
	deepEqual( Stem("maggot"), "maggot" );
	deepEqual( Stem("maggots"), "maggot" );
	deepEqual( Stem("magic"), "magic" );
	deepEqual( Stem("magical"), "magic" );
	deepEqual( Stem("magician"), "magician" );
	deepEqual( Stem("magistrate"), "magistr" );
	deepEqual( Stem("magistrates"), "magistr" );
	deepEqual( Stem("magnanimity"), "magnanim" );
	deepEqual( Stem("magnanimous"), "magnanim" );
	deepEqual( Stem("magnate"), "magnat" );
	deepEqual( Stem("magnates"), "magnat" );
	deepEqual( Stem("magnetism"), "magnet" );
	deepEqual( Stem("magni"), "magni" );
	deepEqual( Stem("magnifi"), "magnifi" );
	deepEqual( Stem("magnificence"), "magnific" );
	deepEqual( Stem("magnificent"), "magnific" );
	deepEqual( Stem("magnificently"), "magnific" );
	deepEqual( Stem("magnifico"), "magnifico" );
	deepEqual( Stem("magnificoes"), "magnifico" );
	deepEqual( Stem("magnified"), "magnifi" );
	deepEqual( Stem("magnolia"), "magnolia" );
	deepEqual( Stem("magnolias"), "magnolia" );
	deepEqual( Stem("magnus"), "magnu" );
	deepEqual( Stem("mahogany"), "mahogani" );
	deepEqual( Stem("mahomet"), "mahomet" );
	deepEqual( Stem("mahometan"), "mahometan" );
	deepEqual( Stem("mahout"), "mahout" );
	deepEqual( Stem("mahu"), "mahu" );
	deepEqual( Stem("maid"), "maid" );
	deepEqual( Stem("maiden"), "maiden" );
	deepEqual( Stem("maidenhead"), "maidenhead" );
	deepEqual( Stem("maidenheads"), "maidenhead" );
	deepEqual( Stem("maidenhood"), "maidenhood" );
	deepEqual( Stem("maidenhoods"), "maidenhood" );
	deepEqual( Stem("maidenliest"), "maidenliest" );
	deepEqual( Stem("maidenly"), "maidenli" );
	deepEqual( Stem("maidens"), "maiden" );
	deepEqual( Stem("maidhood"), "maidhood" );
	deepEqual( Stem("maids"), "maid" );
	deepEqual( Stem("maidservant"), "maidserv" );
	deepEqual( Stem("maidservants"), "maidserv" );
	deepEqual( Stem("mail"), "mail" );
	deepEqual( Stem("mailed"), "mail" );
	deepEqual( Stem("mails"), "mail" );
	deepEqual( Stem("maim"), "maim" );
	deepEqual( Stem("maimed"), "maim" );
	deepEqual( Stem("maims"), "maim" );
	deepEqual( Stem("main"), "main" );
	deepEqual( Stem("maincourse"), "maincours" );
	deepEqual( Stem("maine"), "main" );
	deepEqual( Stem("mainly"), "mainli" );
	deepEqual( Stem("mainmast"), "mainmast" );
	deepEqual( Stem("mains"), "main" );
	deepEqual( Stem("maintain"), "maintain" );
	deepEqual( Stem("maintained"), "maintain" );
	deepEqual( Stem("maintaining"), "maintain" );
	deepEqual( Stem("maintains"), "maintain" );
	deepEqual( Stem("maintenance"), "mainten" );
	deepEqual( Stem("maintenon"), "maintenon" );
	deepEqual( Stem("maintenong"), "maintenong" );
	deepEqual( Stem("mais"), "mai" );
	deepEqual( Stem("maison"), "maison" );
	deepEqual( Stem("maitre"), "maitr" );
	deepEqual( Stem("majestas"), "majesta" );
	deepEqual( Stem("majestee"), "majeste" );
	deepEqual( Stem("majestic"), "majest" );
	deepEqual( Stem("majestical"), "majest" );
	deepEqual( Stem("majestically"), "majest" );
	deepEqual( Stem("majesties"), "majesti" );
	deepEqual( Stem("majesty"), "majesti" );
	deepEqual( Stem("major"), "major" );
	deepEqual( Stem("majority"), "major" );
	deepEqual( Stem("mak"), "mak" );
	deepEqual( Stem("make"), "make" );
	deepEqual( Stem("makeless"), "makeless" );
	deepEqual( Stem("makepeace"), "makepeac" );
	deepEqual( Stem("maker"), "maker" );
	deepEqual( Stem("makers"), "maker" );
	deepEqual( Stem("makes"), "make" );
	deepEqual( Stem("makest"), "makest" );
	deepEqual( Stem("maketh"), "maketh" );
	deepEqual( Stem("making"), "make" );
	deepEqual( Stem("makings"), "make" );
	deepEqual( Stem("mal"), "mal" );
	deepEqual( Stem("mala"), "mala" );
	deepEqual( Stem("maladies"), "maladi" );
	deepEqual( Stem("malady"), "maladi" );
	deepEqual( Stem("malapert"), "malapert" );
	deepEqual( Stem("malaria"), "malaria" );
	deepEqual( Stem("malbrook"), "malbrook" );
	deepEqual( Stem("malcolm"), "malcolm" );
	deepEqual( Stem("malcontent"), "malcont" );
	deepEqual( Stem("malcontents"), "malcont" );
	deepEqual( Stem("male"), "male" );
	deepEqual( Stem("maledictions"), "maledict" );
	deepEqual( Stem("malefactions"), "malefact" );
	deepEqual( Stem("malefactor"), "malefactor" );
	deepEqual( Stem("malefactors"), "malefactor" );
	deepEqual( Stem("males"), "male" );
	deepEqual( Stem("malevolence"), "malevol" );
	deepEqual( Stem("malevolent"), "malevol" );
	deepEqual( Stem("malhecho"), "malhecho" );
	deepEqual( Stem("malice"), "malic" );
	deepEqual( Stem("malicious"), "malici" );
	deepEqual( Stem("maliciously"), "malici" );
	deepEqual( Stem("malign"), "malign" );
	deepEqual( Stem("malignancy"), "malign" );
	deepEqual( Stem("malignant"), "malign" );
	deepEqual( Stem("malignantly"), "malignantli" );
	deepEqual( Stem("maligned"), "malign" );
	deepEqual( Stem("malines"), "malin" );
	deepEqual( Stem("malkin"), "malkin" );
	deepEqual( Stem("mall"), "mall" );
	deepEqual( Stem("mallard"), "mallard" );
	deepEqual( Stem("mallet"), "mallet" );
	deepEqual( Stem("mallow"), "mallow" );
	deepEqual( Stem("mallows"), "mallow" );
	deepEqual( Stem("malloy"), "malloi" );
	deepEqual( Stem("malmesbury"), "malmesburi" );
	deepEqual( Stem("malmsey"), "malmsei" );
	deepEqual( Stem("malony"), "maloni" );
	deepEqual( Stem("malonys"), "maloni" );
	deepEqual( Stem("malt"), "malt" );
	deepEqual( Stem("maltreat"), "maltreat" );
	deepEqual( Stem("maltworms"), "maltworm" );
	deepEqual( Stem("malvolio"), "malvolio" );
	deepEqual( Stem("mama"), "mama" );
	deepEqual( Stem("mamillius"), "mamilliu" );
	deepEqual( Stem("mamma"), "mamma" );
	deepEqual( Stem("mammas"), "mamma" );
	deepEqual( Stem("mammering"), "mammer" );
	deepEqual( Stem("mammet"), "mammet" );
	deepEqual( Stem("mammets"), "mammet" );
	deepEqual( Stem("mammock"), "mammock" );
	deepEqual( Stem("mammon"), "mammon" );
	deepEqual( Stem("man"), "man" );
	deepEqual( Stem("manacle"), "manacl" );
	deepEqual( Stem("manacles"), "manacl" );
	deepEqual( Stem("manage"), "manag" );
	deepEqual( Stem("managed"), "manag" );
	deepEqual( Stem("management"), "manag" );
	deepEqual( Stem("manager"), "manag" );
	deepEqual( Stem("managing"), "manag" );
	deepEqual( Stem("manakin"), "manakin" );
	deepEqual( Stem("manasseh"), "manasseh" );
	deepEqual( Stem("manchen"), "manchen" );
	deepEqual( Stem("manchester"), "manchest" );
	deepEqual( Stem("manchus"), "manchu" );
	deepEqual( Stem("mandate"), "mandat" );
	deepEqual( Stem("mandragora"), "mandragora" );
	deepEqual( Stem("mandrake"), "mandrak" );
	deepEqual( Stem("mandrakes"), "mandrak" );
	deepEqual( Stem("mane"), "mane" );
	deepEqual( Stem("manent"), "manent" );
	deepEqual( Stem("manes"), "mane" );
	deepEqual( Stem("manet"), "manet" );
	deepEqual( Stem("manfully"), "manfulli" );
	deepEqual( Stem("mangelwurzel"), "mangelwurzel" );
	deepEqual( Stem("mangle"), "mangl" );
	deepEqual( Stem("mangled"), "mangl" );
	deepEqual( Stem("mangles"), "mangl" );
	deepEqual( Stem("mangling"), "mangl" );
	deepEqual( Stem("mangnall"), "mangnal" );
	deepEqual( Stem("mango"), "mango" );
	deepEqual( Stem("mangoes"), "mango" );
	deepEqual( Stem("mangy"), "mangi" );
	deepEqual( Stem("manhood"), "manhood" );
	deepEqual( Stem("manhoods"), "manhood" );
	deepEqual( Stem("mania"), "mania" );
	deepEqual( Stem("manifest"), "manifest" );
	deepEqual( Stem("manifested"), "manifest" );
	deepEqual( Stem("manifests"), "manifest" );
	deepEqual( Stem("manifold"), "manifold" );
	deepEqual( Stem("manifoldly"), "manifoldli" );
	deepEqual( Stem("manka"), "manka" );
	deepEqual( Stem("mankind"), "mankind" );
	deepEqual( Stem("manlike"), "manlik" );
	deepEqual( Stem("manly"), "manli" );
	deepEqual( Stem("mann"), "mann" );
	deepEqual( Stem("manna"), "manna" );
	deepEqual( Stem("manner"), "manner" );
	deepEqual( Stem("mannerly"), "mannerli" );
	deepEqual( Stem("manners"), "manner" );
	deepEqual( Stem("manningtree"), "manningtre" );
	deepEqual( Stem("mannish"), "mannish" );
	deepEqual( Stem("manoeuvre"), "manoeuvr" );
	deepEqual( Stem("manoeuvres"), "manoeuvr" );
	deepEqual( Stem("manor"), "manor" );
	deepEqual( Stem("manors"), "manor" );
	deepEqual( Stem("mans"), "man" );
	deepEqual( Stem("mansion"), "mansion" );
	deepEqual( Stem("mansionry"), "mansionri" );
	deepEqual( Stem("mansions"), "mansion" );
	deepEqual( Stem("manslaughter"), "manslaught" );
	deepEqual( Stem("mantel"), "mantel" );
	deepEqual( Stem("mantelpiece"), "mantelpiec" );
	deepEqual( Stem("mantle"), "mantl" );
	deepEqual( Stem("mantled"), "mantl" );
	deepEqual( Stem("mantles"), "mantl" );
	deepEqual( Stem("manton"), "manton" );
	deepEqual( Stem("mantrap"), "mantrap" );
	deepEqual( Stem("mantua"), "mantua" );
	deepEqual( Stem("mantuan"), "mantuan" );
	deepEqual( Stem("manual"), "manual" );
	deepEqual( Stem("manufactured"), "manufactur" );
	deepEqual( Stem("manure"), "manur" );
	deepEqual( Stem("manured"), "manur" );
	deepEqual( Stem("manus"), "manu" );
	deepEqual( Stem("many"), "mani" );
	deepEqual( Stem("map"), "map" );
	deepEqual( Stem("mapp"), "mapp" );
	deepEqual( Stem("maps"), "map" );
	deepEqual( Stem("mar"), "mar" );
	deepEqual( Stem("marabou"), "marab" );
	deepEqual( Stem("maraschino"), "maraschino" );
	deepEqual( Stem("marauding"), "maraud" );
	deepEqual( Stem("marble"), "marbl" );
	deepEqual( Stem("marbled"), "marbl" );
	deepEqual( Stem("marcade"), "marcad" );
	deepEqual( Stem("marcellus"), "marcellu" );
	deepEqual( Stem("march"), "march" );
	deepEqual( Stem("marche"), "march" );
	deepEqual( Stem("marched"), "march" );
	deepEqual( Stem("marches"), "march" );
	deepEqual( Stem("marchese"), "marches" );
	deepEqual( Stem("marcheth"), "marcheth" );
	deepEqual( Stem("marching"), "march" );
	deepEqual( Stem("marchioness"), "marchio" );
	deepEqual( Stem("marchpane"), "marchpan" );
	deepEqual( Stem("marcians"), "marcian" );
	deepEqual( Stem("marcius"), "marciu" );
	deepEqual( Stem("marcus"), "marcu" );
	deepEqual( Stem("mardian"), "mardian" );
	deepEqual( Stem("mare"), "mare" );
	deepEqual( Stem("marechale"), "marechal" );
	deepEqual( Stem("marengo"), "marengo" );
	deepEqual( Stem("mares"), "mare" );
	deepEqual( Stem("marg"), "marg" );
	deepEqual( Stem("margarelon"), "margarelon" );
	deepEqual( Stem("margaret"), "margaret" );
	deepEqual( Stem("margaretta"), "margaretta" );
	deepEqual( Stem("margate"), "margat" );
	deepEqual( Stem("marge"), "marg" );
	deepEqual( Stem("margent"), "margent" );
	deepEqual( Stem("margery"), "margeri" );
	deepEqual( Stem("maria"), "maria" );
	deepEqual( Stem("marian"), "marian" );
	deepEqual( Stem("mariana"), "mariana" );
	deepEqual( Stem("marianne"), "mariann" );
	deepEqual( Stem("marie"), "mari" );
	deepEqual( Stem("maries"), "mari" );
	deepEqual( Stem("marigold"), "marigold" );
	deepEqual( Stem("marine"), "marin" );
	deepEqual( Stem("mariner"), "marin" );
	deepEqual( Stem("mariners"), "marin" );
	deepEqual( Stem("maritime"), "maritim" );
	deepEqual( Stem("marjoram"), "marjoram" );
	deepEqual( Stem("mark"), "mark" );
	deepEqual( Stem("marked"), "mark" );
	deepEqual( Stem("marker"), "marker" );
	deepEqual( Stem("market"), "market" );
	deepEqual( Stem("marketable"), "market" );
	deepEqual( Stem("marketplace"), "marketplac" );
	deepEqual( Stem("markets"), "market" );
	deepEqual( Stem("marking"), "mark" );
	deepEqual( Stem("markman"), "markman" );
	deepEqual( Stem("marks"), "mark" );
	deepEqual( Stem("marl"), "marl" );
	deepEqual( Stem("marle"), "marl" );
	deepEqual( Stem("marlow"), "marlow" );
	deepEqual( Stem("marmalade"), "marmalad" );
	deepEqual( Stem("marmoset"), "marmoset" );
	deepEqual( Stem("marning"), "marn" );
	deepEqual( Stem("marquee"), "marque" );
	deepEqual( Stem("marquess"), "marquess" );
	deepEqual( Stem("marquis"), "marqui" );
	deepEqual( Stem("marquisate"), "marquis" );
	deepEqual( Stem("marquise"), "marquis" );
	deepEqual( Stem("marquises"), "marquis" );
	deepEqual( Stem("marr"), "marr" );
	deepEqual( Stem("marriage"), "marriag" );
	deepEqual( Stem("marriageable"), "marriag" );
	deepEqual( Stem("marriages"), "marriag" );
	deepEqual( Stem("married"), "marri" );
	deepEqual( Stem("marries"), "marri" );
	deepEqual( Stem("marring"), "mar" );
	deepEqual( Stem("marrow"), "marrow" );
	deepEqual( Stem("marrowless"), "marrowless" );
	deepEqual( Stem("marrows"), "marrow" );
	deepEqual( Stem("marry"), "marri" );
	deepEqual( Stem("marrying"), "marri" );
	deepEqual( Stem("mars"), "mar" );
	deepEqual( Stem("marschall"), "marschal" );
	deepEqual( Stem("marseilles"), "marseil" );
	deepEqual( Stem("marsh"), "marsh" );
	deepEqual( Stem("marshal"), "marshal" );
	deepEqual( Stem("marshalled"), "marshal" );
	deepEqual( Stem("marshalling"), "marshal" );
	deepEqual( Stem("marshalsea"), "marshalsea" );
	deepEqual( Stem("marshalship"), "marshalship" );
	deepEqual( Stem("marshy"), "marshi" );
	deepEqual( Stem("mart"), "mart" );
	deepEqual( Stem("marted"), "mart" );
	deepEqual( Stem("martem"), "martem" );
	deepEqual( Stem("martext"), "martext" );
	deepEqual( Stem("martha"), "martha" );
	deepEqual( Stem("martial"), "martial" );
	deepEqual( Stem("martin"), "martin" );
	deepEqual( Stem("martingale"), "martingal" );
	deepEqual( Stem("martino"), "martino" );
	deepEqual( Stem("martius"), "martiu" );
	deepEqual( Stem("martlemas"), "martlema" );
	deepEqual( Stem("martlet"), "martlet" );
	deepEqual( Stem("marts"), "mart" );
	deepEqual( Stem("martyr"), "martyr" );
	deepEqual( Stem("martyrdoms"), "martyrdom" );
	deepEqual( Stem("martyrs"), "martyr" );
	deepEqual( Stem("marullus"), "marullu" );
	deepEqual( Stem("marv"), "marv" );
	deepEqual( Stem("marvel"), "marvel" );
	deepEqual( Stem("marvell"), "marvel" );
	deepEqual( Stem("marvelled"), "marvel" );
	deepEqual( Stem("marvellous"), "marvel" );
	deepEqual( Stem("marvellously"), "marvel" );
	deepEqual( Stem("marvels"), "marvel" );
	deepEqual( Stem("mary"), "mari" );
	deepEqual( Stem("mas"), "ma" );
	deepEqual( Stem("masculine"), "masculin" );
	deepEqual( Stem("masham"), "masham" );
	deepEqual( Stem("mask"), "mask" );
	deepEqual( Stem("masked"), "mask" );
	deepEqual( Stem("masker"), "masker" );
	deepEqual( Stem("maskers"), "masker" );
	deepEqual( Stem("masking"), "mask" );
	deepEqual( Stem("masks"), "mask" );
	deepEqual( Stem("mason"), "mason" );
	deepEqual( Stem("masonry"), "masonri" );
	deepEqual( Stem("masons"), "mason" );
	deepEqual( Stem("masque"), "masqu" );
	deepEqual( Stem("masquers"), "masquer" );
	deepEqual( Stem("masques"), "masqu" );
	deepEqual( Stem("masquing"), "masqu" );
	deepEqual( Stem("mass"), "mass" );
	deepEqual( Stem("massacre"), "massacr" );
	deepEqual( Stem("massacres"), "massacr" );
	deepEqual( Stem("masses"), "mass" );
	deepEqual( Stem("massy"), "massi" );
	deepEqual( Stem("mast"), "mast" );
	deepEqual( Stem("mastcr"), "mastcr" );
	deepEqual( Stem("master"), "master" );
	deepEqual( Stem("masterdom"), "masterdom" );
	deepEqual( Stem("mastered"), "master" );
	deepEqual( Stem("masterest"), "masterest" );
	deepEqual( Stem("masterless"), "masterless" );
	deepEqual( Stem("masterly"), "masterli" );
	deepEqual( Stem("masterpiece"), "masterpiec" );
	deepEqual( Stem("masters"), "master" );
	deepEqual( Stem("mastership"), "mastership" );
	deepEqual( Stem("mastery"), "masteri" );
	deepEqual( Stem("mastic"), "mastic" );
	deepEqual( Stem("mastiff"), "mastiff" );
	deepEqual( Stem("mastiffs"), "mastiff" );
	deepEqual( Stem("masts"), "mast" );
	deepEqual( Stem("match"), "match" );
	deepEqual( Stem("matches"), "match" );
	deepEqual( Stem("matcheth"), "matcheth" );
	deepEqual( Stem("matching"), "match" );
	deepEqual( Stem("matchless"), "matchless" );
	deepEqual( Stem("mate"), "mate" );
	deepEqual( Stem("mated"), "mate" );
	deepEqual( Stem("mater"), "mater" );
	deepEqual( Stem("material"), "materi" );
	deepEqual( Stem("materials"), "materi" );
	deepEqual( Stem("maternal"), "matern" );
	deepEqual( Stem("mates"), "mate" );
	deepEqual( Stem("mathematics"), "mathemat" );
	deepEqual( Stem("matilda"), "matilda" );
	deepEqual( Stem("matin"), "matin" );
	deepEqual( Stem("matinee"), "matine" );
	deepEqual( Stem("matrimonial"), "matrimoni" );
	deepEqual( Stem("matrimony"), "matrimoni" );
	deepEqual( Stem("matron"), "matron" );
	deepEqual( Stem("matrons"), "matron" );
	deepEqual( Stem("matter"), "matter" );
	deepEqual( Stem("matters"), "matter" );
	deepEqual( Stem("matthew"), "matthew" );
	deepEqual( Stem("mattock"), "mattock" );
	deepEqual( Stem("mattress"), "mattress" );
	deepEqual( Stem("mattresses"), "mattress" );
	deepEqual( Stem("mature"), "matur" );
	deepEqual( Stem("maturity"), "matur" );
	deepEqual( Stem("maud"), "maud" );
	deepEqual( Stem("maudlin"), "maudlin" );
	deepEqual( Stem("maugre"), "maugr" );
	deepEqual( Stem("maul"), "maul" );
	deepEqual( Stem("maund"), "maund" );
	deepEqual( Stem("mauri"), "mauri" );
	deepEqual( Stem("mauritania"), "mauritania" );
	deepEqual( Stem("mauvais"), "mauvai" );
	deepEqual( Stem("mauvaise"), "mauvais" );
	deepEqual( Stem("maw"), "maw" );
	deepEqual( Stem("mawkish"), "mawkish" );
	deepEqual( Stem("maws"), "maw" );
	deepEqual( Stem("max"), "max" );
	deepEqual( Stem("maxim"), "maxim" );
	deepEqual( Stem("may"), "mai" );
	deepEqual( Stem("mayday"), "maydai" );
	deepEqual( Stem("mayence"), "mayenc" );
	deepEqual( Stem("mayest"), "mayest" );
	deepEqual( Stem("mayfair"), "mayfair" );
	deepEqual( Stem("mayn"), "mayn" );
	deepEqual( Stem("mayor"), "mayor" );
	deepEqual( Stem("maypole"), "maypol" );
	deepEqual( Stem("mayst"), "mayst" );
	deepEqual( Stem("maz"), "maz" );
	deepEqual( Stem("maze"), "maze" );
	deepEqual( Stem("mazed"), "maze" );
	deepEqual( Stem("mazes"), "maze" );
	deepEqual( Stem("mazzard"), "mazzard" );
	deepEqual( Stem("mcmull"), "mcmull" );
	deepEqual( Stem("mcnitre"), "mcnitr" );
	deepEqual( Stem("mctavish"), "mctavish" );
	deepEqual( Stem("me"), "me" );
	deepEqual( Stem("meacock"), "meacock" );
	deepEqual( Stem("mead"), "mead" );
	deepEqual( Stem("meadow"), "meadow" );
	deepEqual( Stem("meadows"), "meadow" );
	deepEqual( Stem("meads"), "mead" );
	deepEqual( Stem("meagre"), "meagr" );
	deepEqual( Stem("meal"), "meal" );
	deepEqual( Stem("meals"), "meal" );
	deepEqual( Stem("mealy"), "meali" );
	deepEqual( Stem("mean"), "mean" );
	deepEqual( Stem("meandering"), "meander" );
	deepEqual( Stem("meanders"), "meander" );
	deepEqual( Stem("meaner"), "meaner" );
	deepEqual( Stem("meanest"), "meanest" );
	deepEqual( Stem("meaneth"), "meaneth" );
	deepEqual( Stem("meaning"), "mean" );
	deepEqual( Stem("meanings"), "mean" );
	deepEqual( Stem("meanly"), "meanli" );
	deepEqual( Stem("meanness"), "mean" );
	deepEqual( Stem("meannesses"), "mean" );
	deepEqual( Stem("means"), "mean" );
	deepEqual( Stem("meant"), "meant" );
	deepEqual( Stem("meantime"), "meantim" );
	deepEqual( Stem("meanwhile"), "meanwhil" );
	deepEqual( Stem("measles"), "measl" );
	deepEqual( Stem("measur"), "measur" );
	deepEqual( Stem("measurable"), "measur" );
	deepEqual( Stem("measure"), "measur" );
	deepEqual( Stem("measured"), "measur" );
	deepEqual( Stem("measureless"), "measureless" );
	deepEqual( Stem("measures"), "measur" );
	deepEqual( Stem("measuring"), "measur" );
	deepEqual( Stem("meat"), "meat" );
	deepEqual( Stem("meats"), "meat" );
	deepEqual( Stem("mechanic"), "mechan" );
	deepEqual( Stem("mechanical"), "mechan" );
	deepEqual( Stem("mechanically"), "mechan" );
	deepEqual( Stem("mechanicals"), "mechan" );
	deepEqual( Stem("mechanics"), "mechan" );
	deepEqual( Stem("mechante"), "mechant" );
	deepEqual( Stem("med"), "med" );
	deepEqual( Stem("medal"), "medal" );
	deepEqual( Stem("medals"), "medal" );
	deepEqual( Stem("meddle"), "meddl" );
	deepEqual( Stem("meddled"), "meddl" );
	deepEqual( Stem("meddler"), "meddler" );
	deepEqual( Stem("meddling"), "meddl" );
	deepEqual( Stem("mede"), "mede" );
	deepEqual( Stem("medea"), "medea" );
	deepEqual( Stem("media"), "media" );
	deepEqual( Stem("mediation"), "mediat" );
	deepEqual( Stem("mediators"), "mediat" );
	deepEqual( Stem("mediatrix"), "mediatrix" );
	deepEqual( Stem("medical"), "medic" );
	deepEqual( Stem("medicament"), "medica" );
	deepEqual( Stem("medication"), "medic" );
	deepEqual( Stem("medice"), "medic" );
	deepEqual( Stem("medicinal"), "medicin" );
	deepEqual( Stem("medicine"), "medicin" );
	deepEqual( Stem("medicines"), "medicin" );
	deepEqual( Stem("mediocrity"), "mediocr" );
	deepEqual( Stem("meditate"), "medit" );
	deepEqual( Stem("meditated"), "medit" );
	deepEqual( Stem("meditates"), "medit" );
	deepEqual( Stem("meditating"), "medit" );
	deepEqual( Stem("meditation"), "medit" );
	deepEqual( Stem("meditations"), "medit" );
	deepEqual( Stem("mediterranean"), "mediterranean" );
	deepEqual( Stem("mediterraneum"), "mediterraneum" );
	deepEqual( Stem("medium"), "medium" );
	deepEqual( Stem("medlar"), "medlar" );
	deepEqual( Stem("medlars"), "medlar" );
	deepEqual( Stem("medley"), "medlei" );
	deepEqual( Stem("medulla"), "medulla" );
	deepEqual( Stem("medusa"), "medusa" );
	deepEqual( Stem("meed"), "meed" );
	deepEqual( Stem("meeds"), "meed" );
	deepEqual( Stem("meejor"), "meejor" );
	deepEqual( Stem("meek"), "meek" );
	deepEqual( Stem("meekest"), "meekest" );
	deepEqual( Stem("meekly"), "meekli" );
	deepEqual( Stem("meekness"), "meek" );
	deepEqual( Stem("meerschaum"), "meerschaum" );
	deepEqual( Stem("mees"), "mee" );
	deepEqual( Stem("meet"), "meet" );
	deepEqual( Stem("meeter"), "meeter" );
	deepEqual( Stem("meetest"), "meetest" );
	deepEqual( Stem("meeting"), "meet" );
	deepEqual( Stem("meetings"), "meet" );
	deepEqual( Stem("meetly"), "meetli" );
	deepEqual( Stem("meetness"), "meet" );
	deepEqual( Stem("meets"), "meet" );
	deepEqual( Stem("meg"), "meg" );
	deepEqual( Stem("mehercle"), "mehercl" );
	deepEqual( Stem("meilleur"), "meilleur" );
	deepEqual( Stem("mein"), "mein" );
	deepEqual( Stem("meiny"), "meini" );
	deepEqual( Stem("meisen"), "meisen" );
	deepEqual( Stem("mejor"), "mejor" );
	deepEqual( Stem("melancholies"), "melancholi" );
	deepEqual( Stem("melancholious"), "melancholi" );
	deepEqual( Stem("melancholy"), "melancholi" );
	deepEqual( Stem("melford"), "melford" );
	deepEqual( Stem("melia"), "melia" );
	deepEqual( Stem("meliboeus"), "meliboeu" );
	deepEqual( Stem("mell"), "mell" );
	deepEqual( Stem("mellifluous"), "melliflu" );
	deepEqual( Stem("mellow"), "mellow" );
	deepEqual( Stem("mellowing"), "mellow" );
	deepEqual( Stem("melodies"), "melodi" );
	deepEqual( Stem("melodious"), "melodi" );
	deepEqual( Stem("melody"), "melodi" );
	deepEqual( Stem("melt"), "melt" );
	deepEqual( Stem("melted"), "melt" );
	deepEqual( Stem("melteth"), "melteth" );
	deepEqual( Stem("melting"), "melt" );
	deepEqual( Stem("melts"), "melt" );
	deepEqual( Stem("melun"), "melun" );
	deepEqual( Stem("member"), "member" );
	deepEqual( Stem("members"), "member" );
	deepEqual( Stem("memento"), "memento" );
	deepEqual( Stem("mementoes"), "memento" );
	deepEqual( Stem("memoir"), "memoir" );
	deepEqual( Stem("memoirs"), "memoir" );
	deepEqual( Stem("memorable"), "memor" );
	deepEqual( Stem("memoranda"), "memoranda" );
	deepEqual( Stem("memorandums"), "memorandum" );
	deepEqual( Stem("memorial"), "memori" );
	deepEqual( Stem("memorials"), "memori" );
	deepEqual( Stem("memories"), "memori" );
	deepEqual( Stem("memoriz"), "memoriz" );
	deepEqual( Stem("memorize"), "memor" );
	deepEqual( Stem("memory"), "memori" );
	deepEqual( Stem("memphis"), "memphi" );
	deepEqual( Stem("men"), "men" );
	deepEqual( Stem("menac"), "menac" );
	deepEqual( Stem("menace"), "menac" );
	deepEqual( Stem("menaced"), "menac" );
	deepEqual( Stem("menaces"), "menac" );
	deepEqual( Stem("menacing"), "menac" );
	deepEqual( Stem("menage"), "menag" );
	deepEqual( Stem("menaphon"), "menaphon" );
	deepEqual( Stem("menas"), "mena" );
	deepEqual( Stem("mend"), "mend" );
	deepEqual( Stem("mended"), "mend" );
	deepEqual( Stem("mender"), "mender" );
	deepEqual( Stem("mending"), "mend" );
	deepEqual( Stem("mends"), "mend" );
	deepEqual( Stem("menecrates"), "menecr" );
	deepEqual( Stem("menelaus"), "menelau" );
	deepEqual( Stem("menenius"), "meneniu" );
	deepEqual( Stem("menial"), "menial" );
	deepEqual( Stem("mensem"), "mensem" );
	deepEqual( Stem("mental"), "mental" );
	deepEqual( Stem("menteith"), "menteith" );
	deepEqual( Stem("mention"), "mention" );
	deepEqual( Stem("mentioned"), "mention" );
	deepEqual( Stem("mentioning"), "mention" );
	deepEqual( Stem("mentions"), "mention" );
	deepEqual( Stem("mentis"), "menti" );
	deepEqual( Stem("menton"), "menton" );
	deepEqual( Stem("mephostophilus"), "mephostophilu" );
	deepEqual( Stem("mer"), "mer" );
	deepEqual( Stem("mercatante"), "mercatant" );
	deepEqual( Stem("mercatio"), "mercatio" );
	deepEqual( Stem("mercenaries"), "mercenari" );
	deepEqual( Stem("mercenary"), "mercenari" );
	deepEqual( Stem("mercer"), "mercer" );
	deepEqual( Stem("merchandise"), "merchandis" );
	deepEqual( Stem("merchandized"), "merchand" );
	deepEqual( Stem("merchant"), "merchant" );
	deepEqual( Stem("merchants"), "merchant" );
	deepEqual( Stem("mercies"), "merci" );
	deepEqual( Stem("merciful"), "merci" );
	deepEqual( Stem("mercifully"), "mercifulli" );
	deepEqual( Stem("merciless"), "merciless" );
	deepEqual( Stem("mercurial"), "mercuri" );
	deepEqual( Stem("mercuries"), "mercuri" );
	deepEqual( Stem("mercury"), "mercuri" );
	deepEqual( Stem("mercutio"), "mercutio" );
	deepEqual( Stem("mercy"), "merci" );
	deepEqual( Stem("mere"), "mere" );
	deepEqual( Stem("mered"), "mere" );
	deepEqual( Stem("merely"), "mere" );
	deepEqual( Stem("merest"), "merest" );
	deepEqual( Stem("meridian"), "meridian" );
	deepEqual( Stem("merit"), "merit" );
	deepEqual( Stem("merited"), "merit" );
	deepEqual( Stem("meriting"), "merit" );
	deepEqual( Stem("meritorious"), "meritori" );
	deepEqual( Stem("merits"), "merit" );
	deepEqual( Stem("merlin"), "merlin" );
	deepEqual( Stem("mermaid"), "mermaid" );
	deepEqual( Stem("mermaids"), "mermaid" );
	deepEqual( Stem("merops"), "merop" );
	deepEqual( Stem("merrier"), "merrier" );
	deepEqual( Stem("merriest"), "merriest" );
	deepEqual( Stem("merrily"), "merrili" );
	deepEqual( Stem("merriman"), "merriman" );
	deepEqual( Stem("merriment"), "merriment" );
	deepEqual( Stem("merriments"), "merriment" );
	deepEqual( Stem("merriness"), "merri" );
	deepEqual( Stem("merry"), "merri" );
	deepEqual( Stem("merton"), "merton" );
	deepEqual( Stem("mervailous"), "mervail" );
	deepEqual( Stem("mes"), "me" );
	deepEqual( Stem("mesalliance"), "mesalli" );
	deepEqual( Stem("mesdames"), "mesdam" );
	deepEqual( Stem("mesdemoiselles"), "mesdemoisel" );
	deepEqual( Stem("mesh"), "mesh" );
	deepEqual( Stem("meshes"), "mesh" );
	deepEqual( Stem("mesmerism"), "mesmer" );
	deepEqual( Stem("mesopotamia"), "mesopotamia" );
	deepEqual( Stem("mesrour"), "mesrour" );
	deepEqual( Stem("mess"), "mess" );
	deepEqual( Stem("message"), "messag" );
	deepEqual( Stem("messages"), "messag" );
	deepEqual( Stem("messala"), "messala" );
	deepEqual( Stem("messaline"), "messalin" );
	deepEqual( Stem("messenger"), "messeng" );
	deepEqual( Stem("messengers"), "messeng" );
	deepEqual( Stem("messes"), "mess" );
	deepEqual( Stem("messieurs"), "messieur" );
	deepEqual( Stem("messina"), "messina" );
	deepEqual( Stem("messrs"), "messr" );
	deepEqual( Stem("met"), "met" );
	deepEqual( Stem("metal"), "metal" );
	deepEqual( Stem("metals"), "metal" );
	deepEqual( Stem("metamorphis"), "metamorphi" );
	deepEqual( Stem("metamorphoses"), "metamorphos" );
	deepEqual( Stem("metaphor"), "metaphor" );
	deepEqual( Stem("metaphysical"), "metaphys" );
	deepEqual( Stem("metaphysics"), "metaphys" );
	deepEqual( Stem("mete"), "mete" );
	deepEqual( Stem("metellus"), "metellu" );
	deepEqual( Stem("meteor"), "meteor" );
	deepEqual( Stem("meteors"), "meteor" );
	deepEqual( Stem("meteyard"), "meteyard" );
	deepEqual( Stem("metheglin"), "metheglin" );
	deepEqual( Stem("metheglins"), "metheglin" );
	deepEqual( Stem("methink"), "methink" );
	deepEqual( Stem("methinks"), "methink" );
	deepEqual( Stem("method"), "method" );
	deepEqual( Stem("methodist"), "methodist" );
	deepEqual( Stem("methods"), "method" );
	deepEqual( Stem("methought"), "methought" );
	deepEqual( Stem("methoughts"), "methought" );
	deepEqual( Stem("methusalem"), "methusalem" );
	deepEqual( Stem("methuselah"), "methuselah" );
	deepEqual( Stem("metre"), "metr" );
	deepEqual( Stem("metres"), "metr" );
	deepEqual( Stem("metropolis"), "metropoli" );
	deepEqual( Stem("mette"), "mett" );
	deepEqual( Stem("metternich"), "metternich" );
	deepEqual( Stem("mettle"), "mettl" );
	deepEqual( Stem("mettled"), "mettl" );
	deepEqual( Stem("meus"), "meu" );
	deepEqual( Stem("mew"), "mew" );
	deepEqual( Stem("mewed"), "mew" );
	deepEqual( Stem("mewling"), "mewl" );
	deepEqual( Stem("mews"), "mew" );
	deepEqual( Stem("mexico"), "mexico" );
	deepEqual( Stem("mi"), "mi" );
	deepEqual( Stem("mice"), "mice" );
	deepEqual( Stem("michael"), "michael" );
	deepEqual( Stem("michaelmas"), "michaelma" );
	deepEqual( Stem("micher"), "micher" );
	deepEqual( Stem("miching"), "mich" );
	deepEqual( Stem("mick"), "mick" );
	deepEqual( Stem("mickle"), "mickl" );
	deepEqual( Stem("microcosm"), "microcosm" );
	deepEqual( Stem("mid"), "mid" );
	deepEqual( Stem("midas"), "mida" );
	deepEqual( Stem("middest"), "middest" );
	deepEqual( Stem("middle"), "middl" );
	deepEqual( Stem("middleham"), "middleham" );
	deepEqual( Stem("middlesex"), "middlesex" );
	deepEqual( Stem("middling"), "middl" );
	deepEqual( Stem("midnight"), "midnight" );
	deepEqual( Stem("midriff"), "midriff" );
	deepEqual( Stem("midshipmen"), "midshipmen" );
	deepEqual( Stem("midst"), "midst" );
	deepEqual( Stem("midsummer"), "midsumm" );
	deepEqual( Stem("midway"), "midwai" );
	deepEqual( Stem("midwife"), "midwif" );
	deepEqual( Stem("midwives"), "midwiv" );
	deepEqual( Stem("mien"), "mien" );
	deepEqual( Stem("mienne"), "mienn" );
	deepEqual( Stem("mieux"), "mieux" );
	deepEqual( Stem("might"), "might" );
	deepEqual( Stem("mightful"), "might" );
	deepEqual( Stem("mightier"), "mightier" );
	deepEqual( Stem("mightiest"), "mightiest" );
	deepEqual( Stem("mightily"), "mightili" );
	deepEqual( Stem("mightiness"), "mighti" );
	deepEqual( Stem("mightn"), "mightn" );
	deepEqual( Stem("mightst"), "mightst" );
	deepEqual( Stem("mighty"), "mighti" );
	deepEqual( Stem("migrate"), "migrat" );
	deepEqual( Stem("miladi"), "miladi" );
	deepEqual( Stem("milan"), "milan" );
	deepEqual( Stem("milch"), "milch" );
	deepEqual( Stem("mild"), "mild" );
	deepEqual( Stem("milder"), "milder" );
	deepEqual( Stem("mildest"), "mildest" );
	deepEqual( Stem("mildew"), "mildew" );
	deepEqual( Stem("mildews"), "mildew" );
	deepEqual( Stem("mildly"), "mildli" );
	deepEqual( Stem("mildness"), "mild" );
	deepEqual( Stem("mile"), "mile" );
	deepEqual( Stem("miles"), "mile" );
	deepEqual( Stem("milestones"), "mileston" );
	deepEqual( Stem("milford"), "milford" );
	deepEqual( Stem("militair"), "militair" );
	deepEqual( Stem("militaire"), "militair" );
	deepEqual( Stem("militarist"), "militarist" );
	deepEqual( Stem("military"), "militari" );
	deepEqual( Stem("militia"), "militia" );
	deepEqual( Stem("milk"), "milk" );
	deepEqual( Stem("milking"), "milk" );
	deepEqual( Stem("milkmaid"), "milkmaid" );
	deepEqual( Stem("milkman"), "milkman" );
	deepEqual( Stem("milkmen"), "milkmen" );
	deepEqual( Stem("milks"), "milk" );
	deepEqual( Stem("milksop"), "milksop" );
	deepEqual( Stem("milksops"), "milksop" );
	deepEqual( Stem("milky"), "milki" );
	deepEqual( Stem("mill"), "mill" );
	deepEqual( Stem("mille"), "mill" );
	deepEqual( Stem("miller"), "miller" );
	deepEqual( Stem("milliner"), "millin" );
	deepEqual( Stem("milliners"), "millin" );
	deepEqual( Stem("millinery"), "millineri" );
	deepEqual( Stem("million"), "million" );
	deepEqual( Stem("millioned"), "million" );
	deepEqual( Stem("millions"), "million" );
	deepEqual( Stem("mills"), "mill" );
	deepEqual( Stem("millstones"), "millston" );
	deepEqual( Stem("milo"), "milo" );
	deepEqual( Stem("milor"), "milor" );
	deepEqual( Stem("mimes"), "mime" );
	deepEqual( Stem("mimic"), "mimic" );
	deepEqual( Stem("mimicked"), "mimick" );
	deepEqual( Stem("mimicking"), "mimick" );
	deepEqual( Stem("mimicry"), "mimicri" );
	deepEqual( Stem("minc"), "minc" );
	deepEqual( Stem("mince"), "minc" );
	deepEqual( Stem("minces"), "minc" );
	deepEqual( Stem("mincing"), "minc" );
	deepEqual( Stem("mind"), "mind" );
	deepEqual( Stem("minded"), "mind" );
	deepEqual( Stem("minden"), "minden" );
	deepEqual( Stem("minding"), "mind" );
	deepEqual( Stem("mindless"), "mindless" );
	deepEqual( Stem("minds"), "mind" );
	deepEqual( Stem("mine"), "mine" );
	deepEqual( Stem("mineral"), "miner" );
	deepEqual( Stem("minerals"), "miner" );
	deepEqual( Stem("minerva"), "minerva" );
	deepEqual( Stem("mines"), "mine" );
	deepEqual( Stem("mingle"), "mingl" );
	deepEqual( Stem("mingled"), "mingl" );
	deepEqual( Stem("mingling"), "mingl" );
	deepEqual( Stem("miniature"), "miniatur" );
	deepEqual( Stem("miniatures"), "miniatur" );
	deepEqual( Stem("minikin"), "minikin" );
	deepEqual( Stem("minim"), "minim" );
	deepEqual( Stem("minime"), "minim" );
	deepEqual( Stem("minimo"), "minimo" );
	deepEqual( Stem("minimus"), "minimu" );
	deepEqual( Stem("mining"), "mine" );
	deepEqual( Stem("minion"), "minion" );
	deepEqual( Stem("minions"), "minion" );
	deepEqual( Stem("minist"), "minist" );
	deepEqual( Stem("minister"), "minist" );
	deepEqual( Stem("ministered"), "minist" );
	deepEqual( Stem("ministering"), "minist" );
	deepEqual( Stem("ministers"), "minist" );
	deepEqual( Stem("ministration"), "ministr" );
	deepEqual( Stem("ministre"), "ministr" );
	deepEqual( Stem("ministry"), "ministri" );
	deepEqual( Stem("minnow"), "minnow" );
	deepEqual( Stem("minnows"), "minnow" );
	deepEqual( Stem("minois"), "minoi" );
	deepEqual( Stem("minola"), "minola" );
	deepEqual( Stem("minor"), "minor" );
	deepEqual( Stem("minority"), "minor" );
	deepEqual( Stem("minos"), "mino" );
	deepEqual( Stem("minotaurs"), "minotaur" );
	deepEqual( Stem("minsthrel"), "minsthrel" );
	deepEqual( Stem("minstrel"), "minstrel" );
	deepEqual( Stem("minstrels"), "minstrel" );
	deepEqual( Stem("minstrelsy"), "minstrelsi" );
	deepEqual( Stem("mint"), "mint" );
	deepEqual( Stem("minto"), "minto" );
	deepEqual( Stem("mints"), "mint" );
	deepEqual( Stem("minuet"), "minuet" );
	deepEqual( Stem("minuets"), "minuet" );
	deepEqual( Stem("minute"), "minut" );
	deepEqual( Stem("minutely"), "minut" );
	deepEqual( Stem("minuteness"), "minut" );
	deepEqual( Stem("minutes"), "minut" );
	deepEqual( Stem("minx"), "minx" );
	deepEqual( Stem("mio"), "mio" );
	deepEqual( Stem("mir"), "mir" );
	deepEqual( Stem("mirable"), "mirabl" );
	deepEqual( Stem("miracle"), "miracl" );
	deepEqual( Stem("miracles"), "miracl" );
	deepEqual( Stem("miraculous"), "miracul" );
	deepEqual( Stem("miranda"), "miranda" );
	deepEqual( Stem("mire"), "mire" );
	deepEqual( Stem("mirror"), "mirror" );
	deepEqual( Stem("mirrors"), "mirror" );
	deepEqual( Stem("mirth"), "mirth" );
	deepEqual( Stem("mirthful"), "mirth" );
	deepEqual( Stem("miry"), "miri" );
	deepEqual( Stem("mis"), "mi" );
	deepEqual( Stem("misadventur"), "misadventur" );
	deepEqual( Stem("misadventure"), "misadventur" );
	deepEqual( Stem("misalliance"), "misalli" );
	deepEqual( Stem("misanthrope"), "misanthrop" );
	deepEqual( Stem("misanthropes"), "misanthrop" );
	deepEqual( Stem("misanthropist"), "misanthropist" );
	deepEqual( Stem("misanthropos"), "misanthropo" );
	deepEqual( Stem("misapplied"), "misappli" );
	deepEqual( Stem("misbecame"), "misbecam" );
	deepEqual( Stem("misbecom"), "misbecom" );
	deepEqual( Stem("misbecome"), "misbecom" );
	deepEqual( Stem("misbegot"), "misbegot" );
	deepEqual( Stem("misbegotten"), "misbegotten" );
	deepEqual( Stem("misbeliever"), "misbeliev" );
	deepEqual( Stem("misbelieving"), "misbeliev" );
	deepEqual( Stem("misbhav"), "misbhav" );
	deepEqual( Stem("miscall"), "miscal" );
	deepEqual( Stem("miscalled"), "miscal" );
	deepEqual( Stem("miscarried"), "miscarri" );
	deepEqual( Stem("miscarries"), "miscarri" );
	deepEqual( Stem("miscarry"), "miscarri" );
	deepEqual( Stem("miscarrying"), "miscarri" );
	deepEqual( Stem("mischance"), "mischanc" );
	deepEqual( Stem("mischances"), "mischanc" );
	deepEqual( Stem("mischief"), "mischief" );
	deepEqual( Stem("mischiefs"), "mischief" );
	deepEqual( Stem("mischievous"), "mischiev" );
	deepEqual( Stem("mischievously"), "mischiev" );
	deepEqual( Stem("misconceived"), "misconceiv" );
	deepEqual( Stem("misconst"), "misconst" );
	deepEqual( Stem("misconster"), "misconst" );
	deepEqual( Stem("misconstruction"), "misconstruct" );
	deepEqual( Stem("misconstrued"), "misconstru" );
	deepEqual( Stem("misconstrues"), "misconstru" );
	deepEqual( Stem("miscreant"), "miscreant" );
	deepEqual( Stem("miscreate"), "miscreat" );
	deepEqual( Stem("misdeed"), "misde" );
	deepEqual( Stem("misdeeds"), "misde" );
	deepEqual( Stem("misdemean"), "misdemean" );
	deepEqual( Stem("misdemeanours"), "misdemeanour" );
	deepEqual( Stem("misdoings"), "misdo" );
	deepEqual( Stem("misdoubt"), "misdoubt" );
	deepEqual( Stem("misdoubteth"), "misdoubteth" );
	deepEqual( Stem("misdoubts"), "misdoubt" );
	deepEqual( Stem("misenum"), "misenum" );
	deepEqual( Stem("miser"), "miser" );
	deepEqual( Stem("miserable"), "miser" );
	deepEqual( Stem("miserably"), "miser" );
	deepEqual( Stem("misericorde"), "misericord" );
	deepEqual( Stem("miseries"), "miseri" );
	deepEqual( Stem("misers"), "miser" );
	deepEqual( Stem("misery"), "miseri" );
	deepEqual( Stem("misfortune"), "misfortun" );
	deepEqual( Stem("misfortunes"), "misfortun" );
	deepEqual( Stem("misgave"), "misgav" );
	deepEqual( Stem("misgive"), "misgiv" );
	deepEqual( Stem("misgives"), "misgiv" );
	deepEqual( Stem("misgiving"), "misgiv" );
	deepEqual( Stem("misgivings"), "misgiv" );
	deepEqual( Stem("misgoverned"), "misgovern" );
	deepEqual( Stem("misgovernment"), "misgovern" );
	deepEqual( Stem("misgraffed"), "misgraf" );
	deepEqual( Stem("misguide"), "misguid" );
	deepEqual( Stem("mishap"), "mishap" );
	deepEqual( Stem("mishaps"), "mishap" );
	deepEqual( Stem("misheard"), "misheard" );
	deepEqual( Stem("misinterpret"), "misinterpret" );
	deepEqual( Stem("mislead"), "mislead" );
	deepEqual( Stem("misleader"), "mislead" );
	deepEqual( Stem("misleaders"), "mislead" );
	deepEqual( Stem("misleading"), "mislead" );
	deepEqual( Stem("misled"), "misl" );
	deepEqual( Stem("mislike"), "mislik" );
	deepEqual( Stem("mismanaged"), "mismanag" );
	deepEqual( Stem("misord"), "misord" );
	deepEqual( Stem("misplac"), "misplac" );
	deepEqual( Stem("misplaced"), "misplac" );
	deepEqual( Stem("misplaces"), "misplac" );
	deepEqual( Stem("mispris"), "mispri" );
	deepEqual( Stem("misprised"), "mispris" );
	deepEqual( Stem("misprision"), "mispris" );
	deepEqual( Stem("misprizing"), "mispriz" );
	deepEqual( Stem("misproud"), "misproud" );
	deepEqual( Stem("misquote"), "misquot" );
	deepEqual( Stem("misreport"), "misreport" );
	deepEqual( Stem("miss"), "miss" );
	deepEqual( Stem("missed"), "miss" );
	deepEqual( Stem("misses"), "miss" );
	deepEqual( Stem("misshap"), "misshap" );
	deepEqual( Stem("misshapen"), "misshapen" );
	deepEqual( Stem("missheathed"), "missheath" );
	deepEqual( Stem("missing"), "miss" );
	deepEqual( Stem("missingly"), "missingli" );
	deepEqual( Stem("mission"), "mission" );
	deepEqual( Stem("missionaries"), "missionari" );
	deepEqual( Stem("missionary"), "missionari" );
	deepEqual( Stem("missions"), "mission" );
	deepEqual( Stem("missis"), "missi" );
	deepEqual( Stem("missive"), "missiv" );
	deepEqual( Stem("missives"), "missiv" );
	deepEqual( Stem("misspoke"), "misspok" );
	deepEqual( Stem("missus"), "missu" );
	deepEqual( Stem("mist"), "mist" );
	deepEqual( Stem("mista"), "mista" );
	deepEqual( Stem("mistak"), "mistak" );
	deepEqual( Stem("mistake"), "mistak" );
	deepEqual( Stem("mistaken"), "mistaken" );
	deepEqual( Stem("mistakes"), "mistak" );
	deepEqual( Stem("mistaketh"), "mistaketh" );
	deepEqual( Stem("mistaking"), "mistak" );
	deepEqual( Stem("mistakings"), "mistak" );
	deepEqual( Stem("mistemp"), "mistemp" );
	deepEqual( Stem("mistempered"), "mistemp" );
	deepEqual( Stem("misterm"), "misterm" );
	deepEqual( Stem("mistful"), "mist" );
	deepEqual( Stem("misthink"), "misthink" );
	deepEqual( Stem("misthought"), "misthought" );
	deepEqual( Stem("mistletoe"), "mistleto" );
	deepEqual( Stem("mistook"), "mistook" );
	deepEqual( Stem("mistreadings"), "mistread" );
	deepEqual( Stem("mistress"), "mistress" );
	deepEqual( Stem("mistresses"), "mistress" );
	deepEqual( Stem("mistresss"), "mistresss" );
	deepEqual( Stem("mistriship"), "mistriship" );
	deepEqual( Stem("mistrust"), "mistrust" );
	deepEqual( Stem("mistrusted"), "mistrust" );
	deepEqual( Stem("mistrustful"), "mistrust" );
	deepEqual( Stem("mistrusting"), "mistrust" );
	deepEqual( Stem("mistrusts"), "mistrust" );
	deepEqual( Stem("mists"), "mist" );
	deepEqual( Stem("misty"), "misti" );
	deepEqual( Stem("misus"), "misu" );
	deepEqual( Stem("misuse"), "misus" );
	deepEqual( Stem("misused"), "misus" );
	deepEqual( Stem("misuses"), "misus" );
	deepEqual( Stem("mite"), "mite" );
	deepEqual( Stem("mites"), "mite" );
	deepEqual( Stem("mithridates"), "mithrid" );
	deepEqual( Stem("mitigate"), "mitig" );
	deepEqual( Stem("mitigated"), "mitig" );
	deepEqual( Stem("mitigation"), "mitig" );
	deepEqual( Stem("mix"), "mix" );
	deepEqual( Stem("mixed"), "mix" );
	deepEqual( Stem("mixing"), "mix" );
	deepEqual( Stem("mixture"), "mixtur" );
	deepEqual( Stem("mixtures"), "mixtur" );
	deepEqual( Stem("mm"), "mm" );
	deepEqual( Stem("mnd"), "mnd" );
	deepEqual( Stem("moan"), "moan" );
	deepEqual( Stem("moaned"), "moan" );
	deepEqual( Stem("moaning"), "moan" );
	deepEqual( Stem("moans"), "moan" );
	deepEqual( Stem("moat"), "moat" );
	deepEqual( Stem("moated"), "moat" );
	deepEqual( Stem("moats"), "moat" );
	deepEqual( Stem("mobled"), "mobl" );
	deepEqual( Stem("mock"), "mock" );
	deepEqual( Stem("mockable"), "mockabl" );
	deepEqual( Stem("mocker"), "mocker" );
	deepEqual( Stem("mockeries"), "mockeri" );
	deepEqual( Stem("mockers"), "mocker" );
	deepEqual( Stem("mockery"), "mockeri" );
	deepEqual( Stem("mocking"), "mock" );
	deepEqual( Stem("mocks"), "mock" );
	deepEqual( Stem("mockvater"), "mockvat" );
	deepEqual( Stem("mockwater"), "mockwat" );
	deepEqual( Stem("mode"), "mode" );
	deepEqual( Stem("model"), "model" );
	deepEqual( Stem("models"), "model" );
	deepEqual( Stem("modena"), "modena" );
	deepEqual( Stem("moderate"), "moder" );
	deepEqual( Stem("moderately"), "moder" );
	deepEqual( Stem("moderation"), "moder" );
	deepEqual( Stem("modern"), "modern" );
	deepEqual( Stem("modes"), "mode" );
	deepEqual( Stem("modest"), "modest" );
	deepEqual( Stem("modesties"), "modesti" );
	deepEqual( Stem("modestly"), "modestli" );
	deepEqual( Stem("modesty"), "modesti" );
	deepEqual( Stem("modicums"), "modicum" );
	deepEqual( Stem("modified"), "modifi" );
	deepEqual( Stem("modo"), "modo" );
	deepEqual( Stem("module"), "modul" );
	deepEqual( Stem("moe"), "moe" );
	deepEqual( Stem("mogul"), "mogul" );
	deepEqual( Stem("moi"), "moi" );
	deepEqual( Stem("moiety"), "moieti" );
	deepEqual( Stem("moin"), "moin" );
	deepEqual( Stem("moira"), "moira" );
	deepEqual( Stem("moist"), "moist" );
	deepEqual( Stem("moisten"), "moisten" );
	deepEqual( Stem("moisture"), "moistur" );
	deepEqual( Stem("molasses"), "molass" );
	deepEqual( Stem("moldwarp"), "moldwarp" );
	deepEqual( Stem("mole"), "mole" );
	deepEqual( Stem("molehill"), "molehil" );
	deepEqual( Stem("moles"), "mole" );
	deepEqual( Stem("molest"), "molest" );
	deepEqual( Stem("molestation"), "molest" );
	deepEqual( Stem("mollification"), "mollif" );
	deepEqual( Stem("mollified"), "mollifi" );
	deepEqual( Stem("mollify"), "mollifi" );
	deepEqual( Stem("mollifying"), "mollifi" );
	deepEqual( Stem("mollis"), "molli" );
	deepEqual( Stem("molloy"), "molloi" );
	deepEqual( Stem("molloys"), "molloi" );
	deepEqual( Stem("molly"), "molli" );
	deepEqual( Stem("molten"), "molten" );
	deepEqual( Stem("molto"), "molto" );
	deepEqual( Stem("molyneux"), "molyneux" );
	deepEqual( Stem("mome"), "mome" );
	deepEqual( Stem("moment"), "moment" );
	deepEqual( Stem("momentarily"), "momentarili" );
	deepEqual( Stem("momentary"), "momentari" );
	deepEqual( Stem("momentous"), "moment" );
	deepEqual( Stem("moments"), "moment" );
	deepEqual( Stem("moming"), "mome" );
	deepEqual( Stem("mon"), "mon" );
	deepEqual( Stem("monachum"), "monachum" );
	deepEqual( Stem("monarch"), "monarch" );
	deepEqual( Stem("monarchies"), "monarchi" );
	deepEqual( Stem("monarchize"), "monarch" );
	deepEqual( Stem("monarcho"), "monarcho" );
	deepEqual( Stem("monarchs"), "monarch" );
	deepEqual( Stem("monarchy"), "monarchi" );
	deepEqual( Stem("monast"), "monast" );
	deepEqual( Stem("monastery"), "monasteri" );
	deepEqual( Stem("monastic"), "monast" );
	deepEqual( Stem("monblaisir"), "monblaisir" );
	deepEqual( Stem("monday"), "mondai" );
	deepEqual( Stem("monde"), "mond" );
	deepEqual( Stem("money"), "monei" );
	deepEqual( Stem("moneys"), "monei" );
	deepEqual( Stem("mong"), "mong" );
	deepEqual( Stem("monger"), "monger" );
	deepEqual( Stem("mongers"), "monger" );
	deepEqual( Stem("monging"), "mong" );
	deepEqual( Stem("mongrel"), "mongrel" );
	deepEqual( Stem("mongrels"), "mongrel" );
	deepEqual( Stem("mongst"), "mongst" );
	deepEqual( Stem("monies"), "moni" );
	deepEqual( Stem("monk"), "monk" );
	deepEqual( Stem("monkey"), "monkei" );
	deepEqual( Stem("monkeys"), "monkei" );
	deepEqual( Stem("monks"), "monk" );
	deepEqual( Stem("monmouth"), "monmouth" );
	deepEqual( Stem("monopolising"), "monopolis" );
	deepEqual( Stem("monopoly"), "monopoli" );
	deepEqual( Stem("monotony"), "monotoni" );
	deepEqual( Stem("monplaisir"), "monplaisir" );
	deepEqual( Stem("mons"), "mon" );
	deepEqual( Stem("monseigneur"), "monseigneur" );
	deepEqual( Stem("monsieur"), "monsieur" );
	deepEqual( Stem("monsieurs"), "monsieur" );
	deepEqual( Stem("monsignori"), "monsignori" );
	deepEqual( Stem("monster"), "monster" );
	deepEqual( Stem("monsters"), "monster" );
	deepEqual( Stem("monstre"), "monstr" );
	deepEqual( Stem("monstrous"), "monstrou" );
	deepEqual( Stem("monstrously"), "monstrous" );
	deepEqual( Stem("monstrousness"), "monstrous" );
	deepEqual( Stem("monstruosity"), "monstruos" );
	deepEqual( Stem("montacute"), "montacut" );
	deepEqual( Stem("montage"), "montag" );
	deepEqual( Stem("montague"), "montagu" );
	deepEqual( Stem("montagues"), "montagu" );
	deepEqual( Stem("montano"), "montano" );
	deepEqual( Stem("montant"), "montant" );
	deepEqual( Stem("montcalm"), "montcalm" );
	deepEqual( Stem("montees"), "monte" );
	deepEqual( Stem("montessu"), "montessu" );
	deepEqual( Stem("montez"), "montez" );
	deepEqual( Stem("montferrat"), "montferrat" );
	deepEqual( Stem("montgomery"), "montgomeri" );
	deepEqual( Stem("month"), "month" );
	deepEqual( Stem("monthly"), "monthli" );
	deepEqual( Stem("months"), "month" );
	deepEqual( Stem("montjoy"), "montjoi" );
	deepEqual( Stem("montmirail"), "montmirail" );
	deepEqual( Stem("montmorenci"), "montmor" );
	deepEqual( Stem("montmorency"), "montmor" );
	deepEqual( Stem("monument"), "monument" );
	deepEqual( Stem("monumental"), "monument" );
	deepEqual( Stem("monuments"), "monument" );
	deepEqual( Stem("mood"), "mood" );
	deepEqual( Stem("moodily"), "moodili" );
	deepEqual( Stem("moods"), "mood" );
	deepEqual( Stem("moody"), "moodi" );
	deepEqual( Stem("moon"), "moon" );
	deepEqual( Stem("moonbeams"), "moonbeam" );
	deepEqual( Stem("moonish"), "moonish" );
	deepEqual( Stem("moonlight"), "moonlight" );
	deepEqual( Stem("moons"), "moon" );
	deepEqual( Stem("moonshine"), "moonshin" );
	deepEqual( Stem("moonshines"), "moonshin" );
	deepEqual( Stem("moor"), "moor" );
	deepEqual( Stem("moore"), "moor" );
	deepEqual( Stem("moorfields"), "moorfield" );
	deepEqual( Stem("moorish"), "moorish" );
	deepEqual( Stem("moors"), "moor" );
	deepEqual( Stem("moorship"), "moorship" );
	deepEqual( Stem("mop"), "mop" );
	deepEqual( Stem("mope"), "mope" );
	deepEqual( Stem("moping"), "mope" );
	deepEqual( Stem("mopping"), "mop" );
	deepEqual( Stem("mopsa"), "mopsa" );
	deepEqual( Stem("moral"), "moral" );
	deepEqual( Stem("moraler"), "moral" );
	deepEqual( Stem("moralising"), "moralis" );
	deepEqual( Stem("moralist"), "moralist" );
	deepEqual( Stem("moralists"), "moralist" );
	deepEqual( Stem("morality"), "moral" );
	deepEqual( Stem("moralize"), "moral" );
	deepEqual( Stem("moralizing"), "moral" );
	deepEqual( Stem("morally"), "moral" );
	deepEqual( Stem("morals"), "moral" );
	deepEqual( Stem("mordake"), "mordak" );
	deepEqual( Stem("more"), "more" );
	deepEqual( Stem("moreen"), "moreen" );
	deepEqual( Stem("moreover"), "moreov" );
	deepEqual( Stem("mores"), "more" );
	deepEqual( Stem("morgan"), "morgan" );
	deepEqual( Stem("mori"), "mori" );
	deepEqual( Stem("morisco"), "morisco" );
	deepEqual( Stem("morn"), "morn" );
	deepEqual( Stem("morning"), "morn" );
	deepEqual( Stem("mornings"), "morn" );
	deepEqual( Stem("morocco"), "morocco" );
	deepEqual( Stem("morose"), "moros" );
	deepEqual( Stem("morris"), "morri" );
	deepEqual( Stem("morrow"), "morrow" );
	deepEqual( Stem("morrows"), "morrow" );
	deepEqual( Stem("morsel"), "morsel" );
	deepEqual( Stem("morsels"), "morsel" );
	deepEqual( Stem("mort"), "mort" );
	deepEqual( Stem("mortal"), "mortal" );
	deepEqual( Stem("mortality"), "mortal" );
	deepEqual( Stem("mortally"), "mortal" );
	deepEqual( Stem("mortals"), "mortal" );
	deepEqual( Stem("mortar"), "mortar" );
	deepEqual( Stem("mortgage"), "mortgag" );
	deepEqual( Stem("mortgaged"), "mortgag" );
	deepEqual( Stem("mortgaging"), "mortgag" );
	deepEqual( Stem("mortial"), "mortial" );
	deepEqual( Stem("mortification"), "mortif" );
	deepEqual( Stem("mortified"), "mortifi" );
	deepEqual( Stem("mortifying"), "mortifi" );
	deepEqual( Stem("mortimer"), "mortim" );
	deepEqual( Stem("mortimers"), "mortim" );
	deepEqual( Stem("mortis"), "morti" );
	deepEqual( Stem("mortise"), "mortis" );
	deepEqual( Stem("morton"), "morton" );
	deepEqual( Stem("mortuary"), "mortuari" );
	deepEqual( Stem("moscow"), "moscow" );
	deepEqual( Stem("mose"), "mose" );
	deepEqual( Stem("moses"), "mose" );
	deepEqual( Stem("mosques"), "mosqu" );
	deepEqual( Stem("moss"), "moss" );
	deepEqual( Stem("mosses"), "moss" );
	deepEqual( Stem("mossgrown"), "mossgrown" );
	deepEqual( Stem("most"), "most" );
	deepEqual( Stem("mostly"), "mostli" );
	deepEqual( Stem("mote"), "mote" );
	deepEqual( Stem("moth"), "moth" );
	deepEqual( Stem("mother"), "mother" );
	deepEqual( Stem("motherly"), "motherli" );
	deepEqual( Stem("mothers"), "mother" );
	deepEqual( Stem("moths"), "moth" );
	deepEqual( Stem("motion"), "motion" );
	deepEqual( Stem("motionless"), "motionless" );
	deepEqual( Stem("motions"), "motion" );
	deepEqual( Stem("motive"), "motiv" );
	deepEqual( Stem("motives"), "motiv" );
	deepEqual( Stem("motley"), "motlei" );
	deepEqual( Stem("mots"), "mot" );
	deepEqual( Stem("mottled"), "mottl" );
	deepEqual( Stem("motto"), "motto" );
	deepEqual( Stem("mottoes"), "motto" );
	deepEqual( Stem("mouchoirs"), "mouchoir" );
	deepEqual( Stem("mought"), "mought" );
	deepEqual( Stem("mould"), "mould" );
	deepEqual( Stem("moulded"), "mould" );
	deepEqual( Stem("mouldeth"), "mouldeth" );
	deepEqual( Stem("moulds"), "mould" );
	deepEqual( Stem("mouldy"), "mouldi" );
	deepEqual( Stem("moult"), "moult" );
	deepEqual( Stem("moulten"), "moulten" );
	deepEqual( Stem("mounch"), "mounch" );
	deepEqual( Stem("mounseur"), "mounseur" );
	deepEqual( Stem("mounsieur"), "mounsieur" );
	deepEqual( Stem("mount"), "mount" );
	deepEqual( Stem("mountain"), "mountain" );
	deepEqual( Stem("mountaineer"), "mountain" );
	deepEqual( Stem("mountaineers"), "mountain" );
	deepEqual( Stem("mountainous"), "mountain" );
	deepEqual( Stem("mountains"), "mountain" );
	deepEqual( Stem("mountant"), "mountant" );
	deepEqual( Stem("mountanto"), "mountanto" );
	deepEqual( Stem("mountebank"), "mountebank" );
	deepEqual( Stem("mountebanks"), "mountebank" );
	deepEqual( Stem("mounted"), "mount" );
	deepEqual( Stem("mounteth"), "mounteth" );
	deepEqual( Stem("mounting"), "mount" );
	deepEqual( Stem("mounts"), "mount" );
	deepEqual( Stem("mourn"), "mourn" );
	deepEqual( Stem("mourned"), "mourn" );
	deepEqual( Stem("mourner"), "mourner" );
	deepEqual( Stem("mourners"), "mourner" );
	deepEqual( Stem("mournful"), "mourn" );
	deepEqual( Stem("mournfully"), "mournfulli" );
	deepEqual( Stem("mourning"), "mourn" );
	deepEqual( Stem("mourningly"), "mourningli" );
	deepEqual( Stem("mournings"), "mourn" );
	deepEqual( Stem("mourns"), "mourn" );
	deepEqual( Stem("mous"), "mou" );
	deepEqual( Stem("mouse"), "mous" );
	deepEqual( Stem("mousetrap"), "mousetrap" );
	deepEqual( Stem("mousing"), "mous" );
	deepEqual( Stem("mousquetaires"), "mousquetair" );
	deepEqual( Stem("moustache"), "moustach" );
	deepEqual( Stem("moustached"), "moustach" );
	deepEqual( Stem("moustaches"), "moustach" );
	deepEqual( Stem("mouth"), "mouth" );
	deepEqual( Stem("mouthed"), "mouth" );
	deepEqual( Stem("mouthfuls"), "mouth" );
	deepEqual( Stem("mouths"), "mouth" );
	deepEqual( Stem("mouton"), "mouton" );
	deepEqual( Stem("moutongonavvy"), "moutongonavvi" );
	deepEqual( Stem("mov"), "mov" );
	deepEqual( Stem("movables"), "movabl" );
	deepEqual( Stem("move"), "move" );
	deepEqual( Stem("moveable"), "moveabl" );
	deepEqual( Stem("moveables"), "moveabl" );
	deepEqual( Stem("moved"), "move" );
	deepEqual( Stem("movement"), "movement" );
	deepEqual( Stem("movements"), "movement" );
	deepEqual( Stem("mover"), "mover" );
	deepEqual( Stem("movers"), "mover" );
	deepEqual( Stem("moves"), "move" );
	deepEqual( Stem("moveth"), "moveth" );
	deepEqual( Stem("moving"), "move" );
	deepEqual( Stem("movingly"), "movingli" );
	deepEqual( Stem("movousus"), "movousu" );
	deepEqual( Stem("mow"), "mow" );
	deepEqual( Stem("mowbray"), "mowbrai" );
	deepEqual( Stem("mower"), "mower" );
	deepEqual( Stem("mowing"), "mow" );
	deepEqual( Stem("mows"), "mow" );
	deepEqual( Stem("moy"), "moi" );
	deepEqual( Stem("moys"), "moi" );
	deepEqual( Stem("moyses"), "moys" );
	deepEqual( Stem("mozart"), "mozart" );
	deepEqual( Stem("mr"), "mr" );
	deepEqual( Stem("mrs"), "mr" );
	deepEqual( Stem("much"), "much" );
	deepEqual( Stem("muck"), "muck" );
	deepEqual( Stem("mud"), "mud" );
	deepEqual( Stem("mudbury"), "mudburi" );
	deepEqual( Stem("mudded"), "mud" );
	deepEqual( Stem("muddied"), "muddi" );
	deepEqual( Stem("muddled"), "muddl" );
	deepEqual( Stem("muddy"), "muddi" );
	deepEqual( Stem("muff"), "muff" );
	deepEqual( Stem("muffin"), "muffin" );
	deepEqual( Stem("muffins"), "muffin" );
	deepEqual( Stem("muffl"), "muffl" );
	deepEqual( Stem("muffle"), "muffl" );
	deepEqual( Stem("muffled"), "muffl" );
	deepEqual( Stem("muffler"), "muffler" );
	deepEqual( Stem("muffling"), "muffl" );
	deepEqual( Stem("mug"), "mug" );
	deepEqual( Stem("mugger"), "mugger" );
	deepEqual( Stem("mugs"), "mug" );
	deepEqual( Stem("mulatto"), "mulatto" );
	deepEqual( Stem("mulberries"), "mulberri" );
	deepEqual( Stem("mulberry"), "mulberri" );
	deepEqual( Stem("mule"), "mule" );
	deepEqual( Stem("mules"), "mule" );
	deepEqual( Stem("muleteers"), "mulet" );
	deepEqual( Stem("mulier"), "mulier" );
	deepEqual( Stem("mulieres"), "mulier" );
	deepEqual( Stem("muliteus"), "muliteu" );
	deepEqual( Stem("mull"), "mull" );
	deepEqual( Stem("mulligatawney"), "mulligatawnei" );
	deepEqual( Stem("mulls"), "mull" );
	deepEqual( Stem("mulmutius"), "mulmutiu" );
	deepEqual( Stem("multifarious"), "multifari" );
	deepEqual( Stem("multiplicity"), "multipl" );
	deepEqual( Stem("multiplied"), "multipli" );
	deepEqual( Stem("multiplies"), "multipli" );
	deepEqual( Stem("multiply"), "multipli" );
	deepEqual( Stem("multiplying"), "multipli" );
	deepEqual( Stem("multipotent"), "multipot" );
	deepEqual( Stem("multitude"), "multitud" );
	deepEqual( Stem("multitudes"), "multitud" );
	deepEqual( Stem("multitudinous"), "multitudin" );
	deepEqual( Stem("mum"), "mum" );
	deepEqual( Stem("mumble"), "mumbl" );
	deepEqual( Stem("mumbled"), "mumbl" );
	deepEqual( Stem("mumbling"), "mumbl" );
	deepEqual( Stem("mummers"), "mummer" );
	deepEqual( Stem("mummy"), "mummi" );
	deepEqual( Stem("mun"), "mun" );
	deepEqual( Stem("munch"), "munch" );
	deepEqual( Stem("munched"), "munch" );
	deepEqual( Stem("munching"), "munch" );
	deepEqual( Stem("mungo"), "mungo" );
	deepEqual( Stem("munich"), "munich" );
	deepEqual( Stem("muniments"), "muniment" );
	deepEqual( Stem("munition"), "munit" );
	deepEqual( Stem("munoz"), "munoz" );
	deepEqual( Stem("murat"), "murat" );
	deepEqual( Stem("murd"), "murd" );
	deepEqual( Stem("murder"), "murder" );
	deepEqual( Stem("murdered"), "murder" );
	deepEqual( Stem("murderer"), "murder" );
	deepEqual( Stem("murderers"), "murder" );
	deepEqual( Stem("murderess"), "murderess" );
	deepEqual( Stem("murdering"), "murder" );
	deepEqual( Stem("murderous"), "murder" );
	deepEqual( Stem("murders"), "murder" );
	deepEqual( Stem("mure"), "mure" );
	deepEqual( Stem("muri"), "muri" );
	deepEqual( Stem("murk"), "murk" );
	deepEqual( Stem("murkiest"), "murkiest" );
	deepEqual( Stem("murky"), "murki" );
	deepEqual( Stem("murmur"), "murmur" );
	deepEqual( Stem("murmurers"), "murmur" );
	deepEqual( Stem("murmuring"), "murmur" );
	deepEqual( Stem("murrain"), "murrain" );
	deepEqual( Stem("murray"), "murrai" );
	deepEqual( Stem("murrion"), "murrion" );
	deepEqual( Stem("murther"), "murther" );
	deepEqual( Stem("murtherer"), "murther" );
	deepEqual( Stem("murtherers"), "murther" );
	deepEqual( Stem("murthering"), "murther" );
	deepEqual( Stem("murtherous"), "murther" );
	deepEqual( Stem("murthers"), "murther" );
	deepEqual( Stem("muryan"), "muryan" );
	deepEqual( Stem("mus"), "mu" );
	deepEqual( Stem("muscadel"), "muscadel" );
	deepEqual( Stem("muscle"), "muscl" );
	deepEqual( Stem("muscovites"), "muscovit" );
	deepEqual( Stem("muscovits"), "muscovit" );
	deepEqual( Stem("muscovy"), "muscovi" );
	deepEqual( Stem("muse"), "muse" );
	deepEqual( Stem("mused"), "muse" );
	deepEqual( Stem("muses"), "muse" );
	deepEqual( Stem("museum"), "museum" );
	deepEqual( Stem("mush"), "mush" );
	deepEqual( Stem("mushroom"), "mushroom" );
	deepEqual( Stem("mushrooms"), "mushroom" );
	deepEqual( Stem("music"), "music" );
	deepEqual( Stem("musical"), "music" );
	deepEqual( Stem("musicale"), "musical" );
	deepEqual( Stem("musician"), "musician" );
	deepEqual( Stem("musicians"), "musician" );
	deepEqual( Stem("musics"), "music" );
	deepEqual( Stem("musing"), "muse" );
	deepEqual( Stem("musings"), "muse" );
	deepEqual( Stem("musk"), "musk" );
	deepEqual( Stem("musket"), "musket" );
	deepEqual( Stem("muskets"), "musket" );
	deepEqual( Stem("muskos"), "musko" );
	deepEqual( Stem("muslin"), "muslin" );
	deepEqual( Stem("muslins"), "muslin" );
	deepEqual( Stem("musqueteers"), "musquet" );
	deepEqual( Stem("musquito"), "musquito" );
	deepEqual( Stem("muss"), "muss" );
	deepEqual( Stem("mussel"), "mussel" );
	deepEqual( Stem("mussels"), "mussel" );
	deepEqual( Stem("must"), "must" );
	deepEqual( Stem("mustachio"), "mustachio" );
	deepEqual( Stem("mustachios"), "mustachio" );
	deepEqual( Stem("mustard"), "mustard" );
	deepEqual( Stem("mustardseed"), "mustardse" );
	deepEqual( Stem("muster"), "muster" );
	deepEqual( Stem("mustered"), "muster" );
	deepEqual( Stem("mustering"), "muster" );
	deepEqual( Stem("musters"), "muster" );
	deepEqual( Stem("mustn"), "mustn" );
	deepEqual( Stem("musty"), "musti" );
	deepEqual( Stem("muswell"), "muswel" );
	deepEqual( Stem("mutability"), "mutabl" );
	deepEqual( Stem("mutable"), "mutabl" );
	deepEqual( Stem("mutation"), "mutat" );
	deepEqual( Stem("mutations"), "mutat" );
	deepEqual( Stem("mutato"), "mutato" );
	deepEqual( Stem("mute"), "mute" );
	deepEqual( Stem("mutely"), "mute" );
	deepEqual( Stem("muteness"), "mute" );
	deepEqual( Stem("mutes"), "mute" );
	deepEqual( Stem("mutest"), "mutest" );
	deepEqual( Stem("mutine"), "mutin" );
	deepEqual( Stem("mutineer"), "mutin" );
	deepEqual( Stem("mutineers"), "mutin" );
	deepEqual( Stem("mutines"), "mutin" );
	deepEqual( Stem("mutinies"), "mutini" );
	deepEqual( Stem("mutinous"), "mutin" );
	deepEqual( Stem("mutiny"), "mutini" );
	deepEqual( Stem("mutius"), "mutiu" );
	deepEqual( Stem("mutter"), "mutter" );
	deepEqual( Stem("muttered"), "mutter" );
	deepEqual( Stem("mutton"), "mutton" );
	deepEqual( Stem("muttons"), "mutton" );
	deepEqual( Stem("mutual"), "mutual" );
	deepEqual( Stem("mutualities"), "mutual" );
	deepEqual( Stem("mutually"), "mutual" );
	deepEqual( Stem("muzzl"), "muzzl" );
	deepEqual( Stem("muzzle"), "muzzl" );
	deepEqual( Stem("muzzled"), "muzzl" );
	deepEqual( Stem("mv"), "mv" );
	deepEqual( Stem("mww"), "mww" );
	deepEqual( Stem("my"), "my" );
	deepEqual( Stem("mynheers"), "mynheer" );
	deepEqual( Stem("myriads"), "myriad" );
	deepEqual( Stem("myrmidon"), "myrmidon" );
	deepEqual( Stem("myrmidons"), "myrmidon" );
	deepEqual( Stem("myrtle"), "myrtl" );
	deepEqual( Stem("myself"), "myself" );
	deepEqual( Stem("myst"), "myst" );
	deepEqual( Stem("mysteries"), "mysteri" );
	deepEqual( Stem("mysterious"), "mysteri" );
	deepEqual( Stem("mystery"), "mysteri" );
	deepEqual( Stem("mystic"), "mystic" );
	deepEqual( Stem("mystical"), "mystic" );
	deepEqual( Stem("mystify"), "mystifi" );
	deepEqual( Stem("myth"), "myth" );
	deepEqual( Stem("n"), "n" );
	deepEqual( Stem("nabbed"), "nab" );
	deepEqual( Stem("nabob"), "nabob" );
	deepEqual( Stem("nabobs"), "nabob" );
	deepEqual( Stem("nach"), "nach" );
	deepEqual( Stem("nag"), "nag" );
	deepEqual( Stem("nage"), "nage" );
	deepEqual( Stem("nags"), "nag" );
	deepEqual( Stem("naiads"), "naiad" );
	deepEqual( Stem("nail"), "nail" );
	deepEqual( Stem("nailed"), "nail" );
	deepEqual( Stem("nails"), "nail" );
	deepEqual( Stem("naive"), "naiv" );
	deepEqual( Stem("naivete"), "naivet" );
	deepEqual( Stem("nak"), "nak" );
	deepEqual( Stem("naked"), "nake" );
	deepEqual( Stem("nakedness"), "naked" );
	deepEqual( Stem("nal"), "nal" );
	deepEqual( Stem("nam"), "nam" );
	deepEqual( Stem("namby"), "nambi" );
	deepEqual( Stem("name"), "name" );
	deepEqual( Stem("named"), "name" );
	deepEqual( Stem("nameless"), "nameless" );
	deepEqual( Stem("namely"), "name" );
	deepEqual( Stem("names"), "name" );
	deepEqual( Stem("namest"), "namest" );
	deepEqual( Stem("naming"), "name" );
	deepEqual( Stem("namur"), "namur" );
	deepEqual( Stem("nan"), "nan" );
	deepEqual( Stem("nance"), "nanc" );
	deepEqual( Stem("nankeen"), "nankeen" );
	deepEqual( Stem("nap"), "nap" );
	deepEqual( Stem("nape"), "nape" );
	deepEqual( Stem("napes"), "nape" );
	deepEqual( Stem("napier"), "napier" );
	deepEqual( Stem("napkin"), "napkin" );
	deepEqual( Stem("napkins"), "napkin" );
	deepEqual( Stem("naples"), "napl" );
	deepEqual( Stem("napless"), "napless" );
	deepEqual( Stem("napoleon"), "napoleon" );
	deepEqual( Stem("napoleons"), "napoleon" );
	deepEqual( Stem("napping"), "nap" );
	deepEqual( Stem("naps"), "nap" );
	deepEqual( Stem("narbon"), "narbon" );
	deepEqual( Stem("narcissus"), "narcissu" );
	deepEqual( Stem("narghile"), "narghil" );
	deepEqual( Stem("narines"), "narin" );
	deepEqual( Stem("narrated"), "narrat" );
	deepEqual( Stem("narrating"), "narrat" );
	deepEqual( Stem("narration"), "narrat" );
	deepEqual( Stem("narrative"), "narr" );
	deepEqual( Stem("narratives"), "narr" );
	deepEqual( Stem("narrow"), "narrow" );
	deepEqual( Stem("narrowly"), "narrowli" );
	deepEqual( Stem("naso"), "naso" );
	deepEqual( Stem("nassau"), "nassau" );
	deepEqual( Stem("nasty"), "nasti" );
	deepEqual( Stem("nat"), "nat" );
	deepEqual( Stem("nathan"), "nathan" );
	deepEqual( Stem("nathaniel"), "nathaniel" );
	deepEqual( Stem("natifs"), "natif" );
	deepEqual( Stem("nation"), "nation" );
	deepEqual( Stem("national"), "nation" );
	deepEqual( Stem("nations"), "nation" );
	deepEqual( Stem("native"), "nativ" );
	deepEqual( Stem("natives"), "nativ" );
	deepEqual( Stem("nativity"), "nativ" );
	deepEqual( Stem("natty"), "natti" );
	deepEqual( Stem("natur"), "natur" );
	deepEqual( Stem("natural"), "natur" );
	deepEqual( Stem("naturalize"), "natur" );
	deepEqual( Stem("naturally"), "natur" );
	deepEqual( Stem("naturalness"), "natur" );
	deepEqual( Stem("nature"), "natur" );
	deepEqual( Stem("natured"), "natur" );
	deepEqual( Stem("naturedly"), "naturedli" );
	deepEqual( Stem("naturel"), "naturel" );
	deepEqual( Stem("natures"), "natur" );
	deepEqual( Stem("natus"), "natu" );
	deepEqual( Stem("naught"), "naught" );
	deepEqual( Stem("naughtily"), "naughtili" );
	deepEqual( Stem("naughtiness"), "naughti" );
	deepEqual( Stem("naughty"), "naughti" );
	deepEqual( Stem("nautical"), "nautic" );
	deepEqual( Stem("navarre"), "navarr" );
	deepEqual( Stem("nave"), "nave" );
	deepEqual( Stem("navel"), "navel" );
	deepEqual( Stem("navets"), "navet" );
	deepEqual( Stem("navigate"), "navig" );
	deepEqual( Stem("navigation"), "navig" );
	deepEqual( Stem("navy"), "navi" );
	deepEqual( Stem("naw"), "naw" );
	deepEqual( Stem("nawt"), "nawt" );
	deepEqual( Stem("nay"), "nai" );
	deepEqual( Stem("nayther"), "nayther" );
	deepEqual( Stem("nayward"), "nayward" );
	deepEqual( Stem("nayword"), "nayword" );
	deepEqual( Stem("nazarite"), "nazarit" );
	deepEqual( Stem("ne"), "ne" );
	deepEqual( Stem("neaf"), "neaf" );
	deepEqual( Stem("neamnoins"), "neamnoin" );
	deepEqual( Stem("neanmoins"), "neanmoin" );
	deepEqual( Stem("neapolitan"), "neapolitan" );
	deepEqual( Stem("neapolitans"), "neapolitan" );
	deepEqual( Stem("near"), "near" );
	deepEqual( Stem("neared"), "near" );
	deepEqual( Stem("nearer"), "nearer" );
	deepEqual( Stem("nearest"), "nearest" );
	deepEqual( Stem("nearing"), "near" );
	deepEqual( Stem("nearly"), "nearli" );
	deepEqual( Stem("nearness"), "near" );
	deepEqual( Stem("neat"), "neat" );
	deepEqual( Stem("neatest"), "neatest" );
	deepEqual( Stem("neatly"), "neatli" );
	deepEqual( Stem("neatness"), "neat" );
	deepEqual( Stem("neb"), "neb" );
	deepEqual( Stem("nebour"), "nebour" );
	deepEqual( Stem("nebst"), "nebst" );
	deepEqual( Stem("nebuchadnezzar"), "nebuchadnezzar" );
	deepEqual( Stem("nec"), "nec" );
	deepEqual( Stem("necessaries"), "necessari" );
	deepEqual( Stem("necessarily"), "necessarili" );
	deepEqual( Stem("necessary"), "necessari" );
	deepEqual( Stem("necessitied"), "necess" );
	deepEqual( Stem("necessities"), "necess" );
	deepEqual( Stem("necessity"), "necess" );
	deepEqual( Stem("neck"), "neck" );
	deepEqual( Stem("neckcloth"), "neckcloth" );
	deepEqual( Stem("neckcloths"), "neckcloth" );
	deepEqual( Stem("necklace"), "necklac" );
	deepEqual( Stem("necklaces"), "necklac" );
	deepEqual( Stem("necks"), "neck" );
	deepEqual( Stem("nectar"), "nectar" );
	deepEqual( Stem("ned"), "ned" );
	deepEqual( Stem("nedar"), "nedar" );
	deepEqual( Stem("nee"), "nee" );
	deepEqual( Stem("need"), "need" );
	deepEqual( Stem("needed"), "need" );
	deepEqual( Stem("needer"), "needer" );
	deepEqual( Stem("needful"), "need" );
	deepEqual( Stem("needfull"), "needful" );
	deepEqual( Stem("needing"), "need" );
	deepEqual( Stem("needle"), "needl" );
	deepEqual( Stem("needles"), "needl" );
	deepEqual( Stem("needless"), "needless" );
	deepEqual( Stem("needlessly"), "needlessli" );
	deepEqual( Stem("needlework"), "needlework" );
	deepEqual( Stem("needly"), "needli" );
	deepEqual( Stem("needn"), "needn" );
	deepEqual( Stem("needs"), "need" );
	deepEqual( Stem("needy"), "needi" );
	deepEqual( Stem("neer"), "neer" );
	deepEqual( Stem("neeze"), "neez" );
	deepEqual( Stem("nefas"), "nefa" );
	deepEqual( Stem("negation"), "negat" );
	deepEqual( Stem("negative"), "neg" );
	deepEqual( Stem("negatives"), "neg" );
	deepEqual( Stem("neglect"), "neglect" );
	deepEqual( Stem("neglected"), "neglect" );
	deepEqual( Stem("neglecting"), "neglect" );
	deepEqual( Stem("neglectingly"), "neglectingli" );
	deepEqual( Stem("neglection"), "neglect" );
	deepEqual( Stem("neglects"), "neglect" );
	deepEqual( Stem("negligence"), "neglig" );
	deepEqual( Stem("negligent"), "neglig" );
	deepEqual( Stem("negotiate"), "negoti" );
	deepEqual( Stem("negotiation"), "negoti" );
	deepEqual( Stem("negotiations"), "negoti" );
	deepEqual( Stem("negro"), "negro" );
	deepEqual( Stem("negus"), "negu" );
	deepEqual( Stem("neigh"), "neigh" );
	deepEqual( Stem("neighbors"), "neighbor" );
	deepEqual( Stem("neighbour"), "neighbour" );
	deepEqual( Stem("neighbourhood"), "neighbourhood" );
	deepEqual( Stem("neighbouring"), "neighbour" );
	deepEqual( Stem("neighbourly"), "neighbourli" );
	deepEqual( Stem("neighbours"), "neighbour" );
	deepEqual( Stem("neighing"), "neigh" );
	deepEqual( Stem("neighs"), "neigh" );
	deepEqual( Stem("neither"), "neither" );
	deepEqual( Stem("nell"), "nell" );
	deepEqual( Stem("nelson"), "nelson" );
	deepEqual( Stem("nemean"), "nemean" );
	deepEqual( Stem("nemesis"), "nemesi" );
	deepEqual( Stem("neoptolemus"), "neoptolemu" );
	deepEqual( Stem("nephew"), "nephew" );
	deepEqual( Stem("nephews"), "nephew" );
	deepEqual( Stem("neptune"), "neptun" );
	deepEqual( Stem("ner"), "ner" );
	deepEqual( Stem("nereides"), "nereid" );
	deepEqual( Stem("nerissa"), "nerissa" );
	deepEqual( Stem("nero"), "nero" );
	deepEqual( Stem("neroes"), "nero" );
	deepEqual( Stem("ners"), "ner" );
	deepEqual( Stem("nerve"), "nerv" );
	deepEqual( Stem("nerves"), "nerv" );
	deepEqual( Stem("nervii"), "nervii" );
	deepEqual( Stem("nervous"), "nervou" );
	deepEqual( Stem("nervously"), "nervous" );
	deepEqual( Stem("nervousness"), "nervous" );
	deepEqual( Stem("nervy"), "nervi" );
	deepEqual( Stem("nessus"), "nessu" );
	deepEqual( Stem("nest"), "nest" );
	deepEqual( Stem("nestle"), "nestl" );
	deepEqual( Stem("nestled"), "nestl" );
	deepEqual( Stem("nestor"), "nestor" );
	deepEqual( Stem("nests"), "nest" );
	deepEqual( Stem("net"), "net" );
	deepEqual( Stem("nether"), "nether" );
	deepEqual( Stem("netherlands"), "netherland" );
	deepEqual( Stem("nets"), "net" );
	deepEqual( Stem("netted"), "net" );
	deepEqual( Stem("nettle"), "nettl" );
	deepEqual( Stem("nettled"), "nettl" );
	deepEqual( Stem("nettles"), "nettl" );
	deepEqual( Stem("neuter"), "neuter" );
	deepEqual( Stem("neutral"), "neutral" );
	deepEqual( Stem("nev"), "nev" );
	deepEqual( Stem("nevare"), "nevar" );
	deepEqual( Stem("never"), "never" );
	deepEqual( Stem("nevertheless"), "nevertheless" );
	deepEqual( Stem("nevil"), "nevil" );
	deepEqual( Stem("nevils"), "nevil" );
	deepEqual( Stem("new"), "new" );
	deepEqual( Stem("newborn"), "newborn" );
	deepEqual( Stem("newbright"), "newbright" );
	deepEqual( Stem("newcomer"), "newcom" );
	deepEqual( Stem("newcomers"), "newcom" );
	deepEqual( Stem("newer"), "newer" );
	deepEqual( Stem("newest"), "newest" );
	deepEqual( Stem("newfoundland"), "newfoundland" );
	deepEqual( Stem("newgate"), "newgat" );
	deepEqual( Stem("newly"), "newli" );
	deepEqual( Stem("newman"), "newman" );
	deepEqual( Stem("newmero"), "newmero" );
	deepEqual( Stem("newness"), "new" );
	deepEqual( Stem("news"), "new" );
	deepEqual( Stem("newsman"), "newsman" );
	deepEqual( Stem("newsmongers"), "newsmong" );
	deepEqual( Stem("newspaper"), "newspap" );
	deepEqual( Stem("newspapers"), "newspap" );
	deepEqual( Stem("newt"), "newt" );
	deepEqual( Stem("newts"), "newt" );
	deepEqual( Stem("next"), "next" );
	deepEqual( Stem("ney"), "nei" );
	deepEqual( Stem("niagara"), "niagara" );
	deepEqual( Stem("nibbling"), "nibbl" );
	deepEqual( Stem("nicanor"), "nicanor" );
	deepEqual( Stem("nice"), "nice" );
	deepEqual( Stem("nicely"), "nice" );
	deepEqual( Stem("niceness"), "nice" );
	deepEqual( Stem("nicer"), "nicer" );
	deepEqual( Stem("nicest"), "nicest" );
	deepEqual( Stem("nicety"), "niceti" );
	deepEqual( Stem("niches"), "nich" );
	deepEqual( Stem("nicholas"), "nichola" );
	deepEqual( Stem("nicht"), "nicht" );
	deepEqual( Stem("nichts"), "nicht" );
	deepEqual( Stem("nick"), "nick" );
	deepEqual( Stem("nickname"), "nicknam" );
	deepEqual( Stem("nicks"), "nick" );
	deepEqual( Stem("niece"), "niec" );
	deepEqual( Stem("nieces"), "niec" );
	deepEqual( Stem("niggard"), "niggard" );
	deepEqual( Stem("niggarding"), "niggard" );
	deepEqual( Stem("niggardliness"), "niggardli" );
	deepEqual( Stem("niggardly"), "niggardli" );
	deepEqual( Stem("nigh"), "nigh" );
	deepEqual( Stem("night"), "night" );
	deepEqual( Stem("nightcap"), "nightcap" );
	deepEqual( Stem("nightcaps"), "nightcap" );
	deepEqual( Stem("nighted"), "night" );
	deepEqual( Stem("nightfall"), "nightfal" );
	deepEqual( Stem("nightgown"), "nightgown" );
	deepEqual( Stem("nightingale"), "nightingal" );
	deepEqual( Stem("nightingales"), "nightingal" );
	deepEqual( Stem("nightly"), "nightli" );
	deepEqual( Stem("nightmare"), "nightmar" );
	deepEqual( Stem("nights"), "night" );
	deepEqual( Stem("nightwork"), "nightwork" );
	deepEqual( Stem("nihil"), "nihil" );
	deepEqual( Stem("nile"), "nile" );
	deepEqual( Stem("nill"), "nill" );
	deepEqual( Stem("nilus"), "nilu" );
	deepEqual( Stem("nimble"), "nimbl" );
	deepEqual( Stem("nimbleness"), "nimbl" );
	deepEqual( Stem("nimbler"), "nimbler" );
	deepEqual( Stem("nimbly"), "nimbli" );
	deepEqual( Stem("nincompoop"), "nincompoop" );
	deepEqual( Stem("nine"), "nine" );
	deepEqual( Stem("ninepence"), "ninep" );
	deepEqual( Stem("nineteen"), "nineteen" );
	deepEqual( Stem("ninety"), "nineti" );
	deepEqual( Stem("nineveh"), "nineveh" );
	deepEqual( Stem("ning"), "ning" );
	deepEqual( Stem("ningly"), "ningli" );
	deepEqual( Stem("ninny"), "ninni" );
	deepEqual( Stem("ninth"), "ninth" );
	deepEqual( Stem("ninus"), "ninu" );
	deepEqual( Stem("niobe"), "niob" );
	deepEqual( Stem("niobes"), "niob" );
	deepEqual( Stem("nip"), "nip" );
	deepEqual( Stem("nipp"), "nipp" );
	deepEqual( Stem("nipping"), "nip" );
	deepEqual( Stem("nipple"), "nippl" );
	deepEqual( Stem("nips"), "nip" );
	deepEqual( Stem("nit"), "nit" );
	deepEqual( Stem("nly"), "nly" );
	deepEqual( Stem("nnight"), "nnight" );
	deepEqual( Stem("nnights"), "nnight" );
	deepEqual( Stem("no"), "no" );
	deepEqual( Stem("noah"), "noah" );
	deepEqual( Stem("nob"), "nob" );
	deepEqual( Stem("nobbing"), "nob" );
	deepEqual( Stem("nobility"), "nobil" );
	deepEqual( Stem("nobis"), "nobi" );
	deepEqual( Stem("noble"), "nobl" );
	deepEqual( Stem("nobleman"), "nobleman" );
	deepEqual( Stem("noblemen"), "noblemen" );
	deepEqual( Stem("nobleness"), "nobl" );
	deepEqual( Stem("nobler"), "nobler" );
	deepEqual( Stem("nobles"), "nobl" );
	deepEqual( Stem("noblesse"), "nobless" );
	deepEqual( Stem("noblest"), "noblest" );
	deepEqual( Stem("noblet"), "noblet" );
	deepEqual( Stem("nobly"), "nobli" );
	deepEqual( Stem("nobod"), "nobod" );
	deepEqual( Stem("nobodies"), "nobodi" );
	deepEqual( Stem("nobody"), "nobodi" );
	deepEqual( Stem("nobs"), "nob" );
	deepEqual( Stem("noces"), "noce" );
	deepEqual( Stem("nod"), "nod" );
	deepEqual( Stem("nodded"), "nod" );
	deepEqual( Stem("nodding"), "nod" );
	deepEqual( Stem("noddle"), "noddl" );
	deepEqual( Stem("noddles"), "noddl" );
	deepEqual( Stem("noddy"), "noddi" );
	deepEqual( Stem("nods"), "nod" );
	deepEqual( Stem("noes"), "noe" );
	deepEqual( Stem("nointed"), "noint" );
	deepEqual( Stem("noir"), "noir" );
	deepEqual( Stem("nois"), "noi" );
	deepEqual( Stem("noise"), "nois" );
	deepEqual( Stem("noiseless"), "noiseless" );
	deepEqual( Stem("noiselessly"), "noiselessli" );
	deepEqual( Stem("noisemaker"), "noisemak" );
	deepEqual( Stem("noises"), "nois" );
	deepEqual( Stem("noisome"), "noisom" );
	deepEqual( Stem("noisy"), "noisi" );
	deepEqual( Stem("nole"), "nole" );
	deepEqual( Stem("nominal"), "nomin" );
	deepEqual( Stem("nominate"), "nomin" );
	deepEqual( Stem("nominated"), "nomin" );
	deepEqual( Stem("nomination"), "nomin" );
	deepEqual( Stem("nominations"), "nomin" );
	deepEqual( Stem("nominativo"), "nominativo" );
	deepEqual( Stem("nomine"), "nomin" );
	deepEqual( Stem("non"), "non" );
	deepEqual( Stem("nonage"), "nonag" );
	deepEqual( Stem("nonce"), "nonc" );
	deepEqual( Stem("nondum"), "nondum" );
	deepEqual( Stem("none"), "none" );
	deepEqual( Stem("nonino"), "nonino" );
	deepEqual( Stem("nonnenwerth"), "nonnenwerth" );
	deepEqual( Stem("nonny"), "nonni" );
	deepEqual( Stem("nonpareil"), "nonpareil" );
	deepEqual( Stem("nonsense"), "nonsens" );
	deepEqual( Stem("nonsuits"), "nonsuit" );
	deepEqual( Stem("nony"), "noni" );
	deepEqual( Stem("noo"), "noo" );
	deepEqual( Stem("noodle"), "noodl" );
	deepEqual( Stem("nook"), "nook" );
	deepEqual( Stem("nooks"), "nook" );
	deepEqual( Stem("noon"), "noon" );
	deepEqual( Stem("noonday"), "noondai" );
	deepEqual( Stem("noontide"), "noontid" );
	deepEqual( Stem("nor"), "nor" );
	deepEqual( Stem("norbery"), "norberi" );
	deepEqual( Stem("norfolk"), "norfolk" );
	deepEqual( Stem("normal"), "normal" );
	deepEqual( Stem("norman"), "norman" );
	deepEqual( Stem("normandy"), "normandi" );
	deepEqual( Stem("normans"), "norman" );
	deepEqual( Stem("north"), "north" );
	deepEqual( Stem("northampton"), "northampton" );
	deepEqual( Stem("northamptonshire"), "northamptonshir" );
	deepEqual( Stem("northerly"), "northerli" );
	deepEqual( Stem("northern"), "northern" );
	deepEqual( Stem("northgate"), "northgat" );
	deepEqual( Stem("northumberland"), "northumberland" );
	deepEqual( Stem("northumberlands"), "northumberland" );
	deepEqual( Stem("northward"), "northward" );
	deepEqual( Stem("norval"), "norval" );
	deepEqual( Stem("norway"), "norwai" );
	deepEqual( Stem("norways"), "norwai" );
	deepEqual( Stem("norwegian"), "norwegian" );
	deepEqual( Stem("norweyan"), "norweyan" );
	deepEqual( Stem("nos"), "no" );
	deepEqual( Stem("nose"), "nose" );
	deepEqual( Stem("nosed"), "nose" );
	deepEqual( Stem("nosegay"), "nosegai" );
	deepEqual( Stem("nosegays"), "nosegai" );
	deepEqual( Stem("noseless"), "noseless" );
	deepEqual( Stem("noses"), "nose" );
	deepEqual( Stem("noster"), "noster" );
	deepEqual( Stem("nostra"), "nostra" );
	deepEqual( Stem("nostril"), "nostril" );
	deepEqual( Stem("nostrils"), "nostril" );
	deepEqual( Stem("not"), "not" );
	deepEqual( Stem("notable"), "notabl" );
	deepEqual( Stem("notably"), "notabl" );
	deepEqual( Stem("notary"), "notari" );
	deepEqual( Stem("notch"), "notch" );
	deepEqual( Stem("note"), "note" );
	deepEqual( Stem("notebook"), "notebook" );
	deepEqual( Stem("noted"), "note" );
	deepEqual( Stem("notedly"), "notedli" );
	deepEqual( Stem("notes"), "note" );
	deepEqual( Stem("notest"), "notest" );
	deepEqual( Stem("noteworthy"), "noteworthi" );
	deepEqual( Stem("nothing"), "noth" );
	deepEqual( Stem("nothings"), "noth" );
	deepEqual( Stem("nothink"), "nothink" );
	deepEqual( Stem("notice"), "notic" );
	deepEqual( Stem("noticed"), "notic" );
	deepEqual( Stem("notify"), "notifi" );
	deepEqual( Stem("notifying"), "notifi" );
	deepEqual( Stem("noting"), "note" );
	deepEqual( Stem("notion"), "notion" );
	deepEqual( Stem("notions"), "notion" );
	deepEqual( Stem("notorious"), "notori" );
	deepEqual( Stem("notoriously"), "notori" );
	deepEqual( Stem("notre"), "notr" );
	deepEqual( Stem("notwithstanding"), "notwithstand" );
	deepEqual( Stem("nought"), "nought" );
	deepEqual( Stem("noun"), "noun" );
	deepEqual( Stem("nouns"), "noun" );
	deepEqual( Stem("nourish"), "nourish" );
	deepEqual( Stem("nourished"), "nourish" );
	deepEqual( Stem("nourisher"), "nourish" );
	deepEqual( Stem("nourishes"), "nourish" );
	deepEqual( Stem("nourisheth"), "nourisheth" );
	deepEqual( Stem("nourishing"), "nourish" );
	deepEqual( Stem("nourishment"), "nourish" );
	deepEqual( Stem("nous"), "nou" );
	deepEqual( Stem("novel"), "novel" );
	deepEqual( Stem("novelist"), "novelist" );
	deepEqual( Stem("novelists"), "novelist" );
	deepEqual( Stem("novels"), "novel" );
	deepEqual( Stem("novelties"), "novelti" );
	deepEqual( Stem("novelty"), "novelti" );
	deepEqual( Stem("november"), "novemb" );
	deepEqual( Stem("noverbs"), "noverb" );
	deepEqual( Stem("novi"), "novi" );
	deepEqual( Stem("novice"), "novic" );
	deepEqual( Stem("novices"), "novic" );
	deepEqual( Stem("novum"), "novum" );
	deepEqual( Stem("now"), "now" );
	deepEqual( Stem("nowhere"), "nowher" );
	deepEqual( Stem("noyance"), "noyanc" );
	deepEqual( Stem("ns"), "n" );
	deepEqual( Stem("nt"), "nt" );
	deepEqual( Stem("nubian"), "nubian" );
	deepEqual( Stem("nubibus"), "nubibu" );
	deepEqual( Stem("nudge"), "nudg" );
	deepEqual( Stem("nudging"), "nudg" );
	deepEqual( Stem("numa"), "numa" );
	deepEqual( Stem("numb"), "numb" );
	deepEqual( Stem("numbed"), "numb" );
	deepEqual( Stem("number"), "number" );
	deepEqual( Stem("numbered"), "number" );
	deepEqual( Stem("numbering"), "number" );
	deepEqual( Stem("numberless"), "numberless" );
	deepEqual( Stem("numbers"), "number" );
	deepEqual( Stem("numbness"), "numb" );
	deepEqual( Stem("numerous"), "numer" );
	deepEqual( Stem("nun"), "nun" );
	deepEqual( Stem("nunc"), "nunc" );
	deepEqual( Stem("nuncio"), "nuncio" );
	deepEqual( Stem("nuncle"), "nuncl" );
	deepEqual( Stem("nunnery"), "nunneri" );
	deepEqual( Stem("nuns"), "nun" );
	deepEqual( Stem("nuntius"), "nuntiu" );
	deepEqual( Stem("nuptial"), "nuptial" );
	deepEqual( Stem("nuptials"), "nuptial" );
	deepEqual( Stem("nurs"), "nur" );
	deepEqual( Stem("nurse"), "nurs" );
	deepEqual( Stem("nursed"), "nurs" );
	deepEqual( Stem("nursemaids"), "nursemaid" );
	deepEqual( Stem("nurser"), "nurser" );
	deepEqual( Stem("nursery"), "nurseri" );
	deepEqual( Stem("nurses"), "nurs" );
	deepEqual( Stem("nurseth"), "nurseth" );
	deepEqual( Stem("nursh"), "nursh" );
	deepEqual( Stem("nursing"), "nurs" );
	deepEqual( Stem("nurslings"), "nursl" );
	deepEqual( Stem("nurtur"), "nurtur" );
	deepEqual( Stem("nurture"), "nurtur" );
	deepEqual( Stem("nut"), "nut" );
	deepEqual( Stem("nutcrackers"), "nutcrack" );
	deepEqual( Stem("nuthook"), "nuthook" );
	deepEqual( Stem("nutmeg"), "nutmeg" );
	deepEqual( Stem("nutmegs"), "nutmeg" );
	deepEqual( Stem("nutriment"), "nutriment" );
	deepEqual( Stem("nuts"), "nut" );
	deepEqual( Stem("nutshell"), "nutshel" );
	deepEqual( Stem("ny"), "ny" );
	deepEqual( Stem("nym"), "nym" );
	deepEqual( Stem("nymph"), "nymph" );
	deepEqual( Stem("nymphbath"), "nymphbath" );
	deepEqual( Stem("nymphs"), "nymph" );
	deepEqual( Stem("o"), "o" );
	deepEqual( Stem("oak"), "oak" );
	deepEqual( Stem("oaken"), "oaken" );
	deepEqual( Stem("oaks"), "oak" );
	deepEqual( Stem("oar"), "oar" );
	deepEqual( Stem("oared"), "oar" );
	deepEqual( Stem("oars"), "oar" );
	deepEqual( Stem("oatcake"), "oatcak" );
	deepEqual( Stem("oaten"), "oaten" );
	deepEqual( Stem("oath"), "oath" );
	deepEqual( Stem("oathable"), "oathabl" );
	deepEqual( Stem("oaths"), "oath" );
	deepEqual( Stem("oats"), "oat" );
	deepEqual( Stem("ob"), "ob" );
	deepEqual( Stem("obduracy"), "obduraci" );
	deepEqual( Stem("obdurate"), "obdur" );
	deepEqual( Stem("obedience"), "obedi" );
	deepEqual( Stem("obedient"), "obedi" );
	deepEqual( Stem("obediently"), "obedi" );
	deepEqual( Stem("obeisance"), "obeis" );
	deepEqual( Stem("oberon"), "oberon" );
	deepEqual( Stem("obey"), "obei" );
	deepEqual( Stem("obeyed"), "obei" );
	deepEqual( Stem("obeying"), "obei" );
	deepEqual( Stem("obeys"), "obei" );
	deepEqual( Stem("obidicut"), "obidicut" );
	deepEqual( Stem("obits"), "obit" );
	deepEqual( Stem("object"), "object" );
	deepEqual( Stem("objected"), "object" );
	deepEqual( Stem("objection"), "object" );
	deepEqual( Stem("objectionable"), "objection" );
	deepEqual( Stem("objections"), "object" );
	deepEqual( Stem("objects"), "object" );
	deepEqual( Stem("objet"), "objet" );
	deepEqual( Stem("oblation"), "oblat" );
	deepEqual( Stem("oblations"), "oblat" );
	deepEqual( Stem("obligation"), "oblig" );
	deepEqual( Stem("obligations"), "oblig" );
	deepEqual( Stem("obliged"), "oblig" );
	deepEqual( Stem("obliges"), "oblig" );
	deepEqual( Stem("obliging"), "oblig" );
	deepEqual( Stem("oblique"), "obliqu" );
	deepEqual( Stem("obliquity"), "obliqu" );
	deepEqual( Stem("obliterated"), "obliter" );
	deepEqual( Stem("oblivion"), "oblivion" );
	deepEqual( Stem("oblivious"), "oblivi" );
	deepEqual( Stem("obloquy"), "obloqui" );
	deepEqual( Stem("obscene"), "obscen" );
	deepEqual( Stem("obscenely"), "obscen" );
	deepEqual( Stem("obscur"), "obscur" );
	deepEqual( Stem("obscure"), "obscur" );
	deepEqual( Stem("obscured"), "obscur" );
	deepEqual( Stem("obscurely"), "obscur" );
	deepEqual( Stem("obscures"), "obscur" );
	deepEqual( Stem("obscuring"), "obscur" );
	deepEqual( Stem("obscurity"), "obscur" );
	deepEqual( Stem("obsequies"), "obsequi" );
	deepEqual( Stem("obsequious"), "obsequi" );
	deepEqual( Stem("obsequiously"), "obsequi" );
	deepEqual( Stem("obsequiousness"), "obsequi" );
	deepEqual( Stem("observ"), "observ" );
	deepEqual( Stem("observance"), "observ" );
	deepEqual( Stem("observances"), "observ" );
	deepEqual( Stem("observancy"), "observ" );
	deepEqual( Stem("observant"), "observ" );
	deepEqual( Stem("observants"), "observ" );
	deepEqual( Stem("observation"), "observ" );
	deepEqual( Stem("observations"), "observ" );
	deepEqual( Stem("observe"), "observ" );
	deepEqual( Stem("observed"), "observ" );
	deepEqual( Stem("observer"), "observ" );
	deepEqual( Stem("observers"), "observ" );
	deepEqual( Stem("observing"), "observ" );
	deepEqual( Stem("observingly"), "observingli" );
	deepEqual( Stem("obsque"), "obsqu" );
	deepEqual( Stem("obstacle"), "obstacl" );
	deepEqual( Stem("obstacles"), "obstacl" );
	deepEqual( Stem("obstinacy"), "obstinaci" );
	deepEqual( Stem("obstinate"), "obstin" );
	deepEqual( Stem("obstinately"), "obstin" );
	deepEqual( Stem("obstruct"), "obstruct" );
	deepEqual( Stem("obstruction"), "obstruct" );
	deepEqual( Stem("obstructions"), "obstruct" );
	deepEqual( Stem("obtain"), "obtain" );
	deepEqual( Stem("obtained"), "obtain" );
	deepEqual( Stem("obtaining"), "obtain" );
	deepEqual( Stem("obtuse"), "obtus" );
	deepEqual( Stem("occasion"), "occas" );
	deepEqual( Stem("occasional"), "occasion" );
	deepEqual( Stem("occasionally"), "occasion" );
	deepEqual( Stem("occasioned"), "occas" );
	deepEqual( Stem("occasions"), "occas" );
	deepEqual( Stem("occident"), "occid" );
	deepEqual( Stem("occidental"), "occident" );
	deepEqual( Stem("occulted"), "occult" );
	deepEqual( Stem("occupant"), "occup" );
	deepEqual( Stem("occupat"), "occupat" );
	deepEqual( Stem("occupation"), "occup" );
	deepEqual( Stem("occupations"), "occup" );
	deepEqual( Stem("occupied"), "occupi" );
	deepEqual( Stem("occupier"), "occupi" );
	deepEqual( Stem("occupies"), "occupi" );
	deepEqual( Stem("occupy"), "occupi" );
	deepEqual( Stem("occupying"), "occupi" );
	deepEqual( Stem("occur"), "occur" );
	deepEqual( Stem("occurred"), "occur" );
	deepEqual( Stem("occurrence"), "occurr" );
	deepEqual( Stem("occurrences"), "occurr" );
	deepEqual( Stem("occurrents"), "occurr" );
	deepEqual( Stem("occurring"), "occur" );
	deepEqual( Stem("occurs"), "occur" );
	deepEqual( Stem("ocean"), "ocean" );
	deepEqual( Stem("oceans"), "ocean" );
	deepEqual( Stem("ochterlony"), "ochterloni" );
	deepEqual( Stem("octavia"), "octavia" );
	deepEqual( Stem("octavius"), "octaviu" );
	deepEqual( Stem("october"), "octob" );
	deepEqual( Stem("ocular"), "ocular" );
	deepEqual( Stem("od"), "od" );
	deepEqual( Stem("odalisques"), "odalisqu" );
	deepEqual( Stem("odd"), "odd" );
	deepEqual( Stem("oddest"), "oddest" );
	deepEqual( Stem("oddly"), "oddli" );
	deepEqual( Stem("odds"), "odd" );
	deepEqual( Stem("ode"), "od" );
	deepEqual( Stem("odes"), "od" );
	deepEqual( Stem("odious"), "odiou" );
	deepEqual( Stem("odoriferous"), "odorifer" );
	deepEqual( Stem("odorous"), "odor" );
	deepEqual( Stem("odour"), "odour" );
	deepEqual( Stem("odours"), "odour" );
	deepEqual( Stem("ods"), "od" );
	deepEqual( Stem("oeil"), "oeil" );
	deepEqual( Stem("oeillades"), "oeillad" );
	deepEqual( Stem("oes"), "oe" );
	deepEqual( Stem("oeuvres"), "oeuvr" );
	deepEqual( Stem("of"), "of" );
	deepEqual( Stem("ofephesus"), "ofephesu" );
	deepEqual( Stem("off"), "off" );
	deepEqual( Stem("offal"), "offal" );
	deepEqual( Stem("offence"), "offenc" );
	deepEqual( Stem("offenceful"), "offenc" );
	deepEqual( Stem("offences"), "offenc" );
	deepEqual( Stem("offend"), "offend" );
	deepEqual( Stem("offended"), "offend" );
	deepEqual( Stem("offendendo"), "offendendo" );
	deepEqual( Stem("offender"), "offend" );
	deepEqual( Stem("offenders"), "offend" );
	deepEqual( Stem("offendeth"), "offendeth" );
	deepEqual( Stem("offending"), "offend" );
	deepEqual( Stem("offendress"), "offendress" );
	deepEqual( Stem("offends"), "offend" );
	deepEqual( Stem("offense"), "offens" );
	deepEqual( Stem("offenseless"), "offenseless" );
	deepEqual( Stem("offenses"), "offens" );
	deepEqual( Stem("offensive"), "offens" );
	deepEqual( Stem("offer"), "offer" );
	deepEqual( Stem("offered"), "offer" );
	deepEqual( Stem("offering"), "offer" );
	deepEqual( Stem("offerings"), "offer" );
	deepEqual( Stem("offers"), "offer" );
	deepEqual( Stem("offert"), "offert" );
	deepEqual( Stem("offhand"), "offhand" );
	deepEqual( Stem("offic"), "offic" );
	deepEqual( Stem("office"), "offic" );
	deepEqual( Stem("officed"), "offic" );
	deepEqual( Stem("officer"), "offic" );
	deepEqual( Stem("officers"), "offic" );
	deepEqual( Stem("offices"), "offic" );
	deepEqual( Stem("official"), "offici" );
	deepEqual( Stem("officials"), "offici" );
	deepEqual( Stem("officiated"), "offici" );
	deepEqual( Stem("officiating"), "offici" );
	deepEqual( Stem("officious"), "offici" );
	deepEqual( Stem("offspring"), "offspr" );
	deepEqual( Stem("oft"), "oft" );
	deepEqual( Stem("often"), "often" );
	deepEqual( Stem("oftener"), "often" );
	deepEqual( Stem("oftentimes"), "oftentim" );
	deepEqual( Stem("ogle"), "ogl" );
	deepEqual( Stem("ogling"), "ogl" );
	deepEqual( Stem("ogres"), "ogr" );
	deepEqual( Stem("oh"), "oh" );
	deepEqual( Stem("oho"), "oho" );
	deepEqual( Stem("oi"), "oi" );
	deepEqual( Stem("oil"), "oil" );
	deepEqual( Stem("oiled"), "oil" );
	deepEqual( Stem("oilmen"), "oilmen" );
	deepEqual( Stem("oils"), "oil" );
	deepEqual( Stem("oilskin"), "oilskin" );
	deepEqual( Stem("oily"), "oili" );
	deepEqual( Stem("old"), "old" );
	deepEqual( Stem("oldcastle"), "oldcastl" );
	deepEqual( Stem("olden"), "olden" );
	deepEqual( Stem("oldened"), "olden" );
	deepEqual( Stem("older"), "older" );
	deepEqual( Stem("oldest"), "oldest" );
	deepEqual( Stem("oldish"), "oldish" );
	deepEqual( Stem("oldness"), "old" );
	deepEqual( Stem("olive"), "oliv" );
	deepEqual( Stem("oliver"), "oliv" );
	deepEqual( Stem("olivers"), "oliv" );
	deepEqual( Stem("olives"), "oliv" );
	deepEqual( Stem("olivia"), "olivia" );
	deepEqual( Stem("olympian"), "olympian" );
	deepEqual( Stem("olympus"), "olympu" );
	deepEqual( Stem("oman"), "oman" );
	deepEqual( Stem("omans"), "oman" );
	deepEqual( Stem("ombre"), "ombr" );
	deepEqual( Stem("omen"), "omen" );
	deepEqual( Stem("ominous"), "omin" );
	deepEqual( Stem("omission"), "omiss" );
	deepEqual( Stem("omit"), "omit" );
	deepEqual( Stem("omittance"), "omitt" );
	deepEqual( Stem("omitted"), "omit" );
	deepEqual( Stem("omitting"), "omit" );
	deepEqual( Stem("omne"), "omn" );
	deepEqual( Stem("omnes"), "omn" );
	deepEqual( Stem("omnibus"), "omnibu" );
	deepEqual( Stem("omnipotent"), "omnipot" );
	deepEqual( Stem("omniscience"), "omnisci" );
	deepEqual( Stem("omnium"), "omnium" );
	deepEqual( Stem("omphale"), "omphal" );
	deepEqual( Stem("on"), "on" );
	deepEqual( Stem("once"), "onc" );
	deepEqual( Stem("oncle"), "oncl" );
	deepEqual( Stem("one"), "on" );
	deepEqual( Stem("onerous"), "oner" );
	deepEqual( Stem("ones"), "on" );
	deepEqual( Stem("oneyers"), "oney" );
	deepEqual( Stem("ongles"), "ongl" );
	deepEqual( Stem("onion"), "onion" );
	deepEqual( Stem("onions"), "onion" );
	deepEqual( Stem("only"), "onli" );
	deepEqual( Stem("onset"), "onset" );
	deepEqual( Stem("ont"), "ont" );
	deepEqual( Stem("onto"), "onto" );
	deepEqual( Stem("ontrys"), "ontri" );
	deepEqual( Stem("onward"), "onward" );
	deepEqual( Stem("onwards"), "onward" );
	deepEqual( Stem("oo"), "oo" );
	deepEqual( Stem("ootiful"), "ooti" );
	deepEqual( Stem("ooze"), "ooz" );
	deepEqual( Stem("oozes"), "ooz" );
	deepEqual( Stem("oozy"), "oozi" );
	deepEqual( Stem("op"), "op" );
	deepEqual( Stem("opal"), "opal" );
	deepEqual( Stem("ope"), "op" );
	deepEqual( Stem("open"), "open" );
	deepEqual( Stem("opened"), "open" );
	deepEqual( Stem("opener"), "open" );
	deepEqual( Stem("opening"), "open" );
	deepEqual( Stem("openings"), "open" );
	deepEqual( Stem("openly"), "openli" );
	deepEqual( Stem("openness"), "open" );
	deepEqual( Stem("opens"), "open" );
	deepEqual( Stem("opera"), "opera" );
	deepEqual( Stem("operant"), "oper" );
	deepEqual( Stem("operas"), "opera" );
	deepEqual( Stem("operate"), "oper" );
	deepEqual( Stem("operated"), "oper" );
	deepEqual( Stem("operating"), "oper" );
	deepEqual( Stem("operation"), "oper" );
	deepEqual( Stem("operational"), "oper" );
	deepEqual( Stem("operationally"), "operation" );
	deepEqual( Stem("operations"), "oper" );
	deepEqual( Stem("operative"), "oper" );
	deepEqual( Stem("opes"), "op" );
	deepEqual( Stem("oph"), "oph" );
	deepEqual( Stem("ophalia"), "ophalia" );
	deepEqual( Stem("ophelia"), "ophelia" );
	deepEqual( Stem("ophicleides"), "ophicleid" );
	deepEqual( Stem("opining"), "opin" );
	deepEqual( Stem("opinion"), "opinion" );
	deepEqual( Stem("opinions"), "opinion" );
	deepEqual( Stem("opium"), "opium" );
	deepEqual( Stem("oporto"), "oporto" );
	deepEqual( Stem("opponent"), "oppon" );
	deepEqual( Stem("opponents"), "oppon" );
	deepEqual( Stem("opportune"), "opportun" );
	deepEqual( Stem("opportunely"), "opportun" );
	deepEqual( Stem("opportunities"), "opportun" );
	deepEqual( Stem("opportunity"), "opportun" );
	deepEqual( Stem("oppos"), "oppo" );
	deepEqual( Stem("oppose"), "oppos" );
	deepEqual( Stem("opposed"), "oppos" );
	deepEqual( Stem("opposeless"), "opposeless" );
	deepEqual( Stem("opposer"), "oppos" );
	deepEqual( Stem("opposers"), "oppos" );
	deepEqual( Stem("opposes"), "oppos" );
	deepEqual( Stem("opposing"), "oppos" );
	deepEqual( Stem("opposite"), "opposit" );
	deepEqual( Stem("opposites"), "opposit" );
	deepEqual( Stem("opposition"), "opposit" );
	deepEqual( Stem("oppositions"), "opposit" );
	deepEqual( Stem("oppress"), "oppress" );
	deepEqual( Stem("oppressed"), "oppress" );
	deepEqual( Stem("oppresses"), "oppress" );
	deepEqual( Stem("oppresseth"), "oppresseth" );
	deepEqual( Stem("oppressing"), "oppress" );
	deepEqual( Stem("oppression"), "oppress" );
	deepEqual( Stem("oppressor"), "oppressor" );
	deepEqual( Stem("opprest"), "opprest" );
	deepEqual( Stem("opprobriously"), "opprobri" );
	deepEqual( Stem("oppugnancy"), "oppugn" );
	deepEqual( Stem("optimus"), "optimu" );
	deepEqual( Stem("opulency"), "opul" );
	deepEqual( Stem("opulent"), "opul" );
	deepEqual( Stem("or"), "or" );
	deepEqual( Stem("oracle"), "oracl" );
	deepEqual( Stem("oracles"), "oracl" );
	deepEqual( Stem("orange"), "orang" );
	deepEqual( Stem("oration"), "orat" );
	deepEqual( Stem("orations"), "orat" );
	deepEqual( Stem("orator"), "orat" );
	deepEqual( Stem("oratorio"), "oratorio" );
	deepEqual( Stem("oratorios"), "oratorio" );
	deepEqual( Stem("orators"), "orat" );
	deepEqual( Stem("oratory"), "oratori" );
	deepEqual( Stem("orb"), "orb" );
	deepEqual( Stem("orbed"), "orb" );
	deepEqual( Stem("orbs"), "orb" );
	deepEqual( Stem("orchard"), "orchard" );
	deepEqual( Stem("orchards"), "orchard" );
	deepEqual( Stem("orchestra"), "orchestra" );
	deepEqual( Stem("ord"), "ord" );
	deepEqual( Stem("ordain"), "ordain" );
	deepEqual( Stem("ordained"), "ordain" );
	deepEqual( Stem("ordaining"), "ordain" );
	deepEqual( Stem("ordeal"), "ordeal" );
	deepEqual( Stem("order"), "order" );
	deepEqual( Stem("ordered"), "order" );
	deepEqual( Stem("ordering"), "order" );
	deepEqual( Stem("orderless"), "orderless" );
	deepEqual( Stem("orderly"), "orderli" );
	deepEqual( Stem("orders"), "order" );
	deepEqual( Stem("ordinance"), "ordin" );
	deepEqual( Stem("ordinant"), "ordin" );
	deepEqual( Stem("ordinaries"), "ordinari" );
	deepEqual( Stem("ordinarily"), "ordinarili" );
	deepEqual( Stem("ordinary"), "ordinari" );
	deepEqual( Stem("ordnance"), "ordnanc" );
	deepEqual( Stem("ords"), "ord" );
	deepEqual( Stem("ordure"), "ordur" );
	deepEqual( Stem("ore"), "or" );
	deepEqual( Stem("organ"), "organ" );
	deepEqual( Stem("organist"), "organist" );
	deepEqual( Stem("organs"), "organ" );
	deepEqual( Stem("orgillous"), "orgil" );
	deepEqual( Stem("orgy"), "orgi" );
	deepEqual( Stem("orient"), "orient" );
	deepEqual( Stem("oriental"), "orient" );
	deepEqual( Stem("orifex"), "orifex" );
	deepEqual( Stem("origin"), "origin" );
	deepEqual( Stem("original"), "origin" );
	deepEqual( Stem("originality"), "origin" );
	deepEqual( Stem("originally"), "origin" );
	deepEqual( Stem("orisons"), "orison" );
	deepEqual( Stem("ork"), "ork" );
	deepEqual( Stem("orlando"), "orlando" );
	deepEqual( Stem("orld"), "orld" );
	deepEqual( Stem("orleans"), "orlean" );
	deepEqual( Stem("ornament"), "ornament" );
	deepEqual( Stem("ornamental"), "ornament" );
	deepEqual( Stem("ornamentation"), "ornament" );
	deepEqual( Stem("ornamented"), "ornament" );
	deepEqual( Stem("ornaments"), "ornament" );
	deepEqual( Stem("orodes"), "orod" );
	deepEqual( Stem("orphan"), "orphan" );
	deepEqual( Stem("orphans"), "orphan" );
	deepEqual( Stem("orpheus"), "orpheu" );
	deepEqual( Stem("orrery"), "orreri" );
	deepEqual( Stem("orsino"), "orsino" );
	deepEqual( Stem("orson"), "orson" );
	deepEqual( Stem("ort"), "ort" );
	deepEqual( Stem("orth"), "orth" );
	deepEqual( Stem("orthodox"), "orthodox" );
	deepEqual( Stem("orthography"), "orthographi" );
	deepEqual( Stem("orts"), "ort" );
	deepEqual( Stem("orville"), "orvil" );
	deepEqual( Stem("os"), "o" );
	deepEqual( Stem("osbaldiston"), "osbaldiston" );
	deepEqual( Stem("osbin"), "osbin" );
	deepEqual( Stem("osborne"), "osborn" );
	deepEqual( Stem("osbornes"), "osborn" );
	deepEqual( Stem("oscorbidulchos"), "oscorbidulcho" );
	deepEqual( Stem("osier"), "osier" );
	deepEqual( Stem("osiers"), "osier" );
	deepEqual( Stem("osnaburgh"), "osnaburgh" );
	deepEqual( Stem("osprey"), "osprei" );
	deepEqual( Stem("osr"), "osr" );
	deepEqual( Stem("osric"), "osric" );
	deepEqual( Stem("ossa"), "ossa" );
	deepEqual( Stem("osses"), "oss" );
	deepEqual( Stem("ost"), "ost" );
	deepEqual( Stem("ostend"), "ostend" );
	deepEqual( Stem("ostent"), "ostent" );
	deepEqual( Stem("ostentare"), "ostentar" );
	deepEqual( Stem("ostentation"), "ostent" );
	deepEqual( Stem("ostentatiously"), "ostentati" );
	deepEqual( Stem("ostents"), "ostent" );
	deepEqual( Stem("ostler"), "ostler" );
	deepEqual( Stem("ostlers"), "ostler" );
	deepEqual( Stem("ostrich"), "ostrich" );
	deepEqual( Stem("osw"), "osw" );
	deepEqual( Stem("oswald"), "oswald" );
	deepEqual( Stem("otel"), "otel" );
	deepEqual( Stem("othello"), "othello" );
	deepEqual( Stem("other"), "other" );
	deepEqual( Stem("othergates"), "otherg" );
	deepEqual( Stem("others"), "other" );
	deepEqual( Stem("otherwhere"), "otherwher" );
	deepEqual( Stem("otherwhiles"), "otherwhil" );
	deepEqual( Stem("otherwise"), "otherwis" );
	deepEqual( Stem("otiosity"), "otios" );
	deepEqual( Stem("otter"), "otter" );
	deepEqual( Stem("ottoman"), "ottoman" );
	deepEqual( Stem("ottomans"), "ottoman" );
	deepEqual( Stem("ottomites"), "ottomit" );
	deepEqual( Stem("oublie"), "oubli" );
	deepEqual( Stem("ouches"), "ouch" );
	deepEqual( Stem("ought"), "ought" );
	deepEqual( Stem("oui"), "oui" );
	deepEqual( Stem("ounce"), "ounc" );
	deepEqual( Stem("ounces"), "ounc" );
	deepEqual( Stem("ouphes"), "ouph" );
	deepEqual( Stem("our"), "our" );
	deepEqual( Stem("ours"), "our" );
	deepEqual( Stem("ourself"), "ourself" );
	deepEqual( Stem("ourselves"), "ourselv" );
	deepEqual( Stem("ouse"), "ous" );
	deepEqual( Stem("ousel"), "ousel" );
	deepEqual( Stem("oust"), "oust" );
	deepEqual( Stem("ousted"), "oust" );
	deepEqual( Stem("out"), "out" );
	deepEqual( Stem("outbids"), "outbid" );
	deepEqual( Stem("outbrave"), "outbrav" );
	deepEqual( Stem("outbraves"), "outbrav" );
	deepEqual( Stem("outbreak"), "outbreak" );
	deepEqual( Stem("outcast"), "outcast" );
	deepEqual( Stem("outcries"), "outcri" );
	deepEqual( Stem("outcry"), "outcri" );
	deepEqual( Stem("outdar"), "outdar" );
	deepEqual( Stem("outdare"), "outdar" );
	deepEqual( Stem("outdares"), "outdar" );
	deepEqual( Stem("outdone"), "outdon" );
	deepEqual( Stem("outer"), "outer" );
	deepEqual( Stem("outfac"), "outfac" );
	deepEqual( Stem("outface"), "outfac" );
	deepEqual( Stem("outfaced"), "outfac" );
	deepEqual( Stem("outfacing"), "outfac" );
	deepEqual( Stem("outfit"), "outfit" );
	deepEqual( Stem("outfits"), "outfit" );
	deepEqual( Stem("outfly"), "outfli" );
	deepEqual( Stem("outfrown"), "outfrown" );
	deepEqual( Stem("outgo"), "outgo" );
	deepEqual( Stem("outgoes"), "outgo" );
	deepEqual( Stem("outgoings"), "outgo" );
	deepEqual( Stem("outgrown"), "outgrown" );
	deepEqual( Stem("outhouse"), "outhous" );
	deepEqual( Stem("outhouses"), "outhous" );
	deepEqual( Stem("outjest"), "outjest" );
	deepEqual( Stem("outlaw"), "outlaw" );
	deepEqual( Stem("outlawed"), "outlaw" );
	deepEqual( Stem("outlawry"), "outlawri" );
	deepEqual( Stem("outlaws"), "outlaw" );
	deepEqual( Stem("outlay"), "outlai" );
	deepEqual( Stem("outliv"), "outliv" );
	deepEqual( Stem("outlive"), "outliv" );
	deepEqual( Stem("outlives"), "outliv" );
	deepEqual( Stem("outliving"), "outliv" );
	deepEqual( Stem("outlook"), "outlook" );
	deepEqual( Stem("outlustres"), "outlustr" );
	deepEqual( Stem("outlying"), "outli" );
	deepEqual( Stem("outpoured"), "outpour" );
	deepEqual( Stem("outpouring"), "outpour" );
	deepEqual( Stem("outpourings"), "outpour" );
	deepEqual( Stem("outpriz"), "outpriz" );
	deepEqual( Stem("outrage"), "outrag" );
	deepEqual( Stem("outraged"), "outrag" );
	deepEqual( Stem("outrageous"), "outrag" );
	deepEqual( Stem("outrageously"), "outrag" );
	deepEqual( Stem("outrages"), "outrag" );
	deepEqual( Stem("outran"), "outran" );
	deepEqual( Stem("outriders"), "outrid" );
	deepEqual( Stem("outright"), "outright" );
	deepEqual( Stem("outroar"), "outroar" );
	deepEqual( Stem("outrun"), "outrun" );
	deepEqual( Stem("outrunning"), "outrun" );
	deepEqual( Stem("outruns"), "outrun" );
	deepEqual( Stem("outscold"), "outscold" );
	deepEqual( Stem("outscorn"), "outscorn" );
	deepEqual( Stem("outsell"), "outsel" );
	deepEqual( Stem("outsells"), "outsel" );
	deepEqual( Stem("outset"), "outset" );
	deepEqual( Stem("outshone"), "outshon" );
	deepEqual( Stem("outside"), "outsid" );
	deepEqual( Stem("outsides"), "outsid" );
	deepEqual( Stem("outskirts"), "outskirt" );
	deepEqual( Stem("outspeaks"), "outspeak" );
	deepEqual( Stem("outsport"), "outsport" );
	deepEqual( Stem("outstanding"), "outstand" );
	deepEqual( Stem("outstare"), "outstar" );
	deepEqual( Stem("outstay"), "outstai" );
	deepEqual( Stem("outstood"), "outstood" );
	deepEqual( Stem("outstretch"), "outstretch" );
	deepEqual( Stem("outstretched"), "outstretch" );
	deepEqual( Stem("outstrike"), "outstrik" );
	deepEqual( Stem("outstrip"), "outstrip" );
	deepEqual( Stem("outstripped"), "outstrip" );
	deepEqual( Stem("outswear"), "outswear" );
	deepEqual( Stem("outvenoms"), "outvenom" );
	deepEqual( Stem("outward"), "outward" );
	deepEqual( Stem("outwardly"), "outwardli" );
	deepEqual( Stem("outwards"), "outward" );
	deepEqual( Stem("outwear"), "outwear" );
	deepEqual( Stem("outweighs"), "outweigh" );
	deepEqual( Stem("outwent"), "outwent" );
	deepEqual( Stem("outworks"), "outwork" );
	deepEqual( Stem("outworn"), "outworn" );
	deepEqual( Stem("outworths"), "outworth" );
	deepEqual( Stem("oven"), "oven" );
	deepEqual( Stem("over"), "over" );
	deepEqual( Stem("overate"), "over" );
	deepEqual( Stem("overawe"), "overaw" );
	deepEqual( Stem("overbear"), "overbear" );
	deepEqual( Stem("overbearing"), "overbear" );
	deepEqual( Stem("overblown"), "overblown" );
	deepEqual( Stem("overboard"), "overboard" );
	deepEqual( Stem("overbold"), "overbold" );
	deepEqual( Stem("overborne"), "overborn" );
	deepEqual( Stem("overbulk"), "overbulk" );
	deepEqual( Stem("overbuys"), "overbui" );
	deepEqual( Stem("overcame"), "overcam" );
	deepEqual( Stem("overcast"), "overcast" );
	deepEqual( Stem("overcharg"), "overcharg" );
	deepEqual( Stem("overcharged"), "overcharg" );
	deepEqual( Stem("overcome"), "overcom" );
	deepEqual( Stem("overcomes"), "overcom" );
	deepEqual( Stem("overdone"), "overdon" );
	deepEqual( Stem("overdrawn"), "overdrawn" );
	deepEqual( Stem("overdressed"), "overdress" );
	deepEqual( Stem("overdue"), "overdu" );
	deepEqual( Stem("overearnest"), "overearnest" );
	deepEqual( Stem("overeaten"), "overeaten" );
	deepEqual( Stem("overfar"), "overfar" );
	deepEqual( Stem("overflow"), "overflow" );
	deepEqual( Stem("overflowed"), "overflow" );
	deepEqual( Stem("overflowing"), "overflow" );
	deepEqual( Stem("overflown"), "overflown" );
	deepEqual( Stem("overglance"), "overgl" );
	deepEqual( Stem("overgo"), "overgo" );
	deepEqual( Stem("overgone"), "overgon" );
	deepEqual( Stem("overgorg"), "overgorg" );
	deepEqual( Stem("overgrown"), "overgrown" );
	deepEqual( Stem("overhauled"), "overhaul" );
	deepEqual( Stem("overhead"), "overhead" );
	deepEqual( Stem("overhear"), "overhear" );
	deepEqual( Stem("overheard"), "overheard" );
	deepEqual( Stem("overhold"), "overhold" );
	deepEqual( Stem("overjoyed"), "overjoi" );
	deepEqual( Stem("overkind"), "overkind" );
	deepEqual( Stem("overland"), "overland" );
	deepEqual( Stem("overleather"), "overleath" );
	deepEqual( Stem("overlive"), "overl" );
	deepEqual( Stem("overlook"), "overlook" );
	deepEqual( Stem("overlooking"), "overlook" );
	deepEqual( Stem("overlooks"), "overlook" );
	deepEqual( Stem("overmaster"), "overmast" );
	deepEqual( Stem("overmounting"), "overmount" );
	deepEqual( Stem("overmuch"), "overmuch" );
	deepEqual( Stem("overpass"), "overpass" );
	deepEqual( Stem("overpeer"), "overp" );
	deepEqual( Stem("overpeering"), "overp" );
	deepEqual( Stem("overplus"), "overplu" );
	deepEqual( Stem("overpower"), "overpow" );
	deepEqual( Stem("overpowered"), "overpow" );
	deepEqual( Stem("overpowering"), "overpow" );
	deepEqual( Stem("overrated"), "overr" );
	deepEqual( Stem("overrul"), "overrul" );
	deepEqual( Stem("overruled"), "overrul" );
	deepEqual( Stem("overrun"), "overrun" );
	deepEqual( Stem("overscutch"), "overscutch" );
	deepEqual( Stem("overseers"), "overs" );
	deepEqual( Stem("overset"), "overset" );
	deepEqual( Stem("overshades"), "overshad" );
	deepEqual( Stem("overshine"), "overshin" );
	deepEqual( Stem("overshines"), "overshin" );
	deepEqual( Stem("overshot"), "overshot" );
	deepEqual( Stem("oversights"), "oversight" );
	deepEqual( Stem("overspread"), "overspread" );
	deepEqual( Stem("overstain"), "overstain" );
	deepEqual( Stem("overstrained"), "overstrain" );
	deepEqual( Stem("overswear"), "overswear" );
	deepEqual( Stem("overt"), "overt" );
	deepEqual( Stem("overta"), "overta" );
	deepEqual( Stem("overtake"), "overtak" );
	deepEqual( Stem("overtaken"), "overtaken" );
	deepEqual( Stem("overtaketh"), "overtaketh" );
	deepEqual( Stem("overthrow"), "overthrow" );
	deepEqual( Stem("overthrown"), "overthrown" );
	deepEqual( Stem("overthrows"), "overthrow" );
	deepEqual( Stem("overtook"), "overtook" );
	deepEqual( Stem("overtopp"), "overtopp" );
	deepEqual( Stem("overture"), "overtur" );
	deepEqual( Stem("overtures"), "overtur" );
	deepEqual( Stem("overturn"), "overturn" );
	deepEqual( Stem("overwatch"), "overwatch" );
	deepEqual( Stem("overween"), "overween" );
	deepEqual( Stem("overweening"), "overween" );
	deepEqual( Stem("overweigh"), "overweigh" );
	deepEqual( Stem("overwhelm"), "overwhelm" );
	deepEqual( Stem("overwhelmed"), "overwhelm" );
	deepEqual( Stem("overwhelming"), "overwhelm" );
	deepEqual( Stem("overworn"), "overworn" );
	deepEqual( Stem("ovid"), "ovid" );
	deepEqual( Stem("ovidius"), "ovidiu" );
	deepEqual( Stem("ow"), "ow" );
	deepEqual( Stem("owe"), "ow" );
	deepEqual( Stem("owed"), "ow" );
	deepEqual( Stem("owedst"), "owedst" );
	deepEqual( Stem("owen"), "owen" );
	deepEqual( Stem("owes"), "ow" );
	deepEqual( Stem("owest"), "owest" );
	deepEqual( Stem("oweth"), "oweth" );
	deepEqual( Stem("owing"), "ow" );
	deepEqual( Stem("owl"), "owl" );
	deepEqual( Stem("owls"), "owl" );
	deepEqual( Stem("own"), "own" );
	deepEqual( Stem("owned"), "own" );
	deepEqual( Stem("owner"), "owner" );
	deepEqual( Stem("owners"), "owner" );
	deepEqual( Stem("owning"), "own" );
	deepEqual( Stem("owns"), "own" );
	deepEqual( Stem("owy"), "owi" );
	deepEqual( Stem("ox"), "ox" );
	deepEqual( Stem("oxen"), "oxen" );
	deepEqual( Stem("oxford"), "oxford" );
	deepEqual( Stem("oxfordshire"), "oxfordshir" );
	deepEqual( Stem("oxlips"), "oxlip" );
	deepEqual( Stem("oxonian"), "oxonian" );
	deepEqual( Stem("oxonians"), "oxonian" );
	deepEqual( Stem("oyes"), "oy" );
	deepEqual( Stem("oyster"), "oyster" );
	deepEqual( Stem("oysters"), "oyster" );
	deepEqual( Stem("oystherstown"), "oystherstown" );
	deepEqual( Stem("oz"), "oz" );
	deepEqual( Stem("p"), "p" );
	deepEqual( Stem("pa"), "pa" );
	deepEqual( Stem("pabble"), "pabbl" );
	deepEqual( Stem("pabylon"), "pabylon" );
	deepEqual( Stem("pac"), "pac" );
	deepEqual( Stem("pace"), "pace" );
	deepEqual( Stem("paced"), "pace" );
	deepEqual( Stem("paces"), "pace" );
	deepEqual( Stem("pacified"), "pacifi" );
	deepEqual( Stem("pacify"), "pacifi" );
	deepEqual( Stem("pacing"), "pace" );
	deepEqual( Stem("pack"), "pack" );
	deepEqual( Stem("package"), "packag" );
	deepEqual( Stem("packages"), "packag" );
	deepEqual( Stem("packed"), "pack" );
	deepEqual( Stem("packet"), "packet" );
	deepEqual( Stem("packets"), "packet" );
	deepEqual( Stem("packhorses"), "packhors" );
	deepEqual( Stem("packing"), "pack" );
	deepEqual( Stem("packings"), "pack" );
	deepEqual( Stem("packs"), "pack" );
	deepEqual( Stem("packthread"), "packthread" );
	deepEqual( Stem("pacorus"), "pacoru" );
	deepEqual( Stem("paction"), "paction" );
	deepEqual( Stem("pad"), "pad" );
	deepEqual( Stem("padded"), "pad" );
	deepEqual( Stem("padding"), "pad" );
	deepEqual( Stem("paddington"), "paddington" );
	deepEqual( Stem("paddle"), "paddl" );
	deepEqual( Stem("paddling"), "paddl" );
	deepEqual( Stem("paddock"), "paddock" );
	deepEqual( Stem("padua"), "padua" );
	deepEqual( Stem("pagan"), "pagan" );
	deepEqual( Stem("pagans"), "pagan" );
	deepEqual( Stem("page"), "page" );
	deepEqual( Stem("pageant"), "pageant" );
	deepEqual( Stem("pageants"), "pageant" );
	deepEqual( Stem("pages"), "page" );
	deepEqual( Stem("pagoda"), "pagoda" );
	deepEqual( Stem("pagody"), "pagodi" );
	deepEqual( Stem("pah"), "pah" );
	deepEqual( Stem("paid"), "paid" );
	deepEqual( Stem("pail"), "pail" );
	deepEqual( Stem("pailfuls"), "pail" );
	deepEqual( Stem("pails"), "pail" );
	deepEqual( Stem("pain"), "pain" );
	deepEqual( Stem("pained"), "pain" );
	deepEqual( Stem("painful"), "pain" );
	deepEqual( Stem("painfully"), "painfulli" );
	deepEqual( Stem("painless"), "painless" );
	deepEqual( Stem("pains"), "pain" );
	deepEqual( Stem("paint"), "paint" );
	deepEqual( Stem("painted"), "paint" );
	deepEqual( Stem("painter"), "painter" );
	deepEqual( Stem("painters"), "painter" );
	deepEqual( Stem("painting"), "paint" );
	deepEqual( Stem("paintings"), "paint" );
	deepEqual( Stem("paints"), "paint" );
	deepEqual( Stem("pair"), "pair" );
	deepEqual( Stem("paired"), "pair" );
	deepEqual( Stem("pairs"), "pair" );
	deepEqual( Stem("pajock"), "pajock" );
	deepEqual( Stem("pal"), "pal" );
	deepEqual( Stem("palabras"), "palabra" );
	deepEqual( Stem("palace"), "palac" );
	deepEqual( Stem("palaces"), "palac" );
	deepEqual( Stem("palais"), "palai" );
	deepEqual( Stem("palamedes"), "palamed" );
	deepEqual( Stem("palanquin"), "palanquin" );
	deepEqual( Stem("palatable"), "palat" );
	deepEqual( Stem("palate"), "palat" );
	deepEqual( Stem("palates"), "palat" );
	deepEqual( Stem("palatinate"), "palatin" );
	deepEqual( Stem("palatine"), "palatin" );
	deepEqual( Stem("palating"), "palat" );
	deepEqual( Stem("pale"), "pale" );
	deepEqual( Stem("paled"), "pale" );
	deepEqual( Stem("palely"), "pale" );
	deepEqual( Stem("paleness"), "pale" );
	deepEqual( Stem("paler"), "paler" );
	deepEqual( Stem("palermo"), "palermo" );
	deepEqual( Stem("pales"), "pale" );
	deepEqual( Stem("palestine"), "palestin" );
	deepEqual( Stem("palfrey"), "palfrei" );
	deepEqual( Stem("palfreys"), "palfrei" );
	deepEqual( Stem("palings"), "pale" );
	deepEqual( Stem("palisadoes"), "palisado" );
	deepEqual( Stem("pall"), "pall" );
	deepEqual( Stem("pallabris"), "pallabri" );
	deepEqual( Stem("pallas"), "palla" );
	deepEqual( Stem("palled"), "pall" );
	deepEqual( Stem("pallets"), "pallet" );
	deepEqual( Stem("pallid"), "pallid" );
	deepEqual( Stem("pallor"), "pallor" );
	deepEqual( Stem("palls"), "pall" );
	deepEqual( Stem("palm"), "palm" );
	deepEqual( Stem("palmer"), "palmer" );
	deepEqual( Stem("palmers"), "palmer" );
	deepEqual( Stem("palms"), "palm" );
	deepEqual( Stem("palmy"), "palmi" );
	deepEqual( Stem("palpable"), "palpabl" );
	deepEqual( Stem("palpitated"), "palpit" );
	deepEqual( Stem("palpitation"), "palpit" );
	deepEqual( Stem("palsied"), "palsi" );
	deepEqual( Stem("palsies"), "palsi" );
	deepEqual( Stem("palsy"), "palsi" );
	deepEqual( Stem("palt"), "palt" );
	deepEqual( Stem("palter"), "palter" );
	deepEqual( Stem("paltry"), "paltri" );
	deepEqual( Stem("paly"), "pali" );
	deepEqual( Stem("palynological"), "palynolog" );
	deepEqual( Stem("palynologically"), "palynolog" );
	deepEqual( Stem("palynologies"), "palynologi" );
	deepEqual( Stem("palynology"), "palynologi" );
	deepEqual( Stem("pamby"), "pambi" );
	deepEqual( Stem("pamp"), "pamp" );
	deepEqual( Stem("pamper"), "pamper" );
	deepEqual( Stem("pampered"), "pamper" );
	deepEqual( Stem("pamphlet"), "pamphlet" );
	deepEqual( Stem("pamphlets"), "pamphlet" );
	deepEqual( Stem("pan"), "pan" );
	deepEqual( Stem("pancackes"), "pancack" );
	deepEqual( Stem("pancake"), "pancak" );
	deepEqual( Stem("pancakes"), "pancak" );
	deepEqual( Stem("pancras"), "pancra" );
	deepEqual( Stem("pandar"), "pandar" );
	deepEqual( Stem("pandars"), "pandar" );
	deepEqual( Stem("pandarus"), "pandaru" );
	deepEqual( Stem("pander"), "pander" );
	deepEqual( Stem("panderly"), "panderli" );
	deepEqual( Stem("panders"), "pander" );
	deepEqual( Stem("pandulph"), "pandulph" );
	deepEqual( Stem("pane"), "pane" );
	deepEqual( Stem("panel"), "panel" );
	deepEqual( Stem("panels"), "panel" );
	deepEqual( Stem("panes"), "pane" );
	deepEqual( Stem("pang"), "pang" );
	deepEqual( Stem("panging"), "pang" );
	deepEqual( Stem("pangs"), "pang" );
	deepEqual( Stem("panic"), "panic" );
	deepEqual( Stem("pannier"), "pannier" );
	deepEqual( Stem("pannonians"), "pannonian" );
	deepEqual( Stem("panorama"), "panorama" );
	deepEqual( Stem("pans"), "pan" );
	deepEqual( Stem("pansa"), "pansa" );
	deepEqual( Stem("pansies"), "pansi" );
	deepEqual( Stem("pant"), "pant" );
	deepEqual( Stem("pantaloon"), "pantaloon" );
	deepEqual( Stem("pantaloons"), "pantaloon" );
	deepEqual( Stem("pantechnicon"), "pantechnicon" );
	deepEqual( Stem("panted"), "pant" );
	deepEqual( Stem("pantheon"), "pantheon" );
	deepEqual( Stem("panther"), "panther" );
	deepEqual( Stem("panthino"), "panthino" );
	deepEqual( Stem("panting"), "pant" );
	deepEqual( Stem("pantingly"), "pantingli" );
	deepEqual( Stem("pantler"), "pantler" );
	deepEqual( Stem("pantomime"), "pantomim" );
	deepEqual( Stem("pantry"), "pantri" );
	deepEqual( Stem("pants"), "pant" );
	deepEqual( Stem("paolo"), "paolo" );
	deepEqual( Stem("pap"), "pap" );
	deepEqual( Stem("papa"), "papa" );
	deepEqual( Stem("papageno"), "papageno" );
	deepEqual( Stem("papal"), "papal" );
	deepEqual( Stem("papas"), "papa" );
	deepEqual( Stem("paper"), "paper" );
	deepEqual( Stem("papers"), "paper" );
	deepEqual( Stem("paphlagonia"), "paphlagonia" );
	deepEqual( Stem("paphos"), "papho" );
	deepEqual( Stem("papillon"), "papillon" );
	deepEqual( Stem("papillotes"), "papillot" );
	deepEqual( Stem("papist"), "papist" );
	deepEqual( Stem("papoosh"), "papoosh" );
	deepEqual( Stem("paps"), "pap" );
	deepEqual( Stem("par"), "par" );
	deepEqual( Stem("parable"), "parabl" );
	deepEqual( Stem("paracelsus"), "paracelsu" );
	deepEqual( Stem("parade"), "parad" );
	deepEqual( Stem("paraded"), "parad" );
	deepEqual( Stem("parades"), "parad" );
	deepEqual( Stem("paradise"), "paradis" );
	deepEqual( Stem("paradox"), "paradox" );
	deepEqual( Stem("paradoxes"), "paradox" );
	deepEqual( Stem("paragon"), "paragon" );
	deepEqual( Stem("paragons"), "paragon" );
	deepEqual( Stem("paragraph"), "paragraph" );
	deepEqual( Stem("parallel"), "parallel" );
	deepEqual( Stem("parallels"), "parallel" );
	deepEqual( Stem("paramount"), "paramount" );
	deepEqual( Stem("paramour"), "paramour" );
	deepEqual( Stem("paramours"), "paramour" );
	deepEqual( Stem("parapets"), "parapet" );
	deepEqual( Stem("paraphernalia"), "paraphernalia" );
	deepEqual( Stem("paraquito"), "paraquito" );
	deepEqual( Stem("parasite"), "parasit" );
	deepEqual( Stem("parasites"), "parasit" );
	deepEqual( Stem("parasol"), "parasol" );
	deepEqual( Stem("parbleu"), "parbleu" );
	deepEqual( Stem("parc"), "parc" );
	deepEqual( Stem("parca"), "parca" );
	deepEqual( Stem("parcel"), "parcel" );
	deepEqual( Stem("parcell"), "parcel" );
	deepEqual( Stem("parcels"), "parcel" );
	deepEqual( Stem("parch"), "parch" );
	deepEqual( Stem("parched"), "parch" );
	deepEqual( Stem("parching"), "parch" );
	deepEqual( Stem("parchment"), "parchment" );
	deepEqual( Stem("pard"), "pard" );
	deepEqual( Stem("pardon"), "pardon" );
	deepEqual( Stem("pardona"), "pardona" );
	deepEqual( Stem("pardonable"), "pardon" );
	deepEqual( Stem("pardoned"), "pardon" );
	deepEqual( Stem("pardoner"), "pardon" );
	deepEqual( Stem("pardoning"), "pardon" );
	deepEqual( Stem("pardonne"), "pardonn" );
	deepEqual( Stem("pardonner"), "pardonn" );
	deepEqual( Stem("pardonnez"), "pardonnez" );
	deepEqual( Stem("pardons"), "pardon" );
	deepEqual( Stem("pare"), "pare" );
	deepEqual( Stem("pared"), "pare" );
	deepEqual( Stem("parel"), "parel" );
	deepEqual( Stem("parent"), "parent" );
	deepEqual( Stem("parentage"), "parentag" );
	deepEqual( Stem("parental"), "parent" );
	deepEqual( Stem("parenthetic"), "parenthet" );
	deepEqual( Stem("parents"), "parent" );
	deepEqual( Stem("parfect"), "parfect" );
	deepEqual( Stem("paring"), "pare" );
	deepEqual( Stem("parings"), "pare" );
	deepEqual( Stem("paris"), "pari" );
	deepEqual( Stem("pariser"), "paris" );
	deepEqual( Stem("parish"), "parish" );
	deepEqual( Stem("parishioners"), "parishion" );
	deepEqual( Stem("parisian"), "parisian" );
	deepEqual( Stem("parisians"), "parisian" );
	deepEqual( Stem("parisot"), "parisot" );
	deepEqual( Stem("paritors"), "paritor" );
	deepEqual( Stem("park"), "park" );
	deepEqual( Stem("parker"), "parker" );
	deepEqual( Stem("parks"), "park" );
	deepEqual( Stem("parle"), "parl" );
	deepEqual( Stem("parler"), "parler" );
	deepEqual( Stem("parles"), "parl" );
	deepEqual( Stem("parley"), "parlei" );
	deepEqual( Stem("parleys"), "parlei" );
	deepEqual( Stem("parlez"), "parlez" );
	deepEqual( Stem("parliament"), "parliament" );
	deepEqual( Stem("parliamentary"), "parliamentari" );
	deepEqual( Stem("parlors"), "parlor" );
	deepEqual( Stem("parlour"), "parlour" );
	deepEqual( Stem("parlours"), "parlour" );
	deepEqual( Stem("parlous"), "parlou" );
	deepEqual( Stem("parmacity"), "parmac" );
	deepEqual( Stem("parole"), "parol" );
	deepEqual( Stem("parolles"), "parol" );
	deepEqual( Stem("paroxysm"), "paroxysm" );
	deepEqual( Stem("parquet"), "parquet" );
	deepEqual( Stem("parricide"), "parricid" );
	deepEqual( Stem("parricides"), "parricid" );
	deepEqual( Stem("parried"), "parri" );
	deepEqual( Stem("parrot"), "parrot" );
	deepEqual( Stem("parrots"), "parrot" );
	deepEqual( Stem("parry"), "parri" );
	deepEqual( Stem("parsimonious"), "parsimoni" );
	deepEqual( Stem("parsimony"), "parsimoni" );
	deepEqual( Stem("parsley"), "parslei" );
	deepEqual( Stem("parsnips"), "parsnip" );
	deepEqual( Stem("parson"), "parson" );
	deepEqual( Stem("parsonage"), "parsonag" );
	deepEqual( Stem("parsons"), "parson" );
	deepEqual( Stem("part"), "part" );
	deepEqual( Stem("partake"), "partak" );
	deepEqual( Stem("partaken"), "partaken" );
	deepEqual( Stem("partaker"), "partak" );
	deepEqual( Stem("partakers"), "partak" );
	deepEqual( Stem("partaking"), "partak" );
	deepEqual( Stem("parted"), "part" );
	deepEqual( Stem("parthia"), "parthia" );
	deepEqual( Stem("parthian"), "parthian" );
	deepEqual( Stem("parthians"), "parthian" );
	deepEqual( Stem("parti"), "parti" );
	deepEqual( Stem("partial"), "partial" );
	deepEqual( Stem("partiality"), "partial" );
	deepEqual( Stem("partialize"), "partial" );
	deepEqual( Stem("partially"), "partial" );
	deepEqual( Stem("participate"), "particip" );
	deepEqual( Stem("participated"), "particip" );
	deepEqual( Stem("participation"), "particip" );
	deepEqual( Stem("particle"), "particl" );
	deepEqual( Stem("particles"), "particl" );
	deepEqual( Stem("particular"), "particular" );
	deepEqual( Stem("particularities"), "particular" );
	deepEqual( Stem("particularize"), "particular" );
	deepEqual( Stem("particularly"), "particularli" );
	deepEqual( Stem("particulars"), "particular" );
	deepEqual( Stem("parties"), "parti" );
	deepEqual( Stem("parting"), "part" );
	deepEqual( Stem("partisan"), "partisan" );
	deepEqual( Stem("partisans"), "partisan" );
	deepEqual( Stem("partition"), "partit" );
	deepEqual( Stem("partizan"), "partizan" );
	deepEqual( Stem("partlet"), "partlet" );
	deepEqual( Stem("partly"), "partli" );
	deepEqual( Stem("partner"), "partner" );
	deepEqual( Stem("partners"), "partner" );
	deepEqual( Stem("partnership"), "partnership" );
	deepEqual( Stem("partook"), "partook" );
	deepEqual( Stem("partridge"), "partridg" );
	deepEqual( Stem("partridges"), "partridg" );
	deepEqual( Stem("parts"), "part" );
	deepEqual( Stem("party"), "parti" );
	deepEqual( Stem("parvenue"), "parvenu" );
	deepEqual( Stem("parvenus"), "parvenu" );
	deepEqual( Stem("pas"), "pa" );
	deepEqual( Stem("pash"), "pash" );
	deepEqual( Stem("pasha"), "pasha" );
	deepEqual( Stem("pashed"), "pash" );
	deepEqual( Stem("pashful"), "pash" );
	deepEqual( Stem("pass"), "pass" );
	deepEqual( Stem("passable"), "passabl" );
	deepEqual( Stem("passado"), "passado" );
	deepEqual( Stem("passage"), "passag" );
	deepEqual( Stem("passages"), "passag" );
	deepEqual( Stem("passant"), "passant" );
	deepEqual( Stem("passed"), "pass" );
	deepEqual( Stem("passenger"), "passeng" );
	deepEqual( Stem("passengers"), "passeng" );
	deepEqual( Stem("passers"), "passer" );
	deepEqual( Stem("passes"), "pass" );
	deepEqual( Stem("passeth"), "passeth" );
	deepEqual( Stem("passing"), "pass" );
	deepEqual( Stem("passio"), "passio" );
	deepEqual( Stem("passion"), "passion" );
	deepEqual( Stem("passionate"), "passion" );
	deepEqual( Stem("passionately"), "passion" );
	deepEqual( Stem("passioning"), "passion" );
	deepEqual( Stem("passions"), "passion" );
	deepEqual( Stem("passive"), "passiv" );
	deepEqual( Stem("passport"), "passport" );
	deepEqual( Stem("passy"), "passi" );
	deepEqual( Stem("past"), "past" );
	deepEqual( Stem("pasta"), "pasta" );
	deepEqual( Stem("paste"), "past" );
	deepEqual( Stem("pasteboard"), "pasteboard" );
	deepEqual( Stem("pasted"), "past" );
	deepEqual( Stem("pasterns"), "pastern" );
	deepEqual( Stem("pasties"), "pasti" );
	deepEqual( Stem("pastille"), "pastil" );
	deepEqual( Stem("pastime"), "pastim" );
	deepEqual( Stem("pastimes"), "pastim" );
	deepEqual( Stem("pasting"), "past" );
	deepEqual( Stem("pastoral"), "pastor" );
	deepEqual( Stem("pastorally"), "pastor" );
	deepEqual( Stem("pastorals"), "pastor" );
	deepEqual( Stem("pastors"), "pastor" );
	deepEqual( Stem("pastry"), "pastri" );
	deepEqual( Stem("pasture"), "pastur" );
	deepEqual( Stem("pastures"), "pastur" );
	deepEqual( Stem("pasty"), "pasti" );
	deepEqual( Stem("pat"), "pat" );
	deepEqual( Stem("patay"), "patai" );
	deepEqual( Stem("patch"), "patch" );
	deepEqual( Stem("patched"), "patch" );
	deepEqual( Stem("patchery"), "patcheri" );
	deepEqual( Stem("patches"), "patch" );
	deepEqual( Stem("pate"), "pate" );
	deepEqual( Stem("pated"), "pate" );
	deepEqual( Stem("patent"), "patent" );
	deepEqual( Stem("patents"), "patent" );
	deepEqual( Stem("paternal"), "patern" );
	deepEqual( Stem("paternally"), "patern" );
	deepEqual( Stem("pates"), "pate" );
	deepEqual( Stem("path"), "path" );
	deepEqual( Stem("pathetic"), "pathet" );
	deepEqual( Stem("pathetical"), "pathet" );
	deepEqual( Stem("pathetically"), "pathet" );
	deepEqual( Stem("pathos"), "patho" );
	deepEqual( Stem("paths"), "path" );
	deepEqual( Stem("pathway"), "pathwai" );
	deepEqual( Stem("pathways"), "pathwai" );
	deepEqual( Stem("patience"), "patienc" );
	deepEqual( Stem("patient"), "patient" );
	deepEqual( Stem("patiently"), "patient" );
	deepEqual( Stem("patients"), "patient" );
	deepEqual( Stem("patines"), "patin" );
	deepEqual( Stem("patria"), "patria" );
	deepEqual( Stem("patrician"), "patrician" );
	deepEqual( Stem("patricians"), "patrician" );
	deepEqual( Stem("patrick"), "patrick" );
	deepEqual( Stem("patrimony"), "patrimoni" );
	deepEqual( Stem("patriotic"), "patriot" );
	deepEqual( Stem("patriots"), "patriot" );
	deepEqual( Stem("patroclus"), "patroclu" );
	deepEqual( Stem("patron"), "patron" );
	deepEqual( Stem("patronage"), "patronag" );
	deepEqual( Stem("patroness"), "patro" );
	deepEqual( Stem("patronesses"), "patro" );
	deepEqual( Stem("patronise"), "patronis" );
	deepEqual( Stem("patronised"), "patronis" );
	deepEqual( Stem("patronising"), "patronis" );
	deepEqual( Stem("patronize"), "patron" );
	deepEqual( Stem("patronized"), "patron" );
	deepEqual( Stem("patronizes"), "patron" );
	deepEqual( Stem("patronizing"), "patron" );
	deepEqual( Stem("patronizingly"), "patronizingli" );
	deepEqual( Stem("patrons"), "patron" );
	deepEqual( Stem("patrum"), "patrum" );
	deepEqual( Stem("patted"), "pat" );
	deepEqual( Stem("pattens"), "patten" );
	deepEqual( Stem("patter"), "patter" );
	deepEqual( Stem("pattering"), "patter" );
	deepEqual( Stem("pattern"), "pattern" );
	deepEqual( Stem("patterns"), "pattern" );
	deepEqual( Stem("patting"), "pat" );
	deepEqual( Stem("pattle"), "pattl" );
	deepEqual( Stem("pauca"), "pauca" );
	deepEqual( Stem("paucas"), "pauca" );
	deepEqual( Stem("paul"), "paul" );
	deepEqual( Stem("paulina"), "paulina" );
	deepEqual( Stem("pauline"), "paulin" );
	deepEqual( Stem("paunch"), "paunch" );
	deepEqual( Stem("paunches"), "paunch" );
	deepEqual( Stem("pauper"), "pauper" );
	deepEqual( Stem("pause"), "paus" );
	deepEqual( Stem("paused"), "paus" );
	deepEqual( Stem("pauser"), "pauser" );
	deepEqual( Stem("pauses"), "paus" );
	deepEqual( Stem("pausing"), "paus" );
	deepEqual( Stem("pausingly"), "pausingli" );
	deepEqual( Stem("pauvre"), "pauvr" );
	deepEqual( Stem("pauvres"), "pauvr" );
	deepEqual( Stem("pav"), "pav" );
	deepEqual( Stem("paved"), "pave" );
	deepEqual( Stem("pavement"), "pavement" );
	deepEqual( Stem("pavilion"), "pavilion" );
	deepEqual( Stem("pavilions"), "pavilion" );
	deepEqual( Stem("pavin"), "pavin" );
	deepEqual( Stem("paw"), "paw" );
	deepEqual( Stem("pawed"), "paw" );
	deepEqual( Stem("pawing"), "paw" );
	deepEqual( Stem("pawn"), "pawn" );
	deepEqual( Stem("pawned"), "pawn" );
	deepEqual( Stem("pawnee"), "pawne" );
	deepEqual( Stem("pawns"), "pawn" );
	deepEqual( Stem("paws"), "paw" );
	deepEqual( Stem("pax"), "pax" );
	deepEqual( Stem("pay"), "pai" );
	deepEqual( Stem("payest"), "payest" );
	deepEqual( Stem("paying"), "pai" );
	deepEqual( Stem("payment"), "payment" );
	deepEqual( Stem("payments"), "payment" );
	deepEqual( Stem("payne"), "payn" );
	deepEqual( Stem("paynter"), "paynter" );
	deepEqual( Stem("pays"), "pai" );
	deepEqual( Stem("paysan"), "paysan" );
	deepEqual( Stem("paysans"), "paysan" );
	deepEqual( Stem("pe"), "pe" );
	deepEqual( Stem("pea"), "pea" );
	deepEqual( Stem("peace"), "peac" );
	deepEqual( Stem("peaceable"), "peaceabl" );
	deepEqual( Stem("peaceably"), "peaceabl" );
	deepEqual( Stem("peaceful"), "peac" );
	deepEqual( Stem("peacefully"), "peacefulli" );
	deepEqual( Stem("peacemaker"), "peacemak" );
	deepEqual( Stem("peacemakers"), "peacemak" );
	deepEqual( Stem("peaces"), "peac" );
	deepEqual( Stem("peach"), "peach" );
	deepEqual( Stem("peached"), "peach" );
	deepEqual( Stem("peaches"), "peach" );
	deepEqual( Stem("peacock"), "peacock" );
	deepEqual( Stem("peacocks"), "peacock" );
	deepEqual( Stem("peak"), "peak" );
	deepEqual( Stem("peaking"), "peak" );
	deepEqual( Stem("peal"), "peal" );
	deepEqual( Stem("pealed"), "peal" );
	deepEqual( Stem("peals"), "peal" );
	deepEqual( Stem("pear"), "pear" );
	deepEqual( Stem("peard"), "peard" );
	deepEqual( Stem("pearl"), "pearl" );
	deepEqual( Stem("pearls"), "pearl" );
	deepEqual( Stem("pears"), "pear" );
	deepEqual( Stem("peas"), "pea" );
	deepEqual( Stem("peasant"), "peasant" );
	deepEqual( Stem("peasantry"), "peasantri" );
	deepEqual( Stem("peasants"), "peasant" );
	deepEqual( Stem("peascod"), "peascod" );
	deepEqual( Stem("pease"), "peas" );
	deepEqual( Stem("peaseblossom"), "peaseblossom" );
	deepEqual( Stem("peat"), "peat" );
	deepEqual( Stem("peaten"), "peaten" );
	deepEqual( Stem("peating"), "peat" );
	deepEqual( Stem("pebble"), "pebbl" );
	deepEqual( Stem("pebbled"), "pebbl" );
	deepEqual( Stem("pebbles"), "pebbl" );
	deepEqual( Stem("peccadilloes"), "peccadillo" );
	deepEqual( Stem("peck"), "peck" );
	deepEqual( Stem("pecked"), "peck" );
	deepEqual( Stem("pecking"), "peck" );
	deepEqual( Stem("peckish"), "peckish" );
	deepEqual( Stem("peckover"), "peckov" );
	deepEqual( Stem("pecks"), "peck" );
	deepEqual( Stem("peculation"), "pecul" );
	deepEqual( Stem("peculiar"), "peculiar" );
	deepEqual( Stem("peculiarities"), "peculiar" );
	deepEqual( Stem("peculiarly"), "peculiarli" );
	deepEqual( Stem("pecuniary"), "pecuniari" );
	deepEqual( Stem("pecus"), "pecu" );
	deepEqual( Stem("pedagogue"), "pedagogu" );
	deepEqual( Stem("pedant"), "pedant" );
	deepEqual( Stem("pedantical"), "pedant" );
	deepEqual( Stem("pedascule"), "pedascul" );
	deepEqual( Stem("pede"), "pede" );
	deepEqual( Stem("pedestal"), "pedest" );
	deepEqual( Stem("pedigree"), "pedigre" );
	deepEqual( Stem("pedlar"), "pedlar" );
	deepEqual( Stem("pedlars"), "pedlar" );
	deepEqual( Stem("pedro"), "pedro" );
	deepEqual( Stem("peds"), "ped" );
	deepEqual( Stem("peel"), "peel" );
	deepEqual( Stem("peep"), "peep" );
	deepEqual( Stem("peeped"), "peep" );
	deepEqual( Stem("peepers"), "peeper" );
	deepEqual( Stem("peeping"), "peep" );
	deepEqual( Stem("peeps"), "peep" );
	deepEqual( Stem("peer"), "peer" );
	deepEqual( Stem("peerage"), "peerag" );
	deepEqual( Stem("peeresses"), "peeress" );
	deepEqual( Stem("peereth"), "peereth" );
	deepEqual( Stem("peering"), "peer" );
	deepEqual( Stem("peerless"), "peerless" );
	deepEqual( Stem("peers"), "peer" );
	deepEqual( Stem("peesel"), "peesel" );
	deepEqual( Stem("peevish"), "peevish" );
	deepEqual( Stem("peevishly"), "peevishli" );
	deepEqual( Stem("peflur"), "peflur" );
	deepEqual( Stem("peg"), "peg" );
	deepEqual( Stem("pegasus"), "pegasu" );
	deepEqual( Stem("peggy"), "peggi" );
	deepEqual( Stem("pegs"), "peg" );
	deepEqual( Stem("peise"), "peis" );
	deepEqual( Stem("peised"), "peis" );
	deepEqual( Stem("peize"), "peiz" );
	deepEqual( Stem("pekin"), "pekin" );
	deepEqual( Stem("pelagie"), "pelagi" );
	deepEqual( Stem("pelf"), "pelf" );
	deepEqual( Stem("pelican"), "pelican" );
	deepEqual( Stem("pelion"), "pelion" );
	deepEqual( Stem("pelisse"), "peliss" );
	deepEqual( Stem("pelisses"), "peliss" );
	deepEqual( Stem("pell"), "pell" );
	deepEqual( Stem("pella"), "pella" );
	deepEqual( Stem("pelleted"), "pellet" );
	deepEqual( Stem("pellite"), "pellit" );
	deepEqual( Stem("peloponnesus"), "peloponnesu" );
	deepEqual( Stem("pelt"), "pelt" );
	deepEqual( Stem("pelting"), "pelt" );
	deepEqual( Stem("pembroke"), "pembrok" );
	deepEqual( Stem("pen"), "pen" );
	deepEqual( Stem("penalties"), "penalti" );
	deepEqual( Stem("penalty"), "penalti" );
	deepEqual( Stem("penance"), "penanc" );
	deepEqual( Stem("penances"), "penanc" );
	deepEqual( Stem("pence"), "penc" );
	deepEqual( Stem("pencil"), "pencil" );
	deepEqual( Stem("pencill"), "pencil" );
	deepEqual( Stem("pencils"), "pencil" );
	deepEqual( Stem("pendant"), "pendant" );
	deepEqual( Stem("pendent"), "pendent" );
	deepEqual( Stem("pending"), "pend" );
	deepEqual( Stem("pendragon"), "pendragon" );
	deepEqual( Stem("pendulous"), "pendul" );
	deepEqual( Stem("penelope"), "penelop" );
	deepEqual( Stem("penetrable"), "penetr" );
	deepEqual( Stem("penetrate"), "penetr" );
	deepEqual( Stem("penetrated"), "penetr" );
	deepEqual( Stem("penetrative"), "penetr" );
	deepEqual( Stem("peninsula"), "peninsula" );
	deepEqual( Stem("peninsular"), "peninsular" );
	deepEqual( Stem("penitence"), "penit" );
	deepEqual( Stem("penitent"), "penit" );
	deepEqual( Stem("penitential"), "penitenti" );
	deepEqual( Stem("penitently"), "penit" );
	deepEqual( Stem("penitents"), "penit" );
	deepEqual( Stem("penker"), "penker" );
	deepEqual( Stem("penknife"), "penknif" );
	deepEqual( Stem("penn"), "penn" );
	deepEqual( Stem("penned"), "pen" );
	deepEqual( Stem("penniless"), "penniless" );
	deepEqual( Stem("penning"), "pen" );
	deepEqual( Stem("pennons"), "pennon" );
	deepEqual( Stem("pennorth"), "pennorth" );
	deepEqual( Stem("penny"), "penni" );
	deepEqual( Stem("pennyworth"), "pennyworth" );
	deepEqual( Stem("pennyworths"), "pennyworth" );
	deepEqual( Stem("pens"), "pen" );
	deepEqual( Stem("pense"), "pens" );
	deepEqual( Stem("pension"), "pension" );
	deepEqual( Stem("pensioners"), "pension" );
	deepEqual( Stem("pensions"), "pension" );
	deepEqual( Stem("pensive"), "pensiv" );
	deepEqual( Stem("pensived"), "pensiv" );
	deepEqual( Stem("pensively"), "pensiv" );
	deepEqual( Stem("pent"), "pent" );
	deepEqual( Stem("pentecost"), "pentecost" );
	deepEqual( Stem("penthesilea"), "penthesilea" );
	deepEqual( Stem("penthouse"), "penthous" );
	deepEqual( Stem("penurious"), "penuri" );
	deepEqual( Stem("penury"), "penuri" );
	deepEqual( Stem("penwigs"), "penwig" );
	deepEqual( Stem("peopl"), "peopl" );
	deepEqual( Stem("people"), "peopl" );
	deepEqual( Stem("peopled"), "peopl" );
	deepEqual( Stem("peoples"), "peopl" );
	deepEqual( Stem("pepin"), "pepin" );
	deepEqual( Stem("pepper"), "pepper" );
	deepEqual( Stem("peppercorn"), "peppercorn" );
	deepEqual( Stem("peppered"), "pepper" );
	deepEqual( Stem("peppers"), "pepper" );
	deepEqual( Stem("per"), "per" );
	deepEqual( Stem("peradventure"), "peradventur" );
	deepEqual( Stem("peradventures"), "peradventur" );
	deepEqual( Stem("perceiv"), "perceiv" );
	deepEqual( Stem("perceive"), "perceiv" );
	deepEqual( Stem("perceived"), "perceiv" );
	deepEqual( Stem("perceives"), "perceiv" );
	deepEqual( Stem("perceiveth"), "perceiveth" );
	deepEqual( Stem("perceiving"), "perceiv" );
	deepEqual( Stem("perch"), "perch" );
	deepEqual( Stem("perchance"), "perchanc" );
	deepEqual( Stem("perched"), "perch" );
	deepEqual( Stem("percies"), "perci" );
	deepEqual( Stem("percussion"), "percuss" );
	deepEqual( Stem("percy"), "perci" );
	deepEqual( Stem("perdie"), "perdi" );
	deepEqual( Stem("perdita"), "perdita" );
	deepEqual( Stem("perdition"), "perdit" );
	deepEqual( Stem("perdonato"), "perdonato" );
	deepEqual( Stem("perdu"), "perdu" );
	deepEqual( Stem("perdurable"), "perdur" );
	deepEqual( Stem("perdurably"), "perdur" );
	deepEqual( Stem("perdy"), "perdi" );
	deepEqual( Stem("pere"), "pere" );
	deepEqual( Stem("peregrinate"), "peregrin" );
	deepEqual( Stem("peregrinations"), "peregrin" );
	deepEqual( Stem("peremptorily"), "peremptorili" );
	deepEqual( Stem("peremptory"), "peremptori" );
	deepEqual( Stem("perennial"), "perenni" );
	deepEqual( Stem("perennially"), "perenni" );
	deepEqual( Stem("perfect"), "perfect" );
	deepEqual( Stem("perfected"), "perfect" );
	deepEqual( Stem("perfecter"), "perfect" );
	deepEqual( Stem("perfectest"), "perfectest" );
	deepEqual( Stem("perfection"), "perfect" );
	deepEqual( Stem("perfections"), "perfect" );
	deepEqual( Stem("perfectly"), "perfectli" );
	deepEqual( Stem("perfectness"), "perfect" );
	deepEqual( Stem("perfidious"), "perfidi" );
	deepEqual( Stem("perfidiously"), "perfidi" );
	deepEqual( Stem("perforce"), "perforc" );
	deepEqual( Stem("perform"), "perform" );
	deepEqual( Stem("performance"), "perform" );
	deepEqual( Stem("performances"), "perform" );
	deepEqual( Stem("performed"), "perform" );
	deepEqual( Stem("performer"), "perform" );
	deepEqual( Stem("performers"), "perform" );
	deepEqual( Stem("performing"), "perform" );
	deepEqual( Stem("performs"), "perform" );
	deepEqual( Stem("perfum"), "perfum" );
	deepEqual( Stem("perfume"), "perfum" );
	deepEqual( Stem("perfumed"), "perfum" );
	deepEqual( Stem("perfumer"), "perfum" );
	deepEqual( Stem("perfumery"), "perfumeri" );
	deepEqual( Stem("perfumes"), "perfum" );
	deepEqual( Stem("perfuming"), "perfum" );
	deepEqual( Stem("perge"), "perg" );
	deepEqual( Stem("perhaps"), "perhap" );
	deepEqual( Stem("periapts"), "periapt" );
	deepEqual( Stem("peribanou"), "periban" );
	deepEqual( Stem("perigord"), "perigord" );
	deepEqual( Stem("perigort"), "perigort" );
	deepEqual( Stem("perigouna"), "perigouna" );
	deepEqual( Stem("peril"), "peril" );
	deepEqual( Stem("perilled"), "peril" );
	deepEqual( Stem("perilous"), "peril" );
	deepEqual( Stem("perils"), "peril" );
	deepEqual( Stem("period"), "period" );
	deepEqual( Stem("periodical"), "period" );
	deepEqual( Stem("periodically"), "period" );
	deepEqual( Stem("periods"), "period" );
	deepEqual( Stem("perish"), "perish" );
	deepEqual( Stem("perished"), "perish" );
	deepEqual( Stem("perishest"), "perishest" );
	deepEqual( Stem("perisheth"), "perisheth" );
	deepEqual( Stem("perishing"), "perish" );
	deepEqual( Stem("periwig"), "periwig" );
	deepEqual( Stem("perjur"), "perjur" );
	deepEqual( Stem("perjure"), "perjur" );
	deepEqual( Stem("perjured"), "perjur" );
	deepEqual( Stem("perjuries"), "perjuri" );
	deepEqual( Stem("perjury"), "perjuri" );
	deepEqual( Stem("perk"), "perk" );
	deepEqual( Stem("perkes"), "perk" );
	deepEqual( Stem("perkins"), "perkin" );
	deepEqual( Stem("permafoy"), "permafoi" );
	deepEqual( Stem("permanence"), "perman" );
	deepEqual( Stem("permanent"), "perman" );
	deepEqual( Stem("permanently"), "perman" );
	deepEqual( Stem("permission"), "permiss" );
	deepEqual( Stem("permissive"), "permiss" );
	deepEqual( Stem("permit"), "permit" );
	deepEqual( Stem("permitted"), "permit" );
	deepEqual( Stem("permitting"), "permit" );
	deepEqual( Stem("pernicious"), "pernici" );
	deepEqual( Stem("perniciously"), "pernici" );
	deepEqual( Stem("peroration"), "peror" );
	deepEqual( Stem("perpend"), "perpend" );
	deepEqual( Stem("perpendicular"), "perpendicular" );
	deepEqual( Stem("perpendicularly"), "perpendicularli" );
	deepEqual( Stem("perpetrated"), "perpetr" );
	deepEqual( Stem("perpetual"), "perpetu" );
	deepEqual( Stem("perpetually"), "perpetu" );
	deepEqual( Stem("perpetuity"), "perpetu" );
	deepEqual( Stem("perplex"), "perplex" );
	deepEqual( Stem("perplexed"), "perplex" );
	deepEqual( Stem("perplexities"), "perplex" );
	deepEqual( Stem("perplexity"), "perplex" );
	deepEqual( Stem("perquisites"), "perquisit" );
	deepEqual( Stem("pers"), "per" );
	deepEqual( Stem("persecuted"), "persecut" );
	deepEqual( Stem("persecution"), "persecut" );
	deepEqual( Stem("persecutions"), "persecut" );
	deepEqual( Stem("persecutor"), "persecutor" );
	deepEqual( Stem("persecutors"), "persecutor" );
	deepEqual( Stem("perseus"), "perseu" );
	deepEqual( Stem("persever"), "persev" );
	deepEqual( Stem("perseverance"), "persever" );
	deepEqual( Stem("persevering"), "persev" );
	deepEqual( Stem("perseveringly"), "perseveringli" );
	deepEqual( Stem("persevers"), "persev" );
	deepEqual( Stem("persia"), "persia" );
	deepEqual( Stem("persian"), "persian" );
	deepEqual( Stem("persicos"), "persico" );
	deepEqual( Stem("persiffled"), "persiffl" );
	deepEqual( Stem("persist"), "persist" );
	deepEqual( Stem("persisted"), "persist" );
	deepEqual( Stem("persistency"), "persist" );
	deepEqual( Stem("persistive"), "persist" );
	deepEqual( Stem("persists"), "persist" );
	deepEqual( Stem("person"), "person" );
	deepEqual( Stem("personable"), "person" );
	deepEqual( Stem("personae"), "persona" );
	deepEqual( Stem("personage"), "personag" );
	deepEqual( Stem("personages"), "personag" );
	deepEqual( Stem("personal"), "person" );
	deepEqual( Stem("personally"), "person" );
	deepEqual( Stem("personate"), "person" );
	deepEqual( Stem("personated"), "person" );
	deepEqual( Stem("personates"), "person" );
	deepEqual( Stem("personating"), "person" );
	deepEqual( Stem("personifications"), "personif" );
	deepEqual( Stem("personify"), "personifi" );
	deepEqual( Stem("persons"), "person" );
	deepEqual( Stem("perspective"), "perspect" );
	deepEqual( Stem("perspectively"), "perspect" );
	deepEqual( Stem("perspectives"), "perspect" );
	deepEqual( Stem("perspicuity"), "perspicu" );
	deepEqual( Stem("perspicuous"), "perspicu" );
	deepEqual( Stem("persuade"), "persuad" );
	deepEqual( Stem("persuaded"), "persuad" );
	deepEqual( Stem("persuades"), "persuad" );
	deepEqual( Stem("persuading"), "persuad" );
	deepEqual( Stem("persuasion"), "persuas" );
	deepEqual( Stem("persuasions"), "persuas" );
	deepEqual( Stem("pert"), "pert" );
	deepEqual( Stem("pertain"), "pertain" );
	deepEqual( Stem("pertaining"), "pertain" );
	deepEqual( Stem("pertains"), "pertain" );
	deepEqual( Stem("pertaunt"), "pertaunt" );
	deepEqual( Stem("pertinacity"), "pertinac" );
	deepEqual( Stem("pertinent"), "pertin" );
	deepEqual( Stem("pertly"), "pertli" );
	deepEqual( Stem("perturb"), "perturb" );
	deepEqual( Stem("perturbation"), "perturb" );
	deepEqual( Stem("perturbations"), "perturb" );
	deepEqual( Stem("perturbed"), "perturb" );
	deepEqual( Stem("perus"), "peru" );
	deepEqual( Stem("perusal"), "perus" );
	deepEqual( Stem("peruse"), "perus" );
	deepEqual( Stem("perused"), "perus" );
	deepEqual( Stem("perusing"), "perus" );
	deepEqual( Stem("pervaded"), "pervad" );
	deepEqual( Stem("pervades"), "pervad" );
	deepEqual( Stem("perverse"), "pervers" );
	deepEqual( Stem("perversely"), "pervers" );
	deepEqual( Stem("perverseness"), "pervers" );
	deepEqual( Stem("perversion"), "pervers" );
	deepEqual( Stem("pervert"), "pervert" );
	deepEqual( Stem("perverted"), "pervert" );
	deepEqual( Stem("perverter"), "pervert" );
	deepEqual( Stem("peseech"), "peseech" );
	deepEqual( Stem("pest"), "pest" );
	deepEqual( Stem("pester"), "pester" );
	deepEqual( Stem("pestered"), "pester" );
	deepEqual( Stem("pestiferous"), "pestifer" );
	deepEqual( Stem("pestilence"), "pestil" );
	deepEqual( Stem("pestilent"), "pestil" );
	deepEqual( Stem("pestle"), "pestl" );
	deepEqual( Stem("pestler"), "pestler" );
	deepEqual( Stem("pet"), "pet" );
	deepEqual( Stem("petar"), "petar" );
	deepEqual( Stem("peter"), "peter" );
	deepEqual( Stem("petersburg"), "petersburg" );
	deepEqual( Stem("peterwaradin"), "peterwaradin" );
	deepEqual( Stem("petit"), "petit" );
	deepEqual( Stem("petite"), "petit" );
	deepEqual( Stem("petition"), "petit" );
	deepEqual( Stem("petitionary"), "petitionari" );
	deepEqual( Stem("petitioner"), "petition" );
	deepEqual( Stem("petitioners"), "petition" );
	deepEqual( Stem("petitions"), "petit" );
	deepEqual( Stem("petits"), "petit" );
	deepEqual( Stem("peto"), "peto" );
	deepEqual( Stem("petrarch"), "petrarch" );
	deepEqual( Stem("petruchio"), "petruchio" );
	deepEqual( Stem("petter"), "petter" );
	deepEqual( Stem("petticoat"), "petticoat" );
	deepEqual( Stem("petticoats"), "petticoat" );
	deepEqual( Stem("pettifogging"), "pettifog" );
	deepEqual( Stem("pettiness"), "petti" );
	deepEqual( Stem("pettish"), "pettish" );
	deepEqual( Stem("pettishness"), "pettish" );
	deepEqual( Stem("pettitoes"), "pettito" );
	deepEqual( Stem("petty"), "petti" );
	deepEqual( Stem("peu"), "peu" );
	deepEqual( Stem("pew"), "pew" );
	deepEqual( Stem("pewter"), "pewter" );
	deepEqual( Stem("pewterer"), "pewter" );
	deepEqual( Stem("phaethon"), "phaethon" );
	deepEqual( Stem("phaeton"), "phaeton" );
	deepEqual( Stem("phantasime"), "phantasim" );
	deepEqual( Stem("phantasimes"), "phantasim" );
	deepEqual( Stem("phantasma"), "phantasma" );
	deepEqual( Stem("pharamond"), "pharamond" );
	deepEqual( Stem("pharaoh"), "pharaoh" );
	deepEqual( Stem("pharmacopoeia"), "pharmacopoeia" );
	deepEqual( Stem("pharsalia"), "pharsalia" );
	deepEqual( Stem("pheasant"), "pheasant" );
	deepEqual( Stem("pheasants"), "pheasant" );
	deepEqual( Stem("pheazar"), "pheazar" );
	deepEqual( Stem("phebe"), "phebe" );
	deepEqual( Stem("phebes"), "phebe" );
	deepEqual( Stem("pheebus"), "pheebu" );
	deepEqual( Stem("pheeze"), "pheez" );
	deepEqual( Stem("phenomena"), "phenomena" );
	deepEqual( Stem("phenomenon"), "phenomenon" );
	deepEqual( Stem("phibbus"), "phibbu" );
	deepEqual( Stem("philadelphos"), "philadelpho" );
	deepEqual( Stem("philanthropist"), "philanthropist" );
	deepEqual( Stem("philario"), "philario" );
	deepEqual( Stem("philarmonus"), "philarmonu" );
	deepEqual( Stem("philemon"), "philemon" );
	deepEqual( Stem("philip"), "philip" );
	deepEqual( Stem("philippan"), "philippan" );
	deepEqual( Stem("philippe"), "philipp" );
	deepEqual( Stem("philippi"), "philippi" );
	deepEqual( Stem("philister"), "philist" );
	deepEqual( Stem("phillida"), "phillida" );
	deepEqual( Stem("phillis"), "philli" );
	deepEqual( Stem("philo"), "philo" );
	deepEqual( Stem("philological"), "philolog" );
	deepEqual( Stem("philologically"), "philolog" );
	deepEqual( Stem("philologies"), "philologi" );
	deepEqual( Stem("philology"), "philologi" );
	deepEqual( Stem("philomel"), "philomel" );
	deepEqual( Stem("philomela"), "philomela" );
	deepEqual( Stem("philomele"), "philomel" );
	deepEqual( Stem("philosopher"), "philosoph" );
	deepEqual( Stem("philosophers"), "philosoph" );
	deepEqual( Stem("philosophic"), "philosoph" );
	deepEqual( Stem("philosophical"), "philosoph" );
	deepEqual( Stem("philosophise"), "philosophis" );
	deepEqual( Stem("philosophy"), "philosophi" );
	deepEqual( Stem("philostrate"), "philostr" );
	deepEqual( Stem("philotus"), "philotu" );
	deepEqual( Stem("phlegmatic"), "phlegmat" );
	deepEqual( Stem("phoebe"), "phoeb" );
	deepEqual( Stem("phoebus"), "phoebu" );
	deepEqual( Stem("phoenicia"), "phoenicia" );
	deepEqual( Stem("phoenicians"), "phoenician" );
	deepEqual( Stem("phoenix"), "phoenix" );
	deepEqual( Stem("phonological"), "phonolog" );
	deepEqual( Stem("phonologically"), "phonolog" );
	deepEqual( Stem("phonologies"), "phonologi" );
	deepEqual( Stem("phonology"), "phonologi" );
	deepEqual( Stem("phorbus"), "phorbu" );
	deepEqual( Stem("photinus"), "photinu" );
	deepEqual( Stem("phrase"), "phrase" );
	deepEqual( Stem("phraseless"), "phraseless" );
	deepEqual( Stem("phrases"), "phrase" );
	deepEqual( Stem("phrygia"), "phrygia" );
	deepEqual( Stem("phrygian"), "phrygian" );
	deepEqual( Stem("phrynia"), "phrynia" );
	deepEqual( Stem("physic"), "physic" );
	deepEqual( Stem("physical"), "physic" );
	deepEqual( Stem("physician"), "physician" );
	deepEqual( Stem("physicians"), "physician" );
	deepEqual( Stem("physics"), "physic" );
	deepEqual( Stem("pia"), "pia" );
	deepEqual( Stem("pianist"), "pianist" );
	deepEqual( Stem("piano"), "piano" );
	deepEqual( Stem("pianoforte"), "pianofort" );
	deepEqual( Stem("pianos"), "piano" );
	deepEqual( Stem("piastres"), "piastr" );
	deepEqual( Stem("piazza"), "piazza" );
	deepEqual( Stem("pibble"), "pibbl" );
	deepEqual( Stem("pible"), "pibl" );
	deepEqual( Stem("pic"), "pic" );
	deepEqual( Stem("picardy"), "picardi" );
	deepEqual( Stem("piccadilly"), "piccadilli" );
	deepEqual( Stem("pice"), "pice" );
	deepEqual( Stem("pick"), "pick" );
	deepEqual( Stem("pickaxe"), "pickax" );
	deepEqual( Stem("pickaxes"), "pickax" );
	deepEqual( Stem("pickbone"), "pickbon" );
	deepEqual( Stem("picked"), "pick" );
	deepEqual( Stem("pickers"), "picker" );
	deepEqual( Stem("picketed"), "picket" );
	deepEqual( Stem("pickford"), "pickford" );
	deepEqual( Stem("picking"), "pick" );
	deepEqual( Stem("pickle"), "pickl" );
	deepEqual( Stem("pickled"), "pickl" );
	deepEqual( Stem("pickles"), "pickl" );
	deepEqual( Stem("picklock"), "picklock" );
	deepEqual( Stem("pickpurse"), "pickpurs" );
	deepEqual( Stem("picks"), "pick" );
	deepEqual( Stem("pickt"), "pickt" );
	deepEqual( Stem("pickthanks"), "pickthank" );
	deepEqual( Stem("pictur"), "pictur" );
	deepEqual( Stem("picture"), "pictur" );
	deepEqual( Stem("pictured"), "pictur" );
	deepEqual( Stem("pictures"), "pictur" );
	deepEqual( Stem("picturesque"), "picturesqu" );
	deepEqual( Stem("picturs"), "pictur" );
	deepEqual( Stem("pid"), "pid" );
	deepEqual( Stem("pie"), "pie" );
	deepEqual( Stem("piec"), "piec" );
	deepEqual( Stem("piece"), "piec" );
	deepEqual( Stem("pieces"), "piec" );
	deepEqual( Stem("piecing"), "piec" );
	deepEqual( Stem("pied"), "pi" );
	deepEqual( Stem("piedness"), "pied" );
	deepEqual( Stem("pier"), "pier" );
	deepEqual( Stem("pierc"), "pierc" );
	deepEqual( Stem("pierce"), "pierc" );
	deepEqual( Stem("pierced"), "pierc" );
	deepEqual( Stem("pierces"), "pierc" );
	deepEqual( Stem("pierceth"), "pierceth" );
	deepEqual( Stem("piercing"), "pierc" );
	deepEqual( Stem("piercy"), "pierci" );
	deepEqual( Stem("piers"), "pier" );
	deepEqual( Stem("pies"), "pi" );
	deepEqual( Stem("piety"), "pieti" );
	deepEqual( Stem("pig"), "pig" );
	deepEqual( Stem("pigault"), "pigault" );
	deepEqual( Stem("pigeon"), "pigeon" );
	deepEqual( Stem("pigeons"), "pigeon" );
	deepEqual( Stem("pight"), "pight" );
	deepEqual( Stem("pigmy"), "pigmi" );
	deepEqual( Stem("pigrogromitus"), "pigrogromitu" );
	deepEqual( Stem("pigs"), "pig" );
	deepEqual( Stem("pigtailed"), "pigtail" );
	deepEqual( Stem("pike"), "pike" );
	deepEqual( Stem("pikes"), "pike" );
	deepEqual( Stem("pil"), "pil" );
	deepEqual( Stem("pilate"), "pilat" );
	deepEqual( Stem("pilates"), "pilat" );
	deepEqual( Stem("pilau"), "pilau" );
	deepEqual( Stem("pilaus"), "pilau" );
	deepEqual( Stem("pilchers"), "pilcher" );
	deepEqual( Stem("pile"), "pile" );
	deepEqual( Stem("piles"), "pile" );
	deepEqual( Stem("pilf"), "pilf" );
	deepEqual( Stem("pilfering"), "pilfer" );
	deepEqual( Stem("pilgrim"), "pilgrim" );
	deepEqual( Stem("pilgrimage"), "pilgrimag" );
	deepEqual( Stem("pilgrims"), "pilgrim" );
	deepEqual( Stem("pilkington"), "pilkington" );
	deepEqual( Stem("pill"), "pill" );
	deepEqual( Stem("pillage"), "pillag" );
	deepEqual( Stem("pillagers"), "pillag" );
	deepEqual( Stem("pillaging"), "pillag" );
	deepEqual( Stem("pillar"), "pillar" );
	deepEqual( Stem("pillars"), "pillar" );
	deepEqual( Stem("pillau"), "pillau" );
	deepEqual( Stem("pillicock"), "pillicock" );
	deepEqual( Stem("pillion"), "pillion" );
	deepEqual( Stem("pillory"), "pillori" );
	deepEqual( Stem("pillow"), "pillow" );
	deepEqual( Stem("pillows"), "pillow" );
	deepEqual( Stem("pills"), "pill" );
	deepEqual( Stem("pilot"), "pilot" );
	deepEqual( Stem("pilots"), "pilot" );
	deepEqual( Stem("pimlico"), "pimlico" );
	deepEqual( Stem("pimpernell"), "pimpernel" );
	deepEqual( Stem("pimple"), "pimpl" );
	deepEqual( Stem("pin"), "pin" );
	deepEqual( Stem("pinacles"), "pinacl" );
	deepEqual( Stem("pinafores"), "pinafor" );
	deepEqual( Stem("pinch"), "pinch" );
	deepEqual( Stem("pinched"), "pinch" );
	deepEqual( Stem("pincher"), "pincher" );
	deepEqual( Stem("pinches"), "pinch" );
	deepEqual( Stem("pinching"), "pinch" );
	deepEqual( Stem("pincian"), "pincian" );
	deepEqual( Stem("pincushion"), "pincushion" );
	deepEqual( Stem("pindarus"), "pindaru" );
	deepEqual( Stem("pine"), "pine" );
	deepEqual( Stem("pined"), "pine" );
	deepEqual( Stem("pineries"), "pineri" );
	deepEqual( Stem("pines"), "pine" );
	deepEqual( Stem("pinfold"), "pinfold" );
	deepEqual( Stem("pining"), "pine" );
	deepEqual( Stem("pinion"), "pinion" );
	deepEqual( Stem("pinioned"), "pinion" );
	deepEqual( Stem("pink"), "pink" );
	deepEqual( Stem("pinkerton"), "pinkerton" );
	deepEqual( Stem("pinn"), "pinn" );
	deepEqual( Stem("pinnace"), "pinnac" );
	deepEqual( Stem("pinned"), "pin" );
	deepEqual( Stem("pinner"), "pinner" );
	deepEqual( Stem("pins"), "pin" );
	deepEqual( Stem("pinse"), "pins" );
	deepEqual( Stem("pint"), "pint" );
	deepEqual( Stem("pintpot"), "pintpot" );
	deepEqual( Stem("pints"), "pint" );
	deepEqual( Stem("pioned"), "pion" );
	deepEqual( Stem("pioneers"), "pioneer" );
	deepEqual( Stem("pioner"), "pioner" );
	deepEqual( Stem("pioners"), "pioner" );
	deepEqual( Stem("pious"), "piou" );
	deepEqual( Stem("piously"), "piousli" );
	deepEqual( Stem("pip"), "pip" );
	deepEqual( Stem("pipe"), "pipe" );
	deepEqual( Stem("piper"), "piper" );
	deepEqual( Stem("pipers"), "piper" );
	deepEqual( Stem("pipes"), "pipe" );
	deepEqual( Stem("piping"), "pipe" );
	deepEqual( Stem("pipkin"), "pipkin" );
	deepEqual( Stem("pippin"), "pippin" );
	deepEqual( Stem("pippins"), "pippin" );
	deepEqual( Stem("piquant"), "piquant" );
	deepEqual( Stem("pique"), "piqu" );
	deepEqual( Stem("piquet"), "piquet" );
	deepEqual( Stem("pirate"), "pirat" );
	deepEqual( Stem("pirates"), "pirat" );
	deepEqual( Stem("piratical"), "pirat" );
	deepEqual( Stem("pisa"), "pisa" );
	deepEqual( Stem("pisanio"), "pisanio" );
	deepEqual( Stem("pish"), "pish" );
	deepEqual( Stem("pismires"), "pismir" );
	deepEqual( Stem("piss"), "piss" );
	deepEqual( Stem("pissing"), "piss" );
	deepEqual( Stem("pistol"), "pistol" );
	deepEqual( Stem("pistols"), "pistol" );
	deepEqual( Stem("pit"), "pit" );
	deepEqual( Stem("pitch"), "pitch" );
	deepEqual( Stem("pitched"), "pitch" );
	deepEqual( Stem("pitcher"), "pitcher" );
	deepEqual( Stem("pitchers"), "pitcher" );
	deepEqual( Stem("pitchley"), "pitchlei" );
	deepEqual( Stem("pitchy"), "pitchi" );
	deepEqual( Stem("piteous"), "piteou" );
	deepEqual( Stem("piteously"), "piteous" );
	deepEqual( Stem("pitfall"), "pitfal" );
	deepEqual( Stem("pith"), "pith" );
	deepEqual( Stem("pithless"), "pithless" );
	deepEqual( Stem("pithy"), "pithi" );
	deepEqual( Stem("pitiable"), "pitiabl" );
	deepEqual( Stem("pitie"), "piti" );
	deepEqual( Stem("pitied"), "piti" );
	deepEqual( Stem("pities"), "piti" );
	deepEqual( Stem("pitiful"), "piti" );
	deepEqual( Stem("pitifully"), "pitifulli" );
	deepEqual( Stem("pitiless"), "pitiless" );
	deepEqual( Stem("pitilessly"), "pitilessli" );
	deepEqual( Stem("pits"), "pit" );
	deepEqual( Stem("pitt"), "pitt" );
	deepEqual( Stem("pittance"), "pittanc" );
	deepEqual( Stem("pitted"), "pit" );
	deepEqual( Stem("pittie"), "pitti" );
	deepEqual( Stem("pittikins"), "pittikin" );
	deepEqual( Stem("pitting"), "pit" );
	deepEqual( Stem("pity"), "piti" );
	deepEqual( Stem("pitying"), "piti" );
	deepEqual( Stem("pius"), "piu" );
	deepEqual( Stem("plac"), "plac" );
	deepEqual( Stem("placable"), "placabl" );
	deepEqual( Stem("placard"), "placard" );
	deepEqual( Stem("placarded"), "placard" );
	deepEqual( Stem("place"), "place" );
	deepEqual( Stem("placed"), "place" );
	deepEqual( Stem("placens"), "placen" );
	deepEqual( Stem("placentio"), "placentio" );
	deepEqual( Stem("places"), "place" );
	deepEqual( Stem("placeth"), "placeth" );
	deepEqual( Stem("placid"), "placid" );
	deepEqual( Stem("placidity"), "placid" );
	deepEqual( Stem("placidly"), "placidli" );
	deepEqual( Stem("placing"), "place" );
	deepEqual( Stem("plack"), "plack" );
	deepEqual( Stem("placket"), "placket" );
	deepEqual( Stem("plackets"), "placket" );
	deepEqual( Stem("plagu"), "plagu" );
	deepEqual( Stem("plague"), "plagu" );
	deepEqual( Stem("plagued"), "plagu" );
	deepEqual( Stem("plagues"), "plagu" );
	deepEqual( Stem("plaguing"), "plagu" );
	deepEqual( Stem("plaguy"), "plagui" );
	deepEqual( Stem("plain"), "plain" );
	deepEqual( Stem("plainer"), "plainer" );
	deepEqual( Stem("plainest"), "plainest" );
	deepEqual( Stem("plaining"), "plain" );
	deepEqual( Stem("plainings"), "plain" );
	deepEqual( Stem("plainly"), "plainli" );
	deepEqual( Stem("plainness"), "plain" );
	deepEqual( Stem("plains"), "plain" );
	deepEqual( Stem("plainsong"), "plainsong" );
	deepEqual( Stem("plaintful"), "plaint" );
	deepEqual( Stem("plaintiff"), "plaintiff" );
	deepEqual( Stem("plaintiffs"), "plaintiff" );
	deepEqual( Stem("plaintive"), "plaintiv" );
	deepEqual( Stem("plaintively"), "plaintiv" );
	deepEqual( Stem("plaints"), "plaint" );
	deepEqual( Stem("plaisir"), "plaisir" );
	deepEqual( Stem("plait"), "plait" );
	deepEqual( Stem("plan"), "plan" );
	deepEqual( Stem("planched"), "planch" );
	deepEqual( Stem("planet"), "planet" );
	deepEqual( Stem("planetary"), "planetari" );
	deepEqual( Stem("planets"), "planet" );
	deepEqual( Stem("plank"), "plank" );
	deepEqual( Stem("planks"), "plank" );
	deepEqual( Stem("planned"), "plan" );
	deepEqual( Stem("plans"), "plan" );
	deepEqual( Stem("plant"), "plant" );
	deepEqual( Stem("plantage"), "plantag" );
	deepEqual( Stem("plantagenet"), "plantagenet" );
	deepEqual( Stem("plantagenets"), "plantagenet" );
	deepEqual( Stem("plantain"), "plantain" );
	deepEqual( Stem("plantation"), "plantat" );
	deepEqual( Stem("plantations"), "plantat" );
	deepEqual( Stem("planted"), "plant" );
	deepEqual( Stem("planteth"), "planteth" );
	deepEqual( Stem("planting"), "plant" );
	deepEqual( Stem("plants"), "plant" );
	deepEqual( Stem("plaque"), "plaqu" );
	deepEqual( Stem("plaques"), "plaqu" );
	deepEqual( Stem("plash"), "plash" );
	deepEqual( Stem("plashy"), "plashi" );
	deepEqual( Stem("plassy"), "plassi" );
	deepEqual( Stem("plast"), "plast" );
	deepEqual( Stem("plaster"), "plaster" );
	deepEqual( Stem("plasterer"), "plaster" );
	deepEqual( Stem("plat"), "plat" );
	deepEqual( Stem("plate"), "plate" );
	deepEqual( Stem("plateau"), "plateau" );
	deepEqual( Stem("plated"), "plate" );
	deepEqual( Stem("plates"), "plate" );
	deepEqual( Stem("platform"), "platform" );
	deepEqual( Stem("platforms"), "platform" );
	deepEqual( Stem("plats"), "plat" );
	deepEqual( Stem("platted"), "plat" );
	deepEqual( Stem("platz"), "platz" );
	deepEqual( Stem("plausible"), "plausibl" );
	deepEqual( Stem("plausive"), "plausiv" );
	deepEqual( Stem("plautus"), "plautu" );
	deepEqual( Stem("play"), "plai" );
	deepEqual( Stem("played"), "plai" );
	deepEqual( Stem("player"), "player" );
	deepEqual( Stem("players"), "player" );
	deepEqual( Stem("playeth"), "playeth" );
	deepEqual( Stem("playfellow"), "playfellow" );
	deepEqual( Stem("playfellows"), "playfellow" );
	deepEqual( Stem("playfully"), "playfulli" );
	deepEqual( Stem("playground"), "playground" );
	deepEqual( Stem("playhouse"), "playhous" );
	deepEqual( Stem("playing"), "plai" );
	deepEqual( Stem("plays"), "plai" );
	deepEqual( Stem("plea"), "plea" );
	deepEqual( Stem("pleach"), "pleach" );
	deepEqual( Stem("pleached"), "pleach" );
	deepEqual( Stem("plead"), "plead" );
	deepEqual( Stem("pleaded"), "plead" );
	deepEqual( Stem("pleader"), "pleader" );
	deepEqual( Stem("pleaders"), "pleader" );
	deepEqual( Stem("pleading"), "plead" );
	deepEqual( Stem("pleads"), "plead" );
	deepEqual( Stem("pleas"), "plea" );
	deepEqual( Stem("pleasance"), "pleasanc" );
	deepEqual( Stem("pleasant"), "pleasant" );
	deepEqual( Stem("pleasanter"), "pleasant" );
	deepEqual( Stem("pleasantest"), "pleasantest" );
	deepEqual( Stem("pleasantly"), "pleasantli" );
	deepEqual( Stem("pleasantry"), "pleasantri" );
	deepEqual( Stem("please"), "pleas" );
	deepEqual( Stem("pleased"), "pleas" );
	deepEqual( Stem("pleaser"), "pleaser" );
	deepEqual( Stem("pleasers"), "pleaser" );
	deepEqual( Stem("pleases"), "pleas" );
	deepEqual( Stem("pleasest"), "pleasest" );
	deepEqual( Stem("pleaseth"), "pleaseth" );
	deepEqual( Stem("pleasing"), "pleas" );
	deepEqual( Stem("pleasurable"), "pleasur" );
	deepEqual( Stem("pleasure"), "pleasur" );
	deepEqual( Stem("pleasures"), "pleasur" );
	deepEqual( Stem("pleasuring"), "pleasur" );
	deepEqual( Stem("plebeians"), "plebeian" );
	deepEqual( Stem("plebeii"), "plebeii" );
	deepEqual( Stem("plebs"), "pleb" );
	deepEqual( Stem("pledge"), "pledg" );
	deepEqual( Stem("pledged"), "pledg" );
	deepEqual( Stem("pledges"), "pledg" );
	deepEqual( Stem("pleets"), "pleet" );
	deepEqual( Stem("pleines"), "plein" );
	deepEqual( Stem("plenipotentiary"), "plenipotentiari" );
	deepEqual( Stem("plenitude"), "plenitud" );
	deepEqual( Stem("plenteous"), "plenteou" );
	deepEqual( Stem("plenteously"), "plenteous" );
	deepEqual( Stem("plenties"), "plenti" );
	deepEqual( Stem("plentiful"), "plenti" );
	deepEqual( Stem("plentifully"), "plentifulli" );
	deepEqual( Stem("plenty"), "plenti" );
	deepEqual( Stem("pless"), "pless" );
	deepEqual( Stem("plessed"), "pless" );
	deepEqual( Stem("plessing"), "pless" );
	deepEqual( Stem("pliant"), "pliant" );
	deepEqual( Stem("plied"), "pli" );
	deepEqual( Stem("plies"), "pli" );
	deepEqual( Stem("plight"), "plight" );
	deepEqual( Stem("plighted"), "plight" );
	deepEqual( Stem("plighter"), "plighter" );
	deepEqual( Stem("plod"), "plod" );
	deepEqual( Stem("plodded"), "plod" );
	deepEqual( Stem("plodders"), "plodder" );
	deepEqual( Stem("plodding"), "plod" );
	deepEqual( Stem("plods"), "plod" );
	deepEqual( Stem("ploo"), "ploo" );
	deepEqual( Stem("plood"), "plood" );
	deepEqual( Stem("ploody"), "ploodi" );
	deepEqual( Stem("plot"), "plot" );
	deepEqual( Stem("plots"), "plot" );
	deepEqual( Stem("plotted"), "plot" );
	deepEqual( Stem("plotter"), "plotter" );
	deepEqual( Stem("plough"), "plough" );
	deepEqual( Stem("ploughed"), "plough" );
	deepEqual( Stem("ploughing"), "plough" );
	deepEqual( Stem("ploughman"), "ploughman" );
	deepEqual( Stem("ploughmen"), "ploughmen" );
	deepEqual( Stem("plovers"), "plover" );
	deepEqual( Stem("plow"), "plow" );
	deepEqual( Stem("plows"), "plow" );
	deepEqual( Stem("pluck"), "pluck" );
	deepEqual( Stem("plucked"), "pluck" );
	deepEqual( Stem("plucker"), "plucker" );
	deepEqual( Stem("plucking"), "pluck" );
	deepEqual( Stem("plucks"), "pluck" );
	deepEqual( Stem("plue"), "plue" );
	deepEqual( Stem("plum"), "plum" );
	deepEqual( Stem("plume"), "plume" );
	deepEqual( Stem("plumed"), "plume" );
	deepEqual( Stem("plumes"), "plume" );
	deepEqual( Stem("plummet"), "plummet" );
	deepEqual( Stem("plump"), "plump" );
	deepEqual( Stem("plumped"), "plump" );
	deepEqual( Stem("plumping"), "plump" );
	deepEqual( Stem("plumpy"), "plumpi" );
	deepEqual( Stem("plums"), "plum" );
	deepEqual( Stem("plunder"), "plunder" );
	deepEqual( Stem("plung"), "plung" );
	deepEqual( Stem("plunge"), "plung" );
	deepEqual( Stem("plunged"), "plung" );
	deepEqual( Stem("plunges"), "plung" );
	deepEqual( Stem("plunging"), "plung" );
	deepEqual( Stem("plural"), "plural" );
	deepEqual( Stem("plurisy"), "plurisi" );
	deepEqual( Stem("plus"), "plu" );
	deepEqual( Stem("plush"), "plush" );
	deepEqual( Stem("pluto"), "pluto" );
	deepEqual( Stem("plutus"), "plutu" );
	deepEqual( Stem("ply"), "ply" );
	deepEqual( Stem("plying"), "ply" );
	deepEqual( Stem("po"), "po" );
	deepEqual( Stem("poacher"), "poacher" );
	deepEqual( Stem("poachers"), "poacher" );
	deepEqual( Stem("poaching"), "poach" );
	deepEqual( Stem("pocket"), "pocket" );
	deepEqual( Stem("pocketed"), "pocket" );
	deepEqual( Stem("pocketful"), "pocket" );
	deepEqual( Stem("pocketing"), "pocket" );
	deepEqual( Stem("pockets"), "pocket" );
	deepEqual( Stem("pocky"), "pocki" );
	deepEqual( Stem("podder"), "podder" );
	deepEqual( Stem("podgers"), "podger" );
	deepEqual( Stem("pody"), "podi" );
	deepEqual( Stem("poe"), "poe" );
	deepEqual( Stem("poem"), "poem" );
	deepEqual( Stem("poems"), "poem" );
	deepEqual( Stem("poesy"), "poesi" );
	deepEqual( Stem("poet"), "poet" );
	deepEqual( Stem("poetess"), "poetess" );
	deepEqual( Stem("poetical"), "poetic" );
	deepEqual( Stem("poetry"), "poetri" );
	deepEqual( Stem("poets"), "poet" );
	deepEqual( Stem("poictiers"), "poictier" );
	deepEqual( Stem("poinards"), "poinard" );
	deepEqual( Stem("poins"), "poin" );
	deepEqual( Stem("point"), "point" );
	deepEqual( Stem("pointblank"), "pointblank" );
	deepEqual( Stem("pointed"), "point" );
	deepEqual( Stem("pointedly"), "pointedli" );
	deepEqual( Stem("pointer"), "pointer" );
	deepEqual( Stem("pointing"), "point" );
	deepEqual( Stem("points"), "point" );
	deepEqual( Stem("pois"), "poi" );
	deepEqual( Stem("poise"), "pois" );
	deepEqual( Stem("poised"), "pois" );
	deepEqual( Stem("poising"), "pois" );
	deepEqual( Stem("poison"), "poison" );
	deepEqual( Stem("poisoned"), "poison" );
	deepEqual( Stem("poisoner"), "poison" );
	deepEqual( Stem("poisoning"), "poison" );
	deepEqual( Stem("poisonous"), "poison" );
	deepEqual( Stem("poisons"), "poison" );
	deepEqual( Stem("poke"), "poke" );
	deepEqual( Stem("poker"), "poker" );
	deepEqual( Stem("pokey"), "pokei" );
	deepEqual( Stem("poking"), "poke" );
	deepEqual( Stem("pol"), "pol" );
	deepEqual( Stem("polack"), "polack" );
	deepEqual( Stem("polacks"), "polack" );
	deepEqual( Stem("poland"), "poland" );
	deepEqual( Stem("pold"), "pold" );
	deepEqual( Stem("poldoody"), "poldoodi" );
	deepEqual( Stem("pole"), "pole" );
	deepEqual( Stem("poleaxe"), "poleax" );
	deepEqual( Stem("polecat"), "polecat" );
	deepEqual( Stem("polecats"), "polecat" );
	deepEqual( Stem("polemon"), "polemon" );
	deepEqual( Stem("poles"), "pole" );
	deepEqual( Stem("poli"), "poli" );
	deepEqual( Stem("police"), "polic" );
	deepEqual( Stem("policeman"), "policeman" );
	deepEqual( Stem("policemen"), "policemen" );
	deepEqual( Stem("policies"), "polici" );
	deepEqual( Stem("policy"), "polici" );
	deepEqual( Stem("polish"), "polish" );
	deepEqual( Stem("polished"), "polish" );
	deepEqual( Stem("polite"), "polit" );
	deepEqual( Stem("politeness"), "polit" );
	deepEqual( Stem("politest"), "politest" );
	deepEqual( Stem("politic"), "polit" );
	deepEqual( Stem("political"), "polit" );
	deepEqual( Stem("politician"), "politician" );
	deepEqual( Stem("politicians"), "politician" );
	deepEqual( Stem("politicly"), "politicli" );
	deepEqual( Stem("politics"), "polit" );
	deepEqual( Stem("polixenes"), "polixen" );
	deepEqual( Stem("poll"), "poll" );
	deepEqual( Stem("polluted"), "pollut" );
	deepEqual( Stem("pollution"), "pollut" );
	deepEqual( Stem("polly"), "polli" );
	deepEqual( Stem("polonaise"), "polonais" );
	deepEqual( Stem("polonia"), "polonia" );
	deepEqual( Stem("polonies"), "poloni" );
	deepEqual( Stem("polonius"), "poloniu" );
	deepEqual( Stem("poltroons"), "poltroon" );
	deepEqual( Stem("polusion"), "polus" );
	deepEqual( Stem("polyandria"), "polyandria" );
	deepEqual( Stem("polydamus"), "polydamu" );
	deepEqual( Stem("polydore"), "polydor" );
	deepEqual( Stem("polyglot"), "polyglot" );
	deepEqual( Stem("polygynia"), "polygynia" );
	deepEqual( Stem("polyxena"), "polyxena" );
	deepEqual( Stem("pomander"), "pomand" );
	deepEqual( Stem("pomatums"), "pomatum" );
	deepEqual( Stem("pomaturn"), "pomaturn" );
	deepEqual( Stem("pomegranate"), "pomegran" );
	deepEqual( Stem("pomewater"), "pomewat" );
	deepEqual( Stem("pomfret"), "pomfret" );
	deepEqual( Stem("pomgarnet"), "pomgarnet" );
	deepEqual( Stem("pommel"), "pommel" );
	deepEqual( Stem("pommes"), "pomm" );
	deepEqual( Stem("pomp"), "pomp" );
	deepEqual( Stem("pompadour"), "pompadour" );
	deepEqual( Stem("pomped"), "pomp" );
	deepEqual( Stem("pompeii"), "pompeii" );
	deepEqual( Stem("pompeius"), "pompeiu" );
	deepEqual( Stem("pompey"), "pompei" );
	deepEqual( Stem("pompili"), "pompili" );
	deepEqual( Stem("pompion"), "pompion" );
	deepEqual( Stem("pomposity"), "pompos" );
	deepEqual( Stem("pompous"), "pompou" );
	deepEqual( Stem("pompously"), "pompous" );
	deepEqual( Stem("pomps"), "pomp" );
	deepEqual( Stem("pon"), "pon" );
	deepEqual( Stem("pond"), "pond" );
	deepEqual( Stem("ponder"), "ponder" );
	deepEqual( Stem("pondered"), "ponder" );
	deepEqual( Stem("ponderous"), "ponder" );
	deepEqual( Stem("ponds"), "pond" );
	deepEqual( Stem("poniard"), "poniard" );
	deepEqual( Stem("poniards"), "poniard" );
	deepEqual( Stem("ponies"), "poni" );
	deepEqual( Stem("pont"), "pont" );
	deepEqual( Stem("pontic"), "pontic" );
	deepEqual( Stem("pontifical"), "pontif" );
	deepEqual( Stem("ponto"), "ponto" );
	deepEqual( Stem("ponton"), "ponton" );
	deepEqual( Stem("pontoons"), "pontoon" );
	deepEqual( Stem("pony"), "poni" );
	deepEqual( Stem("poodle"), "poodl" );
	deepEqual( Stem("pooh"), "pooh" );
	deepEqual( Stem("poohed"), "pooh" );
	deepEqual( Stem("pool"), "pool" );
	deepEqual( Stem("poole"), "pool" );
	deepEqual( Stem("pools"), "pool" );
	deepEqual( Stem("poop"), "poop" );
	deepEqual( Stem("poor"), "poor" );
	deepEqual( Stem("poorer"), "poorer" );
	deepEqual( Stem("poorest"), "poorest" );
	deepEqual( Stem("poorly"), "poorli" );
	deepEqual( Stem("pop"), "pop" );
	deepEqual( Stem("pope"), "pope" );
	deepEqual( Stem("popedom"), "popedom" );
	deepEqual( Stem("popes"), "pope" );
	deepEqual( Stem("popilius"), "popiliu" );
	deepEqual( Stem("popingay"), "popingai" );
	deepEqual( Stem("popish"), "popish" );
	deepEqual( Stem("popp"), "popp" );
	deepEqual( Stem("popped"), "pop" );
	deepEqual( Stem("popping"), "pop" );
	deepEqual( Stem("poppy"), "poppi" );
	deepEqual( Stem("pops"), "pop" );
	deepEqual( Stem("popular"), "popular" );
	deepEqual( Stem("popularity"), "popular" );
	deepEqual( Stem("population"), "popul" );
	deepEqual( Stem("populous"), "popul" );
	deepEqual( Stem("porcelain"), "porcelain" );
	deepEqual( Stem("porch"), "porch" );
	deepEqual( Stem("porches"), "porch" );
	deepEqual( Stem("pore"), "pore" );
	deepEqual( Stem("poring"), "pore" );
	deepEqual( Stem("pork"), "pork" );
	deepEqual( Stem("porker"), "porker" );
	deepEqual( Stem("porn"), "porn" );
	deepEqual( Stem("porpentine"), "porpentin" );
	deepEqual( Stem("porridge"), "porridg" );
	deepEqual( Stem("porringer"), "porring" );
	deepEqual( Stem("port"), "port" );
	deepEqual( Stem("portable"), "portabl" );
	deepEqual( Stem("portage"), "portag" );
	deepEqual( Stem("portal"), "portal" );
	deepEqual( Stem("portals"), "portal" );
	deepEqual( Stem("portance"), "portanc" );
	deepEqual( Stem("portansherry"), "portansherri" );
	deepEqual( Stem("portcullis"), "portculli" );
	deepEqual( Stem("porte"), "port" );
	deepEqual( Stem("portend"), "portend" );
	deepEqual( Stem("portends"), "portend" );
	deepEqual( Stem("portent"), "portent" );
	deepEqual( Stem("portentous"), "portent" );
	deepEqual( Stem("portentously"), "portent" );
	deepEqual( Stem("portents"), "portent" );
	deepEqual( Stem("porter"), "porter" );
	deepEqual( Stem("porters"), "porter" );
	deepEqual( Stem("porteus"), "porteu" );
	deepEqual( Stem("portfolios"), "portfolio" );
	deepEqual( Stem("portholes"), "porthol" );
	deepEqual( Stem("portia"), "portia" );
	deepEqual( Stem("portion"), "portion" );
	deepEqual( Stem("portionless"), "portionless" );
	deepEqual( Stem("portions"), "portion" );
	deepEqual( Stem("portland"), "portland" );
	deepEqual( Stem("portly"), "portli" );
	deepEqual( Stem("portman"), "portman" );
	deepEqual( Stem("portmanteau"), "portmanteau" );
	deepEqual( Stem("portmanteaus"), "portmanteau" );
	deepEqual( Stem("portotartarossa"), "portotartarossa" );
	deepEqual( Stem("portrait"), "portrait" );
	deepEqual( Stem("portraits"), "portrait" );
	deepEqual( Stem("portraiture"), "portraitur" );
	deepEqual( Stem("portray"), "portrai" );
	deepEqual( Stem("ports"), "port" );
	deepEqual( Stem("portsea"), "portsea" );
	deepEqual( Stem("portsmouth"), "portsmouth" );
	deepEqual( Stem("portugal"), "portug" );
	deepEqual( Stem("porty"), "porti" );
	deepEqual( Stem("pose"), "pose" );
	deepEqual( Stem("posied"), "posi" );
	deepEqual( Stem("posies"), "posi" );
	deepEqual( Stem("position"), "posit" );
	deepEqual( Stem("positions"), "posit" );
	deepEqual( Stem("positive"), "posit" );
	deepEqual( Stem("positively"), "posit" );
	deepEqual( Stem("posky"), "poski" );
	deepEqual( Stem("posse"), "poss" );
	deepEqual( Stem("possess"), "possess" );
	deepEqual( Stem("possessed"), "possess" );
	deepEqual( Stem("possesses"), "possess" );
	deepEqual( Stem("possesseth"), "possesseth" );
	deepEqual( Stem("possessing"), "possess" );
	deepEqual( Stem("possession"), "possess" );
	deepEqual( Stem("possessions"), "possess" );
	deepEqual( Stem("possessor"), "possessor" );
	deepEqual( Stem("possessors"), "possessor" );
	deepEqual( Stem("posset"), "posset" );
	deepEqual( Stem("possets"), "posset" );
	deepEqual( Stem("possibilities"), "possibl" );
	deepEqual( Stem("possibility"), "possibl" );
	deepEqual( Stem("possible"), "possibl" );
	deepEqual( Stem("possibly"), "possibli" );
	deepEqual( Stem("possitable"), "possit" );
	deepEqual( Stem("post"), "post" );
	deepEqual( Stem("postage"), "postag" );
	deepEqual( Stem("poste"), "post" );
	deepEqual( Stem("posted"), "post" );
	deepEqual( Stem("posterior"), "posterior" );
	deepEqual( Stem("posteriors"), "posterior" );
	deepEqual( Stem("posterity"), "poster" );
	deepEqual( Stem("postern"), "postern" );
	deepEqual( Stem("posterns"), "postern" );
	deepEqual( Stem("posters"), "poster" );
	deepEqual( Stem("posthorse"), "posthors" );
	deepEqual( Stem("posthorses"), "posthors" );
	deepEqual( Stem("posthumous"), "posthum" );
	deepEqual( Stem("posthumus"), "posthumu" );
	deepEqual( Stem("postilion"), "postilion" );
	deepEqual( Stem("postilions"), "postilion" );
	deepEqual( Stem("posting"), "post" );
	deepEqual( Stem("postman"), "postman" );
	deepEqual( Stem("postmark"), "postmark" );
	deepEqual( Stem("postmaster"), "postmast" );
	deepEqual( Stem("posts"), "post" );
	deepEqual( Stem("postscript"), "postscript" );
	deepEqual( Stem("posture"), "postur" );
	deepEqual( Stem("postures"), "postur" );
	deepEqual( Stem("posy"), "posi" );
	deepEqual( Stem("pot"), "pot" );
	deepEqual( Stem("potable"), "potabl" );
	deepEqual( Stem("potage"), "potag" );
	deepEqual( Stem("potation"), "potat" );
	deepEqual( Stem("potations"), "potat" );
	deepEqual( Stem("potato"), "potato" );
	deepEqual( Stem("potatoes"), "potato" );
	deepEqual( Stem("potch"), "potch" );
	deepEqual( Stem("potency"), "potenc" );
	deepEqual( Stem("potent"), "potent" );
	deepEqual( Stem("potentate"), "potent" );
	deepEqual( Stem("potentates"), "potent" );
	deepEqual( Stem("potential"), "potenti" );
	deepEqual( Stem("potently"), "potent" );
	deepEqual( Stem("potents"), "potent" );
	deepEqual( Stem("pothecary"), "pothecari" );
	deepEqual( Stem("pother"), "pother" );
	deepEqual( Stem("potion"), "potion" );
	deepEqual( Stem("potions"), "potion" );
	deepEqual( Stem("potiphar"), "potiphar" );
	deepEqual( Stem("potpan"), "potpan" );
	deepEqual( Stem("pots"), "pot" );
	deepEqual( Stem("potter"), "potter" );
	deepEqual( Stem("potting"), "pot" );
	deepEqual( Stem("pottle"), "pottl" );
	deepEqual( Stem("potzenthal"), "potzenth" );
	deepEqual( Stem("potztausend"), "potztausend" );
	deepEqual( Stem("pouch"), "pouch" );
	deepEqual( Stem("poulet"), "poulet" );
	deepEqual( Stem("poulter"), "poulter" );
	deepEqual( Stem("poultice"), "poultic" );
	deepEqual( Stem("poultney"), "poultnei" );
	deepEqual( Stem("poultry"), "poultri" );
	deepEqual( Stem("pounce"), "pounc" );
	deepEqual( Stem("pouncet"), "pouncet" );
	deepEqual( Stem("pound"), "pound" );
	deepEqual( Stem("pounded"), "pound" );
	deepEqual( Stem("pounder"), "pounder" );
	deepEqual( Stem("pounds"), "pound" );
	deepEqual( Stem("pour"), "pour" );
	deepEqual( Stem("poured"), "pour" );
	deepEqual( Stem("pourest"), "pourest" );
	deepEqual( Stem("pouring"), "pour" );
	deepEqual( Stem("pourquoi"), "pourquoi" );
	deepEqual( Stem("pours"), "pour" );
	deepEqual( Stem("pout"), "pout" );
	deepEqual( Stem("poverties"), "poverti" );
	deepEqual( Stem("poverty"), "poverti" );
	deepEqual( Stem("pow"), "pow" );
	deepEqual( Stem("powd"), "powd" );
	deepEqual( Stem("powder"), "powder" );
	deepEqual( Stem("powdered"), "powder" );
	deepEqual( Stem("powdering"), "powder" );
	deepEqual( Stem("powders"), "powder" );
	deepEqual( Stem("power"), "power" );
	deepEqual( Stem("powerful"), "power" );
	deepEqual( Stem("powerfully"), "powerfulli" );
	deepEqual( Stem("powerless"), "powerless" );
	deepEqual( Stem("powers"), "power" );
	deepEqual( Stem("pox"), "pox" );
	deepEqual( Stem("poys"), "poi" );
	deepEqual( Stem("poysam"), "poysam" );
	deepEqual( Stem("prabbles"), "prabbl" );
	deepEqual( Stem("practic"), "practic" );
	deepEqual( Stem("practical"), "practic" );
	deepEqual( Stem("practice"), "practic" );
	deepEqual( Stem("practiced"), "practic" );
	deepEqual( Stem("practicer"), "practic" );
	deepEqual( Stem("practices"), "practic" );
	deepEqual( Stem("practicing"), "practic" );
	deepEqual( Stem("practis"), "practi" );
	deepEqual( Stem("practisants"), "practis" );
	deepEqual( Stem("practise"), "practis" );
	deepEqual( Stem("practised"), "practis" );
	deepEqual( Stem("practiser"), "practis" );
	deepEqual( Stem("practisers"), "practis" );
	deepEqual( Stem("practises"), "practis" );
	deepEqual( Stem("practising"), "practis" );
	deepEqual( Stem("practitioner"), "practition" );
	deepEqual( Stem("practitioners"), "practition" );
	deepEqual( Stem("praeclarissimus"), "praeclarissimu" );
	deepEqual( Stem("praemunire"), "praemunir" );
	deepEqual( Stem("praesenti"), "praesenti" );
	deepEqual( Stem("praetor"), "praetor" );
	deepEqual( Stem("praetors"), "praetor" );
	deepEqual( Stem("pragging"), "prag" );
	deepEqual( Stem("prague"), "pragu" );
	deepEqual( Stem("prain"), "prain" );
	deepEqual( Stem("prains"), "prain" );
	deepEqual( Stem("prais"), "prai" );
	deepEqual( Stem("praise"), "prais" );
	deepEqual( Stem("praised"), "prais" );
	deepEqual( Stem("praises"), "prais" );
	deepEqual( Stem("praisest"), "praisest" );
	deepEqual( Stem("praiseworthy"), "praiseworthi" );
	deepEqual( Stem("praising"), "prais" );
	deepEqual( Stem("pranced"), "pranc" );
	deepEqual( Stem("prancing"), "pranc" );
	deepEqual( Stem("prank"), "prank" );
	deepEqual( Stem("pranks"), "prank" );
	deepEqual( Stem("prat"), "prat" );
	deepEqual( Stem("prate"), "prate" );
	deepEqual( Stem("prated"), "prate" );
	deepEqual( Stem("prater"), "prater" );
	deepEqual( Stem("prating"), "prate" );
	deepEqual( Stem("prattle"), "prattl" );
	deepEqual( Stem("prattled"), "prattl" );
	deepEqual( Stem("prattler"), "prattler" );
	deepEqual( Stem("prattling"), "prattl" );
	deepEqual( Stem("prave"), "prave" );
	deepEqual( Stem("prawls"), "prawl" );
	deepEqual( Stem("prawns"), "prawn" );
	deepEqual( Stem("pray"), "prai" );
	deepEqual( Stem("prayed"), "prai" );
	deepEqual( Stem("prayer"), "prayer" );
	deepEqual( Stem("prayers"), "prayer" );
	deepEqual( Stem("praying"), "prai" );
	deepEqual( Stem("prays"), "prai" );
	deepEqual( Stem("pre"), "pre" );
	deepEqual( Stem("preach"), "preach" );
	deepEqual( Stem("preached"), "preach" );
	deepEqual( Stem("preacher"), "preacher" );
	deepEqual( Stem("preachers"), "preacher" );
	deepEqual( Stem("preaches"), "preach" );
	deepEqual( Stem("preachifying"), "preachifi" );
	deepEqual( Stem("preaching"), "preach" );
	deepEqual( Stem("preachment"), "preachment" );
	deepEqual( Stem("pread"), "pread" );
	deepEqual( Stem("preambulate"), "preambul" );
	deepEqual( Stem("precarious"), "precari" );
	deepEqual( Stem("precaution"), "precaut" );
	deepEqual( Stem("precautions"), "precaut" );
	deepEqual( Stem("preceded"), "preced" );
	deepEqual( Stem("precedence"), "preced" );
	deepEqual( Stem("precedency"), "preced" );
	deepEqual( Stem("precedent"), "preced" );
	deepEqual( Stem("preceding"), "preced" );
	deepEqual( Stem("precept"), "precept" );
	deepEqual( Stem("preceptial"), "precepti" );
	deepEqual( Stem("precepts"), "precept" );
	deepEqual( Stem("precinct"), "precinct" );
	deepEqual( Stem("precincts"), "precinct" );
	deepEqual( Stem("precious"), "preciou" );
	deepEqual( Stem("preciously"), "precious" );
	deepEqual( Stem("precipice"), "precipic" );
	deepEqual( Stem("precipitancy"), "precipit" );
	deepEqual( Stem("precipitating"), "precipit" );
	deepEqual( Stem("precipitation"), "precipit" );
	deepEqual( Stem("precise"), "precis" );
	deepEqual( Stem("precisely"), "precis" );
	deepEqual( Stem("preciseness"), "precis" );
	deepEqual( Stem("precisian"), "precisian" );
	deepEqual( Stem("precocity"), "precoc" );
	deepEqual( Stem("precor"), "precor" );
	deepEqual( Stem("precurse"), "precurs" );
	deepEqual( Stem("precursors"), "precursor" );
	deepEqual( Stem("predeceased"), "predeceas" );
	deepEqual( Stem("predecessor"), "predecessor" );
	deepEqual( Stem("predecessors"), "predecessor" );
	deepEqual( Stem("predestinate"), "predestin" );
	deepEqual( Stem("predestined"), "predestin" );
	deepEqual( Stem("predicament"), "predica" );
	deepEqual( Stem("predict"), "predict" );
	deepEqual( Stem("predicted"), "predict" );
	deepEqual( Stem("prediction"), "predict" );
	deepEqual( Stem("predictions"), "predict" );
	deepEqual( Stem("predilection"), "predilect" );
	deepEqual( Stem("predominance"), "predomin" );
	deepEqual( Stem("predominant"), "predomin" );
	deepEqual( Stem("predominate"), "predomin" );
	deepEqual( Stem("preeches"), "preech" );
	deepEqual( Stem("preeminence"), "preemin" );
	deepEqual( Stem("preface"), "prefac" );
	deepEqual( Stem("prefect"), "prefect" );
	deepEqual( Stem("prefer"), "prefer" );
	deepEqual( Stem("preference"), "prefer" );
	deepEqual( Stem("preferment"), "prefer" );
	deepEqual( Stem("preferments"), "prefer" );
	deepEqual( Stem("preferr"), "preferr" );
	deepEqual( Stem("preferred"), "prefer" );
	deepEqual( Stem("preferreth"), "preferreth" );
	deepEqual( Stem("preferring"), "prefer" );
	deepEqual( Stem("prefers"), "prefer" );
	deepEqual( Stem("prefiguring"), "prefigur" );
	deepEqual( Stem("prefix"), "prefix" );
	deepEqual( Stem("prefixed"), "prefix" );
	deepEqual( Stem("preformed"), "preform" );
	deepEqual( Stem("pregnancy"), "pregnanc" );
	deepEqual( Stem("pregnant"), "pregnant" );
	deepEqual( Stem("pregnantly"), "pregnantli" );
	deepEqual( Stem("prejudicates"), "prejud" );
	deepEqual( Stem("prejudice"), "prejudic" );
	deepEqual( Stem("prejudices"), "prejudic" );
	deepEqual( Stem("prejudicial"), "prejudici" );
	deepEqual( Stem("prelate"), "prelat" );
	deepEqual( Stem("prelates"), "prelat" );
	deepEqual( Stem("preliminaries"), "preliminari" );
	deepEqual( Stem("preliminary"), "preliminari" );
	deepEqual( Stem("prelude"), "prelud" );
	deepEqual( Stem("preluding"), "prelud" );
	deepEqual( Stem("premature"), "prematur" );
	deepEqual( Stem("prematurely"), "prematur" );
	deepEqual( Stem("premeditated"), "premedit" );
	deepEqual( Stem("premeditation"), "premedit" );
	deepEqual( Stem("premier"), "premier" );
	deepEqual( Stem("premised"), "premis" );
	deepEqual( Stem("premises"), "premis" );
	deepEqual( Stem("prenez"), "prenez" );
	deepEqual( Stem("prenny"), "prenni" );
	deepEqual( Stem("prenominate"), "prenomin" );
	deepEqual( Stem("prentice"), "prentic" );
	deepEqual( Stem("prentices"), "prentic" );
	deepEqual( Stem("preordinance"), "preordin" );
	deepEqual( Stem("prepar"), "prepar" );
	deepEqual( Stem("preparation"), "prepar" );
	deepEqual( Stem("preparations"), "prepar" );
	deepEqual( Stem("preparatory"), "preparatori" );
	deepEqual( Stem("prepare"), "prepar" );
	deepEqual( Stem("prepared"), "prepar" );
	deepEqual( Stem("preparedly"), "preparedli" );
	deepEqual( Stem("prepares"), "prepar" );
	deepEqual( Stem("preparing"), "prepar" );
	deepEqual( Stem("prepossessed"), "prepossess" );
	deepEqual( Stem("prepost"), "prepost" );
	deepEqual( Stem("preposterous"), "preposter" );
	deepEqual( Stem("preposterously"), "preposter" );
	deepEqual( Stem("prerogatifes"), "prerogatif" );
	deepEqual( Stem("prerogative"), "prerog" );
	deepEqual( Stem("prerogatived"), "prerogativ" );
	deepEqual( Stem("presage"), "presag" );
	deepEqual( Stem("presagers"), "presag" );
	deepEqual( Stem("presages"), "presag" );
	deepEqual( Stem("presageth"), "presageth" );
	deepEqual( Stem("presaging"), "presag" );
	deepEqual( Stem("prescience"), "prescienc" );
	deepEqual( Stem("prescribe"), "prescrib" );
	deepEqual( Stem("prescribed"), "prescrib" );
	deepEqual( Stem("prescript"), "prescript" );
	deepEqual( Stem("prescription"), "prescript" );
	deepEqual( Stem("prescriptions"), "prescript" );
	deepEqual( Stem("prescripts"), "prescript" );
	deepEqual( Stem("presence"), "presenc" );
	deepEqual( Stem("presences"), "presenc" );
	deepEqual( Stem("present"), "present" );
	deepEqual( Stem("presentable"), "present" );
	deepEqual( Stem("presentation"), "present" );
	deepEqual( Stem("presentations"), "present" );
	deepEqual( Stem("presented"), "present" );
	deepEqual( Stem("presenter"), "present" );
	deepEqual( Stem("presenters"), "present" );
	deepEqual( Stem("presenteth"), "presenteth" );
	deepEqual( Stem("presentiment"), "presenti" );
	deepEqual( Stem("presentimental"), "presentiment" );
	deepEqual( Stem("presentiments"), "presenti" );
	deepEqual( Stem("presenting"), "present" );
	deepEqual( Stem("presently"), "present" );
	deepEqual( Stem("presentment"), "present" );
	deepEqual( Stem("presents"), "present" );
	deepEqual( Stem("preserv"), "preserv" );
	deepEqual( Stem("preservation"), "preserv" );
	deepEqual( Stem("preservative"), "preserv" );
	deepEqual( Stem("preserve"), "preserv" );
	deepEqual( Stem("preserved"), "preserv" );
	deepEqual( Stem("preserver"), "preserv" );
	deepEqual( Stem("preservers"), "preserv" );
	deepEqual( Stem("preserves"), "preserv" );
	deepEqual( Stem("preserving"), "preserv" );
	deepEqual( Stem("preside"), "presid" );
	deepEqual( Stem("presided"), "presid" );
	deepEqual( Stem("presidencies"), "presid" );
	deepEqual( Stem("presidency"), "presid" );
	deepEqual( Stem("president"), "presid" );
	deepEqual( Stem("presides"), "presid" );
	deepEqual( Stem("presiding"), "presid" );
	deepEqual( Stem("press"), "press" );
	deepEqual( Stem("pressed"), "press" );
	deepEqual( Stem("presser"), "presser" );
	deepEqual( Stem("presses"), "press" );
	deepEqual( Stem("pressing"), "press" );
	deepEqual( Stem("pressure"), "pressur" );
	deepEqual( Stem("pressures"), "pressur" );
	deepEqual( Stem("prest"), "prest" );
	deepEqual( Stem("prester"), "prester" );
	deepEqual( Stem("presume"), "presum" );
	deepEqual( Stem("presumes"), "presum" );
	deepEqual( Stem("presuming"), "presum" );
	deepEqual( Stem("presumption"), "presumpt" );
	deepEqual( Stem("presumptuous"), "presumptu" );
	deepEqual( Stem("presuppos"), "presuppo" );
	deepEqual( Stem("pret"), "pret" );
	deepEqual( Stem("pretence"), "pretenc" );
	deepEqual( Stem("pretences"), "pretenc" );
	deepEqual( Stem("pretend"), "pretend" );
	deepEqual( Stem("pretended"), "pretend" );
	deepEqual( Stem("pretenders"), "pretend" );
	deepEqual( Stem("pretending"), "pretend" );
	deepEqual( Stem("pretendu"), "pretendu" );
	deepEqual( Stem("pretense"), "pretens" );
	deepEqual( Stem("pretensions"), "pretens" );
	deepEqual( Stem("pretermit"), "pretermit" );
	deepEqual( Stem("preternatural"), "preternatur" );
	deepEqual( Stem("pretext"), "pretext" );
	deepEqual( Stem("pretia"), "pretia" );
	deepEqual( Stem("prettier"), "prettier" );
	deepEqual( Stem("prettiest"), "prettiest" );
	deepEqual( Stem("prettily"), "prettili" );
	deepEqual( Stem("prettiness"), "pretti" );
	deepEqual( Stem("pretty"), "pretti" );
	deepEqual( Stem("prettyish"), "prettyish" );
	deepEqual( Stem("prevail"), "prevail" );
	deepEqual( Stem("prevailed"), "prevail" );
	deepEqual( Stem("prevaileth"), "prevaileth" );
	deepEqual( Stem("prevailing"), "prevail" );
	deepEqual( Stem("prevailment"), "prevail" );
	deepEqual( Stem("prevails"), "prevail" );
	deepEqual( Stem("prevenances"), "preven" );
	deepEqual( Stem("prevent"), "prevent" );
	deepEqual( Stem("prevented"), "prevent" );
	deepEqual( Stem("preventing"), "prevent" );
	deepEqual( Stem("prevention"), "prevent" );
	deepEqual( Stem("preventions"), "prevent" );
	deepEqual( Stem("prevents"), "prevent" );
	deepEqual( Stem("previous"), "previou" );
	deepEqual( Stem("previously"), "previous" );
	deepEqual( Stem("prey"), "prei" );
	deepEqual( Stem("preyful"), "prey" );
	deepEqual( Stem("preying"), "prei" );
	deepEqual( Stem("preys"), "prei" );
	deepEqual( Stem("priam"), "priam" );
	deepEqual( Stem("priami"), "priami" );
	deepEqual( Stem("priamus"), "priamu" );
	deepEqual( Stem("pribbles"), "pribbl" );
	deepEqual( Stem("price"), "price" );
	deepEqual( Stem("priceless"), "priceless" );
	deepEqual( Stem("prices"), "price" );
	deepEqual( Stem("prick"), "prick" );
	deepEqual( Stem("pricked"), "prick" );
	deepEqual( Stem("pricket"), "pricket" );
	deepEqual( Stem("pricking"), "prick" );
	deepEqual( Stem("pricks"), "prick" );
	deepEqual( Stem("pricksong"), "pricksong" );
	deepEqual( Stem("pride"), "pride" );
	deepEqual( Stem("prides"), "pride" );
	deepEqual( Stem("pridge"), "pridg" );
	deepEqual( Stem("prie"), "prie" );
	deepEqual( Stem("pried"), "pri" );
	deepEqual( Stem("prief"), "prief" );
	deepEqual( Stem("pries"), "pri" );
	deepEqual( Stem("priest"), "priest" );
	deepEqual( Stem("priesthood"), "priesthood" );
	deepEqual( Stem("priests"), "priest" );
	deepEqual( Stem("prig"), "prig" );
	deepEqual( Stem("prim"), "prim" );
	deepEqual( Stem("primal"), "primal" );
	deepEqual( Stem("prime"), "prime" );
	deepEqual( Stem("primer"), "primer" );
	deepEqual( Stem("primero"), "primero" );
	deepEqual( Stem("primest"), "primest" );
	deepEqual( Stem("priming"), "prime" );
	deepEqual( Stem("primitive"), "primit" );
	deepEqual( Stem("primo"), "primo" );
	deepEqual( Stem("primogenity"), "primogen" );
	deepEqual( Stem("primrose"), "primros" );
	deepEqual( Stem("primroses"), "primros" );
	deepEqual( Stem("primy"), "primi" );
	deepEqual( Stem("prince"), "princ" );
	deepEqual( Stem("princely"), "princ" );
	deepEqual( Stem("princes"), "princ" );
	deepEqual( Stem("princess"), "princess" );
	deepEqual( Stem("princesses"), "princess" );
	deepEqual( Stem("principal"), "princip" );
	deepEqual( Stem("principalities"), "princip" );
	deepEqual( Stem("principality"), "princip" );
	deepEqual( Stem("principals"), "princip" );
	deepEqual( Stem("principle"), "principl" );
	deepEqual( Stem("principles"), "principl" );
	deepEqual( Stem("princox"), "princox" );
	deepEqual( Stem("prings"), "pring" );
	deepEqual( Stem("print"), "print" );
	deepEqual( Stem("printed"), "print" );
	deepEqual( Stem("printer"), "printer" );
	deepEqual( Stem("printing"), "print" );
	deepEqual( Stem("printless"), "printless" );
	deepEqual( Stem("prints"), "print" );
	deepEqual( Stem("prioress"), "prioress" );
	deepEqual( Stem("priories"), "priori" );
	deepEqual( Stem("priority"), "prioriti" );
	deepEqual( Stem("priory"), "priori" );
	deepEqual( Stem("priscian"), "priscian" );
	deepEqual( Stem("prison"), "prison" );
	deepEqual( Stem("prisoner"), "prison" );
	deepEqual( Stem("prisoners"), "prison" );
	deepEqual( Stem("prisonment"), "prison" );
	deepEqual( Stem("prisonnier"), "prisonni" );
	deepEqual( Stem("prisons"), "prison" );
	deepEqual( Stem("pristine"), "pristin" );
	deepEqual( Stem("prithe"), "prith" );
	deepEqual( Stem("prithee"), "prithe" );
	deepEqual( Stem("privacy"), "privaci" );
	deepEqual( Stem("private"), "privat" );
	deepEqual( Stem("privateer"), "privat" );
	deepEqual( Stem("privately"), "privat" );
	deepEqual( Stem("privates"), "privat" );
	deepEqual( Stem("privation"), "privat" );
	deepEqual( Stem("privations"), "privat" );
	deepEqual( Stem("privilage"), "privilag" );
	deepEqual( Stem("privileg"), "privileg" );
	deepEqual( Stem("privilege"), "privileg" );
	deepEqual( Stem("privileged"), "privileg" );
	deepEqual( Stem("privileges"), "privileg" );
	deepEqual( Stem("privilegio"), "privilegio" );
	deepEqual( Stem("privily"), "privili" );
	deepEqual( Stem("privity"), "priviti" );
	deepEqual( Stem("privy"), "privi" );
	deepEqual( Stem("priz"), "priz" );
	deepEqual( Stem("prize"), "prize" );
	deepEqual( Stem("prized"), "prize" );
	deepEqual( Stem("prizer"), "prizer" );
	deepEqual( Stem("prizes"), "prize" );
	deepEqual( Stem("prizest"), "prizest" );
	deepEqual( Stem("prizing"), "prize" );
	deepEqual( Stem("pro"), "pro" );
	deepEqual( Stem("probabilities"), "probabl" );
	deepEqual( Stem("probability"), "probabl" );
	deepEqual( Stem("probable"), "probabl" );
	deepEqual( Stem("probably"), "probabl" );
	deepEqual( Stem("probal"), "probal" );
	deepEqual( Stem("probation"), "probat" );
	deepEqual( Stem("proceed"), "proce" );
	deepEqual( Stem("proceeded"), "proceed" );
	deepEqual( Stem("proceeders"), "proceed" );
	deepEqual( Stem("proceeding"), "proceed" );
	deepEqual( Stem("proceedings"), "proceed" );
	deepEqual( Stem("proceeds"), "proce" );
	deepEqual( Stem("process"), "process" );
	deepEqual( Stem("procession"), "process" );
	deepEqual( Stem("proclaim"), "proclaim" );
	deepEqual( Stem("proclaimed"), "proclaim" );
	deepEqual( Stem("proclaimeth"), "proclaimeth" );
	deepEqual( Stem("proclaiming"), "proclaim" );
	deepEqual( Stem("proclaims"), "proclaim" );
	deepEqual( Stem("proclamation"), "proclam" );
	deepEqual( Stem("proclamations"), "proclam" );
	deepEqual( Stem("proconsul"), "proconsul" );
	deepEqual( Stem("procrastinate"), "procrastin" );
	deepEqual( Stem("procreant"), "procreant" );
	deepEqual( Stem("procreants"), "procreant" );
	deepEqual( Stem("procreation"), "procreat" );
	deepEqual( Stem("procrus"), "procru" );
	deepEqual( Stem("proctors"), "proctor" );
	deepEqual( Stem("proculeius"), "proculeiu" );
	deepEqual( Stem("procur"), "procur" );
	deepEqual( Stem("procurator"), "procur" );
	deepEqual( Stem("procure"), "procur" );
	deepEqual( Stem("procured"), "procur" );
	deepEqual( Stem("procures"), "procur" );
	deepEqual( Stem("procuring"), "procur" );
	deepEqual( Stem("prodigal"), "prodig" );
	deepEqual( Stem("prodigality"), "prodig" );
	deepEqual( Stem("prodigally"), "prodig" );
	deepEqual( Stem("prodigals"), "prodig" );
	deepEqual( Stem("prodigated"), "prodig" );
	deepEqual( Stem("prodigies"), "prodigi" );
	deepEqual( Stem("prodigious"), "prodigi" );
	deepEqual( Stem("prodigiously"), "prodigi" );
	deepEqual( Stem("prodigy"), "prodigi" );
	deepEqual( Stem("proditor"), "proditor" );
	deepEqual( Stem("produc"), "produc" );
	deepEqual( Stem("produce"), "produc" );
	deepEqual( Stem("produced"), "produc" );
	deepEqual( Stem("produces"), "produc" );
	deepEqual( Stem("producing"), "produc" );
	deepEqual( Stem("productive"), "product" );
	deepEqual( Stem("proface"), "profac" );
	deepEqual( Stem("profan"), "profan" );
	deepEqual( Stem("profanation"), "profan" );
	deepEqual( Stem("profane"), "profan" );
	deepEqual( Stem("profaned"), "profan" );
	deepEqual( Stem("profanely"), "profan" );
	deepEqual( Stem("profaneness"), "profan" );
	deepEqual( Stem("profaners"), "profan" );
	deepEqual( Stem("profaning"), "profan" );
	deepEqual( Stem("profess"), "profess" );
	deepEqual( Stem("professed"), "profess" );
	deepEqual( Stem("professes"), "profess" );
	deepEqual( Stem("professing"), "profess" );
	deepEqual( Stem("profession"), "profess" );
	deepEqual( Stem("professional"), "profession" );
	deepEqual( Stem("professionally"), "profession" );
	deepEqual( Stem("professions"), "profess" );
	deepEqual( Stem("professor"), "professor" );
	deepEqual( Stem("professors"), "professor" );
	deepEqual( Stem("proffer"), "proffer" );
	deepEqual( Stem("proffered"), "proffer" );
	deepEqual( Stem("profferer"), "proffer" );
	deepEqual( Stem("proffers"), "proffer" );
	deepEqual( Stem("proficiency"), "profici" );
	deepEqual( Stem("proficient"), "profici" );
	deepEqual( Stem("proficients"), "profici" );
	deepEqual( Stem("profile"), "profil" );
	deepEqual( Stem("profit"), "profit" );
	deepEqual( Stem("profitable"), "profit" );
	deepEqual( Stem("profitably"), "profit" );
	deepEqual( Stem("profited"), "profit" );
	deepEqual( Stem("profiting"), "profit" );
	deepEqual( Stem("profitless"), "profitless" );
	deepEqual( Stem("profits"), "profit" );
	deepEqual( Stem("profligate"), "proflig" );
	deepEqual( Stem("profound"), "profound" );
	deepEqual( Stem("profoundest"), "profoundest" );
	deepEqual( Stem("profoundly"), "profoundli" );
	deepEqual( Stem("profundity"), "profund" );
	deepEqual( Stem("profuse"), "profus" );
	deepEqual( Stem("profusely"), "profus" );
	deepEqual( Stem("profusion"), "profus" );
	deepEqual( Stem("profusus"), "profusu" );
	deepEqual( Stem("progenitor"), "progenitor" );
	deepEqual( Stem("progenitors"), "progenitor" );
	deepEqual( Stem("progeny"), "progeni" );
	deepEqual( Stem("progne"), "progn" );
	deepEqual( Stem("prognosticate"), "prognost" );
	deepEqual( Stem("prognostication"), "prognost" );
	deepEqual( Stem("progress"), "progress" );
	deepEqual( Stem("progresses"), "progress" );
	deepEqual( Stem("progression"), "progress" );
	deepEqual( Stem("prohibit"), "prohibit" );
	deepEqual( Stem("prohibition"), "prohibit" );
	deepEqual( Stem("project"), "project" );
	deepEqual( Stem("projection"), "project" );
	deepEqual( Stem("projects"), "project" );
	deepEqual( Stem("prolixious"), "prolixi" );
	deepEqual( Stem("prolixity"), "prolix" );
	deepEqual( Stem("prologue"), "prologu" );
	deepEqual( Stem("prologues"), "prologu" );
	deepEqual( Stem("prolong"), "prolong" );
	deepEqual( Stem("prolonged"), "prolong" );
	deepEqual( Stem("prolongs"), "prolong" );
	deepEqual( Stem("promenaders"), "promenad" );
	deepEqual( Stem("promethean"), "promethean" );
	deepEqual( Stem("prometheus"), "prometheu" );
	deepEqual( Stem("promis"), "promi" );
	deepEqual( Stem("promise"), "promis" );
	deepEqual( Stem("promised"), "promis" );
	deepEqual( Stem("promises"), "promis" );
	deepEqual( Stem("promiseth"), "promiseth" );
	deepEqual( Stem("promising"), "promis" );
	deepEqual( Stem("promissory"), "promissori" );
	deepEqual( Stem("promontory"), "promontori" );
	deepEqual( Stem("promoted"), "promot" );
	deepEqual( Stem("promoter"), "promot" );
	deepEqual( Stem("promotion"), "promot" );
	deepEqual( Stem("promotions"), "promot" );
	deepEqual( Stem("prompt"), "prompt" );
	deepEqual( Stem("prompted"), "prompt" );
	deepEqual( Stem("promptement"), "promptement" );
	deepEqual( Stem("prompter"), "prompter" );
	deepEqual( Stem("prompting"), "prompt" );
	deepEqual( Stem("promptly"), "promptli" );
	deepEqual( Stem("prompts"), "prompt" );
	deepEqual( Stem("prompture"), "promptur" );
	deepEqual( Stem("promulgate"), "promulg" );
	deepEqual( Stem("promulgated"), "promulg" );
	deepEqual( Stem("prone"), "prone" );
	deepEqual( Stem("prong"), "prong" );
	deepEqual( Stem("prononcer"), "prononc" );
	deepEqual( Stem("prononcez"), "prononcez" );
	deepEqual( Stem("pronoun"), "pronoun" );
	deepEqual( Stem("pronounc"), "pronounc" );
	deepEqual( Stem("pronounce"), "pronounc" );
	deepEqual( Stem("pronounced"), "pronounc" );
	deepEqual( Stem("pronouncing"), "pronounc" );
	deepEqual( Stem("pronouns"), "pronoun" );
	deepEqual( Stem("pronunciation"), "pronunci" );
	deepEqual( Stem("proof"), "proof" );
	deepEqual( Stem("proofs"), "proof" );
	deepEqual( Stem("prooshians"), "prooshian" );
	deepEqual( Stem("prop"), "prop" );
	deepEqual( Stem("propagate"), "propag" );
	deepEqual( Stem("propagation"), "propag" );
	deepEqual( Stem("propend"), "propend" );
	deepEqual( Stem("propension"), "propens" );
	deepEqual( Stem("propensities"), "propens" );
	deepEqual( Stem("propensity"), "propens" );
	deepEqual( Stem("proper"), "proper" );
	deepEqual( Stem("properer"), "proper" );
	deepEqual( Stem("properly"), "properli" );
	deepEqual( Stem("propertied"), "properti" );
	deepEqual( Stem("properties"), "properti" );
	deepEqual( Stem("property"), "properti" );
	deepEqual( Stem("prophecies"), "propheci" );
	deepEqual( Stem("prophecy"), "propheci" );
	deepEqual( Stem("prophesied"), "prophesi" );
	deepEqual( Stem("prophesier"), "prophesi" );
	deepEqual( Stem("prophesy"), "prophesi" );
	deepEqual( Stem("prophesying"), "prophesi" );
	deepEqual( Stem("prophet"), "prophet" );
	deepEqual( Stem("prophetess"), "prophetess" );
	deepEqual( Stem("prophetic"), "prophet" );
	deepEqual( Stem("prophetically"), "prophet" );
	deepEqual( Stem("prophets"), "prophet" );
	deepEqual( Stem("propinquity"), "propinqu" );
	deepEqual( Stem("propontic"), "propont" );
	deepEqual( Stem("proportion"), "proport" );
	deepEqual( Stem("proportionable"), "proportion" );
	deepEqual( Stem("proportions"), "proport" );
	deepEqual( Stem("propos"), "propo" );
	deepEqual( Stem("proposal"), "propos" );
	deepEqual( Stem("proposals"), "propos" );
	deepEqual( Stem("propose"), "propos" );
	deepEqual( Stem("proposed"), "propos" );
	deepEqual( Stem("proposer"), "propos" );
	deepEqual( Stem("proposes"), "propos" );
	deepEqual( Stem("proposing"), "propos" );
	deepEqual( Stem("proposition"), "proposit" );
	deepEqual( Stem("propositions"), "proposit" );
	deepEqual( Stem("propounded"), "propound" );
	deepEqual( Stem("propp"), "propp" );
	deepEqual( Stem("propre"), "propr" );
	deepEqual( Stem("proprietor"), "proprietor" );
	deepEqual( Stem("proprietors"), "proprietor" );
	deepEqual( Stem("proprietress"), "proprietress" );
	deepEqual( Stem("propriety"), "proprieti" );
	deepEqual( Stem("props"), "prop" );
	deepEqual( Stem("propugnation"), "propugn" );
	deepEqual( Stem("prorogue"), "prorogu" );
	deepEqual( Stem("prorogued"), "prorogu" );
	deepEqual( Stem("proscription"), "proscript" );
	deepEqual( Stem("proscriptions"), "proscript" );
	deepEqual( Stem("prose"), "prose" );
	deepEqual( Stem("prosecute"), "prosecut" );
	deepEqual( Stem("prosecuting"), "prosecut" );
	deepEqual( Stem("prosecution"), "prosecut" );
	deepEqual( Stem("proselytes"), "proselyt" );
	deepEqual( Stem("proselytizer"), "proselyt" );
	deepEqual( Stem("proserpina"), "proserpina" );
	deepEqual( Stem("prosp"), "prosp" );
	deepEqual( Stem("prospect"), "prospect" );
	deepEqual( Stem("prospects"), "prospect" );
	deepEqual( Stem("prospectus"), "prospectu" );
	deepEqual( Stem("prospectuses"), "prospectus" );
	deepEqual( Stem("prosper"), "prosper" );
	deepEqual( Stem("prospered"), "prosper" );
	deepEqual( Stem("prosperity"), "prosper" );
	deepEqual( Stem("prospero"), "prospero" );
	deepEqual( Stem("prosperous"), "prosper" );
	deepEqual( Stem("prosperously"), "prosper" );
	deepEqual( Stem("prospers"), "prosper" );
	deepEqual( Stem("prostitute"), "prostitut" );
	deepEqual( Stem("prostrate"), "prostrat" );
	deepEqual( Stem("prostrated"), "prostrat" );
	deepEqual( Stem("prostration"), "prostrat" );
	deepEqual( Stem("prosy"), "prosi" );
	deepEqual( Stem("protect"), "protect" );
	deepEqual( Stem("protected"), "protect" );
	deepEqual( Stem("protection"), "protect" );
	deepEqual( Stem("protector"), "protector" );
	deepEqual( Stem("protectors"), "protector" );
	deepEqual( Stem("protectorship"), "protectorship" );
	deepEqual( Stem("protectress"), "protectress" );
	deepEqual( Stem("protects"), "protect" );
	deepEqual( Stem("protege"), "proteg" );
	deepEqual( Stem("protegee"), "protege" );
	deepEqual( Stem("proteges"), "proteg" );
	deepEqual( Stem("protest"), "protest" );
	deepEqual( Stem("protestantism"), "protestant" );
	deepEqual( Stem("protestants"), "protest" );
	deepEqual( Stem("protestation"), "protest" );
	deepEqual( Stem("protestations"), "protest" );
	deepEqual( Stem("protested"), "protest" );
	deepEqual( Stem("protester"), "protest" );
	deepEqual( Stem("protesting"), "protest" );
	deepEqual( Stem("protests"), "protest" );
	deepEqual( Stem("proteus"), "proteu" );
	deepEqual( Stem("protheus"), "protheu" );
	deepEqual( Stem("protract"), "protract" );
	deepEqual( Stem("protractive"), "protract" );
	deepEqual( Stem("protrude"), "protrud" );
	deepEqual( Stem("protruded"), "protrud" );
	deepEqual( Stem("proud"), "proud" );
	deepEqual( Stem("prouder"), "prouder" );
	deepEqual( Stem("proudest"), "proudest" );
	deepEqual( Stem("proudlier"), "proudlier" );
	deepEqual( Stem("proudly"), "proudli" );
	deepEqual( Stem("prouds"), "proud" );
	deepEqual( Stem("prov"), "prov" );
	deepEqual( Stem("provand"), "provand" );
	deepEqual( Stem("prove"), "prove" );
	deepEqual( Stem("proved"), "prove" );
	deepEqual( Stem("provence"), "provenc" );
	deepEqual( Stem("provender"), "provend" );
	deepEqual( Stem("proverb"), "proverb" );
	deepEqual( Stem("proverbially"), "proverbi" );
	deepEqual( Stem("proverbs"), "proverb" );
	deepEqual( Stem("proves"), "prove" );
	deepEqual( Stem("proveth"), "proveth" );
	deepEqual( Stem("provide"), "provid" );
	deepEqual( Stem("provided"), "provid" );
	deepEqual( Stem("providence"), "provid" );
	deepEqual( Stem("provident"), "provid" );
	deepEqual( Stem("providential"), "providenti" );
	deepEqual( Stem("providentially"), "providenti" );
	deepEqual( Stem("providently"), "provid" );
	deepEqual( Stem("provider"), "provid" );
	deepEqual( Stem("provides"), "provid" );
	deepEqual( Stem("providing"), "provid" );
	deepEqual( Stem("province"), "provinc" );
	deepEqual( Stem("provinces"), "provinc" );
	deepEqual( Stem("provincial"), "provinci" );
	deepEqual( Stem("proving"), "prove" );
	deepEqual( Stem("provision"), "provis" );
	deepEqual( Stem("provisions"), "provis" );
	deepEqual( Stem("proviso"), "proviso" );
	deepEqual( Stem("provocation"), "provoc" );
	deepEqual( Stem("provok"), "provok" );
	deepEqual( Stem("provoke"), "provok" );
	deepEqual( Stem("provoked"), "provok" );
	deepEqual( Stem("provoker"), "provok" );
	deepEqual( Stem("provokes"), "provok" );
	deepEqual( Stem("provoketh"), "provoketh" );
	deepEqual( Stem("provoking"), "provok" );
	deepEqual( Stem("provost"), "provost" );
	deepEqual( Stem("prowess"), "prowess" );
	deepEqual( Stem("prowling"), "prowl" );
	deepEqual( Stem("proxy"), "proxi" );
	deepEqual( Stem("prudence"), "prudenc" );
	deepEqual( Stem("prudent"), "prudent" );
	deepEqual( Stem("prudently"), "prudent" );
	deepEqual( Stem("prun"), "prun" );
	deepEqual( Stem("prune"), "prune" );
	deepEqual( Stem("prunes"), "prune" );
	deepEqual( Stem("pruning"), "prune" );
	deepEqual( Stem("prussia"), "prussia" );
	deepEqual( Stem("prussian"), "prussian" );
	deepEqual( Stem("prussians"), "prussian" );
	deepEqual( Stem("prussic"), "prussic" );
	deepEqual( Stem("pry"), "pry" );
	deepEqual( Stem("prying"), "pry" );
	deepEqual( Stem("psalm"), "psalm" );
	deepEqual( Stem("psalmist"), "psalmist" );
	deepEqual( Stem("psalmody"), "psalmodi" );
	deepEqual( Stem("psalms"), "psalm" );
	deepEqual( Stem("psalteries"), "psalteri" );
	deepEqual( Stem("psha"), "psha" );
	deepEqual( Stem("ptolemies"), "ptolemi" );
	deepEqual( Stem("ptolemy"), "ptolemi" );
	deepEqual( Stem("public"), "public" );
	deepEqual( Stem("publican"), "publican" );
	deepEqual( Stem("publication"), "public" );
	deepEqual( Stem("publicity"), "public" );
	deepEqual( Stem("publicly"), "publicli" );
	deepEqual( Stem("publicola"), "publicola" );
	deepEqual( Stem("publish"), "publish" );
	deepEqual( Stem("published"), "publish" );
	deepEqual( Stem("publisher"), "publish" );
	deepEqual( Stem("publishing"), "publish" );
	deepEqual( Stem("publius"), "publiu" );
	deepEqual( Stem("pucelle"), "pucel" );
	deepEqual( Stem("puck"), "puck" );
	deepEqual( Stem("pudder"), "pudder" );
	deepEqual( Stem("pudding"), "pud" );
	deepEqual( Stem("puddings"), "pud" );
	deepEqual( Stem("puddle"), "puddl" );
	deepEqual( Stem("puddled"), "puddl" );
	deepEqual( Stem("pudency"), "pudenc" );
	deepEqual( Stem("pudgy"), "pudgi" );
	deepEqual( Stem("puerile"), "pueril" );
	deepEqual( Stem("pueritia"), "pueritia" );
	deepEqual( Stem("puff"), "puff" );
	deepEqual( Stem("puffed"), "puf" );
	deepEqual( Stem("puffing"), "puf" );
	deepEqual( Stem("puffs"), "puff" );
	deepEqual( Stem("puffy"), "puffi" );
	deepEqual( Stem("pug"), "pug" );
	deepEqual( Stem("pugging"), "pug" );
	deepEqual( Stem("pugilistic"), "pugilist" );
	deepEqual( Stem("puis"), "pui" );
	deepEqual( Stem("puisaye"), "puisay" );
	deepEqual( Stem("puisne"), "puisn" );
	deepEqual( Stem("puissance"), "puissanc" );
	deepEqual( Stem("puissant"), "puissant" );
	deepEqual( Stem("puke"), "puke" );
	deepEqual( Stem("puking"), "puke" );
	deepEqual( Stem("pulcher"), "pulcher" );
	deepEqual( Stem("puling"), "pule" );
	deepEqual( Stem("pull"), "pull" );
	deepEqual( Stem("pulled"), "pull" );
	deepEqual( Stem("puller"), "puller" );
	deepEqual( Stem("pullet"), "pullet" );
	deepEqual( Stem("pulling"), "pull" );
	deepEqual( Stem("pulls"), "pull" );
	deepEqual( Stem("pulpit"), "pulpit" );
	deepEqual( Stem("pulpiter"), "pulpit" );
	deepEqual( Stem("pulpits"), "pulpit" );
	deepEqual( Stem("pulsations"), "pulsat" );
	deepEqual( Stem("pulse"), "puls" );
	deepEqual( Stem("pulsidge"), "pulsidg" );
	deepEqual( Stem("pump"), "pump" );
	deepEqual( Stem("pumped"), "pump" );
	deepEqual( Stem("pumpernickel"), "pumpernickel" );
	deepEqual( Stem("pumpernickelisch"), "pumpernickelisch" );
	deepEqual( Stem("pumping"), "pump" );
	deepEqual( Stem("pumpion"), "pumpion" );
	deepEqual( Stem("pumps"), "pump" );
	deepEqual( Stem("pun"), "pun" );
	deepEqual( Stem("punch"), "punch" );
	deepEqual( Stem("punched"), "punch" );
	deepEqual( Stem("punctual"), "punctual" );
	deepEqual( Stem("punctuality"), "punctual" );
	deepEqual( Stem("punctually"), "punctual" );
	deepEqual( Stem("pungent"), "pungent" );
	deepEqual( Stem("punish"), "punish" );
	deepEqual( Stem("punished"), "punish" );
	deepEqual( Stem("punishes"), "punish" );
	deepEqual( Stem("punishing"), "punish" );
	deepEqual( Stem("punishment"), "punish" );
	deepEqual( Stem("punishments"), "punish" );
	deepEqual( Stem("punjaub"), "punjaub" );
	deepEqual( Stem("punk"), "punk" );
	deepEqual( Stem("punkahs"), "punkah" );
	deepEqual( Stem("punter"), "punter" );
	deepEqual( Stem("punters"), "punter" );
	deepEqual( Stem("punto"), "punto" );
	deepEqual( Stem("puny"), "puni" );
	deepEqual( Stem("pupil"), "pupil" );
	deepEqual( Stem("pupils"), "pupil" );
	deepEqual( Stem("puppet"), "puppet" );
	deepEqual( Stem("puppets"), "puppet" );
	deepEqual( Stem("puppies"), "puppi" );
	deepEqual( Stem("puppy"), "puppi" );
	deepEqual( Stem("pur"), "pur" );
	deepEqual( Stem("purblind"), "purblind" );
	deepEqual( Stem("purchas"), "purcha" );
	deepEqual( Stem("purchase"), "purchas" );
	deepEqual( Stem("purchased"), "purchas" );
	deepEqual( Stem("purchaser"), "purchas" );
	deepEqual( Stem("purchasers"), "purchas" );
	deepEqual( Stem("purchases"), "purchas" );
	deepEqual( Stem("purchaseth"), "purchaseth" );
	deepEqual( Stem("purchasing"), "purchas" );
	deepEqual( Stem("pure"), "pure" );
	deepEqual( Stem("purely"), "pure" );
	deepEqual( Stem("purer"), "purer" );
	deepEqual( Stem("purest"), "purest" );
	deepEqual( Stem("purg"), "purg" );
	deepEqual( Stem("purgation"), "purgat" );
	deepEqual( Stem("purgative"), "purg" );
	deepEqual( Stem("purgatory"), "purgatori" );
	deepEqual( Stem("purge"), "purg" );
	deepEqual( Stem("purged"), "purg" );
	deepEqual( Stem("purgers"), "purger" );
	deepEqual( Stem("purging"), "purg" );
	deepEqual( Stem("purifier"), "purifi" );
	deepEqual( Stem("purifies"), "purifi" );
	deepEqual( Stem("purifying"), "purifi" );
	deepEqual( Stem("puritan"), "puritan" );
	deepEqual( Stem("purity"), "puriti" );
	deepEqual( Stem("purlieus"), "purlieu" );
	deepEqual( Stem("purloin"), "purloin" );
	deepEqual( Stem("purple"), "purpl" );
	deepEqual( Stem("purpled"), "purpl" );
	deepEqual( Stem("purples"), "purpl" );
	deepEqual( Stem("purport"), "purport" );
	deepEqual( Stem("purpos"), "purpo" );
	deepEqual( Stem("purpose"), "purpos" );
	deepEqual( Stem("purposed"), "purpos" );
	deepEqual( Stem("purposely"), "purpos" );
	deepEqual( Stem("purposes"), "purpos" );
	deepEqual( Stem("purposeth"), "purposeth" );
	deepEqual( Stem("purposing"), "purpos" );
	deepEqual( Stem("purr"), "purr" );
	deepEqual( Stem("purs"), "pur" );
	deepEqual( Stem("purse"), "purs" );
	deepEqual( Stem("pursents"), "pursent" );
	deepEqual( Stem("purses"), "purs" );
	deepEqual( Stem("pursu"), "pursu" );
	deepEqual( Stem("pursue"), "pursu" );
	deepEqual( Stem("pursued"), "pursu" );
	deepEqual( Stem("pursuer"), "pursuer" );
	deepEqual( Stem("pursuers"), "pursuer" );
	deepEqual( Stem("pursues"), "pursu" );
	deepEqual( Stem("pursuest"), "pursuest" );
	deepEqual( Stem("pursueth"), "pursueth" );
	deepEqual( Stem("pursuing"), "pursu" );
	deepEqual( Stem("pursuit"), "pursuit" );
	deepEqual( Stem("pursuits"), "pursuit" );
	deepEqual( Stem("pursuivant"), "pursuiv" );
	deepEqual( Stem("pursuivants"), "pursuiv" );
	deepEqual( Stem("pursy"), "pursi" );
	deepEqual( Stem("purus"), "puru" );
	deepEqual( Stem("purveyor"), "purveyor" );
	deepEqual( Stem("purveyors"), "purveyor" );
	deepEqual( Stem("push"), "push" );
	deepEqual( Stem("pushed"), "push" );
	deepEqual( Stem("pushes"), "push" );
	deepEqual( Stem("pushing"), "push" );
	deepEqual( Stem("pusillanimity"), "pusillanim" );
	deepEqual( Stem("put"), "put" );
	deepEqual( Stem("putney"), "putnei" );
	deepEqual( Stem("putrefy"), "putrefi" );
	deepEqual( Stem("putrified"), "putrifi" );
	deepEqual( Stem("puts"), "put" );
	deepEqual( Stem("putter"), "putter" );
	deepEqual( Stem("putting"), "put" );
	deepEqual( Stem("puttock"), "puttock" );
	deepEqual( Stem("puzzel"), "puzzel" );
	deepEqual( Stem("puzzle"), "puzzl" );
	deepEqual( Stem("puzzled"), "puzzl" );
	deepEqual( Stem("puzzles"), "puzzl" );
	deepEqual( Stem("puzzling"), "puzzl" );
	deepEqual( Stem("py"), "py" );
	deepEqual( Stem("pye"), "pye" );
	deepEqual( Stem("pygmalion"), "pygmalion" );
	deepEqual( Stem("pygmies"), "pygmi" );
	deepEqual( Stem("pygmy"), "pygmi" );
	deepEqual( Stem("pyramid"), "pyramid" );
	deepEqual( Stem("pyramides"), "pyramid" );
	deepEqual( Stem("pyramids"), "pyramid" );
	deepEqual( Stem("pyramis"), "pyrami" );
	deepEqual( Stem("pyramises"), "pyramis" );
	deepEqual( Stem("pyramus"), "pyramu" );
	deepEqual( Stem("pyrenean"), "pyrenean" );
	deepEqual( Stem("pyrrhus"), "pyrrhu" );
	deepEqual( Stem("pythagoras"), "pythagora" );
	deepEqual( Stem("q"), "q" );
	deepEqual( Stem("qu"), "qu" );
	deepEqual( Stem("qua"), "qua" );
	deepEqual( Stem("quack"), "quack" );
	deepEqual( Stem("quacks"), "quack" );
	deepEqual( Stem("quadrangle"), "quadrangl" );
	deepEqual( Stem("quadrant"), "quadrant" );
	deepEqual( Stem("quadrille"), "quadril" );
	deepEqual( Stem("quadrilles"), "quadril" );
	deepEqual( Stem("quadroon"), "quadroon" );
	deepEqual( Stem("quae"), "quae" );
	deepEqual( Stem("quaff"), "quaff" );
	deepEqual( Stem("quaffing"), "quaf" );
	deepEqual( Stem("quagmire"), "quagmir" );
	deepEqual( Stem("quail"), "quail" );
	deepEqual( Stem("quailed"), "quail" );
	deepEqual( Stem("quailing"), "quail" );
	deepEqual( Stem("quails"), "quail" );
	deepEqual( Stem("quaint"), "quaint" );
	deepEqual( Stem("quaintly"), "quaintli" );
	deepEqual( Stem("quak"), "quak" );
	deepEqual( Stem("quake"), "quak" );
	deepEqual( Stem("quaker"), "quaker" );
	deepEqual( Stem("quakes"), "quak" );
	deepEqual( Stem("qualification"), "qualif" );
	deepEqual( Stem("qualifications"), "qualif" );
	deepEqual( Stem("qualified"), "qualifi" );
	deepEqual( Stem("qualifies"), "qualifi" );
	deepEqual( Stem("qualify"), "qualifi" );
	deepEqual( Stem("qualifying"), "qualifi" );
	deepEqual( Stem("qualite"), "qualit" );
	deepEqual( Stem("qualities"), "qualiti" );
	deepEqual( Stem("quality"), "qualiti" );
	deepEqual( Stem("qualm"), "qualm" );
	deepEqual( Stem("qualmish"), "qualmish" );
	deepEqual( Stem("quam"), "quam" );
	deepEqual( Stem("quand"), "quand" );
	deepEqual( Stem("quando"), "quando" );
	deepEqual( Stem("quantities"), "quantiti" );
	deepEqual( Stem("quantity"), "quantiti" );
	deepEqual( Stem("quarante"), "quarant" );
	deepEqual( Stem("quarantine"), "quarantin" );
	deepEqual( Stem("quare"), "quar" );
	deepEqual( Stem("quarl"), "quarl" );
	deepEqual( Stem("quarrel"), "quarrel" );
	deepEqual( Stem("quarrell"), "quarrel" );
	deepEqual( Stem("quarrelled"), "quarrel" );
	deepEqual( Stem("quarreller"), "quarrel" );
	deepEqual( Stem("quarrelling"), "quarrel" );
	deepEqual( Stem("quarrelous"), "quarrel" );
	deepEqual( Stem("quarrels"), "quarrel" );
	deepEqual( Stem("quarrelsome"), "quarrelsom" );
	deepEqual( Stem("quarries"), "quarri" );
	deepEqual( Stem("quarry"), "quarri" );
	deepEqual( Stem("quart"), "quart" );
	deepEqual( Stem("quarter"), "quarter" );
	deepEqual( Stem("quartered"), "quarter" );
	deepEqual( Stem("quartering"), "quarter" );
	deepEqual( Stem("quarterly"), "quarterli" );
	deepEqual( Stem("quarters"), "quarter" );
	deepEqual( Stem("quarto"), "quarto" );
	deepEqual( Stem("quarts"), "quart" );
	deepEqual( Stem("quashimaboo"), "quashimaboo" );
	deepEqual( Stem("quashyboo"), "quashyboo" );
	deepEqual( Stem("quashyboos"), "quashyboo" );
	deepEqual( Stem("quasi"), "quasi" );
	deepEqual( Stem("quat"), "quat" );
	deepEqual( Stem("quatch"), "quatch" );
	deepEqual( Stem("quater"), "quater" );
	deepEqual( Stem("quatorze"), "quatorz" );
	deepEqual( Stem("quatre"), "quatr" );
	deepEqual( Stem("quavering"), "quaver" );
	deepEqual( Stem("quay"), "quai" );
	deepEqual( Stem("quays"), "quai" );
	deepEqual( Stem("que"), "que" );
	deepEqual( Stem("quean"), "quean" );
	deepEqual( Stem("queas"), "quea" );
	deepEqual( Stem("queasiness"), "queasi" );
	deepEqual( Stem("queasy"), "queasi" );
	deepEqual( Stem("quebec"), "quebec" );
	deepEqual( Stem("queen"), "queen" );
	deepEqual( Stem("queens"), "queen" );
	deepEqual( Stem("queer"), "queer" );
	deepEqual( Stem("queerest"), "queerest" );
	deepEqual( Stem("queerly"), "queerli" );
	deepEqual( Stem("quel"), "quel" );
	deepEqual( Stem("quell"), "quell" );
	deepEqual( Stem("quelled"), "quell" );
	deepEqual( Stem("queller"), "queller" );
	deepEqual( Stem("quench"), "quench" );
	deepEqual( Stem("quenched"), "quench" );
	deepEqual( Stem("quenching"), "quench" );
	deepEqual( Stem("quenchless"), "quenchless" );
	deepEqual( Stem("queries"), "queri" );
	deepEqual( Stem("querist"), "querist" );
	deepEqual( Stem("quern"), "quern" );
	deepEqual( Stem("querulous"), "querul" );
	deepEqual( Stem("querulousness"), "querul" );
	deepEqual( Stem("quest"), "quest" );
	deepEqual( Stem("questant"), "questant" );
	deepEqual( Stem("question"), "question" );
	deepEqual( Stem("questionable"), "question" );
	deepEqual( Stem("questioned"), "question" );
	deepEqual( Stem("questioner"), "question" );
	deepEqual( Stem("questioning"), "question" );
	deepEqual( Stem("questionless"), "questionless" );
	deepEqual( Stem("questions"), "question" );
	deepEqual( Stem("questrists"), "questrist" );
	deepEqual( Stem("quests"), "quest" );
	deepEqual( Stem("queubus"), "queubu" );
	deepEqual( Stem("qui"), "qui" );
	deepEqual( Stem("quiberoon"), "quiberoon" );
	deepEqual( Stem("quick"), "quick" );
	deepEqual( Stem("quicken"), "quicken" );
	deepEqual( Stem("quickens"), "quicken" );
	deepEqual( Stem("quicker"), "quicker" );
	deepEqual( Stem("quicklier"), "quicklier" );
	deepEqual( Stem("quickly"), "quickli" );
	deepEqual( Stem("quickness"), "quick" );
	deepEqual( Stem("quicksand"), "quicksand" );
	deepEqual( Stem("quicksands"), "quicksand" );
	deepEqual( Stem("quicksilverr"), "quicksilverr" );
	deepEqual( Stem("quid"), "quid" );
	deepEqual( Stem("quiddities"), "quidditi" );
	deepEqual( Stem("quiddits"), "quiddit" );
	deepEqual( Stem("quier"), "quier" );
	deepEqual( Stem("quiet"), "quiet" );
	deepEqual( Stem("quieter"), "quieter" );
	deepEqual( Stem("quietest"), "quietest" );
	deepEqual( Stem("quietly"), "quietli" );
	deepEqual( Stem("quietness"), "quiet" );
	deepEqual( Stem("quietude"), "quietud" );
	deepEqual( Stem("quietus"), "quietu" );
	deepEqual( Stem("quill"), "quill" );
	deepEqual( Stem("quillets"), "quillet" );
	deepEqual( Stem("quills"), "quill" );
	deepEqual( Stem("quilt"), "quilt" );
	deepEqual( Stem("quinapalus"), "quinapalu" );
	deepEqual( Stem("quince"), "quinc" );
	deepEqual( Stem("quinces"), "quinc" );
	deepEqual( Stem("quintain"), "quintain" );
	deepEqual( Stem("quintessence"), "quintess" );
	deepEqual( Stem("quintin"), "quintin" );
	deepEqual( Stem("quintus"), "quintu" );
	deepEqual( Stem("quip"), "quip" );
	deepEqual( Stem("quips"), "quip" );
	deepEqual( Stem("quire"), "quir" );
	deepEqual( Stem("quiring"), "quir" );
	deepEqual( Stem("quirk"), "quirk" );
	deepEqual( Stem("quirks"), "quirk" );
	deepEqual( Stem("quis"), "qui" );
	deepEqual( Stem("quit"), "quit" );
	deepEqual( Stem("quite"), "quit" );
	deepEqual( Stem("quits"), "quit" );
	deepEqual( Stem("quittance"), "quittanc" );
	deepEqual( Stem("quitted"), "quit" );
	deepEqual( Stem("quitting"), "quit" );
	deepEqual( Stem("quiver"), "quiver" );
	deepEqual( Stem("quivered"), "quiver" );
	deepEqual( Stem("quivering"), "quiver" );
	deepEqual( Stem("quivers"), "quiver" );
	deepEqual( Stem("quiz"), "quiz" );
	deepEqual( Stem("quizzing"), "quizz" );
	deepEqual( Stem("quo"), "quo" );
	deepEqual( Stem("quod"), "quod" );
	deepEqual( Stem("quoifs"), "quoif" );
	deepEqual( Stem("quoint"), "quoint" );
	deepEqual( Stem("quoit"), "quoit" );
	deepEqual( Stem("quoits"), "quoit" );
	deepEqual( Stem("quondam"), "quondam" );
	deepEqual( Stem("quoniam"), "quoniam" );
	deepEqual( Stem("quotation"), "quotat" );
	deepEqual( Stem("quotations"), "quotat" );
	deepEqual( Stem("quote"), "quot" );
	deepEqual( Stem("quoted"), "quot" );
	deepEqual( Stem("quotes"), "quot" );
	deepEqual( Stem("quoth"), "quoth" );
	deepEqual( Stem("quotidian"), "quotidian" );
	deepEqual( Stem("quoting"), "quot" );
	deepEqual( Stem("qvite"), "qvite" );
	deepEqual( Stem("r"), "r" );
	deepEqual( Stem("rabbit"), "rabbit" );
	deepEqual( Stem("rabbits"), "rabbit" );
	deepEqual( Stem("rabble"), "rabbl" );
	deepEqual( Stem("rabblement"), "rabblement" );
	deepEqual( Stem("race"), "race" );
	deepEqual( Stem("races"), "race" );
	deepEqual( Stem("racing"), "race" );
	deepEqual( Stem("rack"), "rack" );
	deepEqual( Stem("rackers"), "racker" );
	deepEqual( Stem("racket"), "racket" );
	deepEqual( Stem("rackets"), "racket" );
	deepEqual( Stem("racking"), "rack" );
	deepEqual( Stem("racks"), "rack" );
	deepEqual( Stem("radiance"), "radianc" );
	deepEqual( Stem("radiant"), "radiant" );
	deepEqual( Stem("radical"), "radic" );
	deepEqual( Stem("radicals"), "radic" );
	deepEqual( Stem("radish"), "radish" );
	deepEqual( Stem("rafe"), "rafe" );
	deepEqual( Stem("raff"), "raff" );
	deepEqual( Stem("raffoles"), "raffol" );
	deepEqual( Stem("raffs"), "raff" );
	deepEqual( Stem("raft"), "raft" );
	deepEqual( Stem("rag"), "rag" );
	deepEqual( Stem("rage"), "rage" );
	deepEqual( Stem("raged"), "rage" );
	deepEqual( Stem("rages"), "rage" );
	deepEqual( Stem("rageth"), "rageth" );
	deepEqual( Stem("ragg"), "ragg" );
	deepEqual( Stem("ragged"), "rag" );
	deepEqual( Stem("raggedness"), "ragged" );
	deepEqual( Stem("raggles"), "raggl" );
	deepEqual( Stem("raging"), "rage" );
	deepEqual( Stem("ragland"), "ragland" );
	deepEqual( Stem("ragozine"), "ragozin" );
	deepEqual( Stem("rags"), "rag" );
	deepEqual( Stem("rah"), "rah" );
	deepEqual( Stem("raikes"), "raik" );
	deepEqual( Stem("rail"), "rail" );
	deepEqual( Stem("railed"), "rail" );
	deepEqual( Stem("railer"), "railer" );
	deepEqual( Stem("railest"), "railest" );
	deepEqual( Stem("raileth"), "raileth" );
	deepEqual( Stem("railing"), "rail" );
	deepEqual( Stem("railings"), "rail" );
	deepEqual( Stem("railroads"), "railroad" );
	deepEqual( Stem("rails"), "rail" );
	deepEqual( Stem("raiment"), "raiment" );
	deepEqual( Stem("rain"), "rain" );
	deepEqual( Stem("rainbow"), "rainbow" );
	deepEqual( Stem("raine"), "rain" );
	deepEqual( Stem("raineth"), "raineth" );
	deepEqual( Stem("raining"), "rain" );
	deepEqual( Stem("rainold"), "rainold" );
	deepEqual( Stem("rains"), "rain" );
	deepEqual( Stem("rainy"), "raini" );
	deepEqual( Stem("rais"), "rai" );
	deepEqual( Stem("raise"), "rais" );
	deepEqual( Stem("raised"), "rais" );
	deepEqual( Stem("raises"), "rais" );
	deepEqual( Stem("raising"), "rais" );
	deepEqual( Stem("raisins"), "raisin" );
	deepEqual( Stem("rak"), "rak" );
	deepEqual( Stem("rake"), "rake" );
	deepEqual( Stem("raked"), "rake" );
	deepEqual( Stem("rakers"), "raker" );
	deepEqual( Stem("rakes"), "rake" );
	deepEqual( Stem("ral"), "ral" );
	deepEqual( Stem("rald"), "rald" );
	deepEqual( Stem("rallied"), "ralli" );
	deepEqual( Stem("rally"), "ralli" );
	deepEqual( Stem("rallying"), "ralli" );
	deepEqual( Stem("ralph"), "ralph" );
	deepEqual( Stem("ram"), "ram" );
	deepEqual( Stem("rambling"), "rambl" );
	deepEqual( Stem("rambures"), "rambur" );
	deepEqual( Stem("ramchumder"), "ramchumd" );
	deepEqual( Stem("ramchunder"), "ramchund" );
	deepEqual( Stem("ramgunge"), "ramgung" );
	deepEqual( Stem("ramifications"), "ramif" );
	deepEqual( Stem("ramm"), "ramm" );
	deepEqual( Stem("rampallian"), "rampallian" );
	deepEqual( Stem("rampant"), "rampant" );
	deepEqual( Stem("ramparts"), "rampart" );
	deepEqual( Stem("ramping"), "ramp" );
	deepEqual( Stem("rampir"), "rampir" );
	deepEqual( Stem("ramps"), "ramp" );
	deepEqual( Stem("rams"), "ram" );
	deepEqual( Stem("ramsey"), "ramsei" );
	deepEqual( Stem("ramsgate"), "ramsgat" );
	deepEqual( Stem("ramshorn"), "ramshorn" );
	deepEqual( Stem("ramston"), "ramston" );
	deepEqual( Stem("ran"), "ran" );
	deepEqual( Stem("rance"), "ranc" );
	deepEqual( Stem("rancorous"), "rancor" );
	deepEqual( Stem("rancors"), "rancor" );
	deepEqual( Stem("rancour"), "rancour" );
	deepEqual( Stem("random"), "random" );
	deepEqual( Stem("rang"), "rang" );
	deepEqual( Stem("range"), "rang" );
	deepEqual( Stem("ranged"), "rang" );
	deepEqual( Stem("rangers"), "ranger" );
	deepEqual( Stem("ranges"), "rang" );
	deepEqual( Stem("ranging"), "rang" );
	deepEqual( Stem("rank"), "rank" );
	deepEqual( Stem("ranker"), "ranker" );
	deepEqual( Stem("rankest"), "rankest" );
	deepEqual( Stem("ranking"), "rank" );
	deepEqual( Stem("rankle"), "rankl" );
	deepEqual( Stem("rankled"), "rankl" );
	deepEqual( Stem("rankles"), "rankl" );
	deepEqual( Stem("rankling"), "rankl" );
	deepEqual( Stem("rankly"), "rankli" );
	deepEqual( Stem("rankness"), "rank" );
	deepEqual( Stem("ranks"), "rank" );
	deepEqual( Stem("ransack"), "ransack" );
	deepEqual( Stem("ransacked"), "ransack" );
	deepEqual( Stem("ransacking"), "ransack" );
	deepEqual( Stem("ransom"), "ransom" );
	deepEqual( Stem("ransomed"), "ransom" );
	deepEqual( Stem("ransoming"), "ransom" );
	deepEqual( Stem("ransomless"), "ransomless" );
	deepEqual( Stem("ransoms"), "ransom" );
	deepEqual( Stem("rant"), "rant" );
	deepEqual( Stem("ranting"), "rant" );
	deepEqual( Stem("rap"), "rap" );
	deepEqual( Stem("rapacity"), "rapac" );
	deepEqual( Stem("rape"), "rape" );
	deepEqual( Stem("rapes"), "rape" );
	deepEqual( Stem("rapid"), "rapid" );
	deepEqual( Stem("rapidity"), "rapid" );
	deepEqual( Stem("rapidly"), "rapidli" );
	deepEqual( Stem("rapier"), "rapier" );
	deepEqual( Stem("rapiers"), "rapier" );
	deepEqual( Stem("rapine"), "rapin" );
	deepEqual( Stem("raps"), "rap" );
	deepEqual( Stem("rapt"), "rapt" );
	deepEqual( Stem("rapture"), "raptur" );
	deepEqual( Stem("raptures"), "raptur" );
	deepEqual( Stem("rar"), "rar" );
	deepEqual( Stem("rare"), "rare" );
	deepEqual( Stem("rarely"), "rare" );
	deepEqual( Stem("rareness"), "rare" );
	deepEqual( Stem("rarer"), "rarer" );
	deepEqual( Stem("rarest"), "rarest" );
	deepEqual( Stem("rarities"), "rariti" );
	deepEqual( Stem("rarity"), "rariti" );
	deepEqual( Stem("rascal"), "rascal" );
	deepEqual( Stem("rascalliest"), "rascalliest" );
	deepEqual( Stem("rascally"), "rascal" );
	deepEqual( Stem("rascals"), "rascal" );
	deepEqual( Stem("rased"), "rase" );
	deepEqual( Stem("rash"), "rash" );
	deepEqual( Stem("rasher"), "rasher" );
	deepEqual( Stem("rashly"), "rashli" );
	deepEqual( Stem("rashness"), "rash" );
	deepEqual( Stem("raspberry"), "raspberri" );
	deepEqual( Stem("rasy"), "rasi" );
	deepEqual( Stem("rat"), "rat" );
	deepEqual( Stem("ratcatcher"), "ratcatch" );
	deepEqual( Stem("ratcliff"), "ratcliff" );
	deepEqual( Stem("rate"), "rate" );
	deepEqual( Stem("rated"), "rate" );
	deepEqual( Stem("rately"), "rate" );
	deepEqual( Stem("rates"), "rate" );
	deepEqual( Stem("rather"), "rather" );
	deepEqual( Stem("ratherest"), "ratherest" );
	deepEqual( Stem("ratified"), "ratifi" );
	deepEqual( Stem("ratifiers"), "ratifi" );
	deepEqual( Stem("ratify"), "ratifi" );
	deepEqual( Stem("rating"), "rate" );
	deepEqual( Stem("ration"), "ration" );
	deepEqual( Stem("rational"), "ration" );
	deepEqual( Stem("rationally"), "ration" );
	deepEqual( Stem("rations"), "ration" );
	deepEqual( Stem("ratolorum"), "ratolorum" );
	deepEqual( Stem("rats"), "rat" );
	deepEqual( Stem("ratsbane"), "ratsban" );
	deepEqual( Stem("ratted"), "rat" );
	deepEqual( Stem("rattle"), "rattl" );
	deepEqual( Stem("rattled"), "rattl" );
	deepEqual( Stem("rattles"), "rattl" );
	deepEqual( Stem("rattling"), "rattl" );
	deepEqual( Stem("rature"), "ratur" );
	deepEqual( Stem("raudon"), "raudon" );
	deepEqual( Stem("raught"), "raught" );
	deepEqual( Stem("rav"), "rav" );
	deepEqual( Stem("ravaged"), "ravag" );
	deepEqual( Stem("ravdonn"), "ravdonn" );
	deepEqual( Stem("rave"), "rave" );
	deepEqual( Stem("raved"), "rave" );
	deepEqual( Stem("ravel"), "ravel" );
	deepEqual( Stem("raven"), "raven" );
	deepEqual( Stem("ravening"), "raven" );
	deepEqual( Stem("ravenous"), "raven" );
	deepEqual( Stem("ravens"), "raven" );
	deepEqual( Stem("ravenspurgh"), "ravenspurgh" );
	deepEqual( Stem("raves"), "rave" );
	deepEqual( Stem("ravin"), "ravin" );
	deepEqual( Stem("raving"), "rave" );
	deepEqual( Stem("ravish"), "ravish" );
	deepEqual( Stem("ravished"), "ravish" );
	deepEqual( Stem("ravisher"), "ravish" );
	deepEqual( Stem("ravishing"), "ravish" );
	deepEqual( Stem("ravishment"), "ravish" );
	deepEqual( Stem("ravishments"), "ravish" );
	deepEqual( Stem("ravissante"), "ravissant" );
	deepEqual( Stem("ravoli"), "ravoli" );
	deepEqual( Stem("raw"), "raw" );
	deepEqual( Stem("rawding"), "rawd" );
	deepEqual( Stem("rawdon"), "rawdon" );
	deepEqual( Stem("rawdons"), "rawdon" );
	deepEqual( Stem("rawdy"), "rawdi" );
	deepEqual( Stem("rawer"), "rawer" );
	deepEqual( Stem("rawly"), "rawli" );
	deepEqual( Stem("rawness"), "raw" );
	deepEqual( Stem("ray"), "rai" );
	deepEqual( Stem("rayed"), "rai" );
	deepEqual( Stem("raymond"), "raymond" );
	deepEqual( Stem("rays"), "rai" );
	deepEqual( Stem("raz"), "raz" );
	deepEqual( Stem("raze"), "raze" );
	deepEqual( Stem("razed"), "raze" );
	deepEqual( Stem("razes"), "raze" );
	deepEqual( Stem("razeth"), "razeth" );
	deepEqual( Stem("razing"), "raze" );
	deepEqual( Stem("razor"), "razor" );
	deepEqual( Stem("razorable"), "razor" );
	deepEqual( Stem("razors"), "razor" );
	deepEqual( Stem("razure"), "razur" );
	deepEqual( Stem("rd"), "rd" );
	deepEqual( Stem("re"), "re" );
	deepEqual( Stem("reach"), "reach" );
	deepEqual( Stem("reached"), "reach" );
	deepEqual( Stem("reaches"), "reach" );
	deepEqual( Stem("reacheth"), "reacheth" );
	deepEqual( Stem("reaching"), "reach" );
	deepEqual( Stem("read"), "read" );
	deepEqual( Stem("reader"), "reader" );
	deepEqual( Stem("readers"), "reader" );
	deepEqual( Stem("readiest"), "readiest" );
	deepEqual( Stem("readily"), "readili" );
	deepEqual( Stem("readiness"), "readi" );
	deepEqual( Stem("reading"), "read" );
	deepEqual( Stem("readins"), "readin" );
	deepEqual( Stem("reads"), "read" );
	deepEqual( Stem("readth"), "readth" );
	deepEqual( Stem("ready"), "readi" );
	deepEqual( Stem("real"), "real" );
	deepEqual( Stem("reality"), "realiti" );
	deepEqual( Stem("realize"), "realiz" );
	deepEqual( Stem("realized"), "realiz" );
	deepEqual( Stem("really"), "realli" );
	deepEqual( Stem("realm"), "realm" );
	deepEqual( Stem("realms"), "realm" );
	deepEqual( Stem("reap"), "reap" );
	deepEqual( Stem("reapers"), "reaper" );
	deepEqual( Stem("reaping"), "reap" );
	deepEqual( Stem("reappearance"), "reappear" );
	deepEqual( Stem("reappeared"), "reappear" );
	deepEqual( Stem("reaps"), "reap" );
	deepEqual( Stem("rear"), "rear" );
	deepEqual( Stem("reared"), "rear" );
	deepEqual( Stem("rears"), "rear" );
	deepEqual( Stem("rearward"), "rearward" );
	deepEqual( Stem("reascended"), "reascend" );
	deepEqual( Stem("reason"), "reason" );
	deepEqual( Stem("reasonable"), "reason" );
	deepEqual( Stem("reasonably"), "reason" );
	deepEqual( Stem("reasoned"), "reason" );
	deepEqual( Stem("reasoning"), "reason" );
	deepEqual( Stem("reasonless"), "reasonless" );
	deepEqual( Stem("reasons"), "reason" );
	deepEqual( Stem("reassumed"), "reassum" );
	deepEqual( Stem("reave"), "reav" );
	deepEqual( Stem("rebate"), "rebat" );
	deepEqual( Stem("rebato"), "rebato" );
	deepEqual( Stem("rebecca"), "rebecca" );
	deepEqual( Stem("rebeck"), "rebeck" );
	deepEqual( Stem("rebecque"), "rebecqu" );
	deepEqual( Stem("rebel"), "rebel" );
	deepEqual( Stem("rebell"), "rebel" );
	deepEqual( Stem("rebelled"), "rebel" );
	deepEqual( Stem("rebelling"), "rebel" );
	deepEqual( Stem("rebellion"), "rebellion" );
	deepEqual( Stem("rebellious"), "rebelli" );
	deepEqual( Stem("rebels"), "rebel" );
	deepEqual( Stem("rebound"), "rebound" );
	deepEqual( Stem("rebuff"), "rebuff" );
	deepEqual( Stem("rebuffed"), "rebuf" );
	deepEqual( Stem("rebuffing"), "rebuf" );
	deepEqual( Stem("rebuffs"), "rebuff" );
	deepEqual( Stem("rebuild"), "rebuild" );
	deepEqual( Stem("rebuk"), "rebuk" );
	deepEqual( Stem("rebuke"), "rebuk" );
	deepEqual( Stem("rebukeable"), "rebuk" );
	deepEqual( Stem("rebuked"), "rebuk" );
	deepEqual( Stem("rebukes"), "rebuk" );
	deepEqual( Stem("rebuking"), "rebuk" );
	deepEqual( Stem("rebus"), "rebu" );
	deepEqual( Stem("recall"), "recal" );
	deepEqual( Stem("recalled"), "recal" );
	deepEqual( Stem("recant"), "recant" );
	deepEqual( Stem("recantation"), "recant" );
	deepEqual( Stem("recanter"), "recant" );
	deepEqual( Stem("recanting"), "recant" );
	deepEqual( Stem("recapitulated"), "recapitul" );
	deepEqual( Stem("receipt"), "receipt" );
	deepEqual( Stem("receipted"), "receipt" );
	deepEqual( Stem("receipts"), "receipt" );
	deepEqual( Stem("receiv"), "receiv" );
	deepEqual( Stem("receive"), "receiv" );
	deepEqual( Stem("received"), "receiv" );
	deepEqual( Stem("receiver"), "receiv" );
	deepEqual( Stem("receives"), "receiv" );
	deepEqual( Stem("receivest"), "receivest" );
	deepEqual( Stem("receiveth"), "receiveth" );
	deepEqual( Stem("receiving"), "receiv" );
	deepEqual( Stem("receptacle"), "receptacl" );
	deepEqual( Stem("reception"), "recept" );
	deepEqual( Stem("recesses"), "recess" );
	deepEqual( Stem("recessit"), "recessit" );
	deepEqual( Stem("rechate"), "rechat" );
	deepEqual( Stem("recipient"), "recipi" );
	deepEqual( Stem("reciprocal"), "reciproc" );
	deepEqual( Stem("reciprocally"), "reciproc" );
	deepEqual( Stem("recite"), "recit" );
	deepEqual( Stem("recited"), "recit" );
	deepEqual( Stem("reciterai"), "reciterai" );
	deepEqual( Stem("reciting"), "recit" );
	deepEqual( Stem("reck"), "reck" );
	deepEqual( Stem("recking"), "reck" );
	deepEqual( Stem("reckless"), "reckless" );
	deepEqual( Stem("reckon"), "reckon" );
	deepEqual( Stem("reckoned"), "reckon" );
	deepEqual( Stem("reckoning"), "reckon" );
	deepEqual( Stem("reckonings"), "reckon" );
	deepEqual( Stem("recks"), "reck" );
	deepEqual( Stem("reclaim"), "reclaim" );
	deepEqual( Stem("reclaims"), "reclaim" );
	deepEqual( Stem("reclusive"), "reclus" );
	deepEqual( Stem("recognise"), "recognis" );
	deepEqual( Stem("recognised"), "recognis" );
	deepEqual( Stem("recognition"), "recognit" );
	deepEqual( Stem("recognitions"), "recognit" );
	deepEqual( Stem("recognizance"), "recogniz" );
	deepEqual( Stem("recognizances"), "recogniz" );
	deepEqual( Stem("recognize"), "recogn" );
	deepEqual( Stem("recognized"), "recogn" );
	deepEqual( Stem("recoil"), "recoil" );
	deepEqual( Stem("recoiling"), "recoil" );
	deepEqual( Stem("recollect"), "recollect" );
	deepEqual( Stem("recollected"), "recollect" );
	deepEqual( Stem("recollecting"), "recollect" );
	deepEqual( Stem("recollection"), "recollect" );
	deepEqual( Stem("recollections"), "recollect" );
	deepEqual( Stem("recomforted"), "recomfort" );
	deepEqual( Stem("recomforture"), "recomfortur" );
	deepEqual( Stem("recommend"), "recommend" );
	deepEqual( Stem("recommendation"), "recommend" );
	deepEqual( Stem("recommended"), "recommend" );
	deepEqual( Stem("recommending"), "recommend" );
	deepEqual( Stem("recommends"), "recommend" );
	deepEqual( Stem("recompens"), "recompen" );
	deepEqual( Stem("recompense"), "recompens" );
	deepEqual( Stem("reconcil"), "reconcil" );
	deepEqual( Stem("reconcile"), "reconcil" );
	deepEqual( Stem("reconciled"), "reconcil" );
	deepEqual( Stem("reconcilement"), "reconcil" );
	deepEqual( Stem("reconciler"), "reconcil" );
	deepEqual( Stem("reconciles"), "reconcil" );
	deepEqual( Stem("reconciliation"), "reconcili" );
	deepEqual( Stem("reconciling"), "reconcil" );
	deepEqual( Stem("record"), "record" );
	deepEqual( Stem("recordation"), "record" );
	deepEqual( Stem("recorded"), "record" );
	deepEqual( Stem("recorder"), "record" );
	deepEqual( Stem("recorders"), "record" );
	deepEqual( Stem("records"), "record" );
	deepEqual( Stem("recount"), "recount" );
	deepEqual( Stem("recounted"), "recount" );
	deepEqual( Stem("recounting"), "recount" );
	deepEqual( Stem("recountments"), "recount" );
	deepEqual( Stem("recounts"), "recount" );
	deepEqual( Stem("recourse"), "recours" );
	deepEqual( Stem("recov"), "recov" );
	deepEqual( Stem("recover"), "recov" );
	deepEqual( Stem("recoverable"), "recover" );
	deepEqual( Stem("recovered"), "recov" );
	deepEqual( Stem("recoveries"), "recoveri" );
	deepEqual( Stem("recovering"), "recov" );
	deepEqual( Stem("recovers"), "recov" );
	deepEqual( Stem("recovery"), "recoveri" );
	deepEqual( Stem("recreant"), "recreant" );
	deepEqual( Stem("recreants"), "recreant" );
	deepEqual( Stem("recreate"), "recreat" );
	deepEqual( Stem("recreation"), "recreat" );
	deepEqual( Stem("recrossed"), "recross" );
	deepEqual( Stem("recruit"), "recruit" );
	deepEqual( Stem("recruiting"), "recruit" );
	deepEqual( Stem("recruits"), "recruit" );
	deepEqual( Stem("rectify"), "rectifi" );
	deepEqual( Stem("rector"), "rector" );
	deepEqual( Stem("rectoress"), "rectoress" );
	deepEqual( Stem("rectors"), "rector" );
	deepEqual( Stem("rectorship"), "rectorship" );
	deepEqual( Stem("rectory"), "rectori" );
	deepEqual( Stem("recure"), "recur" );
	deepEqual( Stem("recured"), "recur" );
	deepEqual( Stem("recurrence"), "recurr" );
	deepEqual( Stem("recusancy"), "recus" );
	deepEqual( Stem("red"), "red" );
	deepEqual( Stem("redbreast"), "redbreast" );
	deepEqual( Stem("redcoats"), "redcoat" );
	deepEqual( Stem("redder"), "redder" );
	deepEqual( Stem("reddest"), "reddest" );
	deepEqual( Stem("rede"), "rede" );
	deepEqual( Stem("redecorated"), "redecor" );
	deepEqual( Stem("redeem"), "redeem" );
	deepEqual( Stem("redeemed"), "redeem" );
	deepEqual( Stem("redeemer"), "redeem" );
	deepEqual( Stem("redeeming"), "redeem" );
	deepEqual( Stem("redeems"), "redeem" );
	deepEqual( Stem("redeliver"), "redeliv" );
	deepEqual( Stem("redemption"), "redempt" );
	deepEqual( Stem("redhand"), "redhand" );
	deepEqual( Stem("redime"), "redim" );
	deepEqual( Stem("redness"), "red" );
	deepEqual( Stem("redoubled"), "redoubl" );
	deepEqual( Stem("redoubted"), "redoubt" );
	deepEqual( Stem("redound"), "redound" );
	deepEqual( Stem("redoute"), "redout" );
	deepEqual( Stem("redoutes"), "redout" );
	deepEqual( Stem("redress"), "redress" );
	deepEqual( Stem("redressed"), "redress" );
	deepEqual( Stem("redresses"), "redress" );
	deepEqual( Stem("reduce"), "reduc" );
	deepEqual( Stem("reduced"), "reduc" );
	deepEqual( Stem("reechy"), "reechi" );
	deepEqual( Stem("reed"), "reed" );
	deepEqual( Stem("reeds"), "reed" );
	deepEqual( Stem("reek"), "reek" );
	deepEqual( Stem("reeking"), "reek" );
	deepEqual( Stem("reeks"), "reek" );
	deepEqual( Stem("reeky"), "reeki" );
	deepEqual( Stem("reel"), "reel" );
	deepEqual( Stem("reeled"), "reel" );
	deepEqual( Stem("reeleth"), "reeleth" );
	deepEqual( Stem("reeling"), "reel" );
	deepEqual( Stem("reels"), "reel" );
	deepEqual( Stem("refell"), "refel" );
	deepEqual( Stem("refer"), "refer" );
	deepEqual( Stem("reference"), "refer" );
	deepEqual( Stem("referr"), "referr" );
	deepEqual( Stem("referred"), "refer" );
	deepEqual( Stem("refigured"), "refigur" );
	deepEqual( Stem("refin"), "refin" );
	deepEqual( Stem("refined"), "refin" );
	deepEqual( Stem("refinement"), "refin" );
	deepEqual( Stem("reflect"), "reflect" );
	deepEqual( Stem("reflected"), "reflect" );
	deepEqual( Stem("reflecting"), "reflect" );
	deepEqual( Stem("reflection"), "reflect" );
	deepEqual( Stem("reflections"), "reflect" );
	deepEqual( Stem("reflective"), "reflect" );
	deepEqual( Stem("reflex"), "reflex" );
	deepEqual( Stem("reform"), "reform" );
	deepEqual( Stem("reformation"), "reform" );
	deepEqual( Stem("reformed"), "reform" );
	deepEqual( Stem("refractory"), "refractori" );
	deepEqual( Stem("refrain"), "refrain" );
	deepEqual( Stem("refrained"), "refrain" );
	deepEqual( Stem("refresh"), "refresh" );
	deepEqual( Stem("refreshed"), "refresh" );
	deepEqual( Stem("refreshing"), "refresh" );
	deepEqual( Stem("refreshment"), "refresh" );
	deepEqual( Stem("refreshments"), "refresh" );
	deepEqual( Stem("reft"), "reft" );
	deepEqual( Stem("refts"), "reft" );
	deepEqual( Stem("refuge"), "refug" );
	deepEqual( Stem("refugee"), "refuge" );
	deepEqual( Stem("refus"), "refu" );
	deepEqual( Stem("refusal"), "refus" );
	deepEqual( Stem("refusant"), "refus" );
	deepEqual( Stem("refuse"), "refus" );
	deepEqual( Stem("refused"), "refus" );
	deepEqual( Stem("refuses"), "refus" );
	deepEqual( Stem("refusest"), "refusest" );
	deepEqual( Stem("refusing"), "refus" );
	deepEqual( Stem("reg"), "reg" );
	deepEqual( Stem("regain"), "regain" );
	deepEqual( Stem("regained"), "regain" );
	deepEqual( Stem("regal"), "regal" );
	deepEqual( Stem("regalia"), "regalia" );
	deepEqual( Stem("regan"), "regan" );
	deepEqual( Stem("regard"), "regard" );
	deepEqual( Stem("regardance"), "regard" );
	deepEqual( Stem("regarded"), "regard" );
	deepEqual( Stem("regardfully"), "regardfulli" );
	deepEqual( Stem("regarding"), "regard" );
	deepEqual( Stem("regardless"), "regardless" );
	deepEqual( Stem("regardons"), "regardon" );
	deepEqual( Stem("regards"), "regard" );
	deepEqual( Stem("regatta"), "regatta" );
	deepEqual( Stem("regency"), "regenc" );
	deepEqual( Stem("regenerate"), "regener" );
	deepEqual( Stem("regent"), "regent" );
	deepEqual( Stem("regentship"), "regentship" );
	deepEqual( Stem("regia"), "regia" );
	deepEqual( Stem("regimen"), "regimen" );
	deepEqual( Stem("regiment"), "regiment" );
	deepEqual( Stem("regimental"), "regiment" );
	deepEqual( Stem("regiments"), "regiment" );
	deepEqual( Stem("regina"), "regina" );
	deepEqual( Stem("reginald"), "reginald" );
	deepEqual( Stem("region"), "region" );
	deepEqual( Stem("regions"), "region" );
	deepEqual( Stem("regist"), "regist" );
	deepEqual( Stem("register"), "regist" );
	deepEqual( Stem("registers"), "regist" );
	deepEqual( Stem("reglar"), "reglar" );
	deepEqual( Stem("reglarly"), "reglarli" );
	deepEqual( Stem("regreet"), "regreet" );
	deepEqual( Stem("regreets"), "regreet" );
	deepEqual( Stem("regress"), "regress" );
	deepEqual( Stem("regret"), "regret" );
	deepEqual( Stem("regrets"), "regret" );
	deepEqual( Stem("regretted"), "regret" );
	deepEqual( Stem("regretting"), "regret" );
	deepEqual( Stem("regt"), "regt" );
	deepEqual( Stem("reguerdon"), "reguerdon" );
	deepEqual( Stem("regular"), "regular" );
	deepEqual( Stem("regularity"), "regular" );
	deepEqual( Stem("regularly"), "regularli" );
	deepEqual( Stem("regulate"), "regul" );
	deepEqual( Stem("regulated"), "regul" );
	deepEqual( Stem("regulation"), "regul" );
	deepEqual( Stem("regulus"), "regulu" );
	deepEqual( Stem("rehears"), "rehear" );
	deepEqual( Stem("rehearsal"), "rehears" );
	deepEqual( Stem("rehearse"), "rehears" );
	deepEqual( Stem("rehearsed"), "rehears" );
	deepEqual( Stem("reign"), "reign" );
	deepEqual( Stem("reigned"), "reign" );
	deepEqual( Stem("reignier"), "reignier" );
	deepEqual( Stem("reigning"), "reign" );
	deepEqual( Stem("reigns"), "reign" );
	deepEqual( Stem("rein"), "rein" );
	deepEqual( Stem("reine"), "rein" );
	deepEqual( Stem("reinforc"), "reinforc" );
	deepEqual( Stem("reinforce"), "reinforc" );
	deepEqual( Stem("reinforcement"), "reinforc" );
	deepEqual( Stem("reins"), "rein" );
	deepEqual( Stem("reinstated"), "reinstat" );
	deepEqual( Stem("reiterate"), "reiter" );
	deepEqual( Stem("reject"), "reject" );
	deepEqual( Stem("rejected"), "reject" );
	deepEqual( Stem("rejoic"), "rejoic" );
	deepEqual( Stem("rejoice"), "rejoic" );
	deepEqual( Stem("rejoiced"), "rejoic" );
	deepEqual( Stem("rejoices"), "rejoic" );
	deepEqual( Stem("rejoiceth"), "rejoiceth" );
	deepEqual( Stem("rejoicing"), "rejoic" );
	deepEqual( Stem("rejoicingly"), "rejoicingli" );
	deepEqual( Stem("rejoin"), "rejoin" );
	deepEqual( Stem("rejoindure"), "rejoindur" );
	deepEqual( Stem("rejoined"), "rejoin" );
	deepEqual( Stem("rejourn"), "rejourn" );
	deepEqual( Stem("rejuvenescent"), "rejuvenesc" );
	deepEqual( Stem("reklect"), "reklect" );
	deepEqual( Stem("rel"), "rel" );
	deepEqual( Stem("relapse"), "relaps" );
	deepEqual( Stem("relapsed"), "relaps" );
	deepEqual( Stem("relapsing"), "relaps" );
	deepEqual( Stem("relate"), "relat" );
	deepEqual( Stem("related"), "relat" );
	deepEqual( Stem("relates"), "relat" );
	deepEqual( Stem("relating"), "relat" );
	deepEqual( Stem("relation"), "relat" );
	deepEqual( Stem("relations"), "relat" );
	deepEqual( Stem("relationship"), "relationship" );
	deepEqual( Stem("relative"), "rel" );
	deepEqual( Stem("relatives"), "rel" );
	deepEqual( Stem("releas"), "relea" );
	deepEqual( Stem("release"), "releas" );
	deepEqual( Stem("released"), "releas" );
	deepEqual( Stem("releasing"), "releas" );
	deepEqual( Stem("relent"), "relent" );
	deepEqual( Stem("relented"), "relent" );
	deepEqual( Stem("relenting"), "relent" );
	deepEqual( Stem("relentless"), "relentless" );
	deepEqual( Stem("relents"), "relent" );
	deepEqual( Stem("reliances"), "relianc" );
	deepEqual( Stem("relic"), "relic" );
	deepEqual( Stem("relics"), "relic" );
	deepEqual( Stem("relief"), "relief" );
	deepEqual( Stem("reliev"), "reliev" );
	deepEqual( Stem("relieve"), "reliev" );
	deepEqual( Stem("relieved"), "reliev" );
	deepEqual( Stem("relieves"), "reliev" );
	deepEqual( Stem("relieving"), "reliev" );
	deepEqual( Stem("religion"), "religion" );
	deepEqual( Stem("religionist"), "religionist" );
	deepEqual( Stem("religionless"), "religionless" );
	deepEqual( Stem("religions"), "religion" );
	deepEqual( Stem("religious"), "religi" );
	deepEqual( Stem("religiously"), "religi" );
	deepEqual( Stem("relinquish"), "relinquish" );
	deepEqual( Stem("reliques"), "reliqu" );
	deepEqual( Stem("reliquit"), "reliquit" );
	deepEqual( Stem("relish"), "relish" );
	deepEqual( Stem("reluctance"), "reluct" );
	deepEqual( Stem("relume"), "relum" );
	deepEqual( Stem("rely"), "reli" );
	deepEqual( Stem("relying"), "reli" );
	deepEqual( Stem("remain"), "remain" );
	deepEqual( Stem("remainder"), "remaind" );
	deepEqual( Stem("remainders"), "remaind" );
	deepEqual( Stem("remained"), "remain" );
	deepEqual( Stem("remaineth"), "remaineth" );
	deepEqual( Stem("remaining"), "remain" );
	deepEqual( Stem("remains"), "remain" );
	deepEqual( Stem("remark"), "remark" );
	deepEqual( Stem("remarkable"), "remark" );
	deepEqual( Stem("remarkably"), "remark" );
	deepEqual( Stem("remarked"), "remark" );
	deepEqual( Stem("remarking"), "remark" );
	deepEqual( Stem("remarks"), "remark" );
	deepEqual( Stem("remediate"), "remedi" );
	deepEqual( Stem("remedied"), "remedi" );
	deepEqual( Stem("remedies"), "remedi" );
	deepEqual( Stem("remedy"), "remedi" );
	deepEqual( Stem("rememb"), "rememb" );
	deepEqual( Stem("remember"), "rememb" );
	deepEqual( Stem("remembered"), "rememb" );
	deepEqual( Stem("remembering"), "rememb" );
	deepEqual( Stem("remembers"), "rememb" );
	deepEqual( Stem("remembrance"), "remembr" );
	deepEqual( Stem("remembrancer"), "remembranc" );
	deepEqual( Stem("remembrances"), "remembr" );
	deepEqual( Stem("remercimens"), "remercimen" );
	deepEqual( Stem("remind"), "remind" );
	deepEqual( Stem("reminded"), "remind" );
	deepEqual( Stem("reminder"), "remind" );
	deepEqual( Stem("reminds"), "remind" );
	deepEqual( Stem("reminiscence"), "reminisc" );
	deepEqual( Stem("reminiscences"), "reminisc" );
	deepEqual( Stem("remiss"), "remiss" );
	deepEqual( Stem("remission"), "remiss" );
	deepEqual( Stem("remissness"), "remiss" );
	deepEqual( Stem("remit"), "remit" );
	deepEqual( Stem("remittances"), "remitt" );
	deepEqual( Stem("remitted"), "remit" );
	deepEqual( Stem("remnant"), "remnant" );
	deepEqual( Stem("remnants"), "remnant" );
	deepEqual( Stem("remonstrance"), "remonstr" );
	deepEqual( Stem("remonstrances"), "remonstr" );
	deepEqual( Stem("remonstrate"), "remonstr" );
	deepEqual( Stem("remonstrated"), "remonstr" );
	deepEqual( Stem("remorse"), "remors" );
	deepEqual( Stem("remorseful"), "remors" );
	deepEqual( Stem("remorseless"), "remorseless" );
	deepEqual( Stem("remote"), "remot" );
	deepEqual( Stem("remotion"), "remot" );
	deepEqual( Stem("remounted"), "remount" );
	deepEqual( Stem("remov"), "remov" );
	deepEqual( Stem("removal"), "remov" );
	deepEqual( Stem("remove"), "remov" );
	deepEqual( Stem("removed"), "remov" );
	deepEqual( Stem("removedness"), "removed" );
	deepEqual( Stem("remover"), "remov" );
	deepEqual( Stem("removes"), "remov" );
	deepEqual( Stem("removing"), "remov" );
	deepEqual( Stem("remunerate"), "remuner" );
	deepEqual( Stem("remuneration"), "remuner" );
	deepEqual( Stem("rence"), "renc" );
	deepEqual( Stem("rencontre"), "rencontr" );
	deepEqual( Stem("rend"), "rend" );
	deepEqual( Stem("render"), "render" );
	deepEqual( Stem("rendered"), "render" );
	deepEqual( Stem("rendering"), "render" );
	deepEqual( Stem("renders"), "render" );
	deepEqual( Stem("rendezvous"), "rendezv" );
	deepEqual( Stem("renegado"), "renegado" );
	deepEqual( Stem("renege"), "reneg" );
	deepEqual( Stem("reneges"), "reneg" );
	deepEqual( Stem("renew"), "renew" );
	deepEqual( Stem("renewed"), "renew" );
	deepEqual( Stem("renewest"), "renewest" );
	deepEqual( Stem("renewing"), "renew" );
	deepEqual( Stem("renounce"), "renounc" );
	deepEqual( Stem("renouncement"), "renounc" );
	deepEqual( Stem("renouncing"), "renounc" );
	deepEqual( Stem("renovation"), "renov" );
	deepEqual( Stem("renowmed"), "renowm" );
	deepEqual( Stem("renown"), "renown" );
	deepEqual( Stem("renowned"), "renown" );
	deepEqual( Stem("renowner"), "renown" );
	deepEqual( Stem("rent"), "rent" );
	deepEqual( Stem("rented"), "rent" );
	deepEqual( Stem("rents"), "rent" );
	deepEqual( Stem("repaid"), "repaid" );
	deepEqual( Stem("repair"), "repair" );
	deepEqual( Stem("repaired"), "repair" );
	deepEqual( Stem("repairing"), "repair" );
	deepEqual( Stem("repairs"), "repair" );
	deepEqual( Stem("reparation"), "repar" );
	deepEqual( Stem("repass"), "repass" );
	deepEqual( Stem("repast"), "repast" );
	deepEqual( Stem("repasts"), "repast" );
	deepEqual( Stem("repasture"), "repastur" );
	deepEqual( Stem("repay"), "repai" );
	deepEqual( Stem("repaying"), "repai" );
	deepEqual( Stem("repays"), "repai" );
	deepEqual( Stem("repayther"), "repayth" );
	deepEqual( Stem("repeal"), "repeal" );
	deepEqual( Stem("repealing"), "repeal" );
	deepEqual( Stem("repeals"), "repeal" );
	deepEqual( Stem("repeat"), "repeat" );
	deepEqual( Stem("repeated"), "repeat" );
	deepEqual( Stem("repeatedly"), "repeatedli" );
	deepEqual( Stem("repeater"), "repeat" );
	deepEqual( Stem("repeating"), "repeat" );
	deepEqual( Stem("repeats"), "repeat" );
	deepEqual( Stem("repel"), "repel" );
	deepEqual( Stem("repelling"), "repel" );
	deepEqual( Stem("repent"), "repent" );
	deepEqual( Stem("repentance"), "repent" );
	deepEqual( Stem("repentances"), "repent" );
	deepEqual( Stem("repentant"), "repent" );
	deepEqual( Stem("repented"), "repent" );
	deepEqual( Stem("repenting"), "repent" );
	deepEqual( Stem("repents"), "repent" );
	deepEqual( Stem("repertoire"), "repertoir" );
	deepEqual( Stem("repetition"), "repetit" );
	deepEqual( Stem("repetitions"), "repetit" );
	deepEqual( Stem("repin"), "repin" );
	deepEqual( Stem("repine"), "repin" );
	deepEqual( Stem("repining"), "repin" );
	deepEqual( Stem("replace"), "replac" );
	deepEqual( Stem("replaced"), "replac" );
	deepEqual( Stem("replant"), "replant" );
	deepEqual( Stem("replenish"), "replenish" );
	deepEqual( Stem("replenished"), "replenish" );
	deepEqual( Stem("replenishing"), "replenish" );
	deepEqual( Stem("replete"), "replet" );
	deepEqual( Stem("replication"), "replic" );
	deepEqual( Stem("replied"), "repli" );
	deepEqual( Stem("replies"), "repli" );
	deepEqual( Stem("repliest"), "repliest" );
	deepEqual( Stem("reply"), "repli" );
	deepEqual( Stem("replying"), "repli" );
	deepEqual( Stem("report"), "report" );
	deepEqual( Stem("reported"), "report" );
	deepEqual( Stem("reporter"), "report" );
	deepEqual( Stem("reportest"), "reportest" );
	deepEqual( Stem("reporting"), "report" );
	deepEqual( Stem("reportingly"), "reportingli" );
	deepEqual( Stem("reports"), "report" );
	deepEqual( Stem("reposal"), "repos" );
	deepEqual( Stem("repose"), "repos" );
	deepEqual( Stem("reposed"), "repos" );
	deepEqual( Stem("reposes"), "repos" );
	deepEqual( Stem("reposeth"), "reposeth" );
	deepEqual( Stem("reposing"), "repos" );
	deepEqual( Stem("repository"), "repositori" );
	deepEqual( Stem("repossess"), "repossess" );
	deepEqual( Stem("reprehend"), "reprehend" );
	deepEqual( Stem("reprehended"), "reprehend" );
	deepEqual( Stem("reprehending"), "reprehend" );
	deepEqual( Stem("represent"), "repres" );
	deepEqual( Stem("representations"), "represent" );
	deepEqual( Stem("representative"), "repres" );
	deepEqual( Stem("representatives"), "repres" );
	deepEqual( Stem("represented"), "repres" );
	deepEqual( Stem("representing"), "repres" );
	deepEqual( Stem("represents"), "repres" );
	deepEqual( Stem("reprieve"), "repriev" );
	deepEqual( Stem("reprieves"), "repriev" );
	deepEqual( Stem("reprint"), "reprint" );
	deepEqual( Stem("reprisal"), "repris" );
	deepEqual( Stem("reproach"), "reproach" );
	deepEqual( Stem("reproached"), "reproach" );
	deepEqual( Stem("reproaches"), "reproach" );
	deepEqual( Stem("reproachful"), "reproach" );
	deepEqual( Stem("reproachfully"), "reproachfulli" );
	deepEqual( Stem("reproaching"), "reproach" );
	deepEqual( Stem("reprobate"), "reprob" );
	deepEqual( Stem("reprobated"), "reprob" );
	deepEqual( Stem("reprobates"), "reprob" );
	deepEqual( Stem("reprobation"), "reprob" );
	deepEqual( Stem("reproof"), "reproof" );
	deepEqual( Stem("reprov"), "reprov" );
	deepEqual( Stem("reprove"), "reprov" );
	deepEqual( Stem("reproveable"), "reprov" );
	deepEqual( Stem("reproves"), "reprov" );
	deepEqual( Stem("reproving"), "reprov" );
	deepEqual( Stem("reprovingly"), "reprovingli" );
	deepEqual( Stem("republican"), "republican" );
	deepEqual( Stem("repudiating"), "repudi" );
	deepEqual( Stem("repugn"), "repugn" );
	deepEqual( Stem("repugnance"), "repugn" );
	deepEqual( Stem("repugnancy"), "repugn" );
	deepEqual( Stem("repugnant"), "repugn" );
	deepEqual( Stem("repulse"), "repuls" );
	deepEqual( Stem("repulsed"), "repuls" );
	deepEqual( Stem("repulsion"), "repuls" );
	deepEqual( Stem("repurchas"), "repurcha" );
	deepEqual( Stem("repurchase"), "repurchas" );
	deepEqual( Stem("repured"), "repur" );
	deepEqual( Stem("reputable"), "reput" );
	deepEqual( Stem("reputation"), "reput" );
	deepEqual( Stem("repute"), "reput" );
	deepEqual( Stem("reputed"), "reput" );
	deepEqual( Stem("reputeless"), "reputeless" );
	deepEqual( Stem("reputes"), "reput" );
	deepEqual( Stem("reputing"), "reput" );
	deepEqual( Stem("request"), "request" );
	deepEqual( Stem("requested"), "request" );
	deepEqual( Stem("requesting"), "request" );
	deepEqual( Stem("requests"), "request" );
	deepEqual( Stem("requiem"), "requiem" );
	deepEqual( Stem("requir"), "requir" );
	deepEqual( Stem("require"), "requir" );
	deepEqual( Stem("required"), "requir" );
	deepEqual( Stem("requires"), "requir" );
	deepEqual( Stem("requireth"), "requireth" );
	deepEqual( Stem("requiring"), "requir" );
	deepEqual( Stem("requisite"), "requisit" );
	deepEqual( Stem("requisites"), "requisit" );
	deepEqual( Stem("requisition"), "requisit" );
	deepEqual( Stem("requit"), "requit" );
	deepEqual( Stem("requital"), "requit" );
	deepEqual( Stem("requite"), "requit" );
	deepEqual( Stem("requited"), "requit" );
	deepEqual( Stem("requites"), "requit" );
	deepEqual( Stem("rer"), "rer" );
	deepEqual( Stem("rere"), "rere" );
	deepEqual( Stem("rers"), "rer" );
	deepEqual( Stem("rescu"), "rescu" );
	deepEqual( Stem("rescue"), "rescu" );
	deepEqual( Stem("rescued"), "rescu" );
	deepEqual( Stem("rescues"), "rescu" );
	deepEqual( Stem("rescuing"), "rescu" );
	deepEqual( Stem("researches"), "research" );
	deepEqual( Stem("resemblance"), "resembl" );
	deepEqual( Stem("resemblances"), "resembl" );
	deepEqual( Stem("resemble"), "resembl" );
	deepEqual( Stem("resembled"), "resembl" );
	deepEqual( Stem("resembles"), "resembl" );
	deepEqual( Stem("resembleth"), "resembleth" );
	deepEqual( Stem("resembling"), "resembl" );
	deepEqual( Stem("reserv"), "reserv" );
	deepEqual( Stem("reservation"), "reserv" );
	deepEqual( Stem("reserve"), "reserv" );
	deepEqual( Stem("reserved"), "reserv" );
	deepEqual( Stem("reserves"), "reserv" );
	deepEqual( Stem("reside"), "resid" );
	deepEqual( Stem("resided"), "resid" );
	deepEqual( Stem("residence"), "resid" );
	deepEqual( Stem("resident"), "resid" );
	deepEqual( Stem("residents"), "resid" );
	deepEqual( Stem("residenz"), "residenz" );
	deepEqual( Stem("resides"), "resid" );
	deepEqual( Stem("residing"), "resid" );
	deepEqual( Stem("residue"), "residu" );
	deepEqual( Stem("resign"), "resign" );
	deepEqual( Stem("resignation"), "resign" );
	deepEqual( Stem("resignations"), "resign" );
	deepEqual( Stem("resigned"), "resign" );
	deepEqual( Stem("resigning"), "resign" );
	deepEqual( Stem("resist"), "resist" );
	deepEqual( Stem("resistance"), "resist" );
	deepEqual( Stem("resisted"), "resist" );
	deepEqual( Stem("resisting"), "resist" );
	deepEqual( Stem("resists"), "resist" );
	deepEqual( Stem("resolute"), "resolut" );
	deepEqual( Stem("resolutely"), "resolut" );
	deepEqual( Stem("resolutes"), "resolut" );
	deepEqual( Stem("resolution"), "resolut" );
	deepEqual( Stem("resolutions"), "resolut" );
	deepEqual( Stem("resolv"), "resolv" );
	deepEqual( Stem("resolve"), "resolv" );
	deepEqual( Stem("resolved"), "resolv" );
	deepEqual( Stem("resolvedly"), "resolvedli" );
	deepEqual( Stem("resolves"), "resolv" );
	deepEqual( Stem("resolveth"), "resolveth" );
	deepEqual( Stem("resort"), "resort" );
	deepEqual( Stem("resorted"), "resort" );
	deepEqual( Stem("resounding"), "resound" );
	deepEqual( Stem("resounds"), "resound" );
	deepEqual( Stem("resource"), "resourc" );
	deepEqual( Stem("resources"), "resourc" );
	deepEqual( Stem("respeaking"), "respeak" );
	deepEqual( Stem("respect"), "respect" );
	deepEqual( Stem("respectable"), "respect" );
	deepEqual( Stem("respectably"), "respect" );
	deepEqual( Stem("respected"), "respect" );
	deepEqual( Stem("respectful"), "respect" );
	deepEqual( Stem("respectfully"), "respectfulli" );
	deepEqual( Stem("respecting"), "respect" );
	deepEqual( Stem("respective"), "respect" );
	deepEqual( Stem("respectively"), "respect" );
	deepEqual( Stem("respects"), "respect" );
	deepEqual( Stem("respice"), "respic" );
	deepEqual( Stem("respite"), "respit" );
	deepEqual( Stem("respites"), "respit" );
	deepEqual( Stem("resplendent"), "resplend" );
	deepEqual( Stem("responded"), "respond" );
	deepEqual( Stem("response"), "respons" );
	deepEqual( Stem("responsive"), "respons" );
	deepEqual( Stem("respose"), "respos" );
	deepEqual( Stem("ress"), "ress" );
	deepEqual( Stem("rest"), "rest" );
	deepEqual( Stem("restaurateur"), "restaurateur" );
	deepEqual( Stem("restaurateurs"), "restaurateur" );
	deepEqual( Stem("rested"), "rest" );
	deepEqual( Stem("resteth"), "resteth" );
	deepEqual( Stem("restful"), "rest" );
	deepEqual( Stem("resting"), "rest" );
	deepEqual( Stem("restitution"), "restitut" );
	deepEqual( Stem("restless"), "restless" );
	deepEqual( Stem("restlessly"), "restlessli" );
	deepEqual( Stem("restlessness"), "restless" );
	deepEqual( Stem("restor"), "restor" );
	deepEqual( Stem("restoration"), "restor" );
	deepEqual( Stem("restorative"), "restor" );
	deepEqual( Stem("restore"), "restor" );
	deepEqual( Stem("restored"), "restor" );
	deepEqual( Stem("restores"), "restor" );
	deepEqual( Stem("restoring"), "restor" );
	deepEqual( Stem("restrain"), "restrain" );
	deepEqual( Stem("restrained"), "restrain" );
	deepEqual( Stem("restraining"), "restrain" );
	deepEqual( Stem("restrains"), "restrain" );
	deepEqual( Stem("restraint"), "restraint" );
	deepEqual( Stem("rests"), "rest" );
	deepEqual( Stem("resty"), "resti" );
	deepEqual( Stem("result"), "result" );
	deepEqual( Stem("resulted"), "result" );
	deepEqual( Stem("resulting"), "result" );
	deepEqual( Stem("results"), "result" );
	deepEqual( Stem("resum"), "resum" );
	deepEqual( Stem("resume"), "resum" );
	deepEqual( Stem("resumed"), "resum" );
	deepEqual( Stem("resumes"), "resum" );
	deepEqual( Stem("resuming"), "resum" );
	deepEqual( Stem("resurgam"), "resurgam" );
	deepEqual( Stem("resurrections"), "resurrect" );
	deepEqual( Stem("retail"), "retail" );
	deepEqual( Stem("retails"), "retail" );
	deepEqual( Stem("retain"), "retain" );
	deepEqual( Stem("retained"), "retain" );
	deepEqual( Stem("retainer"), "retain" );
	deepEqual( Stem("retainers"), "retain" );
	deepEqual( Stem("retaining"), "retain" );
	deepEqual( Stem("retell"), "retel" );
	deepEqual( Stem("retention"), "retent" );
	deepEqual( Stem("retentive"), "retent" );
	deepEqual( Stem("retenue"), "retenu" );
	deepEqual( Stem("reticule"), "reticul" );
	deepEqual( Stem("reticules"), "reticul" );
	deepEqual( Stem("retinue"), "retinu" );
	deepEqual( Stem("retir"), "retir" );
	deepEqual( Stem("retire"), "retir" );
	deepEqual( Stem("retired"), "retir" );
	deepEqual( Stem("retirement"), "retir" );
	deepEqual( Stem("retires"), "retir" );
	deepEqual( Stem("retiring"), "retir" );
	deepEqual( Stem("retold"), "retold" );
	deepEqual( Stem("retort"), "retort" );
	deepEqual( Stem("retorts"), "retort" );
	deepEqual( Stem("retour"), "retour" );
	deepEqual( Stem("retourne"), "retourn" );
	deepEqual( Stem("retract"), "retract" );
	deepEqual( Stem("retracted"), "retract" );
	deepEqual( Stem("retreat"), "retreat" );
	deepEqual( Stem("retreated"), "retreat" );
	deepEqual( Stem("retreating"), "retreat" );
	deepEqual( Stem("retrench"), "retrench" );
	deepEqual( Stem("retrenchment"), "retrench" );
	deepEqual( Stem("retrieve"), "retriev" );
	deepEqual( Stem("retrograde"), "retrograd" );
	deepEqual( Stem("rets"), "ret" );
	deepEqual( Stem("return"), "return" );
	deepEqual( Stem("returned"), "return" );
	deepEqual( Stem("returnest"), "returnest" );
	deepEqual( Stem("returneth"), "returneth" );
	deepEqual( Stem("returning"), "return" );
	deepEqual( Stem("returns"), "return" );
	deepEqual( Stem("reunion"), "reunion" );
	deepEqual( Stem("reunions"), "reunion" );
	deepEqual( Stem("rev"), "rev" );
	deepEqual( Stem("revania"), "revania" );
	deepEqual( Stem("reveal"), "reveal" );
	deepEqual( Stem("revealed"), "reveal" );
	deepEqual( Stem("reveals"), "reveal" );
	deepEqual( Stem("revel"), "revel" );
	deepEqual( Stem("revelations"), "revel" );
	deepEqual( Stem("reveler"), "revel" );
	deepEqual( Stem("revell"), "revel" );
	deepEqual( Stem("revelled"), "revel" );
	deepEqual( Stem("reveller"), "revel" );
	deepEqual( Stem("revellers"), "revel" );
	deepEqual( Stem("revelling"), "revel" );
	deepEqual( Stem("revelry"), "revelri" );
	deepEqual( Stem("revels"), "revel" );
	deepEqual( Stem("reveng"), "reveng" );
	deepEqual( Stem("revenge"), "reveng" );
	deepEqual( Stem("revenged"), "reveng" );
	deepEqual( Stem("revengeful"), "reveng" );
	deepEqual( Stem("revengement"), "reveng" );
	deepEqual( Stem("revenger"), "reveng" );
	deepEqual( Stem("revengers"), "reveng" );
	deepEqual( Stem("revenges"), "reveng" );
	deepEqual( Stem("revenging"), "reveng" );
	deepEqual( Stem("revengingly"), "revengingli" );
	deepEqual( Stem("revenue"), "revenu" );
	deepEqual( Stem("revenues"), "revenu" );
	deepEqual( Stem("reverb"), "reverb" );
	deepEqual( Stem("reverberate"), "reverber" );
	deepEqual( Stem("reverbs"), "reverb" );
	deepEqual( Stem("revered"), "rever" );
	deepEqual( Stem("reverenc"), "reverenc" );
	deepEqual( Stem("reverence"), "rever" );
	deepEqual( Stem("reverend"), "reverend" );
	deepEqual( Stem("reverent"), "rever" );
	deepEqual( Stem("reverential"), "reverenti" );
	deepEqual( Stem("reverentially"), "reverenti" );
	deepEqual( Stem("reverently"), "rever" );
	deepEqual( Stem("reverie"), "reveri" );
	deepEqual( Stem("revers"), "rever" );
	deepEqual( Stem("reverse"), "revers" );
	deepEqual( Stem("reverses"), "revers" );
	deepEqual( Stem("reversion"), "revers" );
	deepEqual( Stem("reversionary"), "reversionari" );
	deepEqual( Stem("reverted"), "revert" );
	deepEqual( Stem("review"), "review" );
	deepEqual( Stem("reviewed"), "review" );
	deepEqual( Stem("reviewest"), "reviewest" );
	deepEqual( Stem("reviewing"), "review" );
	deepEqual( Stem("revil"), "revil" );
	deepEqual( Stem("revile"), "revil" );
	deepEqual( Stem("reviles"), "revil" );
	deepEqual( Stem("reviling"), "revil" );
	deepEqual( Stem("revisited"), "revisit" );
	deepEqual( Stem("revisiting"), "revisit" );
	deepEqual( Stem("revisits"), "revisit" );
	deepEqual( Stem("reviv"), "reviv" );
	deepEqual( Stem("revive"), "reviv" );
	deepEqual( Stem("revives"), "reviv" );
	deepEqual( Stem("reviving"), "reviv" );
	deepEqual( Stem("revoir"), "revoir" );
	deepEqual( Stem("revok"), "revok" );
	deepEqual( Stem("revoke"), "revok" );
	deepEqual( Stem("revoked"), "revok" );
	deepEqual( Stem("revokement"), "revok" );
	deepEqual( Stem("revolt"), "revolt" );
	deepEqual( Stem("revolted"), "revolt" );
	deepEqual( Stem("revolting"), "revolt" );
	deepEqual( Stem("revolts"), "revolt" );
	deepEqual( Stem("revolution"), "revolut" );
	deepEqual( Stem("revolutionary"), "revolutionari" );
	deepEqual( Stem("revolutions"), "revolut" );
	deepEqual( Stem("revolve"), "revolv" );
	deepEqual( Stem("revolving"), "revolv" );
	deepEqual( Stem("reward"), "reward" );
	deepEqual( Stem("rewarded"), "reward" );
	deepEqual( Stem("rewarder"), "reward" );
	deepEqual( Stem("rewarding"), "reward" );
	deepEqual( Stem("rewards"), "reward" );
	deepEqual( Stem("reword"), "reword" );
	deepEqual( Stem("reworded"), "reword" );
	deepEqual( Stem("rex"), "rex" );
	deepEqual( Stem("rey"), "rei" );
	deepEqual( Stem("reynaldo"), "reynaldo" );
	deepEqual( Stem("reynolds"), "reynold" );
	deepEqual( Stem("rford"), "rford" );
	deepEqual( Stem("rful"), "rful" );
	deepEqual( Stem("rfull"), "rfull" );
	deepEqual( Stem("rhapsody"), "rhapsodi" );
	deepEqual( Stem("rheims"), "rheim" );
	deepEqual( Stem("rhein"), "rhein" );
	deepEqual( Stem("rhenish"), "rhenish" );
	deepEqual( Stem("rhesus"), "rhesu" );
	deepEqual( Stem("rhetoric"), "rhetor" );
	deepEqual( Stem("rheum"), "rheum" );
	deepEqual( Stem("rheumatic"), "rheumat" );
	deepEqual( Stem("rheumatisms"), "rheumat" );
	deepEqual( Stem("rheums"), "rheum" );
	deepEqual( Stem("rheumy"), "rheumi" );
	deepEqual( Stem("rhine"), "rhine" );
	deepEqual( Stem("rhineland"), "rhineland" );
	deepEqual( Stem("rhinoceros"), "rhinocero" );
	deepEqual( Stem("rhoda"), "rhoda" );
	deepEqual( Stem("rhodes"), "rhode" );
	deepEqual( Stem("rhodope"), "rhodop" );
	deepEqual( Stem("rhubarb"), "rhubarb" );
	deepEqual( Stem("rhym"), "rhym" );
	deepEqual( Stem("rhyme"), "rhyme" );
	deepEqual( Stem("rhymers"), "rhymer" );
	deepEqual( Stem("rhymes"), "rhyme" );
	deepEqual( Stem("rhyming"), "rhyme" );
	deepEqual( Stem("rialto"), "rialto" );
	deepEqual( Stem("rib"), "rib" );
	deepEqual( Stem("ribald"), "ribald" );
	deepEqual( Stem("ribaldry"), "ribaldri" );
	deepEqual( Stem("riband"), "riband" );
	deepEqual( Stem("ribands"), "riband" );
	deepEqual( Stem("ribaudred"), "ribaudr" );
	deepEqual( Stem("ribb"), "ribb" );
	deepEqual( Stem("ribbed"), "rib" );
	deepEqual( Stem("ribbing"), "rib" );
	deepEqual( Stem("ribbon"), "ribbon" );
	deepEqual( Stem("ribbons"), "ribbon" );
	deepEqual( Stem("ribs"), "rib" );
	deepEqual( Stem("rice"), "rice" );
	deepEqual( Stem("rich"), "rich" );
	deepEqual( Stem("richard"), "richard" );
	deepEqual( Stem("richemont"), "richemont" );
	deepEqual( Stem("richer"), "richer" );
	deepEqual( Stem("riches"), "rich" );
	deepEqual( Stem("richest"), "richest" );
	deepEqual( Stem("richly"), "richli" );
	deepEqual( Stem("richmond"), "richmond" );
	deepEqual( Stem("richmonds"), "richmond" );
	deepEqual( Stem("richness"), "rich" );
	deepEqual( Stem("ricketts"), "rickett" );
	deepEqual( Stem("rickety"), "ricketi" );
	deepEqual( Stem("rid"), "rid" );
	deepEqual( Stem("riddance"), "riddanc" );
	deepEqual( Stem("ridden"), "ridden" );
	deepEqual( Stem("ridding"), "rid" );
	deepEqual( Stem("riddle"), "riddl" );
	deepEqual( Stem("riddled"), "riddl" );
	deepEqual( Stem("riddles"), "riddl" );
	deepEqual( Stem("riddling"), "riddl" );
	deepEqual( Stem("ride"), "ride" );
	deepEqual( Stem("rider"), "rider" );
	deepEqual( Stem("riders"), "rider" );
	deepEqual( Stem("rides"), "ride" );
	deepEqual( Stem("ridest"), "ridest" );
	deepEqual( Stem("rideth"), "rideth" );
	deepEqual( Stem("ridge"), "ridg" );
	deepEqual( Stem("ridges"), "ridg" );
	deepEqual( Stem("ridicule"), "ridicul" );
	deepEqual( Stem("ridiculed"), "ridicul" );
	deepEqual( Stem("ridiculous"), "ridicul" );
	deepEqual( Stem("riding"), "ride" );
	deepEqual( Stem("rids"), "rid" );
	deepEqual( Stem("rien"), "rien" );
	deepEqual( Stem("ries"), "ri" );
	deepEqual( Stem("rifle"), "rifl" );
	deepEqual( Stem("rifles"), "rifl" );
	deepEqual( Stem("rift"), "rift" );
	deepEqual( Stem("rifted"), "rift" );
	deepEqual( Stem("rig"), "rig" );
	deepEqual( Stem("rigg"), "rigg" );
	deepEqual( Stem("riggish"), "riggish" );
	deepEqual( Stem("right"), "right" );
	deepEqual( Stem("righteous"), "righteou" );
	deepEqual( Stem("righteously"), "righteous" );
	deepEqual( Stem("rightful"), "right" );
	deepEqual( Stem("rightfully"), "rightfulli" );
	deepEqual( Stem("rightly"), "rightli" );
	deepEqual( Stem("rights"), "right" );
	deepEqual( Stem("rigid"), "rigid" );
	deepEqual( Stem("rigidly"), "rigidli" );
	deepEqual( Stem("rigol"), "rigol" );
	deepEqual( Stem("rigorous"), "rigor" );
	deepEqual( Stem("rigorously"), "rigor" );
	deepEqual( Stem("rigour"), "rigour" );
	deepEqual( Stem("ril"), "ril" );
	deepEqual( Stem("rim"), "rim" );
	deepEqual( Stem("rin"), "rin" );
	deepEqual( Stem("rinaldo"), "rinaldo" );
	deepEqual( Stem("rince"), "rinc" );
	deepEqual( Stem("rincer"), "rincer" );
	deepEqual( Stem("rind"), "rind" );
	deepEqual( Stem("ring"), "ring" );
	deepEqual( Stem("ringing"), "ring" );
	deepEqual( Stem("ringleader"), "ringlead" );
	deepEqual( Stem("ringlet"), "ringlet" );
	deepEqual( Stem("ringlets"), "ringlet" );
	deepEqual( Stem("rings"), "ring" );
	deepEqual( Stem("ringwood"), "ringwood" );
	deepEqual( Stem("rio"), "rio" );
	deepEqual( Stem("riot"), "riot" );
	deepEqual( Stem("rioter"), "rioter" );
	deepEqual( Stem("rioting"), "riot" );
	deepEqual( Stem("riotous"), "riotou" );
	deepEqual( Stem("riots"), "riot" );
	deepEqual( Stem("rip"), "rip" );
	deepEqual( Stem("ripe"), "ripe" );
	deepEqual( Stem("ripely"), "ripe" );
	deepEqual( Stem("ripen"), "ripen" );
	deepEqual( Stem("ripened"), "ripen" );
	deepEqual( Stem("ripeness"), "ripe" );
	deepEqual( Stem("ripening"), "ripen" );
	deepEqual( Stem("ripens"), "ripen" );
	deepEqual( Stem("riper"), "riper" );
	deepEqual( Stem("ripest"), "ripest" );
	deepEqual( Stem("riping"), "ripe" );
	deepEqual( Stem("riposted"), "ripost" );
	deepEqual( Stem("ripp"), "ripp" );
	deepEqual( Stem("ripping"), "rip" );
	deepEqual( Stem("ris"), "ri" );
	deepEqual( Stem("rise"), "rise" );
	deepEqual( Stem("risen"), "risen" );
	deepEqual( Stem("rises"), "rise" );
	deepEqual( Stem("riseth"), "riseth" );
	deepEqual( Stem("rish"), "rish" );
	deepEqual( Stem("rising"), "rise" );
	deepEqual( Stem("risk"), "risk" );
	deepEqual( Stem("rite"), "rite" );
	deepEqual( Stem("rites"), "rite" );
	deepEqual( Stem("rivage"), "rivag" );
	deepEqual( Stem("rival"), "rival" );
	deepEqual( Stem("rivality"), "rival" );
	deepEqual( Stem("rivall"), "rival" );
	deepEqual( Stem("rivalry"), "rivalri" );
	deepEqual( Stem("rivals"), "rival" );
	deepEqual( Stem("rive"), "rive" );
	deepEqual( Stem("rived"), "rive" );
	deepEqual( Stem("rivelled"), "rivel" );
	deepEqual( Stem("river"), "river" );
	deepEqual( Stem("rivers"), "river" );
	deepEqual( Stem("rivet"), "rivet" );
	deepEqual( Stem("riveted"), "rivet" );
	deepEqual( Stem("rivets"), "rivet" );
	deepEqual( Stem("rivo"), "rivo" );
	deepEqual( Stem("rj"), "rj" );
	deepEqual( Stem("rless"), "rless" );
	deepEqual( Stem("road"), "road" );
	deepEqual( Stem("roads"), "road" );
	deepEqual( Stem("roadside"), "roadsid" );
	deepEqual( Stem("roam"), "roam" );
	deepEqual( Stem("roaming"), "roam" );
	deepEqual( Stem("roan"), "roan" );
	deepEqual( Stem("roar"), "roar" );
	deepEqual( Stem("roared"), "roar" );
	deepEqual( Stem("roarers"), "roarer" );
	deepEqual( Stem("roaring"), "roar" );
	deepEqual( Stem("roars"), "roar" );
	deepEqual( Stem("roast"), "roast" );
	deepEqual( Stem("roasted"), "roast" );
	deepEqual( Stem("rob"), "rob" );
	deepEqual( Stem("roba"), "roba" );
	deepEqual( Stem("robas"), "roba" );
	deepEqual( Stem("robb"), "robb" );
	deepEqual( Stem("robbed"), "rob" );
	deepEqual( Stem("robber"), "robber" );
	deepEqual( Stem("robbers"), "robber" );
	deepEqual( Stem("robbery"), "robberi" );
	deepEqual( Stem("robbing"), "rob" );
	deepEqual( Stem("robe"), "robe" );
	deepEqual( Stem("robed"), "robe" );
	deepEqual( Stem("robert"), "robert" );
	deepEqual( Stem("robes"), "robe" );
	deepEqual( Stem("robin"), "robin" );
	deepEqual( Stem("robins"), "robin" );
	deepEqual( Stem("robinson"), "robinson" );
	deepEqual( Stem("robs"), "rob" );
	deepEqual( Stem("robust"), "robust" );
	deepEqual( Stem("robustious"), "robusti" );
	deepEqual( Stem("roc"), "roc" );
	deepEqual( Stem("rochester"), "rochest" );
	deepEqual( Stem("rochford"), "rochford" );
	deepEqual( Stem("rock"), "rock" );
	deepEqual( Stem("rocked"), "rock" );
	deepEqual( Stem("rocket"), "rocket" );
	deepEqual( Stem("rocking"), "rock" );
	deepEqual( Stem("rocks"), "rock" );
	deepEqual( Stem("rockwood"), "rockwood" );
	deepEqual( Stem("rocky"), "rocki" );
	deepEqual( Stem("rod"), "rod" );
	deepEqual( Stem("rode"), "rode" );
	deepEqual( Stem("roderigo"), "roderigo" );
	deepEqual( Stem("rodgers"), "rodger" );
	deepEqual( Stem("rods"), "rod" );
	deepEqual( Stem("roe"), "roe" );
	deepEqual( Stem("roehampton"), "roehampton" );
	deepEqual( Stem("roes"), "roe" );
	deepEqual( Stem("roger"), "roger" );
	deepEqual( Stem("rogero"), "rogero" );
	deepEqual( Stem("rogue"), "rogu" );
	deepEqual( Stem("rogueries"), "rogueri" );
	deepEqual( Stem("roguery"), "rogueri" );
	deepEqual( Stem("rogues"), "rogu" );
	deepEqual( Stem("roguish"), "roguish" );
	deepEqual( Stem("roguishly"), "roguishli" );
	deepEqual( Stem("roi"), "roi" );
	deepEqual( Stem("roisting"), "roist" );
	deepEqual( Stem("roll"), "roll" );
	deepEqual( Stem("rolle"), "roll" );
	deepEqual( Stem("rolled"), "roll" );
	deepEqual( Stem("rolling"), "roll" );
	deepEqual( Stem("rolls"), "roll" );
	deepEqual( Stem("rom"), "rom" );
	deepEqual( Stem("romage"), "romag" );
	deepEqual( Stem("roman"), "roman" );
	deepEqual( Stem("romance"), "romanc" );
	deepEqual( Stem("romancer"), "romanc" );
	deepEqual( Stem("romances"), "romanc" );
	deepEqual( Stem("romano"), "romano" );
	deepEqual( Stem("romanos"), "romano" );
	deepEqual( Stem("romans"), "roman" );
	deepEqual( Stem("romantic"), "romant" );
	deepEqual( Stem("romantically"), "romant" );
	deepEqual( Stem("rome"), "rome" );
	deepEqual( Stem("romeo"), "romeo" );
	deepEqual( Stem("romish"), "romish" );
	deepEqual( Stem("rondure"), "rondur" );
	deepEqual( Stem("ronyon"), "ronyon" );
	deepEqual( Stem("ronzi"), "ronzi" );
	deepEqual( Stem("roo"), "roo" );
	deepEqual( Stem("rood"), "rood" );
	deepEqual( Stem("roof"), "roof" );
	deepEqual( Stem("roofs"), "roof" );
	deepEqual( Stem("rook"), "rook" );
	deepEqual( Stem("rooks"), "rook" );
	deepEqual( Stem("rooky"), "rooki" );
	deepEqual( Stem("room"), "room" );
	deepEqual( Stem("rooms"), "room" );
	deepEqual( Stem("rooshian"), "rooshian" );
	deepEqual( Stem("rooshians"), "rooshian" );
	deepEqual( Stem("root"), "root" );
	deepEqual( Stem("rooted"), "root" );
	deepEqual( Stem("rootedly"), "rootedli" );
	deepEqual( Stem("rooteth"), "rooteth" );
	deepEqual( Stem("rooting"), "root" );
	deepEqual( Stem("roots"), "root" );
	deepEqual( Stem("rope"), "rope" );
	deepEqual( Stem("roper"), "roper" );
	deepEqual( Stem("ropery"), "roperi" );
	deepEqual( Stem("ropes"), "rope" );
	deepEqual( Stem("roping"), "rope" );
	deepEqual( Stem("ros"), "ro" );
	deepEqual( Stem("rosa"), "rosa" );
	deepEqual( Stem("rosalind"), "rosalind" );
	deepEqual( Stem("rosalinda"), "rosalinda" );
	deepEqual( Stem("rosalinde"), "rosalind" );
	deepEqual( Stem("rosaline"), "rosalin" );
	deepEqual( Stem("rosamond"), "rosamond" );
	deepEqual( Stem("roscius"), "rosciu" );
	deepEqual( Stem("rose"), "rose" );
	deepEqual( Stem("roseate"), "roseat" );
	deepEqual( Stem("rosed"), "rose" );
	deepEqual( Stem("rosemary"), "rosemari" );
	deepEqual( Stem("rosencrantz"), "rosencrantz" );
	deepEqual( Stem("roses"), "rose" );
	deepEqual( Stem("rosewood"), "rosewood" );
	deepEqual( Stem("rosina"), "rosina" );
	deepEqual( Stem("ross"), "ross" );
	deepEqual( Stem("rossignol"), "rossignol" );
	deepEqual( Stem("rosy"), "rosi" );
	deepEqual( Stem("rot"), "rot" );
	deepEqual( Stem("rote"), "rote" );
	deepEqual( Stem("roted"), "rote" );
	deepEqual( Stem("rother"), "rother" );
	deepEqual( Stem("rotherham"), "rotherham" );
	deepEqual( Stem("rothschild"), "rothschild" );
	deepEqual( Stem("rots"), "rot" );
	deepEqual( Stem("rotted"), "rot" );
	deepEqual( Stem("rotten"), "rotten" );
	deepEqual( Stem("rottenness"), "rotten" );
	deepEqual( Stem("rotterdam"), "rotterdam" );
	deepEqual( Stem("rotting"), "rot" );
	deepEqual( Stem("rottingdean"), "rottingdean" );
	deepEqual( Stem("rotundity"), "rotund" );
	deepEqual( Stem("rouen"), "rouen" );
	deepEqual( Stem("roues"), "roue" );
	deepEqual( Stem("rouge"), "roug" );
	deepEqual( Stem("rouged"), "roug" );
	deepEqual( Stem("rougemont"), "rougemont" );
	deepEqual( Stem("rough"), "rough" );
	deepEqual( Stem("rougher"), "rougher" );
	deepEqual( Stem("roughest"), "roughest" );
	deepEqual( Stem("roughly"), "roughli" );
	deepEqual( Stem("roughness"), "rough" );
	deepEqual( Stem("roulette"), "roulett" );
	deepEqual( Stem("round"), "round" );
	deepEqual( Stem("rounded"), "round" );
	deepEqual( Stem("roundel"), "roundel" );
	deepEqual( Stem("rounder"), "rounder" );
	deepEqual( Stem("roundest"), "roundest" );
	deepEqual( Stem("rounding"), "round" );
	deepEqual( Stem("roundly"), "roundli" );
	deepEqual( Stem("rounds"), "round" );
	deepEqual( Stem("roundure"), "roundur" );
	deepEqual( Stem("rous"), "rou" );
	deepEqual( Stem("rouse"), "rous" );
	deepEqual( Stem("roused"), "rous" );
	deepEqual( Stem("rousillon"), "rousillon" );
	deepEqual( Stem("rously"), "rousli" );
	deepEqual( Stem("rousseau"), "rousseau" );
	deepEqual( Stem("roussi"), "roussi" );
	deepEqual( Stem("rout"), "rout" );
	deepEqual( Stem("route"), "rout" );
	deepEqual( Stem("routed"), "rout" );
	deepEqual( Stem("routine"), "routin" );
	deepEqual( Stem("routs"), "rout" );
	deepEqual( Stem("rove"), "rove" );
	deepEqual( Stem("rover"), "rover" );
	deepEqual( Stem("roving"), "rove" );
	deepEqual( Stem("row"), "row" );
	deepEqual( Stem("rowdy"), "rowdi" );
	deepEqual( Stem("rowel"), "rowel" );
	deepEqual( Stem("rowland"), "rowland" );
	deepEqual( Stem("rowlands"), "rowland" );
	deepEqual( Stem("rowls"), "rowl" );
	deepEqual( Stem("rows"), "row" );
	deepEqual( Stem("rowson"), "rowson" );
	deepEqual( Stem("roxby"), "roxbi" );
	deepEqual( Stem("roy"), "roi" );
	deepEqual( Stem("royal"), "royal" );
	deepEqual( Stem("royale"), "royal" );
	deepEqual( Stem("royalist"), "royalist" );
	deepEqual( Stem("royalize"), "royal" );
	deepEqual( Stem("royally"), "royal" );
	deepEqual( Stem("royalties"), "royalti" );
	deepEqual( Stem("royalty"), "royalti" );
	deepEqual( Stem("roynish"), "roynish" );
	deepEqual( Stem("rs"), "r" );
	deepEqual( Stem("rt"), "rt" );
	deepEqual( Stem("rub"), "rub" );
	deepEqual( Stem("rubb"), "rubb" );
	deepEqual( Stem("rubbed"), "rub" );
	deepEqual( Stem("rubber"), "rubber" );
	deepEqual( Stem("rubbers"), "rubber" );
	deepEqual( Stem("rubbing"), "rub" );
	deepEqual( Stem("rubbish"), "rubbish" );
	deepEqual( Stem("rubies"), "rubi" );
	deepEqual( Stem("rubious"), "rubiou" );
	deepEqual( Stem("rubs"), "rub" );
	deepEqual( Stem("ruby"), "rubi" );
	deepEqual( Stem("rud"), "rud" );
	deepEqual( Stem("rudand"), "rudand" );
	deepEqual( Stem("rudder"), "rudder" );
	deepEqual( Stem("ruddiness"), "ruddi" );
	deepEqual( Stem("ruddock"), "ruddock" );
	deepEqual( Stem("ruddy"), "ruddi" );
	deepEqual( Stem("rude"), "rude" );
	deepEqual( Stem("rudely"), "rude" );
	deepEqual( Stem("rudeness"), "rude" );
	deepEqual( Stem("ruder"), "ruder" );
	deepEqual( Stem("rudesby"), "rudesbi" );
	deepEqual( Stem("rudest"), "rudest" );
	deepEqual( Stem("rudge"), "rudg" );
	deepEqual( Stem("rudiments"), "rudiment" );
	deepEqual( Stem("rue"), "rue" );
	deepEqual( Stem("rued"), "ru" );
	deepEqual( Stem("rueful"), "rueful" );
	deepEqual( Stem("ruefully"), "ruefulli" );
	deepEqual( Stem("ruff"), "ruff" );
	deepEqual( Stem("ruffian"), "ruffian" );
	deepEqual( Stem("ruffians"), "ruffian" );
	deepEqual( Stem("ruffle"), "ruffl" );
	deepEqual( Stem("ruffles"), "ruffl" );
	deepEqual( Stem("ruffling"), "ruffl" );
	deepEqual( Stem("ruffs"), "ruff" );
	deepEqual( Stem("rug"), "rug" );
	deepEqual( Stem("rugby"), "rugbi" );
	deepEqual( Stem("rugemount"), "rugemount" );
	deepEqual( Stem("rugged"), "rug" );
	deepEqual( Stem("ruin"), "ruin" );
	deepEqual( Stem("ruinate"), "ruinat" );
	deepEqual( Stem("ruined"), "ruin" );
	deepEqual( Stem("ruing"), "ru" );
	deepEqual( Stem("ruining"), "ruin" );
	deepEqual( Stem("ruinous"), "ruinou" );
	deepEqual( Stem("ruins"), "ruin" );
	deepEqual( Stem("rul"), "rul" );
	deepEqual( Stem("rule"), "rule" );
	deepEqual( Stem("ruled"), "rule" );
	deepEqual( Stem("ruler"), "ruler" );
	deepEqual( Stem("rulers"), "ruler" );
	deepEqual( Stem("rules"), "rule" );
	deepEqual( Stem("ruling"), "rule" );
	deepEqual( Stem("rum"), "rum" );
	deepEqual( Stem("rumble"), "rumbl" );
	deepEqual( Stem("ruminaies"), "ruminai" );
	deepEqual( Stem("ruminat"), "ruminat" );
	deepEqual( Stem("ruminate"), "rumin" );
	deepEqual( Stem("ruminated"), "rumin" );
	deepEqual( Stem("ruminates"), "rumin" );
	deepEqual( Stem("rumination"), "rumin" );
	deepEqual( Stem("rummage"), "rummag" );
	deepEqual( Stem("rummaging"), "rummag" );
	deepEqual( Stem("rumor"), "rumor" );
	deepEqual( Stem("rumour"), "rumour" );
	deepEqual( Stem("rumourer"), "rumour" );
	deepEqual( Stem("rumours"), "rumour" );
	deepEqual( Stem("rump"), "rump" );
	deepEqual( Stem("run"), "run" );
	deepEqual( Stem("runagate"), "runag" );
	deepEqual( Stem("runagates"), "runag" );
	deepEqual( Stem("runaway"), "runawai" );
	deepEqual( Stem("runaways"), "runawai" );
	deepEqual( Stem("rundell"), "rundel" );
	deepEqual( Stem("rung"), "rung" );
	deepEqual( Stem("runn"), "runn" );
	deepEqual( Stem("runner"), "runner" );
	deepEqual( Stem("runners"), "runner" );
	deepEqual( Stem("running"), "run" );
	deepEqual( Stem("runs"), "run" );
	deepEqual( Stem("rupees"), "rupe" );
	deepEqual( Stem("rupture"), "ruptur" );
	deepEqual( Stem("ruptures"), "ruptur" );
	deepEqual( Stem("rural"), "rural" );
	deepEqual( Stem("rush"), "rush" );
	deepEqual( Stem("rushed"), "rush" );
	deepEqual( Stem("rushes"), "rush" );
	deepEqual( Stem("rushing"), "rush" );
	deepEqual( Stem("rushlight"), "rushlight" );
	deepEqual( Stem("rushling"), "rushl" );
	deepEqual( Stem("rushy"), "rushi" );
	deepEqual( Stem("russell"), "russel" );
	deepEqual( Stem("russet"), "russet" );
	deepEqual( Stem("russia"), "russia" );
	deepEqual( Stem("russian"), "russian" );
	deepEqual( Stem("russians"), "russian" );
	deepEqual( Stem("rust"), "rust" );
	deepEqual( Stem("rusted"), "rust" );
	deepEqual( Stem("rustic"), "rustic" );
	deepEqual( Stem("rustically"), "rustic" );
	deepEqual( Stem("rusticated"), "rustic" );
	deepEqual( Stem("rustics"), "rustic" );
	deepEqual( Stem("rustle"), "rustl" );
	deepEqual( Stem("rustling"), "rustl" );
	deepEqual( Stem("rusts"), "rust" );
	deepEqual( Stem("rusty"), "rusti" );
	deepEqual( Stem("rut"), "rut" );
	deepEqual( Stem("ruth"), "ruth" );
	deepEqual( Stem("ruthful"), "ruth" );
	deepEqual( Stem("ruthless"), "ruthless" );
	deepEqual( Stem("rutland"), "rutland" );
	deepEqual( Stem("ruttish"), "ruttish" );
	deepEqual( Stem("ry"), "ry" );
	deepEqual( Stem("rye"), "rye" );
	deepEqual( Stem("rything"), "ryth" );
	deepEqual( Stem("s"), "" );
	deepEqual( Stem("sa"), "sa" );
	deepEqual( Stem("saba"), "saba" );
	deepEqual( Stem("sabbath"), "sabbath" );
	deepEqual( Stem("sable"), "sabl" );
	deepEqual( Stem("sables"), "sabl" );
	deepEqual( Stem("sabre"), "sabr" );
	deepEqual( Stem("sack"), "sack" );
	deepEqual( Stem("sackbuts"), "sackbut" );
	deepEqual( Stem("sackcloth"), "sackcloth" );
	deepEqual( Stem("sacked"), "sack" );
	deepEqual( Stem("sackerson"), "sackerson" );
	deepEqual( Stem("sacks"), "sack" );
	deepEqual( Stem("sacrament"), "sacrament" );
	deepEqual( Stem("sacre"), "sacr" );
	deepEqual( Stem("sacred"), "sacr" );
	deepEqual( Stem("sacredness"), "sacred" );
	deepEqual( Stem("sacrific"), "sacrif" );
	deepEqual( Stem("sacrifice"), "sacrific" );
	deepEqual( Stem("sacrificed"), "sacrif" );
	deepEqual( Stem("sacrificers"), "sacrific" );
	deepEqual( Stem("sacrifices"), "sacrific" );
	deepEqual( Stem("sacrificial"), "sacrifici" );
	deepEqual( Stem("sacrificing"), "sacrif" );
	deepEqual( Stem("sacrilegious"), "sacrilegi" );
	deepEqual( Stem("sacring"), "sacr" );
	deepEqual( Stem("sad"), "sad" );
	deepEqual( Stem("sadder"), "sadder" );
	deepEqual( Stem("saddest"), "saddest" );
	deepEqual( Stem("saddle"), "saddl" );
	deepEqual( Stem("saddled"), "saddl" );
	deepEqual( Stem("saddler"), "saddler" );
	deepEqual( Stem("saddles"), "saddl" );
	deepEqual( Stem("sadler"), "sadler" );
	deepEqual( Stem("sadly"), "sadli" );
	deepEqual( Stem("sadness"), "sad" );
	deepEqual( Stem("saf"), "saf" );
	deepEqual( Stem("safe"), "safe" );
	deepEqual( Stem("safeguard"), "safeguard" );
	deepEqual( Stem("safely"), "safe" );
	deepEqual( Stem("safer"), "safer" );
	deepEqual( Stem("safest"), "safest" );
	deepEqual( Stem("safeties"), "safeti" );
	deepEqual( Stem("safety"), "safeti" );
	deepEqual( Stem("saffron"), "saffron" );
	deepEqual( Stem("sag"), "sag" );
	deepEqual( Stem("sagaciously"), "sagaci" );
	deepEqual( Stem("sage"), "sage" );
	deepEqual( Stem("sagittary"), "sagittari" );
	deepEqual( Stem("sahib"), "sahib" );
	deepEqual( Stem("said"), "said" );
	deepEqual( Stem("saidst"), "saidst" );
	deepEqual( Stem("sail"), "sail" );
	deepEqual( Stem("sailed"), "sail" );
	deepEqual( Stem("sailing"), "sail" );
	deepEqual( Stem("sailmaker"), "sailmak" );
	deepEqual( Stem("sailor"), "sailor" );
	deepEqual( Stem("sailors"), "sailor" );
	deepEqual( Stem("sails"), "sail" );
	deepEqual( Stem("sain"), "sain" );
	deepEqual( Stem("saint"), "saint" );
	deepEqual( Stem("sainte"), "saint" );
	deepEqual( Stem("sainted"), "saint" );
	deepEqual( Stem("saintlike"), "saintlik" );
	deepEqual( Stem("saints"), "saint" );
	deepEqual( Stem("saith"), "saith" );
	deepEqual( Stem("sake"), "sake" );
	deepEqual( Stem("sakes"), "sake" );
	deepEqual( Stem("sala"), "sala" );
	deepEqual( Stem("salaam"), "salaam" );
	deepEqual( Stem("salad"), "salad" );
	deepEqual( Stem("salamanca"), "salamanca" );
	deepEqual( Stem("salamander"), "salamand" );
	deepEqual( Stem("salary"), "salari" );
	deepEqual( Stem("sale"), "sale" );
	deepEqual( Stem("salerio"), "salerio" );
	deepEqual( Stem("salicam"), "salicam" );
	deepEqual( Stem("salique"), "saliqu" );
	deepEqual( Stem("salisbury"), "salisburi" );
	deepEqual( Stem("sall"), "sall" );
	deepEqual( Stem("sallet"), "sallet" );
	deepEqual( Stem("sallets"), "sallet" );
	deepEqual( Stem("sallied"), "salli" );
	deepEqual( Stem("sallies"), "salli" );
	deepEqual( Stem("sallow"), "sallow" );
	deepEqual( Stem("sallust"), "sallust" );
	deepEqual( Stem("sally"), "salli" );
	deepEqual( Stem("salmi"), "salmi" );
	deepEqual( Stem("salmon"), "salmon" );
	deepEqual( Stem("salmons"), "salmon" );
	deepEqual( Stem("salon"), "salon" );
	deepEqual( Stem("salons"), "salon" );
	deepEqual( Stem("saloon"), "saloon" );
	deepEqual( Stem("saloons"), "saloon" );
	deepEqual( Stem("salt"), "salt" );
	deepEqual( Stem("salted"), "salt" );
	deepEqual( Stem("salter"), "salter" );
	deepEqual( Stem("saltiers"), "saltier" );
	deepEqual( Stem("saltire"), "saltir" );
	deepEqual( Stem("saltness"), "salt" );
	deepEqual( Stem("saltpetre"), "saltpetr" );
	deepEqual( Stem("salts"), "salt" );
	deepEqual( Stem("salutary"), "salutari" );
	deepEqual( Stem("salutation"), "salut" );
	deepEqual( Stem("salutations"), "salut" );
	deepEqual( Stem("salute"), "salut" );
	deepEqual( Stem("saluted"), "salut" );
	deepEqual( Stem("salutes"), "salut" );
	deepEqual( Stem("saluteth"), "saluteth" );
	deepEqual( Stem("saluting"), "salut" );
	deepEqual( Stem("salv"), "salv" );
	deepEqual( Stem("salvation"), "salvat" );
	deepEqual( Stem("salve"), "salv" );
	deepEqual( Stem("salver"), "salver" );
	deepEqual( Stem("salvers"), "salver" );
	deepEqual( Stem("salving"), "salv" );
	deepEqual( Stem("salvo"), "salvo" );
	deepEqual( Stem("salvolatile"), "salvolatil" );
	deepEqual( Stem("sam"), "sam" );
	deepEqual( Stem("sambo"), "sambo" );
	deepEqual( Stem("sambre"), "sambr" );
	deepEqual( Stem("same"), "same" );
	deepEqual( Stem("samingo"), "samingo" );
	deepEqual( Stem("samp"), "samp" );
	deepEqual( Stem("sampire"), "sampir" );
	deepEqual( Stem("sample"), "sampl" );
	deepEqual( Stem("sampler"), "sampler" );
	deepEqual( Stem("sampson"), "sampson" );
	deepEqual( Stem("samson"), "samson" );
	deepEqual( Stem("samsons"), "samson" );
	deepEqual( Stem("samuel"), "samuel" );
	deepEqual( Stem("san"), "san" );
	deepEqual( Stem("sancta"), "sancta" );
	deepEqual( Stem("sanctified"), "sanctifi" );
	deepEqual( Stem("sanctifies"), "sanctifi" );
	deepEqual( Stem("sanctify"), "sanctifi" );
	deepEqual( Stem("sanctimonies"), "sanctimoni" );
	deepEqual( Stem("sanctimonious"), "sanctimoni" );
	deepEqual( Stem("sanctimony"), "sanctimoni" );
	deepEqual( Stem("sanctities"), "sanctiti" );
	deepEqual( Stem("sanctity"), "sanctiti" );
	deepEqual( Stem("sanctuarize"), "sanctuar" );
	deepEqual( Stem("sanctuary"), "sanctuari" );
	deepEqual( Stem("sand"), "sand" );
	deepEqual( Stem("sandal"), "sandal" );
	deepEqual( Stem("sandbag"), "sandbag" );
	deepEqual( Stem("sanded"), "sand" );
	deepEqual( Stem("sandford"), "sandford" );
	deepEqual( Stem("sands"), "sand" );
	deepEqual( Stem("sandwich"), "sandwich" );
	deepEqual( Stem("sandwiches"), "sandwich" );
	deepEqual( Stem("sandy"), "sandi" );
	deepEqual( Stem("sandys"), "sandi" );
	deepEqual( Stem("sang"), "sang" );
	deepEqual( Stem("sanguine"), "sanguin" );
	deepEqual( Stem("sanguis"), "sangui" );
	deepEqual( Stem("sangviches"), "sangvich" );
	deepEqual( Stem("sanity"), "saniti" );
	deepEqual( Stem("sank"), "sank" );
	deepEqual( Stem("sans"), "san" );
	deepEqual( Stem("santrailles"), "santrail" );
	deepEqual( Stem("sap"), "sap" );
	deepEqual( Stem("sapient"), "sapient" );
	deepEqual( Stem("sapit"), "sapit" );
	deepEqual( Stem("sapless"), "sapless" );
	deepEqual( Stem("sapling"), "sapl" );
	deepEqual( Stem("sapphire"), "sapphir" );
	deepEqual( Stem("sapphires"), "sapphir" );
	deepEqual( Stem("saqui"), "saqui" );
	deepEqual( Stem("saracens"), "saracen" );
	deepEqual( Stem("sarcasm"), "sarcasm" );
	deepEqual( Stem("sarcasms"), "sarcasm" );
	deepEqual( Stem("sarcastic"), "sarcast" );
	deepEqual( Stem("sarcastical"), "sarcast" );
	deepEqual( Stem("sarcastically"), "sarcast" );
	deepEqual( Stem("sarcenet"), "sarcenet" );
	deepEqual( Stem("sard"), "sard" );
	deepEqual( Stem("sardians"), "sardian" );
	deepEqual( Stem("sardinia"), "sardinia" );
	deepEqual( Stem("sardis"), "sardi" );
	deepEqual( Stem("sardonic"), "sardon" );
	deepEqual( Stem("sardonically"), "sardon" );
	deepEqual( Stem("sarmons"), "sarmon" );
	deepEqual( Stem("sarum"), "sarum" );
	deepEqual( Stem("sarve"), "sarv" );
	deepEqual( Stem("sash"), "sash" );
	deepEqual( Stem("sashes"), "sash" );
	deepEqual( Stem("sat"), "sat" );
	deepEqual( Stem("satan"), "satan" );
	deepEqual( Stem("satchel"), "satchel" );
	deepEqual( Stem("sate"), "sate" );
	deepEqual( Stem("sated"), "sate" );
	deepEqual( Stem("satiata"), "satiata" );
	deepEqual( Stem("satiate"), "satiat" );
	deepEqual( Stem("satiety"), "satieti" );
	deepEqual( Stem("satin"), "satin" );
	deepEqual( Stem("satire"), "satir" );
	deepEqual( Stem("satires"), "satir" );
	deepEqual( Stem("satirical"), "satir" );
	deepEqual( Stem("satirizing"), "satir" );
	deepEqual( Stem("satis"), "sati" );
	deepEqual( Stem("satisfaction"), "satisfact" );
	deepEqual( Stem("satisfactorily"), "satisfactorili" );
	deepEqual( Stem("satisfactory"), "satisfactori" );
	deepEqual( Stem("satisfied"), "satisfi" );
	deepEqual( Stem("satisfies"), "satisfi" );
	deepEqual( Stem("satisfy"), "satisfi" );
	deepEqual( Stem("satisfying"), "satisfi" );
	deepEqual( Stem("satting"), "sat" );
	deepEqual( Stem("saturday"), "saturdai" );
	deepEqual( Stem("saturdays"), "saturdai" );
	deepEqual( Stem("saturn"), "saturn" );
	deepEqual( Stem("saturnine"), "saturnin" );
	deepEqual( Stem("saturninus"), "saturninu" );
	deepEqual( Stem("satyr"), "satyr" );
	deepEqual( Stem("satyrs"), "satyr" );
	deepEqual( Stem("sauc"), "sauc" );
	deepEqual( Stem("sauce"), "sauc" );
	deepEqual( Stem("sauced"), "sauc" );
	deepEqual( Stem("saucepan"), "saucepan" );
	deepEqual( Stem("saucer"), "saucer" );
	deepEqual( Stem("saucers"), "saucer" );
	deepEqual( Stem("sauces"), "sauc" );
	deepEqual( Stem("saucily"), "saucili" );
	deepEqual( Stem("sauciness"), "sauci" );
	deepEqual( Stem("saucy"), "sauci" );
	deepEqual( Stem("sauf"), "sauf" );
	deepEqual( Stem("saufen"), "saufen" );
	deepEqual( Stem("saunder"), "saunder" );
	deepEqual( Stem("saunders"), "saunder" );
	deepEqual( Stem("sauntering"), "saunter" );
	deepEqual( Stem("sausage"), "sausag" );
	deepEqual( Stem("sausages"), "sausag" );
	deepEqual( Stem("sauvage"), "sauvag" );
	deepEqual( Stem("sav"), "sav" );
	deepEqual( Stem("savage"), "savag" );
	deepEqual( Stem("savagely"), "savag" );
	deepEqual( Stem("savageness"), "savag" );
	deepEqual( Stem("savagery"), "savageri" );
	deepEqual( Stem("savages"), "savag" );
	deepEqual( Stem("save"), "save" );
	deepEqual( Stem("saved"), "save" );
	deepEqual( Stem("saves"), "save" );
	deepEqual( Stem("saving"), "save" );
	deepEqual( Stem("savings"), "save" );
	deepEqual( Stem("saviour"), "saviour" );
	deepEqual( Stem("savory"), "savori" );
	deepEqual( Stem("savour"), "savour" );
	deepEqual( Stem("savouring"), "savour" );
	deepEqual( Stem("savours"), "savour" );
	deepEqual( Stem("savoury"), "savouri" );
	deepEqual( Stem("savoy"), "savoi" );
	deepEqual( Stem("saw"), "saw" );
	deepEqual( Stem("sawdust"), "sawdust" );
	deepEqual( Stem("sawed"), "saw" );
	deepEqual( Stem("sawest"), "sawest" );
	deepEqual( Stem("sawn"), "sawn" );
	deepEqual( Stem("sawpit"), "sawpit" );
	deepEqual( Stem("saws"), "saw" );
	deepEqual( Stem("sawyer"), "sawyer" );
	deepEqual( Stem("saxons"), "saxon" );
	deepEqual( Stem("saxony"), "saxoni" );
	deepEqual( Stem("saxton"), "saxton" );
	deepEqual( Stem("say"), "sai" );
	deepEqual( Stem("sayest"), "sayest" );
	deepEqual( Stem("saying"), "sai" );
	deepEqual( Stem("sayings"), "sai" );
	deepEqual( Stem("says"), "sai" );
	deepEqual( Stem("sayson"), "sayson" );
	deepEqual( Stem("sayst"), "sayst" );
	deepEqual( Stem("sblood"), "sblood" );
	deepEqual( Stem("sborne"), "sborn" );
	deepEqual( Stem("sc"), "sc" );
	deepEqual( Stem("scab"), "scab" );
	deepEqual( Stem("scabbard"), "scabbard" );
	deepEqual( Stem("scabbards"), "scabbard" );
	deepEqual( Stem("scabs"), "scab" );
	deepEqual( Stem("scaffold"), "scaffold" );
	deepEqual( Stem("scaffoldage"), "scaffoldag" );
	deepEqual( Stem("scal"), "scal" );
	deepEqual( Stem("scald"), "scald" );
	deepEqual( Stem("scalded"), "scald" );
	deepEqual( Stem("scalding"), "scald" );
	deepEqual( Stem("scale"), "scale" );
	deepEqual( Stem("scaled"), "scale" );
	deepEqual( Stem("scales"), "scale" );
	deepEqual( Stem("scaling"), "scale" );
	deepEqual( Stem("scall"), "scall" );
	deepEqual( Stem("scalp"), "scalp" );
	deepEqual( Stem("scalps"), "scalp" );
	deepEqual( Stem("scaly"), "scali" );
	deepEqual( Stem("scamble"), "scambl" );
	deepEqual( Stem("scambling"), "scambl" );
	deepEqual( Stem("scamels"), "scamel" );
	deepEqual( Stem("scamp"), "scamp" );
	deepEqual( Stem("scan"), "scan" );
	deepEqual( Stem("scandal"), "scandal" );
	deepEqual( Stem("scandalised"), "scandalis" );
	deepEqual( Stem("scandaliz"), "scandaliz" );
	deepEqual( Stem("scandalous"), "scandal" );
	deepEqual( Stem("scandy"), "scandi" );
	deepEqual( Stem("scann"), "scann" );
	deepEqual( Stem("scanning"), "scan" );
	deepEqual( Stem("scant"), "scant" );
	deepEqual( Stem("scanted"), "scant" );
	deepEqual( Stem("scanter"), "scanter" );
	deepEqual( Stem("scanting"), "scant" );
	deepEqual( Stem("scantling"), "scantl" );
	deepEqual( Stem("scants"), "scant" );
	deepEqual( Stem("scanty"), "scanti" );
	deepEqual( Stem("scap"), "scap" );
	deepEqual( Stem("scape"), "scape" );
	deepEqual( Stem("scaped"), "scape" );
	deepEqual( Stem("scapegrace"), "scapegrac" );
	deepEqual( Stem("scapes"), "scape" );
	deepEqual( Stem("scapeth"), "scapeth" );
	deepEqual( Stem("scar"), "scar" );
	deepEqual( Stem("scarce"), "scarc" );
	deepEqual( Stem("scarcely"), "scarc" );
	deepEqual( Stem("scarcity"), "scarciti" );
	deepEqual( Stem("scare"), "scare" );
	deepEqual( Stem("scarecrow"), "scarecrow" );
	deepEqual( Stem("scarecrows"), "scarecrow" );
	deepEqual( Stem("scared"), "scare" );
	deepEqual( Stem("scarf"), "scarf" );
	deepEqual( Stem("scarfed"), "scarf" );
	deepEqual( Stem("scarfs"), "scarf" );
	deepEqual( Stem("scaring"), "scare" );
	deepEqual( Stem("scarlet"), "scarlet" );
	deepEqual( Stem("scarr"), "scarr" );
	deepEqual( Stem("scarre"), "scarr" );
	deepEqual( Stem("scars"), "scar" );
	deepEqual( Stem("scarum"), "scarum" );
	deepEqual( Stem("scarus"), "scaru" );
	deepEqual( Stem("scath"), "scath" );
	deepEqual( Stem("scathe"), "scath" );
	deepEqual( Stem("scathful"), "scath" );
	deepEqual( Stem("scatt"), "scatt" );
	deepEqual( Stem("scatter"), "scatter" );
	deepEqual( Stem("scattered"), "scatter" );
	deepEqual( Stem("scattering"), "scatter" );
	deepEqual( Stem("scatters"), "scatter" );
	deepEqual( Stem("scelera"), "scelera" );
	deepEqual( Stem("scelerisque"), "scelerisqu" );
	deepEqual( Stem("scene"), "scene" );
	deepEqual( Stem("scenery"), "sceneri" );
	deepEqual( Stem("scenes"), "scene" );
	deepEqual( Stem("scent"), "scent" );
	deepEqual( Stem("scented"), "scent" );
	deepEqual( Stem("scept"), "scept" );
	deepEqual( Stem("scepter"), "scepter" );
	deepEqual( Stem("sceptical"), "sceptic" );
	deepEqual( Stem("sceptre"), "sceptr" );
	deepEqual( Stem("sceptred"), "sceptr" );
	deepEqual( Stem("sceptres"), "sceptr" );
	deepEqual( Stem("schapzuger"), "schapzug" );
	deepEqual( Stem("schedule"), "schedul" );
	deepEqual( Stem("schedules"), "schedul" );
	deepEqual( Stem("scheme"), "scheme" );
	deepEqual( Stem("schemer"), "schemer" );
	deepEqual( Stem("schemes"), "scheme" );
	deepEqual( Stem("scheming"), "scheme" );
	deepEqual( Stem("schimmels"), "schimmel" );
	deepEqual( Stem("schinken"), "schinken" );
	deepEqual( Stem("schlacht"), "schlacht" );
	deepEqual( Stem("schlafrock"), "schlafrock" );
	deepEqual( Stem("schlippenschloppen"), "schlippenschloppen" );
	deepEqual( Stem("schloss"), "schloss" );
	deepEqual( Stem("schlossberg"), "schlossberg" );
	deepEqual( Stem("schlusselback"), "schlusselback" );
	deepEqual( Stem("schnurrbart"), "schnurrbart" );
	deepEqual( Stem("scholar"), "scholar" );
	deepEqual( Stem("scholarly"), "scholarli" );
	deepEqual( Stem("scholars"), "scholar" );
	deepEqual( Stem("scholarships"), "scholarship" );
	deepEqual( Stem("scholastic"), "scholast" );
	deepEqual( Stem("school"), "school" );
	deepEqual( Stem("schoolboy"), "schoolboi" );
	deepEqual( Stem("schoolboys"), "schoolboi" );
	deepEqual( Stem("schoolfellow"), "schoolfellow" );
	deepEqual( Stem("schoolfellows"), "schoolfellow" );
	deepEqual( Stem("schoolgirl"), "schoolgirl" );
	deepEqual( Stem("schooling"), "school" );
	deepEqual( Stem("schoolmaster"), "schoolmast" );
	deepEqual( Stem("schoolmasters"), "schoolmast" );
	deepEqual( Stem("schoolmistress"), "schoolmistress" );
	deepEqual( Stem("schoolmistresses"), "schoolmistress" );
	deepEqual( Stem("schoolroom"), "schoolroom" );
	deepEqual( Stem("schools"), "school" );
	deepEqual( Stem("schoppenhausen"), "schoppenhausen" );
	deepEqual( Stem("schrecklich"), "schrecklich" );
	deepEqual( Stem("schroeder"), "schroeder" );
	deepEqual( Stem("schwager"), "schwager" );
	deepEqual( Stem("schwartzenberg"), "schwartzenberg" );
	deepEqual( Stem("schwendler"), "schwendler" );
	deepEqual( Stem("sciatica"), "sciatica" );
	deepEqual( Stem("sciaticas"), "sciatica" );
	deepEqual( Stem("science"), "scienc" );
	deepEqual( Stem("sciences"), "scienc" );
	deepEqual( Stem("scientific"), "scientif" );
	deepEqual( Stem("scimitar"), "scimitar" );
	deepEqual( Stem("scimitars"), "scimitar" );
	deepEqual( Stem("scion"), "scion" );
	deepEqual( Stem("scions"), "scion" );
	deepEqual( Stem("scissors"), "scissor" );
	deepEqual( Stem("scoff"), "scoff" );
	deepEqual( Stem("scoffer"), "scoffer" );
	deepEqual( Stem("scoffing"), "scof" );
	deepEqual( Stem("scoffs"), "scoff" );
	deepEqual( Stem("scoggin"), "scoggin" );
	deepEqual( Stem("scold"), "scold" );
	deepEqual( Stem("scolded"), "scold" );
	deepEqual( Stem("scolding"), "scold" );
	deepEqual( Stem("scolds"), "scold" );
	deepEqual( Stem("scollop"), "scollop" );
	deepEqual( Stem("sconce"), "sconc" );
	deepEqual( Stem("sconces"), "sconc" );
	deepEqual( Stem("scone"), "scone" );
	deepEqual( Stem("scope"), "scope" );
	deepEqual( Stem("scopes"), "scope" );
	deepEqual( Stem("scorch"), "scorch" );
	deepEqual( Stem("scorched"), "scorch" );
	deepEqual( Stem("scorches"), "scorch" );
	deepEqual( Stem("score"), "score" );
	deepEqual( Stem("scored"), "score" );
	deepEqual( Stem("scores"), "score" );
	deepEqual( Stem("scoring"), "score" );
	deepEqual( Stem("scorn"), "scorn" );
	deepEqual( Stem("scorned"), "scorn" );
	deepEqual( Stem("scornful"), "scorn" );
	deepEqual( Stem("scornfully"), "scornfulli" );
	deepEqual( Stem("scorning"), "scorn" );
	deepEqual( Stem("scorns"), "scorn" );
	deepEqual( Stem("scorpion"), "scorpion" );
	deepEqual( Stem("scorpions"), "scorpion" );
	deepEqual( Stem("scot"), "scot" );
	deepEqual( Stem("scotch"), "scotch" );
	deepEqual( Stem("scotches"), "scotch" );
	deepEqual( Stem("scotchmen"), "scotchmen" );
	deepEqual( Stem("scotland"), "scotland" );
	deepEqual( Stem("scots"), "scot" );
	deepEqual( Stem("scott"), "scott" );
	deepEqual( Stem("scottish"), "scottish" );
	deepEqual( Stem("scoundrel"), "scoundrel" );
	deepEqual( Stem("scoundrels"), "scoundrel" );
	deepEqual( Stem("scour"), "scour" );
	deepEqual( Stem("scoured"), "scour" );
	deepEqual( Stem("scourg"), "scourg" );
	deepEqual( Stem("scourge"), "scourg" );
	deepEqual( Stem("scouring"), "scour" );
	deepEqual( Stem("scout"), "scout" );
	deepEqual( Stem("scouted"), "scout" );
	deepEqual( Stem("scouts"), "scout" );
	deepEqual( Stem("scowl"), "scowl" );
	deepEqual( Stem("scowled"), "scowl" );
	deepEqual( Stem("scowling"), "scowl" );
	deepEqual( Stem("scraggy"), "scraggi" );
	deepEqual( Stem("scrambled"), "scrambl" );
	deepEqual( Stem("scrap"), "scrap" );
	deepEqual( Stem("scrape"), "scrape" );
	deepEqual( Stem("scraped"), "scrape" );
	deepEqual( Stem("scrapes"), "scrape" );
	deepEqual( Stem("scraping"), "scrape" );
	deepEqual( Stem("scraps"), "scrap" );
	deepEqual( Stem("scratch"), "scratch" );
	deepEqual( Stem("scratched"), "scratch" );
	deepEqual( Stem("scratches"), "scratch" );
	deepEqual( Stem("scratching"), "scratch" );
	deepEqual( Stem("scratchleys"), "scratchlei" );
	deepEqual( Stem("scrawled"), "scrawl" );
	deepEqual( Stem("scrawls"), "scrawl" );
	deepEqual( Stem("scream"), "scream" );
	deepEqual( Stem("screamed"), "scream" );
	deepEqual( Stem("screaming"), "scream" );
	deepEqual( Stem("screams"), "scream" );
	deepEqual( Stem("screech"), "screech" );
	deepEqual( Stem("screeching"), "screech" );
	deepEqual( Stem("screen"), "screen" );
	deepEqual( Stem("screened"), "screen" );
	deepEqual( Stem("screens"), "screen" );
	deepEqual( Stem("screw"), "screw" );
	deepEqual( Stem("screwed"), "screw" );
	deepEqual( Stem("screws"), "screw" );
	deepEqual( Stem("scribbl"), "scribbl" );
	deepEqual( Stem("scribbled"), "scribbl" );
	deepEqual( Stem("scribbling"), "scribbl" );
	deepEqual( Stem("scribe"), "scribe" );
	deepEqual( Stem("scribes"), "scribe" );
	deepEqual( Stem("scrimers"), "scrimer" );
	deepEqual( Stem("scrip"), "scrip" );
	deepEqual( Stem("scrippage"), "scrippag" );
	deepEqual( Stem("scripture"), "scriptur" );
	deepEqual( Stem("scriptures"), "scriptur" );
	deepEqual( Stem("scrivener"), "scriven" );
	deepEqual( Stem("scroggins"), "scroggin" );
	deepEqual( Stem("scroll"), "scroll" );
	deepEqual( Stem("scrolls"), "scroll" );
	deepEqual( Stem("scroop"), "scroop" );
	deepEqual( Stem("scrowl"), "scrowl" );
	deepEqual( Stem("scroyles"), "scroyl" );
	deepEqual( Stem("scrubbed"), "scrub" );
	deepEqual( Stem("scruple"), "scrupl" );
	deepEqual( Stem("scruples"), "scrupl" );
	deepEqual( Stem("scrupulous"), "scrupul" );
	deepEqual( Stem("scudi"), "scudi" );
	deepEqual( Stem("scuffles"), "scuffl" );
	deepEqual( Stem("scuffling"), "scuffl" );
	deepEqual( Stem("scullery"), "sculleri" );
	deepEqual( Stem("scullion"), "scullion" );
	deepEqual( Stem("sculls"), "scull" );
	deepEqual( Stem("scully"), "sculli" );
	deepEqual( Stem("sculptors"), "sculptor" );
	deepEqual( Stem("sculpture"), "sculptur" );
	deepEqual( Stem("scum"), "scum" );
	deepEqual( Stem("scurril"), "scurril" );
	deepEqual( Stem("scurrility"), "scurril" );
	deepEqual( Stem("scurrilous"), "scurril" );
	deepEqual( Stem("scurrying"), "scurri" );
	deepEqual( Stem("scurvy"), "scurvi" );
	deepEqual( Stem("scuse"), "scuse" );
	deepEqual( Stem("scut"), "scut" );
	deepEqual( Stem("scutcheon"), "scutcheon" );
	deepEqual( Stem("scutcheons"), "scutcheon" );
	deepEqual( Stem("scuttle"), "scuttl" );
	deepEqual( Stem("scylla"), "scylla" );
	deepEqual( Stem("scythe"), "scyth" );
	deepEqual( Stem("scythed"), "scyth" );
	deepEqual( Stem("scythia"), "scythia" );
	deepEqual( Stem("scythian"), "scythian" );
	deepEqual( Stem("sdeath"), "sdeath" );
	deepEqual( Stem("se"), "se" );
	deepEqual( Stem("sea"), "sea" );
	deepEqual( Stem("seacoal"), "seacoal" );
	deepEqual( Stem("seafaring"), "seafar" );
	deepEqual( Stem("seal"), "seal" );
	deepEqual( Stem("sealed"), "seal" );
	deepEqual( Stem("sealing"), "seal" );
	deepEqual( Stem("seals"), "seal" );
	deepEqual( Stem("sealskin"), "sealskin" );
	deepEqual( Stem("seam"), "seam" );
	deepEqual( Stem("seamen"), "seamen" );
	deepEqual( Stem("seams"), "seam" );
	deepEqual( Stem("seamy"), "seami" );
	deepEqual( Stem("seaport"), "seaport" );
	deepEqual( Stem("sear"), "sear" );
	deepEqual( Stem("searce"), "searc" );
	deepEqual( Stem("search"), "search" );
	deepEqual( Stem("searchers"), "searcher" );
	deepEqual( Stem("searches"), "search" );
	deepEqual( Stem("searcheth"), "searcheth" );
	deepEqual( Stem("searching"), "search" );
	deepEqual( Stem("seared"), "sear" );
	deepEqual( Stem("seas"), "sea" );
	deepEqual( Stem("seasick"), "seasick" );
	deepEqual( Stem("seaside"), "seasid" );
	deepEqual( Stem("season"), "season" );
	deepEqual( Stem("seasonable"), "season" );
	deepEqual( Stem("seasoned"), "season" );
	deepEqual( Stem("seasons"), "season" );
	deepEqual( Stem("seat"), "seat" );
	deepEqual( Stem("seated"), "seat" );
	deepEqual( Stem("seating"), "seat" );
	deepEqual( Stem("seats"), "seat" );
	deepEqual( Stem("seawards"), "seaward" );
	deepEqual( Stem("sebastian"), "sebastian" );
	deepEqual( Stem("secede"), "seced" );
	deepEqual( Stem("seceded"), "seced" );
	deepEqual( Stem("sech"), "sech" );
	deepEqual( Stem("secluded"), "seclud" );
	deepEqual( Stem("seclusion"), "seclus" );
	deepEqual( Stem("second"), "second" );
	deepEqual( Stem("secondarily"), "secondarili" );
	deepEqual( Stem("secondary"), "secondari" );
	deepEqual( Stem("seconded"), "second" );
	deepEqual( Stem("secondly"), "secondli" );
	deepEqual( Stem("seconds"), "second" );
	deepEqual( Stem("secrecy"), "secreci" );
	deepEqual( Stem("secret"), "secret" );
	deepEqual( Stem("secretaire"), "secretair" );
	deepEqual( Stem("secretaries"), "secretari" );
	deepEqual( Stem("secretary"), "secretari" );
	deepEqual( Stem("secreted"), "secret" );
	deepEqual( Stem("secreting"), "secret" );
	deepEqual( Stem("secretly"), "secretli" );
	deepEqual( Stem("secrets"), "secret" );
	deepEqual( Stem("sect"), "sect" );
	deepEqual( Stem("sectary"), "sectari" );
	deepEqual( Stem("sects"), "sect" );
	deepEqual( Stem("secundo"), "secundo" );
	deepEqual( Stem("secure"), "secur" );
	deepEqual( Stem("secured"), "secur" );
	deepEqual( Stem("securely"), "secur" );
	deepEqual( Stem("securing"), "secur" );
	deepEqual( Stem("securities"), "secur" );
	deepEqual( Stem("security"), "secur" );
	deepEqual( Stem("sed"), "sed" );
	deepEqual( Stem("sedan"), "sedan" );
	deepEqual( Stem("seddons"), "seddon" );
	deepEqual( Stem("sedg"), "sedg" );
	deepEqual( Stem("sedge"), "sedg" );
	deepEqual( Stem("sedges"), "sedg" );
	deepEqual( Stem("sedgy"), "sedgi" );
	deepEqual( Stem("sediment"), "sediment" );
	deepEqual( Stem("sedition"), "sedit" );
	deepEqual( Stem("seditious"), "sediti" );
	deepEqual( Stem("sedley"), "sedlei" );
	deepEqual( Stem("sedleys"), "sedlei" );
	deepEqual( Stem("seduc"), "seduc" );
	deepEqual( Stem("seduce"), "seduc" );
	deepEqual( Stem("seduced"), "seduc" );
	deepEqual( Stem("seducer"), "seduc" );
	deepEqual( Stem("seducing"), "seduc" );
	deepEqual( Stem("seduction"), "seduct" );
	deepEqual( Stem("sedulity"), "sedul" );
	deepEqual( Stem("sedulously"), "sedul" );
	deepEqual( Stem("see"), "see" );
	deepEqual( Stem("seed"), "seed" );
	deepEqual( Stem("seeded"), "seed" );
	deepEqual( Stem("seedness"), "seed" );
	deepEqual( Stem("seeds"), "seed" );
	deepEqual( Stem("seedsman"), "seedsman" );
	deepEqual( Stem("seein"), "seein" );
	deepEqual( Stem("seeing"), "see" );
	deepEqual( Stem("seek"), "seek" );
	deepEqual( Stem("seeking"), "seek" );
	deepEqual( Stem("seeks"), "seek" );
	deepEqual( Stem("seel"), "seel" );
	deepEqual( Stem("seeling"), "seel" );
	deepEqual( Stem("seely"), "seeli" );
	deepEqual( Stem("seem"), "seem" );
	deepEqual( Stem("seemed"), "seem" );
	deepEqual( Stem("seemers"), "seemer" );
	deepEqual( Stem("seemest"), "seemest" );
	deepEqual( Stem("seemeth"), "seemeth" );
	deepEqual( Stem("seeming"), "seem" );
	deepEqual( Stem("seemingly"), "seemingli" );
	deepEqual( Stem("seemly"), "seemli" );
	deepEqual( Stem("seems"), "seem" );
	deepEqual( Stem("seen"), "seen" );
	deepEqual( Stem("seer"), "seer" );
	deepEqual( Stem("sees"), "see" );
	deepEqual( Stem("seese"), "sees" );
	deepEqual( Stem("seest"), "seest" );
	deepEqual( Stem("seethe"), "seeth" );
	deepEqual( Stem("seethes"), "seeth" );
	deepEqual( Stem("seething"), "seeth" );
	deepEqual( Stem("seeting"), "seet" );
	deepEqual( Stem("segaw"), "segaw" );
	deepEqual( Stem("segregation"), "segreg" );
	deepEqual( Stem("sehnsucht"), "sehnsucht" );
	deepEqual( Stem("seigneur"), "seigneur" );
	deepEqual( Stem("seigneurs"), "seigneur" );
	deepEqual( Stem("seiz"), "seiz" );
	deepEqual( Stem("seize"), "seiz" );
	deepEqual( Stem("seized"), "seiz" );
	deepEqual( Stem("seizes"), "seiz" );
	deepEqual( Stem("seizeth"), "seizeth" );
	deepEqual( Stem("seizing"), "seiz" );
	deepEqual( Stem("seizure"), "seizur" );
	deepEqual( Stem("seld"), "seld" );
	deepEqual( Stem("seldom"), "seldom" );
	deepEqual( Stem("select"), "select" );
	deepEqual( Stem("selected"), "select" );
	deepEqual( Stem("selecting"), "select" );
	deepEqual( Stem("selection"), "select" );
	deepEqual( Stem("seleucus"), "seleucu" );
	deepEqual( Stem("self"), "self" );
	deepEqual( Stem("selfish"), "selfish" );
	deepEqual( Stem("selfishly"), "selfishli" );
	deepEqual( Stem("selfishness"), "selfish" );
	deepEqual( Stem("selfsame"), "selfsam" );
	deepEqual( Stem("sell"), "sell" );
	deepEqual( Stem("seller"), "seller" );
	deepEqual( Stem("selleries"), "selleri" );
	deepEqual( Stem("sellers"), "seller" );
	deepEqual( Stem("selling"), "sell" );
	deepEqual( Stem("sells"), "sell" );
	deepEqual( Stem("selves"), "selv" );
	deepEqual( Stem("semblable"), "semblabl" );
	deepEqual( Stem("semblably"), "semblabl" );
	deepEqual( Stem("semblance"), "semblanc" );
	deepEqual( Stem("semblances"), "semblanc" );
	deepEqual( Stem("semblative"), "sembl" );
	deepEqual( Stem("semele"), "semel" );
	deepEqual( Stem("semi"), "semi" );
	deepEqual( Stem("semicircle"), "semicircl" );
	deepEqual( Stem("seminary"), "seminari" );
	deepEqual( Stem("semiramis"), "semirami" );
	deepEqual( Stem("semper"), "semper" );
	deepEqual( Stem("sempronius"), "semproniu" );
	deepEqual( Stem("senate"), "senat" );
	deepEqual( Stem("senator"), "senat" );
	deepEqual( Stem("senators"), "senat" );
	deepEqual( Stem("send"), "send" );
	deepEqual( Stem("sender"), "sender" );
	deepEqual( Stem("sendeth"), "sendeth" );
	deepEqual( Stem("sending"), "send" );
	deepEqual( Stem("sends"), "send" );
	deepEqual( Stem("seneca"), "seneca" );
	deepEqual( Stem("senile"), "senil" );
	deepEqual( Stem("senior"), "senior" );
	deepEqual( Stem("seniority"), "senior" );
	deepEqual( Stem("seniory"), "seniori" );
	deepEqual( Stem("senis"), "seni" );
	deepEqual( Stem("sennet"), "sennet" );
	deepEqual( Stem("senoys"), "senoi" );
	deepEqual( Stem("sensation"), "sensat" );
	deepEqual( Stem("sensations"), "sensat" );
	deepEqual( Stem("sense"), "sens" );
	deepEqual( Stem("senseless"), "senseless" );
	deepEqual( Stem("senses"), "sens" );
	deepEqual( Stem("sensibilities"), "sensibl" );
	deepEqual( Stem("sensibility"), "sensibl" );
	deepEqual( Stem("sensible"), "sensibl" );
	deepEqual( Stem("sensibly"), "sensibli" );
	deepEqual( Stem("sensitive"), "sensit" );
	deepEqual( Stem("sensual"), "sensual" );
	deepEqual( Stem("sensuality"), "sensual" );
	deepEqual( Stem("sent"), "sent" );
	deepEqual( Stem("sentenc"), "sentenc" );
	deepEqual( Stem("sentence"), "sentenc" );
	deepEqual( Stem("sentences"), "sentenc" );
	deepEqual( Stem("sententious"), "sententi" );
	deepEqual( Stem("sentiment"), "sentiment" );
	deepEqual( Stem("sentimental"), "sentiment" );
	deepEqual( Stem("sentimentalists"), "sentimentalist" );
	deepEqual( Stem("sentimentality"), "sentiment" );
	deepEqual( Stem("sentimentally"), "sentiment" );
	deepEqual( Stem("sentiments"), "sentiment" );
	deepEqual( Stem("sentinel"), "sentinel" );
	deepEqual( Stem("sentinels"), "sentinel" );
	deepEqual( Stem("sentoit"), "sentoit" );
	deepEqual( Stem("sentries"), "sentri" );
	deepEqual( Stem("sentry"), "sentri" );
	deepEqual( Stem("separable"), "separ" );
	deepEqual( Stem("separate"), "separ" );
	deepEqual( Stem("separated"), "separ" );
	deepEqual( Stem("separates"), "separ" );
	deepEqual( Stem("separation"), "separ" );
	deepEqual( Stem("september"), "septemb" );
	deepEqual( Stem("septentrion"), "septentrion" );
	deepEqual( Stem("sepulchral"), "sepulchr" );
	deepEqual( Stem("sepulchre"), "sepulchr" );
	deepEqual( Stem("sepulchres"), "sepulchr" );
	deepEqual( Stem("sepulchring"), "sepulchr" );
	deepEqual( Stem("sequel"), "sequel" );
	deepEqual( Stem("sequence"), "sequenc" );
	deepEqual( Stem("sequent"), "sequent" );
	deepEqual( Stem("sequest"), "sequest" );
	deepEqual( Stem("sequester"), "sequest" );
	deepEqual( Stem("sequestered"), "sequest" );
	deepEqual( Stem("sequestration"), "sequestr" );
	deepEqual( Stem("sere"), "sere" );
	deepEqual( Stem("serene"), "seren" );
	deepEqual( Stem("serenely"), "seren" );
	deepEqual( Stem("serenis"), "sereni" );
	deepEqual( Stem("serenities"), "seren" );
	deepEqual( Stem("serge"), "serg" );
	deepEqual( Stem("sergeant"), "sergeant" );
	deepEqual( Stem("sergeants"), "sergeant" );
	deepEqual( Stem("series"), "seri" );
	deepEqual( Stem("serious"), "seriou" );
	deepEqual( Stem("seriously"), "serious" );
	deepEqual( Stem("sermon"), "sermon" );
	deepEqual( Stem("sermonised"), "sermonis" );
	deepEqual( Stem("sermonising"), "sermonis" );
	deepEqual( Stem("sermons"), "sermon" );
	deepEqual( Stem("serpent"), "serpent" );
	deepEqual( Stem("serpentine"), "serpentin" );
	deepEqual( Stem("serpents"), "serpent" );
	deepEqual( Stem("serpigo"), "serpigo" );
	deepEqual( Stem("serred"), "ser" );
	deepEqual( Stem("serv"), "serv" );
	deepEqual( Stem("servant"), "servant" );
	deepEqual( Stem("servanted"), "servant" );
	deepEqual( Stem("servants"), "servant" );
	deepEqual( Stem("serve"), "serv" );
	deepEqual( Stem("served"), "serv" );
	deepEqual( Stem("server"), "server" );
	deepEqual( Stem("serves"), "serv" );
	deepEqual( Stem("serveth"), "serveth" );
	deepEqual( Stem("service"), "servic" );
	deepEqual( Stem("serviceable"), "servic" );
	deepEqual( Stem("services"), "servic" );
	deepEqual( Stem("servile"), "servil" );
	deepEqual( Stem("servility"), "servil" );
	deepEqual( Stem("servilius"), "serviliu" );
	deepEqual( Stem("serving"), "serv" );
	deepEqual( Stem("servingman"), "servingman" );
	deepEqual( Stem("servingmen"), "servingmen" );
	deepEqual( Stem("serviteur"), "serviteur" );
	deepEqual( Stem("servitor"), "servitor" );
	deepEqual( Stem("servitors"), "servitor" );
	deepEqual( Stem("servitude"), "servitud" );
	deepEqual( Stem("servt"), "servt" );
	deepEqual( Stem("sessa"), "sessa" );
	deepEqual( Stem("session"), "session" );
	deepEqual( Stem("sessions"), "session" );
	deepEqual( Stem("sestos"), "sesto" );
	deepEqual( Stem("set"), "set" );
	deepEqual( Stem("setebos"), "setebo" );
	deepEqual( Stem("sets"), "set" );
	deepEqual( Stem("setter"), "setter" );
	deepEqual( Stem("settin"), "settin" );
	deepEqual( Stem("setting"), "set" );
	deepEqual( Stem("settle"), "settl" );
	deepEqual( Stem("settled"), "settl" );
	deepEqual( Stem("settlement"), "settlement" );
	deepEqual( Stem("settlest"), "settlest" );
	deepEqual( Stem("settling"), "settl" );
	deepEqual( Stem("sev"), "sev" );
	deepEqual( Stem("seven"), "seven" );
	deepEqual( Stem("sevenfold"), "sevenfold" );
	deepEqual( Stem("sevennight"), "sevennight" );
	deepEqual( Stem("sevenpence"), "sevenp" );
	deepEqual( Stem("sevens"), "seven" );
	deepEqual( Stem("seventeen"), "seventeen" );
	deepEqual( Stem("seventeenth"), "seventeenth" );
	deepEqual( Stem("seventh"), "seventh" );
	deepEqual( Stem("seventy"), "seventi" );
	deepEqual( Stem("sever"), "sever" );
	deepEqual( Stem("several"), "sever" );
	deepEqual( Stem("severally"), "sever" );
	deepEqual( Stem("severals"), "sever" );
	deepEqual( Stem("severance"), "sever" );
	deepEqual( Stem("severe"), "sever" );
	deepEqual( Stem("severed"), "sever" );
	deepEqual( Stem("severely"), "sever" );
	deepEqual( Stem("severer"), "sever" );
	deepEqual( Stem("severest"), "severest" );
	deepEqual( Stem("severing"), "sever" );
	deepEqual( Stem("severities"), "sever" );
	deepEqual( Stem("severity"), "sever" );
	deepEqual( Stem("severn"), "severn" );
	deepEqual( Stem("severs"), "sever" );
	deepEqual( Stem("sew"), "sew" );
	deepEqual( Stem("seward"), "seward" );
	deepEqual( Stem("sewed"), "sew" );
	deepEqual( Stem("sewer"), "sewer" );
	deepEqual( Stem("sewing"), "sew" );
	deepEqual( Stem("sewn"), "sewn" );
	deepEqual( Stem("sex"), "sex" );
	deepEqual( Stem("sexes"), "sex" );
	deepEqual( Stem("sexton"), "sexton" );
	deepEqual( Stem("sextus"), "sextu" );
	deepEqual( Stem("seymour"), "seymour" );
	deepEqual( Stem("seyton"), "seyton" );
	deepEqual( Stem("sfoot"), "sfoot" );
	deepEqual( Stem("sford"), "sford" );
	deepEqual( Stem("sh"), "sh" );
	deepEqual( Stem("sha"), "sha" );
	deepEqual( Stem("shabbiest"), "shabbiest" );
	deepEqual( Stem("shabby"), "shabbi" );
	deepEqual( Stem("shackle"), "shackl" );
	deepEqual( Stem("shackles"), "shackl" );
	deepEqual( Stem("shade"), "shade" );
	deepEqual( Stem("shaded"), "shade" );
	deepEqual( Stem("shades"), "shade" );
	deepEqual( Stem("shadow"), "shadow" );
	deepEqual( Stem("shadowed"), "shadow" );
	deepEqual( Stem("shadowing"), "shadow" );
	deepEqual( Stem("shadows"), "shadow" );
	deepEqual( Stem("shadowy"), "shadowi" );
	deepEqual( Stem("shady"), "shadi" );
	deepEqual( Stem("shafalus"), "shafalu" );
	deepEqual( Stem("shaft"), "shaft" );
	deepEqual( Stem("shafton"), "shafton" );
	deepEqual( Stem("shafts"), "shaft" );
	deepEqual( Stem("shag"), "shag" );
	deepEqual( Stem("shaggy"), "shaggi" );
	deepEqual( Stem("shak"), "shak" );
	deepEqual( Stem("shake"), "shake" );
	deepEqual( Stem("shaked"), "shake" );
	deepEqual( Stem("shaken"), "shaken" );
	deepEqual( Stem("shakes"), "shake" );
	deepEqual( Stem("shakespeare"), "shakespear" );
	deepEqual( Stem("shaking"), "shake" );
	deepEqual( Stem("shaky"), "shaki" );
	deepEqual( Stem("shales"), "shale" );
	deepEqual( Stem("shall"), "shall" );
	deepEqual( Stem("shallenge"), "shalleng" );
	deepEqual( Stem("shallow"), "shallow" );
	deepEqual( Stem("shallowest"), "shallowest" );
	deepEqual( Stem("shallowly"), "shallowli" );
	deepEqual( Stem("shallows"), "shallow" );
	deepEqual( Stem("shalt"), "shalt" );
	deepEqual( Stem("sham"), "sham" );
	deepEqual( Stem("shambles"), "shambl" );
	deepEqual( Stem("shame"), "shame" );
	deepEqual( Stem("shamed"), "shame" );
	deepEqual( Stem("shamefacedness"), "shamefaced" );
	deepEqual( Stem("shameful"), "shame" );
	deepEqual( Stem("shamefully"), "shamefulli" );
	deepEqual( Stem("shameless"), "shameless" );
	deepEqual( Stem("shames"), "shame" );
	deepEqual( Stem("shamest"), "shamest" );
	deepEqual( Stem("shaming"), "shame" );
	deepEqual( Stem("shampooing"), "shampoo" );
	deepEqual( Stem("shan"), "shan" );
	deepEqual( Stem("shank"), "shank" );
	deepEqual( Stem("shanked"), "shank" );
	deepEqual( Stem("shanks"), "shank" );
	deepEqual( Stem("shannon"), "shannon" );
	deepEqual( Stem("shap"), "shap" );
	deepEqual( Stem("shape"), "shape" );
	deepEqual( Stem("shaped"), "shape" );
	deepEqual( Stem("shapeless"), "shapeless" );
	deepEqual( Stem("shapen"), "shapen" );
	deepEqual( Stem("shapes"), "shape" );
	deepEqual( Stem("shaping"), "shape" );
	deepEqual( Stem("shar"), "shar" );
	deepEqual( Stem("shard"), "shard" );
	deepEqual( Stem("sharded"), "shard" );
	deepEqual( Stem("shards"), "shard" );
	deepEqual( Stem("share"), "share" );
	deepEqual( Stem("shared"), "share" );
	deepEqual( Stem("sharers"), "sharer" );
	deepEqual( Stem("shares"), "share" );
	deepEqual( Stem("sharing"), "share" );
	deepEqual( Stem("shark"), "shark" );
	deepEqual( Stem("sharp"), "sharp" );
	deepEqual( Stem("sharpe"), "sharp" );
	deepEqual( Stem("sharpen"), "sharpen" );
	deepEqual( Stem("sharpened"), "sharpen" );
	deepEqual( Stem("sharpens"), "sharpen" );
	deepEqual( Stem("sharper"), "sharper" );
	deepEqual( Stem("sharpest"), "sharpest" );
	deepEqual( Stem("sharply"), "sharpli" );
	deepEqual( Stem("sharpness"), "sharp" );
	deepEqual( Stem("sharps"), "sharp" );
	deepEqual( Stem("shatter"), "shatter" );
	deepEqual( Stem("shattered"), "shatter" );
	deepEqual( Stem("shav"), "shav" );
	deepEqual( Stem("shave"), "shave" );
	deepEqual( Stem("shaved"), "shave" );
	deepEqual( Stem("shaven"), "shaven" );
	deepEqual( Stem("shaving"), "shave" );
	deepEqual( Stem("shaw"), "shaw" );
	deepEqual( Stem("shawl"), "shawl" );
	deepEqual( Stem("shawled"), "shawl" );
	deepEqual( Stem("shawling"), "shawl" );
	deepEqual( Stem("shawls"), "shawl" );
	deepEqual( Stem("shawn"), "shawn" );
	deepEqual( Stem("she"), "she" );
	deepEqual( Stem("sheaf"), "sheaf" );
	deepEqual( Stem("sheal"), "sheal" );
	deepEqual( Stem("sheamfully"), "sheamfulli" );
	deepEqual( Stem("shear"), "shear" );
	deepEqual( Stem("shearers"), "shearer" );
	deepEqual( Stem("shearing"), "shear" );
	deepEqual( Stem("shearman"), "shearman" );
	deepEqual( Stem("shears"), "shear" );
	deepEqual( Stem("sheath"), "sheath" );
	deepEqual( Stem("sheathe"), "sheath" );
	deepEqual( Stem("sheathed"), "sheath" );
	deepEqual( Stem("sheathes"), "sheath" );
	deepEqual( Stem("sheathing"), "sheath" );
	deepEqual( Stem("sheaved"), "sheav" );
	deepEqual( Stem("sheaves"), "sheav" );
	deepEqual( Stem("sheba"), "sheba" );
	deepEqual( Stem("shed"), "shed" );
	deepEqual( Stem("shedding"), "shed" );
	deepEqual( Stem("sheds"), "shed" );
	deepEqual( Stem("sheen"), "sheen" );
	deepEqual( Stem("sheep"), "sheep" );
	deepEqual( Stem("sheepcote"), "sheepcot" );
	deepEqual( Stem("sheepcotes"), "sheepcot" );
	deepEqual( Stem("sheeps"), "sheep" );
	deepEqual( Stem("sheepshanks"), "sheepshank" );
	deepEqual( Stem("sheepskins"), "sheepskin" );
	deepEqual( Stem("sheer"), "sheer" );
	deepEqual( Stem("sheet"), "sheet" );
	deepEqual( Stem("sheeted"), "sheet" );
	deepEqual( Stem("sheets"), "sheet" );
	deepEqual( Stem("sheffield"), "sheffield" );
	deepEqual( Stem("shelf"), "shelf" );
	deepEqual( Stem("shell"), "shell" );
	deepEqual( Stem("shells"), "shell" );
	deepEqual( Stem("shelt"), "shelt" );
	deepEqual( Stem("shelter"), "shelter" );
	deepEqual( Stem("sheltered"), "shelter" );
	deepEqual( Stem("shelters"), "shelter" );
	deepEqual( Stem("shelves"), "shelv" );
	deepEqual( Stem("shelving"), "shelv" );
	deepEqual( Stem("shelvy"), "shelvi" );
	deepEqual( Stem("sheneral"), "shener" );
	deepEqual( Stem("shent"), "shent" );
	deepEqual( Stem("shepherd"), "shepherd" );
	deepEqual( Stem("shepherdes"), "shepherd" );
	deepEqual( Stem("shepherdess"), "shepherdess" );
	deepEqual( Stem("shepherdesses"), "shepherdess" );
	deepEqual( Stem("shepherds"), "shepherd" );
	deepEqual( Stem("sheppard"), "sheppard" );
	deepEqual( Stem("sher"), "sher" );
	deepEqual( Stem("sheridan"), "sheridan" );
	deepEqual( Stem("sheriff"), "sheriff" );
	deepEqual( Stem("sheriffs"), "sheriff" );
	deepEqual( Stem("sherries"), "sherri" );
	deepEqual( Stem("sherris"), "sherri" );
	deepEqual( Stem("sherry"), "sherri" );
	deepEqual( Stem("shes"), "she" );
	deepEqual( Stem("shetland"), "shetland" );
	deepEqual( Stem("sheweth"), "sheweth" );
	deepEqual( Stem("shield"), "shield" );
	deepEqual( Stem("shielded"), "shield" );
	deepEqual( Stem("shielding"), "shield" );
	deepEqual( Stem("shields"), "shield" );
	deepEqual( Stem("shift"), "shift" );
	deepEqual( Stem("shifted"), "shift" );
	deepEqual( Stem("shifting"), "shift" );
	deepEqual( Stem("shifts"), "shift" );
	deepEqual( Stem("shilling"), "shill" );
	deepEqual( Stem("shillings"), "shill" );
	deepEqual( Stem("shin"), "shin" );
	deepEqual( Stem("shine"), "shine" );
	deepEqual( Stem("shines"), "shine" );
	deepEqual( Stem("shineth"), "shineth" );
	deepEqual( Stem("shingles"), "shingl" );
	deepEqual( Stem("shining"), "shine" );
	deepEqual( Stem("shins"), "shin" );
	deepEqual( Stem("shinty"), "shinti" );
	deepEqual( Stem("shiny"), "shini" );
	deepEqual( Stem("ship"), "ship" );
	deepEqual( Stem("shipboard"), "shipboard" );
	deepEqual( Stem("shipman"), "shipman" );
	deepEqual( Stem("shipmaster"), "shipmast" );
	deepEqual( Stem("shipmen"), "shipmen" );
	deepEqual( Stem("shipp"), "shipp" );
	deepEqual( Stem("shipped"), "ship" );
	deepEqual( Stem("shipping"), "ship" );
	deepEqual( Stem("ships"), "ship" );
	deepEqual( Stem("shipt"), "shipt" );
	deepEqual( Stem("shipwreck"), "shipwreck" );
	deepEqual( Stem("shipwrecked"), "shipwreck" );
	deepEqual( Stem("shipwrecking"), "shipwreck" );
	deepEqual( Stem("shipwright"), "shipwright" );
	deepEqual( Stem("shipwrights"), "shipwright" );
	deepEqual( Stem("shire"), "shire" );
	deepEqual( Stem("shirking"), "shirk" );
	deepEqual( Stem("shirley"), "shirlei" );
	deepEqual( Stem("shirt"), "shirt" );
	deepEqual( Stem("shirts"), "shirt" );
	deepEqual( Stem("shive"), "shive" );
	deepEqual( Stem("shiver"), "shiver" );
	deepEqual( Stem("shivered"), "shiver" );
	deepEqual( Stem("shivering"), "shiver" );
	deepEqual( Stem("shivers"), "shiver" );
	deepEqual( Stem("shoal"), "shoal" );
	deepEqual( Stem("shoals"), "shoal" );
	deepEqual( Stem("shock"), "shock" );
	deepEqual( Stem("shocked"), "shock" );
	deepEqual( Stem("shocking"), "shock" );
	deepEqual( Stem("shockingly"), "shockingli" );
	deepEqual( Stem("shocks"), "shock" );
	deepEqual( Stem("shod"), "shod" );
	deepEqual( Stem("shoe"), "shoe" );
	deepEqual( Stem("shoeing"), "shoe" );
	deepEqual( Stem("shoemaker"), "shoemak" );
	deepEqual( Stem("shoes"), "shoe" );
	deepEqual( Stem("shog"), "shog" );
	deepEqual( Stem("shone"), "shone" );
	deepEqual( Stem("shook"), "shook" );
	deepEqual( Stem("shoon"), "shoon" );
	deepEqual( Stem("shoot"), "shoot" );
	deepEqual( Stem("shooter"), "shooter" );
	deepEqual( Stem("shootie"), "shooti" );
	deepEqual( Stem("shooting"), "shoot" );
	deepEqual( Stem("shoots"), "shoot" );
	deepEqual( Stem("shop"), "shop" );
	deepEqual( Stem("shopboy"), "shopboi" );
	deepEqual( Stem("shopfolks"), "shopfolk" );
	deepEqual( Stem("shopkeepers"), "shopkeep" );
	deepEqual( Stem("shopmen"), "shopmen" );
	deepEqual( Stem("shopping"), "shop" );
	deepEqual( Stem("shops"), "shop" );
	deepEqual( Stem("shore"), "shore" );
	deepEqual( Stem("shores"), "shore" );
	deepEqual( Stem("shorn"), "shorn" );
	deepEqual( Stem("short"), "short" );
	deepEqual( Stem("shortcake"), "shortcak" );
	deepEqual( Stem("shorten"), "shorten" );
	deepEqual( Stem("shortened"), "shorten" );
	deepEqual( Stem("shortens"), "shorten" );
	deepEqual( Stem("shorter"), "shorter" );
	deepEqual( Stem("shortly"), "shortli" );
	deepEqual( Stem("shortness"), "short" );
	deepEqual( Stem("shot"), "shot" );
	deepEqual( Stem("shots"), "shot" );
	deepEqual( Stem("shotten"), "shotten" );
	deepEqual( Stem("shoughs"), "shough" );
	deepEqual( Stem("should"), "should" );
	deepEqual( Stem("shoulder"), "shoulder" );
	deepEqual( Stem("shouldered"), "shoulder" );
	deepEqual( Stem("shouldering"), "shoulder" );
	deepEqual( Stem("shoulders"), "shoulder" );
	deepEqual( Stem("shouldn"), "shouldn" );
	deepEqual( Stem("shouldst"), "shouldst" );
	deepEqual( Stem("shout"), "shout" );
	deepEqual( Stem("shouted"), "shout" );
	deepEqual( Stem("shouting"), "shout" );
	deepEqual( Stem("shouts"), "shout" );
	deepEqual( Stem("shov"), "shov" );
	deepEqual( Stem("shove"), "shove" );
	deepEqual( Stem("shovel"), "shovel" );
	deepEqual( Stem("shovels"), "shovel" );
	deepEqual( Stem("show"), "show" );
	deepEqual( Stem("showed"), "show" );
	deepEqual( Stem("shower"), "shower" );
	deepEqual( Stem("showered"), "shower" );
	deepEqual( Stem("showers"), "shower" );
	deepEqual( Stem("showest"), "showest" );
	deepEqual( Stem("showing"), "show" );
	deepEqual( Stem("shown"), "shown" );
	deepEqual( Stem("shows"), "show" );
	deepEqual( Stem("showy"), "showi" );
	deepEqual( Stem("shrank"), "shrank" );
	deepEqual( Stem("shred"), "shred" );
	deepEqual( Stem("shreds"), "shred" );
	deepEqual( Stem("shrew"), "shrew" );
	deepEqual( Stem("shrewd"), "shrewd" );
	deepEqual( Stem("shrewdly"), "shrewdli" );
	deepEqual( Stem("shrewdness"), "shrewd" );
	deepEqual( Stem("shrewish"), "shrewish" );
	deepEqual( Stem("shrewishly"), "shrewishli" );
	deepEqual( Stem("shrewishness"), "shrewish" );
	deepEqual( Stem("shrews"), "shrew" );
	deepEqual( Stem("shrewsbury"), "shrewsburi" );
	deepEqual( Stem("shriek"), "shriek" );
	deepEqual( Stem("shrieked"), "shriek" );
	deepEqual( Stem("shrieking"), "shriek" );
	deepEqual( Stem("shrieks"), "shriek" );
	deepEqual( Stem("shrieve"), "shriev" );
	deepEqual( Stem("shrift"), "shrift" );
	deepEqual( Stem("shrill"), "shrill" );
	deepEqual( Stem("shriller"), "shriller" );
	deepEqual( Stem("shrills"), "shrill" );
	deepEqual( Stem("shrilly"), "shrilli" );
	deepEqual( Stem("shrimp"), "shrimp" );
	deepEqual( Stem("shrine"), "shrine" );
	deepEqual( Stem("shrink"), "shrink" );
	deepEqual( Stem("shrinking"), "shrink" );
	deepEqual( Stem("shrinks"), "shrink" );
	deepEqual( Stem("shriv"), "shriv" );
	deepEqual( Stem("shrive"), "shrive" );
	deepEqual( Stem("shrivelled"), "shrivel" );
	deepEqual( Stem("shriver"), "shriver" );
	deepEqual( Stem("shrives"), "shrive" );
	deepEqual( Stem("shriving"), "shrive" );
	deepEqual( Stem("shropshire"), "shropshir" );
	deepEqual( Stem("shroud"), "shroud" );
	deepEqual( Stem("shrouded"), "shroud" );
	deepEqual( Stem("shrouding"), "shroud" );
	deepEqual( Stem("shrouds"), "shroud" );
	deepEqual( Stem("shrove"), "shrove" );
	deepEqual( Stem("shrow"), "shrow" );
	deepEqual( Stem("shrows"), "shrow" );
	deepEqual( Stem("shrub"), "shrub" );
	deepEqual( Stem("shrubberies"), "shrubberi" );
	deepEqual( Stem("shrubs"), "shrub" );
	deepEqual( Stem("shrug"), "shrug" );
	deepEqual( Stem("shrugs"), "shrug" );
	deepEqual( Stem("shrunk"), "shrunk" );
	deepEqual( Stem("shshshsh"), "shshshsh" );
	deepEqual( Stem("shudd"), "shudd" );
	deepEqual( Stem("shuddered"), "shudder" );
	deepEqual( Stem("shuddering"), "shudder" );
	deepEqual( Stem("shudders"), "shudder" );
	deepEqual( Stem("shuffl"), "shuffl" );
	deepEqual( Stem("shuffle"), "shuffl" );
	deepEqual( Stem("shuffled"), "shuffl" );
	deepEqual( Stem("shuffling"), "shuffl" );
	deepEqual( Stem("shun"), "shun" );
	deepEqual( Stem("shunless"), "shunless" );
	deepEqual( Stem("shunn"), "shunn" );
	deepEqual( Stem("shunned"), "shun" );
	deepEqual( Stem("shunning"), "shun" );
	deepEqual( Stem("shuns"), "shun" );
	deepEqual( Stem("shut"), "shut" );
	deepEqual( Stem("shuts"), "shut" );
	deepEqual( Stem("shutters"), "shutter" );
	deepEqual( Stem("shutting"), "shut" );
	deepEqual( Stem("shuttle"), "shuttl" );
	deepEqual( Stem("shy"), "shy" );
	deepEqual( Stem("shylock"), "shylock" );
	deepEqual( Stem("shyness"), "shyness" );
	deepEqual( Stem("si"), "si" );
	deepEqual( Stem("siberia"), "siberia" );
	deepEqual( Stem("sibilant"), "sibil" );
	deepEqual( Stem("sibyl"), "sibyl" );
	deepEqual( Stem("sibylla"), "sibylla" );
	deepEqual( Stem("sibyls"), "sibyl" );
	deepEqual( Stem("sicil"), "sicil" );
	deepEqual( Stem("sicilia"), "sicilia" );
	deepEqual( Stem("sicilian"), "sicilian" );
	deepEqual( Stem("sicilius"), "siciliu" );
	deepEqual( Stem("sicils"), "sicil" );
	deepEqual( Stem("sicily"), "sicili" );
	deepEqual( Stem("sicinius"), "siciniu" );
	deepEqual( Stem("sick"), "sick" );
	deepEqual( Stem("sicken"), "sicken" );
	deepEqual( Stem("sickening"), "sicken" );
	deepEqual( Stem("sickens"), "sicken" );
	deepEqual( Stem("sicker"), "sicker" );
	deepEqual( Stem("sickle"), "sickl" );
	deepEqual( Stem("sicklemen"), "sicklemen" );
	deepEqual( Stem("sicklied"), "sickli" );
	deepEqual( Stem("sickliness"), "sickli" );
	deepEqual( Stem("sickly"), "sickli" );
	deepEqual( Stem("sickness"), "sick" );
	deepEqual( Stem("sicles"), "sicl" );
	deepEqual( Stem("sicyon"), "sicyon" );
	deepEqual( Stem("siddons"), "siddon" );
	deepEqual( Stem("side"), "side" );
	deepEqual( Stem("sideboard"), "sideboard" );
	deepEqual( Stem("sideboards"), "sideboard" );
	deepEqual( Stem("sided"), "side" );
	deepEqual( Stem("sides"), "side" );
	deepEqual( Stem("siege"), "sieg" );
	deepEqual( Stem("sieges"), "sieg" );
	deepEqual( Stem("sienna"), "sienna" );
	deepEqual( Stem("sies"), "si" );
	deepEqual( Stem("sieve"), "siev" );
	deepEqual( Stem("sift"), "sift" );
	deepEqual( Stem("sifted"), "sift" );
	deepEqual( Stem("sigeia"), "sigeia" );
	deepEqual( Stem("sigh"), "sigh" );
	deepEqual( Stem("sighed"), "sigh" );
	deepEqual( Stem("sighing"), "sigh" );
	deepEqual( Stem("sighs"), "sigh" );
	deepEqual( Stem("sight"), "sight" );
	deepEqual( Stem("sighted"), "sight" );
	deepEqual( Stem("sightless"), "sightless" );
	deepEqual( Stem("sightly"), "sightli" );
	deepEqual( Stem("sights"), "sight" );
	deepEqual( Stem("sign"), "sign" );
	deepEqual( Stem("signal"), "signal" );
	deepEqual( Stem("signalised"), "signalis" );
	deepEqual( Stem("signature"), "signatur" );
	deepEqual( Stem("signed"), "sign" );
	deepEqual( Stem("signet"), "signet" );
	deepEqual( Stem("signieur"), "signieur" );
	deepEqual( Stem("significant"), "signific" );
	deepEqual( Stem("significants"), "signific" );
	deepEqual( Stem("signified"), "signifi" );
	deepEqual( Stem("signifies"), "signifi" );
	deepEqual( Stem("signify"), "signifi" );
	deepEqual( Stem("signifying"), "signifi" );
	deepEqual( Stem("signior"), "signior" );
	deepEqual( Stem("signiories"), "signiori" );
	deepEqual( Stem("signiors"), "signior" );
	deepEqual( Stem("signiory"), "signiori" );
	deepEqual( Stem("signor"), "signor" );
	deepEqual( Stem("signories"), "signori" );
	deepEqual( Stem("signs"), "sign" );
	deepEqual( Stem("signum"), "signum" );
	deepEqual( Stem("silas"), "sila" );
	deepEqual( Stem("silenc"), "silenc" );
	deepEqual( Stem("silence"), "silenc" );
	deepEqual( Stem("silenced"), "silenc" );
	deepEqual( Stem("silencing"), "silenc" );
	deepEqual( Stem("silent"), "silent" );
	deepEqual( Stem("silently"), "silent" );
	deepEqual( Stem("silenus"), "silenu" );
	deepEqual( Stem("silhouette"), "silhouett" );
	deepEqual( Stem("silius"), "siliu" );
	deepEqual( Stem("silk"), "silk" );
	deepEqual( Stem("silken"), "silken" );
	deepEqual( Stem("silkman"), "silkman" );
	deepEqual( Stem("silks"), "silk" );
	deepEqual( Stem("sillery"), "silleri" );
	deepEqual( Stem("silliest"), "silliest" );
	deepEqual( Stem("silliness"), "silli" );
	deepEqual( Stem("silling"), "sill" );
	deepEqual( Stem("silly"), "silli" );
	deepEqual( Stem("silva"), "silva" );
	deepEqual( Stem("silver"), "silver" );
	deepEqual( Stem("silvered"), "silver" );
	deepEqual( Stem("silverly"), "silverli" );
	deepEqual( Stem("silvia"), "silvia" );
	deepEqual( Stem("silvius"), "silviu" );
	deepEqual( Stem("sima"), "sima" );
	deepEqual( Stem("simeon"), "simeon" );
	deepEqual( Stem("similar"), "similar" );
	deepEqual( Stem("similarly"), "similarli" );
	deepEqual( Stem("simile"), "simil" );
	deepEqual( Stem("similes"), "simil" );
	deepEqual( Stem("siminary"), "siminari" );
	deepEqual( Stem("simmering"), "simmer" );
	deepEqual( Stem("simois"), "simoi" );
	deepEqual( Stem("simon"), "simon" );
	deepEqual( Stem("simony"), "simoni" );
	deepEqual( Stem("simp"), "simp" );
	deepEqual( Stem("simpcox"), "simpcox" );
	deepEqual( Stem("simper"), "simper" );
	deepEqual( Stem("simpered"), "simper" );
	deepEqual( Stem("simpering"), "simper" );
	deepEqual( Stem("simple"), "simpl" );
	deepEqual( Stem("simpleness"), "simpl" );
	deepEqual( Stem("simpler"), "simpler" );
	deepEqual( Stem("simples"), "simpl" );
	deepEqual( Stem("simplest"), "simplest" );
	deepEqual( Stem("simpleton"), "simpleton" );
	deepEqual( Stem("simplicity"), "simplic" );
	deepEqual( Stem("simply"), "simpli" );
	deepEqual( Stem("simpson"), "simpson" );
	deepEqual( Stem("simular"), "simular" );
	deepEqual( Stem("simulation"), "simul" );
	deepEqual( Stem("sin"), "sin" );
	deepEqual( Stem("since"), "sinc" );
	deepEqual( Stem("sincere"), "sincer" );
	deepEqual( Stem("sincerely"), "sincer" );
	deepEqual( Stem("sincerest"), "sincerest" );
	deepEqual( Stem("sincerity"), "sincer" );
	deepEqual( Stem("sindbad"), "sindbad" );
	deepEqual( Stem("sinecure"), "sinecur" );
	deepEqual( Stem("sinel"), "sinel" );
	deepEqual( Stem("sinew"), "sinew" );
	deepEqual( Stem("sinewed"), "sinew" );
	deepEqual( Stem("sinews"), "sinew" );
	deepEqual( Stem("sinewy"), "sinewi" );
	deepEqual( Stem("sinful"), "sin" );
	deepEqual( Stem("sinfully"), "sinfulli" );
	deepEqual( Stem("sing"), "sing" );
	deepEqual( Stem("singe"), "sing" );
	deepEqual( Stem("singeing"), "sing" );
	deepEqual( Stem("singen"), "singen" );
	deepEqual( Stem("singer"), "singer" );
	deepEqual( Stem("singers"), "singer" );
	deepEqual( Stem("singes"), "sing" );
	deepEqual( Stem("singeth"), "singeth" );
	deepEqual( Stem("singing"), "sing" );
	deepEqual( Stem("single"), "singl" );
	deepEqual( Stem("singled"), "singl" );
	deepEqual( Stem("singleness"), "singl" );
	deepEqual( Stem("singly"), "singli" );
	deepEqual( Stem("sings"), "sing" );
	deepEqual( Stem("singular"), "singular" );
	deepEqual( Stem("singulariter"), "singularit" );
	deepEqual( Stem("singularities"), "singular" );
	deepEqual( Stem("singularity"), "singular" );
	deepEqual( Stem("singularly"), "singularli" );
	deepEqual( Stem("singuled"), "singul" );
	deepEqual( Stem("sinister"), "sinist" );
	deepEqual( Stem("sink"), "sink" );
	deepEqual( Stem("sinking"), "sink" );
	deepEqual( Stem("sinks"), "sink" );
	deepEqual( Stem("sinn"), "sinn" );
	deepEqual( Stem("sinned"), "sin" );
	deepEqual( Stem("sinner"), "sinner" );
	deepEqual( Stem("sinners"), "sinner" );
	deepEqual( Stem("sinning"), "sin" );
	deepEqual( Stem("sinon"), "sinon" );
	deepEqual( Stem("sins"), "sin" );
	deepEqual( Stem("sip"), "sip" );
	deepEqual( Stem("sipped"), "sip" );
	deepEqual( Stem("sipping"), "sip" );
	deepEqual( Stem("sir"), "sir" );
	deepEqual( Stem("sire"), "sire" );
	deepEqual( Stem("siren"), "siren" );
	deepEqual( Stem("sirloin"), "sirloin" );
	deepEqual( Stem("sirrah"), "sirrah" );
	deepEqual( Stem("sirs"), "sir" );
	deepEqual( Stem("sist"), "sist" );
	deepEqual( Stem("sister"), "sister" );
	deepEqual( Stem("sisterhood"), "sisterhood" );
	deepEqual( Stem("sisterly"), "sisterli" );
	deepEqual( Stem("sisters"), "sister" );
	deepEqual( Stem("sit"), "sit" );
	deepEqual( Stem("site"), "site" );
	deepEqual( Stem("sith"), "sith" );
	deepEqual( Stem("sithence"), "sithenc" );
	deepEqual( Stem("sits"), "sit" );
	deepEqual( Stem("sitting"), "sit" );
	deepEqual( Stem("situate"), "situat" );
	deepEqual( Stem("situated"), "situat" );
	deepEqual( Stem("situation"), "situat" );
	deepEqual( Stem("situations"), "situat" );
	deepEqual( Stem("siward"), "siward" );
	deepEqual( Stem("six"), "six" );
	deepEqual( Stem("sixes"), "six" );
	deepEqual( Stem("sixpence"), "sixpenc" );
	deepEqual( Stem("sixpences"), "sixpenc" );
	deepEqual( Stem("sixpenny"), "sixpenni" );
	deepEqual( Stem("sixteen"), "sixteen" );
	deepEqual( Stem("sixth"), "sixth" );
	deepEqual( Stem("sixty"), "sixti" );
	deepEqual( Stem("siz"), "siz" );
	deepEqual( Stem("size"), "size" );
	deepEqual( Stem("sized"), "size" );
	deepEqual( Stem("sizes"), "size" );
	deepEqual( Stem("sizzle"), "sizzl" );
	deepEqual( Stem("skains"), "skain" );
	deepEqual( Stem("skamble"), "skambl" );
	deepEqual( Stem("skating"), "skate" );
	deepEqual( Stem("skein"), "skein" );
	deepEqual( Stem("skeleton"), "skeleton" );
	deepEqual( Stem("skeletons"), "skeleton" );
	deepEqual( Stem("skelter"), "skelter" );
	deepEqual( Stem("sketch"), "sketch" );
	deepEqual( Stem("sketched"), "sketch" );
	deepEqual( Stem("sketches"), "sketch" );
	deepEqual( Stem("sketching"), "sketch" );
	deepEqual( Stem("skies"), "ski" );
	deepEqual( Stem("skilful"), "skil" );
	deepEqual( Stem("skilfully"), "skilfulli" );
	deepEqual( Stem("skill"), "skill" );
	deepEqual( Stem("skilless"), "skilless" );
	deepEqual( Stem("skillet"), "skillet" );
	deepEqual( Stem("skillful"), "skill" );
	deepEqual( Stem("skills"), "skill" );
	deepEqual( Stem("skim"), "skim" );
	deepEqual( Stem("skimble"), "skimbl" );
	deepEqual( Stem("skin"), "skin" );
	deepEqual( Stem("skinker"), "skinker" );
	deepEqual( Stem("skinny"), "skinni" );
	deepEqual( Stem("skins"), "skin" );
	deepEqual( Stem("skip"), "skip" );
	deepEqual( Stem("skipp"), "skipp" );
	deepEqual( Stem("skipped"), "skip" );
	deepEqual( Stem("skipper"), "skipper" );
	deepEqual( Stem("skipping"), "skip" );
	deepEqual( Stem("skirmish"), "skirmish" );
	deepEqual( Stem("skirmishes"), "skirmish" );
	deepEqual( Stem("skirr"), "skirr" );
	deepEqual( Stem("skirt"), "skirt" );
	deepEqual( Stem("skirted"), "skirt" );
	deepEqual( Stem("skirts"), "skirt" );
	deepEqual( Stem("skittish"), "skittish" );
	deepEqual( Stem("skulking"), "skulk" );
	deepEqual( Stem("skull"), "skull" );
	deepEqual( Stem("skulls"), "skull" );
	deepEqual( Stem("sky"), "sky" );
	deepEqual( Stem("skyey"), "skyei" );
	deepEqual( Stem("skyish"), "skyish" );
	deepEqual( Stem("skyward"), "skyward" );
	deepEqual( Stem("skywards"), "skyward" );
	deepEqual( Stem("slab"), "slab" );
	deepEqual( Stem("slack"), "slack" );
	deepEqual( Stem("slackened"), "slacken" );
	deepEqual( Stem("slackly"), "slackli" );
	deepEqual( Stem("slackness"), "slack" );
	deepEqual( Stem("slain"), "slain" );
	deepEqual( Stem("slake"), "slake" );
	deepEqual( Stem("slammed"), "slam" );
	deepEqual( Stem("slamming"), "slam" );
	deepEqual( Stem("sland"), "sland" );
	deepEqual( Stem("slander"), "slander" );
	deepEqual( Stem("slandered"), "slander" );
	deepEqual( Stem("slanderer"), "slander" );
	deepEqual( Stem("slanderers"), "slander" );
	deepEqual( Stem("slandering"), "slander" );
	deepEqual( Stem("slanderous"), "slander" );
	deepEqual( Stem("slanders"), "slander" );
	deepEqual( Stem("slandthering"), "slandther" );
	deepEqual( Stem("slang"), "slang" );
	deepEqual( Stem("slap"), "slap" );
	deepEqual( Stem("slapped"), "slap" );
	deepEqual( Stem("slapping"), "slap" );
	deepEqual( Stem("slash"), "slash" );
	deepEqual( Stem("slatternly"), "slatternli" );
	deepEqual( Stem("slaught"), "slaught" );
	deepEqual( Stem("slaughter"), "slaughter" );
	deepEqual( Stem("slaughtered"), "slaughter" );
	deepEqual( Stem("slaughterer"), "slaughter" );
	deepEqual( Stem("slaughterman"), "slaughterman" );
	deepEqual( Stem("slaughtermen"), "slaughtermen" );
	deepEqual( Stem("slaughterous"), "slaughter" );
	deepEqual( Stem("slaughters"), "slaughter" );
	deepEqual( Stem("slave"), "slave" );
	deepEqual( Stem("slaved"), "slave" );
	deepEqual( Stem("slaver"), "slaver" );
	deepEqual( Stem("slavery"), "slaveri" );
	deepEqual( Stem("slaves"), "slave" );
	deepEqual( Stem("slavish"), "slavish" );
	deepEqual( Stem("slavishness"), "slavish" );
	deepEqual( Stem("slay"), "slai" );
	deepEqual( Stem("slayeth"), "slayeth" );
	deepEqual( Stem("slaying"), "slai" );
	deepEqual( Stem("slays"), "slai" );
	deepEqual( Stem("sleave"), "sleav" );
	deepEqual( Stem("sledded"), "sled" );
	deepEqual( Stem("sleek"), "sleek" );
	deepEqual( Stem("sleekly"), "sleekli" );
	deepEqual( Stem("sleep"), "sleep" );
	deepEqual( Stem("sleeper"), "sleeper" );
	deepEqual( Stem("sleepers"), "sleeper" );
	deepEqual( Stem("sleepest"), "sleepest" );
	deepEqual( Stem("sleeping"), "sleep" );
	deepEqual( Stem("sleepless"), "sleepless" );
	deepEqual( Stem("sleeps"), "sleep" );
	deepEqual( Stem("sleepy"), "sleepi" );
	deepEqual( Stem("sleeve"), "sleev" );
	deepEqual( Stem("sleeves"), "sleev" );
	deepEqual( Stem("sleid"), "sleid" );
	deepEqual( Stem("sleided"), "sleid" );
	deepEqual( Stem("sleight"), "sleight" );
	deepEqual( Stem("sleights"), "sleight" );
	deepEqual( Stem("slender"), "slender" );
	deepEqual( Stem("slenderer"), "slender" );
	deepEqual( Stem("slenderly"), "slenderli" );
	deepEqual( Stem("slenderness"), "slender" );
	deepEqual( Stem("slep"), "slep" );
	deepEqual( Stem("slept"), "slept" );
	deepEqual( Stem("slew"), "slew" );
	deepEqual( Stem("slewest"), "slewest" );
	deepEqual( Stem("slice"), "slice" );
	deepEqual( Stem("slices"), "slice" );
	deepEqual( Stem("slicing"), "slice" );
	deepEqual( Stem("slid"), "slid" );
	deepEqual( Stem("slide"), "slide" );
	deepEqual( Stem("slides"), "slide" );
	deepEqual( Stem("sliding"), "slide" );
	deepEqual( Stem("slight"), "slight" );
	deepEqual( Stem("slighted"), "slight" );
	deepEqual( Stem("slightest"), "slightest" );
	deepEqual( Stem("slightingly"), "slightingli" );
	deepEqual( Stem("slightly"), "slightli" );
	deepEqual( Stem("slightness"), "slight" );
	deepEqual( Stem("slights"), "slight" );
	deepEqual( Stem("slily"), "slili" );
	deepEqual( Stem("slim"), "slim" );
	deepEqual( Stem("slime"), "slime" );
	deepEqual( Stem("slimness"), "slim" );
	deepEqual( Stem("slimy"), "slimi" );
	deepEqual( Stem("sling"), "sling" );
	deepEqual( Stem("slings"), "sling" );
	deepEqual( Stem("slingstone"), "slingston" );
	deepEqual( Stem("slink"), "slink" );
	deepEqual( Stem("slinking"), "slink" );
	deepEqual( Stem("slip"), "slip" );
	deepEqual( Stem("slipp"), "slipp" );
	deepEqual( Stem("slipped"), "slip" );
	deepEqual( Stem("slipper"), "slipper" );
	deepEqual( Stem("slippers"), "slipper" );
	deepEqual( Stem("slippery"), "slipperi" );
	deepEqual( Stem("slips"), "slip" );
	deepEqual( Stem("slipshod"), "slipshod" );
	deepEqual( Stem("slipt"), "slipt" );
	deepEqual( Stem("slish"), "slish" );
	deepEqual( Stem("slit"), "slit" );
	deepEqual( Stem("sliver"), "sliver" );
	deepEqual( Stem("slobb"), "slobb" );
	deepEqual( Stem("slomber"), "slomber" );
	deepEqual( Stem("slop"), "slop" );
	deepEqual( Stem("slope"), "slope" );
	deepEqual( Stem("slopes"), "slope" );
	deepEqual( Stem("sloppy"), "sloppi" );
	deepEqual( Stem("slops"), "slop" );
	deepEqual( Stem("sloth"), "sloth" );
	deepEqual( Stem("slothful"), "sloth" );
	deepEqual( Stem("slouched"), "slouch" );
	deepEqual( Stem("slough"), "slough" );
	deepEqual( Stem("slovenly"), "slovenli" );
	deepEqual( Stem("slovenry"), "slovenri" );
	deepEqual( Stem("slow"), "slow" );
	deepEqual( Stem("slowbore"), "slowbor" );
	deepEqual( Stem("slower"), "slower" );
	deepEqual( Stem("slowly"), "slowli" );
	deepEqual( Stem("slowness"), "slow" );
	deepEqual( Stem("slubber"), "slubber" );
	deepEqual( Stem("slug"), "slug" );
	deepEqual( Stem("sluggard"), "sluggard" );
	deepEqual( Stem("sluggardiz"), "sluggardiz" );
	deepEqual( Stem("sluggish"), "sluggish" );
	deepEqual( Stem("sluggishness"), "sluggish" );
	deepEqual( Stem("sluic"), "sluic" );
	deepEqual( Stem("slumb"), "slumb" );
	deepEqual( Stem("slumber"), "slumber" );
	deepEqual( Stem("slumbering"), "slumber" );
	deepEqual( Stem("slumbers"), "slumber" );
	deepEqual( Stem("slumbery"), "slumberi" );
	deepEqual( Stem("slunk"), "slunk" );
	deepEqual( Stem("slut"), "slut" );
	deepEqual( Stem("sluts"), "slut" );
	deepEqual( Stem("sluttery"), "slutteri" );
	deepEqual( Stem("sluttish"), "sluttish" );
	deepEqual( Stem("sluttishness"), "sluttish" );
	deepEqual( Stem("sly"), "sly" );
	deepEqual( Stem("slys"), "sly" );
	deepEqual( Stem("smack"), "smack" );
	deepEqual( Stem("smacked"), "smack" );
	deepEqual( Stem("smacking"), "smack" );
	deepEqual( Stem("smacks"), "smack" );
	deepEqual( Stem("small"), "small" );
	deepEqual( Stem("smaller"), "smaller" );
	deepEqual( Stem("smallest"), "smallest" );
	deepEqual( Stem("smallness"), "small" );
	deepEqual( Stem("smallpox"), "smallpox" );
	deepEqual( Stem("smalls"), "small" );
	deepEqual( Stem("smalus"), "smalu" );
	deepEqual( Stem("smart"), "smart" );
	deepEqual( Stem("smartest"), "smartest" );
	deepEqual( Stem("smarting"), "smart" );
	deepEqual( Stem("smartly"), "smartli" );
	deepEqual( Stem("smashed"), "smash" );
	deepEqual( Stem("smatch"), "smatch" );
	deepEqual( Stem("smatter"), "smatter" );
	deepEqual( Stem("smear"), "smear" );
	deepEqual( Stem("smee"), "smee" );
	deepEqual( Stem("smell"), "smell" );
	deepEqual( Stem("smelling"), "smell" );
	deepEqual( Stem("smells"), "smell" );
	deepEqual( Stem("smelt"), "smelt" );
	deepEqual( Stem("smil"), "smil" );
	deepEqual( Stem("smile"), "smile" );
	deepEqual( Stem("smiled"), "smile" );
	deepEqual( Stem("smiles"), "smile" );
	deepEqual( Stem("smilest"), "smilest" );
	deepEqual( Stem("smilets"), "smilet" );
	deepEqual( Stem("smiling"), "smile" );
	deepEqual( Stem("smilingly"), "smilingli" );
	deepEqual( Stem("smirch"), "smirch" );
	deepEqual( Stem("smirched"), "smirch" );
	deepEqual( Stem("smirk"), "smirk" );
	deepEqual( Stem("smirked"), "smirk" );
	deepEqual( Stem("smirking"), "smirk" );
	deepEqual( Stem("smit"), "smit" );
	deepEqual( Stem("smite"), "smite" );
	deepEqual( Stem("smites"), "smite" );
	deepEqual( Stem("smith"), "smith" );
	deepEqual( Stem("smithfield"), "smithfield" );
	deepEqual( Stem("smiths"), "smith" );
	deepEqual( Stem("smitten"), "smitten" );
	deepEqual( Stem("smoaking"), "smoak" );
	deepEqual( Stem("smock"), "smock" );
	deepEqual( Stem("smocks"), "smock" );
	deepEqual( Stem("smok"), "smok" );
	deepEqual( Stem("smoke"), "smoke" );
	deepEqual( Stem("smoked"), "smoke" );
	deepEqual( Stem("smokes"), "smoke" );
	deepEqual( Stem("smoking"), "smoke" );
	deepEqual( Stem("smoky"), "smoki" );
	deepEqual( Stem("smollett"), "smollett" );
	deepEqual( Stem("smooth"), "smooth" );
	deepEqual( Stem("smoothed"), "smooth" );
	deepEqual( Stem("smoothing"), "smooth" );
	deepEqual( Stem("smoothly"), "smoothli" );
	deepEqual( Stem("smoothness"), "smooth" );
	deepEqual( Stem("smooths"), "smooth" );
	deepEqual( Stem("smote"), "smote" );
	deepEqual( Stem("smoth"), "smoth" );
	deepEqual( Stem("smother"), "smother" );
	deepEqual( Stem("smothered"), "smother" );
	deepEqual( Stem("smothering"), "smother" );
	deepEqual( Stem("smug"), "smug" );
	deepEqual( Stem("smuggled"), "smuggl" );
	deepEqual( Stem("smuggling"), "smuggl" );
	deepEqual( Stem("smugly"), "smugli" );
	deepEqual( Stem("smulkin"), "smulkin" );
	deepEqual( Stem("smutch"), "smutch" );
	deepEqual( Stem("snack"), "snack" );
	deepEqual( Stem("snaffle"), "snaffl" );
	deepEqual( Stem("snaffler"), "snaffler" );
	deepEqual( Stem("snail"), "snail" );
	deepEqual( Stem("snailby"), "snailbi" );
	deepEqual( Stem("snails"), "snail" );
	deepEqual( Stem("snaily"), "snaili" );
	deepEqual( Stem("snake"), "snake" );
	deepEqual( Stem("snakes"), "snake" );
	deepEqual( Stem("snaky"), "snaki" );
	deepEqual( Stem("snap"), "snap" );
	deepEqual( Stem("snapp"), "snapp" );
	deepEqual( Stem("snapped"), "snap" );
	deepEqual( Stem("snapper"), "snapper" );
	deepEqual( Stem("snapping"), "snap" );
	deepEqual( Stem("snapt"), "snapt" );
	deepEqual( Stem("snar"), "snar" );
	deepEqual( Stem("snare"), "snare" );
	deepEqual( Stem("snares"), "snare" );
	deepEqual( Stem("snarl"), "snarl" );
	deepEqual( Stem("snarled"), "snarl" );
	deepEqual( Stem("snarleth"), "snarleth" );
	deepEqual( Stem("snarling"), "snarl" );
	deepEqual( Stem("snatch"), "snatch" );
	deepEqual( Stem("snatchers"), "snatcher" );
	deepEqual( Stem("snatches"), "snatch" );
	deepEqual( Stem("snatching"), "snatch" );
	deepEqual( Stem("sneak"), "sneak" );
	deepEqual( Stem("sneaked"), "sneak" );
	deepEqual( Stem("sneaking"), "sneak" );
	deepEqual( Stem("sneap"), "sneap" );
	deepEqual( Stem("sneaping"), "sneap" );
	deepEqual( Stem("sneck"), "sneck" );
	deepEqual( Stem("sneer"), "sneer" );
	deepEqual( Stem("sneered"), "sneer" );
	deepEqual( Stem("sneering"), "sneer" );
	deepEqual( Stem("sniffin"), "sniffin" );
	deepEqual( Stem("sniffling"), "sniffl" );
	deepEqual( Stem("snip"), "snip" );
	deepEqual( Stem("snipe"), "snipe" );
	deepEqual( Stem("snipes"), "snipe" );
	deepEqual( Stem("snipping"), "snip" );
	deepEqual( Stem("snipt"), "snipt" );
	deepEqual( Stem("sniveller"), "snivel" );
	deepEqual( Stem("snivelling"), "snivel" );
	deepEqual( Stem("snob"), "snob" );
	deepEqual( Stem("snoozed"), "snooz" );
	deepEqual( Stem("snore"), "snore" );
	deepEqual( Stem("snored"), "snore" );
	deepEqual( Stem("snores"), "snore" );
	deepEqual( Stem("snoring"), "snore" );
	deepEqual( Stem("snorting"), "snort" );
	deepEqual( Stem("snout"), "snout" );
	deepEqual( Stem("snow"), "snow" );
	deepEqual( Stem("snowballs"), "snowbal" );
	deepEqual( Stem("snowed"), "snow" );
	deepEqual( Stem("snowy"), "snowi" );
	deepEqual( Stem("snub"), "snub" );
	deepEqual( Stem("snuff"), "snuff" );
	deepEqual( Stem("snuffle"), "snuffl" );
	deepEqual( Stem("snuffled"), "snuffl" );
	deepEqual( Stem("snuffs"), "snuff" );
	deepEqual( Stem("snuffy"), "snuffi" );
	deepEqual( Stem("snug"), "snug" );
	deepEqual( Stem("so"), "so" );
	deepEqual( Stem("soak"), "soak" );
	deepEqual( Stem("soaking"), "soak" );
	deepEqual( Stem("soaks"), "soak" );
	deepEqual( Stem("soames"), "soam" );
	deepEqual( Stem("soap"), "soap" );
	deepEqual( Stem("soar"), "soar" );
	deepEqual( Stem("soared"), "soar" );
	deepEqual( Stem("soaring"), "soar" );
	deepEqual( Stem("soars"), "soar" );
	deepEqual( Stem("sob"), "sob" );
	deepEqual( Stem("sobbed"), "sob" );
	deepEqual( Stem("sobbing"), "sob" );
	deepEqual( Stem("sober"), "sober" );
	deepEqual( Stem("soberer"), "sober" );
	deepEqual( Stem("soberly"), "soberli" );
	deepEqual( Stem("sobieski"), "sobieski" );
	deepEqual( Stem("sobriety"), "sobrieti" );
	deepEqual( Stem("sobs"), "sob" );
	deepEqual( Stem("sociable"), "sociabl" );
	deepEqual( Stem("social"), "social" );
	deepEqual( Stem("societies"), "societi" );
	deepEqual( Stem("society"), "societi" );
	deepEqual( Stem("socks"), "sock" );
	deepEqual( Stem("socrates"), "socrat" );
	deepEqual( Stem("sod"), "sod" );
	deepEqual( Stem("soda"), "soda" );
	deepEqual( Stem("sodden"), "sodden" );
	deepEqual( Stem("soe"), "soe" );
	deepEqual( Stem("soever"), "soever" );
	deepEqual( Stem("sofa"), "sofa" );
	deepEqual( Stem("soft"), "soft" );
	deepEqual( Stem("soften"), "soften" );
	deepEqual( Stem("softened"), "soften" );
	deepEqual( Stem("softening"), "soften" );
	deepEqual( Stem("softens"), "soften" );
	deepEqual( Stem("softer"), "softer" );
	deepEqual( Stem("softest"), "softest" );
	deepEqual( Stem("softly"), "softli" );
	deepEqual( Stem("softness"), "soft" );
	deepEqual( Stem("sofy"), "sofi" );
	deepEqual( Stem("soho"), "soho" );
	deepEqual( Stem("soil"), "soil" );
	deepEqual( Stem("soiled"), "soil" );
	deepEqual( Stem("soilure"), "soilur" );
	deepEqual( Stem("soiree"), "soire" );
	deepEqual( Stem("soit"), "soit" );
	deepEqual( Stem("sojourn"), "sojourn" );
	deepEqual( Stem("sojourners"), "sojourn" );
	deepEqual( Stem("sol"), "sol" );
	deepEqual( Stem("sola"), "sola" );
	deepEqual( Stem("solace"), "solac" );
	deepEqual( Stem("solaced"), "solac" );
	deepEqual( Stem("solanio"), "solanio" );
	deepEqual( Stem("sold"), "sold" );
	deepEqual( Stem("soldat"), "soldat" );
	deepEqual( Stem("solder"), "solder" );
	deepEqual( Stem("soldest"), "soldest" );
	deepEqual( Stem("soldier"), "soldier" );
	deepEqual( Stem("soldierlike"), "soldierlik" );
	deepEqual( Stem("soldierly"), "soldierli" );
	deepEqual( Stem("soldiers"), "soldier" );
	deepEqual( Stem("soldiership"), "soldiership" );
	deepEqual( Stem("soldiery"), "soldieri" );
	deepEqual( Stem("sole"), "sole" );
	deepEqual( Stem("solely"), "sole" );
	deepEqual( Stem("solem"), "solem" );
	deepEqual( Stem("solemn"), "solemn" );
	deepEqual( Stem("solemness"), "solem" );
	deepEqual( Stem("solemnities"), "solemn" );
	deepEqual( Stem("solemnity"), "solemn" );
	deepEqual( Stem("solemniz"), "solemniz" );
	deepEqual( Stem("solemnize"), "solemn" );
	deepEqual( Stem("solemnized"), "solemn" );
	deepEqual( Stem("solemnly"), "solemnli" );
	deepEqual( Stem("soles"), "sole" );
	deepEqual( Stem("solicit"), "solicit" );
	deepEqual( Stem("solicitation"), "solicit" );
	deepEqual( Stem("solicited"), "solicit" );
	deepEqual( Stem("soliciting"), "solicit" );
	deepEqual( Stem("solicitings"), "solicit" );
	deepEqual( Stem("solicitor"), "solicitor" );
	deepEqual( Stem("solicitors"), "solicitor" );
	deepEqual( Stem("solicits"), "solicit" );
	deepEqual( Stem("solicitude"), "solicitud" );
	deepEqual( Stem("solid"), "solid" );
	deepEqual( Stem("solidares"), "solidar" );
	deepEqual( Stem("solidity"), "solid" );
	deepEqual( Stem("solinus"), "solinu" );
	deepEqual( Stem("solitary"), "solitari" );
	deepEqual( Stem("solitude"), "solitud" );
	deepEqual( Stem("solomon"), "solomon" );
	deepEqual( Stem("solon"), "solon" );
	deepEqual( Stem("solum"), "solum" );
	deepEqual( Stem("solus"), "solu" );
	deepEqual( Stem("solyman"), "solyman" );
	deepEqual( Stem("sombre"), "sombr" );
	deepEqual( Stem("some"), "some" );
	deepEqual( Stem("somebody"), "somebodi" );
	deepEqual( Stem("somehow"), "somehow" );
	deepEqual( Stem("someone"), "someon" );
	deepEqual( Stem("somers"), "somer" );
	deepEqual( Stem("somerset"), "somerset" );
	deepEqual( Stem("somersetshire"), "somersetshir" );
	deepEqual( Stem("somerville"), "somervil" );
	deepEqual( Stem("something"), "someth" );
	deepEqual( Stem("somethink"), "somethink" );
	deepEqual( Stem("sometime"), "sometim" );
	deepEqual( Stem("sometimes"), "sometim" );
	deepEqual( Stem("somever"), "somev" );
	deepEqual( Stem("somewhat"), "somewhat" );
	deepEqual( Stem("somewhere"), "somewher" );
	deepEqual( Stem("somewhither"), "somewhith" );
	deepEqual( Stem("somme"), "somm" );
	deepEqual( Stem("son"), "son" );
	deepEqual( Stem("sonance"), "sonanc" );
	deepEqual( Stem("sonata"), "sonata" );
	deepEqual( Stem("sonatas"), "sonata" );
	deepEqual( Stem("song"), "song" );
	deepEqual( Stem("songs"), "song" );
	deepEqual( Stem("songsters"), "songster" );
	deepEqual( Stem("sonnambula"), "sonnambula" );
	deepEqual( Stem("sonnet"), "sonnet" );
	deepEqual( Stem("sonneting"), "sonnet" );
	deepEqual( Stem("sonnets"), "sonnet" );
	deepEqual( Stem("sonorous"), "sonor" );
	deepEqual( Stem("sons"), "son" );
	deepEqual( Stem("sont"), "sont" );
	deepEqual( Stem("sonties"), "sonti" );
	deepEqual( Stem("soon"), "soon" );
	deepEqual( Stem("sooner"), "sooner" );
	deepEqual( Stem("soonest"), "soonest" );
	deepEqual( Stem("sooth"), "sooth" );
	deepEqual( Stem("soothe"), "sooth" );
	deepEqual( Stem("soothed"), "sooth" );
	deepEqual( Stem("soothers"), "soother" );
	deepEqual( Stem("soothing"), "sooth" );
	deepEqual( Stem("soothingly"), "soothingli" );
	deepEqual( Stem("soothsay"), "soothsai" );
	deepEqual( Stem("soothsayer"), "soothsay" );
	deepEqual( Stem("sooty"), "sooti" );
	deepEqual( Stem("sop"), "sop" );
	deepEqual( Stem("sophia"), "sophia" );
	deepEqual( Stem("sophister"), "sophist" );
	deepEqual( Stem("sophisticated"), "sophist" );
	deepEqual( Stem("sophy"), "sophi" );
	deepEqual( Stem("sops"), "sop" );
	deepEqual( Stem("sor"), "sor" );
	deepEqual( Stem("sorcerer"), "sorcer" );
	deepEqual( Stem("sorcerers"), "sorcer" );
	deepEqual( Stem("sorceress"), "sorceress" );
	deepEqual( Stem("sorceries"), "sorceri" );
	deepEqual( Stem("sorcery"), "sorceri" );
	deepEqual( Stem("sordid"), "sordid" );
	deepEqual( Stem("sore"), "sore" );
	deepEqual( Stem("sorel"), "sorel" );
	deepEqual( Stem("sorely"), "sore" );
	deepEqual( Stem("sorer"), "sorer" );
	deepEqual( Stem("sores"), "sore" );
	deepEqual( Stem("sorrier"), "sorrier" );
	deepEqual( Stem("sorriest"), "sorriest" );
	deepEqual( Stem("sorrow"), "sorrow" );
	deepEqual( Stem("sorrowed"), "sorrow" );
	deepEqual( Stem("sorrowest"), "sorrowest" );
	deepEqual( Stem("sorrowful"), "sorrow" );
	deepEqual( Stem("sorrowfully"), "sorrowfulli" );
	deepEqual( Stem("sorrowing"), "sorrow" );
	deepEqual( Stem("sorrows"), "sorrow" );
	deepEqual( Stem("sorry"), "sorri" );
	deepEqual( Stem("sort"), "sort" );
	deepEqual( Stem("sortance"), "sortanc" );
	deepEqual( Stem("sorted"), "sort" );
	deepEqual( Stem("sorting"), "sort" );
	deepEqual( Stem("sorts"), "sort" );
	deepEqual( Stem("sospiri"), "sospiri" );
	deepEqual( Stem("sossius"), "sossiu" );
	deepEqual( Stem("sot"), "sot" );
	deepEqual( Stem("soto"), "soto" );
	deepEqual( Stem("sots"), "sot" );
	deepEqual( Stem("sottish"), "sottish" );
	deepEqual( Stem("soud"), "soud" );
	deepEqual( Stem("sought"), "sought" );
	deepEqual( Stem("soul"), "soul" );
	deepEqual( Stem("sould"), "sould" );
	deepEqual( Stem("souled"), "soul" );
	deepEqual( Stem("soulless"), "soulless" );
	deepEqual( Stem("souls"), "soul" );
	deepEqual( Stem("sound"), "sound" );
	deepEqual( Stem("sounded"), "sound" );
	deepEqual( Stem("sounder"), "sounder" );
	deepEqual( Stem("soundest"), "soundest" );
	deepEqual( Stem("sounding"), "sound" );
	deepEqual( Stem("soundless"), "soundless" );
	deepEqual( Stem("soundly"), "soundli" );
	deepEqual( Stem("soundness"), "sound" );
	deepEqual( Stem("soundpost"), "soundpost" );
	deepEqual( Stem("sounds"), "sound" );
	deepEqual( Stem("soup"), "soup" );
	deepEqual( Stem("sour"), "sour" );
	deepEqual( Stem("source"), "sourc" );
	deepEqual( Stem("sources"), "sourc" );
	deepEqual( Stem("soured"), "sour" );
	deepEqual( Stem("sourest"), "sourest" );
	deepEqual( Stem("sourly"), "sourli" );
	deepEqual( Stem("sournois"), "sournoi" );
	deepEqual( Stem("sours"), "sour" );
	deepEqual( Stem("sous"), "sou" );
	deepEqual( Stem("souse"), "sous" );
	deepEqual( Stem("south"), "south" );
	deepEqual( Stem("southam"), "southam" );
	deepEqual( Stem("southampton"), "southampton" );
	deepEqual( Stem("southdown"), "southdown" );
	deepEqual( Stem("southdowns"), "southdown" );
	deepEqual( Stem("southerly"), "southerli" );
	deepEqual( Stem("southern"), "southern" );
	deepEqual( Stem("southward"), "southward" );
	deepEqual( Stem("southwark"), "southwark" );
	deepEqual( Stem("southwell"), "southwel" );
	deepEqual( Stem("souviendrai"), "souviendrai" );
	deepEqual( Stem("sov"), "sov" );
	deepEqual( Stem("sovereign"), "sovereign" );
	deepEqual( Stem("sovereignest"), "sovereignest" );
	deepEqual( Stem("sovereignly"), "sovereignli" );
	deepEqual( Stem("sovereigns"), "sovereign" );
	deepEqual( Stem("sovereignty"), "sovereignti" );
	deepEqual( Stem("sovereignvours"), "sovereignvour" );
	deepEqual( Stem("sow"), "sow" );
	deepEqual( Stem("sowing"), "sow" );
	deepEqual( Stem("sowl"), "sowl" );
	deepEqual( Stem("sown"), "sown" );
	deepEqual( Stem("sowster"), "sowster" );
	deepEqual( Stem("sowter"), "sowter" );
	deepEqual( Stem("soyer"), "soyer" );
	deepEqual( Stem("space"), "space" );
	deepEqual( Stem("spaces"), "space" );
	deepEqual( Stem("spacious"), "spaciou" );
	deepEqual( Stem("spade"), "spade" );
	deepEqual( Stem("spades"), "spade" );
	deepEqual( Stem("spain"), "spain" );
	deepEqual( Stem("spak"), "spak" );
	deepEqual( Stem("spake"), "spake" );
	deepEqual( Stem("spakest"), "spakest" );
	deepEqual( Stem("span"), "span" );
	deepEqual( Stem("spangle"), "spangl" );
	deepEqual( Stem("spangled"), "spangl" );
	deepEqual( Stem("spangles"), "spangl" );
	deepEqual( Stem("spaniard"), "spaniard" );
	deepEqual( Stem("spaniards"), "spaniard" );
	deepEqual( Stem("spaniel"), "spaniel" );
	deepEqual( Stem("spaniels"), "spaniel" );
	deepEqual( Stem("spanil"), "spanil" );
	deepEqual( Stem("spanish"), "spanish" );
	deepEqual( Stem("spann"), "spann" );
	deepEqual( Stem("spans"), "span" );
	deepEqual( Stem("spar"), "spar" );
	deepEqual( Stem("spare"), "spare" );
	deepEqual( Stem("spared"), "spare" );
	deepEqual( Stem("spares"), "spare" );
	deepEqual( Stem("sparing"), "spare" );
	deepEqual( Stem("sparingly"), "sparingli" );
	deepEqual( Stem("spark"), "spark" );
	deepEqual( Stem("sparkle"), "sparkl" );
	deepEqual( Stem("sparkled"), "sparkl" );
	deepEqual( Stem("sparkles"), "sparkl" );
	deepEqual( Stem("sparkling"), "sparkl" );
	deepEqual( Stem("sparks"), "spark" );
	deepEqual( Stem("sparrow"), "sparrow" );
	deepEqual( Stem("sparrows"), "sparrow" );
	deepEqual( Stem("sparta"), "sparta" );
	deepEqual( Stem("spartan"), "spartan" );
	deepEqual( Stem("spatter"), "spatter" );
	deepEqual( Stem("spatterdash"), "spatterdash" );
	deepEqual( Stem("spavin"), "spavin" );
	deepEqual( Stem("spavins"), "spavin" );
	deepEqual( Stem("spawn"), "spawn" );
	deepEqual( Stem("speak"), "speak" );
	deepEqual( Stem("speaker"), "speaker" );
	deepEqual( Stem("speakers"), "speaker" );
	deepEqual( Stem("speakest"), "speakest" );
	deepEqual( Stem("speaketh"), "speaketh" );
	deepEqual( Stem("speaking"), "speak" );
	deepEqual( Stem("speaks"), "speak" );
	deepEqual( Stem("spear"), "spear" );
	deepEqual( Stem("speared"), "spear" );
	deepEqual( Stem("speargrass"), "speargrass" );
	deepEqual( Stem("spears"), "spear" );
	deepEqual( Stem("spec"), "spec" );
	deepEqual( Stem("special"), "special" );
	deepEqual( Stem("specialities"), "special" );
	deepEqual( Stem("specially"), "special" );
	deepEqual( Stem("specialties"), "specialti" );
	deepEqual( Stem("specialty"), "specialti" );
	deepEqual( Stem("species"), "speci" );
	deepEqual( Stem("specific"), "specif" );
	deepEqual( Stem("specified"), "specifi" );
	deepEqual( Stem("specify"), "specifi" );
	deepEqual( Stem("specimen"), "specimen" );
	deepEqual( Stem("specimens"), "specimen" );
	deepEqual( Stem("speciously"), "specious" );
	deepEqual( Stem("speckled"), "speckl" );
	deepEqual( Stem("speckling"), "speckl" );
	deepEqual( Stem("spectacle"), "spectacl" );
	deepEqual( Stem("spectacled"), "spectacl" );
	deepEqual( Stem("spectacles"), "spectacl" );
	deepEqual( Stem("spectators"), "spectat" );
	deepEqual( Stem("spectatorship"), "spectatorship" );
	deepEqual( Stem("speculate"), "specul" );
	deepEqual( Stem("speculated"), "specul" );
	deepEqual( Stem("speculating"), "specul" );
	deepEqual( Stem("speculation"), "specul" );
	deepEqual( Stem("speculations"), "specul" );
	deepEqual( Stem("speculative"), "specul" );
	deepEqual( Stem("speculator"), "specul" );
	deepEqual( Stem("sped"), "sped" );
	deepEqual( Stem("speech"), "speech" );
	deepEqual( Stem("speeches"), "speech" );
	deepEqual( Stem("speechifying"), "speechifi" );
	deepEqual( Stem("speechless"), "speechless" );
	deepEqual( Stem("speechlessly"), "speechlessli" );
	deepEqual( Stem("speed"), "speed" );
	deepEqual( Stem("speeded"), "speed" );
	deepEqual( Stem("speedier"), "speedier" );
	deepEqual( Stem("speediest"), "speediest" );
	deepEqual( Stem("speedily"), "speedili" );
	deepEqual( Stem("speediness"), "speedi" );
	deepEqual( Stem("speeding"), "speed" );
	deepEqual( Stem("speeds"), "speed" );
	deepEqual( Stem("speedy"), "speedi" );
	deepEqual( Stem("speens"), "speen" );
	deepEqual( Stem("spell"), "spell" );
	deepEqual( Stem("spelling"), "spell" );
	deepEqual( Stem("spells"), "spell" );
	deepEqual( Stem("spelt"), "spelt" );
	deepEqual( Stem("spencer"), "spencer" );
	deepEqual( Stem("spend"), "spend" );
	deepEqual( Stem("spendest"), "spendest" );
	deepEqual( Stem("spending"), "spend" );
	deepEqual( Stem("spends"), "spend" );
	deepEqual( Stem("spendthrift"), "spendthrift" );
	deepEqual( Stem("spenser"), "spenser" );
	deepEqual( Stem("spent"), "spent" );
	deepEqual( Stem("sperato"), "sperato" );
	deepEqual( Stem("sperm"), "sperm" );
	deepEqual( Stem("spero"), "spero" );
	deepEqual( Stem("sperr"), "sperr" );
	deepEqual( Stem("spher"), "spher" );
	deepEqual( Stem("sphere"), "sphere" );
	deepEqual( Stem("sphered"), "sphere" );
	deepEqual( Stem("spheres"), "sphere" );
	deepEqual( Stem("spherical"), "spheric" );
	deepEqual( Stem("sphery"), "spheri" );
	deepEqual( Stem("sphinx"), "sphinx" );
	deepEqual( Stem("spice"), "spice" );
	deepEqual( Stem("spiced"), "spice" );
	deepEqual( Stem("spicery"), "spiceri" );
	deepEqual( Stem("spices"), "spice" );
	deepEqual( Stem("spicy"), "spici" );
	deepEqual( Stem("spider"), "spider" );
	deepEqual( Stem("spiders"), "spider" );
	deepEqual( Stem("spied"), "spi" );
	deepEqual( Stem("spies"), "spi" );
	deepEqual( Stem("spieth"), "spieth" );
	deepEqual( Stem("spiggot"), "spiggot" );
	deepEqual( Stem("spightfully"), "spightfulli" );
	deepEqual( Stem("spigot"), "spigot" );
	deepEqual( Stem("spill"), "spill" );
	deepEqual( Stem("spilling"), "spill" );
	deepEqual( Stem("spills"), "spill" );
	deepEqual( Stem("spilt"), "spilt" );
	deepEqual( Stem("spilth"), "spilth" );
	deepEqual( Stem("spin"), "spin" );
	deepEqual( Stem("spindle"), "spindl" );
	deepEqual( Stem("spinets"), "spinet" );
	deepEqual( Stem("spinii"), "spinii" );
	deepEqual( Stem("spinners"), "spinner" );
	deepEqual( Stem("spinney"), "spinnei" );
	deepEqual( Stem("spinning"), "spin" );
	deepEqual( Stem("spinster"), "spinster" );
	deepEqual( Stem("spinsters"), "spinster" );
	deepEqual( Stem("spire"), "spire" );
	deepEqual( Stem("spires"), "spire" );
	deepEqual( Stem("spirit"), "spirit" );
	deepEqual( Stem("spirited"), "spirit" );
	deepEqual( Stem("spiritless"), "spiritless" );
	deepEqual( Stem("spirits"), "spirit" );
	deepEqual( Stem("spiritual"), "spiritu" );
	deepEqual( Stem("spiritualty"), "spiritualti" );
	deepEqual( Stem("spirituelle"), "spirituel" );
	deepEqual( Stem("spirt"), "spirt" );
	deepEqual( Stem("spit"), "spit" );
	deepEqual( Stem("spital"), "spital" );
	deepEqual( Stem("spite"), "spite" );
	deepEqual( Stem("spited"), "spite" );
	deepEqual( Stem("spiteful"), "spite" );
	deepEqual( Stem("spites"), "spite" );
	deepEqual( Stem("spits"), "spit" );
	deepEqual( Stem("spitted"), "spit" );
	deepEqual( Stem("spitting"), "spit" );
	deepEqual( Stem("spittoons"), "spittoon" );
	deepEqual( Stem("splashed"), "splash" );
	deepEqual( Stem("splashing"), "splash" );
	deepEqual( Stem("splay"), "splai" );
	deepEqual( Stem("spleen"), "spleen" );
	deepEqual( Stem("spleenful"), "spleen" );
	deepEqual( Stem("spleens"), "spleen" );
	deepEqual( Stem("spleeny"), "spleeni" );
	deepEqual( Stem("splendid"), "splendid" );
	deepEqual( Stem("splendidly"), "splendidli" );
	deepEqual( Stem("splendour"), "splendour" );
	deepEqual( Stem("splendours"), "splendour" );
	deepEqual( Stem("splenitive"), "splenit" );
	deepEqual( Stem("splinter"), "splinter" );
	deepEqual( Stem("splinters"), "splinter" );
	deepEqual( Stem("split"), "split" );
	deepEqual( Stem("splits"), "split" );
	deepEqual( Stem("splitted"), "split" );
	deepEqual( Stem("splitting"), "split" );
	deepEqual( Stem("spoff"), "spoff" );
	deepEqual( Stem("spoil"), "spoil" );
	deepEqual( Stem("spoiled"), "spoil" );
	deepEqual( Stem("spoils"), "spoil" );
	deepEqual( Stem("spok"), "spok" );
	deepEqual( Stem("spoke"), "spoke" );
	deepEqual( Stem("spoken"), "spoken" );
	deepEqual( Stem("spokes"), "spoke" );
	deepEqual( Stem("spokesman"), "spokesman" );
	deepEqual( Stem("sponge"), "spong" );
	deepEqual( Stem("spongy"), "spongi" );
	deepEqual( Stem("sponsor"), "sponsor" );
	deepEqual( Stem("spontaneously"), "spontan" );
	deepEqual( Stem("spoon"), "spoon" );
	deepEqual( Stem("spooney"), "spoonei" );
	deepEqual( Stem("spoons"), "spoon" );
	deepEqual( Stem("sport"), "sport" );
	deepEqual( Stem("sported"), "sport" );
	deepEqual( Stem("sportful"), "sport" );
	deepEqual( Stem("sporting"), "sport" );
	deepEqual( Stem("sportive"), "sportiv" );
	deepEqual( Stem("sports"), "sport" );
	deepEqual( Stem("sportsmanlike"), "sportsmanlik" );
	deepEqual( Stem("spot"), "spot" );
	deepEqual( Stem("spotless"), "spotless" );
	deepEqual( Stem("spots"), "spot" );
	deepEqual( Stem("spotted"), "spot" );
	deepEqual( Stem("spousal"), "spousal" );
	deepEqual( Stem("spouse"), "spous" );
	deepEqual( Stem("spout"), "spout" );
	deepEqual( Stem("spouting"), "spout" );
	deepEqual( Stem("spouts"), "spout" );
	deepEqual( Stem("sprag"), "sprag" );
	deepEqual( Stem("sprang"), "sprang" );
	deepEqual( Stem("sprat"), "sprat" );
	deepEqual( Stem("sprawl"), "sprawl" );
	deepEqual( Stem("sprawling"), "sprawl" );
	deepEqual( Stem("spray"), "sprai" );
	deepEqual( Stem("sprays"), "sprai" );
	deepEqual( Stem("spread"), "spread" );
	deepEqual( Stem("spreading"), "spread" );
	deepEqual( Stem("spreads"), "spread" );
	deepEqual( Stem("sprig"), "sprig" );
	deepEqual( Stem("sprigged"), "sprig" );
	deepEqual( Stem("sprighted"), "spright" );
	deepEqual( Stem("sprightful"), "spright" );
	deepEqual( Stem("sprightliness"), "sprightli" );
	deepEqual( Stem("sprightly"), "sprightli" );
	deepEqual( Stem("sprigs"), "sprig" );
	deepEqual( Stem("spring"), "spring" );
	deepEqual( Stem("springbock"), "springbock" );
	deepEqual( Stem("springe"), "spring" );
	deepEqual( Stem("springes"), "spring" );
	deepEqual( Stem("springeth"), "springeth" );
	deepEqual( Stem("springhalt"), "springhalt" );
	deepEqual( Stem("springing"), "spring" );
	deepEqual( Stem("springs"), "spring" );
	deepEqual( Stem("springtime"), "springtim" );
	deepEqual( Stem("sprinkle"), "sprinkl" );
	deepEqual( Stem("sprinkled"), "sprinkl" );
	deepEqual( Stem("sprinkles"), "sprinkl" );
	deepEqual( Stem("sprite"), "sprite" );
	deepEqual( Stem("sprited"), "sprite" );
	deepEqual( Stem("spritely"), "sprite" );
	deepEqual( Stem("sprites"), "sprite" );
	deepEqual( Stem("spriting"), "sprite" );
	deepEqual( Stem("sprout"), "sprout" );
	deepEqual( Stem("spruce"), "spruce" );
	deepEqual( Stem("sprung"), "sprung" );
	deepEqual( Stem("spud"), "spud" );
	deepEqual( Stem("spun"), "spun" );
	deepEqual( Stem("spunging"), "spung" );
	deepEqual( Stem("spur"), "spur" );
	deepEqual( Stem("spurio"), "spurio" );
	deepEqual( Stem("spurn"), "spurn" );
	deepEqual( Stem("spurned"), "spurn" );
	deepEqual( Stem("spurns"), "spurn" );
	deepEqual( Stem("spurr"), "spurr" );
	deepEqual( Stem("spurrer"), "spurrer" );
	deepEqual( Stem("spurring"), "spur" );
	deepEqual( Stem("spurs"), "spur" );
	deepEqual( Stem("sputter"), "sputter" );
	deepEqual( Stem("sputtering"), "sputter" );
	deepEqual( Stem("spy"), "spy" );
	deepEqual( Stem("spying"), "spy" );
	deepEqual( Stem("squabble"), "squabbl" );
	deepEqual( Stem("squadron"), "squadron" );
	deepEqual( Stem("squadrons"), "squadron" );
	deepEqual( Stem("squads"), "squad" );
	deepEqual( Stem("squalled"), "squall" );
	deepEqual( Stem("squalling"), "squall" );
	deepEqual( Stem("squand"), "squand" );
	deepEqual( Stem("squar"), "squar" );
	deepEqual( Stem("square"), "squar" );
	deepEqual( Stem("squared"), "squar" );
	deepEqual( Stem("squarer"), "squarer" );
	deepEqual( Stem("squares"), "squar" );
	deepEqual( Stem("squaretoes"), "squareto" );
	deepEqual( Stem("squaring"), "squar" );
	deepEqual( Stem("squash"), "squash" );
	deepEqual( Stem("squashmore"), "squashmor" );
	deepEqual( Stem("squeak"), "squeak" );
	deepEqual( Stem("squeaked"), "squeak" );
	deepEqual( Stem("squeaking"), "squeak" );
	deepEqual( Stem("squeal"), "squeal" );
	deepEqual( Stem("squealing"), "squeal" );
	deepEqual( Stem("squeamish"), "squeamish" );
	deepEqual( Stem("squeams"), "squeam" );
	deepEqual( Stem("squeer"), "squeer" );
	deepEqual( Stem("squeeze"), "squeez" );
	deepEqual( Stem("squeezed"), "squeez" );
	deepEqual( Stem("squeezes"), "squeez" );
	deepEqual( Stem("squeezing"), "squeez" );
	deepEqual( Stem("squele"), "squel" );
	deepEqual( Stem("squier"), "squier" );
	deepEqual( Stem("squills"), "squill" );
	deepEqual( Stem("squints"), "squint" );
	deepEqual( Stem("squiny"), "squini" );
	deepEqual( Stem("squire"), "squir" );
	deepEqual( Stem("squires"), "squir" );
	deepEqual( Stem("squirrel"), "squirrel" );
	deepEqual( Stem("st"), "st" );
	deepEqual( Stem("stab"), "stab" );
	deepEqual( Stem("stabb"), "stabb" );
	deepEqual( Stem("stabbed"), "stab" );
	deepEqual( Stem("stabbing"), "stab" );
	deepEqual( Stem("stable"), "stabl" );
	deepEqual( Stem("stablemen"), "stablemen" );
	deepEqual( Stem("stableness"), "stabl" );
	deepEqual( Stem("stables"), "stabl" );
	deepEqual( Stem("stablish"), "stablish" );
	deepEqual( Stem("stablishment"), "stablish" );
	deepEqual( Stem("stabs"), "stab" );
	deepEqual( Stem("stacks"), "stack" );
	deepEqual( Stem("stadthaus"), "stadthau" );
	deepEqual( Stem("staff"), "staff" );
	deepEqual( Stem("stafford"), "stafford" );
	deepEqual( Stem("staffords"), "stafford" );
	deepEqual( Stem("staffordshire"), "staffordshir" );
	deepEqual( Stem("stag"), "stag" );
	deepEqual( Stem("stage"), "stage" );
	deepEqual( Stem("stages"), "stage" );
	deepEqual( Stem("stagger"), "stagger" );
	deepEqual( Stem("staggered"), "stagger" );
	deepEqual( Stem("staggering"), "stagger" );
	deepEqual( Stem("staggers"), "stagger" );
	deepEqual( Stem("stags"), "stag" );
	deepEqual( Stem("staid"), "staid" );
	deepEqual( Stem("staider"), "staider" );
	deepEqual( Stem("stain"), "stain" );
	deepEqual( Stem("stained"), "stain" );
	deepEqual( Stem("staines"), "stain" );
	deepEqual( Stem("staineth"), "staineth" );
	deepEqual( Stem("staining"), "stain" );
	deepEqual( Stem("stainless"), "stainless" );
	deepEqual( Stem("stains"), "stain" );
	deepEqual( Stem("stair"), "stair" );
	deepEqual( Stem("staircase"), "staircas" );
	deepEqual( Stem("staircases"), "staircas" );
	deepEqual( Stem("stairs"), "stair" );
	deepEqual( Stem("stake"), "stake" );
	deepEqual( Stem("staked"), "stake" );
	deepEqual( Stem("stakes"), "stake" );
	deepEqual( Stem("stale"), "stale" );
	deepEqual( Stem("staled"), "stale" );
	deepEqual( Stem("stalk"), "stalk" );
	deepEqual( Stem("stalked"), "stalk" );
	deepEqual( Stem("stalking"), "stalk" );
	deepEqual( Stem("stalks"), "stalk" );
	deepEqual( Stem("stall"), "stall" );
	deepEqual( Stem("stalled"), "stall" );
	deepEqual( Stem("stalling"), "stall" );
	deepEqual( Stem("stalls"), "stall" );
	deepEqual( Stem("stalwart"), "stalwart" );
	deepEqual( Stem("stamford"), "stamford" );
	deepEqual( Stem("stammer"), "stammer" );
	deepEqual( Stem("stammered"), "stammer" );
	deepEqual( Stem("stammering"), "stammer" );
	deepEqual( Stem("stamp"), "stamp" );
	deepEqual( Stem("stamped"), "stamp" );
	deepEqual( Stem("stamping"), "stamp" );
	deepEqual( Stem("stamps"), "stamp" );
	deepEqual( Stem("stances"), "stanc" );
	deepEqual( Stem("stanch"), "stanch" );
	deepEqual( Stem("stanchless"), "stanchless" );
	deepEqual( Stem("stand"), "stand" );
	deepEqual( Stem("standard"), "standard" );
	deepEqual( Stem("standards"), "standard" );
	deepEqual( Stem("stander"), "stander" );
	deepEqual( Stem("standers"), "stander" );
	deepEqual( Stem("standest"), "standest" );
	deepEqual( Stem("standeth"), "standeth" );
	deepEqual( Stem("standing"), "stand" );
	deepEqual( Stem("stands"), "stand" );
	deepEqual( Stem("stanhope"), "stanhop" );
	deepEqual( Stem("staniel"), "staniel" );
	deepEqual( Stem("stanley"), "stanlei" );
	deepEqual( Stem("stanza"), "stanza" );
	deepEqual( Stem("stanzas"), "stanza" );
	deepEqual( Stem("stanze"), "stanz" );
	deepEqual( Stem("stanzo"), "stanzo" );
	deepEqual( Stem("stanzos"), "stanzo" );
	deepEqual( Stem("staple"), "stapl" );
	deepEqual( Stem("staples"), "stapl" );
	deepEqual( Stem("star"), "star" );
	deepEqual( Stem("starch"), "starch" );
	deepEqual( Stem("starched"), "starch" );
	deepEqual( Stem("stare"), "stare" );
	deepEqual( Stem("stared"), "stare" );
	deepEqual( Stem("stares"), "stare" );
	deepEqual( Stem("staring"), "stare" );
	deepEqual( Stem("starings"), "stare" );
	deepEqual( Stem("stark"), "stark" );
	deepEqual( Stem("starkly"), "starkli" );
	deepEqual( Stem("starlight"), "starlight" );
	deepEqual( Stem("starling"), "starl" );
	deepEqual( Stem("starr"), "starr" );
	deepEqual( Stem("starry"), "starri" );
	deepEqual( Stem("stars"), "star" );
	deepEqual( Stem("start"), "start" );
	deepEqual( Stem("started"), "start" );
	deepEqual( Stem("starting"), "start" );
	deepEqual( Stem("startingly"), "startingli" );
	deepEqual( Stem("startle"), "startl" );
	deepEqual( Stem("startled"), "startl" );
	deepEqual( Stem("startles"), "startl" );
	deepEqual( Stem("startling"), "startl" );
	deepEqual( Stem("starts"), "start" );
	deepEqual( Stem("starv"), "starv" );
	deepEqual( Stem("starvation"), "starvat" );
	deepEqual( Stem("starve"), "starv" );
	deepEqual( Stem("starved"), "starv" );
	deepEqual( Stem("starvelackey"), "starvelackei" );
	deepEqual( Stem("starveling"), "starvel" );
	deepEqual( Stem("starveth"), "starveth" );
	deepEqual( Stem("starving"), "starv" );
	deepEqual( Stem("state"), "state" );
	deepEqual( Stem("stated"), "state" );
	deepEqual( Stem("statelier"), "stateli" );
	deepEqual( Stem("stately"), "state" );
	deepEqual( Stem("statement"), "statement" );
	deepEqual( Stem("statements"), "statement" );
	deepEqual( Stem("states"), "state" );
	deepEqual( Stem("statesman"), "statesman" );
	deepEqual( Stem("statesmanlike"), "statesmanlik" );
	deepEqual( Stem("statesmen"), "statesmen" );
	deepEqual( Stem("statilius"), "statiliu" );
	deepEqual( Stem("stating"), "state" );
	deepEqual( Stem("station"), "station" );
	deepEqual( Stem("stationary"), "stationari" );
	deepEqual( Stem("stationed"), "station" );
	deepEqual( Stem("stationer"), "station" );
	deepEqual( Stem("statist"), "statist" );
	deepEqual( Stem("statists"), "statist" );
	deepEqual( Stem("statuaries"), "statuari" );
	deepEqual( Stem("statue"), "statu" );
	deepEqual( Stem("statues"), "statu" );
	deepEqual( Stem("stature"), "statur" );
	deepEqual( Stem("statures"), "statur" );
	deepEqual( Stem("statute"), "statut" );
	deepEqual( Stem("statutes"), "statut" );
	deepEqual( Stem("staunch"), "staunch" );
	deepEqual( Stem("stave"), "stave" );
	deepEqual( Stem("staves"), "stave" );
	deepEqual( Stem("stay"), "stai" );
	deepEqual( Stem("stayed"), "stai" );
	deepEqual( Stem("stayest"), "stayest" );
	deepEqual( Stem("staying"), "stai" );
	deepEqual( Stem("stays"), "stai" );
	deepEqual( Stem("stayt"), "stayt" );
	deepEqual( Stem("ste"), "ste" );
	deepEqual( Stem("stead"), "stead" );
	deepEqual( Stem("steaded"), "stead" );
	deepEqual( Stem("steadfast"), "steadfast" );
	deepEqual( Stem("steadfastly"), "steadfastli" );
	deepEqual( Stem("steadier"), "steadier" );
	deepEqual( Stem("steadily"), "steadili" );
	deepEqual( Stem("steadiness"), "steadi" );
	deepEqual( Stem("steads"), "stead" );
	deepEqual( Stem("steal"), "steal" );
	deepEqual( Stem("stealer"), "stealer" );
	deepEqual( Stem("stealers"), "stealer" );
	deepEqual( Stem("stealing"), "steal" );
	deepEqual( Stem("steals"), "steal" );
	deepEqual( Stem("stealth"), "stealth" );
	deepEqual( Stem("stealthily"), "stealthili" );
	deepEqual( Stem("stealthy"), "stealthi" );
	deepEqual( Stem("steam"), "steam" );
	deepEqual( Stem("steamboat"), "steamboat" );
	deepEqual( Stem("steamer"), "steamer" );
	deepEqual( Stem("steamers"), "steamer" );
	deepEqual( Stem("steaming"), "steam" );
	deepEqual( Stem("stearing"), "stear" );
	deepEqual( Stem("steed"), "steed" );
	deepEqual( Stem("steeds"), "steed" );
	deepEqual( Stem("steel"), "steel" );
	deepEqual( Stem("steeled"), "steel" );
	deepEqual( Stem("steely"), "steeli" );
	deepEqual( Stem("steep"), "steep" );
	deepEqual( Stem("steeped"), "steep" );
	deepEqual( Stem("steeple"), "steepl" );
	deepEqual( Stem("steeplechase"), "steeplechas" );
	deepEqual( Stem("steeples"), "steepl" );
	deepEqual( Stem("steeps"), "steep" );
	deepEqual( Stem("steepy"), "steepi" );
	deepEqual( Stem("steer"), "steer" );
	deepEqual( Stem("steerage"), "steerag" );
	deepEqual( Stem("steering"), "steer" );
	deepEqual( Stem("steers"), "steer" );
	deepEqual( Stem("steersman"), "steersman" );
	deepEqual( Stem("stelled"), "stell" );
	deepEqual( Stem("stem"), "stem" );
	deepEqual( Stem("stemming"), "stem" );
	deepEqual( Stem("stench"), "stench" );
	deepEqual( Stem("step"), "step" );
	deepEqual( Stem("stepdame"), "stepdam" );
	deepEqual( Stem("stephano"), "stephano" );
	deepEqual( Stem("stephen"), "stephen" );
	deepEqual( Stem("stephens"), "stephen" );
	deepEqual( Stem("stepmothers"), "stepmoth" );
	deepEqual( Stem("stepp"), "stepp" );
	deepEqual( Stem("stepped"), "step" );
	deepEqual( Stem("stepping"), "step" );
	deepEqual( Stem("steps"), "step" );
	deepEqual( Stem("stepson"), "stepson" );
	deepEqual( Stem("stept"), "stept" );
	deepEqual( Stem("sterile"), "steril" );
	deepEqual( Stem("sterility"), "steril" );
	deepEqual( Stem("sterling"), "sterl" );
	deepEqual( Stem("stern"), "stern" );
	deepEqual( Stem("sternage"), "sternag" );
	deepEqual( Stem("sterner"), "sterner" );
	deepEqual( Stem("sternest"), "sternest" );
	deepEqual( Stem("sternly"), "sternli" );
	deepEqual( Stem("sternness"), "stern" );
	deepEqual( Stem("steterat"), "steterat" );
	deepEqual( Stem("stew"), "stew" );
	deepEqual( Stem("steward"), "steward" );
	deepEqual( Stem("stewards"), "steward" );
	deepEqual( Stem("stewardship"), "stewardship" );
	deepEqual( Stem("stewed"), "stew" );
	deepEqual( Stem("stews"), "stew" );
	deepEqual( Stem("steyne"), "steyn" );
	deepEqual( Stem("steynes"), "steyn" );
	deepEqual( Stem("stick"), "stick" );
	deepEqual( Stem("sticking"), "stick" );
	deepEqual( Stem("stickler"), "stickler" );
	deepEqual( Stem("sticks"), "stick" );
	deepEqual( Stem("stiff"), "stiff" );
	deepEqual( Stem("stiffen"), "stiffen" );
	deepEqual( Stem("stiffly"), "stiffli" );
	deepEqual( Stem("stifle"), "stifl" );
	deepEqual( Stem("stifled"), "stifl" );
	deepEqual( Stem("stifles"), "stifl" );
	deepEqual( Stem("stigmatic"), "stigmat" );
	deepEqual( Stem("stigmatical"), "stigmat" );
	deepEqual( Stem("stile"), "stile" );
	deepEqual( Stem("stilettos"), "stiletto" );
	deepEqual( Stem("still"), "still" );
	deepEqual( Stem("stillbrook"), "stillbrook" );
	deepEqual( Stem("stiller"), "stiller" );
	deepEqual( Stem("stillest"), "stillest" );
	deepEqual( Stem("stillness"), "still" );
	deepEqual( Stem("stilly"), "stilli" );
	deepEqual( Stem("stilton"), "stilton" );
	deepEqual( Stem("stilts"), "stilt" );
	deepEqual( Stem("stimulus"), "stimulu" );
	deepEqual( Stem("sting"), "sting" );
	deepEqual( Stem("stinging"), "sting" );
	deepEqual( Stem("stingless"), "stingless" );
	deepEqual( Stem("stings"), "sting" );
	deepEqual( Stem("stingy"), "stingi" );
	deepEqual( Stem("stink"), "stink" );
	deepEqual( Stem("stinking"), "stink" );
	deepEqual( Stem("stinkingly"), "stinkingli" );
	deepEqual( Stem("stinks"), "stink" );
	deepEqual( Stem("stint"), "stint" );
	deepEqual( Stem("stinted"), "stint" );
	deepEqual( Stem("stints"), "stint" );
	deepEqual( Stem("stipt"), "stipt" );
	deepEqual( Stem("stipulated"), "stipul" );
	deepEqual( Stem("stir"), "stir" );
	deepEqual( Stem("stirr"), "stirr" );
	deepEqual( Stem("stirred"), "stir" );
	deepEqual( Stem("stirrer"), "stirrer" );
	deepEqual( Stem("stirrers"), "stirrer" );
	deepEqual( Stem("stirreth"), "stirreth" );
	deepEqual( Stem("stirring"), "stir" );
	deepEqual( Stem("stirrup"), "stirrup" );
	deepEqual( Stem("stirrups"), "stirrup" );
	deepEqual( Stem("stirs"), "stir" );
	deepEqual( Stem("stitched"), "stitch" );
	deepEqual( Stem("stitchery"), "stitcheri" );
	deepEqual( Stem("stitches"), "stitch" );
	deepEqual( Stem("stitching"), "stitch" );
	deepEqual( Stem("stithied"), "stithi" );
	deepEqual( Stem("stithy"), "stithi" );
	deepEqual( Stem("stoccadoes"), "stoccado" );
	deepEqual( Stem("stoccata"), "stoccata" );
	deepEqual( Stem("stock"), "stock" );
	deepEqual( Stem("stockbroker"), "stockbrok" );
	deepEqual( Stem("stockbrokers"), "stockbrok" );
	deepEqual( Stem("stockens"), "stocken" );
	deepEqual( Stem("stockfish"), "stockfish" );
	deepEqual( Stem("stockholders"), "stockhold" );
	deepEqual( Stem("stocking"), "stock" );
	deepEqual( Stem("stockings"), "stock" );
	deepEqual( Stem("stockish"), "stockish" );
	deepEqual( Stem("stocks"), "stock" );
	deepEqual( Stem("stog"), "stog" );
	deepEqual( Stem("stogs"), "stog" );
	deepEqual( Stem("stoics"), "stoic" );
	deepEqual( Stem("stokes"), "stoke" );
	deepEqual( Stem("stokesly"), "stokesli" );
	deepEqual( Stem("stol"), "stol" );
	deepEqual( Stem("stole"), "stole" );
	deepEqual( Stem("stolen"), "stolen" );
	deepEqual( Stem("stolest"), "stolest" );
	deepEqual( Stem("stomach"), "stomach" );
	deepEqual( Stem("stomachers"), "stomach" );
	deepEqual( Stem("stomaching"), "stomach" );
	deepEqual( Stem("stomachs"), "stomach" );
	deepEqual( Stem("ston"), "ston" );
	deepEqual( Stem("stone"), "stone" );
	deepEqual( Stem("stonecutter"), "stonecutt" );
	deepEqual( Stem("stones"), "stone" );
	deepEqual( Stem("stonish"), "stonish" );
	deepEqual( Stem("stony"), "stoni" );
	deepEqual( Stem("stood"), "stood" );
	deepEqual( Stem("stool"), "stool" );
	deepEqual( Stem("stools"), "stool" );
	deepEqual( Stem("stoop"), "stoop" );
	deepEqual( Stem("stooped"), "stoop" );
	deepEqual( Stem("stoopid"), "stoopid" );
	deepEqual( Stem("stooping"), "stoop" );
	deepEqual( Stem("stoops"), "stoop" );
	deepEqual( Stem("stop"), "stop" );
	deepEqual( Stem("stope"), "stope" );
	deepEqual( Stem("stopp"), "stopp" );
	deepEqual( Stem("stoppage"), "stoppag" );
	deepEqual( Stem("stopped"), "stop" );
	deepEqual( Stem("stopping"), "stop" );
	deepEqual( Stem("stops"), "stop" );
	deepEqual( Stem("stor"), "stor" );
	deepEqual( Stem("store"), "store" );
	deepEqual( Stem("storehouse"), "storehous" );
	deepEqual( Stem("storehouses"), "storehous" );
	deepEqual( Stem("stores"), "store" );
	deepEqual( Stem("stories"), "stori" );
	deepEqual( Stem("storm"), "storm" );
	deepEqual( Stem("stormed"), "storm" );
	deepEqual( Stem("storming"), "storm" );
	deepEqual( Stem("storms"), "storm" );
	deepEqual( Stem("stormy"), "stormi" );
	deepEqual( Stem("story"), "stori" );
	deepEqual( Stem("stothard"), "stothard" );
	deepEqual( Stem("stoup"), "stoup" );
	deepEqual( Stem("stoups"), "stoup" );
	deepEqual( Stem("stout"), "stout" );
	deepEqual( Stem("stouter"), "stouter" );
	deepEqual( Stem("stoutly"), "stoutli" );
	deepEqual( Stem("stoutness"), "stout" );
	deepEqual( Stem("stover"), "stover" );
	deepEqual( Stem("stow"), "stow" );
	deepEqual( Stem("stowage"), "stowag" );
	deepEqual( Stem("stowed"), "stow" );
	deepEqual( Stem("strachino"), "strachino" );
	deepEqual( Stem("strachy"), "strachi" );
	deepEqual( Stem("straggle"), "straggl" );
	deepEqual( Stem("stragglers"), "straggler" );
	deepEqual( Stem("straggling"), "straggl" );
	deepEqual( Stem("straight"), "straight" );
	deepEqual( Stem("straightest"), "straightest" );
	deepEqual( Stem("straightforward"), "straightforward" );
	deepEqual( Stem("straightway"), "straightwai" );
	deepEqual( Stem("strain"), "strain" );
	deepEqual( Stem("strained"), "strain" );
	deepEqual( Stem("straining"), "strain" );
	deepEqual( Stem("strains"), "strain" );
	deepEqual( Stem("strait"), "strait" );
	deepEqual( Stem("straited"), "strait" );
	deepEqual( Stem("straitened"), "straiten" );
	deepEqual( Stem("straiter"), "straiter" );
	deepEqual( Stem("straitly"), "straitli" );
	deepEqual( Stem("straitness"), "strait" );
	deepEqual( Stem("straits"), "strait" );
	deepEqual( Stem("strand"), "strand" );
	deepEqual( Stem("stranded"), "strand" );
	deepEqual( Stem("strange"), "strang" );
	deepEqual( Stem("strangely"), "strang" );
	deepEqual( Stem("strangeness"), "strang" );
	deepEqual( Stem("stranger"), "stranger" );
	deepEqual( Stem("strangers"), "stranger" );
	deepEqual( Stem("strangest"), "strangest" );
	deepEqual( Stem("strangle"), "strangl" );
	deepEqual( Stem("strangled"), "strangl" );
	deepEqual( Stem("strangler"), "strangler" );
	deepEqual( Stem("strangles"), "strangl" );
	deepEqual( Stem("strangling"), "strangl" );
	deepEqual( Stem("strappado"), "strappado" );
	deepEqual( Stem("strapped"), "strap" );
	deepEqual( Stem("straps"), "strap" );
	deepEqual( Stem("strasburg"), "strasburg" );
	deepEqual( Stem("stratagem"), "stratagem" );
	deepEqual( Stem("stratagems"), "stratagem" );
	deepEqual( Stem("stratford"), "stratford" );
	deepEqual( Stem("strato"), "strato" );
	deepEqual( Stem("straw"), "straw" );
	deepEqual( Stem("strawberries"), "strawberri" );
	deepEqual( Stem("strawberry"), "strawberri" );
	deepEqual( Stem("straws"), "straw" );
	deepEqual( Stem("strawy"), "strawi" );
	deepEqual( Stem("stray"), "strai" );
	deepEqual( Stem("straying"), "strai" );
	deepEqual( Stem("strays"), "strai" );
	deepEqual( Stem("streak"), "streak" );
	deepEqual( Stem("streaked"), "streak" );
	deepEqual( Stem("streaks"), "streak" );
	deepEqual( Stem("streaky"), "streaki" );
	deepEqual( Stem("stream"), "stream" );
	deepEqual( Stem("streamed"), "stream" );
	deepEqual( Stem("streamers"), "streamer" );
	deepEqual( Stem("streaming"), "stream" );
	deepEqual( Stem("streams"), "stream" );
	deepEqual( Stem("streching"), "strech" );
	deepEqual( Stem("streeled"), "streel" );
	deepEqual( Stem("street"), "street" );
	deepEqual( Stem("streets"), "street" );
	deepEqual( Stem("strength"), "strength" );
	deepEqual( Stem("strengthen"), "strengthen" );
	deepEqual( Stem("strengthened"), "strengthen" );
	deepEqual( Stem("strengthless"), "strengthless" );
	deepEqual( Stem("strengths"), "strength" );
	deepEqual( Stem("strepitus"), "strepitu" );
	deepEqual( Stem("stretch"), "stretch" );
	deepEqual( Stem("stretched"), "stretch" );
	deepEqual( Stem("stretches"), "stretch" );
	deepEqual( Stem("stretching"), "stretch" );
	deepEqual( Stem("strew"), "strew" );
	deepEqual( Stem("strewing"), "strew" );
	deepEqual( Stem("strewings"), "strew" );
	deepEqual( Stem("strewments"), "strewment" );
	deepEqual( Stem("stricken"), "stricken" );
	deepEqual( Stem("strict"), "strict" );
	deepEqual( Stem("stricter"), "stricter" );
	deepEqual( Stem("strictest"), "strictest" );
	deepEqual( Stem("strictly"), "strictli" );
	deepEqual( Stem("stricture"), "strictur" );
	deepEqual( Stem("stride"), "stride" );
	deepEqual( Stem("strident"), "strident" );
	deepEqual( Stem("strides"), "stride" );
	deepEqual( Stem("striding"), "stride" );
	deepEqual( Stem("strife"), "strife" );
	deepEqual( Stem("strifes"), "strife" );
	deepEqual( Stem("strik"), "strik" );
	deepEqual( Stem("strike"), "strike" );
	deepEqual( Stem("strikers"), "striker" );
	deepEqual( Stem("strikes"), "strike" );
	deepEqual( Stem("strikest"), "strikest" );
	deepEqual( Stem("striking"), "strike" );
	deepEqual( Stem("string"), "string" );
	deepEqual( Stem("stringless"), "stringless" );
	deepEqual( Stem("strings"), "string" );
	deepEqual( Stem("strip"), "strip" );
	deepEqual( Stem("striped"), "stripe" );
	deepEqual( Stem("stripes"), "stripe" );
	deepEqual( Stem("stripling"), "stripl" );
	deepEqual( Stem("striplings"), "stripl" );
	deepEqual( Stem("stripp"), "stripp" );
	deepEqual( Stem("stripped"), "strip" );
	deepEqual( Stem("stripping"), "strip" );
	deepEqual( Stem("striv"), "striv" );
	deepEqual( Stem("strive"), "strive" );
	deepEqual( Stem("striven"), "striven" );
	deepEqual( Stem("strives"), "strive" );
	deepEqual( Stem("striving"), "strive" );
	deepEqual( Stem("strode"), "strode" );
	deepEqual( Stem("strok"), "strok" );
	deepEqual( Stem("stroke"), "stroke" );
	deepEqual( Stem("strokes"), "stroke" );
	deepEqual( Stem("stroll"), "stroll" );
	deepEqual( Stem("strolled"), "stroll" );
	deepEqual( Stem("strolls"), "stroll" );
	deepEqual( Stem("strond"), "strond" );
	deepEqual( Stem("stronds"), "strond" );
	deepEqual( Stem("strong"), "strong" );
	deepEqual( Stem("strongbow"), "strongbow" );
	deepEqual( Stem("stronger"), "stronger" );
	deepEqual( Stem("strongest"), "strongest" );
	deepEqual( Stem("strongly"), "strongli" );
	deepEqual( Stem("strooke"), "strook" );
	deepEqual( Stem("strossers"), "strosser" );
	deepEqual( Stem("strove"), "strove" );
	deepEqual( Stem("strown"), "strown" );
	deepEqual( Stem("stroy"), "stroi" );
	deepEqual( Stem("struck"), "struck" );
	deepEqual( Stem("strucken"), "strucken" );
	deepEqual( Stem("struggle"), "struggl" );
	deepEqual( Stem("struggled"), "struggl" );
	deepEqual( Stem("struggles"), "struggl" );
	deepEqual( Stem("struggling"), "struggl" );
	deepEqual( Stem("strumpet"), "strumpet" );
	deepEqual( Stem("strumpeted"), "strumpet" );
	deepEqual( Stem("strumpets"), "strumpet" );
	deepEqual( Stem("strumpff"), "strumpff" );
	deepEqual( Stem("strung"), "strung" );
	deepEqual( Stem("strut"), "strut" );
	deepEqual( Stem("struts"), "strut" );
	deepEqual( Stem("strutted"), "strut" );
	deepEqual( Stem("strutting"), "strut" );
	deepEqual( Stem("stuart"), "stuart" );
	deepEqual( Stem("stubble"), "stubbl" );
	deepEqual( Stem("stubborn"), "stubborn" );
	deepEqual( Stem("stubbornest"), "stubbornest" );
	deepEqual( Stem("stubbornly"), "stubbornli" );
	deepEqual( Stem("stubbornness"), "stubborn" );
	deepEqual( Stem("stucco"), "stucco" );
	deepEqual( Stem("stuck"), "stuck" );
	deepEqual( Stem("studded"), "stud" );
	deepEqual( Stem("student"), "student" );
	deepEqual( Stem("students"), "student" );
	deepEqual( Stem("studied"), "studi" );
	deepEqual( Stem("studies"), "studi" );
	deepEqual( Stem("studio"), "studio" );
	deepEqual( Stem("studios"), "studio" );
	deepEqual( Stem("studious"), "studiou" );
	deepEqual( Stem("studiously"), "studious" );
	deepEqual( Stem("studs"), "stud" );
	deepEqual( Stem("study"), "studi" );
	deepEqual( Stem("studying"), "studi" );
	deepEqual( Stem("stuff"), "stuff" );
	deepEqual( Stem("stuffing"), "stuf" );
	deepEqual( Stem("stuffs"), "stuff" );
	deepEqual( Stem("stumble"), "stumbl" );
	deepEqual( Stem("stumbled"), "stumbl" );
	deepEqual( Stem("stumbles"), "stumbl" );
	deepEqual( Stem("stumblest"), "stumblest" );
	deepEqual( Stem("stumbling"), "stumbl" );
	deepEqual( Stem("stump"), "stump" );
	deepEqual( Stem("stumps"), "stump" );
	deepEqual( Stem("stumpy"), "stumpi" );
	deepEqual( Stem("stung"), "stung" );
	deepEqual( Stem("stunned"), "stun" );
	deepEqual( Stem("stunnington"), "stunnington" );
	deepEqual( Stem("stunted"), "stunt" );
	deepEqual( Stem("stupefied"), "stupefi" );
	deepEqual( Stem("stupefy"), "stupefi" );
	deepEqual( Stem("stupendously"), "stupend" );
	deepEqual( Stem("stupid"), "stupid" );
	deepEqual( Stem("stupidest"), "stupidest" );
	deepEqual( Stem("stupidity"), "stupid" );
	deepEqual( Stem("stupified"), "stupifi" );
	deepEqual( Stem("stupor"), "stupor" );
	deepEqual( Stem("stuprum"), "stuprum" );
	deepEqual( Stem("sturdy"), "sturdi" );
	deepEqual( Stem("sturm"), "sturm" );
	deepEqual( Stem("stuttering"), "stutter" );
	deepEqual( Stem("sty"), "sty" );
	deepEqual( Stem("styga"), "styga" );
	deepEqual( Stem("stygian"), "stygian" );
	deepEqual( Stem("styl"), "styl" );
	deepEqual( Stem("style"), "style" );
	deepEqual( Stem("styled"), "style" );
	deepEqual( Stem("styles"), "style" );
	deepEqual( Stem("styx"), "styx" );
	deepEqual( Stem("su"), "su" );
	deepEqual( Stem("suavity"), "suaviti" );
	deepEqual( Stem("sub"), "sub" );
	deepEqual( Stem("subalterns"), "subaltern" );
	deepEqual( Stem("subcontracted"), "subcontract" );
	deepEqual( Stem("subdu"), "subdu" );
	deepEqual( Stem("subdue"), "subdu" );
	deepEqual( Stem("subdued"), "subdu" );
	deepEqual( Stem("subduements"), "subduement" );
	deepEqual( Stem("subdues"), "subdu" );
	deepEqual( Stem("subduing"), "subdu" );
	deepEqual( Stem("subject"), "subject" );
	deepEqual( Stem("subjected"), "subject" );
	deepEqual( Stem("subjection"), "subject" );
	deepEqual( Stem("subjects"), "subject" );
	deepEqual( Stem("subjugate"), "subjug" );
	deepEqual( Stem("subjugated"), "subjug" );
	deepEqual( Stem("submerg"), "submerg" );
	deepEqual( Stem("submission"), "submiss" );
	deepEqual( Stem("submissive"), "submiss" );
	deepEqual( Stem("submissively"), "submiss" );
	deepEqual( Stem("submit"), "submit" );
	deepEqual( Stem("submits"), "submit" );
	deepEqual( Stem("submitted"), "submit" );
	deepEqual( Stem("submitting"), "submit" );
	deepEqual( Stem("subordinate"), "subordin" );
	deepEqual( Stem("suborn"), "suborn" );
	deepEqual( Stem("subornation"), "suborn" );
	deepEqual( Stem("suborned"), "suborn" );
	deepEqual( Stem("subscrib"), "subscrib" );
	deepEqual( Stem("subscribe"), "subscrib" );
	deepEqual( Stem("subscribed"), "subscrib" );
	deepEqual( Stem("subscriber"), "subscrib" );
	deepEqual( Stem("subscribers"), "subscrib" );
	deepEqual( Stem("subscribes"), "subscrib" );
	deepEqual( Stem("subscription"), "subscript" );
	deepEqual( Stem("subsequent"), "subsequ" );
	deepEqual( Stem("subsequently"), "subsequ" );
	deepEqual( Stem("subsided"), "subsid" );
	deepEqual( Stem("subsides"), "subsid" );
	deepEqual( Stem("subsidies"), "subsidi" );
	deepEqual( Stem("subsidy"), "subsidi" );
	deepEqual( Stem("subsist"), "subsist" );
	deepEqual( Stem("subsisted"), "subsist" );
	deepEqual( Stem("subsisting"), "subsist" );
	deepEqual( Stem("subsists"), "subsist" );
	deepEqual( Stem("subsoiling"), "subsoil" );
	deepEqual( Stem("substance"), "substanc" );
	deepEqual( Stem("substances"), "substanc" );
	deepEqual( Stem("substantial"), "substanti" );
	deepEqual( Stem("substitute"), "substitut" );
	deepEqual( Stem("substituted"), "substitut" );
	deepEqual( Stem("substitutes"), "substitut" );
	deepEqual( Stem("substitution"), "substitut" );
	deepEqual( Stem("subterranean"), "subterranean" );
	deepEqual( Stem("subtile"), "subtil" );
	deepEqual( Stem("subtilly"), "subtilli" );
	deepEqual( Stem("subtle"), "subtl" );
	deepEqual( Stem("subtleties"), "subtleti" );
	deepEqual( Stem("subtlety"), "subtleti" );
	deepEqual( Stem("subtly"), "subtli" );
	deepEqual( Stem("subtractors"), "subtractor" );
	deepEqual( Stem("suburb"), "suburb" );
	deepEqual( Stem("suburban"), "suburban" );
	deepEqual( Stem("suburbs"), "suburb" );
	deepEqual( Stem("subversion"), "subvers" );
	deepEqual( Stem("subverts"), "subvert" );
	deepEqual( Stem("succedant"), "succed" );
	deepEqual( Stem("succeed"), "succe" );
	deepEqual( Stem("succeeded"), "succeed" );
	deepEqual( Stem("succeeders"), "succeed" );
	deepEqual( Stem("succeeding"), "succeed" );
	deepEqual( Stem("succeeds"), "succe" );
	deepEqual( Stem("success"), "success" );
	deepEqual( Stem("successantly"), "successantli" );
	deepEqual( Stem("successes"), "success" );
	deepEqual( Stem("successful"), "success" );
	deepEqual( Stem("successfully"), "successfulli" );
	deepEqual( Stem("succession"), "success" );
	deepEqual( Stem("successive"), "success" );
	deepEqual( Stem("successively"), "success" );
	deepEqual( Stem("successor"), "successor" );
	deepEqual( Stem("successors"), "successor" );
	deepEqual( Stem("succour"), "succour" );
	deepEqual( Stem("succours"), "succour" );
	deepEqual( Stem("succumbed"), "succumb" );
	deepEqual( Stem("such"), "such" );
	deepEqual( Stem("suck"), "suck" );
	deepEqual( Stem("sucked"), "suck" );
	deepEqual( Stem("sucker"), "sucker" );
	deepEqual( Stem("suckers"), "sucker" );
	deepEqual( Stem("sucking"), "suck" );
	deepEqual( Stem("suckle"), "suckl" );
	deepEqual( Stem("suckling"), "suckl" );
	deepEqual( Stem("sucks"), "suck" );
	deepEqual( Stem("sudden"), "sudden" );
	deepEqual( Stem("suddenly"), "suddenli" );
	deepEqual( Stem("sue"), "sue" );
	deepEqual( Stem("sued"), "su" );
	deepEqual( Stem("suerly"), "suerli" );
	deepEqual( Stem("sues"), "sue" );
	deepEqual( Stem("sueth"), "sueth" );
	deepEqual( Stem("suff"), "suff" );
	deepEqual( Stem("suffer"), "suffer" );
	deepEqual( Stem("sufferance"), "suffer" );
	deepEqual( Stem("sufferances"), "suffer" );
	deepEqual( Stem("suffered"), "suffer" );
	deepEqual( Stem("sufferer"), "suffer" );
	deepEqual( Stem("suffering"), "suffer" );
	deepEqual( Stem("sufferings"), "suffer" );
	deepEqual( Stem("suffers"), "suffer" );
	deepEqual( Stem("suffic"), "suffic" );
	deepEqual( Stem("suffice"), "suffic" );
	deepEqual( Stem("sufficed"), "suffic" );
	deepEqual( Stem("suffices"), "suffic" );
	deepEqual( Stem("sufficeth"), "sufficeth" );
	deepEqual( Stem("sufficiency"), "suffici" );
	deepEqual( Stem("sufficient"), "suffici" );
	deepEqual( Stem("sufficiently"), "suffici" );
	deepEqual( Stem("sufficing"), "suffic" );
	deepEqual( Stem("sufficit"), "sufficit" );
	deepEqual( Stem("suffigance"), "suffig" );
	deepEqual( Stem("suffocate"), "suffoc" );
	deepEqual( Stem("suffocated"), "suffoc" );
	deepEqual( Stem("suffocating"), "suffoc" );
	deepEqual( Stem("suffocation"), "suffoc" );
	deepEqual( Stem("suffolk"), "suffolk" );
	deepEqual( Stem("suffrage"), "suffrag" );
	deepEqual( Stem("suffrages"), "suffrag" );
	deepEqual( Stem("sug"), "sug" );
	deepEqual( Stem("sugar"), "sugar" );
	deepEqual( Stem("sugarcane"), "sugarcan" );
	deepEqual( Stem("sugarplums"), "sugarplum" );
	deepEqual( Stem("sugars"), "sugar" );
	deepEqual( Stem("sugarsop"), "sugarsop" );
	deepEqual( Stem("suggest"), "suggest" );
	deepEqual( Stem("suggested"), "suggest" );
	deepEqual( Stem("suggesting"), "suggest" );
	deepEqual( Stem("suggestion"), "suggest" );
	deepEqual( Stem("suggestions"), "suggest" );
	deepEqual( Stem("suggestive"), "suggest" );
	deepEqual( Stem("suggests"), "suggest" );
	deepEqual( Stem("sui"), "sui" );
	deepEqual( Stem("suicide"), "suicid" );
	deepEqual( Stem("suis"), "sui" );
	deepEqual( Stem("suit"), "suit" );
	deepEqual( Stem("suitable"), "suitabl" );
	deepEqual( Stem("suite"), "suit" );
	deepEqual( Stem("suited"), "suit" );
	deepEqual( Stem("suiting"), "suit" );
	deepEqual( Stem("suitor"), "suitor" );
	deepEqual( Stem("suitors"), "suitor" );
	deepEqual( Stem("suits"), "suit" );
	deepEqual( Stem("suivez"), "suivez" );
	deepEqual( Stem("sulkily"), "sulkili" );
	deepEqual( Stem("sulky"), "sulki" );
	deepEqual( Stem("sullen"), "sullen" );
	deepEqual( Stem("sullens"), "sullen" );
	deepEqual( Stem("sullied"), "sulli" );
	deepEqual( Stem("sullies"), "sulli" );
	deepEqual( Stem("sully"), "sulli" );
	deepEqual( Stem("sulph"), "sulph" );
	deepEqual( Stem("sulpherous"), "sulpher" );
	deepEqual( Stem("sulphur"), "sulphur" );
	deepEqual( Stem("sulphurous"), "sulphur" );
	deepEqual( Stem("sultan"), "sultan" );
	deepEqual( Stem("sultanas"), "sultana" );
	deepEqual( Stem("sultans"), "sultan" );
	deepEqual( Stem("sultry"), "sultri" );
	deepEqual( Stem("sum"), "sum" );
	deepEqual( Stem("sumless"), "sumless" );
	deepEqual( Stem("summ"), "summ" );
	deepEqual( Stem("summa"), "summa" );
	deepEqual( Stem("summarily"), "summarili" );
	deepEqual( Stem("summary"), "summari" );
	deepEqual( Stem("summer"), "summer" );
	deepEqual( Stem("summers"), "summer" );
	deepEqual( Stem("summit"), "summit" );
	deepEqual( Stem("summon"), "summon" );
	deepEqual( Stem("summoned"), "summon" );
	deepEqual( Stem("summoners"), "summon" );
	deepEqual( Stem("summons"), "summon" );
	deepEqual( Stem("sumpter"), "sumpter" );
	deepEqual( Stem("sumptuosity"), "sumptuos" );
	deepEqual( Stem("sumptuous"), "sumptuou" );
	deepEqual( Stem("sumptuously"), "sumptuous" );
	deepEqual( Stem("sums"), "sum" );
	deepEqual( Stem("sun"), "sun" );
	deepEqual( Stem("sunbeam"), "sunbeam" );
	deepEqual( Stem("sunbeams"), "sunbeam" );
	deepEqual( Stem("sunburning"), "sunburn" );
	deepEqual( Stem("sunburnt"), "sunburnt" );
	deepEqual( Stem("sund"), "sund" );
	deepEqual( Stem("sunday"), "sundai" );
	deepEqual( Stem("sundays"), "sundai" );
	deepEqual( Stem("sunder"), "sunder" );
	deepEqual( Stem("sunders"), "sunder" );
	deepEqual( Stem("sundry"), "sundri" );
	deepEqual( Stem("sunflower"), "sunflow" );
	deepEqual( Stem("sung"), "sung" );
	deepEqual( Stem("sunk"), "sunk" );
	deepEqual( Stem("sunken"), "sunken" );
	deepEqual( Stem("sunned"), "sun" );
	deepEqual( Stem("sunning"), "sun" );
	deepEqual( Stem("sunny"), "sunni" );
	deepEqual( Stem("sunrise"), "sunris" );
	deepEqual( Stem("sunrising"), "sunris" );
	deepEqual( Stem("suns"), "sun" );
	deepEqual( Stem("sunset"), "sunset" );
	deepEqual( Stem("sunshine"), "sunshin" );
	deepEqual( Stem("sunshiny"), "sunshini" );
	deepEqual( Stem("sup"), "sup" );
	deepEqual( Stem("super"), "super" );
	deepEqual( Stem("superabundant"), "superabund" );
	deepEqual( Stem("superb"), "superb" );
	deepEqual( Stem("supercilious"), "supercili" );
	deepEqual( Stem("superciliously"), "supercili" );
	deepEqual( Stem("superficial"), "superfici" );
	deepEqual( Stem("superficially"), "superfici" );
	deepEqual( Stem("superfluity"), "superflu" );
	deepEqual( Stem("superfluous"), "superflu" );
	deepEqual( Stem("superfluously"), "superflu" );
	deepEqual( Stem("superflux"), "superflux" );
	deepEqual( Stem("superintend"), "superintend" );
	deepEqual( Stem("superintended"), "superintend" );
	deepEqual( Stem("superintendence"), "superintend" );
	deepEqual( Stem("superintending"), "superintend" );
	deepEqual( Stem("superior"), "superior" );
	deepEqual( Stem("superiority"), "superior" );
	deepEqual( Stem("superiors"), "superior" );
	deepEqual( Stem("supernal"), "supern" );
	deepEqual( Stem("supernatural"), "supernatur" );
	deepEqual( Stem("superpraise"), "superprais" );
	deepEqual( Stem("superscript"), "superscript" );
	deepEqual( Stem("superscription"), "superscript" );
	deepEqual( Stem("superscriptions"), "superscript" );
	deepEqual( Stem("supersede"), "supersed" );
	deepEqual( Stem("superseded"), "supersed" );
	deepEqual( Stem("superserviceable"), "superservic" );
	deepEqual( Stem("superstition"), "superstit" );
	deepEqual( Stem("superstitious"), "superstiti" );
	deepEqual( Stem("superstitiously"), "superstiti" );
	deepEqual( Stem("supersubtle"), "supersubtl" );
	deepEqual( Stem("supervened"), "superven" );
	deepEqual( Stem("supervise"), "supervis" );
	deepEqual( Stem("supervisor"), "supervisor" );
	deepEqual( Stem("supp"), "supp" );
	deepEqual( Stem("supped"), "sup" );
	deepEqual( Stem("supper"), "supper" );
	deepEqual( Stem("suppers"), "supper" );
	deepEqual( Stem("suppertime"), "suppertim" );
	deepEqual( Stem("supping"), "sup" );
	deepEqual( Stem("supplant"), "supplant" );
	deepEqual( Stem("supple"), "suppl" );
	deepEqual( Stem("suppler"), "suppler" );
	deepEqual( Stem("suppliance"), "supplianc" );
	deepEqual( Stem("suppliant"), "suppliant" );
	deepEqual( Stem("suppliants"), "suppliant" );
	deepEqual( Stem("supplicant"), "supplic" );
	deepEqual( Stem("supplication"), "supplic" );
	deepEqual( Stem("supplications"), "supplic" );
	deepEqual( Stem("supplie"), "suppli" );
	deepEqual( Stem("supplied"), "suppli" );
	deepEqual( Stem("supplies"), "suppli" );
	deepEqual( Stem("suppliest"), "suppliest" );
	deepEqual( Stem("supply"), "suppli" );
	deepEqual( Stem("supplyant"), "supplyant" );
	deepEqual( Stem("supplying"), "suppli" );
	deepEqual( Stem("supplyment"), "supplyment" );
	deepEqual( Stem("support"), "support" );
	deepEqual( Stem("supportable"), "support" );
	deepEqual( Stem("supportance"), "support" );
	deepEqual( Stem("supported"), "support" );
	deepEqual( Stem("supporter"), "support" );
	deepEqual( Stem("supporters"), "support" );
	deepEqual( Stem("supporting"), "support" );
	deepEqual( Stem("supportor"), "supportor" );
	deepEqual( Stem("supports"), "support" );
	deepEqual( Stem("suppos"), "suppo" );
	deepEqual( Stem("supposal"), "suppos" );
	deepEqual( Stem("suppose"), "suppos" );
	deepEqual( Stem("supposed"), "suppos" );
	deepEqual( Stem("supposes"), "suppos" );
	deepEqual( Stem("supposest"), "supposest" );
	deepEqual( Stem("supposing"), "suppos" );
	deepEqual( Stem("supposition"), "supposit" );
	deepEqual( Stem("suppress"), "suppress" );
	deepEqual( Stem("suppressed"), "suppress" );
	deepEqual( Stem("suppresseth"), "suppresseth" );
	deepEqual( Stem("supremacy"), "supremaci" );
	deepEqual( Stem("supreme"), "suprem" );
	deepEqual( Stem("supremely"), "suprem" );
	deepEqual( Stem("sups"), "sup" );
	deepEqual( Stem("sur"), "sur" );
	deepEqual( Stem("surance"), "suranc" );
	deepEqual( Stem("surcease"), "surceas" );
	deepEqual( Stem("surd"), "surd" );
	deepEqual( Stem("sure"), "sure" );
	deepEqual( Stem("surecard"), "surecard" );
	deepEqual( Stem("surely"), "sure" );
	deepEqual( Stem("surer"), "surer" );
	deepEqual( Stem("surest"), "surest" );
	deepEqual( Stem("sureties"), "sureti" );
	deepEqual( Stem("surety"), "sureti" );
	deepEqual( Stem("surfeit"), "surfeit" );
	deepEqual( Stem("surfeited"), "surfeit" );
	deepEqual( Stem("surfeiter"), "surfeit" );
	deepEqual( Stem("surfeiting"), "surfeit" );
	deepEqual( Stem("surfeits"), "surfeit" );
	deepEqual( Stem("surge"), "surg" );
	deepEqual( Stem("surgeon"), "surgeon" );
	deepEqual( Stem("surgeons"), "surgeon" );
	deepEqual( Stem("surgere"), "surger" );
	deepEqual( Stem("surgery"), "surgeri" );
	deepEqual( Stem("surges"), "surg" );
	deepEqual( Stem("surlily"), "surlili" );
	deepEqual( Stem("surly"), "surli" );
	deepEqual( Stem("surmis"), "surmi" );
	deepEqual( Stem("surmise"), "surmis" );
	deepEqual( Stem("surmised"), "surmis" );
	deepEqual( Stem("surmises"), "surmis" );
	deepEqual( Stem("surmount"), "surmount" );
	deepEqual( Stem("surmounted"), "surmount" );
	deepEqual( Stem("surmounts"), "surmount" );
	deepEqual( Stem("surnam"), "surnam" );
	deepEqual( Stem("surname"), "surnam" );
	deepEqual( Stem("surnamed"), "surnam" );
	deepEqual( Stem("surpass"), "surpass" );
	deepEqual( Stem("surpassed"), "surpass" );
	deepEqual( Stem("surpasseth"), "surpasseth" );
	deepEqual( Stem("surpassing"), "surpass" );
	deepEqual( Stem("surplice"), "surplic" );
	deepEqual( Stem("surplus"), "surplu" );
	deepEqual( Stem("surpris"), "surpri" );
	deepEqual( Stem("surprise"), "surpris" );
	deepEqual( Stem("surprised"), "surpris" );
	deepEqual( Stem("surprises"), "surpris" );
	deepEqual( Stem("surprising"), "surpris" );
	deepEqual( Stem("surrender"), "surrend" );
	deepEqual( Stem("surrendered"), "surrend" );
	deepEqual( Stem("surreptitious"), "surreptiti" );
	deepEqual( Stem("surreptitiously"), "surreptiti" );
	deepEqual( Stem("surrey"), "surrei" );
	deepEqual( Stem("surreys"), "surrei" );
	deepEqual( Stem("surrounded"), "surround" );
	deepEqual( Stem("surrounding"), "surround" );
	deepEqual( Stem("survey"), "survei" );
	deepEqual( Stem("surveyed"), "survei" );
	deepEqual( Stem("surveyest"), "surveyest" );
	deepEqual( Stem("surveying"), "survei" );
	deepEqual( Stem("surveyor"), "surveyor" );
	deepEqual( Stem("surveyors"), "surveyor" );
	deepEqual( Stem("surveys"), "survei" );
	deepEqual( Stem("survive"), "surviv" );
	deepEqual( Stem("survived"), "surviv" );
	deepEqual( Stem("survives"), "surviv" );
	deepEqual( Stem("survivor"), "survivor" );
	deepEqual( Stem("survivors"), "survivor" );
	deepEqual( Stem("susan"), "susan" );
	deepEqual( Stem("suspect"), "suspect" );
	deepEqual( Stem("suspected"), "suspect" );
	deepEqual( Stem("suspecting"), "suspect" );
	deepEqual( Stem("suspects"), "suspect" );
	deepEqual( Stem("suspend"), "suspend" );
	deepEqual( Stem("suspended"), "suspend" );
	deepEqual( Stem("suspense"), "suspens" );
	deepEqual( Stem("suspicion"), "suspicion" );
	deepEqual( Stem("suspicions"), "suspicion" );
	deepEqual( Stem("suspicious"), "suspici" );
	deepEqual( Stem("suspiration"), "suspir" );
	deepEqual( Stem("suspire"), "suspir" );
	deepEqual( Stem("sussex"), "sussex" );
	deepEqual( Stem("sust"), "sust" );
	deepEqual( Stem("sustain"), "sustain" );
	deepEqual( Stem("sustained"), "sustain" );
	deepEqual( Stem("sustaining"), "sustain" );
	deepEqual( Stem("sutler"), "sutler" );
	deepEqual( Stem("sutton"), "sutton" );
	deepEqual( Stem("suum"), "suum" );
	deepEqual( Stem("swabber"), "swabber" );
	deepEqual( Stem("swaddling"), "swaddl" );
	deepEqual( Stem("swag"), "swag" );
	deepEqual( Stem("swagg"), "swagg" );
	deepEqual( Stem("swagger"), "swagger" );
	deepEqual( Stem("swaggered"), "swagger" );
	deepEqual( Stem("swaggerer"), "swagger" );
	deepEqual( Stem("swaggerers"), "swagger" );
	deepEqual( Stem("swaggering"), "swagger" );
	deepEqual( Stem("swain"), "swain" );
	deepEqual( Stem("swains"), "swain" );
	deepEqual( Stem("swallow"), "swallow" );
	deepEqual( Stem("swallowed"), "swallow" );
	deepEqual( Stem("swallowing"), "swallow" );
	deepEqual( Stem("swallows"), "swallow" );
	deepEqual( Stem("swam"), "swam" );
	deepEqual( Stem("swamp"), "swamp" );
	deepEqual( Stem("swampton"), "swampton" );
	deepEqual( Stem("swan"), "swan" );
	deepEqual( Stem("swankey"), "swankei" );
	deepEqual( Stem("swans"), "swan" );
	deepEqual( Stem("sward"), "sward" );
	deepEqual( Stem("sware"), "sware" );
	deepEqual( Stem("swarm"), "swarm" );
	deepEqual( Stem("swarmed"), "swarm" );
	deepEqual( Stem("swarming"), "swarm" );
	deepEqual( Stem("swarms"), "swarm" );
	deepEqual( Stem("swarreys"), "swarrei" );
	deepEqual( Stem("swart"), "swart" );
	deepEqual( Stem("swarth"), "swarth" );
	deepEqual( Stem("swarths"), "swarth" );
	deepEqual( Stem("swarthy"), "swarthi" );
	deepEqual( Stem("swartz"), "swartz" );
	deepEqual( Stem("swashers"), "swasher" );
	deepEqual( Stem("swashing"), "swash" );
	deepEqual( Stem("swath"), "swath" );
	deepEqual( Stem("swathing"), "swath" );
	deepEqual( Stem("swathling"), "swathl" );
	deepEqual( Stem("sway"), "swai" );
	deepEqual( Stem("swaying"), "swai" );
	deepEqual( Stem("sways"), "swai" );
	deepEqual( Stem("swear"), "swear" );
	deepEqual( Stem("swearer"), "swearer" );
	deepEqual( Stem("swearers"), "swearer" );
	deepEqual( Stem("swearest"), "swearest" );
	deepEqual( Stem("swearing"), "swear" );
	deepEqual( Stem("swearings"), "swear" );
	deepEqual( Stem("swears"), "swear" );
	deepEqual( Stem("sweat"), "sweat" );
	deepEqual( Stem("sweaten"), "sweaten" );
	deepEqual( Stem("sweating"), "sweat" );
	deepEqual( Stem("sweats"), "sweat" );
	deepEqual( Stem("sweaty"), "sweati" );
	deepEqual( Stem("sweep"), "sweep" );
	deepEqual( Stem("sweeper"), "sweeper" );
	deepEqual( Stem("sweeperess"), "sweeperess" );
	deepEqual( Stem("sweepers"), "sweeper" );
	deepEqual( Stem("sweeps"), "sweep" );
	deepEqual( Stem("sweet"), "sweet" );
	deepEqual( Stem("sweetbreads"), "sweetbread" );
	deepEqual( Stem("sweeten"), "sweeten" );
	deepEqual( Stem("sweetened"), "sweeten" );
	deepEqual( Stem("sweetens"), "sweeten" );
	deepEqual( Stem("sweeter"), "sweeter" );
	deepEqual( Stem("sweetest"), "sweetest" );
	deepEqual( Stem("sweetheart"), "sweetheart" );
	deepEqual( Stem("sweeting"), "sweet" );
	deepEqual( Stem("sweetly"), "sweetli" );
	deepEqual( Stem("sweetmeats"), "sweetmeat" );
	deepEqual( Stem("sweetness"), "sweet" );
	deepEqual( Stem("sweets"), "sweet" );
	deepEqual( Stem("sweevy"), "sweevi" );
	deepEqual( Stem("swell"), "swell" );
	deepEqual( Stem("swelled"), "swell" );
	deepEqual( Stem("swelling"), "swell" );
	deepEqual( Stem("swellings"), "swell" );
	deepEqual( Stem("swells"), "swell" );
	deepEqual( Stem("swelter"), "swelter" );
	deepEqual( Stem("sweno"), "sweno" );
	deepEqual( Stem("swept"), "swept" );
	deepEqual( Stem("swerve"), "swerv" );
	deepEqual( Stem("swerver"), "swerver" );
	deepEqual( Stem("swerving"), "swerv" );
	deepEqual( Stem("swift"), "swift" );
	deepEqual( Stem("swifter"), "swifter" );
	deepEqual( Stem("swiftest"), "swiftest" );
	deepEqual( Stem("swiftly"), "swiftli" );
	deepEqual( Stem("swiftness"), "swift" );
	deepEqual( Stem("swill"), "swill" );
	deepEqual( Stem("swills"), "swill" );
	deepEqual( Stem("swim"), "swim" );
	deepEqual( Stem("swimmer"), "swimmer" );
	deepEqual( Stem("swimmers"), "swimmer" );
	deepEqual( Stem("swimming"), "swim" );
	deepEqual( Stem("swims"), "swim" );
	deepEqual( Stem("swindle"), "swindl" );
	deepEqual( Stem("swindled"), "swindl" );
	deepEqual( Stem("swindler"), "swindler" );
	deepEqual( Stem("swindlers"), "swindler" );
	deepEqual( Stem("swindling"), "swindl" );
	deepEqual( Stem("swine"), "swine" );
	deepEqual( Stem("swineherds"), "swineherd" );
	deepEqual( Stem("swing"), "swing" );
	deepEqual( Stem("swinge"), "swing" );
	deepEqual( Stem("swinging"), "swing" );
	deepEqual( Stem("swinish"), "swinish" );
	deepEqual( Stem("swinstead"), "swinstead" );
	deepEqual( Stem("swishtail"), "swishtail" );
	deepEqual( Stem("switches"), "switch" );
	deepEqual( Stem("swits"), "swit" );
	deepEqual( Stem("switzerland"), "switzerland" );
	deepEqual( Stem("switzers"), "switzer" );
	deepEqual( Stem("swol"), "swol" );
	deepEqual( Stem("swoll"), "swoll" );
	deepEqual( Stem("swollen"), "swollen" );
	deepEqual( Stem("swoln"), "swoln" );
	deepEqual( Stem("swoon"), "swoon" );
	deepEqual( Stem("swooned"), "swoon" );
	deepEqual( Stem("swooning"), "swoon" );
	deepEqual( Stem("swoons"), "swoon" );
	deepEqual( Stem("swoop"), "swoop" );
	deepEqual( Stem("swoopstake"), "swoopstak" );
	deepEqual( Stem("swor"), "swor" );
	deepEqual( Stem("sword"), "sword" );
	deepEqual( Stem("sworder"), "sworder" );
	deepEqual( Stem("swords"), "sword" );
	deepEqual( Stem("swore"), "swore" );
	deepEqual( Stem("sworn"), "sworn" );
	deepEqual( Stem("swounded"), "swound" );
	deepEqual( Stem("swounds"), "swound" );
	deepEqual( Stem("swum"), "swum" );
	deepEqual( Stem("swung"), "swung" );
	deepEqual( Stem("sy"), "sy" );
	deepEqual( Stem("sycamore"), "sycamor" );
	deepEqual( Stem("sycophant"), "sycoph" );
	deepEqual( Stem("sycophantic"), "sycophant" );
	deepEqual( Stem("sycorax"), "sycorax" );
	deepEqual( Stem("sylla"), "sylla" );
	deepEqual( Stem("syllable"), "syllabl" );
	deepEqual( Stem("syllables"), "syllabl" );
	deepEqual( Stem("syllogism"), "syllog" );
	deepEqual( Stem("symbols"), "symbol" );
	deepEqual( Stem("symmetrical"), "symmetr" );
	deepEqual( Stem("symmetry"), "symmetri" );
	deepEqual( Stem("sympathetic"), "sympathet" );
	deepEqual( Stem("sympathies"), "sympathi" );
	deepEqual( Stem("sympathise"), "sympathis" );
	deepEqual( Stem("sympathised"), "sympathis" );
	deepEqual( Stem("sympathiz"), "sympathiz" );
	deepEqual( Stem("sympathize"), "sympath" );
	deepEqual( Stem("sympathized"), "sympath" );
	deepEqual( Stem("sympathizing"), "sympath" );
	deepEqual( Stem("sympathy"), "sympathi" );
	deepEqual( Stem("symphony"), "symphoni" );
	deepEqual( Stem("symptom"), "symptom" );
	deepEqual( Stem("symptoms"), "symptom" );
	deepEqual( Stem("synagogue"), "synagogu" );
	deepEqual( Stem("synod"), "synod" );
	deepEqual( Stem("synods"), "synod" );
	deepEqual( Stem("syntax"), "syntax" );
	deepEqual( Stem("syracuse"), "syracus" );
	deepEqual( Stem("syracusian"), "syracusian" );
	deepEqual( Stem("syracusians"), "syracusian" );
	deepEqual( Stem("syria"), "syria" );
	deepEqual( Stem("syriac"), "syriac" );
	deepEqual( Stem("syrups"), "syrup" );
	deepEqual( Stem("system"), "system" );
	deepEqual( Stem("t"), "t" );
	deepEqual( Stem("ta"), "ta" );
	deepEqual( Stem("taber"), "taber" );
	deepEqual( Stem("table"), "tabl" );
	deepEqual( Stem("tableau"), "tableau" );
	deepEqual( Stem("tabled"), "tabl" );
	deepEqual( Stem("tables"), "tabl" );
	deepEqual( Stem("tablet"), "tablet" );
	deepEqual( Stem("tably"), "tabli" );
	deepEqual( Stem("tabor"), "tabor" );
	deepEqual( Stem("taborer"), "tabor" );
	deepEqual( Stem("tabors"), "tabor" );
	deepEqual( Stem("tabourines"), "tabourin" );
	deepEqual( Stem("tacit"), "tacit" );
	deepEqual( Stem("taciturnity"), "taciturn" );
	deepEqual( Stem("tack"), "tack" );
	deepEqual( Stem("tackle"), "tackl" );
	deepEqual( Stem("tackled"), "tackl" );
	deepEqual( Stem("tackles"), "tackl" );
	deepEqual( Stem("tackling"), "tackl" );
	deepEqual( Stem("tacklings"), "tackl" );
	deepEqual( Stem("tactician"), "tactician" );
	deepEqual( Stem("tacticians"), "tactician" );
	deepEqual( Stem("taddle"), "taddl" );
	deepEqual( Stem("tadmor"), "tadmor" );
	deepEqual( Stem("tadpole"), "tadpol" );
	deepEqual( Stem("taffeta"), "taffeta" );
	deepEqual( Stem("taffety"), "taffeti" );
	deepEqual( Stem("tag"), "tag" );
	deepEqual( Stem("tage"), "tage" );
	deepEqual( Stem("taglioni"), "taglioni" );
	deepEqual( Stem("tagrag"), "tagrag" );
	deepEqual( Stem("tags"), "tag" );
	deepEqual( Stem("tah"), "tah" );
	deepEqual( Stem("tail"), "tail" );
	deepEqual( Stem("tailed"), "tail" );
	deepEqual( Stem("tailor"), "tailor" );
	deepEqual( Stem("tailors"), "tailor" );
	deepEqual( Stem("tails"), "tail" );
	deepEqual( Stem("taint"), "taint" );
	deepEqual( Stem("tainted"), "taint" );
	deepEqual( Stem("tainting"), "taint" );
	deepEqual( Stem("taints"), "taint" );
	deepEqual( Stem("tainture"), "taintur" );
	deepEqual( Stem("tajy"), "taji" );
	deepEqual( Stem("tak"), "tak" );
	deepEqual( Stem("take"), "take" );
	deepEqual( Stem("taken"), "taken" );
	deepEqual( Stem("taker"), "taker" );
	deepEqual( Stem("takes"), "take" );
	deepEqual( Stem("takest"), "takest" );
	deepEqual( Stem("taketh"), "taketh" );
	deepEqual( Stem("taking"), "take" );
	deepEqual( Stem("tal"), "tal" );
	deepEqual( Stem("talavera"), "talavera" );
	deepEqual( Stem("talbot"), "talbot" );
	deepEqual( Stem("talbotites"), "talbotit" );
	deepEqual( Stem("talbots"), "talbot" );
	deepEqual( Stem("talboys"), "talboi" );
	deepEqual( Stem("tale"), "tale" );
	deepEqual( Stem("talebearing"), "talebear" );
	deepEqual( Stem("talent"), "talent" );
	deepEqual( Stem("talents"), "talent" );
	deepEqual( Stem("taleporter"), "taleport" );
	deepEqual( Stem("tales"), "tale" );
	deepEqual( Stem("talk"), "talk" );
	deepEqual( Stem("talkative"), "talk" );
	deepEqual( Stem("talked"), "talk" );
	deepEqual( Stem("talker"), "talker" );
	deepEqual( Stem("talkers"), "talker" );
	deepEqual( Stem("talkest"), "talkest" );
	deepEqual( Stem("talking"), "talk" );
	deepEqual( Stem("talks"), "talk" );
	deepEqual( Stem("tall"), "tall" );
	deepEqual( Stem("taller"), "taller" );
	deepEqual( Stem("tallest"), "tallest" );
	deepEqual( Stem("talleyrand"), "talleyrand" );
	deepEqual( Stem("tallies"), "talli" );
	deepEqual( Stem("tallow"), "tallow" );
	deepEqual( Stem("tally"), "talli" );
	deepEqual( Stem("talonrouge"), "talonroug" );
	deepEqual( Stem("talons"), "talon" );
	deepEqual( Stem("tam"), "tam" );
	deepEqual( Stem("tamarinds"), "tamarind" );
	deepEqual( Stem("tambourines"), "tambourin" );
	deepEqual( Stem("tame"), "tame" );
	deepEqual( Stem("tamed"), "tame" );
	deepEqual( Stem("tamely"), "tame" );
	deepEqual( Stem("tameness"), "tame" );
	deepEqual( Stem("tamer"), "tamer" );
	deepEqual( Stem("tames"), "tame" );
	deepEqual( Stem("taming"), "tame" );
	deepEqual( Stem("tamora"), "tamora" );
	deepEqual( Stem("tamworth"), "tamworth" );
	deepEqual( Stem("tan"), "tan" );
	deepEqual( Stem("tandyman"), "tandyman" );
	deepEqual( Stem("tang"), "tang" );
	deepEqual( Stem("tangle"), "tangl" );
	deepEqual( Stem("tangled"), "tangl" );
	deepEqual( Stem("tank"), "tank" );
	deepEqual( Stem("tankard"), "tankard" );
	deepEqual( Stem("tanlings"), "tanl" );
	deepEqual( Stem("tann"), "tann" );
	deepEqual( Stem("tanned"), "tan" );
	deepEqual( Stem("tanner"), "tanner" );
	deepEqual( Stem("tanquam"), "tanquam" );
	deepEqual( Stem("tanta"), "tanta" );
	deepEqual( Stem("tantaene"), "tantaen" );
	deepEqual( Stem("tantalizing"), "tantal" );
	deepEqual( Stem("tante"), "tant" );
	deepEqual( Stem("tap"), "tap" );
	deepEqual( Stem("tape"), "tape" );
	deepEqual( Stem("taper"), "taper" );
	deepEqual( Stem("tapers"), "taper" );
	deepEqual( Stem("tapes"), "tape" );
	deepEqual( Stem("tapestries"), "tapestri" );
	deepEqual( Stem("tapestry"), "tapestri" );
	deepEqual( Stem("tapeworm"), "tapeworm" );
	deepEqual( Stem("taphouse"), "taphous" );
	deepEqual( Stem("tapioca"), "tapioca" );
	deepEqual( Stem("tapp"), "tapp" );
	deepEqual( Stem("tapped"), "tap" );
	deepEqual( Stem("tapping"), "tap" );
	deepEqual( Stem("tapster"), "tapster" );
	deepEqual( Stem("tapsters"), "tapster" );
	deepEqual( Stem("tar"), "tar" );
	deepEqual( Stem("tarboosh"), "tarboosh" );
	deepEqual( Stem("tardied"), "tardi" );
	deepEqual( Stem("tardily"), "tardili" );
	deepEqual( Stem("tardiness"), "tardi" );
	deepEqual( Stem("tardy"), "tardi" );
	deepEqual( Stem("tarentum"), "tarentum" );
	deepEqual( Stem("targe"), "targ" );
	deepEqual( Stem("targes"), "targ" );
	deepEqual( Stem("target"), "target" );
	deepEqual( Stem("targets"), "target" );
	deepEqual( Stem("tarnish"), "tarnish" );
	deepEqual( Stem("tarpeian"), "tarpeian" );
	deepEqual( Stem("tarquin"), "tarquin" );
	deepEqual( Stem("tarquins"), "tarquin" );
	deepEqual( Stem("tarr"), "tarr" );
	deepEqual( Stem("tarre"), "tarr" );
	deepEqual( Stem("tarriance"), "tarrianc" );
	deepEqual( Stem("tarried"), "tarri" );
	deepEqual( Stem("tarries"), "tarri" );
	deepEqual( Stem("tarry"), "tarri" );
	deepEqual( Stem("tarrying"), "tarri" );
	deepEqual( Stem("tars"), "tar" );
	deepEqual( Stem("tart"), "tart" );
	deepEqual( Stem("tartan"), "tartan" );
	deepEqual( Stem("tartans"), "tartan" );
	deepEqual( Stem("tartar"), "tartar" );
	deepEqual( Stem("tartars"), "tartar" );
	deepEqual( Stem("tartines"), "tartin" );
	deepEqual( Stem("tartly"), "tartli" );
	deepEqual( Stem("tartness"), "tart" );
	deepEqual( Stem("tarts"), "tart" );
	deepEqual( Stem("task"), "task" );
	deepEqual( Stem("tasker"), "tasker" );
	deepEqual( Stem("tasking"), "task" );
	deepEqual( Stem("tasks"), "task" );
	deepEqual( Stem("tassel"), "tassel" );
	deepEqual( Stem("tassels"), "tassel" );
	deepEqual( Stem("taste"), "tast" );
	deepEqual( Stem("tasted"), "tast" );
	deepEqual( Stem("tastes"), "tast" );
	deepEqual( Stem("tasting"), "tast" );
	deepEqual( Stem("tatt"), "tatt" );
	deepEqual( Stem("tatter"), "tatter" );
	deepEqual( Stem("tattered"), "tatter" );
	deepEqual( Stem("tatters"), "tatter" );
	deepEqual( Stem("tatties"), "tatti" );
	deepEqual( Stem("tattle"), "tattl" );
	deepEqual( Stem("tattled"), "tattl" );
	deepEqual( Stem("tattling"), "tattl" );
	deepEqual( Stem("tattlings"), "tattl" );
	deepEqual( Stem("tattoo"), "tattoo" );
	deepEqual( Stem("tattooed"), "tattoo" );
	deepEqual( Stem("taught"), "taught" );
	deepEqual( Stem("taunt"), "taunt" );
	deepEqual( Stem("taunted"), "taunt" );
	deepEqual( Stem("taunting"), "taunt" );
	deepEqual( Stem("tauntingly"), "tauntingli" );
	deepEqual( Stem("taunts"), "taunt" );
	deepEqual( Stem("taurus"), "tauru" );
	deepEqual( Stem("tavern"), "tavern" );
	deepEqual( Stem("taverns"), "tavern" );
	deepEqual( Stem("tavish"), "tavish" );
	deepEqual( Stem("tavy"), "tavi" );
	deepEqual( Stem("tawdry"), "tawdri" );
	deepEqual( Stem("tawny"), "tawni" );
	deepEqual( Stem("tax"), "tax" );
	deepEqual( Stem("taxation"), "taxat" );
	deepEqual( Stem("taxations"), "taxat" );
	deepEqual( Stem("taxed"), "tax" );
	deepEqual( Stem("taxes"), "tax" );
	deepEqual( Stem("taxing"), "tax" );
	deepEqual( Stem("tay"), "tai" );
	deepEqual( Stem("taykettles"), "taykettl" );
	deepEqual( Stem("tc"), "tc" );
	deepEqual( Stem("te"), "te" );
	deepEqual( Stem("tea"), "tea" );
	deepEqual( Stem("teach"), "teach" );
	deepEqual( Stem("teacher"), "teacher" );
	deepEqual( Stem("teachers"), "teacher" );
	deepEqual( Stem("teaches"), "teach" );
	deepEqual( Stem("teachest"), "teachest" );
	deepEqual( Stem("teacheth"), "teacheth" );
	deepEqual( Stem("teaching"), "teach" );
	deepEqual( Stem("team"), "team" );
	deepEqual( Stem("teapot"), "teapot" );
	deepEqual( Stem("teapots"), "teapot" );
	deepEqual( Stem("tear"), "tear" );
	deepEqual( Stem("tearful"), "tear" );
	deepEqual( Stem("tearing"), "tear" );
	deepEqual( Stem("tears"), "tear" );
	deepEqual( Stem("tearsheet"), "tearsheet" );
	deepEqual( Stem("teaspoonful"), "teaspoon" );
	deepEqual( Stem("teat"), "teat" );
	deepEqual( Stem("ted"), "ted" );
	deepEqual( Stem("tedious"), "tediou" );
	deepEqual( Stem("tediously"), "tedious" );
	deepEqual( Stem("tediousness"), "tedious" );
	deepEqual( Stem("tedium"), "tedium" );
	deepEqual( Stem("teem"), "teem" );
	deepEqual( Stem("teeming"), "teem" );
	deepEqual( Stem("teems"), "teem" );
	deepEqual( Stem("teen"), "teen" );
	deepEqual( Stem("teens"), "teen" );
	deepEqual( Stem("teeth"), "teeth" );
	deepEqual( Stem("teething"), "teeth" );
	deepEqual( Stem("teipsum"), "teipsum" );
	deepEqual( Stem("telamon"), "telamon" );
	deepEqual( Stem("telamonius"), "telamoniu" );
	deepEqual( Stem("telegraph"), "telegraph" );
	deepEqual( Stem("telegraphed"), "telegraph" );
	deepEqual( Stem("telegraphic"), "telegraph" );
	deepEqual( Stem("telemaque"), "telemaqu" );
	deepEqual( Stem("telescope"), "telescop" );
	deepEqual( Stem("tell"), "tell" );
	deepEqual( Stem("teller"), "teller" );
	deepEqual( Stem("telling"), "tell" );
	deepEqual( Stem("tells"), "tell" );
	deepEqual( Stem("tellus"), "tellu" );
	deepEqual( Stem("temp"), "temp" );
	deepEqual( Stem("temper"), "temper" );
	deepEqual( Stem("temperality"), "temper" );
	deepEqual( Stem("temperament"), "tempera" );
	deepEqual( Stem("temperance"), "temper" );
	deepEqual( Stem("temperate"), "temper" );
	deepEqual( Stem("temperately"), "temper" );
	deepEqual( Stem("tempered"), "temper" );
	deepEqual( Stem("tempers"), "temper" );
	deepEqual( Stem("tempest"), "tempest" );
	deepEqual( Stem("tempests"), "tempest" );
	deepEqual( Stem("tempestuous"), "tempestu" );
	deepEqual( Stem("temple"), "templ" );
	deepEqual( Stem("temples"), "templ" );
	deepEqual( Stem("temporal"), "tempor" );
	deepEqual( Stem("temporarily"), "temporarili" );
	deepEqual( Stem("temporary"), "temporari" );
	deepEqual( Stem("temporise"), "temporis" );
	deepEqual( Stem("temporised"), "temporis" );
	deepEqual( Stem("temporiz"), "temporiz" );
	deepEqual( Stem("temporize"), "tempor" );
	deepEqual( Stem("temporizer"), "tempor" );
	deepEqual( Stem("temps"), "temp" );
	deepEqual( Stem("tempt"), "tempt" );
	deepEqual( Stem("temptation"), "temptat" );
	deepEqual( Stem("temptations"), "temptat" );
	deepEqual( Stem("tempted"), "tempt" );
	deepEqual( Stem("tempter"), "tempter" );
	deepEqual( Stem("tempters"), "tempter" );
	deepEqual( Stem("tempteth"), "tempteth" );
	deepEqual( Stem("tempting"), "tempt" );
	deepEqual( Stem("tempts"), "tempt" );
	deepEqual( Stem("ten"), "ten" );
	deepEqual( Stem("tenable"), "tenabl" );
	deepEqual( Stem("tenant"), "tenant" );
	deepEqual( Stem("tenanted"), "tenant" );
	deepEqual( Stem("tenantius"), "tenantiu" );
	deepEqual( Stem("tenantless"), "tenantless" );
	deepEqual( Stem("tenantry"), "tenantri" );
	deepEqual( Stem("tenants"), "tenant" );
	deepEqual( Stem("tench"), "tench" );
	deepEqual( Stem("tend"), "tend" );
	deepEqual( Stem("tendance"), "tendanc" );
	deepEqual( Stem("tended"), "tend" );
	deepEqual( Stem("tendencies"), "tendenc" );
	deepEqual( Stem("tendency"), "tendenc" );
	deepEqual( Stem("tender"), "tender" );
	deepEqual( Stem("tendered"), "tender" );
	deepEqual( Stem("tenderest"), "tenderest" );
	deepEqual( Stem("tenderly"), "tenderli" );
	deepEqual( Stem("tenderness"), "tender" );
	deepEqual( Stem("tenders"), "tender" );
	deepEqual( Stem("tending"), "tend" );
	deepEqual( Stem("tendre"), "tendr" );
	deepEqual( Stem("tends"), "tend" );
	deepEqual( Stem("tenedos"), "tenedo" );
	deepEqual( Stem("tenement"), "tenement" );
	deepEqual( Stem("tenements"), "tenement" );
	deepEqual( Stem("tenez"), "tenez" );
	deepEqual( Stem("tenfold"), "tenfold" );
	deepEqual( Stem("tennis"), "tenni" );
	deepEqual( Stem("tenor"), "tenor" );
	deepEqual( Stem("tenour"), "tenour" );
	deepEqual( Stem("tenours"), "tenour" );
	deepEqual( Stem("tens"), "ten" );
	deepEqual( Stem("tent"), "tent" );
	deepEqual( Stem("tented"), "tent" );
	deepEqual( Stem("tenth"), "tenth" );
	deepEqual( Stem("tenths"), "tenth" );
	deepEqual( Stem("tents"), "tent" );
	deepEqual( Stem("tenure"), "tenur" );
	deepEqual( Stem("tenures"), "tenur" );
	deepEqual( Stem("teoplitz"), "teoplitz" );
	deepEqual( Stem("tercel"), "tercel" );
	deepEqual( Stem("tereus"), "tereu" );
	deepEqual( Stem("tergiversation"), "tergivers" );
	deepEqual( Stem("term"), "term" );
	deepEqual( Stem("termagant"), "termag" );
	deepEqual( Stem("termed"), "term" );
	deepEqual( Stem("termination"), "termin" );
	deepEqual( Stem("terminations"), "termin" );
	deepEqual( Stem("termless"), "termless" );
	deepEqual( Stem("terms"), "term" );
	deepEqual( Stem("terra"), "terra" );
	deepEqual( Stem("terrace"), "terrac" );
	deepEqual( Stem("terraces"), "terrac" );
	deepEqual( Stem("terram"), "terram" );
	deepEqual( Stem("terras"), "terra" );
	deepEqual( Stem("terre"), "terr" );
	deepEqual( Stem("terrene"), "terren" );
	deepEqual( Stem("terrestrial"), "terrestri" );
	deepEqual( Stem("terrible"), "terribl" );
	deepEqual( Stem("terribly"), "terribli" );
	deepEqual( Stem("terrier"), "terrier" );
	deepEqual( Stem("terrific"), "terrif" );
	deepEqual( Stem("terrified"), "terrifi" );
	deepEqual( Stem("territories"), "territori" );
	deepEqual( Stem("territory"), "territori" );
	deepEqual( Stem("terror"), "terror" );
	deepEqual( Stem("terrors"), "terror" );
	deepEqual( Stem("tertian"), "tertian" );
	deepEqual( Stem("tertio"), "tertio" );
	deepEqual( Stem("test"), "test" );
	deepEqual( Stem("testament"), "testament" );
	deepEqual( Stem("testator"), "testat" );
	deepEqual( Stem("tested"), "test" );
	deepEqual( Stem("tester"), "tester" );
	deepEqual( Stem("testern"), "testern" );
	deepEqual( Stem("testify"), "testifi" );
	deepEqual( Stem("testimonials"), "testimoni" );
	deepEqual( Stem("testimonied"), "testimoni" );
	deepEqual( Stem("testimonies"), "testimoni" );
	deepEqual( Stem("testimony"), "testimoni" );
	deepEqual( Stem("testiness"), "testi" );
	deepEqual( Stem("testril"), "testril" );
	deepEqual( Stem("testy"), "testi" );
	deepEqual( Stem("tetchy"), "tetchi" );
	deepEqual( Stem("tete"), "tete" );
	deepEqual( Stem("tether"), "tether" );
	deepEqual( Stem("tetrameter"), "tetramet" );
	deepEqual( Stem("tetter"), "tetter" );
	deepEqual( Stem("tevil"), "tevil" );
	deepEqual( Stem("tewksbury"), "tewksburi" );
	deepEqual( Stem("text"), "text" );
	deepEqual( Stem("texture"), "textur" );
	deepEqual( Stem("tgv"), "tgv" );
	deepEqual( Stem("th"), "th" );
	deepEqual( Stem("thackeray"), "thackerai" );
	deepEqual( Stem("thaes"), "thae" );
	deepEqual( Stem("thames"), "thame" );
	deepEqual( Stem("than"), "than" );
	deepEqual( Stem("thane"), "thane" );
	deepEqual( Stem("thanes"), "thane" );
	deepEqual( Stem("thank"), "thank" );
	deepEqual( Stem("thanked"), "thank" );
	deepEqual( Stem("thankful"), "thank" );
	deepEqual( Stem("thankfully"), "thankfulli" );
	deepEqual( Stem("thankfulness"), "thank" );
	deepEqual( Stem("thanking"), "thank" );
	deepEqual( Stem("thankings"), "thank" );
	deepEqual( Stem("thankless"), "thankless" );
	deepEqual( Stem("thanks"), "thank" );
	deepEqual( Stem("thanksgiving"), "thanksgiv" );
	deepEqual( Stem("thasos"), "thaso" );
	deepEqual( Stem("that"), "that" );
	deepEqual( Stem("thatch"), "thatch" );
	deepEqual( Stem("thavies"), "thavi" );
	deepEqual( Stem("thaw"), "thaw" );
	deepEqual( Stem("thawing"), "thaw" );
	deepEqual( Stem("thaws"), "thaw" );
	deepEqual( Stem("the"), "the" );
	deepEqual( Stem("theatre"), "theatr" );
	deepEqual( Stem("theatres"), "theatr" );
	deepEqual( Stem("theatrical"), "theatric" );
	deepEqual( Stem("theban"), "theban" );
	deepEqual( Stem("thebes"), "thebe" );
	deepEqual( Stem("thee"), "thee" );
	deepEqual( Stem("theft"), "theft" );
	deepEqual( Stem("thefts"), "theft" );
	deepEqual( Stem("thein"), "thein" );
	deepEqual( Stem("their"), "their" );
	deepEqual( Stem("theirs"), "their" );
	deepEqual( Stem("theise"), "theis" );
	deepEqual( Stem("them"), "them" );
	deepEqual( Stem("theme"), "theme" );
	deepEqual( Stem("themes"), "theme" );
	deepEqual( Stem("themselves"), "themselv" );
	deepEqual( Stem("then"), "then" );
	deepEqual( Stem("thence"), "thenc" );
	deepEqual( Stem("thenceforth"), "thenceforth" );
	deepEqual( Stem("theologian"), "theologian" );
	deepEqual( Stem("theological"), "theolog" );
	deepEqual( Stem("theologically"), "theolog" );
	deepEqual( Stem("theologies"), "theologi" );
	deepEqual( Stem("theology"), "theologi" );
	deepEqual( Stem("theoric"), "theoric" );
	deepEqual( Stem("there"), "there" );
	deepEqual( Stem("thereabout"), "thereabout" );
	deepEqual( Stem("thereabouts"), "thereabout" );
	deepEqual( Stem("thereafter"), "thereaft" );
	deepEqual( Stem("thereat"), "thereat" );
	deepEqual( Stem("thereby"), "therebi" );
	deepEqual( Stem("therefor"), "therefor" );
	deepEqual( Stem("therefore"), "therefor" );
	deepEqual( Stem("therefrom"), "therefrom" );
	deepEqual( Stem("therein"), "therein" );
	deepEqual( Stem("thereof"), "thereof" );
	deepEqual( Stem("thereon"), "thereon" );
	deepEqual( Stem("thereto"), "thereto" );
	deepEqual( Stem("thereunto"), "thereunto" );
	deepEqual( Stem("thereupon"), "thereupon" );
	deepEqual( Stem("therewith"), "therewith" );
	deepEqual( Stem("therewithal"), "therewith" );
	deepEqual( Stem("thersites"), "thersit" );
	deepEqual( Stem("these"), "these" );
	deepEqual( Stem("theseus"), "theseu" );
	deepEqual( Stem("thessalian"), "thessalian" );
	deepEqual( Stem("thessaly"), "thessali" );
	deepEqual( Stem("thetis"), "theti" );
	deepEqual( Stem("thews"), "thew" );
	deepEqual( Stem("they"), "thei" );
	deepEqual( Stem("thick"), "thick" );
	deepEqual( Stem("thicken"), "thicken" );
	deepEqual( Stem("thickens"), "thicken" );
	deepEqual( Stem("thicker"), "thicker" );
	deepEqual( Stem("thickest"), "thickest" );
	deepEqual( Stem("thicket"), "thicket" );
	deepEqual( Stem("thickskin"), "thickskin" );
	deepEqual( Stem("thief"), "thief" );
	deepEqual( Stem("thievery"), "thieveri" );
	deepEqual( Stem("thieves"), "thiev" );
	deepEqual( Stem("thievish"), "thievish" );
	deepEqual( Stem("thigh"), "thigh" );
	deepEqual( Stem("thighs"), "thigh" );
	deepEqual( Stem("thimble"), "thimbl" );
	deepEqual( Stem("thimbleful"), "thimbl" );
	deepEqual( Stem("thimbles"), "thimbl" );
	deepEqual( Stem("thin"), "thin" );
	deepEqual( Stem("thine"), "thine" );
	deepEqual( Stem("thing"), "thing" );
	deepEqual( Stem("things"), "thing" );
	deepEqual( Stem("think"), "think" );
	deepEqual( Stem("thinker"), "thinker" );
	deepEqual( Stem("thinkest"), "thinkest" );
	deepEqual( Stem("thinkin"), "thinkin" );
	deepEqual( Stem("thinking"), "think" );
	deepEqual( Stem("thinkings"), "think" );
	deepEqual( Stem("thinks"), "think" );
	deepEqual( Stem("thinkst"), "thinkst" );
	deepEqual( Stem("thinly"), "thinli" );
	deepEqual( Stem("thinner"), "thinner" );
	deepEqual( Stem("thinnest"), "thinnest" );
	deepEqual( Stem("third"), "third" );
	deepEqual( Stem("thirdly"), "thirdli" );
	deepEqual( Stem("thirds"), "third" );
	deepEqual( Stem("thirst"), "thirst" );
	deepEqual( Stem("thirsting"), "thirst" );
	deepEqual( Stem("thirsts"), "thirst" );
	deepEqual( Stem("thirsty"), "thirsti" );
	deepEqual( Stem("thirteen"), "thirteen" );
	deepEqual( Stem("thirteenth"), "thirteenth" );
	deepEqual( Stem("thirties"), "thirti" );
	deepEqual( Stem("thirtieth"), "thirtieth" );
	deepEqual( Stem("thirty"), "thirti" );
	deepEqual( Stem("this"), "thi" );
	deepEqual( Stem("thisby"), "thisbi" );
	deepEqual( Stem("thisne"), "thisn" );
	deepEqual( Stem("thistle"), "thistl" );
	deepEqual( Stem("thistles"), "thistl" );
	deepEqual( Stem("thistlewood"), "thistlewood" );
	deepEqual( Stem("thither"), "thither" );
	deepEqual( Stem("thitherward"), "thitherward" );
	deepEqual( Stem("thmash"), "thmash" );
	deepEqual( Stem("tho"), "tho" );
	deepEqual( Stem("thoas"), "thoa" );
	deepEqual( Stem("thomas"), "thoma" );
	deepEqual( Stem("thompson"), "thompson" );
	deepEqual( Stem("thomson"), "thomson" );
	deepEqual( Stem("thong"), "thong" );
	deepEqual( Stem("thongs"), "thong" );
	deepEqual( Stem("thorn"), "thorn" );
	deepEqual( Stem("thorns"), "thorn" );
	deepEqual( Stem("thorny"), "thorni" );
	deepEqual( Stem("thorough"), "thorough" );
	deepEqual( Stem("thoroughbred"), "thoroughbr" );
	deepEqual( Stem("thoroughfare"), "thoroughfar" );
	deepEqual( Stem("thoroughly"), "thoroughli" );
	deepEqual( Stem("those"), "those" );
	deepEqual( Stem("thou"), "thou" );
	deepEqual( Stem("though"), "though" );
	deepEqual( Stem("thought"), "thought" );
	deepEqual( Stem("thoughtful"), "thought" );
	deepEqual( Stem("thoughts"), "thought" );
	deepEqual( Stem("thousand"), "thousand" );
	deepEqual( Stem("thousands"), "thousand" );
	deepEqual( Stem("thracian"), "thracian" );
	deepEqual( Stem("thraldom"), "thraldom" );
	deepEqual( Stem("thrall"), "thrall" );
	deepEqual( Stem("thralled"), "thrall" );
	deepEqual( Stem("thralls"), "thrall" );
	deepEqual( Stem("thrash"), "thrash" );
	deepEqual( Stem("thrashed"), "thrash" );
	deepEqual( Stem("thrashing"), "thrash" );
	deepEqual( Stem("thrasonical"), "thrason" );
	deepEqual( Stem("thread"), "thread" );
	deepEqual( Stem("threadbare"), "threadbar" );
	deepEqual( Stem("threaded"), "thread" );
	deepEqual( Stem("threaden"), "threaden" );
	deepEqual( Stem("threading"), "thread" );
	deepEqual( Stem("threadneedle"), "threadneedl" );
	deepEqual( Stem("threat"), "threat" );
	deepEqual( Stem("threaten"), "threaten" );
	deepEqual( Stem("threatened"), "threaten" );
	deepEqual( Stem("threatening"), "threaten" );
	deepEqual( Stem("threatens"), "threaten" );
	deepEqual( Stem("threatest"), "threatest" );
	deepEqual( Stem("threats"), "threat" );
	deepEqual( Stem("three"), "three" );
	deepEqual( Stem("threefold"), "threefold" );
	deepEqual( Stem("threepence"), "threepenc" );
	deepEqual( Stem("threepile"), "threepil" );
	deepEqual( Stem("threes"), "three" );
	deepEqual( Stem("threescore"), "threescor" );
	deepEqual( Stem("thresher"), "thresher" );
	deepEqual( Stem("threshold"), "threshold" );
	deepEqual( Stem("threw"), "threw" );
	deepEqual( Stem("thrice"), "thrice" );
	deepEqual( Stem("thrift"), "thrift" );
	deepEqual( Stem("thriftless"), "thriftless" );
	deepEqual( Stem("thrifts"), "thrift" );
	deepEqual( Stem("thrifty"), "thrifti" );
	deepEqual( Stem("thrill"), "thrill" );
	deepEqual( Stem("thrilled"), "thrill" );
	deepEqual( Stem("thrilling"), "thrill" );
	deepEqual( Stem("thrills"), "thrill" );
	deepEqual( Stem("thrive"), "thrive" );
	deepEqual( Stem("thrived"), "thrive" );
	deepEqual( Stem("thrivers"), "thriver" );
	deepEqual( Stem("thrives"), "thrive" );
	deepEqual( Stem("thriving"), "thrive" );
	deepEqual( Stem("throat"), "throat" );
	deepEqual( Stem("throats"), "throat" );
	deepEqual( Stem("throb"), "throb" );
	deepEqual( Stem("throbbing"), "throb" );
	deepEqual( Stem("throbs"), "throb" );
	deepEqual( Stem("throca"), "throca" );
	deepEqual( Stem("throe"), "throe" );
	deepEqual( Stem("throes"), "throe" );
	deepEqual( Stem("thromuldo"), "thromuldo" );
	deepEqual( Stem("thron"), "thron" );
	deepEqual( Stem("throne"), "throne" );
	deepEqual( Stem("throned"), "throne" );
	deepEqual( Stem("thrones"), "throne" );
	deepEqual( Stem("throng"), "throng" );
	deepEqual( Stem("thronged"), "throng" );
	deepEqual( Stem("thronging"), "throng" );
	deepEqual( Stem("throngs"), "throng" );
	deepEqual( Stem("throstle"), "throstl" );
	deepEqual( Stem("throttle"), "throttl" );
	deepEqual( Stem("through"), "through" );
	deepEqual( Stem("throughfare"), "throughfar" );
	deepEqual( Stem("throughfares"), "throughfar" );
	deepEqual( Stem("throughly"), "throughli" );
	deepEqual( Stem("throughout"), "throughout" );
	deepEqual( Stem("throw"), "throw" );
	deepEqual( Stem("thrower"), "thrower" );
	deepEqual( Stem("throwest"), "throwest" );
	deepEqual( Stem("throwing"), "throw" );
	deepEqual( Stem("thrown"), "thrown" );
	deepEqual( Stem("throws"), "throw" );
	deepEqual( Stem("thrum"), "thrum" );
	deepEqual( Stem("thrumm"), "thrumm" );
	deepEqual( Stem("thrummed"), "thrum" );
	deepEqual( Stem("thrumming"), "thrum" );
	deepEqual( Stem("thrump"), "thrump" );
	deepEqual( Stem("thrush"), "thrush" );
	deepEqual( Stem("thrust"), "thrust" );
	deepEqual( Stem("thrusteth"), "thrusteth" );
	deepEqual( Stem("thrusting"), "thrust" );
	deepEqual( Stem("thrusts"), "thrust" );
	deepEqual( Stem("thumb"), "thumb" );
	deepEqual( Stem("thumbs"), "thumb" );
	deepEqual( Stem("thump"), "thump" );
	deepEqual( Stem("thumping"), "thump" );
	deepEqual( Stem("thumps"), "thump" );
	deepEqual( Stem("thund"), "thund" );
	deepEqual( Stem("thunder"), "thunder" );
	deepEqual( Stem("thunderbolt"), "thunderbolt" );
	deepEqual( Stem("thunderbolts"), "thunderbolt" );
	deepEqual( Stem("thundered"), "thunder" );
	deepEqual( Stem("thunderer"), "thunder" );
	deepEqual( Stem("thundering"), "thunder" );
	deepEqual( Stem("thunders"), "thunder" );
	deepEqual( Stem("thunderstone"), "thunderston" );
	deepEqual( Stem("thunderstroke"), "thunderstrok" );
	deepEqual( Stem("thurifer"), "thurif" );
	deepEqual( Stem("thurio"), "thurio" );
	deepEqual( Stem("thursday"), "thursdai" );
	deepEqual( Stem("thursdays"), "thursdai" );
	deepEqual( Stem("thurtell"), "thurtel" );
	deepEqual( Stem("thus"), "thu" );
	deepEqual( Stem("thwack"), "thwack" );
	deepEqual( Stem("thwart"), "thwart" );
	deepEqual( Stem("thwarted"), "thwart" );
	deepEqual( Stem("thwarting"), "thwart" );
	deepEqual( Stem("thwartings"), "thwart" );
	deepEqual( Stem("thy"), "thy" );
	deepEqual( Stem("thyme"), "thyme" );
	deepEqual( Stem("thymus"), "thymu" );
	deepEqual( Stem("thyreus"), "thyreu" );
	deepEqual( Stem("thyself"), "thyself" );
	deepEqual( Stem("ti"), "ti" );
	deepEqual( Stem("tib"), "tib" );
	deepEqual( Stem("tiber"), "tiber" );
	deepEqual( Stem("tiberio"), "tiberio" );
	deepEqual( Stem("tibey"), "tibei" );
	deepEqual( Stem("ticed"), "tice" );
	deepEqual( Stem("tick"), "tick" );
	deepEqual( Stem("ticked"), "tick" );
	deepEqual( Stem("ticker"), "ticker" );
	deepEqual( Stem("tickers"), "ticker" );
	deepEqual( Stem("ticket"), "ticket" );
	deepEqual( Stem("tickets"), "ticket" );
	deepEqual( Stem("ticking"), "tick" );
	deepEqual( Stem("tickl"), "tickl" );
	deepEqual( Stem("tickle"), "tickl" );
	deepEqual( Stem("tickled"), "tickl" );
	deepEqual( Stem("tickles"), "tickl" );
	deepEqual( Stem("tickleus"), "tickleu" );
	deepEqual( Stem("tickling"), "tickl" );
	deepEqual( Stem("ticklish"), "ticklish" );
	deepEqual( Stem("ticktock"), "ticktock" );
	deepEqual( Stem("tiddle"), "tiddl" );
	deepEqual( Stem("tide"), "tide" );
	deepEqual( Stem("tides"), "tide" );
	deepEqual( Stem("tidings"), "tide" );
	deepEqual( Stem("tidy"), "tidi" );
	deepEqual( Stem("tie"), "tie" );
	deepEqual( Stem("tied"), "ti" );
	deepEqual( Stem("tier"), "tier" );
	deepEqual( Stem("ties"), "ti" );
	deepEqual( Stem("tiff"), "tiff" );
	deepEqual( Stem("tiffin"), "tiffin" );
	deepEqual( Stem("tiffins"), "tiffin" );
	deepEqual( Stem("tiger"), "tiger" );
	deepEqual( Stem("tigers"), "tiger" );
	deepEqual( Stem("tight"), "tight" );
	deepEqual( Stem("tightest"), "tightest" );
	deepEqual( Stem("tightly"), "tightli" );
	deepEqual( Stem("tights"), "tight" );
	deepEqual( Stem("tighty"), "tighti" );
	deepEqual( Stem("tike"), "tike" );
	deepEqual( Stem("til"), "til" );
	deepEqual( Stem("tilbury"), "tilburi" );
	deepEqual( Stem("tile"), "tile" );
	deepEqual( Stem("tiler"), "tiler" );
	deepEqual( Stem("till"), "till" );
	deepEqual( Stem("tillage"), "tillag" );
	deepEqual( Stem("tilly"), "tilli" );
	deepEqual( Stem("tilt"), "tilt" );
	deepEqual( Stem("tilted"), "tilt" );
	deepEqual( Stem("tilter"), "tilter" );
	deepEqual( Stem("tilth"), "tilth" );
	deepEqual( Stem("tilting"), "tilt" );
	deepEqual( Stem("tilts"), "tilt" );
	deepEqual( Stem("tiltyard"), "tiltyard" );
	deepEqual( Stem("tim"), "tim" );
	deepEqual( Stem("timandra"), "timandra" );
	deepEqual( Stem("timber"), "timber" );
	deepEqual( Stem("timbuctoo"), "timbuctoo" );
	deepEqual( Stem("time"), "time" );
	deepEqual( Stem("timeless"), "timeless" );
	deepEqual( Stem("timelier"), "timeli" );
	deepEqual( Stem("timely"), "time" );
	deepEqual( Stem("times"), "time" );
	deepEqual( Stem("timid"), "timid" );
	deepEqual( Stem("timidity"), "timid" );
	deepEqual( Stem("timidly"), "timidli" );
	deepEqual( Stem("timon"), "timon" );
	deepEqual( Stem("timor"), "timor" );
	deepEqual( Stem("timorous"), "timor" );
	deepEqual( Stem("timorously"), "timor" );
	deepEqual( Stem("tin"), "tin" );
	deepEqual( Stem("tinct"), "tinct" );
	deepEqual( Stem("tincture"), "tinctur" );
	deepEqual( Stem("tinctures"), "tinctur" );
	deepEqual( Stem("tinder"), "tinder" );
	deepEqual( Stem("tingle"), "tingl" );
	deepEqual( Stem("tingled"), "tingl" );
	deepEqual( Stem("tingling"), "tingl" );
	deepEqual( Stem("tink"), "tink" );
	deepEqual( Stem("tinker"), "tinker" );
	deepEqual( Stem("tinkers"), "tinker" );
	deepEqual( Stem("tinkling"), "tinkl" );
	deepEqual( Stem("tinsel"), "tinsel" );
	deepEqual( Stem("tinselled"), "tinsel" );
	deepEqual( Stem("tinted"), "tint" );
	deepEqual( Stem("tinteniac"), "tinteniac" );
	deepEqual( Stem("tiny"), "tini" );
	deepEqual( Stem("tip"), "tip" );
	deepEqual( Stem("tipp"), "tipp" );
	deepEqual( Stem("tipped"), "tip" );
	deepEqual( Stem("tippet"), "tippet" );
	deepEqual( Stem("tippling"), "tippl" );
	deepEqual( Stem("tips"), "tip" );
	deepEqual( Stem("tipsify"), "tipsifi" );
	deepEqual( Stem("tipsy"), "tipsi" );
	deepEqual( Stem("tiptoe"), "tipto" );
	deepEqual( Stem("tiptoff"), "tiptoff" );
	deepEqual( Stem("tir"), "tir" );
	deepEqual( Stem("tire"), "tire" );
	deepEqual( Stem("tired"), "tire" );
	deepEqual( Stem("tires"), "tire" );
	deepEqual( Stem("tirest"), "tirest" );
	deepEqual( Stem("tiring"), "tire" );
	deepEqual( Stem("tirra"), "tirra" );
	deepEqual( Stem("tirrits"), "tirrit" );
	deepEqual( Stem("tis"), "ti" );
	deepEqual( Stem("tish"), "tish" );
	deepEqual( Stem("tisick"), "tisick" );
	deepEqual( Stem("tissue"), "tissu" );
	deepEqual( Stem("titan"), "titan" );
	deepEqual( Stem("titania"), "titania" );
	deepEqual( Stem("tithe"), "tith" );
	deepEqual( Stem("tithed"), "tith" );
	deepEqual( Stem("tithes"), "tith" );
	deepEqual( Stem("tithing"), "tith" );
	deepEqual( Stem("titinius"), "titiniu" );
	deepEqual( Stem("title"), "titl" );
	deepEqual( Stem("titled"), "titl" );
	deepEqual( Stem("titleless"), "titleless" );
	deepEqual( Stem("titles"), "titl" );
	deepEqual( Stem("tittle"), "tittl" );
	deepEqual( Stem("tittles"), "tittl" );
	deepEqual( Stem("titular"), "titular" );
	deepEqual( Stem("titularly"), "titularli" );
	deepEqual( Stem("titus"), "titu" );
	deepEqual( Stem("tn"), "tn" );
	deepEqual( Stem("to"), "to" );
	deepEqual( Stem("toad"), "toad" );
	deepEqual( Stem("toadies"), "toadi" );
	deepEqual( Stem("toads"), "toad" );
	deepEqual( Stem("toadstool"), "toadstool" );
	deepEqual( Stem("toady"), "toadi" );
	deepEqual( Stem("toast"), "toast" );
	deepEqual( Stem("toasted"), "toast" );
	deepEqual( Stem("toaster"), "toaster" );
	deepEqual( Stem("toasting"), "toast" );
	deepEqual( Stem("toasts"), "toast" );
	deepEqual( Stem("toaze"), "toaz" );
	deepEqual( Stem("tobacco"), "tobacco" );
	deepEqual( Stem("toby"), "tobi" );
	deepEqual( Stem("tock"), "tock" );
	deepEqual( Stem("tod"), "tod" );
	deepEqual( Stem("today"), "todai" );
	deepEqual( Stem("todd"), "todd" );
	deepEqual( Stem("todds"), "todd" );
	deepEqual( Stem("toddy"), "toddi" );
	deepEqual( Stem("todpole"), "todpol" );
	deepEqual( Stem("tods"), "tod" );
	deepEqual( Stem("toe"), "toe" );
	deepEqual( Stem("toes"), "toe" );
	deepEqual( Stem("toffee"), "toffe" );
	deepEqual( Stem("toffy"), "toffi" );
	deepEqual( Stem("tofore"), "tofor" );
	deepEqual( Stem("toge"), "toge" );
	deepEqual( Stem("toged"), "toge" );
	deepEqual( Stem("together"), "togeth" );
	deepEqual( Stem("toil"), "toil" );
	deepEqual( Stem("toiled"), "toil" );
	deepEqual( Stem("toilet"), "toilet" );
	deepEqual( Stem("toilette"), "toilett" );
	deepEqual( Stem("toilettes"), "toilett" );
	deepEqual( Stem("toiling"), "toil" );
	deepEqual( Stem("toils"), "toil" );
	deepEqual( Stem("toilsome"), "toilsom" );
	deepEqual( Stem("token"), "token" );
	deepEqual( Stem("tokens"), "token" );
	deepEqual( Stem("told"), "told" );
	deepEqual( Stem("toledo"), "toledo" );
	deepEqual( Stem("tolerable"), "toler" );
	deepEqual( Stem("tolerably"), "toler" );
	deepEqual( Stem("toll"), "toll" );
	deepEqual( Stem("tolled"), "toll" );
	deepEqual( Stem("tolling"), "toll" );
	deepEqual( Stem("tolly"), "tolli" );
	deepEqual( Stem("tom"), "tom" );
	deepEqual( Stem("tomb"), "tomb" );
	deepEqual( Stem("tombe"), "tomb" );
	deepEqual( Stem("tombed"), "tomb" );
	deepEqual( Stem("tombless"), "tombless" );
	deepEqual( Stem("tomboys"), "tomboi" );
	deepEqual( Stem("tombs"), "tomb" );
	deepEqual( Stem("tombstone"), "tombston" );
	deepEqual( Stem("tomeavesian"), "tomeavesian" );
	deepEqual( Stem("tomkins"), "tomkin" );
	deepEqual( Stem("tommy"), "tommi" );
	deepEqual( Stem("tomorrow"), "tomorrow" );
	deepEqual( Stem("tomyris"), "tomyri" );
	deepEqual( Stem("ton"), "ton" );
	deepEqual( Stem("tone"), "tone" );
	deepEqual( Stem("toned"), "tone" );
	deepEqual( Stem("tones"), "tone" );
	deepEqual( Stem("tongs"), "tong" );
	deepEqual( Stem("tongu"), "tongu" );
	deepEqual( Stem("tongue"), "tongu" );
	deepEqual( Stem("tongued"), "tongu" );
	deepEqual( Stem("tongueless"), "tongueless" );
	deepEqual( Stem("tongues"), "tongu" );
	deepEqual( Stem("tonight"), "tonight" );
	deepEqual( Stem("too"), "too" );
	deepEqual( Stem("tooce"), "tooc" );
	deepEqual( Stem("took"), "took" );
	deepEqual( Stem("tool"), "tool" );
	deepEqual( Stem("tools"), "tool" );
	deepEqual( Stem("tooth"), "tooth" );
	deepEqual( Stem("toothache"), "toothach" );
	deepEqual( Stem("toothless"), "toothless" );
	deepEqual( Stem("toothpick"), "toothpick" );
	deepEqual( Stem("toothpicker"), "toothpick" );
	deepEqual( Stem("tooting"), "toot" );
	deepEqual( Stem("top"), "top" );
	deepEqual( Stem("topas"), "topa" );
	deepEqual( Stem("topful"), "top" );
	deepEqual( Stem("topgallant"), "topgal" );
	deepEqual( Stem("topic"), "topic" );
	deepEqual( Stem("topics"), "topic" );
	deepEqual( Stem("topless"), "topless" );
	deepEqual( Stem("toplitz"), "toplitz" );
	deepEqual( Stem("topmast"), "topmast" );
	deepEqual( Stem("topp"), "topp" );
	deepEqual( Stem("topping"), "top" );
	deepEqual( Stem("topple"), "toppl" );
	deepEqual( Stem("topples"), "toppl" );
	deepEqual( Stem("tops"), "top" );
	deepEqual( Stem("topsail"), "topsail" );
	deepEqual( Stem("topsy"), "topsi" );
	deepEqual( Stem("toque"), "toqu" );
	deepEqual( Stem("torch"), "torch" );
	deepEqual( Stem("torchbearer"), "torchbear" );
	deepEqual( Stem("torchbearers"), "torchbear" );
	deepEqual( Stem("torcher"), "torcher" );
	deepEqual( Stem("torches"), "torch" );
	deepEqual( Stem("torchlight"), "torchlight" );
	deepEqual( Stem("tore"), "tore" );
	deepEqual( Stem("torment"), "torment" );
	deepEqual( Stem("tormenta"), "tormenta" );
	deepEqual( Stem("tormente"), "torment" );
	deepEqual( Stem("tormented"), "torment" );
	deepEqual( Stem("tormenting"), "torment" );
	deepEqual( Stem("tormentors"), "tormentor" );
	deepEqual( Stem("torments"), "torment" );
	deepEqual( Stem("torn"), "torn" );
	deepEqual( Stem("torpid"), "torpid" );
	deepEqual( Stem("torrent"), "torrent" );
	deepEqual( Stem("tortive"), "tortiv" );
	deepEqual( Stem("tortoise"), "tortois" );
	deepEqual( Stem("tortur"), "tortur" );
	deepEqual( Stem("torture"), "tortur" );
	deepEqual( Stem("tortured"), "tortur" );
	deepEqual( Stem("torturer"), "tortur" );
	deepEqual( Stem("torturers"), "tortur" );
	deepEqual( Stem("tortures"), "tortur" );
	deepEqual( Stem("torturest"), "torturest" );
	deepEqual( Stem("torturing"), "tortur" );
	deepEqual( Stem("tory"), "tori" );
	deepEqual( Stem("toryne"), "toryn" );
	deepEqual( Stem("toss"), "toss" );
	deepEqual( Stem("tossed"), "toss" );
	deepEqual( Stem("tosseth"), "tosseth" );
	deepEqual( Stem("tossing"), "toss" );
	deepEqual( Stem("tosti"), "tosti" );
	deepEqual( Stem("tot"), "tot" );
	deepEqual( Stem("total"), "total" );
	deepEqual( Stem("totally"), "total" );
	deepEqual( Stem("tott"), "tott" );
	deepEqual( Stem("tottered"), "totter" );
	deepEqual( Stem("tottering"), "totter" );
	deepEqual( Stem("totters"), "totter" );
	deepEqual( Stem("tou"), "tou" );
	deepEqual( Stem("touch"), "touch" );
	deepEqual( Stem("touched"), "touch" );
	deepEqual( Stem("touches"), "touch" );
	deepEqual( Stem("toucheth"), "toucheth" );
	deepEqual( Stem("touching"), "touch" );
	deepEqual( Stem("touchstone"), "touchston" );
	deepEqual( Stem("tough"), "tough" );
	deepEqual( Stem("tougher"), "tougher" );
	deepEqual( Stem("toughness"), "tough" );
	deepEqual( Stem("toupee"), "toupe" );
	deepEqual( Stem("tour"), "tour" );
	deepEqual( Stem("touraine"), "tourain" );
	deepEqual( Stem("tourists"), "tourist" );
	deepEqual( Stem("tournament"), "tournament" );
	deepEqual( Stem("tournaments"), "tournament" );
	deepEqual( Stem("tours"), "tour" );
	deepEqual( Stem("tous"), "tou" );
	deepEqual( Stem("tout"), "tout" );
	deepEqual( Stem("toute"), "tout" );
	deepEqual( Stem("touze"), "touz" );
	deepEqual( Stem("tow"), "tow" );
	deepEqual( Stem("toward"), "toward" );
	deepEqual( Stem("towardly"), "towardli" );
	deepEqual( Stem("towards"), "toward" );
	deepEqual( Stem("tower"), "tower" );
	deepEqual( Stem("towering"), "tower" );
	deepEqual( Stem("towers"), "tower" );
	deepEqual( Stem("town"), "town" );
	deepEqual( Stem("towns"), "town" );
	deepEqual( Stem("township"), "township" );
	deepEqual( Stem("townsman"), "townsman" );
	deepEqual( Stem("townsmen"), "townsmen" );
	deepEqual( Stem("towton"), "towton" );
	deepEqual( Stem("towzer"), "towzer" );
	deepEqual( Stem("toxophilite"), "toxophilit" );
	deepEqual( Stem("toy"), "toi" );
	deepEqual( Stem("toys"), "toi" );
	deepEqual( Stem("tozer"), "tozer" );
	deepEqual( Stem("trace"), "trace" );
	deepEqual( Stem("traced"), "trace" );
	deepEqual( Stem("traces"), "trace" );
	deepEqual( Stem("track"), "track" );
	deepEqual( Stem("tract"), "tract" );
	deepEqual( Stem("tractable"), "tractabl" );
	deepEqual( Stem("tracts"), "tract" );
	deepEqual( Stem("trade"), "trade" );
	deepEqual( Stem("traded"), "trade" );
	deepEqual( Stem("traders"), "trader" );
	deepEqual( Stem("trades"), "trade" );
	deepEqual( Stem("tradesman"), "tradesman" );
	deepEqual( Stem("tradesmen"), "tradesmen" );
	deepEqual( Stem("trading"), "trade" );
	deepEqual( Stem("tradition"), "tradit" );
	deepEqual( Stem("traditional"), "tradit" );
	deepEqual( Stem("traditionally"), "tradition" );
	deepEqual( Stem("traditions"), "tradit" );
	deepEqual( Stem("traduc"), "traduc" );
	deepEqual( Stem("traduced"), "traduc" );
	deepEqual( Stem("traducement"), "traduc" );
	deepEqual( Stem("trafalgar"), "trafalgar" );
	deepEqual( Stem("traffic"), "traffic" );
	deepEqual( Stem("traffickers"), "traffick" );
	deepEqual( Stem("traffics"), "traffic" );
	deepEqual( Stem("tragedian"), "tragedian" );
	deepEqual( Stem("tragedians"), "tragedian" );
	deepEqual( Stem("tragedies"), "tragedi" );
	deepEqual( Stem("tragedy"), "tragedi" );
	deepEqual( Stem("tragic"), "tragic" );
	deepEqual( Stem("tragical"), "tragic" );
	deepEqual( Stem("trail"), "trail" );
	deepEqual( Stem("trailing"), "trail" );
	deepEqual( Stem("train"), "train" );
	deepEqual( Stem("trained"), "train" );
	deepEqual( Stem("training"), "train" );
	deepEqual( Stem("trains"), "train" );
	deepEqual( Stem("trait"), "trait" );
	deepEqual( Stem("traitor"), "traitor" );
	deepEqual( Stem("traitorly"), "traitorli" );
	deepEqual( Stem("traitorous"), "traitor" );
	deepEqual( Stem("traitorously"), "traitor" );
	deepEqual( Stem("traitors"), "traitor" );
	deepEqual( Stem("traitress"), "traitress" );
	deepEqual( Stem("traject"), "traject" );
	deepEqual( Stem("trammel"), "trammel" );
	deepEqual( Stem("trample"), "trampl" );
	deepEqual( Stem("trampled"), "trampl" );
	deepEqual( Stem("trampling"), "trampl" );
	deepEqual( Stem("tranc"), "tranc" );
	deepEqual( Stem("trance"), "tranc" );
	deepEqual( Stem("tranio"), "tranio" );
	deepEqual( Stem("tranquil"), "tranquil" );
	deepEqual( Stem("tranquille"), "tranquil" );
	deepEqual( Stem("tranquillity"), "tranquil" );
	deepEqual( Stem("transact"), "transact" );
	deepEqual( Stem("transacted"), "transact" );
	deepEqual( Stem("transaction"), "transact" );
	deepEqual( Stem("transactions"), "transact" );
	deepEqual( Stem("transcendence"), "transcend" );
	deepEqual( Stem("transcends"), "transcend" );
	deepEqual( Stem("transcribed"), "transcrib" );
	deepEqual( Stem("transfer"), "transfer" );
	deepEqual( Stem("transferred"), "transfer" );
	deepEqual( Stem("transfigur"), "transfigur" );
	deepEqual( Stem("transfix"), "transfix" );
	deepEqual( Stem("transform"), "transform" );
	deepEqual( Stem("transformation"), "transform" );
	deepEqual( Stem("transformations"), "transform" );
	deepEqual( Stem("transformed"), "transform" );
	deepEqual( Stem("transgress"), "transgress" );
	deepEqual( Stem("transgresses"), "transgress" );
	deepEqual( Stem("transgressing"), "transgress" );
	deepEqual( Stem("transgression"), "transgress" );
	deepEqual( Stem("transitory"), "transitori" );
	deepEqual( Stem("translate"), "translat" );
	deepEqual( Stem("translated"), "translat" );
	deepEqual( Stem("translates"), "translat" );
	deepEqual( Stem("translation"), "translat" );
	deepEqual( Stem("transmigrates"), "transmigr" );
	deepEqual( Stem("transmutation"), "transmut" );
	deepEqual( Stem("transmuted"), "transmut" );
	deepEqual( Stem("transparency"), "transpar" );
	deepEqual( Stem("transparent"), "transpar" );
	deepEqual( Stem("transport"), "transport" );
	deepEqual( Stem("transportance"), "transport" );
	deepEqual( Stem("transported"), "transport" );
	deepEqual( Stem("transporting"), "transport" );
	deepEqual( Stem("transports"), "transport" );
	deepEqual( Stem("transpose"), "transpos" );
	deepEqual( Stem("transshape"), "transshap" );
	deepEqual( Stem("trap"), "trap" );
	deepEqual( Stem("trapp"), "trapp" );
	deepEqual( Stem("trappings"), "trap" );
	deepEqual( Stem("traps"), "trap" );
	deepEqual( Stem("trash"), "trash" );
	deepEqual( Stem("travail"), "travail" );
	deepEqual( Stem("travails"), "travail" );
	deepEqual( Stem("travel"), "travel" );
	deepEqual( Stem("traveler"), "travel" );
	deepEqual( Stem("traveling"), "travel" );
	deepEqual( Stem("travell"), "travel" );
	deepEqual( Stem("travelled"), "travel" );
	deepEqual( Stem("traveller"), "travel" );
	deepEqual( Stem("travellers"), "travel" );
	deepEqual( Stem("travellest"), "travellest" );
	deepEqual( Stem("travelling"), "travel" );
	deepEqual( Stem("travels"), "travel" );
	deepEqual( Stem("travers"), "traver" );
	deepEqual( Stem("traverse"), "travers" );
	deepEqual( Stem("traversee"), "traverse" );
	deepEqual( Stem("tray"), "trai" );
	deepEqual( Stem("trays"), "trai" );
	deepEqual( Stem("treacherous"), "treacher" );
	deepEqual( Stem("treacherously"), "treacher" );
	deepEqual( Stem("treachers"), "treacher" );
	deepEqual( Stem("treachery"), "treacheri" );
	deepEqual( Stem("tread"), "tread" );
	deepEqual( Stem("treading"), "tread" );
	deepEqual( Stem("treads"), "tread" );
	deepEqual( Stem("treason"), "treason" );
	deepEqual( Stem("treasonable"), "treason" );
	deepEqual( Stem("treasonous"), "treason" );
	deepEqual( Stem("treasons"), "treason" );
	deepEqual( Stem("treasure"), "treasur" );
	deepEqual( Stem("treasured"), "treasur" );
	deepEqual( Stem("treasurer"), "treasur" );
	deepEqual( Stem("treasures"), "treasur" );
	deepEqual( Stem("treasuries"), "treasuri" );
	deepEqual( Stem("treasury"), "treasuri" );
	deepEqual( Stem("treat"), "treat" );
	deepEqual( Stem("treated"), "treat" );
	deepEqual( Stem("treaties"), "treati" );
	deepEqual( Stem("treating"), "treat" );
	deepEqual( Stem("treatise"), "treatis" );
	deepEqual( Stem("treatment"), "treatment" );
	deepEqual( Stem("treats"), "treat" );
	deepEqual( Stem("treaty"), "treati" );
	deepEqual( Stem("treble"), "trebl" );
	deepEqual( Stem("trebled"), "trebl" );
	deepEqual( Stem("trebles"), "trebl" );
	deepEqual( Stem("trebonius"), "treboniu" );
	deepEqual( Stem("tree"), "tree" );
	deepEqual( Stem("trees"), "tree" );
	deepEqual( Stem("trellis"), "trelli" );
	deepEqual( Stem("tremble"), "trembl" );
	deepEqual( Stem("trembled"), "trembl" );
	deepEqual( Stem("trembles"), "trembl" );
	deepEqual( Stem("tremblest"), "tremblest" );
	deepEqual( Stem("trembling"), "trembl" );
	deepEqual( Stem("tremblingly"), "tremblingli" );
	deepEqual( Stem("tremendous"), "tremend" );
	deepEqual( Stem("tremens"), "tremen" );
	deepEqual( Stem("tremor"), "tremor" );
	deepEqual( Stem("trempling"), "trempl" );
	deepEqual( Stem("tremulous"), "tremul" );
	deepEqual( Stem("tremulously"), "tremul" );
	deepEqual( Stem("trench"), "trench" );
	deepEqual( Stem("trenchant"), "trenchant" );
	deepEqual( Stem("trenched"), "trench" );
	deepEqual( Stem("trencher"), "trencher" );
	deepEqual( Stem("trenchering"), "trencher" );
	deepEqual( Stem("trencherman"), "trencherman" );
	deepEqual( Stem("trenchers"), "trencher" );
	deepEqual( Stem("trenches"), "trench" );
	deepEqual( Stem("trenching"), "trench" );
	deepEqual( Stem("trenck"), "trenck" );
	deepEqual( Stem("trent"), "trent" );
	deepEqual( Stem("trente"), "trent" );
	deepEqual( Stem("tres"), "tre" );
	deepEqual( Stem("trespass"), "trespass" );
	deepEqual( Stem("trespasses"), "trespass" );
	deepEqual( Stem("tressel"), "tressel" );
	deepEqual( Stem("tresses"), "tress" );
	deepEqual( Stem("treys"), "trei" );
	deepEqual( Stem("trial"), "trial" );
	deepEqual( Stem("trials"), "trial" );
	deepEqual( Stem("triangular"), "triangular" );
	deepEqual( Stem("trib"), "trib" );
	deepEqual( Stem("tribe"), "tribe" );
	deepEqual( Stem("tribes"), "tribe" );
	deepEqual( Stem("tribulation"), "tribul" );
	deepEqual( Stem("tribunal"), "tribun" );
	deepEqual( Stem("tribune"), "tribun" );
	deepEqual( Stem("tribunes"), "tribun" );
	deepEqual( Stem("tributaries"), "tributari" );
	deepEqual( Stem("tributary"), "tributari" );
	deepEqual( Stem("tribute"), "tribut" );
	deepEqual( Stem("tributes"), "tribut" );
	deepEqual( Stem("trice"), "trice" );
	deepEqual( Stem("trick"), "trick" );
	deepEqual( Stem("tricking"), "trick" );
	deepEqual( Stem("trickled"), "trickl" );
	deepEqual( Stem("trickling"), "trickl" );
	deepEqual( Stem("tricks"), "trick" );
	deepEqual( Stem("tricksy"), "tricksi" );
	deepEqual( Stem("tricoloured"), "tricolour" );
	deepEqual( Stem("trictrac"), "trictrac" );
	deepEqual( Stem("trident"), "trident" );
	deepEqual( Stem("tried"), "tri" );
	deepEqual( Stem("trier"), "trier" );
	deepEqual( Stem("tries"), "tri" );
	deepEqual( Stem("trifle"), "trifl" );
	deepEqual( Stem("trifled"), "trifl" );
	deepEqual( Stem("trifler"), "trifler" );
	deepEqual( Stem("trifles"), "trifl" );
	deepEqual( Stem("trifling"), "trifl" );
	deepEqual( Stem("trigon"), "trigon" );
	deepEqual( Stem("trill"), "trill" );
	deepEqual( Stem("trilling"), "trill" );
	deepEqual( Stem("trills"), "trill" );
	deepEqual( Stem("trim"), "trim" );
	deepEqual( Stem("trimeter"), "trimet" );
	deepEqual( Stem("trimly"), "trimli" );
	deepEqual( Stem("trimm"), "trimm" );
	deepEqual( Stem("trimmed"), "trim" );
	deepEqual( Stem("trimming"), "trim" );
	deepEqual( Stem("trimmings"), "trim" );
	deepEqual( Stem("trims"), "trim" );
	deepEqual( Stem("trinculo"), "trinculo" );
	deepEqual( Stem("trinculos"), "trinculo" );
	deepEqual( Stem("trinity"), "triniti" );
	deepEqual( Stem("trinket"), "trinket" );
	deepEqual( Stem("trinkets"), "trinket" );
	deepEqual( Stem("trip"), "trip" );
	deepEqual( Stem("tripartite"), "tripartit" );
	deepEqual( Stem("tripe"), "tripe" );
	deepEqual( Stem("triple"), "tripl" );
	deepEqual( Stem("triplex"), "triplex" );
	deepEqual( Stem("tripoli"), "tripoli" );
	deepEqual( Stem("tripolis"), "tripoli" );
	deepEqual( Stem("tripp"), "tripp" );
	deepEqual( Stem("tripped"), "trip" );
	deepEqual( Stem("tripping"), "trip" );
	deepEqual( Stem("trippingly"), "trippingli" );
	deepEqual( Stem("trips"), "trip" );
	deepEqual( Stem("triste"), "trist" );
	deepEqual( Stem("tristful"), "trist" );
	deepEqual( Stem("trite"), "trite" );
	deepEqual( Stem("triton"), "triton" );
	deepEqual( Stem("tritons"), "triton" );
	deepEqual( Stem("triumph"), "triumph" );
	deepEqual( Stem("triumphal"), "triumphal" );
	deepEqual( Stem("triumphant"), "triumphant" );
	deepEqual( Stem("triumphantly"), "triumphantli" );
	deepEqual( Stem("triumphed"), "triumph" );
	deepEqual( Stem("triumpher"), "triumpher" );
	deepEqual( Stem("triumphers"), "triumpher" );
	deepEqual( Stem("triumphing"), "triumph" );
	deepEqual( Stem("triumphs"), "triumph" );
	deepEqual( Stem("triumvir"), "triumvir" );
	deepEqual( Stem("triumvirate"), "triumvir" );
	deepEqual( Stem("triumvirs"), "triumvir" );
	deepEqual( Stem("triumviry"), "triumviri" );
	deepEqual( Stem("trivial"), "trivial" );
	deepEqual( Stem("troat"), "troat" );
	deepEqual( Stem("trod"), "trod" );
	deepEqual( Stem("trodden"), "trodden" );
	deepEqual( Stem("troiant"), "troiant" );
	deepEqual( Stem("troien"), "troien" );
	deepEqual( Stem("troilus"), "troilu" );
	deepEqual( Stem("troiluses"), "troilus" );
	deepEqual( Stem("trojan"), "trojan" );
	deepEqual( Stem("trojans"), "trojan" );
	deepEqual( Stem("troll"), "troll" );
	deepEqual( Stem("trombones"), "trombon" );
	deepEqual( Stem("tromperies"), "tromperi" );
	deepEqual( Stem("trompet"), "trompet" );
	deepEqual( Stem("troop"), "troop" );
	deepEqual( Stem("trooped"), "troop" );
	deepEqual( Stem("troopers"), "trooper" );
	deepEqual( Stem("trooping"), "troop" );
	deepEqual( Stem("troops"), "troop" );
	deepEqual( Stem("trop"), "trop" );
	deepEqual( Stem("trophies"), "trophi" );
	deepEqual( Stem("trophonius"), "trophoniu" );
	deepEqual( Stem("trophy"), "trophi" );
	deepEqual( Stem("tropical"), "tropic" );
	deepEqual( Stem("tropically"), "tropic" );
	deepEqual( Stem("trot"), "trot" );
	deepEqual( Stem("troth"), "troth" );
	deepEqual( Stem("trothed"), "troth" );
	deepEqual( Stem("troths"), "troth" );
	deepEqual( Stem("trots"), "trot" );
	deepEqual( Stem("trottant"), "trottant" );
	deepEqual( Stem("trotted"), "trot" );
	deepEqual( Stem("trotter"), "trotter" );
	deepEqual( Stem("trottermore"), "trottermor" );
	deepEqual( Stem("trotting"), "trot" );
	deepEqual( Stem("trouble"), "troubl" );
	deepEqual( Stem("troubled"), "troubl" );
	deepEqual( Stem("troubler"), "troubler" );
	deepEqual( Stem("troubles"), "troubl" );
	deepEqual( Stem("troublesome"), "troublesom" );
	deepEqual( Stem("troublest"), "troublest" );
	deepEqual( Stem("troubling"), "troubl" );
	deepEqual( Stem("troublous"), "troublou" );
	deepEqual( Stem("trough"), "trough" );
	deepEqual( Stem("trounce"), "trounc" );
	deepEqual( Stem("trousers"), "trouser" );
	deepEqual( Stem("trousseau"), "trousseau" );
	deepEqual( Stem("trout"), "trout" );
	deepEqual( Stem("trouts"), "trout" );
	deepEqual( Stem("trouvaille"), "trouvail" );
	deepEqual( Stem("trovato"), "trovato" );
	deepEqual( Stem("trow"), "trow" );
	deepEqual( Stem("trowel"), "trowel" );
	deepEqual( Stem("trowest"), "trowest" );
	deepEqual( Stem("trowsers"), "trowser" );
	deepEqual( Stem("troy"), "troi" );
	deepEqual( Stem("troyan"), "troyan" );
	deepEqual( Stem("troyans"), "troyan" );
	deepEqual( Stem("truant"), "truant" );
	deepEqual( Stem("truce"), "truce" );
	deepEqual( Stem("truckle"), "truckl" );
	deepEqual( Stem("trudge"), "trudg" );
	deepEqual( Stem("trudged"), "trudg" );
	deepEqual( Stem("true"), "true" );
	deepEqual( Stem("trueborn"), "trueborn" );
	deepEqual( Stem("truepenny"), "truepenni" );
	deepEqual( Stem("truer"), "truer" );
	deepEqual( Stem("truest"), "truest" );
	deepEqual( Stem("truffigny"), "truffigni" );
	deepEqual( Stem("truie"), "truie" );
	deepEqual( Stem("trull"), "trull" );
	deepEqual( Stem("trulls"), "trull" );
	deepEqual( Stem("truly"), "truli" );
	deepEqual( Stem("trump"), "trump" );
	deepEqual( Stem("trumper"), "trumper" );
	deepEqual( Stem("trumperies"), "trumperi" );
	deepEqual( Stem("trumpery"), "trumperi" );
	deepEqual( Stem("trumpet"), "trumpet" );
	deepEqual( Stem("trumpeter"), "trumpet" );
	deepEqual( Stem("trumpeters"), "trumpet" );
	deepEqual( Stem("trumpets"), "trumpet" );
	deepEqual( Stem("trumps"), "trump" );
	deepEqual( Stem("truncheon"), "truncheon" );
	deepEqual( Stem("truncheoners"), "truncheon" );
	deepEqual( Stem("trundle"), "trundl" );
	deepEqual( Stem("trunk"), "trunk" );
	deepEqual( Stem("trunks"), "trunk" );
	deepEqual( Stem("trust"), "trust" );
	deepEqual( Stem("trusted"), "trust" );
	deepEqual( Stem("trustee"), "truste" );
	deepEqual( Stem("trustees"), "truste" );
	deepEqual( Stem("truster"), "truster" );
	deepEqual( Stem("trusters"), "truster" );
	deepEqual( Stem("trustful"), "trust" );
	deepEqual( Stem("trusting"), "trust" );
	deepEqual( Stem("trusts"), "trust" );
	deepEqual( Stem("trusty"), "trusti" );
	deepEqual( Stem("truth"), "truth" );
	deepEqual( Stem("truths"), "truth" );
	deepEqual( Stem("try"), "try" );
	deepEqual( Stem("trying"), "try" );
	deepEqual( Stem("ts"), "t" );
	deepEqual( Stem("tu"), "tu" );
	deepEqual( Stem("tuae"), "tuae" );
	deepEqual( Stem("tub"), "tub" );
	deepEqual( Stem("tubal"), "tubal" );
	deepEqual( Stem("tubs"), "tub" );
	deepEqual( Stem("tuck"), "tuck" );
	deepEqual( Stem("tucked"), "tuck" );
	deepEqual( Stem("tucker"), "tucker" );
	deepEqual( Stem("tucket"), "tucket" );
	deepEqual( Stem("tuesday"), "tuesdai" );
	deepEqual( Stem("tuffin"), "tuffin" );
	deepEqual( Stem("tuft"), "tuft" );
	deepEqual( Stem("tufto"), "tufto" );
	deepEqual( Stem("tufts"), "tuft" );
	deepEqual( Stem("tug"), "tug" );
	deepEqual( Stem("tugg"), "tugg" );
	deepEqual( Stem("tugging"), "tug" );
	deepEqual( Stem("tuileries"), "tuileri" );
	deepEqual( Stem("tuition"), "tuition" );
	deepEqual( Stem("tullus"), "tullu" );
	deepEqual( Stem("tully"), "tulli" );
	deepEqual( Stem("tumble"), "tumbl" );
	deepEqual( Stem("tumbled"), "tumbl" );
	deepEqual( Stem("tumbler"), "tumbler" );
	deepEqual( Stem("tumblers"), "tumbler" );
	deepEqual( Stem("tumbles"), "tumbl" );
	deepEqual( Stem("tumbling"), "tumbl" );
	deepEqual( Stem("tumult"), "tumult" );
	deepEqual( Stem("tumultuous"), "tumultu" );
	deepEqual( Stem("tumultuously"), "tumultu" );
	deepEqual( Stem("tun"), "tun" );
	deepEqual( Stem("tune"), "tune" );
	deepEqual( Stem("tuneable"), "tuneabl" );
	deepEqual( Stem("tuned"), "tune" );
	deepEqual( Stem("tuneless"), "tuneless" );
	deepEqual( Stem("tuners"), "tuner" );
	deepEqual( Stem("tunes"), "tune" );
	deepEqual( Stem("tunic"), "tunic" );
	deepEqual( Stem("tunis"), "tuni" );
	deepEqual( Stem("tuns"), "tun" );
	deepEqual( Stem("tupping"), "tup" );
	deepEqual( Stem("turban"), "turban" );
	deepEqual( Stem("turbans"), "turban" );
	deepEqual( Stem("turbid"), "turbid" );
	deepEqual( Stem("turbot"), "turbot" );
	deepEqual( Stem("turbulence"), "turbul" );
	deepEqual( Stem("turbulent"), "turbul" );
	deepEqual( Stem("turd"), "turd" );
	deepEqual( Stem("tureen"), "tureen" );
	deepEqual( Stem("turf"), "turf" );
	deepEqual( Stem("turfy"), "turfi" );
	deepEqual( Stem("turk"), "turk" );
	deepEqual( Stem("turkey"), "turkei" );
	deepEqual( Stem("turkeys"), "turkei" );
	deepEqual( Stem("turkish"), "turkish" );
	deepEqual( Stem("turks"), "turk" );
	deepEqual( Stem("turlygod"), "turlygod" );
	deepEqual( Stem("turmoil"), "turmoil" );
	deepEqual( Stem("turmoiled"), "turmoil" );
	deepEqual( Stem("turn"), "turn" );
	deepEqual( Stem("turnbull"), "turnbul" );
	deepEqual( Stem("turncoat"), "turncoat" );
	deepEqual( Stem("turncoats"), "turncoat" );
	deepEqual( Stem("turned"), "turn" );
	deepEqual( Stem("turner"), "turner" );
	deepEqual( Stem("turneth"), "turneth" );
	deepEqual( Stem("turnhamgreen"), "turnhamgreen" );
	deepEqual( Stem("turning"), "turn" );
	deepEqual( Stem("turnip"), "turnip" );
	deepEqual( Stem("turnips"), "turnip" );
	deepEqual( Stem("turnpike"), "turnpik" );
	deepEqual( Stem("turns"), "turn" );
	deepEqual( Stem("turph"), "turph" );
	deepEqual( Stem("turpitude"), "turpitud" );
	deepEqual( Stem("turquoise"), "turquois" );
	deepEqual( Stem("turquoises"), "turquois" );
	deepEqual( Stem("turret"), "turret" );
	deepEqual( Stem("turrets"), "turret" );
	deepEqual( Stem("turtle"), "turtl" );
	deepEqual( Stem("turtles"), "turtl" );
	deepEqual( Stem("turvy"), "turvi" );
	deepEqual( Stem("tuscan"), "tuscan" );
	deepEqual( Stem("tush"), "tush" );
	deepEqual( Stem("tussle"), "tussl" );
	deepEqual( Stem("tut"), "tut" );
	deepEqual( Stem("tutbury"), "tutburi" );
	deepEqual( Stem("tutor"), "tutor" );
	deepEqual( Stem("tutored"), "tutor" );
	deepEqual( Stem("tutoress"), "tutoress" );
	deepEqual( Stem("tutors"), "tutor" );
	deepEqual( Stem("tutto"), "tutto" );
	deepEqual( Stem("tvice"), "tvice" );
	deepEqual( Stem("twaddling"), "twaddl" );
	deepEqual( Stem("twain"), "twain" );
	deepEqual( Stem("twang"), "twang" );
	deepEqual( Stem("twanging"), "twang" );
	deepEqual( Stem("twangling"), "twangl" );
	deepEqual( Stem("twas"), "twa" );
	deepEqual( Stem("tway"), "twai" );
	deepEqual( Stem("tweaks"), "tweak" );
	deepEqual( Stem("tween"), "tween" );
	deepEqual( Stem("twelfth"), "twelfth" );
	deepEqual( Stem("twelve"), "twelv" );
	deepEqual( Stem("twelvemonth"), "twelvemonth" );
	deepEqual( Stem("twenties"), "twenti" );
	deepEqual( Stem("twentieth"), "twentieth" );
	deepEqual( Stem("twenty"), "twenti" );
	deepEqual( Stem("twere"), "twere" );
	deepEqual( Stem("twice"), "twice" );
	deepEqual( Stem("twiddle"), "twiddl" );
	deepEqual( Stem("twiddler"), "twiddler" );
	deepEqual( Stem("twiddling"), "twiddl" );
	deepEqual( Stem("twig"), "twig" );
	deepEqual( Stem("twiggen"), "twiggen" );
	deepEqual( Stem("twigs"), "twig" );
	deepEqual( Stem("twilight"), "twilight" );
	deepEqual( Stem("twill"), "twill" );
	deepEqual( Stem("twilled"), "twill" );
	deepEqual( Stem("twin"), "twin" );
	deepEqual( Stem("twine"), "twine" );
	deepEqual( Stem("twined"), "twine" );
	deepEqual( Stem("twinge"), "twing" );
	deepEqual( Stem("twink"), "twink" );
	deepEqual( Stem("twinkle"), "twinkl" );
	deepEqual( Stem("twinkled"), "twinkl" );
	deepEqual( Stem("twinkling"), "twinkl" );
	deepEqual( Stem("twinn"), "twinn" );
	deepEqual( Stem("twins"), "twin" );
	deepEqual( Stem("twire"), "twire" );
	deepEqual( Stem("twirl"), "twirl" );
	deepEqual( Stem("twirled"), "twirl" );
	deepEqual( Stem("twirling"), "twirl" );
	deepEqual( Stem("twist"), "twist" );
	deepEqual( Stem("twisted"), "twist" );
	deepEqual( Stem("twists"), "twist" );
	deepEqual( Stem("twit"), "twit" );
	deepEqual( Stem("twitch"), "twitch" );
	deepEqual( Stem("twitched"), "twitch" );
	deepEqual( Stem("twitching"), "twitch" );
	deepEqual( Stem("twitchings"), "twitch" );
	deepEqual( Stem("twits"), "twit" );
	deepEqual( Stem("twitting"), "twit" );
	deepEqual( Stem("twixt"), "twixt" );
	deepEqual( Stem("two"), "two" );
	deepEqual( Stem("twofold"), "twofold" );
	deepEqual( Stem("twopence"), "twopenc" );
	deepEqual( Stem("twopences"), "twopenc" );
	deepEqual( Stem("twopenny"), "twopenni" );
	deepEqual( Stem("twos"), "two" );
	deepEqual( Stem("twould"), "twould" );
	deepEqual( Stem("tyb"), "tyb" );
	deepEqual( Stem("tybalt"), "tybalt" );
	deepEqual( Stem("tybalts"), "tybalt" );
	deepEqual( Stem("tyburn"), "tyburn" );
	deepEqual( Stem("tyburnia"), "tyburnia" );
	deepEqual( Stem("tyburnians"), "tyburnian" );
	deepEqual( Stem("tye"), "tye" );
	deepEqual( Stem("tying"), "ty" );
	deepEqual( Stem("tyke"), "tyke" );
	deepEqual( Stem("tymbria"), "tymbria" );
	deepEqual( Stem("type"), "type" );
	deepEqual( Stem("types"), "type" );
	deepEqual( Stem("typhon"), "typhon" );
	deepEqual( Stem("tyrannical"), "tyrann" );
	deepEqual( Stem("tyrannically"), "tyrann" );
	deepEqual( Stem("tyrannising"), "tyrannis" );
	deepEqual( Stem("tyrannize"), "tyrann" );
	deepEqual( Stem("tyrannized"), "tyrann" );
	deepEqual( Stem("tyrannizing"), "tyrann" );
	deepEqual( Stem("tyrannous"), "tyrann" );
	deepEqual( Stem("tyranny"), "tyranni" );
	deepEqual( Stem("tyrant"), "tyrant" );
	deepEqual( Stem("tyrants"), "tyrant" );
	deepEqual( Stem("tyrian"), "tyrian" );
	deepEqual( Stem("tyrolese"), "tyroles" );
	deepEqual( Stem("tyrrel"), "tyrrel" );
	deepEqual( Stem("u"), "u" );
	deepEqual( Stem("ubique"), "ubiqu" );
	deepEqual( Stem("udders"), "udder" );
	deepEqual( Stem("udge"), "udg" );
	deepEqual( Stem("udolpho"), "udolpho" );
	deepEqual( Stem("uds"), "ud" );
	deepEqual( Stem("uglier"), "uglier" );
	deepEqual( Stem("ugliest"), "ugliest" );
	deepEqual( Stem("ugly"), "ugli" );
	deepEqual( Stem("ulcer"), "ulcer" );
	deepEqual( Stem("ulcerous"), "ulcer" );
	deepEqual( Stem("ultimate"), "ultim" );
	deepEqual( Stem("ultimately"), "ultim" );
	deepEqual( Stem("ultra"), "ultra" );
	deepEqual( Stem("ulysses"), "ulyss" );
	deepEqual( Stem("um"), "um" );
	deepEqual( Stem("umber"), "umber" );
	deepEqual( Stem("umbra"), "umbra" );
	deepEqual( Stem("umbrage"), "umbrag" );
	deepEqual( Stem("umbrella"), "umbrella" );
	deepEqual( Stem("umfrevile"), "umfrevil" );
	deepEqual( Stem("ummerapoora"), "ummerapoora" );
	deepEqual( Stem("umpire"), "umpir" );
	deepEqual( Stem("umpires"), "umpir" );
	deepEqual( Stem("un"), "un" );
	deepEqual( Stem("unable"), "unabl" );
	deepEqual( Stem("unaccommodated"), "unaccommod" );
	deepEqual( Stem("unaccompanied"), "unaccompani" );
	deepEqual( Stem("unaccountable"), "unaccount" );
	deepEqual( Stem("unaccustom"), "unaccustom" );
	deepEqual( Stem("unaching"), "unach" );
	deepEqual( Stem("unacquainted"), "unacquaint" );
	deepEqual( Stem("unactive"), "unact" );
	deepEqual( Stem("unadulterated"), "unadulter" );
	deepEqual( Stem("unadvis"), "unadvi" );
	deepEqual( Stem("unadvisable"), "unadvis" );
	deepEqual( Stem("unadvised"), "unadvis" );
	deepEqual( Stem("unadvisedly"), "unadvisedli" );
	deepEqual( Stem("unaffected"), "unaffect" );
	deepEqual( Stem("unaffectedly"), "unaffectedli" );
	deepEqual( Stem("unagreeable"), "unagre" );
	deepEqual( Stem("unanel"), "unanel" );
	deepEqual( Stem("unanimous"), "unanim" );
	deepEqual( Stem("unanimously"), "unanim" );
	deepEqual( Stem("unanswer"), "unansw" );
	deepEqual( Stem("unappeas"), "unappea" );
	deepEqual( Stem("unapproachable"), "unapproach" );
	deepEqual( Stem("unapproved"), "unapprov" );
	deepEqual( Stem("unapt"), "unapt" );
	deepEqual( Stem("unaptness"), "unapt" );
	deepEqual( Stem("unarm"), "unarm" );
	deepEqual( Stem("unarmed"), "unarm" );
	deepEqual( Stem("unarms"), "unarm" );
	deepEqual( Stem("unassail"), "unassail" );
	deepEqual( Stem("unassailable"), "unassail" );
	deepEqual( Stem("unassuming"), "unassum" );
	deepEqual( Stem("unattached"), "unattach" );
	deepEqual( Stem("unattainable"), "unattain" );
	deepEqual( Stem("unattainted"), "unattaint" );
	deepEqual( Stem("unattempted"), "unattempt" );
	deepEqual( Stem("unattended"), "unattend" );
	deepEqual( Stem("unauspicious"), "unauspici" );
	deepEqual( Stem("unauthorized"), "unauthor" );
	deepEqual( Stem("unavailing"), "unavail" );
	deepEqual( Stem("unavoided"), "unavoid" );
	deepEqual( Stem("unaware"), "unawar" );
	deepEqual( Stem("unawares"), "unawar" );
	deepEqual( Stem("unback"), "unback" );
	deepEqual( Stem("unbak"), "unbak" );
	deepEqual( Stem("unbanded"), "unband" );
	deepEqual( Stem("unbar"), "unbar" );
	deepEqual( Stem("unbarb"), "unbarb" );
	deepEqual( Stem("unbarred"), "unbar" );
	deepEqual( Stem("unbashful"), "unbash" );
	deepEqual( Stem("unbated"), "unbat" );
	deepEqual( Stem("unbatter"), "unbatt" );
	deepEqual( Stem("unbearable"), "unbear" );
	deepEqual( Stem("unbecoming"), "unbecom" );
	deepEqual( Stem("unbefitting"), "unbefit" );
	deepEqual( Stem("unbegot"), "unbegot" );
	deepEqual( Stem("unbegotten"), "unbegotten" );
	deepEqual( Stem("unbelieved"), "unbeliev" );
	deepEqual( Stem("unbend"), "unbend" );
	deepEqual( Stem("unbent"), "unbent" );
	deepEqual( Stem("unbewail"), "unbewail" );
	deepEqual( Stem("unbid"), "unbid" );
	deepEqual( Stem("unbidden"), "unbidden" );
	deepEqual( Stem("unbind"), "unbind" );
	deepEqual( Stem("unbinds"), "unbind" );
	deepEqual( Stem("unbitted"), "unbit" );
	deepEqual( Stem("unbless"), "unbless" );
	deepEqual( Stem("unblest"), "unblest" );
	deepEqual( Stem("unbloodied"), "unbloodi" );
	deepEqual( Stem("unblown"), "unblown" );
	deepEqual( Stem("unbodied"), "unbodi" );
	deepEqual( Stem("unbolt"), "unbolt" );
	deepEqual( Stem("unbolted"), "unbolt" );
	deepEqual( Stem("unbonneted"), "unbonnet" );
	deepEqual( Stem("unbookish"), "unbookish" );
	deepEqual( Stem("unborn"), "unborn" );
	deepEqual( Stem("unbosom"), "unbosom" );
	deepEqual( Stem("unbound"), "unbound" );
	deepEqual( Stem("unbounded"), "unbound" );
	deepEqual( Stem("unbow"), "unbow" );
	deepEqual( Stem("unbowed"), "unbow" );
	deepEqual( Stem("unbrac"), "unbrac" );
	deepEqual( Stem("unbraced"), "unbrac" );
	deepEqual( Stem("unbraided"), "unbraid" );
	deepEqual( Stem("unbreathed"), "unbreath" );
	deepEqual( Stem("unbred"), "unbr" );
	deepEqual( Stem("unbreech"), "unbreech" );
	deepEqual( Stem("unbridled"), "unbridl" );
	deepEqual( Stem("unbroke"), "unbrok" );
	deepEqual( Stem("unbruis"), "unbrui" );
	deepEqual( Stem("unbruised"), "unbruis" );
	deepEqual( Stem("unbuckle"), "unbuckl" );
	deepEqual( Stem("unbuckles"), "unbuckl" );
	deepEqual( Stem("unbuckling"), "unbuckl" );
	deepEqual( Stem("unbuild"), "unbuild" );
	deepEqual( Stem("unburden"), "unburden" );
	deepEqual( Stem("unburdens"), "unburden" );
	deepEqual( Stem("unburied"), "unburi" );
	deepEqual( Stem("unburnt"), "unburnt" );
	deepEqual( Stem("unburthen"), "unburthen" );
	deepEqual( Stem("unbutton"), "unbutton" );
	deepEqual( Stem("unbuttoning"), "unbutton" );
	deepEqual( Stem("uncalled"), "uncal" );
	deepEqual( Stem("uncapable"), "uncap" );
	deepEqual( Stem("uncape"), "uncap" );
	deepEqual( Stem("uncase"), "uncas" );
	deepEqual( Stem("uncasing"), "uncas" );
	deepEqual( Stem("uncaught"), "uncaught" );
	deepEqual( Stem("unceasingly"), "unceasingli" );
	deepEqual( Stem("unceremonious"), "unceremoni" );
	deepEqual( Stem("uncertain"), "uncertain" );
	deepEqual( Stem("uncertainty"), "uncertainti" );
	deepEqual( Stem("unchain"), "unchain" );
	deepEqual( Stem("unchanging"), "unchang" );
	deepEqual( Stem("uncharge"), "uncharg" );
	deepEqual( Stem("uncharged"), "uncharg" );
	deepEqual( Stem("uncharitable"), "uncharit" );
	deepEqual( Stem("uncharitably"), "uncharit" );
	deepEqual( Stem("unchary"), "unchari" );
	deepEqual( Stem("unchaste"), "unchast" );
	deepEqual( Stem("uncheck"), "uncheck" );
	deepEqual( Stem("unchilded"), "unchild" );
	deepEqual( Stem("uncivil"), "uncivil" );
	deepEqual( Stem("unclaim"), "unclaim" );
	deepEqual( Stem("unclasp"), "unclasp" );
	deepEqual( Stem("uncle"), "uncl" );
	deepEqual( Stem("unclean"), "unclean" );
	deepEqual( Stem("uncleanliness"), "uncleanli" );
	deepEqual( Stem("uncleanly"), "uncleanli" );
	deepEqual( Stem("uncleanness"), "unclean" );
	deepEqual( Stem("unclerical"), "uncler" );
	deepEqual( Stem("uncles"), "uncl" );
	deepEqual( Stem("unclew"), "unclew" );
	deepEqual( Stem("unclog"), "unclog" );
	deepEqual( Stem("uncoined"), "uncoin" );
	deepEqual( Stem("uncolted"), "uncolt" );
	deepEqual( Stem("uncomeliness"), "uncomeli" );
	deepEqual( Stem("uncomfortable"), "uncomfort" );
	deepEqual( Stem("uncommon"), "uncommon" );
	deepEqual( Stem("uncommonly"), "uncommonli" );
	deepEqual( Stem("uncompassionate"), "uncompassion" );
	deepEqual( Stem("uncomplaining"), "uncomplain" );
	deepEqual( Stem("uncomplainingly"), "uncomplainingli" );
	deepEqual( Stem("uncomprehensive"), "uncomprehens" );
	deepEqual( Stem("unconcerned"), "unconcern" );
	deepEqual( Stem("unconditional"), "uncondit" );
	deepEqual( Stem("unconfinable"), "unconfin" );
	deepEqual( Stem("unconfirm"), "unconfirm" );
	deepEqual( Stem("unconfirmed"), "unconfirm" );
	deepEqual( Stem("unconquer"), "unconqu" );
	deepEqual( Stem("unconquered"), "unconqu" );
	deepEqual( Stem("unconscious"), "unconsci" );
	deepEqual( Stem("unconsciously"), "unconsci" );
	deepEqual( Stem("unconsecrated"), "unconsecr" );
	deepEqual( Stem("unconsidered"), "unconsid" );
	deepEqual( Stem("unconstant"), "unconst" );
	deepEqual( Stem("unconstrain"), "unconstrain" );
	deepEqual( Stem("unconstrained"), "unconstrain" );
	deepEqual( Stem("unconstrainedly"), "unconstrainedli" );
	deepEqual( Stem("uncontemn"), "uncontemn" );
	deepEqual( Stem("uncontroll"), "uncontrol" );
	deepEqual( Stem("uncontrollable"), "uncontrol" );
	deepEqual( Stem("uncorked"), "uncork" );
	deepEqual( Stem("uncorrected"), "uncorrect" );
	deepEqual( Stem("uncountable"), "uncount" );
	deepEqual( Stem("uncounted"), "uncount" );
	deepEqual( Stem("uncouple"), "uncoupl" );
	deepEqual( Stem("uncourteous"), "uncourt" );
	deepEqual( Stem("uncouth"), "uncouth" );
	deepEqual( Stem("uncover"), "uncov" );
	deepEqual( Stem("uncovered"), "uncov" );
	deepEqual( Stem("uncropped"), "uncrop" );
	deepEqual( Stem("uncross"), "uncross" );
	deepEqual( Stem("uncrown"), "uncrown" );
	deepEqual( Stem("unction"), "unction" );
	deepEqual( Stem("unctuous"), "unctuou" );
	deepEqual( Stem("uncuckolded"), "uncuckold" );
	deepEqual( Stem("uncurable"), "uncur" );
	deepEqual( Stem("uncurbable"), "uncurb" );
	deepEqual( Stem("uncurbed"), "uncurb" );
	deepEqual( Stem("uncurled"), "uncurl" );
	deepEqual( Stem("uncurls"), "uncurl" );
	deepEqual( Stem("uncurrent"), "uncurr" );
	deepEqual( Stem("uncurse"), "uncurs" );
	deepEqual( Stem("und"), "und" );
	deepEqual( Stem("undaunted"), "undaunt" );
	deepEqual( Stem("undeaf"), "undeaf" );
	deepEqual( Stem("undeceiving"), "undeceiv" );
	deepEqual( Stem("undecided"), "undecid" );
	deepEqual( Stem("undeck"), "undeck" );
	deepEqual( Stem("undeeded"), "undeed" );
	deepEqual( Stem("under"), "under" );
	deepEqual( Stem("underbearing"), "underbear" );
	deepEqual( Stem("underborne"), "underborn" );
	deepEqual( Stem("undercrest"), "undercrest" );
	deepEqual( Stem("underfeeding"), "underfeed" );
	deepEqual( Stem("underfoot"), "underfoot" );
	deepEqual( Stem("undergo"), "undergo" );
	deepEqual( Stem("undergoes"), "undergo" );
	deepEqual( Stem("undergoing"), "undergo" );
	deepEqual( Stem("undergone"), "undergon" );
	deepEqual( Stem("underground"), "underground" );
	deepEqual( Stem("underhand"), "underhand" );
	deepEqual( Stem("underhung"), "underhung" );
	deepEqual( Stem("underlined"), "underlin" );
	deepEqual( Stem("underling"), "underl" );
	deepEqual( Stem("underlings"), "underl" );
	deepEqual( Stem("underlip"), "underlip" );
	deepEqual( Stem("undermine"), "undermin" );
	deepEqual( Stem("underminers"), "undermin" );
	deepEqual( Stem("underneath"), "underneath" );
	deepEqual( Stem("underprizing"), "underpr" );
	deepEqual( Stem("underprop"), "underprop" );
	deepEqual( Stem("understand"), "understand" );
	deepEqual( Stem("understandeth"), "understandeth" );
	deepEqual( Stem("understanding"), "understand" );
	deepEqual( Stem("understandings"), "understand" );
	deepEqual( Stem("understands"), "understand" );
	deepEqual( Stem("understood"), "understood" );
	deepEqual( Stem("underta"), "underta" );
	deepEqual( Stem("undertake"), "undertak" );
	deepEqual( Stem("undertakeing"), "undertak" );
	deepEqual( Stem("undertaken"), "undertaken" );
	deepEqual( Stem("undertaker"), "undertak" );
	deepEqual( Stem("undertakes"), "undertak" );
	deepEqual( Stem("undertaking"), "undertak" );
	deepEqual( Stem("undertakings"), "undertak" );
	deepEqual( Stem("undertook"), "undertook" );
	deepEqual( Stem("undervalu"), "undervalu" );
	deepEqual( Stem("undervalued"), "undervalu" );
	deepEqual( Stem("underwent"), "underw" );
	deepEqual( Stem("underwrit"), "underwrit" );
	deepEqual( Stem("underwrite"), "underwrit" );
	deepEqual( Stem("undescried"), "undescri" );
	deepEqual( Stem("undeserved"), "undeserv" );
	deepEqual( Stem("undeserver"), "undeserv" );
	deepEqual( Stem("undeservers"), "undeserv" );
	deepEqual( Stem("undeserving"), "undeserv" );
	deepEqual( Stem("undetermin"), "undetermin" );
	deepEqual( Stem("undeviating"), "undevi" );
	deepEqual( Stem("undexterously"), "undexter" );
	deepEqual( Stem("undid"), "undid" );
	deepEqual( Stem("undiminished"), "undiminish" );
	deepEqual( Stem("undinted"), "undint" );
	deepEqual( Stem("undiscernible"), "undiscern" );
	deepEqual( Stem("undiscover"), "undiscov" );
	deepEqual( Stem("undisguised"), "undisguis" );
	deepEqual( Stem("undishonoured"), "undishonour" );
	deepEqual( Stem("undismayed"), "undismai" );
	deepEqual( Stem("undispos"), "undispo" );
	deepEqual( Stem("undisputed"), "undisput" );
	deepEqual( Stem("undistinguishable"), "undistinguish" );
	deepEqual( Stem("undistinguished"), "undistinguish" );
	deepEqual( Stem("undisturbed"), "undisturb" );
	deepEqual( Stem("undividable"), "undivid" );
	deepEqual( Stem("undivided"), "undivid" );
	deepEqual( Stem("undivulged"), "undivulg" );
	deepEqual( Stem("undo"), "undo" );
	deepEqual( Stem("undoes"), "undo" );
	deepEqual( Stem("undoing"), "undo" );
	deepEqual( Stem("undone"), "undon" );
	deepEqual( Stem("undoubted"), "undoubt" );
	deepEqual( Stem("undoubtedly"), "undoubtedli" );
	deepEqual( Stem("undream"), "undream" );
	deepEqual( Stem("undred"), "undr" );
	deepEqual( Stem("undress"), "undress" );
	deepEqual( Stem("undressed"), "undress" );
	deepEqual( Stem("undrown"), "undrown" );
	deepEqual( Stem("undue"), "undu" );
	deepEqual( Stem("undulating"), "undul" );
	deepEqual( Stem("unduteous"), "undut" );
	deepEqual( Stem("undutiful"), "unduti" );
	deepEqual( Stem("undutifully"), "undutifulli" );
	deepEqual( Stem("undutifulness"), "unduti" );
	deepEqual( Stem("une"), "un" );
	deepEqual( Stem("uneared"), "unear" );
	deepEqual( Stem("unearned"), "unearn" );
	deepEqual( Stem("unearthly"), "unearthli" );
	deepEqual( Stem("uneasily"), "uneasili" );
	deepEqual( Stem("uneasines"), "uneasin" );
	deepEqual( Stem("uneasiness"), "uneasi" );
	deepEqual( Stem("uneasy"), "uneasi" );
	deepEqual( Stem("uneath"), "uneath" );
	deepEqual( Stem("uneducated"), "uneduc" );
	deepEqual( Stem("uneffectual"), "uneffectu" );
	deepEqual( Stem("unelected"), "unelect" );
	deepEqual( Stem("unencumbered"), "unencumb" );
	deepEqual( Stem("unendurable"), "unendur" );
	deepEqual( Stem("unequal"), "unequ" );
	deepEqual( Stem("uneven"), "uneven" );
	deepEqual( Stem("unexamin"), "unexamin" );
	deepEqual( Stem("unexecuted"), "unexecut" );
	deepEqual( Stem("unexpected"), "unexpect" );
	deepEqual( Stem("unexpectedly"), "unexpectedli" );
	deepEqual( Stem("unexperienc"), "unexperienc" );
	deepEqual( Stem("unexperient"), "unexperi" );
	deepEqual( Stem("unexpressive"), "unexpress" );
	deepEqual( Stem("unfair"), "unfair" );
	deepEqual( Stem("unfaithful"), "unfaith" );
	deepEqual( Stem("unfaithfulness"), "unfaith" );
	deepEqual( Stem("unfallible"), "unfal" );
	deepEqual( Stem("unfam"), "unfam" );
	deepEqual( Stem("unfashionable"), "unfashion" );
	deepEqual( Stem("unfasten"), "unfasten" );
	deepEqual( Stem("unfather"), "unfath" );
	deepEqual( Stem("unfathered"), "unfath" );
	deepEqual( Stem("unfathomable"), "unfathom" );
	deepEqual( Stem("unfavourable"), "unfavour" );
	deepEqual( Stem("unfed"), "unf" );
	deepEqual( Stem("unfeed"), "unfe" );
	deepEqual( Stem("unfeeling"), "unfeel" );
	deepEqual( Stem("unfeigned"), "unfeign" );
	deepEqual( Stem("unfeignedly"), "unfeignedli" );
	deepEqual( Stem("unfellowed"), "unfellow" );
	deepEqual( Stem("unfelt"), "unfelt" );
	deepEqual( Stem("unfenced"), "unfenc" );
	deepEqual( Stem("unfilial"), "unfili" );
	deepEqual( Stem("unfill"), "unfil" );
	deepEqual( Stem("unfinish"), "unfinish" );
	deepEqual( Stem("unfirm"), "unfirm" );
	deepEqual( Stem("unfit"), "unfit" );
	deepEqual( Stem("unfitness"), "unfit" );
	deepEqual( Stem("unfix"), "unfix" );
	deepEqual( Stem("unfledg"), "unfledg" );
	deepEqual( Stem("unfold"), "unfold" );
	deepEqual( Stem("unfolded"), "unfold" );
	deepEqual( Stem("unfoldeth"), "unfoldeth" );
	deepEqual( Stem("unfolding"), "unfold" );
	deepEqual( Stem("unfolds"), "unfold" );
	deepEqual( Stem("unfool"), "unfool" );
	deepEqual( Stem("unforc"), "unforc" );
	deepEqual( Stem("unforced"), "unforc" );
	deepEqual( Stem("unforfeited"), "unforfeit" );
	deepEqual( Stem("unforgiven"), "unforgiven" );
	deepEqual( Stem("unfortified"), "unfortifi" );
	deepEqual( Stem("unfortunate"), "unfortun" );
	deepEqual( Stem("unfortunates"), "unfortun" );
	deepEqual( Stem("unfought"), "unfought" );
	deepEqual( Stem("unfounded"), "unfound" );
	deepEqual( Stem("unfrequented"), "unfrequ" );
	deepEqual( Stem("unfrequently"), "unfrequ" );
	deepEqual( Stem("unfriended"), "unfriend" );
	deepEqual( Stem("unfriendly"), "unfriendli" );
	deepEqual( Stem("unfurnish"), "unfurnish" );
	deepEqual( Stem("unfurnished"), "unfurnish" );
	deepEqual( Stem("ungain"), "ungain" );
	deepEqual( Stem("ungainly"), "ungainli" );
	deepEqual( Stem("ungalled"), "ungal" );
	deepEqual( Stem("ungart"), "ungart" );
	deepEqual( Stem("ungarter"), "ungart" );
	deepEqual( Stem("ungenitur"), "ungenitur" );
	deepEqual( Stem("ungenteel"), "ungenteel" );
	deepEqual( Stem("ungentle"), "ungentl" );
	deepEqual( Stem("ungentlemanlike"), "ungentlemanlik" );
	deepEqual( Stem("ungentleness"), "ungentl" );
	deepEqual( Stem("ungently"), "ungent" );
	deepEqual( Stem("ungird"), "ungird" );
	deepEqual( Stem("ungodly"), "ungodli" );
	deepEqual( Stem("ungor"), "ungor" );
	deepEqual( Stem("ungot"), "ungot" );
	deepEqual( Stem("ungotten"), "ungotten" );
	deepEqual( Stem("ungovern"), "ungovern" );
	deepEqual( Stem("ungracious"), "ungraci" );
	deepEqual( Stem("ungrammatical"), "ungrammat" );
	deepEqual( Stem("ungrateful"), "ungrat" );
	deepEqual( Stem("ungratefully"), "ungratefulli" );
	deepEqual( Stem("ungravely"), "ungrav" );
	deepEqual( Stem("ungrown"), "ungrown" );
	deepEqual( Stem("unguarded"), "unguard" );
	deepEqual( Stem("unguem"), "unguem" );
	deepEqual( Stem("unguided"), "unguid" );
	deepEqual( Stem("unhack"), "unhack" );
	deepEqual( Stem("unhair"), "unhair" );
	deepEqual( Stem("unhallow"), "unhallow" );
	deepEqual( Stem("unhallowed"), "unhallow" );
	deepEqual( Stem("unhand"), "unhand" );
	deepEqual( Stem("unhandled"), "unhandl" );
	deepEqual( Stem("unhandsome"), "unhandsom" );
	deepEqual( Stem("unhang"), "unhang" );
	deepEqual( Stem("unhanged"), "unhang" );
	deepEqual( Stem("unhap"), "unhap" );
	deepEqual( Stem("unhappied"), "unhappi" );
	deepEqual( Stem("unhappily"), "unhappili" );
	deepEqual( Stem("unhappiness"), "unhappi" );
	deepEqual( Stem("unhappy"), "unhappi" );
	deepEqual( Stem("unhardened"), "unharden" );
	deepEqual( Stem("unharm"), "unharm" );
	deepEqual( Stem("unhatch"), "unhatch" );
	deepEqual( Stem("unheard"), "unheard" );
	deepEqual( Stem("unhearts"), "unheart" );
	deepEqual( Stem("unheedful"), "unheed" );
	deepEqual( Stem("unheedfully"), "unheedfulli" );
	deepEqual( Stem("unheedy"), "unheedi" );
	deepEqual( Stem("unhelpful"), "unhelp" );
	deepEqual( Stem("unhidden"), "unhidden" );
	deepEqual( Stem("unholy"), "unholi" );
	deepEqual( Stem("unhop"), "unhop" );
	deepEqual( Stem("unhopefullest"), "unhopefullest" );
	deepEqual( Stem("unhorse"), "unhors" );
	deepEqual( Stem("unhospitable"), "unhospit" );
	deepEqual( Stem("unhous"), "unhou" );
	deepEqual( Stem("unhoused"), "unhous" );
	deepEqual( Stem("unhurt"), "unhurt" );
	deepEqual( Stem("unhurtful"), "unhurt" );
	deepEqual( Stem("unicorn"), "unicorn" );
	deepEqual( Stem("unicorns"), "unicorn" );
	deepEqual( Stem("uniform"), "uniform" );
	deepEqual( Stem("uniforms"), "uniform" );
	deepEqual( Stem("unimproved"), "unimprov" );
	deepEqual( Stem("uninhabitable"), "uninhabit" );
	deepEqual( Stem("uninhabited"), "uninhabit" );
	deepEqual( Stem("uninitiated"), "uniniti" );
	deepEqual( Stem("uninquisitive"), "uninquisit" );
	deepEqual( Stem("unintelligent"), "unintellig" );
	deepEqual( Stem("unintelligible"), "unintellig" );
	deepEqual( Stem("uninteresting"), "uninterest" );
	deepEqual( Stem("uninterrupted"), "uninterrupt" );
	deepEqual( Stem("union"), "union" );
	deepEqual( Stem("unions"), "union" );
	deepEqual( Stem("unite"), "unit" );
	deepEqual( Stem("united"), "unit" );
	deepEqual( Stem("uniting"), "unit" );
	deepEqual( Stem("unity"), "uniti" );
	deepEqual( Stem("universal"), "univers" );
	deepEqual( Stem("universally"), "univers" );
	deepEqual( Stem("universe"), "univers" );
	deepEqual( Stem("universities"), "univers" );
	deepEqual( Stem("university"), "univers" );
	deepEqual( Stem("unjointed"), "unjoint" );
	deepEqual( Stem("unjust"), "unjust" );
	deepEqual( Stem("unjustice"), "unjustic" );
	deepEqual( Stem("unjustifiable"), "unjustifi" );
	deepEqual( Stem("unjustly"), "unjustli" );
	deepEqual( Stem("unkennel"), "unkennel" );
	deepEqual( Stem("unkept"), "unkept" );
	deepEqual( Stem("unkind"), "unkind" );
	deepEqual( Stem("unkindest"), "unkindest" );
	deepEqual( Stem("unkindly"), "unkindli" );
	deepEqual( Stem("unkindness"), "unkind" );
	deepEqual( Stem("unking"), "unk" );
	deepEqual( Stem("unkinglike"), "unkinglik" );
	deepEqual( Stem("unkiss"), "unkiss" );
	deepEqual( Stem("unknit"), "unknit" );
	deepEqual( Stem("unknowing"), "unknow" );
	deepEqual( Stem("unknown"), "unknown" );
	deepEqual( Stem("unlace"), "unlac" );
	deepEqual( Stem("unlaid"), "unlaid" );
	deepEqual( Stem("unlawful"), "unlaw" );
	deepEqual( Stem("unlawfully"), "unlawfulli" );
	deepEqual( Stem("unlearn"), "unlearn" );
	deepEqual( Stem("unlearned"), "unlearn" );
	deepEqual( Stem("unless"), "unless" );
	deepEqual( Stem("unlesson"), "unlesson" );
	deepEqual( Stem("unletter"), "unlett" );
	deepEqual( Stem("unlettered"), "unlett" );
	deepEqual( Stem("unlick"), "unlick" );
	deepEqual( Stem("unlike"), "unlik" );
	deepEqual( Stem("unlikely"), "unlik" );
	deepEqual( Stem("unlimited"), "unlimit" );
	deepEqual( Stem("unlineal"), "unlin" );
	deepEqual( Stem("unlink"), "unlink" );
	deepEqual( Stem("unload"), "unload" );
	deepEqual( Stem("unloaded"), "unload" );
	deepEqual( Stem("unloading"), "unload" );
	deepEqual( Stem("unloads"), "unload" );
	deepEqual( Stem("unlock"), "unlock" );
	deepEqual( Stem("unlocked"), "unlock" );
	deepEqual( Stem("unlocks"), "unlock" );
	deepEqual( Stem("unlook"), "unlook" );
	deepEqual( Stem("unlooked"), "unlook" );
	deepEqual( Stem("unloos"), "unloo" );
	deepEqual( Stem("unloose"), "unloos" );
	deepEqual( Stem("unloosed"), "unloos" );
	deepEqual( Stem("unlov"), "unlov" );
	deepEqual( Stem("unloving"), "unlov" );
	deepEqual( Stem("unluckily"), "unluckili" );
	deepEqual( Stem("unlucky"), "unlucki" );
	deepEqual( Stem("unmade"), "unmad" );
	deepEqual( Stem("unmake"), "unmak" );
	deepEqual( Stem("unmanly"), "unmanli" );
	deepEqual( Stem("unmann"), "unmann" );
	deepEqual( Stem("unmanned"), "unman" );
	deepEqual( Stem("unmanner"), "unmann" );
	deepEqual( Stem("unmannerd"), "unmannerd" );
	deepEqual( Stem("unmannerly"), "unmannerli" );
	deepEqual( Stem("unmarried"), "unmarri" );
	deepEqual( Stem("unmask"), "unmask" );
	deepEqual( Stem("unmasked"), "unmask" );
	deepEqual( Stem("unmasking"), "unmask" );
	deepEqual( Stem("unmasks"), "unmask" );
	deepEqual( Stem("unmast"), "unmast" );
	deepEqual( Stem("unmatch"), "unmatch" );
	deepEqual( Stem("unmatchable"), "unmatch" );
	deepEqual( Stem("unmatched"), "unmatch" );
	deepEqual( Stem("unmeasurable"), "unmeasur" );
	deepEqual( Stem("unmeet"), "unmeet" );
	deepEqual( Stem("unmellowed"), "unmellow" );
	deepEqual( Stem("unmerciful"), "unmerci" );
	deepEqual( Stem("unmercifully"), "unmercifulli" );
	deepEqual( Stem("unmeritable"), "unmerit" );
	deepEqual( Stem("unmeriting"), "unmerit" );
	deepEqual( Stem("unminded"), "unmind" );
	deepEqual( Stem("unmindfull"), "unmindful" );
	deepEqual( Stem("unmingled"), "unmingl" );
	deepEqual( Stem("unmistakably"), "unmistak" );
	deepEqual( Stem("unmitigable"), "unmitig" );
	deepEqual( Stem("unmitigated"), "unmitig" );
	deepEqual( Stem("unmix"), "unmix" );
	deepEqual( Stem("unmoan"), "unmoan" );
	deepEqual( Stem("unmolested"), "unmolest" );
	deepEqual( Stem("unmov"), "unmov" );
	deepEqual( Stem("unmoved"), "unmov" );
	deepEqual( Stem("unmoving"), "unmov" );
	deepEqual( Stem("unmuffles"), "unmuffl" );
	deepEqual( Stem("unmuffling"), "unmuffl" );
	deepEqual( Stem("unmusical"), "unmus" );
	deepEqual( Stem("unmuzzle"), "unmuzzl" );
	deepEqual( Stem("unmuzzled"), "unmuzzl" );
	deepEqual( Stem("unnatural"), "unnatur" );
	deepEqual( Stem("unnaturally"), "unnatur" );
	deepEqual( Stem("unnaturalness"), "unnatur" );
	deepEqual( Stem("unnecessarily"), "unnecessarili" );
	deepEqual( Stem("unnecessary"), "unnecessari" );
	deepEqual( Stem("unneighbourly"), "unneighbourli" );
	deepEqual( Stem("unnerved"), "unnerv" );
	deepEqual( Stem("unnoble"), "unnobl" );
	deepEqual( Stem("unnoted"), "unnot" );
	deepEqual( Stem("unnoticed"), "unnot" );
	deepEqual( Stem("unnumb"), "unnumb" );
	deepEqual( Stem("unnumber"), "unnumb" );
	deepEqual( Stem("unobserved"), "unobserv" );
	deepEqual( Stem("unoccupied"), "unoccupi" );
	deepEqual( Stem("unoffending"), "unoffend" );
	deepEqual( Stem("unopened"), "unopen" );
	deepEqual( Stem("unowed"), "unow" );
	deepEqual( Stem("unpack"), "unpack" );
	deepEqual( Stem("unpaid"), "unpaid" );
	deepEqual( Stem("unparagon"), "unparagon" );
	deepEqual( Stem("unparallel"), "unparallel" );
	deepEqual( Stem("unparalleled"), "unparallel" );
	deepEqual( Stem("unpartial"), "unparti" );
	deepEqual( Stem("unpath"), "unpath" );
	deepEqual( Stem("unpaved"), "unpav" );
	deepEqual( Stem("unpay"), "unpai" );
	deepEqual( Stem("unpeaceable"), "unpeac" );
	deepEqual( Stem("unpeg"), "unpeg" );
	deepEqual( Stem("unpeople"), "unpeopl" );
	deepEqual( Stem("unpeopled"), "unpeopl" );
	deepEqual( Stem("unperfect"), "unperfect" );
	deepEqual( Stem("unperfectness"), "unperfect" );
	deepEqual( Stem("unpick"), "unpick" );
	deepEqual( Stem("unpin"), "unpin" );
	deepEqual( Stem("unpink"), "unpink" );
	deepEqual( Stem("unpitied"), "unpiti" );
	deepEqual( Stem("unpitifully"), "unpitifulli" );
	deepEqual( Stem("unplagu"), "unplagu" );
	deepEqual( Stem("unplausive"), "unplaus" );
	deepEqual( Stem("unpleas"), "unplea" );
	deepEqual( Stem("unpleasant"), "unpleas" );
	deepEqual( Stem("unpleasing"), "unpleas" );
	deepEqual( Stem("unpolicied"), "unpolici" );
	deepEqual( Stem("unpolish"), "unpolish" );
	deepEqual( Stem("unpolished"), "unpolish" );
	deepEqual( Stem("unpolluted"), "unpollut" );
	deepEqual( Stem("unpossess"), "unpossess" );
	deepEqual( Stem("unpossessing"), "unpossess" );
	deepEqual( Stem("unpossible"), "unposs" );
	deepEqual( Stem("unpractis"), "unpracti" );
	deepEqual( Stem("unpregnant"), "unpregn" );
	deepEqual( Stem("unpremeditated"), "unpremedit" );
	deepEqual( Stem("unprepar"), "unprepar" );
	deepEqual( Stem("unprepared"), "unprepar" );
	deepEqual( Stem("unprepossessing"), "unprepossess" );
	deepEqual( Stem("unpress"), "unpress" );
	deepEqual( Stem("unpretending"), "unpretend" );
	deepEqual( Stem("unprevailing"), "unprevail" );
	deepEqual( Stem("unprevented"), "unprev" );
	deepEqual( Stem("unprincipled"), "unprincipl" );
	deepEqual( Stem("unpriz"), "unpriz" );
	deepEqual( Stem("unprizable"), "unpriz" );
	deepEqual( Stem("unprofitable"), "unprofit" );
	deepEqual( Stem("unprofited"), "unprofit" );
	deepEqual( Stem("unproper"), "unprop" );
	deepEqual( Stem("unproperly"), "unproperli" );
	deepEqual( Stem("unproportion"), "unproport" );
	deepEqual( Stem("unprosperous"), "unprosper" );
	deepEqual( Stem("unprosperously"), "unprosper" );
	deepEqual( Stem("unprotected"), "unprotect" );
	deepEqual( Stem("unprovide"), "unprovid" );
	deepEqual( Stem("unprovided"), "unprovid" );
	deepEqual( Stem("unprovident"), "unprovid" );
	deepEqual( Stem("unprovokes"), "unprovok" );
	deepEqual( Stem("unprun"), "unprun" );
	deepEqual( Stem("unpruned"), "unprun" );
	deepEqual( Stem("unpublish"), "unpublish" );
	deepEqual( Stem("unpurged"), "unpurg" );
	deepEqual( Stem("unpurpos"), "unpurpo" );
	deepEqual( Stem("unqualitied"), "unqual" );
	deepEqual( Stem("unqueen"), "unqueen" );
	deepEqual( Stem("unquestion"), "unquest" );
	deepEqual( Stem("unquestionable"), "unquestion" );
	deepEqual( Stem("unquestioned"), "unquest" );
	deepEqual( Stem("unquiet"), "unquiet" );
	deepEqual( Stem("unquietly"), "unquietli" );
	deepEqual( Stem("unquietness"), "unquiet" );
	deepEqual( Stem("unraised"), "unrais" );
	deepEqual( Stem("unrak"), "unrak" );
	deepEqual( Stem("unravel"), "unravel" );
	deepEqual( Stem("unread"), "unread" );
	deepEqual( Stem("unready"), "unreadi" );
	deepEqual( Stem("unreal"), "unreal" );
	deepEqual( Stem("unreasonable"), "unreason" );
	deepEqual( Stem("unreasonably"), "unreason" );
	deepEqual( Stem("unreclaimed"), "unreclaim" );
	deepEqual( Stem("unreconciled"), "unreconcil" );
	deepEqual( Stem("unreconciliable"), "unreconcili" );
	deepEqual( Stem("unrecounted"), "unrecount" );
	deepEqual( Stem("unrecuring"), "unrecur" );
	deepEqual( Stem("unregarded"), "unregard" );
	deepEqual( Stem("unregist"), "unregist" );
	deepEqual( Stem("unrelenting"), "unrel" );
	deepEqual( Stem("unremarked"), "unremark" );
	deepEqual( Stem("unremovable"), "unremov" );
	deepEqual( Stem("unremovably"), "unremov" );
	deepEqual( Stem("unrepining"), "unrepin" );
	deepEqual( Stem("unreprievable"), "unrepriev" );
	deepEqual( Stem("unrequited"), "unrequit" );
	deepEqual( Stem("unreserved"), "unreserv" );
	deepEqual( Stem("unreservedly"), "unreservedli" );
	deepEqual( Stem("unresolv"), "unresolv" );
	deepEqual( Stem("unrespected"), "unrespect" );
	deepEqual( Stem("unrespective"), "unrespect" );
	deepEqual( Stem("unrest"), "unrest" );
	deepEqual( Stem("unrestor"), "unrestor" );
	deepEqual( Stem("unrestrained"), "unrestrain" );
	deepEqual( Stem("unrevealed"), "unrev" );
	deepEqual( Stem("unreveng"), "unreveng" );
	deepEqual( Stem("unreverend"), "unreverend" );
	deepEqual( Stem("unreverent"), "unrever" );
	deepEqual( Stem("unrevers"), "unrev" );
	deepEqual( Stem("unrewarded"), "unreward" );
	deepEqual( Stem("unrighteous"), "unright" );
	deepEqual( Stem("unrighteousness"), "unright" );
	deepEqual( Stem("unrightful"), "unright" );
	deepEqual( Stem("unripe"), "unrip" );
	deepEqual( Stem("unripp"), "unripp" );
	deepEqual( Stem("unrivall"), "unrival" );
	deepEqual( Stem("unroll"), "unrol" );
	deepEqual( Stem("unromantic"), "unromant" );
	deepEqual( Stem("unroof"), "unroof" );
	deepEqual( Stem("unroosted"), "unroost" );
	deepEqual( Stem("unroot"), "unroot" );
	deepEqual( Stem("unrough"), "unrough" );
	deepEqual( Stem("unruly"), "unruli" );
	deepEqual( Stem("unsafe"), "unsaf" );
	deepEqual( Stem("unsaid"), "unsaid" );
	deepEqual( Stem("unsaluted"), "unsalut" );
	deepEqual( Stem("unsanctified"), "unsanctifi" );
	deepEqual( Stem("unsatisfactory"), "unsatisfactori" );
	deepEqual( Stem("unsatisfied"), "unsatisfi" );
	deepEqual( Stem("unsavoury"), "unsavouri" );
	deepEqual( Stem("unsay"), "unsai" );
	deepEqual( Stem("unscalable"), "unscal" );
	deepEqual( Stem("unscann"), "unscann" );
	deepEqual( Stem("unscared"), "unscar" );
	deepEqual( Stem("unscarr"), "unscarr" );
	deepEqual( Stem("unschool"), "unschool" );
	deepEqual( Stem("unscorch"), "unscorch" );
	deepEqual( Stem("unscour"), "unscour" );
	deepEqual( Stem("unscratch"), "unscratch" );
	deepEqual( Stem("unscrupulous"), "unscrupul" );
	deepEqual( Stem("unseal"), "unseal" );
	deepEqual( Stem("unseam"), "unseam" );
	deepEqual( Stem("unsearch"), "unsearch" );
	deepEqual( Stem("unseason"), "unseason" );
	deepEqual( Stem("unseasonable"), "unseason" );
	deepEqual( Stem("unseasonably"), "unseason" );
	deepEqual( Stem("unseasoned"), "unseason" );
	deepEqual( Stem("unseconded"), "unsecond" );
	deepEqual( Stem("unsecret"), "unsecret" );
	deepEqual( Stem("unseduc"), "unseduc" );
	deepEqual( Stem("unseeing"), "unse" );
	deepEqual( Stem("unseeming"), "unseem" );
	deepEqual( Stem("unseemly"), "unseemli" );
	deepEqual( Stem("unseen"), "unseen" );
	deepEqual( Stem("unseminar"), "unseminar" );
	deepEqual( Stem("unseparable"), "unsepar" );
	deepEqual( Stem("unserviceable"), "unservic" );
	deepEqual( Stem("unset"), "unset" );
	deepEqual( Stem("unsettle"), "unsettl" );
	deepEqual( Stem("unsettled"), "unsettl" );
	deepEqual( Stem("unsever"), "unsev" );
	deepEqual( Stem("unsewed"), "unsew" );
	deepEqual( Stem("unsex"), "unsex" );
	deepEqual( Stem("unshak"), "unshak" );
	deepEqual( Stem("unshaked"), "unshak" );
	deepEqual( Stem("unshaken"), "unshaken" );
	deepEqual( Stem("unshaped"), "unshap" );
	deepEqual( Stem("unshapes"), "unshap" );
	deepEqual( Stem("unsheath"), "unsheath" );
	deepEqual( Stem("unsheathe"), "unsheath" );
	deepEqual( Stem("unshorn"), "unshorn" );
	deepEqual( Stem("unshout"), "unshout" );
	deepEqual( Stem("unshown"), "unshown" );
	deepEqual( Stem("unshrinking"), "unshrink" );
	deepEqual( Stem("unshrubb"), "unshrubb" );
	deepEqual( Stem("unshunn"), "unshunn" );
	deepEqual( Stem("unshunnable"), "unshunn" );
	deepEqual( Stem("unsifted"), "unsift" );
	deepEqual( Stem("unsightly"), "unsightli" );
	deepEqual( Stem("unsinew"), "unsinew" );
	deepEqual( Stem("unsisting"), "unsist" );
	deepEqual( Stem("unskilful"), "unskil" );
	deepEqual( Stem("unskilfully"), "unskilfulli" );
	deepEqual( Stem("unskillful"), "unskil" );
	deepEqual( Stem("unslipping"), "unslip" );
	deepEqual( Stem("unsmirched"), "unsmirch" );
	deepEqual( Stem("unsoil"), "unsoil" );
	deepEqual( Stem("unsolicited"), "unsolicit" );
	deepEqual( Stem("unsophisticated"), "unsophist" );
	deepEqual( Stem("unsorted"), "unsort" );
	deepEqual( Stem("unsought"), "unsought" );
	deepEqual( Stem("unsound"), "unsound" );
	deepEqual( Stem("unsounded"), "unsound" );
	deepEqual( Stem("unsparingly"), "unsparingli" );
	deepEqual( Stem("unspeak"), "unspeak" );
	deepEqual( Stem("unspeakable"), "unspeak" );
	deepEqual( Stem("unspeaking"), "unspeak" );
	deepEqual( Stem("unsphere"), "unspher" );
	deepEqual( Stem("unspoke"), "unspok" );
	deepEqual( Stem("unspoken"), "unspoken" );
	deepEqual( Stem("unspotted"), "unspot" );
	deepEqual( Stem("unsquar"), "unsquar" );
	deepEqual( Stem("unstable"), "unstabl" );
	deepEqual( Stem("unstaid"), "unstaid" );
	deepEqual( Stem("unstain"), "unstain" );
	deepEqual( Stem("unstained"), "unstain" );
	deepEqual( Stem("unstanched"), "unstanch" );
	deepEqual( Stem("unstate"), "unstat" );
	deepEqual( Stem("unsteadfast"), "unsteadfast" );
	deepEqual( Stem("unsteady"), "unsteadi" );
	deepEqual( Stem("unstooping"), "unstoop" );
	deepEqual( Stem("unstringed"), "unstring" );
	deepEqual( Stem("unstuff"), "unstuff" );
	deepEqual( Stem("unsubstantial"), "unsubstanti" );
	deepEqual( Stem("unsuccessful"), "unsuccess" );
	deepEqual( Stem("unsuitable"), "unsuit" );
	deepEqual( Stem("unsuiting"), "unsuit" );
	deepEqual( Stem("unsullied"), "unsulli" );
	deepEqual( Stem("unsunn"), "unsunn" );
	deepEqual( Stem("unsupported"), "unsupport" );
	deepEqual( Stem("unsur"), "unsur" );
	deepEqual( Stem("unsure"), "unsur" );
	deepEqual( Stem("unsurpassable"), "unsurpass" );
	deepEqual( Stem("unsuspected"), "unsuspect" );
	deepEqual( Stem("unsuspicious"), "unsuspici" );
	deepEqual( Stem("unsuspiciously"), "unsuspici" );
	deepEqual( Stem("unsway"), "unswai" );
	deepEqual( Stem("unswayable"), "unsway" );
	deepEqual( Stem("unswayed"), "unswai" );
	deepEqual( Stem("unswear"), "unswear" );
	deepEqual( Stem("unswept"), "unswept" );
	deepEqual( Stem("unsworn"), "unsworn" );
	deepEqual( Stem("untainted"), "untaint" );
	deepEqual( Stem("untalk"), "untalk" );
	deepEqual( Stem("untangle"), "untangl" );
	deepEqual( Stem("untangled"), "untangl" );
	deepEqual( Stem("untasted"), "untast" );
	deepEqual( Stem("untaught"), "untaught" );
	deepEqual( Stem("untempering"), "untemp" );
	deepEqual( Stem("untender"), "untend" );
	deepEqual( Stem("untent"), "untent" );
	deepEqual( Stem("untented"), "untent" );
	deepEqual( Stem("unthankful"), "unthank" );
	deepEqual( Stem("unthankfulness"), "unthank" );
	deepEqual( Stem("unthink"), "unthink" );
	deepEqual( Stem("unthought"), "unthought" );
	deepEqual( Stem("unthread"), "unthread" );
	deepEqual( Stem("unthrift"), "unthrift" );
	deepEqual( Stem("unthrifts"), "unthrift" );
	deepEqual( Stem("unthrifty"), "unthrifti" );
	deepEqual( Stem("untie"), "unti" );
	deepEqual( Stem("untied"), "unti" );
	deepEqual( Stem("until"), "until" );
	deepEqual( Stem("untimber"), "untimb" );
	deepEqual( Stem("untimely"), "untim" );
	deepEqual( Stem("untir"), "untir" );
	deepEqual( Stem("untirable"), "untir" );
	deepEqual( Stem("untired"), "untir" );
	deepEqual( Stem("untiring"), "untir" );
	deepEqual( Stem("untitled"), "untitl" );
	deepEqual( Stem("unto"), "unto" );
	deepEqual( Stem("untold"), "untold" );
	deepEqual( Stem("untouch"), "untouch" );
	deepEqual( Stem("untouched"), "untouch" );
	deepEqual( Stem("untoward"), "untoward" );
	deepEqual( Stem("untowardly"), "untowardli" );
	deepEqual( Stem("untraded"), "untrad" );
	deepEqual( Stem("untrain"), "untrain" );
	deepEqual( Stem("untrained"), "untrain" );
	deepEqual( Stem("untread"), "untread" );
	deepEqual( Stem("untreasur"), "untreasur" );
	deepEqual( Stem("untried"), "untri" );
	deepEqual( Stem("untrimmed"), "untrim" );
	deepEqual( Stem("untrod"), "untrod" );
	deepEqual( Stem("untrodden"), "untrodden" );
	deepEqual( Stem("untroubled"), "untroubl" );
	deepEqual( Stem("untrue"), "untru" );
	deepEqual( Stem("untrussing"), "untruss" );
	deepEqual( Stem("untruth"), "untruth" );
	deepEqual( Stem("untruths"), "untruth" );
	deepEqual( Stem("untucked"), "untuck" );
	deepEqual( Stem("untun"), "untun" );
	deepEqual( Stem("untune"), "untun" );
	deepEqual( Stem("untuneable"), "untun" );
	deepEqual( Stem("untutor"), "untutor" );
	deepEqual( Stem("untutored"), "untutor" );
	deepEqual( Stem("untwine"), "untwin" );
	deepEqual( Stem("untying"), "unti" );
	deepEqual( Stem("unurg"), "unurg" );
	deepEqual( Stem("unus"), "unu" );
	deepEqual( Stem("unused"), "unus" );
	deepEqual( Stem("unusual"), "unusu" );
	deepEqual( Stem("unusually"), "unusu" );
	deepEqual( Stem("unutterable"), "unutter" );
	deepEqual( Stem("unvalued"), "unvalu" );
	deepEqual( Stem("unvanquish"), "unvanquish" );
	deepEqual( Stem("unvarnish"), "unvarnish" );
	deepEqual( Stem("unveil"), "unveil" );
	deepEqual( Stem("unveiling"), "unveil" );
	deepEqual( Stem("unvenerable"), "unvener" );
	deepEqual( Stem("unvex"), "unvex" );
	deepEqual( Stem("unviolated"), "unviol" );
	deepEqual( Stem("unvirtuous"), "unvirtu" );
	deepEqual( Stem("unvisited"), "unvisit" );
	deepEqual( Stem("unvulnerable"), "unvulner" );
	deepEqual( Stem("unwares"), "unwar" );
	deepEqual( Stem("unwarily"), "unwarili" );
	deepEqual( Stem("unwash"), "unwash" );
	deepEqual( Stem("unwatch"), "unwatch" );
	deepEqual( Stem("unwearied"), "unweari" );
	deepEqual( Stem("unwed"), "unw" );
	deepEqual( Stem("unwedgeable"), "unwedg" );
	deepEqual( Stem("unweeded"), "unweed" );
	deepEqual( Stem("unweighed"), "unweigh" );
	deepEqual( Stem("unweighing"), "unweigh" );
	deepEqual( Stem("unwelcome"), "unwelcom" );
	deepEqual( Stem("unwell"), "unwel" );
	deepEqual( Stem("unwept"), "unwept" );
	deepEqual( Stem("unwhipp"), "unwhipp" );
	deepEqual( Stem("unwholesome"), "unwholesom" );
	deepEqual( Stem("unwieldily"), "unwieldili" );
	deepEqual( Stem("unwieldy"), "unwieldi" );
	deepEqual( Stem("unwilling"), "unwil" );
	deepEqual( Stem("unwillingly"), "unwillingli" );
	deepEqual( Stem("unwillingness"), "unwilling" );
	deepEqual( Stem("unwind"), "unwind" );
	deepEqual( Stem("unwinding"), "unwind" );
	deepEqual( Stem("unwiped"), "unwip" );
	deepEqual( Stem("unwise"), "unwis" );
	deepEqual( Stem("unwisely"), "unwis" );
	deepEqual( Stem("unwish"), "unwish" );
	deepEqual( Stem("unwished"), "unwish" );
	deepEqual( Stem("unwitted"), "unwit" );
	deepEqual( Stem("unwittingly"), "unwittingli" );
	deepEqual( Stem("unwonted"), "unwont" );
	deepEqual( Stem("unwooed"), "unwoo" );
	deepEqual( Stem("unworthier"), "unworthi" );
	deepEqual( Stem("unworthiest"), "unworthiest" );
	deepEqual( Stem("unworthily"), "unworthili" );
	deepEqual( Stem("unworthiness"), "unworthi" );
	deepEqual( Stem("unworthy"), "unworthi" );
	deepEqual( Stem("unwounded"), "unwound" );
	deepEqual( Stem("unwrung"), "unwrung" );
	deepEqual( Stem("unyielding"), "unyield" );
	deepEqual( Stem("unyok"), "unyok" );
	deepEqual( Stem("unyoke"), "unyok" );
	deepEqual( Stem("up"), "up" );
	deepEqual( Stem("upbraid"), "upbraid" );
	deepEqual( Stem("upbraided"), "upbraid" );
	deepEqual( Stem("upbraidings"), "upbraid" );
	deepEqual( Stem("upbraids"), "upbraid" );
	deepEqual( Stem("uphoarded"), "uphoard" );
	deepEqual( Stem("uphold"), "uphold" );
	deepEqual( Stem("upholdeth"), "upholdeth" );
	deepEqual( Stem("upholding"), "uphold" );
	deepEqual( Stem("upholds"), "uphold" );
	deepEqual( Stem("uplift"), "uplift" );
	deepEqual( Stem("uplifted"), "uplift" );
	deepEqual( Stem("upmost"), "upmost" );
	deepEqual( Stem("upon"), "upon" );
	deepEqual( Stem("upper"), "upper" );
	deepEqual( Stem("uppermost"), "uppermost" );
	deepEqual( Stem("uprear"), "uprear" );
	deepEqual( Stem("upreared"), "uprear" );
	deepEqual( Stem("upright"), "upright" );
	deepEqual( Stem("uprighteously"), "upright" );
	deepEqual( Stem("uprightness"), "upright" );
	deepEqual( Stem("uprise"), "upris" );
	deepEqual( Stem("uprising"), "upris" );
	deepEqual( Stem("uproar"), "uproar" );
	deepEqual( Stem("uproars"), "uproar" );
	deepEqual( Stem("uprous"), "uprou" );
	deepEqual( Stem("uproused"), "uprous" );
	deepEqual( Stem("upset"), "upset" );
	deepEqual( Stem("upsetting"), "upset" );
	deepEqual( Stem("upshoot"), "upshoot" );
	deepEqual( Stem("upshot"), "upshot" );
	deepEqual( Stem("upside"), "upsid" );
	deepEqual( Stem("upspring"), "upspr" );
	deepEqual( Stem("upstairs"), "upstair" );
	deepEqual( Stem("upstart"), "upstart" );
	deepEqual( Stem("upturned"), "upturn" );
	deepEqual( Stem("upward"), "upward" );
	deepEqual( Stem("upwards"), "upward" );
	deepEqual( Stem("urbanity"), "urban" );
	deepEqual( Stem("urchin"), "urchin" );
	deepEqual( Stem("urchinfield"), "urchinfield" );
	deepEqual( Stem("urchins"), "urchin" );
	deepEqual( Stem("urg"), "urg" );
	deepEqual( Stem("urge"), "urg" );
	deepEqual( Stem("urged"), "urg" );
	deepEqual( Stem("urgent"), "urgent" );
	deepEqual( Stem("urges"), "urg" );
	deepEqual( Stem("urgest"), "urgest" );
	deepEqual( Stem("urging"), "urg" );
	deepEqual( Stem("urinal"), "urin" );
	deepEqual( Stem("urinals"), "urin" );
	deepEqual( Stem("urine"), "urin" );
	deepEqual( Stem("urn"), "urn" );
	deepEqual( Stem("urns"), "urn" );
	deepEqual( Stem("urs"), "ur" );
	deepEqual( Stem("ursa"), "ursa" );
	deepEqual( Stem("ursley"), "urslei" );
	deepEqual( Stem("ursula"), "ursula" );
	deepEqual( Stem("urswick"), "urswick" );
	deepEqual( Stem("us"), "u" );
	deepEqual( Stem("usage"), "usag" );
	deepEqual( Stem("usages"), "usag" );
	deepEqual( Stem("usance"), "usanc" );
	deepEqual( Stem("usances"), "usanc" );
	deepEqual( Stem("use"), "us" );
	deepEqual( Stem("used"), "us" );
	deepEqual( Stem("useful"), "us" );
	deepEqual( Stem("useless"), "useless" );
	deepEqual( Stem("user"), "user" );
	deepEqual( Stem("uses"), "us" );
	deepEqual( Stem("usest"), "usest" );
	deepEqual( Stem("useth"), "useth" );
	deepEqual( Stem("usher"), "usher" );
	deepEqual( Stem("ushered"), "usher" );
	deepEqual( Stem("ushering"), "usher" );
	deepEqual( Stem("ushers"), "usher" );
	deepEqual( Stem("using"), "us" );
	deepEqual( Stem("usual"), "usual" );
	deepEqual( Stem("usually"), "usual" );
	deepEqual( Stem("usurer"), "usur" );
	deepEqual( Stem("usurers"), "usur" );
	deepEqual( Stem("usuries"), "usuri" );
	deepEqual( Stem("usuring"), "usur" );
	deepEqual( Stem("usurp"), "usurp" );
	deepEqual( Stem("usurpation"), "usurp" );
	deepEqual( Stem("usurped"), "usurp" );
	deepEqual( Stem("usurper"), "usurp" );
	deepEqual( Stem("usurpers"), "usurp" );
	deepEqual( Stem("usurping"), "usurp" );
	deepEqual( Stem("usurpingly"), "usurpingli" );
	deepEqual( Stem("usurps"), "usurp" );
	deepEqual( Stem("usury"), "usuri" );
	deepEqual( Stem("ut"), "ut" );
	deepEqual( Stem("utensil"), "utensil" );
	deepEqual( Stem("utensils"), "utensil" );
	deepEqual( Stem("uthers"), "uther" );
	deepEqual( Stem("utility"), "util" );
	deepEqual( Stem("utmost"), "utmost" );
	deepEqual( Stem("utt"), "utt" );
	deepEqual( Stem("utter"), "utter" );
	deepEqual( Stem("utterance"), "utter" );
	deepEqual( Stem("uttered"), "utter" );
	deepEqual( Stem("uttereth"), "uttereth" );
	deepEqual( Stem("uttering"), "utter" );
	deepEqual( Stem("utterly"), "utterli" );
	deepEqual( Stem("uttermost"), "uttermost" );
	deepEqual( Stem("utters"), "utter" );
	deepEqual( Stem("uxbridge"), "uxbridg" );
	deepEqual( Stem("uxor"), "uxor" );
	deepEqual( Stem("uy"), "ui" );
	deepEqual( Stem("v"), "v" );
	deepEqual( Stem("va"), "va" );
	deepEqual( Stem("vacancy"), "vacanc" );
	deepEqual( Stem("vacant"), "vacant" );
	deepEqual( Stem("vacated"), "vacat" );
	deepEqual( Stem("vacation"), "vacat" );
	deepEqual( Stem("vacations"), "vacat" );
	deepEqual( Stem("vacillation"), "vacil" );
	deepEqual( Stem("vacuity"), "vacuiti" );
	deepEqual( Stem("vade"), "vade" );
	deepEqual( Stem("vagabond"), "vagabond" );
	deepEqual( Stem("vagabonds"), "vagabond" );
	deepEqual( Stem("vagram"), "vagram" );
	deepEqual( Stem("vagrom"), "vagrom" );
	deepEqual( Stem("vague"), "vagu" );
	deepEqual( Stem("vaguely"), "vagu" );
	deepEqual( Stem("vail"), "vail" );
	deepEqual( Stem("vailed"), "vail" );
	deepEqual( Stem("vailing"), "vail" );
	deepEqual( Stem("vaillant"), "vaillant" );
	deepEqual( Stem("vain"), "vain" );
	deepEqual( Stem("vainer"), "vainer" );
	deepEqual( Stem("vainglory"), "vainglori" );
	deepEqual( Stem("vainly"), "vainli" );
	deepEqual( Stem("vainness"), "vain" );
	deepEqual( Stem("vainqueur"), "vainqueur" );
	deepEqual( Stem("vair"), "vair" );
	deepEqual( Stem("vais"), "vai" );
	deepEqual( Stem("valanc"), "valanc" );
	deepEqual( Stem("valance"), "valanc" );
	deepEqual( Stem("vale"), "vale" );
	deepEqual( Stem("valence"), "valenc" );
	deepEqual( Stem("valenciennes"), "valencienn" );
	deepEqual( Stem("valentine"), "valentin" );
	deepEqual( Stem("valentinus"), "valentinu" );
	deepEqual( Stem("valentio"), "valentio" );
	deepEqual( Stem("valeria"), "valeria" );
	deepEqual( Stem("valerius"), "valeriu" );
	deepEqual( Stem("vales"), "vale" );
	deepEqual( Stem("valet"), "valet" );
	deepEqual( Stem("valets"), "valet" );
	deepEqual( Stem("valiant"), "valiant" );
	deepEqual( Stem("valiantly"), "valiantli" );
	deepEqual( Stem("valiantness"), "valiant" );
	deepEqual( Stem("validity"), "valid" );
	deepEqual( Stem("valise"), "valis" );
	deepEqual( Stem("vallant"), "vallant" );
	deepEqual( Stem("valley"), "vallei" );
	deepEqual( Stem("valleys"), "vallei" );
	deepEqual( Stem("vally"), "valli" );
	deepEqual( Stem("valor"), "valor" );
	deepEqual( Stem("valorous"), "valor" );
	deepEqual( Stem("valorously"), "valor" );
	deepEqual( Stem("valour"), "valour" );
	deepEqual( Stem("valu"), "valu" );
	deepEqual( Stem("valuable"), "valuabl" );
	deepEqual( Stem("valuables"), "valuabl" );
	deepEqual( Stem("valuation"), "valuat" );
	deepEqual( Stem("value"), "valu" );
	deepEqual( Stem("valued"), "valu" );
	deepEqual( Stem("valueless"), "valueless" );
	deepEqual( Stem("values"), "valu" );
	deepEqual( Stem("valuing"), "valu" );
	deepEqual( Stem("valyble"), "valybl" );
	deepEqual( Stem("vamous"), "vamou" );
	deepEqual( Stem("van"), "van" );
	deepEqual( Stem("vandykes"), "vandyk" );
	deepEqual( Stem("vane"), "vane" );
	deepEqual( Stem("vanish"), "vanish" );
	deepEqual( Stem("vanished"), "vanish" );
	deepEqual( Stem("vanishes"), "vanish" );
	deepEqual( Stem("vanishest"), "vanishest" );
	deepEqual( Stem("vanishing"), "vanish" );
	deepEqual( Stem("vanitas"), "vanita" );
	deepEqual( Stem("vanitatum"), "vanitatum" );
	deepEqual( Stem("vanities"), "vaniti" );
	deepEqual( Stem("vanity"), "vaniti" );
	deepEqual( Stem("vanquish"), "vanquish" );
	deepEqual( Stem("vanquished"), "vanquish" );
	deepEqual( Stem("vanquisher"), "vanquish" );
	deepEqual( Stem("vanquishest"), "vanquishest" );
	deepEqual( Stem("vanquisheth"), "vanquisheth" );
	deepEqual( Stem("vans"), "van" );
	deepEqual( Stem("vant"), "vant" );
	deepEqual( Stem("vantage"), "vantag" );
	deepEqual( Stem("vantages"), "vantag" );
	deepEqual( Stem("vantbrace"), "vantbrac" );
	deepEqual( Stem("vapians"), "vapian" );
	deepEqual( Stem("vapor"), "vapor" );
	deepEqual( Stem("vaporous"), "vapor" );
	deepEqual( Stem("vapour"), "vapour" );
	deepEqual( Stem("vapours"), "vapour" );
	deepEqual( Stem("vara"), "vara" );
	deepEqual( Stem("variable"), "variabl" );
	deepEqual( Stem("variance"), "varianc" );
	deepEqual( Stem("variation"), "variat" );
	deepEqual( Stem("variations"), "variat" );
	deepEqual( Stem("varied"), "vari" );
	deepEqual( Stem("variegated"), "varieg" );
	deepEqual( Stem("varies"), "vari" );
	deepEqual( Stem("variest"), "variest" );
	deepEqual( Stem("variety"), "varieti" );
	deepEqual( Stem("varinas"), "varina" );
	deepEqual( Stem("various"), "variou" );
	deepEqual( Stem("varld"), "varld" );
	deepEqual( Stem("varlet"), "varlet" );
	deepEqual( Stem("varletry"), "varletri" );
	deepEqual( Stem("varlets"), "varlet" );
	deepEqual( Stem("varletto"), "varletto" );
	deepEqual( Stem("varnish"), "varnish" );
	deepEqual( Stem("varnished"), "varnish" );
	deepEqual( Stem("varrius"), "varriu" );
	deepEqual( Stem("varro"), "varro" );
	deepEqual( Stem("vary"), "vari" );
	deepEqual( Stem("varying"), "vari" );
	deepEqual( Stem("vassal"), "vassal" );
	deepEqual( Stem("vassalage"), "vassalag" );
	deepEqual( Stem("vassals"), "vassal" );
	deepEqual( Stem("vast"), "vast" );
	deepEqual( Stem("vastidity"), "vastid" );
	deepEqual( Stem("vastly"), "vastli" );
	deepEqual( Stem("vastness"), "vast" );
	deepEqual( Stem("vasty"), "vasti" );
	deepEqual( Stem("vat"), "vat" );
	deepEqual( Stem("vater"), "vater" );
	deepEqual( Stem("vaudemont"), "vaudemont" );
	deepEqual( Stem("vaughan"), "vaughan" );
	deepEqual( Stem("vault"), "vault" );
	deepEqual( Stem("vaultages"), "vaultag" );
	deepEqual( Stem("vaulted"), "vault" );
	deepEqual( Stem("vaulters"), "vaulter" );
	deepEqual( Stem("vaulting"), "vault" );
	deepEqual( Stem("vaults"), "vault" );
	deepEqual( Stem("vaulty"), "vaulti" );
	deepEqual( Stem("vaumond"), "vaumond" );
	deepEqual( Stem("vaunt"), "vaunt" );
	deepEqual( Stem("vaunted"), "vaunt" );
	deepEqual( Stem("vaunter"), "vaunter" );
	deepEqual( Stem("vaunting"), "vaunt" );
	deepEqual( Stem("vauntingly"), "vauntingli" );
	deepEqual( Stem("vaunts"), "vaunt" );
	deepEqual( Stem("vauvado"), "vauvado" );
	deepEqual( Stem("vaux"), "vaux" );
	deepEqual( Stem("vauxhall"), "vauxhal" );
	deepEqual( Stem("vaward"), "vaward" );
	deepEqual( Stem("ve"), "ve" );
	deepEqual( Stem("veal"), "veal" );
	deepEqual( Stem("vede"), "vede" );
	deepEqual( Stem("vedrai"), "vedrai" );
	deepEqual( Stem("vegetable"), "veget" );
	deepEqual( Stem("vegetables"), "veget" );
	deepEqual( Stem("vehemence"), "vehem" );
	deepEqual( Stem("vehemency"), "vehem" );
	deepEqual( Stem("vehement"), "vehement" );
	deepEqual( Stem("vehemently"), "vehement" );
	deepEqual( Stem("vehicle"), "vehicl" );
	deepEqual( Stem("vehicles"), "vehicl" );
	deepEqual( Stem("vehmgericht"), "vehmgericht" );
	deepEqual( Stem("vehor"), "vehor" );
	deepEqual( Stem("veil"), "veil" );
	deepEqual( Stem("veiled"), "veil" );
	deepEqual( Stem("veiling"), "veil" );
	deepEqual( Stem("veils"), "veil" );
	deepEqual( Stem("vein"), "vein" );
	deepEqual( Stem("veins"), "vein" );
	deepEqual( Stem("vell"), "vell" );
	deepEqual( Stem("velure"), "velur" );
	deepEqual( Stem("velutus"), "velutu" );
	deepEqual( Stem("velvet"), "velvet" );
	deepEqual( Stem("velvets"), "velvet" );
	deepEqual( Stem("vend"), "vend" );
	deepEqual( Stem("vendible"), "vendibl" );
	deepEqual( Stem("vending"), "vend" );
	deepEqual( Stem("venerable"), "vener" );
	deepEqual( Stem("venerated"), "vener" );
	deepEqual( Stem("veneration"), "vener" );
	deepEqual( Stem("venereal"), "vener" );
	deepEqual( Stem("venetia"), "venetia" );
	deepEqual( Stem("venetian"), "venetian" );
	deepEqual( Stem("venetians"), "venetian" );
	deepEqual( Stem("veneys"), "venei" );
	deepEqual( Stem("venge"), "veng" );
	deepEqual( Stem("vengeance"), "vengeanc" );
	deepEqual( Stem("vengeances"), "vengeanc" );
	deepEqual( Stem("vengeful"), "veng" );
	deepEqual( Stem("veni"), "veni" );
	deepEqual( Stem("venial"), "venial" );
	deepEqual( Stem("venice"), "venic" );
	deepEqual( Stem("venison"), "venison" );
	deepEqual( Stem("venit"), "venit" );
	deepEqual( Stem("venny"), "venni" );
	deepEqual( Stem("venom"), "venom" );
	deepEqual( Stem("venomous"), "venom" );
	deepEqual( Stem("venomously"), "venom" );
	deepEqual( Stem("vent"), "vent" );
	deepEqual( Stem("ventages"), "ventag" );
	deepEqual( Stem("vented"), "vent" );
	deepEqual( Stem("ventidius"), "ventidiu" );
	deepEqual( Stem("ventre"), "ventr" );
	deepEqual( Stem("ventricle"), "ventricl" );
	deepEqual( Stem("vents"), "vent" );
	deepEqual( Stem("ventur"), "ventur" );
	deepEqual( Stem("venture"), "ventur" );
	deepEqual( Stem("ventured"), "ventur" );
	deepEqual( Stem("ventures"), "ventur" );
	deepEqual( Stem("venturing"), "ventur" );
	deepEqual( Stem("venturous"), "ventur" );
	deepEqual( Stem("venue"), "venu" );
	deepEqual( Stem("venus"), "venu" );
	deepEqual( Stem("venuto"), "venuto" );
	deepEqual( Stem("ver"), "ver" );
	deepEqual( Stem("veracious"), "veraci" );
	deepEqual( Stem("veraciously"), "veraci" );
	deepEqual( Stem("verandas"), "veranda" );
	deepEqual( Stem("verb"), "verb" );
	deepEqual( Stem("verba"), "verba" );
	deepEqual( Stem("verbal"), "verbal" );
	deepEqual( Stem("verbatim"), "verbatim" );
	deepEqual( Stem("verbosity"), "verbos" );
	deepEqual( Stem("verdict"), "verdict" );
	deepEqual( Stem("verdun"), "verdun" );
	deepEqual( Stem("verdure"), "verdur" );
	deepEqual( Stem("vere"), "vere" );
	deepEqual( Stem("verefore"), "verefor" );
	deepEqual( Stem("verg"), "verg" );
	deepEqual( Stem("verge"), "verg" );
	deepEqual( Stem("vergers"), "verger" );
	deepEqual( Stem("verges"), "verg" );
	deepEqual( Stem("verier"), "verier" );
	deepEqual( Stem("veriest"), "veriest" );
	deepEqual( Stem("verified"), "verifi" );
	deepEqual( Stem("verify"), "verifi" );
	deepEqual( Stem("verily"), "verili" );
	deepEqual( Stem("veritable"), "verit" );
	deepEqual( Stem("veritas"), "verita" );
	deepEqual( Stem("verite"), "verit" );
	deepEqual( Stem("verities"), "veriti" );
	deepEqual( Stem("verity"), "veriti" );
	deepEqual( Stem("vermilion"), "vermilion" );
	deepEqual( Stem("vermin"), "vermin" );
	deepEqual( Stem("vernon"), "vernon" );
	deepEqual( Stem("verona"), "verona" );
	deepEqual( Stem("veronesa"), "veronesa" );
	deepEqual( Stem("versa"), "versa" );
	deepEqual( Stem("versailles"), "versail" );
	deepEqual( Stem("versal"), "versal" );
	deepEqual( Stem("verse"), "vers" );
	deepEqual( Stem("versed"), "vers" );
	deepEqual( Stem("verses"), "vers" );
	deepEqual( Stem("versing"), "vers" );
	deepEqual( Stem("version"), "version" );
	deepEqual( Stem("versus"), "versu" );
	deepEqual( Stem("vert"), "vert" );
	deepEqual( Stem("verte"), "vert" );
	deepEqual( Stem("vertu"), "vertu" );
	deepEqual( Stem("very"), "veri" );
	deepEqual( Stem("vesper"), "vesper" );
	deepEqual( Stem("vessel"), "vessel" );
	deepEqual( Stem("vessels"), "vessel" );
	deepEqual( Stem("vestal"), "vestal" );
	deepEqual( Stem("vestals"), "vestal" );
	deepEqual( Stem("vestments"), "vestment" );
	deepEqual( Stem("vestris"), "vestri" );
	deepEqual( Stem("vestry"), "vestri" );
	deepEqual( Stem("vests"), "vest" );
	deepEqual( Stem("vesture"), "vestur" );
	deepEqual( Stem("vesuvius"), "vesuviu" );
	deepEqual( Stem("vetch"), "vetch" );
	deepEqual( Stem("vetches"), "vetch" );
	deepEqual( Stem("veteran"), "veteran" );
	deepEqual( Stem("veterans"), "veteran" );
	deepEqual( Stem("veto"), "veto" );
	deepEqual( Stem("veux"), "veux" );
	deepEqual( Stem("vex"), "vex" );
	deepEqual( Stem("vexation"), "vexat" );
	deepEqual( Stem("vexations"), "vexat" );
	deepEqual( Stem("vexed"), "vex" );
	deepEqual( Stem("vexes"), "vex" );
	deepEqual( Stem("vexest"), "vexest" );
	deepEqual( Stem("vexeth"), "vexeth" );
	deepEqual( Stem("vexing"), "vex" );
	deepEqual( Stem("vi"), "vi" );
	deepEqual( Stem("via"), "via" );
	deepEqual( Stem("vial"), "vial" );
	deepEqual( Stem("vials"), "vial" );
	deepEqual( Stem("viand"), "viand" );
	deepEqual( Stem("viands"), "viand" );
	deepEqual( Stem("vic"), "vic" );
	deepEqual( Stem("vicar"), "vicar" );
	deepEqual( Stem("vice"), "vice" );
	deepEqual( Stem("vicegerent"), "viceger" );
	deepEqual( Stem("vicentio"), "vicentio" );
	deepEqual( Stem("viceroy"), "viceroi" );
	deepEqual( Stem("viceroys"), "viceroi" );
	deepEqual( Stem("vices"), "vice" );
	deepEqual( Stem("vici"), "vici" );
	deepEqual( Stem("vicious"), "viciou" );
	deepEqual( Stem("viciousness"), "vicious" );
	deepEqual( Stem("vict"), "vict" );
	deepEqual( Stem("victim"), "victim" );
	deepEqual( Stem("victimised"), "victimis" );
	deepEqual( Stem("victimized"), "victim" );
	deepEqual( Stem("victimizer"), "victim" );
	deepEqual( Stem("victims"), "victim" );
	deepEqual( Stem("victor"), "victor" );
	deepEqual( Stem("victoress"), "victoress" );
	deepEqual( Stem("victories"), "victori" );
	deepEqual( Stem("victorious"), "victori" );
	deepEqual( Stem("victors"), "victor" );
	deepEqual( Stem("victory"), "victori" );
	deepEqual( Stem("victual"), "victual" );
	deepEqual( Stem("victuall"), "victual" );
	deepEqual( Stem("victuals"), "victual" );
	deepEqual( Stem("vid"), "vid" );
	deepEqual( Stem("videlicet"), "videlicet" );
	deepEqual( Stem("video"), "video" );
	deepEqual( Stem("vides"), "vide" );
	deepEqual( Stem("videsne"), "videsn" );
	deepEqual( Stem("vidi"), "vidi" );
	deepEqual( Stem("vie"), "vie" );
	deepEqual( Stem("vied"), "vi" );
	deepEqual( Stem("vienna"), "vienna" );
	deepEqual( Stem("viens"), "vien" );
	deepEqual( Stem("view"), "view" );
	deepEqual( Stem("viewed"), "view" );
	deepEqual( Stem("viewest"), "viewest" );
	deepEqual( Stem("vieweth"), "vieweth" );
	deepEqual( Stem("viewing"), "view" );
	deepEqual( Stem("viewless"), "viewless" );
	deepEqual( Stem("views"), "view" );
	deepEqual( Stem("vigil"), "vigil" );
	deepEqual( Stem("vigilance"), "vigil" );
	deepEqual( Stem("vigilant"), "vigil" );
	deepEqual( Stem("vigitant"), "vigit" );
	deepEqual( Stem("vigorous"), "vigor" );
	deepEqual( Stem("vigorously"), "vigor" );
	deepEqual( Stem("vigour"), "vigour" );
	deepEqual( Stem("vii"), "vii" );
	deepEqual( Stem("viii"), "viii" );
	deepEqual( Stem("vile"), "vile" );
	deepEqual( Stem("vilely"), "vile" );
	deepEqual( Stem("vileness"), "vile" );
	deepEqual( Stem("viler"), "viler" );
	deepEqual( Stem("vilest"), "vilest" );
	deepEqual( Stem("vilipending"), "vilipend" );
	deepEqual( Stem("vill"), "vill" );
	deepEqual( Stem("villa"), "villa" );
	deepEqual( Stem("village"), "villag" );
	deepEqual( Stem("villager"), "villag" );
	deepEqual( Stem("villagery"), "villageri" );
	deepEqual( Stem("villages"), "villag" );
	deepEqual( Stem("villain"), "villain" );
	deepEqual( Stem("villainies"), "villaini" );
	deepEqual( Stem("villainous"), "villain" );
	deepEqual( Stem("villainously"), "villain" );
	deepEqual( Stem("villains"), "villain" );
	deepEqual( Stem("villainy"), "villaini" );
	deepEqual( Stem("villanies"), "villani" );
	deepEqual( Stem("villanous"), "villan" );
	deepEqual( Stem("villany"), "villani" );
	deepEqual( Stem("villas"), "villa" );
	deepEqual( Stem("ville"), "vill" );
	deepEqual( Stem("villiago"), "villiago" );
	deepEqual( Stem("villian"), "villian" );
	deepEqual( Stem("villianda"), "villianda" );
	deepEqual( Stem("villians"), "villian" );
	deepEqual( Stem("vin"), "vin" );
	deepEqual( Stem("vinaigre"), "vinaigr" );
	deepEqual( Stem("vincent"), "vincent" );
	deepEqual( Stem("vincentio"), "vincentio" );
	deepEqual( Stem("vincere"), "vincer" );
	deepEqual( Stem("vindicative"), "vindic" );
	deepEqual( Stem("vine"), "vine" );
	deepEqual( Stem("vinegar"), "vinegar" );
	deepEqual( Stem("vines"), "vine" );
	deepEqual( Stem("vineyard"), "vineyard" );
	deepEqual( Stem("vineyards"), "vineyard" );
	deepEqual( Stem("vinger"), "vinger" );
	deepEqual( Stem("vino"), "vino" );
	deepEqual( Stem("vinous"), "vinou" );
	deepEqual( Stem("vint"), "vint" );
	deepEqual( Stem("vintage"), "vintag" );
	deepEqual( Stem("vintner"), "vintner" );
	deepEqual( Stem("viol"), "viol" );
	deepEqual( Stem("viola"), "viola" );
	deepEqual( Stem("violate"), "violat" );
	deepEqual( Stem("violated"), "violat" );
	deepEqual( Stem("violates"), "violat" );
	deepEqual( Stem("violation"), "violat" );
	deepEqual( Stem("violator"), "violat" );
	deepEqual( Stem("violence"), "violenc" );
	deepEqual( Stem("violent"), "violent" );
	deepEqual( Stem("violenta"), "violenta" );
	deepEqual( Stem("violenteth"), "violenteth" );
	deepEqual( Stem("violently"), "violent" );
	deepEqual( Stem("violet"), "violet" );
	deepEqual( Stem("violets"), "violet" );
	deepEqual( Stem("viper"), "viper" );
	deepEqual( Stem("vipere"), "viper" );
	deepEqual( Stem("viperous"), "viper" );
	deepEqual( Stem("vipers"), "viper" );
	deepEqual( Stem("vir"), "vir" );
	deepEqual( Stem("virago"), "virago" );
	deepEqual( Stem("virgilia"), "virgilia" );
	deepEqual( Stem("virgin"), "virgin" );
	deepEqual( Stem("virginal"), "virgin" );
	deepEqual( Stem("virginalling"), "virginal" );
	deepEqual( Stem("virginity"), "virgin" );
	deepEqual( Stem("virginius"), "virginiu" );
	deepEqual( Stem("virgins"), "virgin" );
	deepEqual( Stem("virgo"), "virgo" );
	deepEqual( Stem("virile"), "viril" );
	deepEqual( Stem("virorum"), "virorum" );
	deepEqual( Stem("virtue"), "virtu" );
	deepEqual( Stem("virtues"), "virtu" );
	deepEqual( Stem("virtuous"), "virtuou" );
	deepEqual( Stem("virtuously"), "virtuous" );
	deepEqual( Stem("visag"), "visag" );
	deepEqual( Stem("visage"), "visag" );
	deepEqual( Stem("visages"), "visag" );
	deepEqual( Stem("visard"), "visard" );
	deepEqual( Stem("viscount"), "viscount" );
	deepEqual( Stem("vish"), "vish" );
	deepEqual( Stem("visible"), "visibl" );
	deepEqual( Stem("visibly"), "visibli" );
	deepEqual( Stem("vision"), "vision" );
	deepEqual( Stem("visions"), "vision" );
	deepEqual( Stem("visit"), "visit" );
	deepEqual( Stem("visitation"), "visit" );
	deepEqual( Stem("visitations"), "visit" );
	deepEqual( Stem("visite"), "visit" );
	deepEqual( Stem("visited"), "visit" );
	deepEqual( Stem("visiting"), "visit" );
	deepEqual( Stem("visitings"), "visit" );
	deepEqual( Stem("visitor"), "visitor" );
	deepEqual( Stem("visitors"), "visitor" );
	deepEqual( Stem("visits"), "visit" );
	deepEqual( Stem("visor"), "visor" );
	deepEqual( Stem("vit"), "vit" );
	deepEqual( Stem("vita"), "vita" );
	deepEqual( Stem("vitae"), "vita" );
	deepEqual( Stem("vital"), "vital" );
	deepEqual( Stem("vite"), "vite" );
	deepEqual( Stem("vitement"), "vitement" );
	deepEqual( Stem("vitruvio"), "vitruvio" );
	deepEqual( Stem("vittoria"), "vittoria" );
	deepEqual( Stem("vitx"), "vitx" );
	deepEqual( Stem("viva"), "viva" );
	deepEqual( Stem("vivacity"), "vivac" );
	deepEqual( Stem("vivan"), "vivan" );
	deepEqual( Stem("vivandiere"), "vivandier" );
	deepEqual( Stem("vivant"), "vivant" );
	deepEqual( Stem("vivants"), "vivant" );
	deepEqual( Stem("vive"), "vive" );
	deepEqual( Stem("vivid"), "vivid" );
	deepEqual( Stem("vivified"), "vivifi" );
	deepEqual( Stem("vixen"), "vixen" );
	deepEqual( Stem("vixens"), "vixen" );
	deepEqual( Stem("viz"), "viz" );
	deepEqual( Stem("vizaments"), "vizament" );
	deepEqual( Stem("vizard"), "vizard" );
	deepEqual( Stem("vizarded"), "vizard" );
	deepEqual( Stem("vizards"), "vizard" );
	deepEqual( Stem("vizier"), "vizier" );
	deepEqual( Stem("vizor"), "vizor" );
	deepEqual( Stem("vlouting"), "vlout" );
	deepEqual( Stem("vocabulary"), "vocabulari" );
	deepEqual( Stem("vocal"), "vocal" );
	deepEqual( Stem("vocation"), "vocat" );
	deepEqual( Stem("vocativo"), "vocativo" );
	deepEqual( Stem("vocatur"), "vocatur" );
	deepEqual( Stem("voce"), "voce" );
	deepEqual( Stem("vogue"), "vogu" );
	deepEqual( Stem("voic"), "voic" );
	deepEqual( Stem("voice"), "voic" );
	deepEqual( Stem("voices"), "voic" );
	deepEqual( Stem("void"), "void" );
	deepEqual( Stem("voided"), "void" );
	deepEqual( Stem("voiding"), "void" );
	deepEqual( Stem("voiture"), "voitur" );
	deepEqual( Stem("voke"), "voke" );
	deepEqual( Stem("volable"), "volabl" );
	deepEqual( Stem("volant"), "volant" );
	deepEqual( Stem("vole"), "vole" );
	deepEqual( Stem("volivorco"), "volivorco" );
	deepEqual( Stem("volley"), "vollei" );
	deepEqual( Stem("volquessen"), "volquessen" );
	deepEqual( Stem("volsce"), "volsc" );
	deepEqual( Stem("volsces"), "volsc" );
	deepEqual( Stem("volscian"), "volscian" );
	deepEqual( Stem("volscians"), "volscian" );
	deepEqual( Stem("volt"), "volt" );
	deepEqual( Stem("voltaire"), "voltair" );
	deepEqual( Stem("voltemand"), "voltemand" );
	deepEqual( Stem("volubility"), "volubl" );
	deepEqual( Stem("voluble"), "volubl" );
	deepEqual( Stem("volubly"), "volubli" );
	deepEqual( Stem("volume"), "volum" );
	deepEqual( Stem("volumes"), "volum" );
	deepEqual( Stem("voluminous"), "volumin" );
	deepEqual( Stem("volumnia"), "volumnia" );
	deepEqual( Stem("volumnius"), "volumniu" );
	deepEqual( Stem("voluntaries"), "voluntari" );
	deepEqual( Stem("voluntary"), "voluntari" );
	deepEqual( Stem("volunteered"), "volunt" );
	deepEqual( Stem("volunteering"), "volunt" );
	deepEqual( Stem("voluptuary"), "voluptuari" );
	deepEqual( Stem("voluptuously"), "voluptu" );
	deepEqual( Stem("voluptuousness"), "voluptu" );
	deepEqual( Stem("vomissement"), "vomiss" );
	deepEqual( Stem("vomit"), "vomit" );
	deepEqual( Stem("vomits"), "vomit" );
	deepEqual( Stem("von"), "von" );
	deepEqual( Stem("voo"), "voo" );
	deepEqual( Stem("vor"), "vor" );
	deepEqual( Stem("vore"), "vore" );
	deepEqual( Stem("vortnight"), "vortnight" );
	deepEqual( Stem("vortune"), "vortun" );
	deepEqual( Stem("vot"), "vot" );
	deepEqual( Stem("votaries"), "votari" );
	deepEqual( Stem("votarist"), "votarist" );
	deepEqual( Stem("votarists"), "votarist" );
	deepEqual( Stem("votary"), "votari" );
	deepEqual( Stem("vote"), "vote" );
	deepEqual( Stem("voted"), "vote" );
	deepEqual( Stem("votes"), "vote" );
	deepEqual( Stem("votre"), "votr" );
	deepEqual( Stem("vouch"), "vouch" );
	deepEqual( Stem("voucher"), "voucher" );
	deepEqual( Stem("vouchers"), "voucher" );
	deepEqual( Stem("vouches"), "vouch" );
	deepEqual( Stem("vouching"), "vouch" );
	deepEqual( Stem("vouchsaf"), "vouchsaf" );
	deepEqual( Stem("vouchsafe"), "vouchsaf" );
	deepEqual( Stem("vouchsafed"), "vouchsaf" );
	deepEqual( Stem("vouchsafes"), "vouchsaf" );
	deepEqual( Stem("vouchsafing"), "vouchsaf" );
	deepEqual( Stem("voudrais"), "voudrai" );
	deepEqual( Stem("voulez"), "voulez" );
	deepEqual( Stem("vour"), "vour" );
	deepEqual( Stem("vous"), "vou" );
	deepEqual( Stem("voutsafe"), "voutsaf" );
	deepEqual( Stem("vow"), "vow" );
	deepEqual( Stem("vowed"), "vow" );
	deepEqual( Stem("vowel"), "vowel" );
	deepEqual( Stem("vowels"), "vowel" );
	deepEqual( Stem("vowing"), "vow" );
	deepEqual( Stem("vows"), "vow" );
	deepEqual( Stem("vox"), "vox" );
	deepEqual( Stem("voyage"), "voyag" );
	deepEqual( Stem("voyagers"), "voyag" );
	deepEqual( Stem("voyages"), "voyag" );
	deepEqual( Stem("vraiment"), "vraiment" );
	deepEqual( Stem("vriend"), "vriend" );
	deepEqual( Stem("vu"), "vu" );
	deepEqual( Stem("vulcan"), "vulcan" );
	deepEqual( Stem("vulgar"), "vulgar" );
	deepEqual( Stem("vulgarest"), "vulgarest" );
	deepEqual( Stem("vulgarians"), "vulgarian" );
	deepEqual( Stem("vulgarised"), "vulgaris" );
	deepEqual( Stem("vulgarities"), "vulgar" );
	deepEqual( Stem("vulgarity"), "vulgar" );
	deepEqual( Stem("vulgarly"), "vulgarli" );
	deepEqual( Stem("vulgars"), "vulgar" );
	deepEqual( Stem("vulgo"), "vulgo" );
	deepEqual( Stem("vulnerable"), "vulner" );
	deepEqual( Stem("vulture"), "vultur" );
	deepEqual( Stem("vultures"), "vultur" );
	deepEqual( Stem("vun"), "vun" );
	deepEqual( Stem("vuneral"), "vuner" );
	deepEqual( Stem("vurther"), "vurther" );
	deepEqual( Stem("w"), "w" );
	deepEqual( Stem("wad"), "wad" );
	deepEqual( Stem("wadded"), "wad" );
	deepEqual( Stem("wadding"), "wad" );
	deepEqual( Stem("waddled"), "waddl" );
	deepEqual( Stem("wade"), "wade" );
	deepEqual( Stem("waded"), "wade" );
	deepEqual( Stem("wafer"), "wafer" );
	deepEqual( Stem("wafers"), "wafer" );
	deepEqual( Stem("waft"), "waft" );
	deepEqual( Stem("waftage"), "waftag" );
	deepEqual( Stem("wafting"), "waft" );
	deepEqual( Stem("wafts"), "waft" );
	deepEqual( Stem("wag"), "wag" );
	deepEqual( Stem("wage"), "wage" );
	deepEqual( Stem("wager"), "wager" );
	deepEqual( Stem("wagers"), "wager" );
	deepEqual( Stem("wages"), "wage" );
	deepEqual( Stem("wagg"), "wagg" );
	deepEqual( Stem("wagging"), "wag" );
	deepEqual( Stem("waggish"), "waggish" );
	deepEqual( Stem("waggling"), "waggl" );
	deepEqual( Stem("waggon"), "waggon" );
	deepEqual( Stem("waggoner"), "waggon" );
	deepEqual( Stem("waggoners"), "waggon" );
	deepEqual( Stem("wagon"), "wagon" );
	deepEqual( Stem("wagoner"), "wagon" );
	deepEqual( Stem("wagons"), "wagon" );
	deepEqual( Stem("wagram"), "wagram" );
	deepEqual( Stem("wags"), "wag" );
	deepEqual( Stem("wagstaff"), "wagstaff" );
	deepEqual( Stem("wagtail"), "wagtail" );
	deepEqual( Stem("wahlverwandtschaften"), "wahlverwandtschaften" );
	deepEqual( Stem("wail"), "wail" );
	deepEqual( Stem("wailful"), "wail" );
	deepEqual( Stem("wailing"), "wail" );
	deepEqual( Stem("wails"), "wail" );
	deepEqual( Stem("wain"), "wain" );
	deepEqual( Stem("wainropes"), "wainrop" );
	deepEqual( Stem("wainscot"), "wainscot" );
	deepEqual( Stem("waist"), "waist" );
	deepEqual( Stem("waistband"), "waistband" );
	deepEqual( Stem("waistcoat"), "waistcoat" );
	deepEqual( Stem("waistcoats"), "waistcoat" );
	deepEqual( Stem("waisted"), "waist" );
	deepEqual( Stem("waists"), "waist" );
	deepEqual( Stem("wait"), "wait" );
	deepEqual( Stem("waited"), "wait" );
	deepEqual( Stem("waiter"), "waiter" );
	deepEqual( Stem("waiters"), "waiter" );
	deepEqual( Stem("waiteth"), "waiteth" );
	deepEqual( Stem("waiting"), "wait" );
	deepEqual( Stem("waits"), "wait" );
	deepEqual( Stem("waives"), "waiv" );
	deepEqual( Stem("wak"), "wak" );
	deepEqual( Stem("wake"), "wake" );
	deepEqual( Stem("waked"), "wake" );
	deepEqual( Stem("wakefield"), "wakefield" );
	deepEqual( Stem("wakeful"), "wake" );
	deepEqual( Stem("wakefulness"), "wake" );
	deepEqual( Stem("waken"), "waken" );
	deepEqual( Stem("wakened"), "waken" );
	deepEqual( Stem("wakens"), "waken" );
	deepEqual( Stem("wakes"), "wake" );
	deepEqual( Stem("wakest"), "wakest" );
	deepEqual( Stem("waking"), "wake" );
	deepEqual( Stem("walcheren"), "walcheren" );
	deepEqual( Stem("wales"), "wale" );
	deepEqual( Stem("walk"), "walk" );
	deepEqual( Stem("walked"), "walk" );
	deepEqual( Stem("walker"), "walker" );
	deepEqual( Stem("walking"), "walk" );
	deepEqual( Stem("walks"), "walk" );
	deepEqual( Stem("wall"), "wall" );
	deepEqual( Stem("wallachia"), "wallachia" );
	deepEqual( Stem("walled"), "wall" );
	deepEqual( Stem("wallenstein"), "wallenstein" );
	deepEqual( Stem("wallet"), "wallet" );
	deepEqual( Stem("wallets"), "wallet" );
	deepEqual( Stem("wallon"), "wallon" );
	deepEqual( Stem("walloon"), "walloon" );
	deepEqual( Stem("wallow"), "wallow" );
	deepEqual( Stem("walls"), "wall" );
	deepEqual( Stem("walnut"), "walnut" );
	deepEqual( Stem("walpole"), "walpol" );
	deepEqual( Stem("walter"), "walter" );
	deepEqual( Stem("waltz"), "waltz" );
	deepEqual( Stem("waltzers"), "waltzer" );
	deepEqual( Stem("waltzes"), "waltz" );
	deepEqual( Stem("waltzing"), "waltz" );
	deepEqual( Stem("wan"), "wan" );
	deepEqual( Stem("wand"), "wand" );
	deepEqual( Stem("wander"), "wander" );
	deepEqual( Stem("wandered"), "wander" );
	deepEqual( Stem("wanderer"), "wander" );
	deepEqual( Stem("wanderers"), "wander" );
	deepEqual( Stem("wandering"), "wander" );
	deepEqual( Stem("wanders"), "wander" );
	deepEqual( Stem("wands"), "wand" );
	deepEqual( Stem("wandsworth"), "wandsworth" );
	deepEqual( Stem("wane"), "wane" );
	deepEqual( Stem("waned"), "wane" );
	deepEqual( Stem("wanes"), "wane" );
	deepEqual( Stem("waning"), "wane" );
	deepEqual( Stem("wanly"), "wanli" );
	deepEqual( Stem("wann"), "wann" );
	deepEqual( Stem("want"), "want" );
	deepEqual( Stem("wanted"), "want" );
	deepEqual( Stem("wanteth"), "wanteth" );
	deepEqual( Stem("wanting"), "want" );
	deepEqual( Stem("wanton"), "wanton" );
	deepEqual( Stem("wantonly"), "wantonli" );
	deepEqual( Stem("wantonness"), "wanton" );
	deepEqual( Stem("wantons"), "wanton" );
	deepEqual( Stem("wants"), "want" );
	deepEqual( Stem("wappen"), "wappen" );
	deepEqual( Stem("wapping"), "wap" );
	deepEqual( Stem("wapshot"), "wapshot" );
	deepEqual( Stem("wapshots"), "wapshot" );
	deepEqual( Stem("war"), "war" );
	deepEqual( Stem("warble"), "warbl" );
	deepEqual( Stem("warbled"), "warbl" );
	deepEqual( Stem("warblers"), "warbler" );
	deepEqual( Stem("warbling"), "warbl" );
	deepEqual( Stem("ward"), "ward" );
	deepEqual( Stem("warded"), "ward" );
	deepEqual( Stem("warden"), "warden" );
	deepEqual( Stem("warder"), "warder" );
	deepEqual( Stem("warders"), "warder" );
	deepEqual( Stem("wardrobe"), "wardrob" );
	deepEqual( Stem("wardrobes"), "wardrob" );
	deepEqual( Stem("wardrop"), "wardrop" );
	deepEqual( Stem("wards"), "ward" );
	deepEqual( Stem("ware"), "ware" );
	deepEqual( Stem("wares"), "ware" );
	deepEqual( Stem("warily"), "warili" );
	deepEqual( Stem("warkworth"), "warkworth" );
	deepEqual( Stem("warlike"), "warlik" );
	deepEqual( Stem("warm"), "warm" );
	deepEqual( Stem("warmed"), "warm" );
	deepEqual( Stem("warmer"), "warmer" );
	deepEqual( Stem("warmest"), "warmest" );
	deepEqual( Stem("warming"), "warm" );
	deepEqual( Stem("warmingpan"), "warmingpan" );
	deepEqual( Stem("warmly"), "warmli" );
	deepEqual( Stem("warms"), "warm" );
	deepEqual( Stem("warmth"), "warmth" );
	deepEqual( Stem("warn"), "warn" );
	deepEqual( Stem("warned"), "warn" );
	deepEqual( Stem("warning"), "warn" );
	deepEqual( Stem("warnings"), "warn" );
	deepEqual( Stem("warns"), "warn" );
	deepEqual( Stem("warp"), "warp" );
	deepEqual( Stem("warped"), "warp" );
	deepEqual( Stem("warr"), "warr" );
	deepEqual( Stem("warrant"), "warrant" );
	deepEqual( Stem("warranted"), "warrant" );
	deepEqual( Stem("warranteth"), "warranteth" );
	deepEqual( Stem("warrantise"), "warrantis" );
	deepEqual( Stem("warrantize"), "warrant" );
	deepEqual( Stem("warrants"), "warrant" );
	deepEqual( Stem("warranty"), "warranti" );
	deepEqual( Stem("warren"), "warren" );
	deepEqual( Stem("warrener"), "warren" );
	deepEqual( Stem("warring"), "war" );
	deepEqual( Stem("warrior"), "warrior" );
	deepEqual( Stem("warriors"), "warrior" );
	deepEqual( Stem("wars"), "war" );
	deepEqual( Stem("wart"), "wart" );
	deepEqual( Stem("warwick"), "warwick" );
	deepEqual( Stem("warwickshire"), "warwickshir" );
	deepEqual( Stem("wary"), "wari" );
	deepEqual( Stem("was"), "wa" );
	deepEqual( Stem("wash"), "wash" );
	deepEqual( Stem("washed"), "wash" );
	deepEqual( Stem("washer"), "washer" );
	deepEqual( Stem("washerwoman"), "washerwoman" );
	deepEqual( Stem("washes"), "wash" );
	deepEqual( Stem("washford"), "washford" );
	deepEqual( Stem("washing"), "wash" );
	deepEqual( Stem("washington"), "washington" );
	deepEqual( Stem("wasn"), "wasn" );
	deepEqual( Stem("wasp"), "wasp" );
	deepEqual( Stem("waspish"), "waspish" );
	deepEqual( Stem("wasps"), "wasp" );
	deepEqual( Stem("wassail"), "wassail" );
	deepEqual( Stem("wassails"), "wassail" );
	deepEqual( Stem("wast"), "wast" );
	deepEqual( Stem("waste"), "wast" );
	deepEqual( Stem("wasted"), "wast" );
	deepEqual( Stem("wasteful"), "wast" );
	deepEqual( Stem("wasters"), "waster" );
	deepEqual( Stem("wastes"), "wast" );
	deepEqual( Stem("wasting"), "wast" );
	deepEqual( Stem("wat"), "wat" );
	deepEqual( Stem("watch"), "watch" );
	deepEqual( Stem("watchdog"), "watchdog" );
	deepEqual( Stem("watched"), "watch" );
	deepEqual( Stem("watchers"), "watcher" );
	deepEqual( Stem("watches"), "watch" );
	deepEqual( Stem("watchful"), "watch" );
	deepEqual( Stem("watchfulness"), "watch" );
	deepEqual( Stem("watching"), "watch" );
	deepEqual( Stem("watchings"), "watch" );
	deepEqual( Stem("watchman"), "watchman" );
	deepEqual( Stem("watchmen"), "watchmen" );
	deepEqual( Stem("watchword"), "watchword" );
	deepEqual( Stem("water"), "water" );
	deepEqual( Stem("waterdrops"), "waterdrop" );
	deepEqual( Stem("watered"), "water" );
	deepEqual( Stem("waterfly"), "waterfli" );
	deepEqual( Stem("waterford"), "waterford" );
	deepEqual( Stem("watering"), "water" );
	deepEqual( Stem("waterish"), "waterish" );
	deepEqual( Stem("waterline"), "waterlin" );
	deepEqual( Stem("waterloo"), "waterloo" );
	deepEqual( Stem("waterpots"), "waterpot" );
	deepEqual( Stem("waterrugs"), "waterrug" );
	deepEqual( Stem("waters"), "water" );
	deepEqual( Stem("watertight"), "watertight" );
	deepEqual( Stem("waterton"), "waterton" );
	deepEqual( Stem("waterworks"), "waterwork" );
	deepEqual( Stem("watery"), "wateri" );
	deepEqual( Stem("wathers"), "wather" );
	deepEqual( Stem("wattier"), "wattier" );
	deepEqual( Stem("wav"), "wav" );
	deepEqual( Stem("wave"), "wave" );
	deepEqual( Stem("waved"), "wave" );
	deepEqual( Stem("waver"), "waver" );
	deepEqual( Stem("waverer"), "waver" );
	deepEqual( Stem("wavering"), "waver" );
	deepEqual( Stem("waves"), "wave" );
	deepEqual( Stem("waving"), "wave" );
	deepEqual( Stem("waw"), "waw" );
	deepEqual( Stem("wawl"), "wawl" );
	deepEqual( Stem("wawn"), "wawn" );
	deepEqual( Stem("wawnt"), "wawnt" );
	deepEqual( Stem("waws"), "waw" );
	deepEqual( Stem("wax"), "wax" );
	deepEqual( Stem("waxed"), "wax" );
	deepEqual( Stem("waxen"), "waxen" );
	deepEqual( Stem("waxes"), "wax" );
	deepEqual( Stem("waxing"), "wax" );
	deepEqual( Stem("waxy"), "waxi" );
	deepEqual( Stem("way"), "wai" );
	deepEqual( Stem("waylaid"), "waylaid" );
	deepEqual( Stem("waylay"), "waylai" );
	deepEqual( Stem("ways"), "wai" );
	deepEqual( Stem("wayte"), "wayt" );
	deepEqual( Stem("wayward"), "wayward" );
	deepEqual( Stem("waywarder"), "wayward" );
	deepEqual( Stem("waywardness"), "wayward" );
	deepEqual( Stem("we"), "we" );
	deepEqual( Stem("weak"), "weak" );
	deepEqual( Stem("weaken"), "weaken" );
	deepEqual( Stem("weakens"), "weaken" );
	deepEqual( Stem("weaker"), "weaker" );
	deepEqual( Stem("weakest"), "weakest" );
	deepEqual( Stem("weakling"), "weakl" );
	deepEqual( Stem("weakly"), "weakli" );
	deepEqual( Stem("weakness"), "weak" );
	deepEqual( Stem("weaknesses"), "weak" );
	deepEqual( Stem("weal"), "weal" );
	deepEqual( Stem("wealsmen"), "wealsmen" );
	deepEqual( Stem("wealth"), "wealth" );
	deepEqual( Stem("wealthiest"), "wealthiest" );
	deepEqual( Stem("wealthily"), "wealthili" );
	deepEqual( Stem("wealthy"), "wealthi" );
	deepEqual( Stem("wealtlly"), "wealtlli" );
	deepEqual( Stem("wean"), "wean" );
	deepEqual( Stem("weaned"), "wean" );
	deepEqual( Stem("weaning"), "wean" );
	deepEqual( Stem("weapon"), "weapon" );
	deepEqual( Stem("weapons"), "weapon" );
	deepEqual( Stem("wear"), "wear" );
	deepEqual( Stem("wearer"), "wearer" );
	deepEqual( Stem("wearers"), "wearer" );
	deepEqual( Stem("wearied"), "weari" );
	deepEqual( Stem("wearies"), "weari" );
	deepEqual( Stem("weariest"), "weariest" );
	deepEqual( Stem("wearily"), "wearili" );
	deepEqual( Stem("weariness"), "weari" );
	deepEqual( Stem("wearing"), "wear" );
	deepEqual( Stem("wearisome"), "wearisom" );
	deepEqual( Stem("wears"), "wear" );
	deepEqual( Stem("weary"), "weari" );
	deepEqual( Stem("weasel"), "weasel" );
	deepEqual( Stem("weather"), "weather" );
	deepEqual( Stem("weathercock"), "weathercock" );
	deepEqual( Stem("weathered"), "weather" );
	deepEqual( Stem("weathers"), "weather" );
	deepEqual( Stem("weav"), "weav" );
	deepEqual( Stem("weave"), "weav" );
	deepEqual( Stem("weaver"), "weaver" );
	deepEqual( Stem("weavers"), "weaver" );
	deepEqual( Stem("weaves"), "weav" );
	deepEqual( Stem("weaving"), "weav" );
	deepEqual( Stem("web"), "web" );
	deepEqual( Stem("weber"), "weber" );
	deepEqual( Stem("wed"), "wed" );
	deepEqual( Stem("wedded"), "wed" );
	deepEqual( Stem("wedding"), "wed" );
	deepEqual( Stem("weddings"), "wed" );
	deepEqual( Stem("wedg"), "wedg" );
	deepEqual( Stem("wedged"), "wedg" );
	deepEqual( Stem("wedges"), "wedg" );
	deepEqual( Stem("wedlock"), "wedlock" );
	deepEqual( Stem("wednesday"), "wednesdai" );
	deepEqual( Stem("wednesdays"), "wednesdai" );
	deepEqual( Stem("weed"), "weed" );
	deepEqual( Stem("weeded"), "weed" );
	deepEqual( Stem("weeder"), "weeder" );
	deepEqual( Stem("weeding"), "weed" );
	deepEqual( Stem("weeds"), "weed" );
	deepEqual( Stem("weedy"), "weedi" );
	deepEqual( Stem("week"), "week" );
	deepEqual( Stem("weekdays"), "weekdai" );
	deepEqual( Stem("weeke"), "week" );
	deepEqual( Stem("weekly"), "weekli" );
	deepEqual( Stem("weeks"), "week" );
	deepEqual( Stem("ween"), "ween" );
	deepEqual( Stem("weening"), "ween" );
	deepEqual( Stem("weep"), "weep" );
	deepEqual( Stem("weeper"), "weeper" );
	deepEqual( Stem("weeping"), "weep" );
	deepEqual( Stem("weepingly"), "weepingli" );
	deepEqual( Stem("weepings"), "weep" );
	deepEqual( Stem("weeps"), "weep" );
	deepEqual( Stem("weet"), "weet" );
	deepEqual( Stem("weigh"), "weigh" );
	deepEqual( Stem("weighed"), "weigh" );
	deepEqual( Stem("weighing"), "weigh" );
	deepEqual( Stem("weighs"), "weigh" );
	deepEqual( Stem("weight"), "weight" );
	deepEqual( Stem("weightier"), "weightier" );
	deepEqual( Stem("weightless"), "weightless" );
	deepEqual( Stem("weights"), "weight" );
	deepEqual( Stem("weighty"), "weighti" );
	deepEqual( Stem("weird"), "weird" );
	deepEqual( Stem("welcom"), "welcom" );
	deepEqual( Stem("welcome"), "welcom" );
	deepEqual( Stem("welcomed"), "welcom" );
	deepEqual( Stem("welcomer"), "welcom" );
	deepEqual( Stem("welcomes"), "welcom" );
	deepEqual( Stem("welcomest"), "welcomest" );
	deepEqual( Stem("welfare"), "welfar" );
	deepEqual( Stem("welkin"), "welkin" );
	deepEqual( Stem("well"), "well" );
	deepEqual( Stem("weller"), "weller" );
	deepEqual( Stem("wellesleys"), "welleslei" );
	deepEqual( Stem("wellington"), "wellington" );
	deepEqual( Stem("wellingtons"), "wellington" );
	deepEqual( Stem("wells"), "well" );
	deepEqual( Stem("welsh"), "welsh" );
	deepEqual( Stem("welshman"), "welshman" );
	deepEqual( Stem("welshmen"), "welshmen" );
	deepEqual( Stem("welshwomen"), "welshwomen" );
	deepEqual( Stem("wench"), "wench" );
	deepEqual( Stem("wenches"), "wench" );
	deepEqual( Stem("wenching"), "wench" );
	deepEqual( Stem("wend"), "wend" );
	deepEqual( Stem("wenham"), "wenham" );
	deepEqual( Stem("went"), "went" );
	deepEqual( Stem("wept"), "wept" );
	deepEqual( Stem("weraday"), "weradai" );
	deepEqual( Stem("were"), "were" );
	deepEqual( Stem("weren"), "weren" );
	deepEqual( Stem("wert"), "wert" );
	deepEqual( Stem("werther"), "werther" );
	deepEqual( Stem("wesleyan"), "wesleyan" );
	deepEqual( Stem("west"), "west" );
	deepEqual( Stem("western"), "western" );
	deepEqual( Stem("westminster"), "westminst" );
	deepEqual( Stem("westmoreland"), "westmoreland" );
	deepEqual( Stem("westward"), "westward" );
	deepEqual( Stem("westwards"), "westward" );
	deepEqual( Stem("wet"), "wet" );
	deepEqual( Stem("wether"), "wether" );
	deepEqual( Stem("wetting"), "wet" );
	deepEqual( Stem("wezand"), "wezand" );
	deepEqual( Stem("whale"), "whale" );
	deepEqual( Stem("whales"), "whale" );
	deepEqual( Stem("wharf"), "wharf" );
	deepEqual( Stem("wharfs"), "wharf" );
	deepEqual( Stem("what"), "what" );
	deepEqual( Stem("whatdyecallem"), "whatdyecallem" );
	deepEqual( Stem("whatdyecallum"), "whatdyecallum" );
	deepEqual( Stem("whate"), "whate" );
	deepEqual( Stem("whatever"), "whatev" );
	deepEqual( Stem("whatsoe"), "whatso" );
	deepEqual( Stem("whatsoever"), "whatsoev" );
	deepEqual( Stem("whatsome"), "whatsom" );
	deepEqual( Stem("whe"), "whe" );
	deepEqual( Stem("wheat"), "wheat" );
	deepEqual( Stem("wheaten"), "wheaten" );
	deepEqual( Stem("wheedle"), "wheedl" );
	deepEqual( Stem("wheedled"), "wheedl" );
	deepEqual( Stem("wheel"), "wheel" );
	deepEqual( Stem("wheeled"), "wheel" );
	deepEqual( Stem("wheeling"), "wheel" );
	deepEqual( Stem("wheels"), "wheel" );
	deepEqual( Stem("wheer"), "wheer" );
	deepEqual( Stem("wheeson"), "wheeson" );
	deepEqual( Stem("wheezed"), "wheez" );
	deepEqual( Stem("wheezing"), "wheez" );
	deepEqual( Stem("wheezy"), "wheezi" );
	deepEqual( Stem("whelk"), "whelk" );
	deepEqual( Stem("whelks"), "whelk" );
	deepEqual( Stem("whelm"), "whelm" );
	deepEqual( Stem("whelp"), "whelp" );
	deepEqual( Stem("whelped"), "whelp" );
	deepEqual( Stem("whelps"), "whelp" );
	deepEqual( Stem("when"), "when" );
	deepEqual( Stem("whenas"), "whena" );
	deepEqual( Stem("whence"), "whenc" );
	deepEqual( Stem("whencesoever"), "whencesoev" );
	deepEqual( Stem("whene"), "whene" );
	deepEqual( Stem("whenever"), "whenev" );
	deepEqual( Stem("whensoever"), "whensoev" );
	deepEqual( Stem("where"), "where" );
	deepEqual( Stem("whereabout"), "whereabout" );
	deepEqual( Stem("whereas"), "wherea" );
	deepEqual( Stem("whereat"), "whereat" );
	deepEqual( Stem("whereby"), "wherebi" );
	deepEqual( Stem("wherefore"), "wherefor" );
	deepEqual( Stem("wherein"), "wherein" );
	deepEqual( Stem("whereinto"), "whereinto" );
	deepEqual( Stem("whereof"), "whereof" );
	deepEqual( Stem("whereon"), "whereon" );
	deepEqual( Stem("whereout"), "whereout" );
	deepEqual( Stem("whereso"), "whereso" );
	deepEqual( Stem("wheresoe"), "whereso" );
	deepEqual( Stem("wheresoever"), "wheresoev" );
	deepEqual( Stem("wheresome"), "wheresom" );
	deepEqual( Stem("whereto"), "whereto" );
	deepEqual( Stem("whereuntil"), "whereuntil" );
	deepEqual( Stem("whereunto"), "whereunto" );
	deepEqual( Stem("whereupon"), "whereupon" );
	deepEqual( Stem("wherever"), "wherev" );
	deepEqual( Stem("wherewith"), "wherewith" );
	deepEqual( Stem("wherewithal"), "wherewith" );
	deepEqual( Stem("wherry"), "wherri" );
	deepEqual( Stem("whet"), "whet" );
	deepEqual( Stem("whether"), "whether" );
	deepEqual( Stem("whetstone"), "whetston" );
	deepEqual( Stem("whetted"), "whet" );
	deepEqual( Stem("whew"), "whew" );
	deepEqual( Stem("whey"), "whei" );
	deepEqual( Stem("which"), "which" );
	deepEqual( Stem("whiff"), "whiff" );
	deepEqual( Stem("whiffler"), "whiffler" );
	deepEqual( Stem("whig"), "whig" );
	deepEqual( Stem("while"), "while" );
	deepEqual( Stem("whiles"), "while" );
	deepEqual( Stem("whilst"), "whilst" );
	deepEqual( Stem("whimper"), "whimper" );
	deepEqual( Stem("whimpered"), "whimper" );
	deepEqual( Stem("whimpering"), "whimper" );
	deepEqual( Stem("whin"), "whin" );
	deepEqual( Stem("whine"), "whine" );
	deepEqual( Stem("whined"), "whine" );
	deepEqual( Stem("whinid"), "whinid" );
	deepEqual( Stem("whining"), "whine" );
	deepEqual( Stem("whip"), "whip" );
	deepEqual( Stem("whipp"), "whipp" );
	deepEqual( Stem("whipped"), "whip" );
	deepEqual( Stem("whipper"), "whipper" );
	deepEqual( Stem("whippers"), "whipper" );
	deepEqual( Stem("whipping"), "whip" );
	deepEqual( Stem("whippings"), "whip" );
	deepEqual( Stem("whips"), "whip" );
	deepEqual( Stem("whipster"), "whipster" );
	deepEqual( Stem("whipstock"), "whipstock" );
	deepEqual( Stem("whipt"), "whipt" );
	deepEqual( Stem("whirl"), "whirl" );
	deepEqual( Stem("whirled"), "whirl" );
	deepEqual( Stem("whirligig"), "whirligig" );
	deepEqual( Stem("whirling"), "whirl" );
	deepEqual( Stem("whirlpool"), "whirlpool" );
	deepEqual( Stem("whirls"), "whirl" );
	deepEqual( Stem("whirlwind"), "whirlwind" );
	deepEqual( Stem("whirlwinds"), "whirlwind" );
	deepEqual( Stem("whirring"), "whir" );
	deepEqual( Stem("whisk"), "whisk" );
	deepEqual( Stem("whisked"), "whisk" );
	deepEqual( Stem("whisker"), "whisker" );
	deepEqual( Stem("whiskered"), "whisker" );
	deepEqual( Stem("whiskers"), "whisker" );
	deepEqual( Stem("whisky"), "whiski" );
	deepEqual( Stem("whisp"), "whisp" );
	deepEqual( Stem("whisper"), "whisper" );
	deepEqual( Stem("whispered"), "whisper" );
	deepEqual( Stem("whispering"), "whisper" );
	deepEqual( Stem("whisperings"), "whisper" );
	deepEqual( Stem("whispers"), "whisper" );
	deepEqual( Stem("whist"), "whist" );
	deepEqual( Stem("whistle"), "whistl" );
	deepEqual( Stem("whistles"), "whistl" );
	deepEqual( Stem("whistling"), "whistl" );
	deepEqual( Stem("whit"), "whit" );
	deepEqual( Stem("white"), "white" );
	deepEqual( Stem("whitefriars"), "whitefriar" );
	deepEqual( Stem("whitehall"), "whitehal" );
	deepEqual( Stem("whitely"), "white" );
	deepEqual( Stem("whiteness"), "white" );
	deepEqual( Stem("whiter"), "whiter" );
	deepEqual( Stem("whites"), "white" );
	deepEqual( Stem("whitest"), "whitest" );
	deepEqual( Stem("whitewashed"), "whitewash" );
	deepEqual( Stem("whitey"), "whitei" );
	deepEqual( Stem("whither"), "whither" );
	deepEqual( Stem("whiting"), "white" );
	deepEqual( Stem("whitmore"), "whitmor" );
	deepEqual( Stem("whitsters"), "whitster" );
	deepEqual( Stem("whitsun"), "whitsun" );
	deepEqual( Stem("whittle"), "whittl" );
	deepEqual( Stem("whity"), "whiti" );
	deepEqual( Stem("whizzing"), "whizz" );
	deepEqual( Stem("who"), "who" );
	deepEqual( Stem("whoa"), "whoa" );
	deepEqual( Stem("whoe"), "whoe" );
	deepEqual( Stem("whoever"), "whoever" );
	deepEqual( Stem("whole"), "whole" );
	deepEqual( Stem("wholesom"), "wholesom" );
	deepEqual( Stem("wholesome"), "wholesom" );
	deepEqual( Stem("wholly"), "wholli" );
	deepEqual( Stem("whom"), "whom" );
	deepEqual( Stem("whoobub"), "whoobub" );
	deepEqual( Stem("whoop"), "whoop" );
	deepEqual( Stem("whooping"), "whoop" );
	deepEqual( Stem("whop"), "whop" );
	deepEqual( Stem("whopped"), "whop" );
	deepEqual( Stem("whor"), "whor" );
	deepEqual( Stem("whore"), "whore" );
	deepEqual( Stem("whoremaster"), "whoremast" );
	deepEqual( Stem("whoremasterly"), "whoremasterli" );
	deepEqual( Stem("whoremonger"), "whoremong" );
	deepEqual( Stem("whores"), "whore" );
	deepEqual( Stem("whoreson"), "whoreson" );
	deepEqual( Stem("whoresons"), "whoreson" );
	deepEqual( Stem("whoring"), "whore" );
	deepEqual( Stem("whorish"), "whorish" );
	deepEqual( Stem("whose"), "whose" );
	deepEqual( Stem("whoso"), "whoso" );
	deepEqual( Stem("whosoe"), "whoso" );
	deepEqual( Stem("whosoever"), "whosoev" );
	deepEqual( Stem("why"), "why" );
	deepEqual( Stem("whyou"), "whyou" );
	deepEqual( Stem("wi"), "wi" );
	deepEqual( Stem("wick"), "wick" );
	deepEqual( Stem("wicked"), "wick" );
	deepEqual( Stem("wickeder"), "wicked" );
	deepEqual( Stem("wickedest"), "wickedest" );
	deepEqual( Stem("wickedly"), "wickedli" );
	deepEqual( Stem("wickednes"), "wickedn" );
	deepEqual( Stem("wickedness"), "wicked" );
	deepEqual( Stem("wicker"), "wicker" );
	deepEqual( Stem("wicket"), "wicket" );
	deepEqual( Stem("wicky"), "wicki" );
	deepEqual( Stem("wid"), "wid" );
	deepEqual( Stem("wide"), "wide" );
	deepEqual( Stem("widely"), "wide" );
	deepEqual( Stem("widens"), "widen" );
	deepEqual( Stem("wider"), "wider" );
	deepEqual( Stem("widest"), "widest" );
	deepEqual( Stem("widg"), "widg" );
	deepEqual( Stem("widow"), "widow" );
	deepEqual( Stem("widowed"), "widow" );
	deepEqual( Stem("widower"), "widow" );
	deepEqual( Stem("widowhood"), "widowhood" );
	deepEqual( Stem("widows"), "widow" );
	deepEqual( Stem("wield"), "wield" );
	deepEqual( Stem("wielding"), "wield" );
	deepEqual( Stem("wiesbaden"), "wiesbaden" );
	deepEqual( Stem("wife"), "wife" );
	deepEqual( Stem("wig"), "wig" );
	deepEqual( Stem("wight"), "wight" );
	deepEqual( Stem("wights"), "wight" );
	deepEqual( Stem("wigs"), "wig" );
	deepEqual( Stem("wilberforce"), "wilberforc" );
	deepEqual( Stem("wild"), "wild" );
	deepEqual( Stem("wildbad"), "wildbad" );
	deepEqual( Stem("wildcats"), "wildcat" );
	deepEqual( Stem("wilder"), "wilder" );
	deepEqual( Stem("wilderness"), "wilder" );
	deepEqual( Stem("wildest"), "wildest" );
	deepEqual( Stem("wildfire"), "wildfir" );
	deepEqual( Stem("wildly"), "wildli" );
	deepEqual( Stem("wildness"), "wild" );
	deepEqual( Stem("wilds"), "wild" );
	deepEqual( Stem("wiles"), "wile" );
	deepEqual( Stem("wilful"), "wil" );
	deepEqual( Stem("wilfull"), "wilful" );
	deepEqual( Stem("wilfully"), "wilfulli" );
	deepEqual( Stem("wilfulnes"), "wilfuln" );
	deepEqual( Stem("wilfulness"), "wil" );
	deepEqual( Stem("will"), "will" );
	deepEqual( Stem("willed"), "will" );
	deepEqual( Stem("willers"), "willer" );
	deepEqual( Stem("willeth"), "willeth" );
	deepEqual( Stem("william"), "william" );
	deepEqual( Stem("williams"), "william" );
	deepEqual( Stem("willing"), "will" );
	deepEqual( Stem("willingly"), "willingli" );
	deepEqual( Stem("willingness"), "willing" );
	deepEqual( Stem("willis"), "willi" );
	deepEqual( Stem("willoughby"), "willoughbi" );
	deepEqual( Stem("willow"), "willow" );
	deepEqual( Stem("wills"), "will" );
	deepEqual( Stem("wilt"), "wilt" );
	deepEqual( Stem("wiltshire"), "wiltshir" );
	deepEqual( Stem("wily"), "wili" );
	deepEqual( Stem("wimbledon"), "wimbledon" );
	deepEqual( Stem("wimpled"), "wimpl" );
	deepEqual( Stem("win"), "win" );
	deepEqual( Stem("wince"), "winc" );
	deepEqual( Stem("winch"), "winch" );
	deepEqual( Stem("winchester"), "winchest" );
	deepEqual( Stem("wincot"), "wincot" );
	deepEqual( Stem("wind"), "wind" );
	deepEqual( Stem("winded"), "wind" );
	deepEqual( Stem("windgalls"), "windgal" );
	deepEqual( Stem("winding"), "wind" );
	deepEqual( Stem("windlass"), "windlass" );
	deepEqual( Stem("windlasses"), "windlass" );
	deepEqual( Stem("windmill"), "windmil" );
	deepEqual( Stem("window"), "window" );
	deepEqual( Stem("windows"), "window" );
	deepEqual( Stem("windpipe"), "windpip" );
	deepEqual( Stem("winds"), "wind" );
	deepEqual( Stem("windsor"), "windsor" );
	deepEqual( Stem("windy"), "windi" );
	deepEqual( Stem("wine"), "wine" );
	deepEqual( Stem("wines"), "wine" );
	deepEqual( Stem("wing"), "wing" );
	deepEqual( Stem("winged"), "wing" );
	deepEqual( Stem("wingfield"), "wingfield" );
	deepEqual( Stem("wingham"), "wingham" );
	deepEqual( Stem("wings"), "wing" );
	deepEqual( Stem("wink"), "wink" );
	deepEqual( Stem("winked"), "wink" );
	deepEqual( Stem("winking"), "wink" );
	deepEqual( Stem("winks"), "wink" );
	deepEqual( Stem("winkworth"), "winkworth" );
	deepEqual( Stem("winner"), "winner" );
	deepEqual( Stem("winners"), "winner" );
	deepEqual( Stem("winning"), "win" );
	deepEqual( Stem("winnings"), "win" );
	deepEqual( Stem("winnow"), "winnow" );
	deepEqual( Stem("winnowed"), "winnow" );
	deepEqual( Stem("winnows"), "winnow" );
	deepEqual( Stem("wins"), "win" );
	deepEqual( Stem("winter"), "winter" );
	deepEqual( Stem("winterly"), "winterli" );
	deepEqual( Stem("winters"), "winter" );
	deepEqual( Stem("wip"), "wip" );
	deepEqual( Stem("wipe"), "wipe" );
	deepEqual( Stem("wiped"), "wipe" );
	deepEqual( Stem("wipes"), "wipe" );
	deepEqual( Stem("wiping"), "wipe" );
	deepEqual( Stem("wire"), "wire" );
	deepEqual( Stem("wires"), "wire" );
	deepEqual( Stem("wirt"), "wirt" );
	deepEqual( Stem("wiry"), "wiri" );
	deepEqual( Stem("wisdom"), "wisdom" );
	deepEqual( Stem("wisdoms"), "wisdom" );
	deepEqual( Stem("wise"), "wise" );
	deepEqual( Stem("wiselier"), "wiseli" );
	deepEqual( Stem("wisely"), "wise" );
	deepEqual( Stem("wiser"), "wiser" );
	deepEqual( Stem("wisest"), "wisest" );
	deepEqual( Stem("wish"), "wish" );
	deepEqual( Stem("wished"), "wish" );
	deepEqual( Stem("wisher"), "wisher" );
	deepEqual( Stem("wishers"), "wisher" );
	deepEqual( Stem("wishes"), "wish" );
	deepEqual( Stem("wishest"), "wishest" );
	deepEqual( Stem("wisheth"), "wisheth" );
	deepEqual( Stem("wishful"), "wish" );
	deepEqual( Stem("wishing"), "wish" );
	deepEqual( Stem("wishtly"), "wishtli" );
	deepEqual( Stem("wisp"), "wisp" );
	deepEqual( Stem("wisps"), "wisp" );
	deepEqual( Stem("wist"), "wist" );
	deepEqual( Stem("wistful"), "wist" );
	deepEqual( Stem("wistfully"), "wistfulli" );
	deepEqual( Stem("wit"), "wit" );
	deepEqual( Stem("witb"), "witb" );
	deepEqual( Stem("witch"), "witch" );
	deepEqual( Stem("witchcraft"), "witchcraft" );
	deepEqual( Stem("witches"), "witch" );
	deepEqual( Stem("witching"), "witch" );
	deepEqual( Stem("with"), "with" );
	deepEqual( Stem("withal"), "withal" );
	deepEqual( Stem("withdraw"), "withdraw" );
	deepEqual( Stem("withdrawing"), "withdraw" );
	deepEqual( Stem("withdrawn"), "withdrawn" );
	deepEqual( Stem("withdrew"), "withdrew" );
	deepEqual( Stem("wither"), "wither" );
	deepEqual( Stem("withered"), "wither" );
	deepEqual( Stem("withering"), "wither" );
	deepEqual( Stem("withers"), "wither" );
	deepEqual( Stem("withheld"), "withheld" );
	deepEqual( Stem("withhold"), "withhold" );
	deepEqual( Stem("withholds"), "withhold" );
	deepEqual( Stem("within"), "within" );
	deepEqual( Stem("withold"), "withold" );
	deepEqual( Stem("without"), "without" );
	deepEqual( Stem("withstand"), "withstand" );
	deepEqual( Stem("withstanding"), "withstand" );
	deepEqual( Stem("withstood"), "withstood" );
	deepEqual( Stem("witless"), "witless" );
	deepEqual( Stem("witness"), "wit" );
	deepEqual( Stem("witnessed"), "wit" );
	deepEqual( Stem("witnesses"), "wit" );
	deepEqual( Stem("witnesseth"), "witnesseth" );
	deepEqual( Stem("witnessing"), "wit" );
	deepEqual( Stem("wits"), "wit" );
	deepEqual( Stem("witted"), "wit" );
	deepEqual( Stem("wittenberg"), "wittenberg" );
	deepEqual( Stem("wittgenstein"), "wittgenstein" );
	deepEqual( Stem("wittiest"), "wittiest" );
	deepEqual( Stem("wittily"), "wittili" );
	deepEqual( Stem("witting"), "wit" );
	deepEqual( Stem("wittingly"), "wittingli" );
	deepEqual( Stem("wittol"), "wittol" );
	deepEqual( Stem("wittolly"), "wittolli" );
	deepEqual( Stem("witty"), "witti" );
	deepEqual( Stem("wiv"), "wiv" );
	deepEqual( Stem("wive"), "wive" );
	deepEqual( Stem("wived"), "wive" );
	deepEqual( Stem("wives"), "wive" );
	deepEqual( Stem("wiving"), "wive" );
	deepEqual( Stem("wizard"), "wizard" );
	deepEqual( Stem("wizards"), "wizard" );
	deepEqual( Stem("wm"), "wm" );
	deepEqual( Stem("wo"), "wo" );
	deepEqual( Stem("woe"), "woe" );
	deepEqual( Stem("woeful"), "woeful" );
	deepEqual( Stem("woefull"), "woeful" );
	deepEqual( Stem("woefullest"), "woefullest" );
	deepEqual( Stem("woefully"), "woefulli" );
	deepEqual( Stem("woes"), "woe" );
	deepEqual( Stem("woful"), "woful" );
	deepEqual( Stem("woke"), "woke" );
	deepEqual( Stem("wolf"), "wolf" );
	deepEqual( Stem("wolfe"), "wolf" );
	deepEqual( Stem("wolfish"), "wolfish" );
	deepEqual( Stem("wollah"), "wollah" );
	deepEqual( Stem("wolsey"), "wolsei" );
	deepEqual( Stem("wolves"), "wolv" );
	deepEqual( Stem("wolvish"), "wolvish" );
	deepEqual( Stem("woman"), "woman" );
	deepEqual( Stem("womanhood"), "womanhood" );
	deepEqual( Stem("womanish"), "womanish" );
	deepEqual( Stem("womankind"), "womankind" );
	deepEqual( Stem("womanly"), "womanli" );
	deepEqual( Stem("womb"), "womb" );
	deepEqual( Stem("wombs"), "womb" );
	deepEqual( Stem("womby"), "wombi" );
	deepEqual( Stem("women"), "women" );
	deepEqual( Stem("won"), "won" );
	deepEqual( Stem("woncot"), "woncot" );
	deepEqual( Stem("wond"), "wond" );
	deepEqual( Stem("wonder"), "wonder" );
	deepEqual( Stem("wondered"), "wonder" );
	deepEqual( Stem("wonderful"), "wonder" );
	deepEqual( Stem("wonderfully"), "wonderfulli" );
	deepEqual( Stem("wondering"), "wonder" );
	deepEqual( Stem("wonders"), "wonder" );
	deepEqual( Stem("wondrous"), "wondrou" );
	deepEqual( Stem("wondrously"), "wondrous" );
	deepEqual( Stem("wont"), "wont" );
	deepEqual( Stem("wonted"), "wont" );
	deepEqual( Stem("woo"), "woo" );
	deepEqual( Stem("wood"), "wood" );
	deepEqual( Stem("woodbine"), "woodbin" );
	deepEqual( Stem("woodcock"), "woodcock" );
	deepEqual( Stem("woodcocks"), "woodcock" );
	deepEqual( Stem("wooden"), "wooden" );
	deepEqual( Stem("woodland"), "woodland" );
	deepEqual( Stem("woodman"), "woodman" );
	deepEqual( Stem("woodmonger"), "woodmong" );
	deepEqual( Stem("woods"), "wood" );
	deepEqual( Stem("woodstock"), "woodstock" );
	deepEqual( Stem("woodville"), "woodvil" );
	deepEqual( Stem("wooed"), "woo" );
	deepEqual( Stem("wooer"), "wooer" );
	deepEqual( Stem("wooers"), "wooer" );
	deepEqual( Stem("wooes"), "wooe" );
	deepEqual( Stem("woof"), "woof" );
	deepEqual( Stem("wooing"), "woo" );
	deepEqual( Stem("wooingly"), "wooingli" );
	deepEqual( Stem("wool"), "wool" );
	deepEqual( Stem("woollen"), "woollen" );
	deepEqual( Stem("woolly"), "woolli" );
	deepEqual( Stem("woolsack"), "woolsack" );
	deepEqual( Stem("woolsey"), "woolsei" );
	deepEqual( Stem("woolward"), "woolward" );
	deepEqual( Stem("woolwich"), "woolwich" );
	deepEqual( Stem("wooly"), "wooli" );
	deepEqual( Stem("woos"), "woo" );
	deepEqual( Stem("wor"), "wor" );
	deepEqual( Stem("worcester"), "worcest" );
	deepEqual( Stem("word"), "word" );
	deepEqual( Stem("words"), "word" );
	deepEqual( Stem("wore"), "wore" );
	deepEqual( Stem("worins"), "worin" );
	deepEqual( Stem("work"), "work" );
	deepEqual( Stem("workbags"), "workbag" );
	deepEqual( Stem("worked"), "work" );
	deepEqual( Stem("workers"), "worker" );
	deepEqual( Stem("workhouse"), "workhous" );
	deepEqual( Stem("working"), "work" );
	deepEqual( Stem("workings"), "work" );
	deepEqual( Stem("workman"), "workman" );
	deepEqual( Stem("workmanly"), "workmanli" );
	deepEqual( Stem("workmanship"), "workmanship" );
	deepEqual( Stem("workmen"), "workmen" );
	deepEqual( Stem("works"), "work" );
	deepEqual( Stem("worky"), "worki" );
	deepEqual( Stem("world"), "world" );
	deepEqual( Stem("worldliness"), "worldli" );
	deepEqual( Stem("worldling"), "worldl" );
	deepEqual( Stem("worldlings"), "worldl" );
	deepEqual( Stem("worldly"), "worldli" );
	deepEqual( Stem("worlds"), "world" );
	deepEqual( Stem("worm"), "worm" );
	deepEqual( Stem("worms"), "worm" );
	deepEqual( Stem("wormwood"), "wormwood" );
	deepEqual( Stem("wormy"), "wormi" );
	deepEqual( Stem("worn"), "worn" );
	deepEqual( Stem("worret"), "worret" );
	deepEqual( Stem("worried"), "worri" );
	deepEqual( Stem("worries"), "worri" );
	deepEqual( Stem("worry"), "worri" );
	deepEqual( Stem("worrying"), "worri" );
	deepEqual( Stem("worse"), "wors" );
	deepEqual( Stem("worser"), "worser" );
	deepEqual( Stem("worship"), "worship" );
	deepEqual( Stem("worshipful"), "worship" );
	deepEqual( Stem("worshipfully"), "worshipfulli" );
	deepEqual( Stem("worshipp"), "worshipp" );
	deepEqual( Stem("worshipped"), "worship" );
	deepEqual( Stem("worshipper"), "worshipp" );
	deepEqual( Stem("worshippers"), "worshipp" );
	deepEqual( Stem("worshippest"), "worshippest" );
	deepEqual( Stem("worshipping"), "worship" );
	deepEqual( Stem("worships"), "worship" );
	deepEqual( Stem("worst"), "worst" );
	deepEqual( Stem("worsted"), "worst" );
	deepEqual( Stem("wort"), "wort" );
	deepEqual( Stem("worth"), "worth" );
	deepEqual( Stem("worthied"), "worthi" );
	deepEqual( Stem("worthier"), "worthier" );
	deepEqual( Stem("worthies"), "worthi" );
	deepEqual( Stem("worthiest"), "worthiest" );
	deepEqual( Stem("worthily"), "worthili" );
	deepEqual( Stem("worthiness"), "worthi" );
	deepEqual( Stem("worthing"), "worth" );
	deepEqual( Stem("worthless"), "worthless" );
	deepEqual( Stem("worthlessness"), "worthless" );
	deepEqual( Stem("worths"), "worth" );
	deepEqual( Stem("worthy"), "worthi" );
	deepEqual( Stem("worts"), "wort" );
	deepEqual( Stem("wot"), "wot" );
	deepEqual( Stem("wots"), "wot" );
	deepEqual( Stem("wotting"), "wot" );
	deepEqual( Stem("wouid"), "wouid" );
	deepEqual( Stem("would"), "would" );
	deepEqual( Stem("wouldest"), "wouldest" );
	deepEqual( Stem("wouldn"), "wouldn" );
	deepEqual( Stem("wouldst"), "wouldst" );
	deepEqual( Stem("wound"), "wound" );
	deepEqual( Stem("wounded"), "wound" );
	deepEqual( Stem("wounding"), "wound" );
	deepEqual( Stem("woundings"), "wound" );
	deepEqual( Stem("woundless"), "woundless" );
	deepEqual( Stem("wounds"), "wound" );
	deepEqual( Stem("wouns"), "woun" );
	deepEqual( Stem("woven"), "woven" );
	deepEqual( Stem("wow"), "wow" );
	deepEqual( Stem("wrack"), "wrack" );
	deepEqual( Stem("wrackful"), "wrack" );
	deepEqual( Stem("wrangle"), "wrangl" );
	deepEqual( Stem("wrangler"), "wrangler" );
	deepEqual( Stem("wranglers"), "wrangler" );
	deepEqual( Stem("wrangling"), "wrangl" );
	deepEqual( Stem("wrap"), "wrap" );
	deepEqual( Stem("wrapp"), "wrapp" );
	deepEqual( Stem("wrapped"), "wrap" );
	deepEqual( Stem("wrappers"), "wrapper" );
	deepEqual( Stem("wraps"), "wrap" );
	deepEqual( Stem("wrapt"), "wrapt" );
	deepEqual( Stem("wrath"), "wrath" );
	deepEqual( Stem("wrathful"), "wrath" );
	deepEqual( Stem("wrathfully"), "wrathfulli" );
	deepEqual( Stem("wraths"), "wrath" );
	deepEqual( Stem("wreak"), "wreak" );
	deepEqual( Stem("wreakful"), "wreak" );
	deepEqual( Stem("wreaks"), "wreak" );
	deepEqual( Stem("wreath"), "wreath" );
	deepEqual( Stem("wreathed"), "wreath" );
	deepEqual( Stem("wreathen"), "wreathen" );
	deepEqual( Stem("wreaths"), "wreath" );
	deepEqual( Stem("wreck"), "wreck" );
	deepEqual( Stem("wrecked"), "wreck" );
	deepEqual( Stem("wrecks"), "wreck" );
	deepEqual( Stem("wren"), "wren" );
	deepEqual( Stem("wrench"), "wrench" );
	deepEqual( Stem("wrenched"), "wrench" );
	deepEqual( Stem("wrenching"), "wrench" );
	deepEqual( Stem("wrens"), "wren" );
	deepEqual( Stem("wrest"), "wrest" );
	deepEqual( Stem("wrested"), "wrest" );
	deepEqual( Stem("wresting"), "wrest" );
	deepEqual( Stem("wrestle"), "wrestl" );
	deepEqual( Stem("wrestled"), "wrestl" );
	deepEqual( Stem("wrestler"), "wrestler" );
	deepEqual( Stem("wrestlers"), "wrestler" );
	deepEqual( Stem("wrestling"), "wrestl" );
	deepEqual( Stem("wretch"), "wretch" );
	deepEqual( Stem("wretchcd"), "wretchcd" );
	deepEqual( Stem("wretched"), "wretch" );
	deepEqual( Stem("wretchedness"), "wretched" );
	deepEqual( Stem("wretches"), "wretch" );
	deepEqual( Stem("wring"), "wring" );
	deepEqual( Stem("wringer"), "wringer" );
	deepEqual( Stem("wringing"), "wring" );
	deepEqual( Stem("wrings"), "wring" );
	deepEqual( Stem("wrinkle"), "wrinkl" );
	deepEqual( Stem("wrinkled"), "wrinkl" );
	deepEqual( Stem("wrinkles"), "wrinkl" );
	deepEqual( Stem("wrist"), "wrist" );
	deepEqual( Stem("wrists"), "wrist" );
	deepEqual( Stem("writ"), "writ" );
	deepEqual( Stem("write"), "write" );
	deepEqual( Stem("writer"), "writer" );
	deepEqual( Stem("writers"), "writer" );
	deepEqual( Stem("writes"), "write" );
	deepEqual( Stem("writhed"), "writh" );
	deepEqual( Stem("writhes"), "writh" );
	deepEqual( Stem("writhing"), "writh" );
	deepEqual( Stem("writhled"), "writhl" );
	deepEqual( Stem("writing"), "write" );
	deepEqual( Stem("writings"), "write" );
	deepEqual( Stem("writs"), "writ" );
	deepEqual( Stem("written"), "written" );
	deepEqual( Stem("wrong"), "wrong" );
	deepEqual( Stem("wronged"), "wrong" );
	deepEqual( Stem("wronger"), "wronger" );
	deepEqual( Stem("wrongful"), "wrong" );
	deepEqual( Stem("wrongfully"), "wrongfulli" );
	deepEqual( Stem("wronging"), "wrong" );
	deepEqual( Stem("wrongly"), "wrongli" );
	deepEqual( Stem("wrongs"), "wrong" );
	deepEqual( Stem("wronk"), "wronk" );
	deepEqual( Stem("wrote"), "wrote" );
	deepEqual( Stem("wroth"), "wroth" );
	deepEqual( Stem("wrought"), "wrought" );
	deepEqual( Stem("wroughton"), "wroughton" );
	deepEqual( Stem("wrung"), "wrung" );
	deepEqual( Stem("wry"), "wry" );
	deepEqual( Stem("wrying"), "wry" );
	deepEqual( Stem("wt"), "wt" );
	deepEqual( Stem("wul"), "wul" );
	deepEqual( Stem("wuss"), "wuss" );
	deepEqual( Stem("wye"), "wye" );
	deepEqual( Stem("x"), "x" );
	deepEqual( Stem("xanthippe"), "xanthipp" );
	deepEqual( Stem("xi"), "xi" );
	deepEqual( Stem("xii"), "xii" );
	deepEqual( Stem("xiii"), "xiii" );
	deepEqual( Stem("xiv"), "xiv" );
	deepEqual( Stem("xix"), "xix" );
	deepEqual( Stem("xl"), "xl" );
	deepEqual( Stem("xli"), "xli" );
	deepEqual( Stem("xlii"), "xlii" );
	deepEqual( Stem("xliii"), "xliii" );
	deepEqual( Stem("xliv"), "xliv" );
	deepEqual( Stem("xlix"), "xlix" );
	deepEqual( Stem("xlv"), "xlv" );
	deepEqual( Stem("xlvi"), "xlvi" );
	deepEqual( Stem("xlvii"), "xlvii" );
	deepEqual( Stem("xlviii"), "xlviii" );
	deepEqual( Stem("xv"), "xv" );
	deepEqual( Stem("xvi"), "xvi" );
	deepEqual( Stem("xvii"), "xvii" );
	deepEqual( Stem("xviii"), "xviii" );
	deepEqual( Stem("xx"), "xx" );
	deepEqual( Stem("xxi"), "xxi" );
	deepEqual( Stem("xxii"), "xxii" );
	deepEqual( Stem("xxiii"), "xxiii" );
	deepEqual( Stem("xxiv"), "xxiv" );
	deepEqual( Stem("xxix"), "xxix" );
	deepEqual( Stem("xxv"), "xxv" );
	deepEqual( Stem("xxvi"), "xxvi" );
	deepEqual( Stem("xxvii"), "xxvii" );
	deepEqual( Stem("xxx"), "xxx" );
	deepEqual( Stem("xxxi"), "xxxi" );
	deepEqual( Stem("xxxii"), "xxxii" );
	deepEqual( Stem("xxxiii"), "xxxiii" );
	deepEqual( Stem("xxxiv"), "xxxiv" );
	deepEqual( Stem("xxxix"), "xxxix" );
	deepEqual( Stem("xxxv"), "xxxv" );
	deepEqual( Stem("xxxvi"), "xxxvi" );
	deepEqual( Stem("xxxvii"), "xxxvii" );
	deepEqual( Stem("xxxviii"), "xxxviii" );
	deepEqual( Stem("y"), "y" );
	deepEqual( Stem("yachting"), "yacht" );
	deepEqual( Stem("yakmaks"), "yakmak" );
	deepEqual( Stem("yankee"), "yanke" );
	deepEqual( Stem("yard"), "yard" );
	deepEqual( Stem("yards"), "yard" );
	deepEqual( Stem("yare"), "yare" );
	deepEqual( Stem("yarely"), "yare" );
	deepEqual( Stem("yarn"), "yarn" );
	deepEqual( Stem("yataghans"), "yataghan" );
	deepEqual( Stem("yaughan"), "yaughan" );
	deepEqual( Stem("yaw"), "yaw" );
	deepEqual( Stem("yawn"), "yawn" );
	deepEqual( Stem("yawned"), "yawn" );
	deepEqual( Stem("yawning"), "yawn" );
	deepEqual( Stem("yawns"), "yawn" );
	deepEqual( Stem("ycleped"), "yclepe" );
	deepEqual( Stem("ycliped"), "yclipe" );
	deepEqual( Stem("ye"), "ye" );
	deepEqual( Stem("yea"), "yea" );
	deepEqual( Stem("yead"), "yead" );
	deepEqual( Stem("year"), "year" );
	deepEqual( Stem("yearly"), "yearli" );
	deepEqual( Stem("yearn"), "yearn" );
	deepEqual( Stem("yearning"), "yearn" );
	deepEqual( Stem("yearns"), "yearn" );
	deepEqual( Stem("years"), "year" );
	deepEqual( Stem("yeas"), "yea" );
	deepEqual( Stem("yeast"), "yeast" );
	deepEqual( Stem("yedward"), "yedward" );
	deepEqual( Stem("yeer"), "yeer" );
	deepEqual( Stem("yees"), "yee" );
	deepEqual( Stem("yell"), "yell" );
	deepEqual( Stem("yelled"), "yell" );
	deepEqual( Stem("yelling"), "yell" );
	deepEqual( Stem("yellow"), "yellow" );
	deepEqual( Stem("yellowed"), "yellow" );
	deepEqual( Stem("yellowing"), "yellow" );
	deepEqual( Stem("yellowjack"), "yellowjack" );
	deepEqual( Stem("yellowness"), "yellow" );
	deepEqual( Stem("yellows"), "yellow" );
	deepEqual( Stem("yells"), "yell" );
	deepEqual( Stem("yelping"), "yelp" );
	deepEqual( Stem("yeoman"), "yeoman" );
	deepEqual( Stem("yeomanry"), "yeomanri" );
	deepEqual( Stem("yeomen"), "yeomen" );
	deepEqual( Stem("yerk"), "yerk" );
	deepEqual( Stem("yes"), "ye" );
	deepEqual( Stem("yesterday"), "yesterdai" );
	deepEqual( Stem("yesterdays"), "yesterdai" );
	deepEqual( Stem("yesternight"), "yesternight" );
	deepEqual( Stem("yesty"), "yesti" );
	deepEqual( Stem("yet"), "yet" );
	deepEqual( Stem("yew"), "yew" );
	deepEqual( Stem("yicld"), "yicld" );
	deepEqual( Stem("yield"), "yield" );
	deepEqual( Stem("yielded"), "yield" );
	deepEqual( Stem("yielder"), "yielder" );
	deepEqual( Stem("yielders"), "yielder" );
	deepEqual( Stem("yielding"), "yield" );
	deepEqual( Stem("yields"), "yield" );
	deepEqual( Stem("yok"), "yok" );
	deepEqual( Stem("yoke"), "yoke" );
	deepEqual( Stem("yoked"), "yoke" );
	deepEqual( Stem("yokefellow"), "yokefellow" );
	deepEqual( Stem("yokels"), "yokel" );
	deepEqual( Stem("yokes"), "yoke" );
	deepEqual( Stem("yoketh"), "yoketh" );
	deepEqual( Stem("yon"), "yon" );
	deepEqual( Stem("yond"), "yond" );
	deepEqual( Stem("yonder"), "yonder" );
	deepEqual( Stem("yongrey"), "yongrei" );
	deepEqual( Stem("yoops"), "yoop" );
	deepEqual( Stem("yore"), "yore" );
	deepEqual( Stem("yorick"), "yorick" );
	deepEqual( Stem("york"), "york" );
	deepEqual( Stem("yorkists"), "yorkist" );
	deepEqual( Stem("yorks"), "york" );
	deepEqual( Stem("yorkshire"), "yorkshir" );
	deepEqual( Stem("you"), "you" );
	deepEqual( Stem("young"), "young" );
	deepEqual( Stem("younger"), "younger" );
	deepEqual( Stem("youngest"), "youngest" );
	deepEqual( Stem("youngling"), "youngl" );
	deepEqual( Stem("younglings"), "youngl" );
	deepEqual( Stem("youngly"), "youngli" );
	deepEqual( Stem("youngster"), "youngster" );
	deepEqual( Stem("youngsters"), "youngster" );
	deepEqual( Stem("younker"), "younker" );
	deepEqual( Stem("younkers"), "younker" );
	deepEqual( Stem("your"), "your" );
	deepEqual( Stem("yours"), "your" );
	deepEqual( Stem("yourself"), "yourself" );
	deepEqual( Stem("yourselves"), "yourselv" );
	deepEqual( Stem("youth"), "youth" );
	deepEqual( Stem("youthful"), "youth" );
	deepEqual( Stem("youths"), "youth" );
	deepEqual( Stem("youtli"), "youtli" );
	deepEqual( Stem("zanies"), "zani" );
	deepEqual( Stem("zany"), "zani" );
	deepEqual( Stem("zatusfy"), "zatusfi" );
	deepEqual( Stem("zeal"), "zeal" );
	deepEqual( Stem("zealous"), "zealou" );
	deepEqual( Stem("zeals"), "zeal" );
	deepEqual( Stem("zed"), "zed" );
	deepEqual( Stem("zee"), "zee" );
	deepEqual( Stem("zenanas"), "zenana" );
	deepEqual( Stem("zenelophon"), "zenelophon" );
	deepEqual( Stem("zenith"), "zenith" );
	deepEqual( Stem("zephyrs"), "zephyr" );
	deepEqual( Stem("zermons"), "zermon" );
	deepEqual( Stem("zero"), "zero" );
	deepEqual( Stem("zest"), "zest" );
	deepEqual( Stem("zettlement"), "zettlement" );
	deepEqual( Stem("zir"), "zir" );
	deepEqual( Stem("zo"), "zo" );
	deepEqual( Stem("zodiac"), "zodiac" );
	deepEqual( Stem("zodiacs"), "zodiac" );
	deepEqual( Stem("zoggy"), "zoggi" );
	deepEqual( Stem("zone"), "zone" );
	deepEqual( Stem("zounds"), "zound" );
	deepEqual( Stem("zuleikah"), "zuleikah" );
	deepEqual( Stem("zwagger"), "zwagger" );
	deepEqual( Stem("zwieback"), "zwieback" );
});
