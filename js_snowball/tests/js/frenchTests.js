QUnit.test('french', function(){
	var Stem = snowballFactory.newStemmer('french').stem;
	deepEqual( Stem("a"), "a" );
	deepEqual( Stem("à"), "à" );
	deepEqual( Stem("abailard"), "abailard" );
	deepEqual( Stem("abaissait"), "abaiss" );
	deepEqual( Stem("abaissant"), "abaiss" );
	deepEqual( Stem("abaisse"), "abaiss" );
	deepEqual( Stem("abaissé"), "abaiss" );
	deepEqual( Stem("abaissement"), "abaissement" );
	deepEqual( Stem("abaissent"), "abaissent" );
	deepEqual( Stem("abaisser"), "abaiss" );
	deepEqual( Stem("abaisserai"), "abaiss" );
	deepEqual( Stem("abandon"), "abandon" );
	deepEqual( Stem("abandonna"), "abandon" );
	deepEqual( Stem("abandonnait"), "abandon" );
	deepEqual( Stem("abandonnant"), "abandon" );
	deepEqual( Stem("abandonne"), "abandon" );
	deepEqual( Stem("abandonné"), "abandon" );
	deepEqual( Stem("abandonnée"), "abandon" );
	deepEqual( Stem("abandonner"), "abandon" );
	deepEqual( Stem("abandonnera"), "abandon" );
	deepEqual( Stem("abandonnerait"), "abandon" );
	deepEqual( Stem("abandonnés"), "abandon" );
	deepEqual( Stem("abandonnez"), "abandon" );
	deepEqual( Stem("abasourdi"), "abasourd" );
	deepEqual( Stem("abat"), "abat" );
	deepEqual( Stem("abattant"), "abatt" );
	deepEqual( Stem("abattement"), "abatt" );
	deepEqual( Stem("abattit"), "abatt" );
	deepEqual( Stem("abattre"), "abattr" );
	deepEqual( Stem("abbaye"), "abbay" );
	deepEqual( Stem("abbé"), "abbé" );
	deepEqual( Stem("abbés"), "abbé" );
	deepEqual( Stem("abbesse"), "abbess" );
	deepEqual( Stem("abeille"), "abeil" );
	deepEqual( Stem("abhorrait"), "abhorr" );
	deepEqual( Stem("abhorre"), "abhorr" );
	deepEqual( Stem("abhorré"), "abhorr" );
	deepEqual( Stem("abîmait"), "abîm" );
	deepEqual( Stem("abîme"), "abîm" );
	deepEqual( Stem("abîmé"), "abîm" );
	deepEqual( Stem("abîmée"), "abîm" );
	deepEqual( Stem("abject"), "abject" );
	deepEqual( Stem("abjurant"), "abjur" );
	deepEqual( Stem("ablutions"), "ablut" );
	deepEqual( Stem("abnégation"), "abneg" );
	deepEqual( Stem("aboiements"), "aboi" );
	deepEqual( Stem("aboiera"), "aboi" );
	deepEqual( Stem("abolir"), "abol" );
	deepEqual( Stem("abominable"), "abomin" );
	deepEqual( Stem("abominablement"), "abomin" );
	deepEqual( Stem("abominables"), "abomin" );
	deepEqual( Stem("abomination"), "abomin" );
	deepEqual( Stem("abondaient"), "abond" );
	deepEqual( Stem("abondamment"), "abond" );
	deepEqual( Stem("abondance"), "abond" );
	deepEqual( Stem("abondant"), "abond" );
	deepEqual( Stem("abondante"), "abond" );
	deepEqual( Stem("abonde"), "abond" );
	deepEqual( Stem("abonné"), "abon" );
	deepEqual( Stem("abonnement"), "abon" );
	deepEqual( Stem("abord"), "abord" );
	deepEqual( Stem("aborda"), "abord" );
	deepEqual( Stem("abordaient"), "abord" );
	deepEqual( Stem("abordait"), "abord" );
	deepEqual( Stem("abordant"), "abord" );
	deepEqual( Stem("abordée"), "abord" );
	deepEqual( Stem("aborder"), "abord" );
	deepEqual( Stem("abordèrent"), "abord" );
	deepEqual( Stem("abordés"), "abord" );
	deepEqual( Stem("abords"), "abord" );
	deepEqual( Stem("aboutit"), "about" );
	deepEqual( Stem("aboyaient"), "aboi" );
	deepEqual( Stem("aboyèrent"), "aboi" );
	deepEqual( Stem("abraham"), "abraham" );
	deepEqual( Stem("abrège"), "abreg" );
	deepEqual( Stem("abrégé"), "abreg" );
	deepEqual( Stem("abrégea"), "abreg" );
	deepEqual( Stem("abrégeaient"), "abreg" );
	deepEqual( Stem("abrégeait"), "abreg" );
	deepEqual( Stem("abrégeant"), "abreg" );
	deepEqual( Stem("abréger"), "abreg" );
	deepEqual( Stem("abrégera"), "abreg" );
	deepEqual( Stem("abrégerait"), "abreg" );
	deepEqual( Stem("abrégés"), "abreg" );
	deepEqual( Stem("abreuvoir"), "abreuvoir" );
	deepEqual( Stem("abréviations"), "abrévi" );
	deepEqual( Stem("abri"), "abri" );
	deepEqual( Stem("abritât"), "abrit" );
	deepEqual( Stem("abrité"), "abrit" );
	deepEqual( Stem("abritée"), "abrit" );
	deepEqual( Stem("abritent"), "abritent" );
	deepEqual( Stem("abrités"), "abrit" );
	deepEqual( Stem("abrutis"), "abrut" );
	deepEqual( Stem("abrutissant"), "abrut" );
	deepEqual( Stem("abrutissement"), "abrut" );
	deepEqual( Stem("abruzze"), "abruzz" );
	deepEqual( Stem("absence"), "absenc" );
	deepEqual( Stem("absences"), "absenc" );
	deepEqual( Stem("absent"), "absent" );
	deepEqual( Stem("absentait"), "absent" );
	deepEqual( Stem("absente"), "absent" );
	deepEqual( Stem("absents"), "absent" );
	deepEqual( Stem("absolu"), "absolu" );
	deepEqual( Stem("absolue"), "absolu" );
	deepEqual( Stem("absolument"), "absolu" );
	deepEqual( Stem("absolus"), "absolus" );
	deepEqual( Stem("absolutisme"), "absolut" );
	deepEqual( Stem("absorba"), "absorb" );
	deepEqual( Stem("absorbaient"), "absorb" );
	deepEqual( Stem("absorbait"), "absorb" );
	deepEqual( Stem("absorbé"), "absorb" );
	deepEqual( Stem("absorbée"), "absorb" );
	deepEqual( Stem("absorbés"), "absorb" );
	deepEqual( Stem("absoudre"), "absoudr" );
	deepEqual( Stem("abstenait"), "absten" );
	deepEqual( Stem("abstenez"), "absten" );
	deepEqual( Stem("abstiendrai"), "abstiendr" );
	deepEqual( Stem("abstraction"), "abstract" );
	deepEqual( Stem("abstrait"), "abstrait" );
	deepEqual( Stem("absurde"), "absurd" );
	deepEqual( Stem("absurdes"), "absurd" );
	deepEqual( Stem("absurdité"), "absurd" );
	deepEqual( Stem("absurdités"), "absurd" );
	deepEqual( Stem("abus"), "abus" );
	deepEqual( Stem("abusa"), "abus" );
	deepEqual( Stem("abusait"), "abus" );
	deepEqual( Stem("abusant"), "abus" );
	deepEqual( Stem("abuse"), "abus" );
	deepEqual( Stem("abusé"), "abus" );
	deepEqual( Stem("abuser"), "abus" );
	deepEqual( Stem("abusez"), "abus" );
	deepEqual( Stem("abusif"), "abus" );
	deepEqual( Stem("acabit"), "acab" );
	deepEqual( Stem("acacia"), "acaci" );
	deepEqual( Stem("acacias"), "acaci" );
	deepEqual( Stem("académicien"), "académicien" );
	deepEqual( Stem("académie"), "academ" );
	deepEqual( Stem("académies"), "academ" );
	deepEqual( Stem("académique"), "academ" );
	deepEqual( Stem("acajou"), "acajou" );
	deepEqual( Stem("accabla"), "accabl" );
	deepEqual( Stem("accablaient"), "accabl" );
	deepEqual( Stem("accablait"), "accabl" );
	deepEqual( Stem("accablant"), "accabl" );
	deepEqual( Stem("accablante"), "accabl" );
	deepEqual( Stem("accable"), "accabl" );
	deepEqual( Stem("accablé"), "accabl" );
	deepEqual( Stem("accablée"), "accabl" );
	deepEqual( Stem("accablement"), "accabl" );
	deepEqual( Stem("accabler"), "accabl" );
	deepEqual( Stem("accableraient"), "accabl" );
	deepEqual( Stem("accablèrent"), "accabl" );
	deepEqual( Stem("accalmie"), "accalm" );
	deepEqual( Stem("accaparé"), "accapar" );
	deepEqual( Stem("accède"), "acced" );
	deepEqual( Stem("accéder"), "acced" );
	deepEqual( Stem("accéléra"), "accéler" );
	deepEqual( Stem("accélération"), "accéler" );
	deepEqual( Stem("accent"), "accent" );
	deepEqual( Stem("accents"), "accent" );
	deepEqual( Stem("accentua"), "accentu" );
	deepEqual( Stem("accepta"), "accept" );
	deepEqual( Stem("acceptables"), "accept" );
	deepEqual( Stem("acceptais"), "accept" );
	deepEqual( Stem("acceptait"), "accept" );
	deepEqual( Stem("accepte"), "accept" );
	deepEqual( Stem("accepté"), "accept" );
	deepEqual( Stem("acceptée"), "accept" );
	deepEqual( Stem("acceptent"), "acceptent" );
	deepEqual( Stem("accepter"), "accept" );
	deepEqual( Stem("acceptera"), "accept" );
	deepEqual( Stem("accepterai"), "accept" );
	deepEqual( Stem("accepterait"), "accept" );
	deepEqual( Stem("accepteriez"), "accept" );
	deepEqual( Stem("acceptes"), "accept" );
	deepEqual( Stem("acceptez"), "accept" );
	deepEqual( Stem("acception"), "accept" );
	deepEqual( Stem("acceptons"), "accepton" );
	deepEqual( Stem("accès"), "acces" );
	deepEqual( Stem("accident"), "accident" );
	deepEqual( Stem("accidenté"), "accident" );
	deepEqual( Stem("accidents"), "accident" );
	deepEqual( Stem("acclamation"), "acclam" );
	deepEqual( Stem("acclamations"), "acclam" );
	deepEqual( Stem("accommodé"), "accommod" );
	deepEqual( Stem("accompagnaient"), "accompagn" );
	deepEqual( Stem("accompagnait"), "accompagn" );
	deepEqual( Stem("accompagnant"), "accompagn" );
	deepEqual( Stem("accompagne"), "accompagn" );
	deepEqual( Stem("accompagné"), "accompagn" );
	deepEqual( Stem("accompagnée"), "accompagn" );
	deepEqual( Stem("accompagnement"), "accompagn" );
	deepEqual( Stem("accompagnent"), "accompagnent" );
	deepEqual( Stem("accompagner"), "accompagn" );
	deepEqual( Stem("accompagnèrent"), "accompagn" );
	deepEqual( Stem("accompagniez"), "accompagn" );
	deepEqual( Stem("accompli"), "accompl" );
	deepEqual( Stem("accomplie"), "accompl" );
	deepEqual( Stem("accomplies"), "accompl" );
	deepEqual( Stem("accomplir"), "accompl" );
	deepEqual( Stem("accomplirait"), "accompl" );
	deepEqual( Stem("accomplis"), "accompl" );
	deepEqual( Stem("accomplissaient"), "accompl" );
	deepEqual( Stem("accomplissais"), "accompl" );
	deepEqual( Stem("accomplissait"), "accompl" );
	deepEqual( Stem("accomplissant"), "accompl" );
	deepEqual( Stem("accomplissement"), "accompl" );
	deepEqual( Stem("accomplissent"), "accompl" );
	deepEqual( Stem("accomplit"), "accompl" );
	deepEqual( Stem("accord"), "accord" );
	deepEqual( Stem("accorda"), "accord" );
	deepEqual( Stem("accordait"), "accord" );
	deepEqual( Stem("accordant"), "accord" );
	deepEqual( Stem("accorde"), "accord" );
	deepEqual( Stem("accordé"), "accord" );
	deepEqual( Stem("accordée"), "accord" );
	deepEqual( Stem("accordées"), "accord" );
	deepEqual( Stem("accorder"), "accord" );
	deepEqual( Stem("accorderai"), "accord" );
	deepEqual( Stem("accorderait"), "accord" );
	deepEqual( Stem("accordèrent"), "accord" );
	deepEqual( Stem("accorderez"), "accord" );
	deepEqual( Stem("accordez"), "accord" );
	deepEqual( Stem("accosta"), "accost" );
	deepEqual( Stem("accostait"), "accost" );
	deepEqual( Stem("accosté"), "accost" );
	deepEqual( Stem("accoster"), "accost" );
	deepEqual( Stem("accoté"), "accot" );
	deepEqual( Stem("accouchement"), "accouch" );
	deepEqual( Stem("accouraient"), "accour" );
	deepEqual( Stem("accourait"), "accour" );
	deepEqual( Stem("accourant"), "accour" );
	deepEqual( Stem("accourez"), "accour" );
	deepEqual( Stem("accourir"), "accour" );
	deepEqual( Stem("accourue"), "accouru" );
	deepEqual( Stem("accoururent"), "accoururent" );
	deepEqual( Stem("accourus"), "accourus" );
	deepEqual( Stem("accourut"), "accourut" );
	deepEqual( Stem("accoutrement"), "accoutr" );
	deepEqual( Stem("accoutumât"), "accoutum" );
	deepEqual( Stem("accoutume"), "accoutum" );
	deepEqual( Stem("accoutumé"), "accoutum" );
	deepEqual( Stem("accoutumée"), "accoutum" );
	deepEqual( Stem("accoutumées"), "accoutum" );
	deepEqual( Stem("accoutumer"), "accoutum" );
	deepEqual( Stem("accoutumes"), "accoutum" );
	deepEqual( Stem("accoutumés"), "accoutum" );
	deepEqual( Stem("accrédité"), "accred" );
	deepEqual( Stem("accréditer"), "accrédit" );
	deepEqual( Stem("accrochaient"), "accroch" );
	deepEqual( Stem("accrochant"), "accroch" );
	deepEqual( Stem("accroché"), "accroch" );
	deepEqual( Stem("accrocher"), "accroch" );
	deepEqual( Stem("accroissaient"), "accroiss" );
	deepEqual( Stem("accroissait"), "accroiss" );
	deepEqual( Stem("accroissant"), "accroiss" );
	deepEqual( Stem("accroître"), "accroîtr" );
	deepEqual( Stem("accru"), "accru" );
	deepEqual( Stem("accrue"), "accru" );
	deepEqual( Stem("accrut"), "accrut" );
	deepEqual( Stem("accueil"), "accueil" );
	deepEqual( Stem("accueillait"), "accueil" );
	deepEqual( Stem("accueillent"), "accueillent" );
	deepEqual( Stem("accueilli"), "accueil" );
	deepEqual( Stem("accueillie"), "accueil" );
	deepEqual( Stem("accueillies"), "accueil" );
	deepEqual( Stem("accueillir"), "accueil" );
	deepEqual( Stem("accueillis"), "accueil" );
	deepEqual( Stem("accumulation"), "accumul" );
	deepEqual( Stem("accumulé"), "accumul" );
	deepEqual( Stem("accumulées"), "accumul" );
	deepEqual( Stem("accumulent"), "accumulent" );
	deepEqual( Stem("accumuler"), "accumul" );
	deepEqual( Stem("accumulés"), "accumul" );
	deepEqual( Stem("accusa"), "accus" );
	deepEqual( Stem("accusait"), "accus" );
	deepEqual( Stem("accusant"), "accus" );
	deepEqual( Stem("accusateur"), "accus" );
	deepEqual( Stem("accusation"), "accus" );
	deepEqual( Stem("accusations"), "accus" );
	deepEqual( Stem("accuse"), "accus" );
	deepEqual( Stem("accusé"), "accus" );
	deepEqual( Stem("accuser"), "accus" );
	deepEqual( Stem("accuseront"), "accus" );
	deepEqual( Stem("accusés"), "accus" );
	deepEqual( Stem("accusez"), "accus" );
	deepEqual( Stem("achalandage"), "achalandag" );
	deepEqual( Stem("acharnant"), "acharn" );
	deepEqual( Stem("acharnés"), "acharn" );
	deepEqual( Stem("achat"), "achat" );
	deepEqual( Stem("achemina"), "achemin" );
	deepEqual( Stem("acheminait"), "achemin" );
	deepEqual( Stem("acheminé"), "achemin" );
	deepEqual( Stem("acheta"), "achet" );
	deepEqual( Stem("achetait"), "achet" );
	deepEqual( Stem("achetant"), "achet" );
	deepEqual( Stem("achete"), "achet" );
	deepEqual( Stem("achète"), "achet" );
	deepEqual( Stem("acheté"), "achet" );
	deepEqual( Stem("achetées"), "achet" );
	deepEqual( Stem("acheter"), "achet" );
	deepEqual( Stem("achèterons"), "achet" );
	deepEqual( Stem("achètes"), "achet" );
	deepEqual( Stem("achetés"), "achet" );
	deepEqual( Stem("achetez"), "achet" );
	deepEqual( Stem("acheva"), "achev" );
	deepEqual( Stem("achevaient"), "achev" );
	deepEqual( Stem("achevait"), "achev" );
	deepEqual( Stem("achevant"), "achev" );
	deepEqual( Stem("achève"), "achev" );
	deepEqual( Stem("achevé"), "achev" );
	deepEqual( Stem("achevée"), "achev" );
	deepEqual( Stem("achèvement"), "achev" );
	deepEqual( Stem("achever"), "achev" );
	deepEqual( Stem("achèvera"), "achev" );
	deepEqual( Stem("achevez"), "achev" );
	deepEqual( Stem("achille"), "achill" );
	deepEqual( Stem("acier"), "aci" );
	deepEqual( Stem("acolyte"), "acolyt" );
	deepEqual( Stem("acoustiques"), "acoust" );
	deepEqual( Stem("acquérait"), "acquer" );
	deepEqual( Stem("acquerrait"), "acquerr" );
	deepEqual( Stem("acquiert"), "acquiert" );
	deepEqual( Stem("acquis"), "acquis" );
	deepEqual( Stem("acquise"), "acquis" );
	deepEqual( Stem("acquises"), "acquis" );
	deepEqual( Stem("acquisition"), "acquisit" );
	deepEqual( Stem("acquisitions"), "acquisit" );
	deepEqual( Stem("acquit"), "acquit" );
	deepEqual( Stem("acquitta"), "acquitt" );
	deepEqual( Stem("acquittait"), "acquitt" );
	deepEqual( Stem("acquitte"), "acquitt" );
	deepEqual( Stem("acquitté"), "acquitt" );
	deepEqual( Stem("acquittement"), "acquitt" );
	deepEqual( Stem("acquitter"), "acquitt" );
	deepEqual( Stem("acquittés"), "acquitt" );
	deepEqual( Stem("acrobates"), "acrobat" );
	deepEqual( Stem("acrobatique"), "acrobat" );
	deepEqual( Stem("acte"), "acte" );
	deepEqual( Stem("actes"), "acte" );
	deepEqual( Stem("acteur"), "acteur" );
	deepEqual( Stem("acteurs"), "acteur" );
	deepEqual( Stem("actif"), "actif" );
	deepEqual( Stem("action"), "action" );
	deepEqual( Stem("actionnaires"), "actionnair" );
	deepEqual( Stem("actions"), "action" );
	deepEqual( Stem("active"), "activ" );
	deepEqual( Stem("activement"), "activ" );
	deepEqual( Stem("actives"), "activ" );
	deepEqual( Stem("activité"), "activ" );
	deepEqual( Stem("actrice"), "actric" );
	deepEqual( Stem("actrices"), "actric" );
	deepEqual( Stem("actuel"), "actuel" );
	deepEqual( Stem("actuelle"), "actuel" );
	deepEqual( Stem("actuellement"), "actuel" );
	deepEqual( Stem("actuelles"), "actuel" );
	deepEqual( Stem("actuels"), "actuel" );
	deepEqual( Stem("ad"), "ad" );
	deepEqual( Stem("adaptant"), "adapt" );
	deepEqual( Stem("additions"), "addit" );
	deepEqual( Stem("address"), "address" );
	deepEqual( Stem("adeline"), "adelin" );
	deepEqual( Stem("aden"), "aden" );
	deepEqual( Stem("adieu"), "adieu" );
	deepEqual( Stem("adieux"), "adieux" );
	deepEqual( Stem("adjoint"), "adjoint" );
	deepEqual( Stem("adjonction"), "adjonct" );
	deepEqual( Stem("adjudant"), "adjud" );
	deepEqual( Stem("adjudication"), "adjud" );
	deepEqual( Stem("adjudications"), "adjud" );
	deepEqual( Stem("adjugeait"), "adjug" );
	deepEqual( Stem("adjuger"), "adjug" );
	deepEqual( Stem("admet"), "admet" );
	deepEqual( Stem("admettait"), "admet" );
	deepEqual( Stem("admettant"), "admet" );
	deepEqual( Stem("admettent"), "admettent" );
	deepEqual( Stem("admettons"), "admetton" );
	deepEqual( Stem("admettre"), "admettr" );
	deepEqual( Stem("administra"), "administr" );
	deepEqual( Stem("administrateur"), "administr" );
	deepEqual( Stem("administrateurs"), "administr" );
	deepEqual( Stem("administration"), "administr" );
	deepEqual( Stem("administre"), "administr" );
	deepEqual( Stem("administré"), "administr" );
	deepEqual( Stem("administrer"), "administr" );
	deepEqual( Stem("administrés"), "administr" );
	deepEqual( Stem("administrez"), "administr" );
	deepEqual( Stem("admira"), "admir" );
	deepEqual( Stem("admirable"), "admir" );
	deepEqual( Stem("admirablement"), "admir" );
	deepEqual( Stem("admirables"), "admir" );
	deepEqual( Stem("admirais"), "admir" );
	deepEqual( Stem("admirait"), "admir" );
	deepEqual( Stem("admirant"), "admir" );
	deepEqual( Stem("admirateurs"), "admir" );
	deepEqual( Stem("admiration"), "admir" );
	deepEqual( Stem("admire"), "admir" );
	deepEqual( Stem("admiré"), "admir" );
	deepEqual( Stem("admirée"), "admir" );
	deepEqual( Stem("admirées"), "admir" );
	deepEqual( Stem("admirent"), "admirent" );
	deepEqual( Stem("admirer"), "admir" );
	deepEqual( Stem("admirera"), "admir" );
	deepEqual( Stem("admirèrent"), "admir" );
	deepEqual( Stem("admirés"), "admir" );
	deepEqual( Stem("admiriez"), "admir" );
	deepEqual( Stem("admis"), "admis" );
	deepEqual( Stem("admise"), "admis" );
	deepEqual( Stem("admises"), "admis" );
	deepEqual( Stem("admission"), "admiss" );
	deepEqual( Stem("admît"), "admît" );
	deepEqual( Stem("admonestant"), "admonest" );
	deepEqual( Stem("adolescent"), "adolescent" );
	deepEqual( Stem("adolphe"), "adolph" );
	deepEqual( Stem("adonné"), "adon" );
	deepEqual( Stem("adonnée"), "adon" );
	deepEqual( Stem("adonnent"), "adonnent" );
	deepEqual( Stem("adopta"), "adopt" );
	deepEqual( Stem("adopte"), "adopt" );
	deepEqual( Stem("adopté"), "adopt" );
	deepEqual( Stem("adoptée"), "adopt" );
	deepEqual( Stem("adopter"), "adopt" );
	deepEqual( Stem("adoptif"), "adopt" );
	deepEqual( Stem("adorable"), "ador" );
	deepEqual( Stem("adoraient"), "ador" );
	deepEqual( Stem("adorais"), "ador" );
	deepEqual( Stem("adorait"), "ador" );
	deepEqual( Stem("adorant"), "ador" );
	deepEqual( Stem("adorateur"), "ador" );
	deepEqual( Stem("adorateurs"), "ador" );
	deepEqual( Stem("adoration"), "ador" );
	deepEqual( Stem("adorations"), "ador" );
	deepEqual( Stem("adoratrices"), "ador" );
	deepEqual( Stem("adore"), "ador" );
	deepEqual( Stem("adoré"), "ador" );
	deepEqual( Stem("adorée"), "ador" );
	deepEqual( Stem("adorent"), "adorent" );
	deepEqual( Stem("adorer"), "ador" );
	deepEqual( Stem("adorera"), "ador" );
	deepEqual( Stem("adouci"), "adouc" );
	deepEqual( Stem("adoucir"), "adouc" );
	deepEqual( Stem("adoucissait"), "adouc" );
	deepEqual( Stem("adoucissent"), "adouc" );
	deepEqual( Stem("adressa"), "adress" );
	deepEqual( Stem("adressaient"), "adress" );
	deepEqual( Stem("adressait"), "adress" );
	deepEqual( Stem("adressant"), "adress" );
	deepEqual( Stem("adressât"), "adress" );
	deepEqual( Stem("adresse"), "adress" );
	deepEqual( Stem("adressé"), "adress" );
	deepEqual( Stem("adressée"), "adress" );
	deepEqual( Stem("adressées"), "adress" );
	deepEqual( Stem("adressent"), "adressent" );
	deepEqual( Stem("adresser"), "adress" );
	deepEqual( Stem("adresserai"), "adress" );
	deepEqual( Stem("adressèrent"), "adress" );
	deepEqual( Stem("adresses"), "adress" );
	deepEqual( Stem("adressés"), "adress" );
	deepEqual( Stem("adressez"), "adress" );
	deepEqual( Stem("adrien"), "adrien" );
	deepEqual( Stem("adroit"), "adroit" );
	deepEqual( Stem("adroite"), "adroit" );
	deepEqual( Stem("adroitement"), "adroit" );
	deepEqual( Stem("adroites"), "adroit" );
	deepEqual( Stem("adroits"), "adroit" );
	deepEqual( Stem("adsum"), "adsum" );
	deepEqual( Stem("adultère"), "adulter" );
	deepEqual( Stem("adverbe"), "adverb" );
	deepEqual( Stem("adversaire"), "adversair" );
	deepEqual( Stem("adversaires"), "adversair" );
	deepEqual( Stem("adverse"), "advers" );
	deepEqual( Stem("adversité"), "advers" );
	deepEqual( Stem("advint"), "advint" );
	deepEqual( Stem("aérienne"), "aérien" );
	deepEqual( Stem("affabilité"), "affabl" );
	deepEqual( Stem("affadissantes"), "affad" );
	deepEqual( Stem("affaibli"), "affaibl" );
	deepEqual( Stem("affaiblie"), "affaibl" );
	deepEqual( Stem("affaiblissait"), "affaibl" );
	deepEqual( Stem("affaiblissement"), "affaibl" );
	deepEqual( Stem("affaiblit"), "affaibl" );
	deepEqual( Stem("affaire"), "affair" );
	deepEqual( Stem("affairé"), "affair" );
	deepEqual( Stem("affaires"), "affair" );
	deepEqual( Stem("affairés"), "affair" );
	deepEqual( Stem("affaissé"), "affaiss" );
	deepEqual( Stem("affamé"), "affam" );
	deepEqual( Stem("affamer"), "affam" );
	deepEqual( Stem("affamés"), "affam" );
	deepEqual( Stem("affecta"), "affect" );
	deepEqual( Stem("affectaient"), "affect" );
	deepEqual( Stem("affectait"), "affect" );
	deepEqual( Stem("affectant"), "affect" );
	deepEqual( Stem("affectation"), "affect" );
	deepEqual( Stem("affectations"), "affect" );
	deepEqual( Stem("affecte"), "affect" );
	deepEqual( Stem("affecté"), "affect" );
	deepEqual( Stem("affectée"), "affect" );
	deepEqual( Stem("affectées"), "affect" );
	deepEqual( Stem("affecter"), "affect" );
	deepEqual( Stem("affectés"), "affect" );
	deepEqual( Stem("affection"), "affect" );
	deepEqual( Stem("affectionnait"), "affection" );
	deepEqual( Stem("affectionné"), "affection" );
	deepEqual( Stem("affections"), "affect" );
	deepEqual( Stem("affectueux"), "affectu" );
	deepEqual( Stem("affermissant"), "afferm" );
	deepEqual( Stem("affermit"), "afferm" );
	deepEqual( Stem("affichait"), "affich" );
	deepEqual( Stem("affiche"), "affich" );
	deepEqual( Stem("affiché"), "affich" );
	deepEqual( Stem("affichée"), "affich" );
	deepEqual( Stem("affichent"), "affichent" );
	deepEqual( Stem("afficher"), "affich" );
	deepEqual( Stem("affiches"), "affich" );
	deepEqual( Stem("afficheur"), "afficheur" );
	deepEqual( Stem("affidé"), "affid" );
	deepEqual( Stem("affidés"), "affid" );
	deepEqual( Stem("affilée"), "affil" );
	deepEqual( Stem("affilié"), "affili" );
	deepEqual( Stem("affilier"), "affili" );
	deepEqual( Stem("affinités"), "affin" );
	deepEqual( Stem("affirmait"), "affirm" );
	deepEqual( Stem("affirmant"), "affirm" );
	deepEqual( Stem("affirmatif"), "affirm" );
	deepEqual( Stem("affirme"), "affirm" );
	deepEqual( Stem("affirmé"), "affirm" );
	deepEqual( Stem("affirment"), "affirment" );
	deepEqual( Stem("affirmer"), "affirm" );
	deepEqual( Stem("affirmerai"), "affirm" );
	deepEqual( Stem("afflictive"), "afflict" );
	deepEqual( Stem("afflige"), "afflig" );
	deepEqual( Stem("affligé"), "afflig" );
	deepEqual( Stem("affligea"), "afflig" );
	deepEqual( Stem("affligée"), "afflig" );
	deepEqual( Stem("affliger"), "afflig" );
	deepEqual( Stem("affligez"), "afflig" );
	deepEqual( Stem("afflua"), "afflu" );
	deepEqual( Stem("affluaient"), "afflu" );
	deepEqual( Stem("affluence"), "affluenc" );
	deepEqual( Stem("affluent"), "affluent" );
	deepEqual( Stem("affluents"), "affluent" );
	deepEqual( Stem("affluer"), "afflu" );
	deepEqual( Stem("affolait"), "affol" );
	deepEqual( Stem("affolées"), "affol" );
	deepEqual( Stem("affranchi"), "affranch" );
	deepEqual( Stem("affrète"), "affret" );
	deepEqual( Stem("affreuse"), "affreux" );
	deepEqual( Stem("affreuses"), "affreux" );
	deepEqual( Stem("affreux"), "affreux" );
	deepEqual( Stem("affriolait"), "affriol" );
	deepEqual( Stem("affront"), "affront" );
	deepEqual( Stem("affrontais"), "affront" );
	deepEqual( Stem("affronter"), "affront" );
	deepEqual( Stem("affublé"), "affubl" );
	deepEqual( Stem("afin"), "afin" );
	deepEqual( Stem("afrique"), "afriqu" );
	deepEqual( Stem("agde"), "agde" );
	deepEqual( Stem("age"), "age" );
	deepEqual( Stem("âge"), "âge" );
	deepEqual( Stem("âgé"), "âgé" );
	deepEqual( Stem("âgée"), "âgé" );
	deepEqual( Stem("âgées"), "âgé" );
	deepEqual( Stem("agen"), "agen" );
	deepEqual( Stem("agencées"), "agenc" );
	deepEqual( Stem("agenouilla"), "agenouill" );
	deepEqual( Stem("agenouillant"), "agenouill" );
	deepEqual( Stem("agenouillé"), "agenouill" );
	deepEqual( Stem("agenouillée"), "agenouill" );
	deepEqual( Stem("agent"), "agent" );
	deepEqual( Stem("agents"), "agent" );
	deepEqual( Stem("âges"), "âge" );
	deepEqual( Stem("âgés"), "âgé" );
	deepEqual( Stem("agglomération"), "agglomer" );
	deepEqual( Stem("aggrottato"), "aggrottato" );
	deepEqual( Stem("agi"), "agi" );
	deepEqual( Stem("agile"), "agil" );
	deepEqual( Stem("agilité"), "agil" );
	deepEqual( Stem("agir"), "agir" );
	deepEqual( Stem("agirait"), "agir" );
	deepEqual( Stem("agis"), "agis" );
	deepEqual( Stem("agissaient"), "agiss" );
	deepEqual( Stem("agissait"), "agiss" );
	deepEqual( Stem("agissant"), "agiss" );
	deepEqual( Stem("agissante"), "agiss" );
	deepEqual( Stem("agisse"), "agiss" );
	deepEqual( Stem("agissent"), "agissent" );
	deepEqual( Stem("agissez"), "agiss" );
	deepEqual( Stem("agissons"), "agisson" );
	deepEqual( Stem("agit"), "agit" );
	deepEqual( Stem("agita"), "agit" );
	deepEqual( Stem("agitaient"), "agit" );
	deepEqual( Stem("agitait"), "agit" );
	deepEqual( Stem("agitant"), "agit" );
	deepEqual( Stem("agitation"), "agit" );
	deepEqual( Stem("agite"), "agit" );
	deepEqual( Stem("agité"), "agit" );
	deepEqual( Stem("agitée"), "agit" );
	deepEqual( Stem("agitées"), "agit" );
	deepEqual( Stem("agitent"), "agitent" );
	deepEqual( Stem("agiter"), "agit" );
	deepEqual( Stem("agitèrent"), "agit" );
	deepEqual( Stem("agités"), "agit" );
	deepEqual( Stem("agneaux"), "agneau" );
	deepEqual( Stem("agonie"), "agon" );
	deepEqual( Stem("agra"), "agra" );
	deepEqual( Stem("agrandis"), "agrand" );
	deepEqual( Stem("agréable"), "agréabl" );
	deepEqual( Stem("agréablement"), "agréabl" );
	deepEqual( Stem("agréables"), "agréabl" );
	deepEqual( Stem("agréer"), "agré" );
	deepEqual( Stem("agréez"), "agré" );
	deepEqual( Stem("agrément"), "agrément" );
	deepEqual( Stem("agrémenté"), "agrément" );
	deepEqual( Stem("agrémentée"), "agrément" );
	deepEqual( Stem("agrémentées"), "agrément" );
	deepEqual( Stem("agrémentés"), "agrément" );
	deepEqual( Stem("agréments"), "agrément" );
	deepEqual( Stem("agrès"), "agres" );
	deepEqual( Stem("agriculteur"), "agriculteur" );
	deepEqual( Stem("agriculture"), "agricultur" );
	deepEqual( Stem("ah"), "ah" );
	deepEqual( Stem("ahméhnagara"), "ahméhnagar" );
	deepEqual( Stem("ahuri"), "ahur" );
	deepEqual( Stem("ai"), "ai" );
	deepEqual( Stem("aida"), "aid" );
	deepEqual( Stem("aidait"), "aid" );
	deepEqual( Stem("aidant"), "aid" );
	deepEqual( Stem("aide"), "aid" );
	deepEqual( Stem("aidé"), "aid" );
	deepEqual( Stem("aidée"), "aid" );
	deepEqual( Stem("aidées"), "aid" );
	deepEqual( Stem("aider"), "aid" );
	deepEqual( Stem("aidera"), "aid" );
	deepEqual( Stem("aiderai"), "aid" );
	deepEqual( Stem("aidèrent"), "aid" );
	deepEqual( Stem("aiderez"), "aid" );
	deepEqual( Stem("aides"), "aid" );
	deepEqual( Stem("aidés"), "aid" );
	deepEqual( Stem("aidez"), "aid" );
	deepEqual( Stem("aidiez"), "aid" );
	deepEqual( Stem("aie"), "aie" );
	deepEqual( Stem("aient"), "aient" );
	deepEqual( Stem("aies"), "aie" );
	deepEqual( Stem("aïeul"), "aïeul" );
	deepEqual( Stem("aïeux"), "aïeux" );
	deepEqual( Stem("aigle"), "aigl" );
	deepEqual( Stem("aigre"), "aigr" );
	deepEqual( Stem("aigrelets"), "aigrelet" );
	deepEqual( Stem("aigrelettes"), "aigrelet" );
	deepEqual( Stem("aigrement"), "aigr" );
	deepEqual( Stem("aigres"), "aigr" );
	deepEqual( Stem("aigreur"), "aigreur" );
	deepEqual( Stem("aigrirait"), "aigr" );
	deepEqual( Stem("aiguille"), "aiguill" );
	deepEqual( Stem("aiguilles"), "aiguill" );
	deepEqual( Stem("aiguillon"), "aiguillon" );
	deepEqual( Stem("aiguiser"), "aiguis" );
	deepEqual( Stem("aigus"), "aigus" );
	deepEqual( Stem("aile"), "ail" );
	deepEqual( Stem("ailes"), "ail" );
	deepEqual( Stem("aille"), "aill" );
	deepEqual( Stem("ailles"), "aill" );
	deepEqual( Stem("ailleurs"), "ailleur" );
	deepEqual( Stem("aima"), "aim" );
	deepEqual( Stem("aimable"), "aimabl" );
	deepEqual( Stem("aimables"), "aimabl" );
	deepEqual( Stem("aimaient"), "aim" );
	deepEqual( Stem("aimais"), "aim" );
	deepEqual( Stem("aimait"), "aim" );
	deepEqual( Stem("aimant"), "aim" );
	deepEqual( Stem("aimât"), "aim" );
	deepEqual( Stem("aime"), "aim" );
	deepEqual( Stem("aimé"), "aim" );
	deepEqual( Stem("aimée"), "aim" );
	deepEqual( Stem("aimées"), "aim" );
	deepEqual( Stem("aiment"), "aiment" );
	deepEqual( Stem("aimer"), "aim" );
	deepEqual( Stem("aimera"), "aim" );
	deepEqual( Stem("aimerai"), "aim" );
	deepEqual( Stem("aimerais"), "aim" );
	deepEqual( Stem("aimerait"), "aim" );
	deepEqual( Stem("aimerez"), "aim" );
	deepEqual( Stem("aimes"), "aim" );
	deepEqual( Stem("aimés"), "aim" );
	deepEqual( Stem("aimez"), "aim" );
	deepEqual( Stem("aimiez"), "aim" );
	deepEqual( Stem("aimons"), "aimon" );
	deepEqual( Stem("aine"), "ain" );
	deepEqual( Stem("aîné"), "aîn" );
	deepEqual( Stem("aînée"), "aîn" );
	deepEqual( Stem("aînés"), "aîn" );
	deepEqual( Stem("ainsi"), "ains" );
	deepEqual( Stem("air"), "air" );
	deepEqual( Stem("aire"), "air" );
	deepEqual( Stem("airs"), "air" );
	deepEqual( Stem("aisance"), "aisanc" );
	deepEqual( Stem("aise"), "ais" );
	deepEqual( Stem("aisé"), "ais" );
	deepEqual( Stem("aisées"), "ais" );
	deepEqual( Stem("aisément"), "ais" );
	deepEqual( Stem("aisés"), "ais" );
	deepEqual( Stem("ait"), "ait" );
	deepEqual( Stem("ajournement"), "ajourn" );
	deepEqual( Stem("ajouta"), "ajout" );
	deepEqual( Stem("ajoutaient"), "ajout" );
	deepEqual( Stem("ajoutait"), "ajout" );
	deepEqual( Stem("ajoutant"), "ajout" );
	deepEqual( Stem("ajoute"), "ajout" );
	deepEqual( Stem("ajouté"), "ajout" );
	deepEqual( Stem("ajoutées"), "ajout" );
	deepEqual( Stem("ajouter"), "ajout" );
	deepEqual( Stem("ajoutera"), "ajout" );
	deepEqual( Stem("ajouterai"), "ajout" );
	deepEqual( Stem("ajouteraient"), "ajout" );
	deepEqual( Stem("ajouterais"), "ajout" );
	deepEqual( Stem("ajoutèrent"), "ajout" );
	deepEqual( Stem("ajouterez"), "ajout" );
	deepEqual( Stem("ajouterons"), "ajout" );
	deepEqual( Stem("ajuster"), "ajust" );
	deepEqual( Stem("al"), "al" );
	deepEqual( Stem("alabama"), "alabam" );
	deepEqual( Stem("alacoque"), "alacoqu" );
	deepEqual( Stem("alari"), "alar" );
	deepEqual( Stem("alarma"), "alarm" );
	deepEqual( Stem("alarmaient"), "alarm" );
	deepEqual( Stem("alarmants"), "alarm" );
	deepEqual( Stem("alarme"), "alarm" );
	deepEqual( Stem("alarmé"), "alarm" );
	deepEqual( Stem("alarmée"), "alarm" );
	deepEqual( Stem("alarmer"), "alarm" );
	deepEqual( Stem("alarmes"), "alarm" );
	deepEqual( Stem("alas"), "alas" );
	deepEqual( Stem("albâtre"), "albâtr" );
	deepEqual( Stem("albermale"), "albermal" );
	deepEqual( Stem("album"), "album" );
	deepEqual( Stem("alcooliques"), "alcool" );
	deepEqual( Stem("ale"), "ale" );
	deepEqual( Stem("aléa"), "alé" );
	deepEqual( Stem("alembert"), "alembert" );
	deepEqual( Stem("alençon"), "alençon" );
	deepEqual( Stem("alerte"), "alert" );
	deepEqual( Stem("alertes"), "alert" );
	deepEqual( Stem("alexandre"), "alexandr" );
	deepEqual( Stem("alfieri"), "alfier" );
	deepEqual( Stem("alfred"), "alfred" );
	deepEqual( Stem("alger"), "alger" );
	deepEqual( Stem("alhambra"), "alhambr" );
	deepEqual( Stem("aliène"), "alien" );
	deepEqual( Stem("alignées"), "align" );
	deepEqual( Stem("aligre"), "aligr" );
	deepEqual( Stem("aliment"), "aliment" );
	deepEqual( Stem("alimentation"), "aliment" );
	deepEqual( Stem("alimenter"), "aliment" );
	deepEqual( Stem("alimento"), "alimento" );
	deepEqual( Stem("alinéa"), "aliné" );
	deepEqual( Stem("all"), "all" );
	deepEqual( Stem("alla"), "alla" );
	deepEqual( Stem("allahabad"), "allahabad" );
	deepEqual( Stem("allaient"), "allaient" );
	deepEqual( Stem("allais"), "allais" );
	deepEqual( Stem("allait"), "allait" );
	deepEqual( Stem("allant"), "allant" );
	deepEqual( Stem("allât"), "allât" );
	deepEqual( Stem("allé"), "allé" );
	deepEqual( Stem("alléché"), "allech" );
	deepEqual( Stem("alléchés"), "allech" );
	deepEqual( Stem("allée"), "allé" );
	deepEqual( Stem("allées"), "allé" );
	deepEqual( Stem("allégation"), "alleg" );
	deepEqual( Stem("allege"), "alleg" );
	deepEqual( Stem("allège"), "alleg" );
	deepEqual( Stem("allègre"), "allegr" );
	deepEqual( Stem("allégresse"), "allégress" );
	deepEqual( Stem("alléguant"), "allégu" );
	deepEqual( Stem("allemagne"), "allemagn" );
	deepEqual( Stem("allemand"), "allemand" );
	deepEqual( Stem("allemande"), "allemand" );
	deepEqual( Stem("allemands"), "allemand" );
	deepEqual( Stem("aller"), "aller" );
	deepEqual( Stem("allèrent"), "allèrent" );
	deepEqual( Stem("allés"), "allé" );
	deepEqual( Stem("allez"), "allez" );
	deepEqual( Stem("alliage"), "alliag" );
	deepEqual( Stem("alliance"), "allianc" );
	deepEqual( Stem("allié"), "alli" );
	deepEqual( Stem("alliés"), "alli" );
	deepEqual( Stem("alliez"), "alli" );
	deepEqual( Stem("alligators"), "alligator" );
	deepEqual( Stem("allions"), "allion" );
	deepEqual( Stem("allocution"), "allocu" );
	deepEqual( Stem("allonge"), "allong" );
	deepEqual( Stem("allongeait"), "allong" );
	deepEqual( Stem("allongée"), "allong" );
	deepEqual( Stem("allons"), "allon" );
	deepEqual( Stem("alloue"), "allou" );
	deepEqual( Stem("alluma"), "allum" );
	deepEqual( Stem("allumait"), "allum" );
	deepEqual( Stem("allume"), "allum" );
	deepEqual( Stem("allumé"), "allum" );
	deepEqual( Stem("allumée"), "allum" );
	deepEqual( Stem("allumées"), "allum" );
	deepEqual( Stem("allumer"), "allum" );
	deepEqual( Stem("allumés"), "allum" );
	deepEqual( Stem("allure"), "allur" );
	deepEqual( Stem("allures"), "allur" );
	deepEqual( Stem("allusion"), "allus" );
	deepEqual( Stem("allusions"), "allus" );
	deepEqual( Stem("almanach"), "almanach" );
	deepEqual( Stem("almaviva"), "almaviv" );
	deepEqual( Stem("alors"), "alor" );
	deepEqual( Stem("alouettes"), "alouet" );
	deepEqual( Stem("alourdie"), "alourd" );
	deepEqual( Stem("alpes"), "alpe" );
	deepEqual( Stem("alphabet"), "alphabet" );
	deepEqual( Stem("alphabets"), "alphabet" );
	deepEqual( Stem("alsace"), "alsac" );
	deepEqual( Stem("also"), "also" );
	deepEqual( Stem("altamira"), "altam" );
	deepEqual( Stem("altéra"), "alter" );
	deepEqual( Stem("altérait"), "alter" );
	deepEqual( Stem("altéré"), "alter" );
	deepEqual( Stem("altérée"), "alter" );
	deepEqual( Stem("altérer"), "alter" );
	deepEqual( Stem("altérés"), "alter" );
	deepEqual( Stem("alternative"), "altern" );
	deepEqual( Stem("alternatives"), "altern" );
	deepEqual( Stem("altesse"), "altess" );
	deepEqual( Stem("altesses"), "altess" );
	deepEqual( Stem("altier"), "alti" );
	deepEqual( Stem("altière"), "altier" );
	deepEqual( Stem("altitude"), "altitud" );
	deepEqual( Stem("alvizi"), "alviz" );
	deepEqual( Stem("alzar"), "alzar" );
	deepEqual( Stem("ama"), "ama" );
	deepEqual( Stem("amabilité"), "amabl" );
	deepEqual( Stem("amadoué"), "amadou" );
	deepEqual( Stem("amadouer"), "amadou" );
	deepEqual( Stem("amai"), "amai" );
	deepEqual( Stem("amaigris"), "amaigr" );
	deepEqual( Stem("amand"), "amand" );
	deepEqual( Stem("amanda"), "amand" );
	deepEqual( Stem("amant"), "amant" );
	deepEqual( Stem("amantes"), "amant" );
	deepEqual( Stem("amants"), "amant" );
	deepEqual( Stem("amarres"), "amarr" );
	deepEqual( Stem("amarrés"), "amarr" );
	deepEqual( Stem("amas"), "amas" );
	deepEqual( Stem("amassaient"), "amass" );
	deepEqual( Stem("amassé"), "amass" );
	deepEqual( Stem("amassée"), "amass" );
	deepEqual( Stem("amateur"), "amateur" );
	deepEqual( Stem("amateurs"), "amateur" );
	deepEqual( Stem("ambassade"), "ambassad" );
	deepEqual( Stem("ambassadeur"), "ambassadeur" );
	deepEqual( Stem("ambassadeurs"), "ambassadeur" );
	deepEqual( Stem("ambiguë"), "ambigu" );
	deepEqual( Stem("ambitieuse"), "ambiti" );
	deepEqual( Stem("ambitieux"), "ambiti" );
	deepEqual( Stem("ambition"), "ambit" );
	deepEqual( Stem("ambulance"), "ambul" );
	deepEqual( Stem("ambulant"), "ambul" );
	deepEqual( Stem("ambulantes"), "ambul" );
	deepEqual( Stem("ambulants"), "ambul" );
	deepEqual( Stem("âme"), "âme" );
	deepEqual( Stem("amena"), "amen" );
	deepEqual( Stem("aménagé"), "aménag" );
	deepEqual( Stem("aménagements"), "aménag" );
	deepEqual( Stem("amenait"), "amen" );
	deepEqual( Stem("amende"), "amend" );
	deepEqual( Stem("amendes"), "amend" );
	deepEqual( Stem("amène"), "amen" );
	deepEqual( Stem("amené"), "amen" );
	deepEqual( Stem("amenée"), "amen" );
	deepEqual( Stem("amener"), "amen" );
	deepEqual( Stem("amènera"), "amen" );
	deepEqual( Stem("amènerai"), "amen" );
	deepEqual( Stem("amènerait"), "amen" );
	deepEqual( Stem("amenez"), "amen" );
	deepEqual( Stem("ameni"), "amen" );
	deepEqual( Stem("amer"), "amer" );
	deepEqual( Stem("amère"), "amer" );
	deepEqual( Stem("amèrement"), "amer" );
	deepEqual( Stem("amères"), "amer" );
	deepEqual( Stem("américain"), "américain" );
	deepEqual( Stem("américaine"), "américain" );
	deepEqual( Stem("américains"), "américain" );
	deepEqual( Stem("american"), "american" );
	deepEqual( Stem("amérique"), "amer" );
	deepEqual( Stem("amers"), "amer" );
	deepEqual( Stem("amertume"), "amertum" );
	deepEqual( Stem("âmes"), "âme" );
	deepEqual( Stem("ameublement"), "ameubl" );
	deepEqual( Stem("ameutant"), "ameut" );
	deepEqual( Stem("ami"), "ami" );
	deepEqual( Stem("amiable"), "amiabl" );
	deepEqual( Stem("amical"), "amical" );
	deepEqual( Stem("amicale"), "amical" );
	deepEqual( Stem("amicalement"), "amical" );
	deepEqual( Stem("amicizia"), "amicizi" );
	deepEqual( Stem("amie"), "ami" );
	deepEqual( Stem("amiens"), "amien" );
	deepEqual( Stem("amies"), "ami" );
	deepEqual( Stem("amis"), "amis" );
	deepEqual( Stem("amitié"), "amiti" );
	deepEqual( Stem("amitiés"), "amiti" );
	deepEqual( Stem("amoindri"), "amoindr" );
	deepEqual( Stem("amor"), "amor" );
	deepEqual( Stem("amorce"), "amorc" );
	deepEqual( Stem("amorces"), "amorc" );
	deepEqual( Stem("amortir"), "amort" );
	deepEqual( Stem("amortirait"), "amort" );
	deepEqual( Stem("amour"), "amour" );
	deepEqual( Stem("amourachée"), "amourach" );
	deepEqual( Stem("amoureuse"), "amour" );
	deepEqual( Stem("amoureusement"), "amour" );
	deepEqual( Stem("amoureux"), "amour" );
	deepEqual( Stem("amours"), "amour" );
	deepEqual( Stem("amphigouriques"), "amphigour" );
	deepEqual( Stem("amphion"), "amphion" );
	deepEqual( Stem("amphithéâtre"), "amphithéâtr" );
	deepEqual( Stem("ample"), "ample" );
	deepEqual( Stem("amplification"), "amplif" );
	deepEqual( Stem("amplifications"), "amplif" );
	deepEqual( Stem("amputés"), "amput" );
	deepEqual( Stem("amusa"), "amus" );
	deepEqual( Stem("amusaient"), "amus" );
	deepEqual( Stem("amusait"), "amus" );
	deepEqual( Stem("amusant"), "amus" );
	deepEqual( Stem("amusante"), "amus" );
	deepEqual( Stem("amusantes"), "amus" );
	deepEqual( Stem("amusants"), "amus" );
	deepEqual( Stem("amuse"), "amus" );
	deepEqual( Stem("amusé"), "amus" );
	deepEqual( Stem("amusement"), "amus" );
	deepEqual( Stem("amuser"), "amus" );
	deepEqual( Stem("amusera"), "amus" );
	deepEqual( Stem("an"), "an" );
	deepEqual( Stem("anachorète"), "anachoret" );
	deepEqual( Stem("anachronisme"), "anachron" );
	deepEqual( Stem("analyser"), "analys" );
	deepEqual( Stem("ananas"), "anan" );
	deepEqual( Stem("anathème"), "anathem" );
	deepEqual( Stem("anathèmes"), "anathem" );
	deepEqual( Stem("ancêtres"), "ancêtr" );
	deepEqual( Stem("ancien"), "ancien" );
	deepEqual( Stem("ancienne"), "ancien" );
	deepEqual( Stem("anciennes"), "ancien" );
	deepEqual( Stem("anciens"), "ancien" );
	deepEqual( Stem("ancre"), "ancre" );
	deepEqual( Stem("ancrés"), "ancré" );
	deepEqual( Stem("and"), "and" );
	deepEqual( Stem("andaman"), "andaman" );
	deepEqual( Stem("anderson"), "anderson" );
	deepEqual( Stem("andrew"), "andrew" );
	deepEqual( Stem("andryane"), "andryan" );
	deepEqual( Stem("anéanti"), "anéant" );
	deepEqual( Stem("anéantie"), "anéant" );
	deepEqual( Stem("anéantir"), "anéant" );
	deepEqual( Stem("anéantis"), "anéant" );
	deepEqual( Stem("anéantissait"), "anéant" );
	deepEqual( Stem("anéantit"), "anéant" );
	deepEqual( Stem("anecdote"), "anecdot" );
	deepEqual( Stem("anecdotes"), "anecdot" );
	deepEqual( Stem("anecdotique"), "anecdot" );
	deepEqual( Stem("ânerie"), "âner" );
	deepEqual( Stem("anetta"), "anet" );
	deepEqual( Stem("ange"), "ange" );
	deepEqual( Stem("angela"), "angel" );
	deepEqual( Stem("angelica"), "angelic" );
	deepEqual( Stem("angélina"), "angélin" );
	deepEqual( Stem("angélique"), "angel" );
	deepEqual( Stem("anges"), "ange" );
	deepEqual( Stem("anglais"), "anglais" );
	deepEqual( Stem("anglaise"), "anglais" );
	deepEqual( Stem("anglaises"), "anglais" );
	deepEqual( Stem("angle"), "angle" );
	deepEqual( Stem("angles"), "angle" );
	deepEqual( Stem("angleterre"), "angleterr" );
	deepEqual( Stem("anglo"), "anglo" );
	deepEqual( Stem("angoisse"), "angoiss" );
	deepEqual( Stem("angoisses"), "angoiss" );
	deepEqual( Stem("angoulême"), "angoulêm" );
	deepEqual( Stem("aniken"), "aniken" );
	deepEqual( Stem("anima"), "anim" );
	deepEqual( Stem("animaient"), "anim" );
	deepEqual( Stem("animait"), "anim" );
	deepEqual( Stem("animal"), "animal" );
	deepEqual( Stem("animant"), "anim" );
	deepEqual( Stem("animation"), "anim" );
	deepEqual( Stem("animaux"), "animal" );
	deepEqual( Stem("anime"), "anim" );
	deepEqual( Stem("animé"), "anim" );
	deepEqual( Stem("animée"), "anim" );
	deepEqual( Stem("animées"), "anim" );
	deepEqual( Stem("animer"), "anim" );
	deepEqual( Stem("animèrent"), "anim" );
	deepEqual( Stem("animés"), "anim" );
	deepEqual( Stem("annales"), "annal" );
	deepEqual( Stem("annam"), "annam" );
	deepEqual( Stem("anneau"), "anneau" );
	deepEqual( Stem("année"), "anné" );
	deepEqual( Stem("années"), "anné" );
	deepEqual( Stem("annexait"), "annex" );
	deepEqual( Stem("annibal"), "annibal" );
	deepEqual( Stem("anno"), "anno" );
	deepEqual( Stem("annonça"), "annonc" );
	deepEqual( Stem("annonçaient"), "annonc" );
	deepEqual( Stem("annonçait"), "annonc" );
	deepEqual( Stem("annonçant"), "annonc" );
	deepEqual( Stem("annonce"), "annonc" );
	deepEqual( Stem("annoncé"), "annonc" );
	deepEqual( Stem("annoncée"), "annonc" );
	deepEqual( Stem("annoncées"), "annonc" );
	deepEqual( Stem("annoncent"), "annoncent" );
	deepEqual( Stem("annoncer"), "annonc" );
	deepEqual( Stem("annoncerait"), "annonc" );
	deepEqual( Stem("annoncèrent"), "annonc" );
	deepEqual( Stem("annoncerez"), "annonc" );
	deepEqual( Stem("annonces"), "annonc" );
	deepEqual( Stem("annoncés"), "annonc" );
	deepEqual( Stem("annuel"), "annuel" );
	deepEqual( Stem("annuelle"), "annuel" );
	deepEqual( Stem("annuellement"), "annuel" );
	deepEqual( Stem("annulé"), "annul" );
	deepEqual( Stem("annulée"), "annul" );
	deepEqual( Stem("annuleront"), "annul" );
	deepEqual( Stem("anobli"), "anobl" );
	deepEqual( Stem("anoblir"), "anobl" );
	deepEqual( Stem("anoblis"), "anobl" );
	deepEqual( Stem("anoblissement"), "anobl" );
	deepEqual( Stem("anoblit"), "anobl" );
	deepEqual( Stem("anodines"), "anodin" );
	deepEqual( Stem("ânonna"), "ânon" );
	deepEqual( Stem("anonyme"), "anonym" );
	deepEqual( Stem("anonymement"), "anonym" );
	deepEqual( Stem("anonymes"), "anonym" );
	deepEqual( Stem("ans"), "an" );
	deepEqual( Stem("anse"), "anse" );
	deepEqual( Stem("antagoniste"), "antagon" );
	deepEqual( Stem("antérieure"), "antérieur" );
	deepEqual( Stem("antérieurs"), "antérieur" );
	deepEqual( Stem("anthropophages"), "anthropophag" );
	deepEqual( Stem("anti"), "anti" );
	deepEqual( Stem("antibes"), "antib" );
	deepEqual( Stem("antichambre"), "antichambr" );
	deepEqual( Stem("antichambres"), "antichambr" );
	deepEqual( Stem("antidata"), "antidat" );
	deepEqual( Stem("antidatée"), "antidat" );
	deepEqual( Stem("antigénéreuses"), "antigéner" );
	deepEqual( Stem("antijacobine"), "antijacobin" );
	deepEqual( Stem("antimonarchique"), "antimonarch" );
	deepEqual( Stem("antipathie"), "antipath" );
	deepEqual( Stem("antipathique"), "antipath" );
	deepEqual( Stem("antipode"), "antipod" );
	deepEqual( Stem("antipodes"), "antipod" );
	deepEqual( Stem("antiquaires"), "antiquair" );
	deepEqual( Stem("antique"), "antiqu" );
	deepEqual( Stem("antiques"), "antiqu" );
	deepEqual( Stem("antiquité"), "antiqu" );
	deepEqual( Stem("antiquités"), "antiqu" );
	deepEqual( Stem("antithèse"), "antithes" );
	deepEqual( Stem("antoine"), "antoin" );
	deepEqual( Stem("anxiété"), "anxiet" );
	deepEqual( Stem("anxieux"), "anxieux" );
	deepEqual( Stem("any"), "any" );
	deepEqual( Stem("aouda"), "aoud" );
	deepEqual( Stem("août"), "août" );
	deepEqual( Stem("apaisa"), "apais" );
	deepEqual( Stem("apaisée"), "apais" );
	deepEqual( Stem("apaiser"), "apais" );
	deepEqual( Stem("apaisera"), "apais" );
	deepEqual( Stem("apathie"), "apath" );
	deepEqual( Stem("apathique"), "apath" );
	deepEqual( Stem("apennin"), "apennin" );
	deepEqual( Stem("apens"), "apen" );
	deepEqual( Stem("apercevait"), "apercev" );
	deepEqual( Stem("apercevant"), "apercev" );
	deepEqual( Stem("apercevoir"), "apercevoir" );
	deepEqual( Stem("apercevons"), "apercevon" );
	deepEqual( Stem("apercevrait"), "apercevr" );
	deepEqual( Stem("aperçois"), "aperçois" );
	deepEqual( Stem("aperçoit"), "aperçoit" );
	deepEqual( Stem("aperçoive"), "aperço" );
	deepEqual( Stem("aperçu"), "aperçu" );
	deepEqual( Stem("aperçue"), "aperçu" );
	deepEqual( Stem("aperçurent"), "aperçurent" );
	deepEqual( Stem("aperçus"), "aperçus" );
	deepEqual( Stem("aperçut"), "aperçut" );
	deepEqual( Stem("aperçût"), "aperçût" );
	deepEqual( Stem("aplaties"), "aplat" );
	deepEqual( Stem("aplatit"), "aplat" );
	deepEqual( Stem("aplomb"), "aplomb" );
	deepEqual( Stem("apocalypse"), "apocalyps" );
	deepEqual( Stem("apocalyptique"), "apocalypt" );
	deepEqual( Stem("apoplectique"), "apoplect" );
	deepEqual( Stem("apoplexie"), "apoplex" );
	deepEqual( Stem("apoplexies"), "apoplex" );
	deepEqual( Stem("apostat"), "apostat" );
	deepEqual( Stem("aposté"), "apost" );
	deepEqual( Stem("apostille"), "apostill" );
	deepEqual( Stem("apostolique"), "apostol" );
	deepEqual( Stem("apostoliques"), "apostol" );
	deepEqual( Stem("apothicaire"), "apothicair" );
	deepEqual( Stem("apôtre"), "apôtr" );
	deepEqual( Stem("apôtres"), "apôtr" );
	deepEqual( Stem("apparaissaient"), "apparaiss" );
	deepEqual( Stem("apparaissait"), "apparaiss" );
	deepEqual( Stem("apparait"), "appar" );
	deepEqual( Stem("apparaît"), "apparaît" );
	deepEqual( Stem("apparaîtrait"), "apparaîtr" );
	deepEqual( Stem("apparaître"), "apparaîtr" );
	deepEqual( Stem("apparat"), "apparat" );
	deepEqual( Stem("appareil"), "appareil" );
	deepEqual( Stem("appareillait"), "appareil" );
	deepEqual( Stem("appareiller"), "appareil" );
	deepEqual( Stem("appareils"), "appareil" );
	deepEqual( Stem("apparemment"), "apparent" );
	deepEqual( Stem("apparence"), "apparent" );
	deepEqual( Stem("apparences"), "apparent" );
	deepEqual( Stem("apparent"), "apparent" );
	deepEqual( Stem("apparente"), "apparent" );
	deepEqual( Stem("apparition"), "apparit" );
	deepEqual( Stem("apparitions"), "apparit" );
	deepEqual( Stem("appartement"), "appart" );
	deepEqual( Stem("appartements"), "appart" );
	deepEqual( Stem("appartenaient"), "apparten" );
	deepEqual( Stem("appartenait"), "apparten" );
	deepEqual( Stem("appartenant"), "apparten" );
	deepEqual( Stem("appartenir"), "apparten" );
	deepEqual( Stem("appartenu"), "appartenu" );
	deepEqual( Stem("appartiendront"), "appartiendront" );
	deepEqual( Stem("appartiennent"), "appartiennent" );
	deepEqual( Stem("appartient"), "appartient" );
	deepEqual( Stem("appartint"), "appartint" );
	deepEqual( Stem("appartînt"), "appartînt" );
	deepEqual( Stem("apparu"), "apparu" );
	deepEqual( Stem("apparut"), "apparut" );
	deepEqual( Stem("appât"), "appât" );
	deepEqual( Stem("appel"), "appel" );
	deepEqual( Stem("appela"), "appel" );
	deepEqual( Stem("appelaient"), "appel" );
	deepEqual( Stem("appelait"), "appel" );
	deepEqual( Stem("appelant"), "appel" );
	deepEqual( Stem("appelât"), "appel" );
	deepEqual( Stem("appelé"), "appel" );
	deepEqual( Stem("appelée"), "appel" );
	deepEqual( Stem("appelées"), "appel" );
	deepEqual( Stem("appeler"), "appel" );
	deepEqual( Stem("appelés"), "appel" );
	deepEqual( Stem("appelez"), "appel" );
	deepEqual( Stem("appelle"), "appel" );
	deepEqual( Stem("appellent"), "appellent" );
	deepEqual( Stem("appellera"), "appel" );
	deepEqual( Stem("appellerai"), "appel" );
	deepEqual( Stem("appellerait"), "appel" );
	deepEqual( Stem("appellerez"), "appel" );
	deepEqual( Stem("appelleront"), "appel" );
	deepEqual( Stem("appelles"), "appel" );
	deepEqual( Stem("appendices"), "appendic" );
	deepEqual( Stem("appert"), "appert" );
	deepEqual( Stem("appesantie"), "appesant" );
	deepEqual( Stem("appesantis"), "appesant" );
	deepEqual( Stem("appétit"), "appet" );
	deepEqual( Stem("applaudi"), "applaud" );
	deepEqual( Stem("applaudie"), "applaud" );
	deepEqual( Stem("applaudir"), "applaud" );
	deepEqual( Stem("applaudirent"), "applaud" );
	deepEqual( Stem("applaudissaient"), "applaud" );
	deepEqual( Stem("applaudissements"), "applaud" );
	deepEqual( Stem("applaudit"), "applaud" );
	deepEqual( Stem("applicables"), "applic" );
	deepEqual( Stem("application"), "appliqu" );
	deepEqual( Stem("appliqua"), "appliqu" );
	deepEqual( Stem("appliquait"), "appliqu" );
	deepEqual( Stem("applique"), "appliqu" );
	deepEqual( Stem("appliqué"), "appliqu" );
	deepEqual( Stem("appliquée"), "appliqu" );
	deepEqual( Stem("appliquer"), "appliqu" );
	deepEqual( Stem("appliquez"), "appliqu" );
	deepEqual( Stem("appoint"), "appoint" );
	deepEqual( Stem("appointements"), "appoint" );
	deepEqual( Stem("appointés"), "appoint" );
	deepEqual( Stem("apporta"), "apport" );
	deepEqual( Stem("apportaient"), "apport" );
	deepEqual( Stem("apportait"), "apport" );
	deepEqual( Stem("apportant"), "apport" );
	deepEqual( Stem("apporte"), "apport" );
	deepEqual( Stem("apporté"), "apport" );
	deepEqual( Stem("apportée"), "apport" );
	deepEqual( Stem("apportées"), "apport" );
	deepEqual( Stem("apporter"), "apport" );
	deepEqual( Stem("apporterai"), "apport" );
	deepEqual( Stem("apporterait"), "apport" );
	deepEqual( Stem("apportés"), "apport" );
	deepEqual( Stem("apportez"), "apport" );
	deepEqual( Stem("apportiez"), "apport" );
	deepEqual( Stem("apposa"), "appos" );
	deepEqual( Stem("apposer"), "appos" );
	deepEqual( Stem("apposés"), "appos" );
	deepEqual( Stem("apprécie"), "apprec" );
	deepEqual( Stem("appréciée"), "appréci" );
	deepEqual( Stem("apprécier"), "appréci" );
	deepEqual( Stem("appréciés"), "appréci" );
	deepEqual( Stem("appréhension"), "appréhens" );
	deepEqual( Stem("apprenaient"), "appren" );
	deepEqual( Stem("apprenait"), "appren" );
	deepEqual( Stem("apprenant"), "appren" );
	deepEqual( Stem("apprend"), "apprend" );
	deepEqual( Stem("apprendra"), "apprendr" );
	deepEqual( Stem("apprendrais"), "apprendr" );
	deepEqual( Stem("apprendrait"), "apprendr" );
	deepEqual( Stem("apprendre"), "apprendr" );
	deepEqual( Stem("apprendrez"), "apprendr" );
	deepEqual( Stem("apprendrions"), "apprendr" );
	deepEqual( Stem("apprendront"), "apprendront" );
	deepEqual( Stem("apprends"), "apprend" );
	deepEqual( Stem("apprenez"), "appren" );
	deepEqual( Stem("apprennes"), "appren" );
	deepEqual( Stem("apprêtait"), "apprêt" );
	deepEqual( Stem("apprêter"), "apprêt" );
	deepEqual( Stem("apprêtons"), "apprêton" );
	deepEqual( Stem("apprirent"), "apprirent" );
	deepEqual( Stem("appris"), "appris" );
	deepEqual( Stem("apprise"), "appris" );
	deepEqual( Stem("apprises"), "appris" );
	deepEqual( Stem("apprit"), "apprit" );
	deepEqual( Stem("apprivoisés"), "apprivois" );
	deepEqual( Stem("approbation"), "approb" );
	deepEqual( Stem("approcha"), "approch" );
	deepEqual( Stem("approchaient"), "approch" );
	deepEqual( Stem("approchait"), "approch" );
	deepEqual( Stem("approchant"), "approch" );
	deepEqual( Stem("approche"), "approch" );
	deepEqual( Stem("approché"), "approch" );
	deepEqual( Stem("approchée"), "approch" );
	deepEqual( Stem("approchent"), "approchent" );
	deepEqual( Stem("approcher"), "approch" );
	deepEqual( Stem("approchèrent"), "approch" );
	deepEqual( Stem("approches"), "approch" );
	deepEqual( Stem("approchés"), "approch" );
	deepEqual( Stem("approfondie"), "approfond" );
	deepEqual( Stem("approprié"), "appropri" );
	deepEqual( Stem("approuva"), "approuv" );
	deepEqual( Stem("approuvé"), "approuv" );
	deepEqual( Stem("approuvée"), "approuv" );
	deepEqual( Stem("approuvera"), "approuv" );
	deepEqual( Stem("approuves"), "approuv" );
	deepEqual( Stem("appui"), "appui" );
	deepEqual( Stem("appuie"), "appui" );
	deepEqual( Stem("appuya"), "appui" );
	deepEqual( Stem("appuyaient"), "appui" );
	deepEqual( Stem("appuyais"), "appui" );
	deepEqual( Stem("appuyait"), "appui" );
	deepEqual( Stem("appuyant"), "appui" );
	deepEqual( Stem("appuyé"), "appui" );
	deepEqual( Stem("appuyée"), "appui" );
	deepEqual( Stem("appuyées"), "appui" );
	deepEqual( Stem("appuyer"), "appui" );
	deepEqual( Stem("âpre"), "âpre" );
	deepEqual( Stem("après"), "apres" );
	deepEqual( Stem("april"), "april" );
	deepEqual( Stem("aptitude"), "aptitud" );
	deepEqual( Stem("aquarelle"), "aquarel" );
	deepEqual( Stem("aquetta"), "aquet" );
	deepEqual( Stem("aquilin"), "aquilin" );
	deepEqual( Stem("aquitaine"), "aquitain" );
	deepEqual( Stem("arabe"), "arab" );
	deepEqual( Stem("arabes"), "arab" );
	deepEqual( Stem("arabique"), "arab" );
	deepEqual( Stem("araceli"), "aracel" );
	deepEqual( Stem("arbitraire"), "arbitrair" );
	deepEqual( Stem("arbitraires"), "arbitrair" );
	deepEqual( Stem("arbitre"), "arbitr" );
	deepEqual( Stem("arbitres"), "arbitr" );
	deepEqual( Stem("arboré"), "arbor" );
	deepEqual( Stem("arborer"), "arbor" );
	deepEqual( Stem("arborescentes"), "arborescent" );
	deepEqual( Stem("arbre"), "arbre" );
	deepEqual( Stem("arbres"), "arbre" );
	deepEqual( Stem("arbrisseaux"), "arbrisseau" );
	deepEqual( Stem("arc"), "arc" );
	deepEqual( Stem("arceaux"), "arceau" );
	deepEqual( Stem("arche"), "arche" );
	deepEqual( Stem("archet"), "archet" );
	deepEqual( Stem("archevêché"), "archevêch" );
	deepEqual( Stem("archevêque"), "archevêqu" );
	deepEqual( Stem("archevêques"), "archevêqu" );
	deepEqual( Stem("archiduc"), "archiduc" );
	deepEqual( Stem("archiépiscopal"), "archiépiscopal" );
	deepEqual( Stem("archiépiscopale"), "archiépiscopal" );
	deepEqual( Stem("archifolle"), "archifoll" );
	deepEqual( Stem("archiprêtre"), "archiprêtr" );
	deepEqual( Stem("architecte"), "architect" );
	deepEqual( Stem("architecture"), "architectur" );
	deepEqual( Stem("archives"), "archiv" );
	deepEqual( Stem("arcole"), "arcol" );
	deepEqual( Stem("arçon"), "arçon" );
	deepEqual( Stem("ardemment"), "ardemment" );
	deepEqual( Stem("ardent"), "ardent" );
	deepEqual( Stem("ardente"), "ardent" );
	deepEqual( Stem("ardentes"), "ardent" );
	deepEqual( Stem("ardents"), "ardent" );
	deepEqual( Stem("ardeur"), "ardeur" );
	deepEqual( Stem("ardu"), "ardu" );
	deepEqual( Stem("are"), "are" );
	deepEqual( Stem("arecs"), "arec" );
	deepEqual( Stem("aresi"), "ares" );
	deepEqual( Stem("arêtes"), "arêt" );
	deepEqual( Stem("argent"), "argent" );
	deepEqual( Stem("argentée"), "argent" );
	deepEqual( Stem("argile"), "argil" );
	deepEqual( Stem("argument"), "argument" );
	deepEqual( Stem("arguments"), "argument" );
	deepEqual( Stem("arides"), "arid" );
	deepEqual( Stem("arioste"), "ariost" );
	deepEqual( Stem("aristocrate"), "aristocrat" );
	deepEqual( Stem("aristocratie"), "aristocrat" );
	deepEqual( Stem("aristocratique"), "aristocrat" );
	deepEqual( Stem("aristocratiques"), "aristocrat" );
	deepEqual( Stem("arithmétique"), "arithmet" );
	deepEqual( Stem("arkansas"), "arkans" );
	deepEqual( Stem("arlequin"), "arlequin" );
	deepEqual( Stem("arma"), "arma" );
	deepEqual( Stem("armait"), "armait" );
	deepEqual( Stem("armant"), "armant" );
	deepEqual( Stem("armateur"), "armateur" );
	deepEqual( Stem("armateurs"), "armateur" );
	deepEqual( Stem("arme"), "arme" );
	deepEqual( Stem("armé"), "armé" );
	deepEqual( Stem("armée"), "armé" );
	deepEqual( Stem("armées"), "armé" );
	deepEqual( Stem("arméniennes"), "arménien" );
	deepEqual( Stem("arméniens"), "arménien" );
	deepEqual( Stem("armer"), "armer" );
	deepEqual( Stem("armes"), "arme" );
	deepEqual( Stem("armés"), "armé" );
	deepEqual( Stem("armide"), "armid" );
	deepEqual( Stem("armoire"), "armoir" );
	deepEqual( Stem("armoires"), "armoir" );
	deepEqual( Stem("armoiries"), "armoir" );
	deepEqual( Stem("armonica"), "armonic" );
	deepEqual( Stem("armurier"), "armuri" );
	deepEqual( Stem("arnauld"), "arnauld" );
	deepEqual( Stem("arpent"), "arpent" );
	deepEqual( Stem("arpents"), "arpent" );
	deepEqual( Stem("arquebuser"), "arquebus" );
	deepEqual( Stem("arquées"), "arqué" );
	deepEqual( Stem("arqués"), "arqué" );
	deepEqual( Stem("arracha"), "arrach" );
	deepEqual( Stem("arrachait"), "arrach" );
	deepEqual( Stem("arrachant"), "arrach" );
	deepEqual( Stem("arrache"), "arrach" );
	deepEqual( Stem("arraché"), "arrach" );
	deepEqual( Stem("arrachée"), "arrach" );
	deepEqual( Stem("arrachent"), "arrachent" );
	deepEqual( Stem("arracher"), "arrach" );
	deepEqual( Stem("arrachèrent"), "arrach" );
	deepEqual( Stem("arrachés"), "arrach" );
	deepEqual( Stem("arrange"), "arrang" );
	deepEqual( Stem("arrangé"), "arrang" );
	deepEqual( Stem("arrangea"), "arrang" );
	deepEqual( Stem("arrangeaient"), "arrang" );
	deepEqual( Stem("arrangeait"), "arrang" );
	deepEqual( Stem("arrangée"), "arrang" );
	deepEqual( Stem("arrangées"), "arrang" );
	deepEqual( Stem("arrangement"), "arrang" );
	deepEqual( Stem("arrangements"), "arrang" );
	deepEqual( Stem("arrangent"), "arrangent" );
	deepEqual( Stem("arranger"), "arrang" );
	deepEqual( Stem("arrangera"), "arrang" );
	deepEqual( Stem("arrangerait"), "arrang" );
	deepEqual( Stem("arrangés"), "arrang" );
	deepEqual( Stem("arrérages"), "arrérag" );
	deepEqual( Stem("arrestation"), "arrest" );
	deepEqual( Stem("arrestations"), "arrest" );
	deepEqual( Stem("arrêt"), "arrêt" );
	deepEqual( Stem("arrêta"), "arrêt" );
	deepEqual( Stem("arrêtaient"), "arrêt" );
	deepEqual( Stem("arrêtait"), "arrêt" );
	deepEqual( Stem("arrêtant"), "arrêt" );
	deepEqual( Stem("arrête"), "arrêt" );
	deepEqual( Stem("arrêté"), "arrêt" );
	deepEqual( Stem("arrêtée"), "arrêt" );
	deepEqual( Stem("arrêtées"), "arrêt" );
	deepEqual( Stem("arrêtent"), "arrêtent" );
	deepEqual( Stem("arrêter"), "arrêt" );
	deepEqual( Stem("arrêtera"), "arrêt" );
	deepEqual( Stem("arrêterai"), "arrêt" );
	deepEqual( Stem("arrêterait"), "arrêt" );
	deepEqual( Stem("arrêtèrent"), "arrêt" );
	deepEqual( Stem("arrêterons"), "arrêt" );
	deepEqual( Stem("arrêteront"), "arrêt" );
	deepEqual( Stem("arrêtés"), "arrêt" );
	deepEqual( Stem("arrêtez"), "arrêt" );
	deepEqual( Stem("arrêtiez"), "arrêt" );
	deepEqual( Stem("arrêtons"), "arrêton" );
	deepEqual( Stem("arrêts"), "arrêt" );
	deepEqual( Stem("arrhes"), "arrhe" );
	deepEqual( Stem("arrien"), "arrien" );
	deepEqual( Stem("arrière"), "arrier" );
	deepEqual( Stem("arriva"), "arriv" );
	deepEqual( Stem("arrivai"), "arriv" );
	deepEqual( Stem("arrivaient"), "arriv" );
	deepEqual( Stem("arrivais"), "arriv" );
	deepEqual( Stem("arrivait"), "arriv" );
	deepEqual( Stem("arrivant"), "arriv" );
	deepEqual( Stem("arrivants"), "arriv" );
	deepEqual( Stem("arrivât"), "arriv" );
	deepEqual( Stem("arrive"), "arriv" );
	deepEqual( Stem("arrivé"), "arriv" );
	deepEqual( Stem("arrivée"), "arriv" );
	deepEqual( Stem("arrivées"), "arriv" );
	deepEqual( Stem("arrivent"), "arrivent" );
	deepEqual( Stem("arriver"), "arriv" );
	deepEqual( Stem("arrivera"), "arriv" );
	deepEqual( Stem("arriveraient"), "arriv" );
	deepEqual( Stem("arriverais"), "arriv" );
	deepEqual( Stem("arriverait"), "arriv" );
	deepEqual( Stem("arrivèrent"), "arriv" );
	deepEqual( Stem("arriverez"), "arriv" );
	deepEqual( Stem("arriverions"), "arriv" );
	deepEqual( Stem("arriverons"), "arriv" );
	deepEqual( Stem("arriveront"), "arriv" );
	deepEqual( Stem("arrives"), "arriv" );
	deepEqual( Stem("arrivés"), "arriv" );
	deepEqual( Stem("arrivez"), "arriv" );
	deepEqual( Stem("arrivons"), "arrivon" );
	deepEqual( Stem("arrogante"), "arrog" );
	deepEqual( Stem("arrondies"), "arrond" );
	deepEqual( Stem("arrondis"), "arrond" );
	deepEqual( Stem("arrondissait"), "arrond" );
	deepEqual( Stem("arrondissement"), "arrond" );
	deepEqual( Stem("arrondit"), "arrond" );
	deepEqual( Stem("arrosé"), "arros" );
	deepEqual( Stem("arrosées"), "arros" );
	deepEqual( Stem("arsenal"), "arsenal" );
	deepEqual( Stem("arsène"), "arsen" );
	deepEqual( Stem("arsenic"), "arsenic" );
	deepEqual( Stem("art"), "art" );
	deepEqual( Stem("arte"), "arte" );
	deepEqual( Stem("artère"), "arter" );
	deepEqual( Stem("arthémidore"), "arthémidor" );
	deepEqual( Stem("article"), "articl" );
	deepEqual( Stem("articles"), "articl" );
	deepEqual( Stem("articulait"), "articul" );
	deepEqual( Stem("articulant"), "articul" );
	deepEqual( Stem("articulée"), "articul" );
	deepEqual( Stem("articuler"), "articul" );
	deepEqual( Stem("articulés"), "articul" );
	deepEqual( Stem("artifice"), "artific" );
	deepEqual( Stem("artillerie"), "artiller" );
	deepEqual( Stem("artisans"), "artisan" );
	deepEqual( Stem("artiste"), "artist" );
	deepEqual( Stem("artistes"), "artist" );
	deepEqual( Stem("arts"), "art" );
	deepEqual( Stem("as"), "as" );
	deepEqual( Stem("ascagne"), "ascagn" );
	deepEqual( Stem("ascanio"), "ascanio" );
	deepEqual( Stem("ascétique"), "ascet" );
	deepEqual( Stem("asie"), "asi" );
	deepEqual( Stem("asile"), "asil" );
	deepEqual( Stem("aspect"), "aspect" );
	deepEqual( Stem("aspects"), "aspect" );
	deepEqual( Stem("aspérités"), "asper" );
	deepEqual( Stem("asphaltite"), "asphaltit" );
	deepEqual( Stem("asphyxie"), "asphyx" );
	deepEqual( Stem("asphyxié"), "asphyxi" );
	deepEqual( Stem("aspiciam"), "aspiciam" );
	deepEqual( Stem("aspira"), "aspir" );
	deepEqual( Stem("aspirait"), "aspir" );
	deepEqual( Stem("aspirants"), "aspir" );
	deepEqual( Stem("aspirations"), "aspir" );
	deepEqual( Stem("aspire"), "aspir" );
	deepEqual( Stem("aspirer"), "aspir" );
	deepEqual( Stem("aspirez"), "aspir" );
	deepEqual( Stem("assaillaient"), "assaill" );
	deepEqual( Stem("assaillant"), "assaill" );
	deepEqual( Stem("assaillants"), "assaill" );
	deepEqual( Stem("assailli"), "assaill" );
	deepEqual( Stem("assaillie"), "assaill" );
	deepEqual( Stem("assaillis"), "assaill" );
	deepEqual( Stem("assassin"), "assassin" );
	deepEqual( Stem("assassinait"), "assassin" );
	deepEqual( Stem("assassinat"), "assassinat" );
	deepEqual( Stem("assassine"), "assassin" );
	deepEqual( Stem("assassiné"), "assassin" );
	deepEqual( Stem("assassiner"), "assassin" );
	deepEqual( Stem("assassinés"), "assassin" );
	deepEqual( Stem("assassins"), "assassin" );
	deepEqual( Stem("assaut"), "assaut" );
	deepEqual( Stem("assembla"), "assembl" );
	deepEqual( Stem("assemblée"), "assembl" );
	deepEqual( Stem("assembler"), "assembl" );
	deepEqual( Stem("assentiment"), "assent" );
	deepEqual( Stem("asseoir"), "asseoir" );
	deepEqual( Stem("assertions"), "assert" );
	deepEqual( Stem("asseyaient"), "assei" );
	deepEqual( Stem("asseyait"), "assei" );
	deepEqual( Stem("asseyant"), "assei" );
	deepEqual( Stem("asseyez"), "assei" );
	deepEqual( Stem("assez"), "assez" );
	deepEqual( Stem("assidue"), "assidu" );
	deepEqual( Stem("assiduité"), "assidu" );
	deepEqual( Stem("assiduités"), "assidu" );
	deepEqual( Stem("assidûment"), "assidû" );
	deepEqual( Stem("assied"), "assied" );
	deepEqual( Stem("assiégé"), "assieg" );
	deepEqual( Stem("assiégée"), "assieg" );
	deepEqual( Stem("assiéger"), "assieg" );
	deepEqual( Stem("assiégés"), "assieg" );
	deepEqual( Stem("assiette"), "assiet" );
	deepEqual( Stem("assignats"), "assignat" );
	deepEqual( Stem("assigne"), "assign" );
	deepEqual( Stem("assigné"), "assign" );
	deepEqual( Stem("assigner"), "assign" );
	deepEqual( Stem("assirent"), "assirent" );
	deepEqual( Stem("assis"), "assis" );
	deepEqual( Stem("assise"), "assis" );
	deepEqual( Stem("assises"), "assis" );
	deepEqual( Stem("assista"), "assist" );
	deepEqual( Stem("assistaient"), "assist" );
	deepEqual( Stem("assistait"), "assist" );
	deepEqual( Stem("assistance"), "assist" );
	deepEqual( Stem("assistant"), "assist" );
	deepEqual( Stem("assistants"), "assist" );
	deepEqual( Stem("assiste"), "assist" );
	deepEqual( Stem("assisté"), "assist" );
	deepEqual( Stem("assister"), "assist" );
	deepEqual( Stem("assistera"), "assist" );
	deepEqual( Stem("assit"), "assit" );
	deepEqual( Stem("associaient"), "associ" );
	deepEqual( Stem("association"), "associ" );
	deepEqual( Stem("associations"), "associ" );
	deepEqual( Stem("associe"), "assoc" );
	deepEqual( Stem("associé"), "associ" );
	deepEqual( Stem("assoient"), "assoient" );
	deepEqual( Stem("assombri"), "assombr" );
	deepEqual( Stem("assombrit"), "assombr" );
	deepEqual( Stem("assommant"), "assomm" );
	deepEqual( Stem("assommé"), "assomm" );
	deepEqual( Stem("assommer"), "assomm" );
	deepEqual( Stem("assommés"), "assomm" );
	deepEqual( Stem("assommoir"), "assommoir" );
	deepEqual( Stem("assoupie"), "assoup" );
	deepEqual( Stem("assoupissantes"), "assoup" );
	deepEqual( Stem("assoupissement"), "assoup" );
	deepEqual( Stem("assoupit"), "assoup" );
	deepEqual( Stem("assourdissant"), "assourd" );
	deepEqual( Stem("assourdit"), "assourd" );
	deepEqual( Stem("assura"), "assur" );
	deepEqual( Stem("assuraient"), "assur" );
	deepEqual( Stem("assurait"), "assur" );
	deepEqual( Stem("assurance"), "assur" );
	deepEqual( Stem("assurances"), "assur" );
	deepEqual( Stem("assure"), "assur" );
	deepEqual( Stem("assuré"), "assur" );
	deepEqual( Stem("assurée"), "assur" );
	deepEqual( Stem("assurées"), "assur" );
	deepEqual( Stem("assurément"), "assur" );
	deepEqual( Stem("assurer"), "assur" );
	deepEqual( Stem("assurerait"), "assur" );
	deepEqual( Stem("assurerez"), "assur" );
	deepEqual( Stem("assureront"), "assur" );
	deepEqual( Stem("assurghur"), "assurghur" );
	deepEqual( Stem("astéroïdes"), "astéroïd" );
	deepEqual( Stem("asthme"), "asthme" );
	deepEqual( Stem("asti"), "asti" );
	deepEqual( Stem("astre"), "astre" );
	deepEqual( Stem("astreindre"), "astreindr" );
	deepEqual( Stem("astreins"), "astrein" );
	deepEqual( Stem("astres"), "astre" );
	deepEqual( Stem("astrologie"), "astrolog" );
	deepEqual( Stem("astrologique"), "astrolog" );
	deepEqual( Stem("astrologiques"), "astrolog" );
	deepEqual( Stem("astrologues"), "astrologu" );
	deepEqual( Stem("astronomes"), "astronom" );
	deepEqual( Stem("astronomie"), "astronom" );
	deepEqual( Stem("astronomique"), "astronom" );
	deepEqual( Stem("astuce"), "astuc" );
	deepEqual( Stem("at"), "at" );
	deepEqual( Stem("atelier"), "ateli" );
	deepEqual( Stem("athènes"), "athen" );
	deepEqual( Stem("atlantique"), "atlant" );
	deepEqual( Stem("atmosphère"), "atmospher" );
	deepEqual( Stem("atome"), "atom" );
	deepEqual( Stem("atours"), "atour" );
	deepEqual( Stem("atouts"), "atout" );
	deepEqual( Stem("atroce"), "atroc" );
	deepEqual( Stem("atrocement"), "atroc" );
	deepEqual( Stem("atroces"), "atroc" );
	deepEqual( Stem("atrocité"), "atroc" );
	deepEqual( Stem("attacha"), "attach" );
	deepEqual( Stem("attachaient"), "attach" );
	deepEqual( Stem("attachait"), "attach" );
	deepEqual( Stem("attachant"), "attach" );
	deepEqual( Stem("attache"), "attach" );
	deepEqual( Stem("attaché"), "attach" );
	deepEqual( Stem("attachée"), "attach" );
	deepEqual( Stem("attachées"), "attach" );
	deepEqual( Stem("attachement"), "attach" );
	deepEqual( Stem("attachent"), "attachent" );
	deepEqual( Stem("attacher"), "attach" );
	deepEqual( Stem("attachera"), "attach" );
	deepEqual( Stem("attacherai"), "attach" );
	deepEqual( Stem("attacherait"), "attach" );
	deepEqual( Stem("attachèrent"), "attach" );
	deepEqual( Stem("attachés"), "attach" );
	deepEqual( Stem("attaqua"), "attaqu" );
	deepEqual( Stem("attaquaient"), "attaqu" );
	deepEqual( Stem("attaquait"), "attaqu" );
	deepEqual( Stem("attaque"), "attaqu" );
	deepEqual( Stem("attaqué"), "attaqu" );
	deepEqual( Stem("attaquée"), "attaqu" );
	deepEqual( Stem("attaquer"), "attaqu" );
	deepEqual( Stem("attaques"), "attaqu" );
	deepEqual( Stem("attaqués"), "attaqu" );
	deepEqual( Stem("attardé"), "attard" );
	deepEqual( Stem("atteignaient"), "atteign" );
	deepEqual( Stem("atteignait"), "atteign" );
	deepEqual( Stem("atteignirent"), "atteign" );
	deepEqual( Stem("atteignit"), "atteign" );
	deepEqual( Stem("atteindrait"), "atteindr" );
	deepEqual( Stem("atteindre"), "atteindr" );
	deepEqual( Stem("atteint"), "atteint" );
	deepEqual( Stem("atteintes"), "atteint" );
	deepEqual( Stem("atteints"), "atteint" );
	deepEqual( Stem("attelage"), "attelag" );
	deepEqual( Stem("attelages"), "attelag" );
	deepEqual( Stem("attelait"), "attel" );
	deepEqual( Stem("attelé"), "attel" );
	deepEqual( Stem("attelée"), "attel" );
	deepEqual( Stem("attelés"), "attel" );
	deepEqual( Stem("attelle"), "attel" );
	deepEqual( Stem("attenait"), "atten" );
	deepEqual( Stem("attenant"), "atten" );
	deepEqual( Stem("attenante"), "atten" );
	deepEqual( Stem("attend"), "attend" );
	deepEqual( Stem("attendaient"), "attend" );
	deepEqual( Stem("attendais"), "attend" );
	deepEqual( Stem("attendait"), "attend" );
	deepEqual( Stem("attendant"), "attend" );
	deepEqual( Stem("attendent"), "attendent" );
	deepEqual( Stem("attendez"), "attend" );
	deepEqual( Stem("attendirent"), "attend" );
	deepEqual( Stem("attendit"), "attend" );
	deepEqual( Stem("attendons"), "attendon" );
	deepEqual( Stem("attendra"), "attendr" );
	deepEqual( Stem("attendrai"), "attendr" );
	deepEqual( Stem("attendrait"), "attendr" );
	deepEqual( Stem("attendre"), "attendr" );
	deepEqual( Stem("attendri"), "attendr" );
	deepEqual( Stem("attendrie"), "attendr" );
	deepEqual( Stem("attendrir"), "attendr" );
	deepEqual( Stem("attendriraient"), "attendr" );
	deepEqual( Stem("attendris"), "attendr" );
	deepEqual( Stem("attendrissant"), "attendr" );
	deepEqual( Stem("attendrissement"), "attendr" );
	deepEqual( Stem("attendrit"), "attendr" );
	deepEqual( Stem("attends"), "attend" );
	deepEqual( Stem("attendu"), "attendu" );
	deepEqual( Stem("attendue"), "attendu" );
	deepEqual( Stem("attendus"), "attendus" );
	deepEqual( Stem("attente"), "attent" );
	deepEqual( Stem("attenté"), "attent" );
	deepEqual( Stem("attenter"), "attent" );
	deepEqual( Stem("attentif"), "attent" );
	deepEqual( Stem("attentifs"), "attent" );
	deepEqual( Stem("attention"), "attent" );
	deepEqual( Stem("attentions"), "attent" );
	deepEqual( Stem("attentive"), "attent" );
	deepEqual( Stem("attentivement"), "attent" );
	deepEqual( Stem("atterra"), "atterr" );
	deepEqual( Stem("atterrages"), "atterrag" );
	deepEqual( Stem("atterré"), "atterr" );
	deepEqual( Stem("atterrée"), "atterr" );
	deepEqual( Stem("attestaient"), "attest" );
	deepEqual( Stem("attiédi"), "attied" );
	deepEqual( Stem("attira"), "attir" );
	deepEqual( Stem("attiraient"), "attir" );
	deepEqual( Stem("attirait"), "attir" );
	deepEqual( Stem("attire"), "attir" );
	deepEqual( Stem("attiré"), "attir" );
	deepEqual( Stem("attirent"), "attirent" );
	deepEqual( Stem("attirer"), "attir" );
	deepEqual( Stem("attirerait"), "attir" );
	deepEqual( Stem("attirèrent"), "attir" );
	deepEqual( Stem("attirés"), "attir" );
	deepEqual( Stem("attitude"), "attitud" );
	deepEqual( Stem("attraction"), "attract" );
	deepEqual( Stem("attrait"), "attrait" );
	deepEqual( Stem("attrapé"), "attrap" );
	deepEqual( Stem("attrapera"), "attrap" );
	deepEqual( Stem("attrayant"), "attrai" );
	deepEqual( Stem("attrayantes"), "attrai" );
	deepEqual( Stem("attribuaient"), "attribu" );
	deepEqual( Stem("attribuait"), "attribu" );
	deepEqual( Stem("attribué"), "attribu" );
	deepEqual( Stem("attribuée"), "attribu" );
	deepEqual( Stem("attribuer"), "attribu" );
	deepEqual( Stem("attribuera"), "attribu" );
	deepEqual( Stem("attributions"), "attribu" );
	deepEqual( Stem("attristait"), "attrist" );
	deepEqual( Stem("attristé"), "attrist" );
	deepEqual( Stem("attristée"), "attrist" );
	deepEqual( Stem("attrister"), "attrist" );
	deepEqual( Stem("attroupement"), "attroup" );
	deepEqual( Stem("attrouper"), "attroup" );
	deepEqual( Stem("au"), "au" );
	deepEqual( Stem("aubaine"), "aubain" );
	deepEqual( Stem("aubaines"), "aubain" );
	deepEqual( Stem("aube"), "aub" );
	deepEqual( Stem("auberge"), "auberg" );
	deepEqual( Stem("auberges"), "auberg" );
	deepEqual( Stem("aubergistes"), "auberg" );
	deepEqual( Stem("aubigné"), "aubign" );
	deepEqual( Stem("aubry"), "aubry" );
	deepEqual( Stem("auburn"), "auburn" );
	deepEqual( Stem("aucun"), "aucun" );
	deepEqual( Stem("aucune"), "aucun" );
	deepEqual( Stem("aucunement"), "aucun" );
	deepEqual( Stem("audace"), "audac" );
	deepEqual( Stem("audacieuse"), "audaci" );
	deepEqual( Stem("audacieuses"), "audaci" );
	deepEqual( Stem("audacieux"), "audaci" );
	deepEqual( Stem("audience"), "audienc" );
	deepEqual( Stem("audiences"), "audienc" );
	deepEqual( Stem("audit"), "audit" );
	deepEqual( Stem("auditeur"), "auditeur" );
	deepEqual( Stem("auditeurs"), "auditeur" );
	deepEqual( Stem("auditoire"), "auditoir" );
	deepEqual( Stem("augmenta"), "augment" );
	deepEqual( Stem("augmentaient"), "augment" );
	deepEqual( Stem("augmentait"), "augment" );
	deepEqual( Stem("augmentant"), "augment" );
	deepEqual( Stem("augmentation"), "augment" );
	deepEqual( Stem("augmente"), "augment" );
	deepEqual( Stem("augmenté"), "augment" );
	deepEqual( Stem("augmentée"), "augment" );
	deepEqual( Stem("augmenter"), "augment" );
	deepEqual( Stem("augmentera"), "augment" );
	deepEqual( Stem("augmenterait"), "augment" );
	deepEqual( Stem("augure"), "augur" );
	deepEqual( Stem("augurer"), "augur" );
	deepEqual( Stem("auguste"), "august" );
	deepEqual( Stem("augustes"), "august" );
	deepEqual( Stem("augustin"), "augustin" );
	deepEqual( Stem("aujourd"), "aujourd" );
	deepEqual( Stem("aumône"), "aumôn" );
	deepEqual( Stem("aumônes"), "aumôn" );
	deepEqual( Stem("aumônier"), "aumôni" );
	deepEqual( Stem("aunes"), "aun" );
	deepEqual( Stem("auparavant"), "auparav" );
	deepEqual( Stem("auprès"), "aupres" );
	deepEqual( Stem("auquel"), "auquel" );
	deepEqual( Stem("aura"), "aur" );
	deepEqual( Stem("aurai"), "aur" );
	deepEqual( Stem("auraient"), "aur" );
	deepEqual( Stem("aurais"), "aur" );
	deepEqual( Stem("aurait"), "aur" );
	deepEqual( Stem("auras"), "aur" );
	deepEqual( Stem("aureng"), "aureng" );
	deepEqual( Stem("aurez"), "aur" );
	deepEqual( Stem("auriez"), "aur" );
	deepEqual( Stem("aurions"), "aurion" );
	deepEqual( Stem("aurons"), "auron" );
	deepEqual( Stem("auront"), "auront" );
	deepEqual( Stem("aurungabad"), "aurungabad" );
	deepEqual( Stem("aussi"), "auss" );
	deepEqual( Stem("aussitôt"), "aussitôt" );
	deepEqual( Stem("austère"), "auster" );
	deepEqual( Stem("austères"), "auster" );
	deepEqual( Stem("austérité"), "auster" );
	deepEqual( Stem("austral"), "austral" );
	deepEqual( Stem("autant"), "aut" );
	deepEqual( Stem("autel"), "autel" );
	deepEqual( Stem("autels"), "autel" );
	deepEqual( Stem("auteur"), "auteur" );
	deepEqual( Stem("auteurs"), "auteur" );
	deepEqual( Stem("authenticité"), "authent" );
	deepEqual( Stem("auto"), "auto" );
	deepEqual( Stem("automate"), "automat" );
	deepEqual( Stem("automatique"), "automat" );
	deepEqual( Stem("automne"), "automn" );
	deepEqual( Stem("autorisait"), "autoris" );
	deepEqual( Stem("autorisation"), "autoris" );
	deepEqual( Stem("autorisations"), "autoris" );
	deepEqual( Stem("autorise"), "autoris" );
	deepEqual( Stem("autorisé"), "autoris" );
	deepEqual( Stem("autorisée"), "autoris" );
	deepEqual( Stem("autorisent"), "autorisent" );
	deepEqual( Stem("autorisera"), "autoris" );
	deepEqual( Stem("autoriserait"), "autoris" );
	deepEqual( Stem("autorité"), "autor" );
	deepEqual( Stem("autorités"), "autor" );
	deepEqual( Stem("autour"), "autour" );
	deepEqual( Stem("autre"), "autr" );
	deepEqual( Stem("autrefois"), "autrefois" );
	deepEqual( Stem("autrement"), "autr" );
	deepEqual( Stem("autres"), "autr" );
	deepEqual( Stem("autriche"), "autrich" );
	deepEqual( Stem("autrichien"), "autrichien" );
	deepEqual( Stem("autrichienne"), "autrichien" );
	deepEqual( Stem("autrichiennes"), "autrichien" );
	deepEqual( Stem("autrichiens"), "autrichien" );
	deepEqual( Stem("aux"), "aux" );
	deepEqual( Stem("auxiliaire"), "auxiliair" );
	deepEqual( Stem("auxquelles"), "auxquel" );
	deepEqual( Stem("auxquels"), "auxquel" );
	deepEqual( Stem("av"), "av" );
	deepEqual( Stem("avaient"), "avaient" );
	deepEqual( Stem("avais"), "avais" );
	deepEqual( Stem("avait"), "avait" );
	deepEqual( Stem("avala"), "aval" );
	deepEqual( Stem("avalé"), "aval" );
	deepEqual( Stem("avança"), "avanc" );
	deepEqual( Stem("avançaient"), "avanc" );
	deepEqual( Stem("avançait"), "avanc" );
	deepEqual( Stem("avançant"), "avanc" );
	deepEqual( Stem("avance"), "avanc" );
	deepEqual( Stem("avancé"), "avanc" );
	deepEqual( Stem("avancée"), "avanc" );
	deepEqual( Stem("avancement"), "avanc" );
	deepEqual( Stem("avancements"), "avanc" );
	deepEqual( Stem("avancent"), "avancent" );
	deepEqual( Stem("avancer"), "avanc" );
	deepEqual( Stem("avancera"), "avanc" );
	deepEqual( Stem("avancerait"), "avanc" );
	deepEqual( Stem("avancèrent"), "avanc" );
	deepEqual( Stem("avances"), "avanc" );
	deepEqual( Stem("avancés"), "avanc" );
	deepEqual( Stem("avancez"), "avanc" );
	deepEqual( Stem("avanie"), "avan" );
	deepEqual( Stem("avanies"), "avan" );
	deepEqual( Stem("avant"), "avant" );
	deepEqual( Stem("avantage"), "avantag" );
	deepEqual( Stem("avantages"), "avantag" );
	deepEqual( Stem("avantageuse"), "avantag" );
	deepEqual( Stem("avantageusement"), "avantag" );
	deepEqual( Stem("avantageux"), "avantag" );
	deepEqual( Stem("avare"), "avar" );
	deepEqual( Stem("avarice"), "avaric" );
	deepEqual( Stem("avarie"), "avar" );
	deepEqual( Stem("avaries"), "avar" );
	deepEqual( Stem("ave"), "ave" );
	deepEqual( Stem("avec"), "avec" );
	deepEqual( Stem("avenir"), "aven" );
	deepEqual( Stem("aventure"), "aventur" );
	deepEqual( Stem("aventurent"), "aventurent" );
	deepEqual( Stem("aventurer"), "aventur" );
	deepEqual( Stem("aventures"), "aventur" );
	deepEqual( Stem("aventureuse"), "aventur" );
	deepEqual( Stem("aventureux"), "aventur" );
	deepEqual( Stem("avenues"), "avenu" );
	deepEqual( Stem("avéré"), "aver" );
	deepEqual( Stem("averse"), "avers" );
	deepEqual( Stem("aversion"), "avers" );
	deepEqual( Stem("averti"), "avert" );
	deepEqual( Stem("avertie"), "avert" );
	deepEqual( Stem("averties"), "avert" );
	deepEqual( Stem("avertir"), "avert" );
	deepEqual( Stem("avertira"), "avert" );
	deepEqual( Stem("avertis"), "avert" );
	deepEqual( Stem("avertissait"), "avert" );
	deepEqual( Stem("avertissant"), "avert" );
	deepEqual( Stem("avertissement"), "avert" );
	deepEqual( Stem("avertit"), "avert" );
	deepEqual( Stem("aveu"), "aveu" );
	deepEqual( Stem("aveugle"), "aveugl" );
	deepEqual( Stem("aveuglé"), "aveugl" );
	deepEqual( Stem("aveuglée"), "aveugl" );
	deepEqual( Stem("aveuglement"), "aveugl" );
	deepEqual( Stem("aveuglément"), "aveugl" );
	deepEqual( Stem("aveugles"), "aveugl" );
	deepEqual( Stem("aveux"), "aveux" );
	deepEqual( Stem("aveyron"), "aveyron" );
	deepEqual( Stem("avez"), "avez" );
	deepEqual( Stem("avide"), "avid" );
	deepEqual( Stem("avidement"), "avid" );
	deepEqual( Stem("avidité"), "avid" );
	deepEqual( Stem("aviez"), "avi" );
	deepEqual( Stem("avilie"), "avil" );
	deepEqual( Stem("avilir"), "avil" );
	deepEqual( Stem("avilirait"), "avil" );
	deepEqual( Stem("avilissant"), "avil" );
	deepEqual( Stem("avilissantes"), "avil" );
	deepEqual( Stem("avilit"), "avil" );
	deepEqual( Stem("avions"), "avion" );
	deepEqual( Stem("aviron"), "aviron" );
	deepEqual( Stem("avis"), "avis" );
	deepEqual( Stem("avisa"), "avis" );
	deepEqual( Stem("avisais"), "avis" );
	deepEqual( Stem("avisait"), "avis" );
	deepEqual( Stem("avise"), "avis" );
	deepEqual( Stem("avisé"), "avis" );
	deepEqual( Stem("avisée"), "avis" );
	deepEqual( Stem("aviser"), "avis" );
	deepEqual( Stem("aviserai"), "avis" );
	deepEqual( Stem("aviserait"), "avis" );
	deepEqual( Stem("aviserons"), "avis" );
	deepEqual( Stem("avises"), "avis" );
	deepEqual( Stem("avocat"), "avocat" );
	deepEqual( Stem("avocats"), "avocat" );
	deepEqual( Stem("avoine"), "avoin" );
	deepEqual( Stem("avoir"), "avoir" );
	deepEqual( Stem("avons"), "avon" );
	deepEqual( Stem("avoua"), "avou" );
	deepEqual( Stem("avouai"), "avou" );
	deepEqual( Stem("avouait"), "avou" );
	deepEqual( Stem("avouât"), "avou" );
	deepEqual( Stem("avoue"), "avou" );
	deepEqual( Stem("avoué"), "avou" );
	deepEqual( Stem("avouent"), "avouent" );
	deepEqual( Stem("avouer"), "avou" );
	deepEqual( Stem("avouera"), "avou" );
	deepEqual( Stem("avouerai"), "avou" );
	deepEqual( Stem("avouerons"), "avou" );
	deepEqual( Stem("avoués"), "avou" );
	deepEqual( Stem("avouez"), "avou" );
	deepEqual( Stem("avril"), "avril" );
	deepEqual( Stem("avviamento"), "avviamento" );
	deepEqual( Stem("away"), "away" );
	deepEqual( Stem("axe"), "axe" );
	deepEqual( Stem("ayant"), "ayant" );
	deepEqual( Stem("ayez"), "ayez" );
	deepEqual( Stem("aymon"), "aymon" );
	deepEqual( Stem("ayons"), "ayon" );
	deepEqual( Stem("azur"), "azur" );
	deepEqual( Stem("b"), "b" );
	deepEqual( Stem("bab"), "bab" );
	deepEqual( Stem("bâbord"), "bâbord" );
	deepEqual( Stem("babouches"), "babouch" );
	deepEqual( Stem("babylone"), "babylon" );
	deepEqual( Stem("bac"), "bac" );
	deepEqual( Stem("bacchus"), "bacchus" );
	deepEqual( Stem("back"), "back" );
	deepEqual( Stem("bad"), "bad" );
	deepEqual( Stem("badaud"), "badaud" );
	deepEqual( Stem("badauderie"), "badauder" );
	deepEqual( Stem("baden"), "baden" );
	deepEqual( Stem("badin"), "badin" );
	deepEqual( Stem("badine"), "badin" );
	deepEqual( Stem("bafouait"), "bafou" );
	deepEqual( Stem("bagage"), "bagag" );
	deepEqual( Stem("bagages"), "bagag" );
	deepEqual( Stem("bagarre"), "bagarr" );
	deepEqual( Stem("bagatelle"), "bagatel" );
	deepEqual( Stem("bagne"), "bagn" );
	deepEqual( Stem("bague"), "bagu" );
	deepEqual( Stem("bagues"), "bagu" );
	deepEqual( Stem("baguette"), "baguet" );
	deepEqual( Stem("bah"), "bah" );
	deepEqual( Stem("baie"), "bai" );
	deepEqual( Stem("baigné"), "baign" );
	deepEqual( Stem("baignée"), "baign" );
	deepEqual( Stem("baigner"), "baign" );
	deepEqual( Stem("baignés"), "baign" );
	deepEqual( Stem("bail"), "bail" );
	deepEqual( Stem("bâillait"), "bâill" );
	deepEqual( Stem("bâillant"), "bâill" );
	deepEqual( Stem("bâillement"), "bâill" );
	deepEqual( Stem("bâiller"), "bâill" );
	deepEqual( Stem("bâillon"), "bâillon" );
	deepEqual( Stem("baïonnette"), "baïonnet" );
	deepEqual( Stem("baïonnettes"), "baïonnet" );
	deepEqual( Stem("baisa"), "bais" );
	deepEqual( Stem("baisai"), "bais" );
	deepEqual( Stem("baisait"), "bais" );
	deepEqual( Stem("baisant"), "bais" );
	deepEqual( Stem("baise"), "bais" );
	deepEqual( Stem("baiser"), "bais" );
	deepEqual( Stem("baisers"), "baiser" );
	deepEqual( Stem("baissa"), "baiss" );
	deepEqual( Stem("baissait"), "baiss" );
	deepEqual( Stem("baissant"), "baiss" );
	deepEqual( Stem("baisse"), "baiss" );
	deepEqual( Stem("baissé"), "baiss" );
	deepEqual( Stem("baissée"), "baiss" );
	deepEqual( Stem("baisser"), "baiss" );
	deepEqual( Stem("baissèrent"), "baiss" );
	deepEqual( Stem("baissés"), "baiss" );
	deepEqual( Stem("bajocs"), "bajoc" );
	deepEqual( Stem("bal"), "bal" );
	deepEqual( Stem("baladins"), "baladin" );
	deepEqual( Stem("balançait"), "balanc" );
	deepEqual( Stem("balance"), "balanc" );
	deepEqual( Stem("balancée"), "balanc" );
	deepEqual( Stem("balancement"), "balanc" );
	deepEqual( Stem("balancer"), "balanc" );
	deepEqual( Stem("balances"), "balanc" );
	deepEqual( Stem("balancier"), "balanci" );
	deepEqual( Stem("balayé"), "balai" );
	deepEqual( Stem("balayés"), "balai" );
	deepEqual( Stem("balbi"), "balb" );
	deepEqual( Stem("balbutia"), "balbuti" );
	deepEqual( Stem("balbutiant"), "balbuti" );
	deepEqual( Stem("balcon"), "balcon" );
	deepEqual( Stem("balcons"), "balcon" );
	deepEqual( Stem("baldaquin"), "baldaquin" );
	deepEqual( Stem("baldi"), "bald" );
	deepEqual( Stem("balivernes"), "balivern" );
	deepEqual( Stem("balland"), "balland" );
	deepEqual( Stem("ballants"), "ball" );
	deepEqual( Stem("balle"), "ball" );
	deepEqual( Stem("balles"), "ball" );
	deepEqual( Stem("ballet"), "ballet" );
	deepEqual( Stem("ballon"), "ballon" );
	deepEqual( Stem("balourd"), "balourd" );
	deepEqual( Stem("balourdise"), "balourdis" );
	deepEqual( Stem("balourdises"), "balourdis" );
	deepEqual( Stem("bals"), "bal" );
	deepEqual( Stem("balustrade"), "balustrad" );
	deepEqual( Stem("bamboches"), "bamboch" );
	deepEqual( Stem("bambou"), "bambou" );
	deepEqual( Stem("bambous"), "bambous" );
	deepEqual( Stem("bambousiers"), "bambousi" );
	deepEqual( Stem("ban"), "ban" );
	deepEqual( Stem("bananiers"), "banani" );
	deepEqual( Stem("banc"), "banc" );
	deepEqual( Stem("bancs"), "banc" );
	deepEqual( Stem("bande"), "band" );
	deepEqual( Stem("bandé"), "band" );
	deepEqual( Stem("banderoles"), "banderol" );
	deepEqual( Stem("bandes"), "band" );
	deepEqual( Stem("bandits"), "bandit" );
	deepEqual( Stem("bandoulière"), "bandouli" );
	deepEqual( Stem("banians"), "banian" );
	deepEqual( Stem("bank"), "bank" );
	deepEqual( Stem("banni"), "bann" );
	deepEqual( Stem("bannie"), "bann" );
	deepEqual( Stem("bannières"), "banni" );
	deepEqual( Stem("bannir"), "bann" );
	deepEqual( Stem("banque"), "banqu" );
	deepEqual( Stem("banqueroute"), "banquerout" );
	deepEqual( Stem("banquette"), "banquet" );
	deepEqual( Stem("banquettes"), "banquet" );
	deepEqual( Stem("banquier"), "banqui" );
	deepEqual( Stem("banquière"), "banqui" );
	deepEqual( Stem("banquiers"), "banqui" );
	deepEqual( Stem("baptisé"), "baptis" );
	deepEqual( Stem("bar"), "bar" );
	deepEqual( Stem("baraque"), "baraqu" );
	deepEqual( Stem("barbare"), "barbar" );
	deepEqual( Stem("barbares"), "barbar" );
	deepEqual( Stem("barbarie"), "barbar" );
	deepEqual( Stem("barbe"), "barb" );
	deepEqual( Stem("barbiche"), "barbich" );
	deepEqual( Stem("barbier"), "barbi" );
	deepEqual( Stem("barbone"), "barbon" );
	deepEqual( Stem("barbotement"), "barbot" );
	deepEqual( Stem("barbouillait"), "barbouill" );
	deepEqual( Stem("barême"), "barêm" );
	deepEqual( Stem("bari"), "bar" );
	deepEqual( Stem("baring"), "baring" );
	deepEqual( Stem("bariolée"), "bariol" );
	deepEqual( Stem("barnave"), "barnav" );
	deepEqual( Stem("barnum"), "barnum" );
	deepEqual( Stem("baromètre"), "barometr" );
	deepEqual( Stem("baromètres"), "barometr" );
	deepEqual( Stem("baron"), "baron" );
	deepEqual( Stem("baronne"), "baron" );
	deepEqual( Stem("baronnie"), "baron" );
	deepEqual( Stem("barons"), "baron" );
	deepEqual( Stem("baroque"), "baroqu" );
	deepEqual( Stem("barque"), "barqu" );
	deepEqual( Stem("barques"), "barqu" );
	deepEqual( Stem("barra"), "barr" );
	deepEqual( Stem("barre"), "barr" );
	deepEqual( Stem("barreaux"), "barreau" );
	deepEqual( Stem("barrer"), "barr" );
	deepEqual( Stem("barricader"), "barricad" );
	deepEqual( Stem("barricadés"), "barricad" );
	deepEqual( Stem("barrière"), "barri" );
	deepEqual( Stem("barrières"), "barri" );
	deepEqual( Stem("barthélemy"), "barthélemy" );
	deepEqual( Stem("bas"), "bas" );
	deepEqual( Stem("basalte"), "basalt" );
	deepEqual( Stem("base"), "bas" );
	deepEqual( Stem("basée"), "bas" );
	deepEqual( Stem("bases"), "bas" );
	deepEqual( Stem("basile"), "basil" );
	deepEqual( Stem("basilique"), "basil" );
	deepEqual( Stem("basse"), "bass" );
	deepEqual( Stem("bassement"), "bass" );
	deepEqual( Stem("basses"), "bass" );
	deepEqual( Stem("bassesse"), "bassess" );
	deepEqual( Stem("bassesses"), "bassess" );
	deepEqual( Stem("bassin"), "bassin" );
	deepEqual( Stem("bassinet"), "bassinet" );
	deepEqual( Stem("bassins"), "bassin" );
	deepEqual( Stem("bassompierre"), "bassompierr" );
	deepEqual( Stem("bastingages"), "bastingag" );
	deepEqual( Stem("bastion"), "bastion" );
	deepEqual( Stem("bastions"), "bastion" );
	deepEqual( Stem("bat"), "bat" );
	deepEqual( Stem("bataille"), "bataill" );
	deepEqual( Stem("batailles"), "bataill" );
	deepEqual( Stem("bataillon"), "bataillon" );
	deepEqual( Stem("bataillons"), "bataillon" );
	deepEqual( Stem("bâtardise"), "bâtardis" );
	deepEqual( Stem("bateau"), "bateau" );
	deepEqual( Stem("bateaux"), "bateau" );
	deepEqual( Stem("batelier"), "bateli" );
	deepEqual( Stem("bateliers"), "bateli" );
	deepEqual( Stem("bathurst"), "bathurst" );
	deepEqual( Stem("bâti"), "bât" );
	deepEqual( Stem("bâtie"), "bât" );
	deepEqual( Stem("bâties"), "bât" );
	deepEqual( Stem("bâtiment"), "bât" );
	deepEqual( Stem("bâtiments"), "bât" );
	deepEqual( Stem("bâtir"), "bât" );
	deepEqual( Stem("bâtis"), "bât" );
	deepEqual( Stem("bâtissait"), "bât" );
	deepEqual( Stem("bâtissant"), "bât" );
	deepEqual( Stem("bâtisses"), "bât" );
	deepEqual( Stem("bâtisseur"), "bâtisseur" );
	deepEqual( Stem("bâtit"), "bât" );
	deepEqual( Stem("bâton"), "bâton" );
	deepEqual( Stem("bâtonne"), "bâton" );
	deepEqual( Stem("bâtons"), "bâton" );
	deepEqual( Stem("bats"), "bat" );
	deepEqual( Stem("battaient"), "batt" );
	deepEqual( Stem("battait"), "batt" );
	deepEqual( Stem("battant"), "batt" );
	deepEqual( Stem("battante"), "batt" );
	deepEqual( Stem("battants"), "batt" );
	deepEqual( Stem("batte"), "batt" );
	deepEqual( Stem("battement"), "batt" );
	deepEqual( Stem("battements"), "batt" );
	deepEqual( Stem("battent"), "battent" );
	deepEqual( Stem("batterie"), "batter" );
	deepEqual( Stem("battez"), "batt" );
	deepEqual( Stem("battistin"), "battistin" );
	deepEqual( Stem("battit"), "batt" );
	deepEqual( Stem("battrai"), "battr" );
	deepEqual( Stem("battrais"), "battr" );
	deepEqual( Stem("battras"), "battr" );
	deepEqual( Stem("battre"), "battr" );
	deepEqual( Stem("battrez"), "battr" );
	deepEqual( Stem("battriez"), "battr" );
	deepEqual( Stem("battu"), "battu" );
	deepEqual( Stem("battue"), "battu" );
	deepEqual( Stem("battus"), "battus" );
	deepEqual( Stem("batulcar"), "batulcar" );
	deepEqual( Stem("baume"), "baum" );
	deepEqual( Stem("bavard"), "bavard" );
	deepEqual( Stem("bavardage"), "bavardag" );
	deepEqual( Stem("bavardages"), "bavardag" );
	deepEqual( Stem("bavarde"), "bavard" );
	deepEqual( Stem("bavardes"), "bavard" );
	deepEqual( Stem("bavards"), "bavard" );
	deepEqual( Stem("bayadères"), "bayader" );
	deepEqual( Stem("bayard"), "bayard" );
	deepEqual( Stem("baylen"), "baylen" );
	deepEqual( Stem("bazar"), "bazar" );
	deepEqual( Stem("bazars"), "bazar" );
	deepEqual( Stem("bazin"), "bazin" );
	deepEqual( Stem("be"), "be" );
	deepEqual( Stem("béante"), "bé" );
	deepEqual( Stem("béatitudes"), "béatitud" );
	deepEqual( Stem("beau"), "beau" );
	deepEqual( Stem("beaucoup"), "beaucoup" );
	deepEqual( Stem("beauharnais"), "beauharn" );
	deepEqual( Stem("beaujolais"), "beaujol" );
	deepEqual( Stem("beaumarchais"), "beaumarch" );
	deepEqual( Stem("beauté"), "beaut" );
	deepEqual( Stem("beautés"), "beaut" );
	deepEqual( Stem("beauty"), "beauty" );
	deepEqual( Stem("beauvais"), "beauv" );
	deepEqual( Stem("beauvaisis"), "beauvais" );
	deepEqual( Stem("beauvoisis"), "beauvois" );
	deepEqual( Stem("beaux"), "beau" );
	deepEqual( Stem("bec"), "bec" );
	deepEqual( Stem("bêchait"), "bêch" );
	deepEqual( Stem("bêché"), "bêch" );
	deepEqual( Stem("bêcher"), "bêch" );
	deepEqual( Stem("becs"), "bec" );
	deepEqual( Stem("bédouin"), "bédouin" );
	deepEqual( Stem("beefsteacks"), "beefsteack" );
	deepEqual( Stem("bégayait"), "bégai" );
	deepEqual( Stem("béhar"), "béhar" );
	deepEqual( Stem("behind"), "behind" );
	deepEqual( Stem("békir"), "bek" );
	deepEqual( Stem("bel"), "bel" );
	deepEqual( Stem("belagio"), "belagio" );
	deepEqual( Stem("bélan"), "bélan" );
	deepEqual( Stem("belgique"), "belgiqu" );
	deepEqual( Stem("belgirate"), "belgirat" );
	deepEqual( Stem("belle"), "bel" );
	deepEqual( Stem("belles"), "bel" );
	deepEqual( Stem("belliqueux"), "belliqu" );
	deepEqual( Stem("belphégor"), "belphégor" );
	deepEqual( Stem("belvédère"), "belvéder" );
	deepEqual( Stem("ben"), "ben" );
	deepEqual( Stem("bénarès"), "bénares" );
	deepEqual( Stem("bénédiction"), "bénédict" );
	deepEqual( Stem("bénédictions"), "bénédict" );
	deepEqual( Stem("benefaciendo"), "benefaciendo" );
	deepEqual( Stem("bénéfice"), "bénéfic" );
	deepEqual( Stem("bénéfices"), "bénéfic" );
	deepEqual( Stem("benêt"), "benêt" );
	deepEqual( Stem("bengale"), "bengal" );
	deepEqual( Stem("bénis"), "ben" );
	deepEqual( Stem("bénit"), "ben" );
	deepEqual( Stem("bénite"), "bénit" );
	deepEqual( Stem("bénitier"), "béniti" );
	deepEqual( Stem("benjamin"), "benjamin" );
	deepEqual( Stem("benten"), "benten" );
	deepEqual( Stem("bentivoglio"), "bentivoglio" );
	deepEqual( Stem("béranger"), "bérang" );
	deepEqual( Stem("berceau"), "berceau" );
	deepEqual( Stem("bercer"), "berc" );
	deepEqual( Stem("bérésina"), "bérésin" );
	deepEqual( Stem("bergère"), "berger" );
	deepEqual( Stem("bergères"), "berger" );
	deepEqual( Stem("bernard"), "bernard" );
	deepEqual( Stem("berne"), "bern" );
	deepEqual( Stem("bertolotti"), "bertolott" );
	deepEqual( Stem("bertuccio"), "bertuccio" );
	deepEqual( Stem("besace"), "besac" );
	deepEqual( Stem("besançon"), "besançon" );
	deepEqual( Stem("besenval"), "besenval" );
	deepEqual( Stem("besogne"), "besogn" );
	deepEqual( Stem("besoin"), "besoin" );
	deepEqual( Stem("besoins"), "besoin" );
	deepEqual( Stem("bêta"), "bêt" );
	deepEqual( Stem("bétail"), "bétail" );
	deepEqual( Stem("bête"), "bêt" );
	deepEqual( Stem("bétel"), "bétel" );
	deepEqual( Stem("bêtement"), "bêt" );
	deepEqual( Stem("bêtes"), "bêt" );
	deepEqual( Stem("bêtise"), "bêtis" );
	deepEqual( Stem("bêtises"), "bêtis" );
	deepEqual( Stem("betrays"), "betray" );
	deepEqual( Stem("bettina"), "bettin" );
	deepEqual( Stem("beuglements"), "beugl" );
	deepEqual( Stem("beurre"), "beurr" );
	deepEqual( Stem("beuve"), "beuv" );
	deepEqual( Stem("bévue"), "bévu" );
	deepEqual( Stem("bévues"), "bévu" );
	deepEqual( Stem("biais"), "bi" );
	deepEqual( Stem("biaiser"), "biais" );
	deepEqual( Stem("bible"), "bibl" );
	deepEqual( Stem("bibliomane"), "biblioman" );
	deepEqual( Stem("bibliothèque"), "bibliothequ" );
	deepEqual( Stem("bibliothèques"), "bibliothequ" );
	deepEqual( Stem("biblique"), "bibliqu" );
	deepEqual( Stem("bibliques"), "bibliqu" );
	deepEqual( Stem("bielle"), "biel" );
	deepEqual( Stem("bien"), "bien" );
	deepEqual( Stem("bienfait"), "bienf" );
	deepEqual( Stem("bienfaiteur"), "bienfaiteur" );
	deepEqual( Stem("bienfaitrice"), "bienfaitric" );
	deepEqual( Stem("bienfaits"), "bienfait" );
	deepEqual( Stem("biens"), "bien" );
	deepEqual( Stem("bientôt"), "bientôt" );
	deepEqual( Stem("bienveillance"), "bienveil" );
	deepEqual( Stem("bienveillant"), "bienveil" );
	deepEqual( Stem("bienvenu"), "bienvenu" );
	deepEqual( Stem("bière"), "bier" );
	deepEqual( Stem("biftecks"), "bifteck" );
	deepEqual( Stem("bigarrée"), "bigarr" );
	deepEqual( Stem("bijou"), "bijou" );
	deepEqual( Stem("bijoux"), "bijoux" );
	deepEqual( Stem("bilieuse"), "bilieux" );
	deepEqual( Stem("bilieux"), "bilieux" );
	deepEqual( Stem("billard"), "billard" );
	deepEqual( Stem("billards"), "billard" );
	deepEqual( Stem("billet"), "billet" );
	deepEqual( Stem("billets"), "billet" );
	deepEqual( Stem("binder"), "bind" );
	deepEqual( Stem("binet"), "binet" );
	deepEqual( Stem("biographie"), "biograph" );
	deepEqual( Stem("birmingham"), "birmingham" );
	deepEqual( Stem("bisaïeul"), "bisaïeul" );
	deepEqual( Stem("biscaïens"), "biscaïen" );
	deepEqual( Stem("biscuit"), "biscuit" );
	deepEqual( Stem("biscuits"), "biscuit" );
	deepEqual( Stem("bisogna"), "bisogn" );
	deepEqual( Stem("bisons"), "bison" );
	deepEqual( Stem("bisontine"), "bisontin" );
	deepEqual( Stem("bisontins"), "bisontin" );
	deepEqual( Stem("bisontium"), "bisontium" );
	deepEqual( Stem("bitter"), "bitt" );
	deepEqual( Stem("bivouac"), "bivouac" );
	deepEqual( Stem("bivouacs"), "bivouac" );
	deepEqual( Stem("bivouaquaient"), "bivouaqu" );
	deepEqual( Stem("bizarre"), "bizarr" );
	deepEqual( Stem("bizarrerie"), "bizarrer" );
	deepEqual( Stem("bizarres"), "bizarr" );
	deepEqual( Stem("blackest"), "blackest" );
	deepEqual( Stem("blafarde"), "blafard" );
	deepEqual( Stem("blâma"), "blâm" );
	deepEqual( Stem("blâmable"), "blâmabl" );
	deepEqual( Stem("blâmables"), "blâmabl" );
	deepEqual( Stem("blâmait"), "blâm" );
	deepEqual( Stem("blâme"), "blâm" );
	deepEqual( Stem("blâmé"), "blâm" );
	deepEqual( Stem("blâmée"), "blâm" );
	deepEqual( Stem("blâmer"), "blâm" );
	deepEqual( Stem("blâmés"), "blâm" );
	deepEqual( Stem("blanc"), "blanc" );
	deepEqual( Stem("blanche"), "blanch" );
	deepEqual( Stem("blanches"), "blanch" );
	deepEqual( Stem("blancheur"), "blancheur" );
	deepEqual( Stem("blanchie"), "blanch" );
	deepEqual( Stem("blanchies"), "blanch" );
	deepEqual( Stem("blanchis"), "blanch" );
	deepEqual( Stem("blanchisseuse"), "blanchiss" );
	deepEqual( Stem("blancs"), "blanc" );
	deepEqual( Stem("bland"), "bland" );
	deepEqual( Stem("blanès"), "blanes" );
	deepEqual( Stem("blason"), "blason" );
	deepEqual( Stem("blasphème"), "blasphem" );
	deepEqual( Stem("blasphémé"), "blasphem" );
	deepEqual( Stem("blé"), "blé" );
	deepEqual( Stem("blême"), "blêm" );
	deepEqual( Stem("blés"), "blé" );
	deepEqual( Stem("blessa"), "bless" );
	deepEqual( Stem("blessaient"), "bless" );
	deepEqual( Stem("blessant"), "bless" );
	deepEqual( Stem("blesse"), "bless" );
	deepEqual( Stem("blessé"), "bless" );
	deepEqual( Stem("blessée"), "bless" );
	deepEqual( Stem("blesser"), "bless" );
	deepEqual( Stem("blesserait"), "bless" );
	deepEqual( Stem("blessés"), "bless" );
	deepEqual( Stem("blessez"), "bless" );
	deepEqual( Stem("blessure"), "blessur" );
	deepEqual( Stem("blessures"), "blessur" );
	deepEqual( Stem("bleu"), "bleu" );
	deepEqual( Stem("bleuâtre"), "bleuâtr" );
	deepEqual( Stem("bleuâtres"), "bleuâtr" );
	deepEqual( Stem("bleue"), "bleu" );
	deepEqual( Stem("bleues"), "bleu" );
	deepEqual( Stem("bleus"), "bleus" );
	deepEqual( Stem("bloc"), "bloc" );
	deepEqual( Stem("blocs"), "bloc" );
	deepEqual( Stem("blond"), "blond" );
	deepEqual( Stem("blonde"), "blond" );
	deepEqual( Stem("blondin"), "blondin" );
	deepEqual( Stem("blonds"), "blond" );
	deepEqual( Stem("blood"), "blood" );
	deepEqual( Stem("blottie"), "blott" );
	deepEqual( Stem("blottirent"), "blott" );
	deepEqual( Stem("blottit"), "blott" );
	deepEqual( Stem("blue"), "blu" );
	deepEqual( Stem("bluffs"), "bluff" );
	deepEqual( Stem("blushes"), "blush" );
	deepEqual( Stem("boat"), "boat" );
	deepEqual( Stem("boats"), "boat" );
	deepEqual( Stem("boeuf"), "boeuf" );
	deepEqual( Stem("boeufs"), "boeuf" );
	deepEqual( Stem("boire"), "boir" );
	deepEqual( Stem("bois"), "bois" );
	deepEqual( Stem("boisé"), "bois" );
	deepEqual( Stem("boiserie"), "boiser" );
	deepEqual( Stem("boisson"), "boisson" );
	deepEqual( Stem("boissons"), "boisson" );
	deepEqual( Stem("boit"), "boit" );
	deepEqual( Stem("boîte"), "boît" );
	deepEqual( Stem("boîtes"), "boît" );
	deepEqual( Stem("boiteux"), "boiteux" );
	deepEqual( Stem("bologne"), "bologn" );
	deepEqual( Stem("bombace"), "bombac" );
	deepEqual( Stem("bombardé"), "bombard" );
	deepEqual( Stem("bombay"), "bombay" );
	deepEqual( Stem("bombe"), "bomb" );
	deepEqual( Stem("bombes"), "bomb" );
	deepEqual( Stem("bombés"), "bomb" );
	deepEqual( Stem("bon"), "bon" );
	deepEqual( Stem("bona"), "bon" );
	deepEqual( Stem("bonaparte"), "bonapart" );
	deepEqual( Stem("bonapartiste"), "bonapart" );
	deepEqual( Stem("bonaventure"), "bonaventur" );
	deepEqual( Stem("bondir"), "bond" );
	deepEqual( Stem("bondissait"), "bond" );
	deepEqual( Stem("bondissant"), "bond" );
	deepEqual( Stem("bondit"), "bond" );
	deepEqual( Stem("bonds"), "bond" );
	deepEqual( Stem("bone"), "bon" );
	deepEqual( Stem("bonheur"), "bonheur" );
	deepEqual( Stem("bonheurs"), "bonheur" );
	deepEqual( Stem("bonhomie"), "bonhom" );
	deepEqual( Stem("bonhomme"), "bonhomm" );
	deepEqual( Stem("boniface"), "bonifac" );
	deepEqual( Stem("bonne"), "bon" );
	deepEqual( Stem("bonnement"), "bon" );
	deepEqual( Stem("bonnes"), "bon" );
	deepEqual( Stem("bonnet"), "bonnet" );
	deepEqual( Stem("bonnets"), "bonnet" );
	deepEqual( Stem("bons"), "bon" );
	deepEqual( Stem("bonshommes"), "bonshomm" );
	deepEqual( Stem("bonsoir"), "bonsoir" );
	deepEqual( Stem("bonté"), "bont" );
	deepEqual( Stem("bontés"), "bont" );
	deepEqual( Stem("bonzeries"), "bonzer" );
	deepEqual( Stem("bonzes"), "bonz" );
	deepEqual( Stem("booby"), "booby" );
	deepEqual( Stem("bord"), "bord" );
	deepEqual( Stem("borda"), "bord" );
	deepEqual( Stem("bordaient"), "bord" );
	deepEqual( Stem("bordait"), "bord" );
	deepEqual( Stem("bordé"), "bord" );
	deepEqual( Stem("bordeaux"), "bordeau" );
	deepEqual( Stem("bordée"), "bord" );
	deepEqual( Stem("bordées"), "bord" );
	deepEqual( Stem("bordent"), "bordent" );
	deepEqual( Stem("bordés"), "bord" );
	deepEqual( Stem("bords"), "bord" );
	deepEqual( Stem("bordures"), "bordur" );
	deepEqual( Stem("borgo"), "borgo" );
	deepEqual( Stem("borna"), "born" );
	deepEqual( Stem("bornaient"), "born" );
	deepEqual( Stem("bornait"), "born" );
	deepEqual( Stem("borne"), "born" );
	deepEqual( Stem("borné"), "born" );
	deepEqual( Stem("bornes"), "born" );
	deepEqual( Stem("borone"), "boron" );
	deepEqual( Stem("borso"), "borso" );
	deepEqual( Stem("bosco"), "bosco" );
	deepEqual( Stem("bosse"), "boss" );
	deepEqual( Stem("bosses"), "boss" );
	deepEqual( Stem("bossi"), "boss" );
	deepEqual( Stem("bossuet"), "bossuet" );
	deepEqual( Stem("botanique"), "botan" );
	deepEqual( Stem("botte"), "bott" );
	deepEqual( Stem("bottes"), "bott" );
	deepEqual( Stem("bottier"), "botti" );
	deepEqual( Stem("bouche"), "bouch" );
	deepEqual( Stem("boucher"), "bouch" );
	deepEqual( Stem("boucherie"), "boucher" );
	deepEqual( Stem("bouchers"), "boucher" );
	deepEqual( Stem("bouches"), "bouch" );
	deepEqual( Stem("boucles"), "boucl" );
	deepEqual( Stem("bouclés"), "boucl" );
	deepEqual( Stem("bouclez"), "boucl" );
	deepEqual( Stem("bouclier"), "boucli" );
	deepEqual( Stem("bouddhisme"), "bouddhism" );
	deepEqual( Stem("bouddhiste"), "bouddhist" );
	deepEqual( Stem("bouder"), "boud" );
	deepEqual( Stem("boudeur"), "boudeur" );
	deepEqual( Stem("boudeurs"), "boudeur" );
	deepEqual( Stem("boue"), "bou" );
	deepEqual( Stem("bouffe"), "bouff" );
	deepEqual( Stem("bouffée"), "bouff" );
	deepEqual( Stem("bouffées"), "bouff" );
	deepEqual( Stem("bouffes"), "bouff" );
	deepEqual( Stem("bouffonnerie"), "bouffonner" );
	deepEqual( Stem("bouffonneries"), "bouffonner" );
	deepEqual( Stem("bougeait"), "boug" );
	deepEqual( Stem("bougeoir"), "bougeoir" );
	deepEqual( Stem("bouger"), "boug" );
	deepEqual( Stem("bougera"), "boug" );
	deepEqual( Stem("bougez"), "boug" );
	deepEqual( Stem("bougie"), "boug" );
	deepEqual( Stem("bougies"), "boug" );
	deepEqual( Stem("bougon"), "bougon" );
	deepEqual( Stem("bouillait"), "bouill" );
	deepEqual( Stem("bouillant"), "bouill" );
	deepEqual( Stem("bouillante"), "bouill" );
	deepEqual( Stem("bouilli"), "bouill" );
	deepEqual( Stem("bouillir"), "bouill" );
	deepEqual( Stem("bouillon"), "bouillon" );
	deepEqual( Stem("boulangers"), "boulanger" );
	deepEqual( Stem("boule"), "boul" );
	deepEqual( Stem("bouledogue"), "bouledogu" );
	deepEqual( Stem("boulet"), "boulet" );
	deepEqual( Stem("boulets"), "boulet" );
	deepEqual( Stem("boulettes"), "boulet" );
	deepEqual( Stem("boulevard"), "boulevard" );
	deepEqual( Stem("bouleversa"), "boulevers" );
	deepEqual( Stem("bouleversaient"), "boulevers" );
	deepEqual( Stem("bouleverse"), "boulevers" );
	deepEqual( Stem("bouleversé"), "boulevers" );
	deepEqual( Stem("bouleversée"), "boulevers" );
	deepEqual( Stem("bouleversés"), "boulevers" );
	deepEqual( Stem("boulogne"), "boulogn" );
	deepEqual( Stem("boulons"), "boulon" );
	deepEqual( Stem("boulot"), "boulot" );
	deepEqual( Stem("bouquer"), "bouqu" );
	deepEqual( Stem("bouquet"), "bouquet" );
	deepEqual( Stem("bouquets"), "bouquet" );
	deepEqual( Stem("bourbeux"), "bourbeux" );
	deepEqual( Stem("bourbier"), "bourbi" );
	deepEqual( Stem("bourbiers"), "bourbi" );
	deepEqual( Stem("bourbons"), "bourbon" );
	deepEqual( Stem("bourdon"), "bourdon" );
	deepEqual( Stem("bourdonnement"), "bourdon" );
	deepEqual( Stem("bourdonnements"), "bourdon" );
	deepEqual( Stem("bourg"), "bourg" );
	deepEqual( Stem("bourgade"), "bourgad" );
	deepEqual( Stem("bourgades"), "bourgad" );
	deepEqual( Stem("bourgeois"), "bourgeois" );
	deepEqual( Stem("bourgeoise"), "bourgeois" );
	deepEqual( Stem("bourgeoises"), "bourgeois" );
	deepEqual( Stem("bourgeoisie"), "bourgeois" );
	deepEqual( Stem("bourgeons"), "bourgeon" );
	deepEqual( Stem("bourgogne"), "bourgogn" );
	deepEqual( Stem("bourguignon"), "bourguignon" );
	deepEqual( Stem("bourguignons"), "bourguignon" );
	deepEqual( Stem("bourrasque"), "bourrasqu" );
	deepEqual( Stem("bourrasques"), "bourrasqu" );
	deepEqual( Stem("bourreau"), "bourreau" );
	deepEqual( Stem("bourreaux"), "bourreau" );
	deepEqual( Stem("bourrées"), "bourr" );
	deepEqual( Stem("bourrelée"), "bourrel" );
	deepEqual( Stem("bourrèlements"), "bourrel" );
	deepEqual( Stem("bourse"), "bours" );
	deepEqual( Stem("bourses"), "bours" );
	deepEqual( Stem("boursicot"), "boursicot" );
	deepEqual( Stem("bousculés"), "bouscul" );
	deepEqual( Stem("bout"), "bout" );
	deepEqual( Stem("boutade"), "boutad" );
	deepEqual( Stem("bouteille"), "bouteil" );
	deepEqual( Stem("bouteilles"), "bouteil" );
	deepEqual( Stem("boutique"), "boutiqu" );
	deepEqual( Stem("boutiques"), "boutiqu" );
	deepEqual( Stem("boutiquiers"), "boutiqui" );
	deepEqual( Stem("bouton"), "bouton" );
	deepEqual( Stem("boutonné"), "bouton" );
	deepEqual( Stem("boutonnière"), "boutonni" );
	deepEqual( Stem("boutons"), "bouton" );
	deepEqual( Stem("bouts"), "bout" );
	deepEqual( Stem("bow"), "bow" );
	deepEqual( Stem("boxe"), "box" );
	deepEqual( Stem("bracelets"), "bracelet" );
	deepEqual( Stem("bradshaw"), "bradshaw" );
	deepEqual( Stem("brahma"), "brahm" );
	deepEqual( Stem("brahmanes"), "brahman" );
	deepEqual( Stem("brahmanique"), "brahman" );
	deepEqual( Stem("brahmaniques"), "brahman" );
	deepEqual( Stem("branchages"), "branchag" );
	deepEqual( Stem("branche"), "branch" );
	deepEqual( Stem("branches"), "branch" );
	deepEqual( Stem("brandissant"), "brand" );
	deepEqual( Stem("brandy"), "brandy" );
	deepEqual( Stem("branlante"), "branl" );
	deepEqual( Stem("branle"), "branl" );
	deepEqual( Stem("brantôme"), "brantôm" );
	deepEqual( Stem("bras"), "bras" );
	deepEqual( Stem("brasses"), "brass" );
	deepEqual( Stem("brasseur"), "brasseur" );
	deepEqual( Stem("bravade"), "bravad" );
	deepEqual( Stem("bravait"), "brav" );
	deepEqual( Stem("brave"), "brav" );
	deepEqual( Stem("bravé"), "brav" );
	deepEqual( Stem("bravée"), "brav" );
	deepEqual( Stem("bravement"), "brav" );
	deepEqual( Stem("bravent"), "bravent" );
	deepEqual( Stem("braver"), "brav" );
	deepEqual( Stem("braverais"), "brav" );
	deepEqual( Stem("braves"), "brav" );
	deepEqual( Stem("bravi"), "brav" );
	deepEqual( Stem("bravissimo"), "bravissimo" );
	deepEqual( Stem("bravo"), "bravo" );
	deepEqual( Stem("bravoure"), "bravour" );
	deepEqual( Stem("bray"), "bray" );
	deepEqual( Stem("brebis"), "breb" );
	deepEqual( Stem("bref"), "bref" );
	deepEqual( Stem("brefs"), "bref" );
	deepEqual( Stem("brescia"), "bresci" );
	deepEqual( Stem("brésil"), "brésil" );
	deepEqual( Stem("bretagne"), "bretagn" );
	deepEqual( Stem("brève"), "brev" );
	deepEqual( Stem("brèves"), "brev" );
	deepEqual( Stem("brevet"), "brevet" );
	deepEqual( Stem("brevets"), "brevet" );
	deepEqual( Stem("bréviaire"), "bréviair" );
	deepEqual( Stem("brick"), "brick" );
	deepEqual( Stem("bride"), "brid" );
	deepEqual( Stem("bridés"), "brid" );
	deepEqual( Stem("bridger"), "bridg" );
	deepEqual( Stem("bridon"), "bridon" );
	deepEqual( Stem("brigade"), "brigad" );
	deepEqual( Stem("brigadier"), "brigadi" );
	deepEqual( Stem("brigadiers"), "brigadi" );
	deepEqual( Stem("brigand"), "brigand" );
	deepEqual( Stem("brigands"), "brigand" );
	deepEqual( Stem("brigantine"), "brigantin" );
	deepEqual( Stem("brigham"), "brigham" );
	deepEqual( Stem("brighella"), "brighel" );
	deepEqual( Stem("brilla"), "brill" );
	deepEqual( Stem("brillaient"), "brill" );
	deepEqual( Stem("brillait"), "brill" );
	deepEqual( Stem("brillamment"), "brill" );
	deepEqual( Stem("brillant"), "brill" );
	deepEqual( Stem("brillante"), "brill" );
	deepEqual( Stem("brillantes"), "brill" );
	deepEqual( Stem("brillants"), "brill" );
	deepEqual( Stem("brille"), "brill" );
	deepEqual( Stem("brillé"), "brill" );
	deepEqual( Stem("brillent"), "brillent" );
	deepEqual( Stem("briller"), "brill" );
	deepEqual( Stem("brillèrent"), "brill" );
	deepEqual( Stem("brindisi"), "brindis" );
	deepEqual( Stem("brins"), "brin" );
	deepEqual( Stem("brio"), "brio" );
	deepEqual( Stem("brique"), "briqu" );
	deepEqual( Stem("briques"), "briqu" );
	deepEqual( Stem("brisa"), "bris" );
	deepEqual( Stem("brisaient"), "bris" );
	deepEqual( Stem("brisait"), "bris" );
	deepEqual( Stem("brise"), "bris" );
	deepEqual( Stem("brisé"), "bris" );
	deepEqual( Stem("brisée"), "bris" );
	deepEqual( Stem("brisées"), "bris" );
	deepEqual( Stem("briser"), "bris" );
	deepEqual( Stem("brisèrent"), "bris" );
	deepEqual( Stem("brises"), "bris" );
	deepEqual( Stem("brisés"), "bris" );
	deepEqual( Stem("britannique"), "britann" );
	deepEqual( Stem("britannisée"), "britannis" );
	deepEqual( Stem("british"), "british" );
	deepEqual( Stem("broadway"), "broadway" );
	deepEqual( Stem("brocanteur"), "brocanteur" );
	deepEqual( Stem("brocart"), "brocart" );
	deepEqual( Stem("brochant"), "broch" );
	deepEqual( Stem("brochées"), "broch" );
	deepEqual( Stem("brochure"), "brochur" );
	deepEqual( Stem("brocs"), "broc" );
	deepEqual( Stem("brodé"), "brod" );
	deepEqual( Stem("brodées"), "brod" );
	deepEqual( Stem("broderie"), "broder" );
	deepEqual( Stem("broderies"), "broder" );
	deepEqual( Stem("brodés"), "brod" );
	deepEqual( Stem("bronché"), "bronch" );
	deepEqual( Stem("broncher"), "bronch" );
	deepEqual( Stem("bronze"), "bronz" );
	deepEqual( Stem("brosser"), "bross" );
	deepEqual( Stem("brouette"), "brouet" );
	deepEqual( Stem("brouettes"), "brouet" );
	deepEqual( Stem("brougham"), "brougham" );
	deepEqual( Stem("brouhaha"), "brouhah" );
	deepEqual( Stem("brouillaient"), "brouill" );
	deepEqual( Stem("brouillais"), "brouill" );
	deepEqual( Stem("brouillard"), "brouillard" );
	deepEqual( Stem("brouillards"), "brouillard" );
	deepEqual( Stem("brouille"), "brouill" );
	deepEqual( Stem("brouillé"), "brouill" );
	deepEqual( Stem("brouillée"), "brouill" );
	deepEqual( Stem("brouiller"), "brouill" );
	deepEqual( Stem("brouillerie"), "brouiller" );
	deepEqual( Stem("brouilleriez"), "brouill" );
	deepEqual( Stem("brouillerons"), "brouill" );
	deepEqual( Stem("brouilles"), "brouill" );
	deepEqual( Stem("brouillon"), "brouillon" );
	deepEqual( Stem("brouillons"), "brouillon" );
	deepEqual( Stem("broussailles"), "broussaill" );
	deepEqual( Stem("bruissement"), "bruissement" );
	deepEqual( Stem("bruit"), "bruit" );
	deepEqual( Stem("bruits"), "bruit" );
	deepEqual( Stem("brûla"), "brûl" );
	deepEqual( Stem("brûlaient"), "brûl" );
	deepEqual( Stem("brûlait"), "brûl" );
	deepEqual( Stem("brûlant"), "brûl" );
	deepEqual( Stem("brûlante"), "brûl" );
	deepEqual( Stem("brûlantes"), "brûl" );
	deepEqual( Stem("brûle"), "brûl" );
	deepEqual( Stem("brûlé"), "brûl" );
	deepEqual( Stem("brûlée"), "brûl" );
	deepEqual( Stem("brûlées"), "brûl" );
	deepEqual( Stem("brûler"), "brûl" );
	deepEqual( Stem("brûlerait"), "brûl" );
	deepEqual( Stem("brûlerez"), "brûl" );
	deepEqual( Stem("brûlés"), "brûl" );
	deepEqual( Stem("brûlons"), "brûlon" );
	deepEqual( Stem("brûlure"), "brûlur" );
	deepEqual( Stem("brume"), "brum" );
	deepEqual( Stem("brumes"), "brum" );
	deepEqual( Stem("brun"), "brun" );
	deepEqual( Stem("brune"), "brun" );
	deepEqual( Stem("bruno"), "bruno" );
	deepEqual( Stem("bruns"), "brun" );
	deepEqual( Stem("brusque"), "brusqu" );
	deepEqual( Stem("brusquement"), "brusqu" );
	deepEqual( Stem("brusquer"), "brusqu" );
	deepEqual( Stem("brusques"), "brusqu" );
	deepEqual( Stem("brut"), "brut" );
	deepEqual( Stem("brutal"), "brutal" );
	deepEqual( Stem("brutale"), "brutal" );
	deepEqual( Stem("brutalement"), "brutal" );
	deepEqual( Stem("brutalité"), "brutal" );
	deepEqual( Stem("brutes"), "brut" );
	deepEqual( Stem("brutus"), "brutus" );
	deepEqual( Stem("bruxelles"), "bruxel" );
	deepEqual( Stem("bruyamment"), "brui" );
	deepEqual( Stem("bruyant"), "brui" );
	deepEqual( Stem("bruyante"), "brui" );
	deepEqual( Stem("bruyantes"), "brui" );
	deepEqual( Stem("bruyants"), "brui" );
	deepEqual( Stem("bu"), "bu" );
	deepEqual( Stem("bubna"), "bubn" );
	deepEqual( Stem("bûcher"), "bûch" );
	deepEqual( Stem("budget"), "budget" );
	deepEqual( Stem("bue"), "bu" );
	deepEqual( Stem("buffa"), "buff" );
	deepEqual( Stem("buffalos"), "buffalos" );
	deepEqual( Stem("buffet"), "buffet" );
	deepEqual( Stem("buffles"), "buffl" );
	deepEqual( Stem("buis"), "buis" );
	deepEqual( Stem("buissons"), "buisson" );
	deepEqual( Stem("buli"), "bul" );
	deepEqual( Stem("bull"), "bull" );
	deepEqual( Stem("bulle"), "bull" );
	deepEqual( Stem("bulletin"), "bulletin" );
	deepEqual( Stem("bulletins"), "bulletin" );
	deepEqual( Stem("bulo"), "bulo" );
	deepEqual( Stem("bundelkund"), "bundelkund" );
	deepEqual( Stem("bungalow"), "bungalow" );
	deepEqual( Stem("bungalows"), "bungalow" );
	deepEqual( Stem("bunhyas"), "bunhi" );
	deepEqual( Stem("bunsby"), "bunsby" );
	deepEqual( Stem("buonaparte"), "buonapart" );
	deepEqual( Stem("buonaparté"), "buonapart" );
	deepEqual( Stem("burati"), "burat" );
	deepEqual( Stem("burdivan"), "burdivan" );
	deepEqual( Stem("burdwan"), "burdwan" );
	deepEqual( Stem("bureau"), "bureau" );
	deepEqual( Stem("bureaucratique"), "bureaucrat" );
	deepEqual( Stem("bureaux"), "bureau" );
	deepEqual( Stem("burhampour"), "burhampour" );
	deepEqual( Stem("burlesque"), "burlesqu" );
	deepEqual( Stem("burlington"), "burlington" );
	deepEqual( Stem("burning"), "burning" );
	deepEqual( Stem("busqué"), "busqu" );
	deepEqual( Stem("buste"), "bust" );
	deepEqual( Stem("bustos"), "bustos" );
	deepEqual( Stem("but"), "but" );
	deepEqual( Stem("butcher"), "butch" );
	deepEqual( Stem("butte"), "butt" );
	deepEqual( Stem("buvait"), "buv" );
	deepEqual( Stem("buvez"), "buv" );
	deepEqual( Stem("buvions"), "buvion" );
	deepEqual( Stem("buvons"), "buvon" );
	deepEqual( Stem("buxar"), "buxar" );
	deepEqual( Stem("by"), "by" );
	deepEqual( Stem("byron"), "byron" );
	deepEqual( Stem("c"), "c" );
	deepEqual( Stem("ça"), "ça" );
	deepEqual( Stem("çà"), "çà" );
	deepEqual( Stem("cab"), "cab" );
	deepEqual( Stem("cabale"), "cabal" );
	deepEqual( Stem("cabane"), "caban" );
	deepEqual( Stem("cabanes"), "caban" );
	deepEqual( Stem("cabaret"), "cabaret" );
	deepEqual( Stem("cabarets"), "cabaret" );
	deepEqual( Stem("cabine"), "cabin" );
	deepEqual( Stem("cabines"), "cabin" );
	deepEqual( Stem("cabinet"), "cabinet" );
	deepEqual( Stem("cabinets"), "cabinet" );
	deepEqual( Stem("cabotage"), "cabotag" );
	deepEqual( Stem("cabra"), "cabr" );
	deepEqual( Stem("cabrait"), "cabr" );
	deepEqual( Stem("cabrer"), "cabr" );
	deepEqual( Stem("cabriolet"), "cabriolet" );
	deepEqual( Stem("cacha"), "cach" );
	deepEqual( Stem("cachaient"), "cach" );
	deepEqual( Stem("cachais"), "cach" );
	deepEqual( Stem("cachait"), "cach" );
	deepEqual( Stem("cachant"), "cach" );
	deepEqual( Stem("cache"), "cach" );
	deepEqual( Stem("caché"), "cach" );
	deepEqual( Stem("cachée"), "cach" );
	deepEqual( Stem("cachées"), "cach" );
	deepEqual( Stem("cachemire"), "cachemir" );
	deepEqual( Stem("cachent"), "cachent" );
	deepEqual( Stem("cacher"), "cach" );
	deepEqual( Stem("cachera"), "cach" );
	deepEqual( Stem("cacherai"), "cach" );
	deepEqual( Stem("cacherait"), "cach" );
	deepEqual( Stem("cacherons"), "cach" );
	deepEqual( Stem("cachés"), "cach" );
	deepEqual( Stem("cachet"), "cachet" );
	deepEqual( Stem("cacheté"), "cachet" );
	deepEqual( Stem("cacheter"), "cachet" );
	deepEqual( Stem("cachette"), "cachet" );
	deepEqual( Stem("cachettes"), "cachet" );
	deepEqual( Stem("cachons"), "cachon" );
	deepEqual( Stem("cachot"), "cachot" );
	deepEqual( Stem("cachots"), "cachot" );
	deepEqual( Stem("cacolet"), "cacolet" );
	deepEqual( Stem("cacolets"), "cacolet" );
	deepEqual( Stem("cadavre"), "cadavr" );
	deepEqual( Stem("cadavres"), "cadavr" );
	deepEqual( Stem("cadeau"), "cadeau" );
	deepEqual( Stem("cadeaux"), "cadeau" );
	deepEqual( Stem("cadenabia"), "cadenabi" );
	deepEqual( Stem("cadenas"), "caden" );
	deepEqual( Stem("cadet"), "cadet" );
	deepEqual( Stem("cadets"), "cadet" );
	deepEqual( Stem("cadette"), "cadet" );
	deepEqual( Stem("cadran"), "cadran" );
	deepEqual( Stem("cadre"), "cadr" );
	deepEqual( Stem("cadres"), "cadr" );
	deepEqual( Stem("café"), "caf" );
	deepEqual( Stem("caféiers"), "caféi" );
	deepEqual( Stem("cafés"), "caf" );
	deepEqual( Stem("cage"), "cag" );
	deepEqual( Stem("cages"), "cag" );
	deepEqual( Stem("cagnola"), "cagnol" );
	deepEqual( Stem("cahier"), "cahi" );
	deepEqual( Stem("cahutes"), "cahut" );
	deepEqual( Stem("caillé"), "caill" );
	deepEqual( Stem("cailles"), "caill" );
	deepEqual( Stem("cailloux"), "cailloux" );
	deepEqual( Stem("caisse"), "caiss" );
	deepEqual( Stem("caisses"), "caiss" );
	deepEqual( Stem("caissier"), "caissi" );
	deepEqual( Stem("caissons"), "caisson" );
	deepEqual( Stem("cajoleries"), "cajoler" );
	deepEqual( Stem("calais"), "cal" );
	deepEqual( Stem("calcul"), "calcul" );
	deepEqual( Stem("calculait"), "calcul" );
	deepEqual( Stem("calculant"), "calcul" );
	deepEqual( Stem("calculateur"), "calcul" );
	deepEqual( Stem("calculé"), "calcul" );
	deepEqual( Stem("calculée"), "calcul" );
	deepEqual( Stem("calculées"), "calcul" );
	deepEqual( Stem("calculer"), "calcul" );
	deepEqual( Stem("calculs"), "calcul" );
	deepEqual( Stem("calcutta"), "calcutt" );
	deepEqual( Stem("calèche"), "calech" );
	deepEqual( Stem("calembour"), "calembour" );
	deepEqual( Stem("calembours"), "calembour" );
	deepEqual( Stem("calendrier"), "calendri" );
	deepEqual( Stem("californie"), "californ" );
	deepEqual( Stem("californienne"), "californien" );
	deepEqual( Stem("califourchon"), "califourchon" );
	deepEqual( Stem("câline"), "câlin" );
	deepEqual( Stem("call"), "call" );
	deepEqual( Stem("called"), "called" );
	deepEqual( Stem("callyan"), "callyan" );
	deepEqual( Stem("calm"), "calm" );
	deepEqual( Stem("calma"), "calm" );
	deepEqual( Stem("calme"), "calm" );
	deepEqual( Stem("calmer"), "calm" );
	deepEqual( Stem("calmerai"), "calm" );
	deepEqual( Stem("calmèrent"), "calm" );
	deepEqual( Stem("calmes"), "calm" );
	deepEqual( Stem("calmez"), "calm" );
	deepEqual( Stem("calomnie"), "calomn" );
	deepEqual( Stem("calomnié"), "calomni" );
	deepEqual( Stem("calomniée"), "calomni" );
	deepEqual( Stem("calomniées"), "calomni" );
	deepEqual( Stem("calomnier"), "calomni" );
	deepEqual( Stem("calomnieront"), "calomni" );
	deepEqual( Stem("calomnies"), "calomn" );
	deepEqual( Stem("calomnieuses"), "calomni" );
	deepEqual( Stem("calotin"), "calotin" );
	deepEqual( Stem("calotte"), "calott" );
	deepEqual( Stem("camarade"), "camarad" );
	deepEqual( Stem("camarades"), "camarad" );
	deepEqual( Stem("camarilla"), "camarill" );
	deepEqual( Stem("cambaye"), "cambay" );
	deepEqual( Stem("cambodge"), "cambodg" );
	deepEqual( Stem("cambrai"), "cambr" );
	deepEqual( Stem("cambrure"), "cambrur" );
	deepEqual( Stem("camélias"), "caméli" );
	deepEqual( Stem("cameriere"), "camerier" );
	deepEqual( Stem("camériste"), "camer" );
	deepEqual( Stem("camp"), "camp" );
	deepEqual( Stem("campagnards"), "campagnard" );
	deepEqual( Stem("campagne"), "campagn" );
	deepEqual( Stem("campagnes"), "campagn" );
	deepEqual( Stem("campaient"), "camp" );
	deepEqual( Stem("campé"), "camp" );
	deepEqual( Stem("can"), "can" );
	deepEqual( Stem("canaille"), "canaill" );
	deepEqual( Stem("canal"), "canal" );
	deepEqual( Stem("canapé"), "canap" );
	deepEqual( Stem("canards"), "canard" );
	deepEqual( Stem("cancer"), "canc" );
	deepEqual( Stem("candeur"), "candeur" );
	deepEqual( Stem("candidat"), "candidat" );
	deepEqual( Stem("candidats"), "candidat" );
	deepEqual( Stem("candidature"), "candidatur" );
	deepEqual( Stem("candide"), "candid" );
	deepEqual( Stem("cangos"), "cangos" );
	deepEqual( Stem("cani"), "can" );
	deepEqual( Stem("caniches"), "canich" );
	deepEqual( Stem("canif"), "canif" );
	deepEqual( Stem("canne"), "cann" );
	deepEqual( Stem("cannelle"), "cannel" );
	deepEqual( Stem("cannes"), "cann" );
	deepEqual( Stem("canon"), "canon" );
	deepEqual( Stem("canonique"), "canon" );
	deepEqual( Stem("canonnade"), "canonnad" );
	deepEqual( Stem("canonniers"), "canonni" );
	deepEqual( Stem("canons"), "canon" );
	deepEqual( Stem("canot"), "canot" );
	deepEqual( Stem("canots"), "canot" );
	deepEqual( Stem("canova"), "canov" );
	deepEqual( Stem("canta"), "cant" );
	deepEqual( Stem("cantate"), "cantat" );
	deepEqual( Stem("cantatrice"), "cantatric" );
	deepEqual( Stem("cantilène"), "cantilen" );
	deepEqual( Stem("cantinière"), "cantini" );
	deepEqual( Stem("cantiques"), "cantiqu" );
	deepEqual( Stem("canton"), "canton" );
	deepEqual( Stem("cantonnées"), "canton" );
	deepEqual( Stem("cantons"), "canton" );
	deepEqual( Stem("cap"), "cap" );
	deepEqual( Stem("capable"), "capabl" );
	deepEqual( Stem("capacité"), "capac" );
	deepEqual( Stem("caparaçonnés"), "caparaçon" );
	deepEqual( Stem("cape"), "cap" );
	deepEqual( Stem("capharnaüm"), "capharnaüm" );
	deepEqual( Stem("capillaire"), "capillair" );
	deepEqual( Stem("capitaine"), "capitain" );
	deepEqual( Stem("capitaines"), "capitain" );
	deepEqual( Stem("capital"), "capital" );
	deepEqual( Stem("capitale"), "capital" );
	deepEqual( Stem("capitani"), "capitan" );
	deepEqual( Stem("capitulation"), "capitul" );
	deepEqual( Stem("capon"), "capon" );
	deepEqual( Stem("caporal"), "caporal" );
	deepEqual( Stem("capot"), "capot" );
	deepEqual( Stem("caprice"), "capric" );
	deepEqual( Stem("caprices"), "capric" );
	deepEqual( Stem("capricieuse"), "caprici" );
	deepEqual( Stem("capricieusement"), "caprici" );
	deepEqual( Stem("capricieuses"), "caprici" );
	deepEqual( Stem("captivait"), "captiv" );
	deepEqual( Stem("captivité"), "captiv" );
	deepEqual( Stem("capture"), "captur" );
	deepEqual( Stem("capuche"), "capuch" );
	deepEqual( Stem("capuchons"), "capuchon" );
	deepEqual( Stem("capucin"), "capucin" );
	deepEqual( Stem("car"), "car" );
	deepEqual( Stem("carabine"), "carabin" );
	deepEqual( Stem("carabines"), "carabin" );
	deepEqual( Stem("carabiniers"), "carabini" );
	deepEqual( Stem("caractère"), "caracter" );
	deepEqual( Stem("caractères"), "caracter" );
	deepEqual( Stem("caractérisait"), "caractéris" );
	deepEqual( Stem("caractérise"), "caractéris" );
	deepEqual( Stem("caractéristique"), "caractérist" );
	deepEqual( Stem("carafe"), "caraf" );
	deepEqual( Stem("carbonaro"), "carbonaro" );
	deepEqual( Stem("carburé"), "carbur" );
	deepEqual( Stem("carcasse"), "carc" );
	deepEqual( Stem("cardif"), "cardif" );
	deepEqual( Stem("cardinal"), "cardinal" );
	deepEqual( Stem("cardinaux"), "cardinal" );
	deepEqual( Stem("caressa"), "caress" );
	deepEqual( Stem("caressait"), "caress" );
	deepEqual( Stem("caressant"), "caress" );
	deepEqual( Stem("caressants"), "caress" );
	deepEqual( Stem("caresse"), "caress" );
	deepEqual( Stem("caressent"), "caressent" );
	deepEqual( Stem("caresser"), "caress" );
	deepEqual( Stem("caresseraient"), "caress" );
	deepEqual( Stem("caresses"), "caress" );
	deepEqual( Stem("cargaison"), "cargaison" );
	deepEqual( Stem("caricature"), "caricatur" );
	deepEqual( Stem("carlino"), "carlino" );
	deepEqual( Stem("carlo"), "carlo" );
	deepEqual( Stem("carlone"), "carlon" );
	deepEqual( Stem("carnassiers"), "carnassi" );
	deepEqual( Stem("carnatic"), "carnatic" );
	deepEqual( Stem("carnaval"), "carnaval" );
	deepEqual( Stem("carnet"), "carnet" );
	deepEqual( Stem("carnot"), "carnot" );
	deepEqual( Stem("caro"), "caro" );
	deepEqual( Stem("caroline"), "carolin" );
	deepEqual( Stem("caron"), "caron" );
	deepEqual( Stem("caroubiers"), "caroubi" );
	deepEqual( Stem("carpe"), "carp" );
	deepEqual( Stem("carré"), "carr" );
	deepEqual( Stem("carreau"), "carreau" );
	deepEqual( Stem("carreaux"), "carreau" );
	deepEqual( Stem("carrée"), "carr" );
	deepEqual( Stem("carrefours"), "carrefour" );
	deepEqual( Stem("carrément"), "carr" );
	deepEqual( Stem("carrés"), "carr" );
	deepEqual( Stem("carrière"), "carri" );
	deepEqual( Stem("carrières"), "carri" );
	deepEqual( Stem("carrosse"), "carross" );
	deepEqual( Stem("carrosses"), "carross" );
	deepEqual( Stem("cars"), "car" );
	deepEqual( Stem("carson"), "carson" );
	deepEqual( Stem("carta"), "cart" );
	deepEqual( Stem("carte"), "cart" );
	deepEqual( Stem("cartes"), "cart" );
	deepEqual( Stem("carthage"), "carthag" );
	deepEqual( Stem("carton"), "carton" );
	deepEqual( Stem("cartons"), "carton" );
	deepEqual( Stem("cartouche"), "cartouch" );
	deepEqual( Stem("cartouches"), "cartouch" );
	deepEqual( Stem("cas"), "cas" );
	deepEqual( Stem("casa"), "cas" );
	deepEqual( Stem("casal"), "casal" );
	deepEqual( Stem("casanier"), "casani" );
	deepEqual( Stem("cascade"), "cascad" );
	deepEqual( Stem("cascades"), "cascad" );
	deepEqual( Stem("case"), "cas" );
	deepEqual( Stem("caserne"), "casern" );
	deepEqual( Stem("cases"), "cas" );
	deepEqual( Stem("casi"), "cas" );
	deepEqual( Stem("casimir"), "casim" );
	deepEqual( Stem("casino"), "casino" );
	deepEqual( Stem("casque"), "casqu" );
	deepEqual( Stem("casques"), "casqu" );
	deepEqual( Stem("cassa"), "cass" );
	deepEqual( Stem("cassait"), "cass" );
	deepEqual( Stem("cassandre"), "cassandr" );
	deepEqual( Stem("cassano"), "cassano" );
	deepEqual( Stem("cassât"), "cass" );
	deepEqual( Stem("casse"), "cass" );
	deepEqual( Stem("cassé"), "cass" );
	deepEqual( Stem("cassée"), "cass" );
	deepEqual( Stem("cassées"), "cass" );
	deepEqual( Stem("cassent"), "cassent" );
	deepEqual( Stem("casser"), "cass" );
	deepEqual( Stem("casserais"), "cass" );
	deepEqual( Stem("casseroles"), "casserol" );
	deepEqual( Stem("cassette"), "casset" );
	deepEqual( Stem("cassine"), "cassin" );
	deepEqual( Stem("castanède"), "castaned" );
	deepEqual( Stem("caste"), "cast" );
	deepEqual( Stem("castelnovo"), "castelnovo" );
	deepEqual( Stem("casti"), "cast" );
	deepEqual( Stem("casto"), "casto" );
	deepEqual( Stem("castorine"), "castorin" );
	deepEqual( Stem("castres"), "castr" );
	deepEqual( Stem("castries"), "castr" );
	deepEqual( Stem("casuel"), "casuel" );
	deepEqual( Stem("casuistes"), "casuist" );
	deepEqual( Stem("catanzara"), "catanzar" );
	deepEqual( Stem("catastrophe"), "catastroph" );
	deepEqual( Stem("catéchisme"), "catech" );
	deepEqual( Stem("catena"), "caten" );
	deepEqual( Stem("cathédrale"), "cathédral" );
	deepEqual( Stem("cathelineau"), "cathelineau" );
	deepEqual( Stem("catherine"), "catherin" );
	deepEqual( Stem("cattaro"), "cattaro" );
	deepEqual( Stem("cauchemar"), "cauchemar" );
	deepEqual( Stem("cauchemars"), "cauchemar" );
	deepEqual( Stem("caudataire"), "caudatair" );
	deepEqual( Stem("causa"), "caus" );
	deepEqual( Stem("causait"), "caus" );
	deepEqual( Stem("causant"), "caus" );
	deepEqual( Stem("cause"), "caus" );
	deepEqual( Stem("causé"), "caus" );
	deepEqual( Stem("causée"), "caus" );
	deepEqual( Stem("causer"), "caus" );
	deepEqual( Stem("causerait"), "caus" );
	deepEqual( Stem("causèrent"), "caus" );
	deepEqual( Stem("causes"), "caus" );
	deepEqual( Stem("causés"), "caus" );
	deepEqual( Stem("causeur"), "causeur" );
	deepEqual( Stem("caustique"), "caustiqu" );
	deepEqual( Stem("cauteleuse"), "cautel" );
	deepEqual( Stem("cauteleux"), "cautel" );
	deepEqual( Stem("caution"), "caution" );
	deepEqual( Stem("cautions"), "caution" );
	deepEqual( Stem("cavalerie"), "cavaler" );
	deepEqual( Stem("cavalier"), "cavali" );
	deepEqual( Stem("cavaliers"), "cavali" );
	deepEqual( Stem("cavallo"), "cavallo" );
	deepEqual( Stem("cave"), "cav" );
	deepEqual( Stem("caverne"), "cavern" );
	deepEqual( Stem("caves"), "cav" );
	deepEqual( Stem("cavi"), "cav" );
	deepEqual( Stem("caylus"), "caylus" );
	deepEqual( Stem("ce"), "ce" );
	deepEqual( Stem("ceci"), "cec" );
	deepEqual( Stem("céda"), "ced" );
	deepEqual( Stem("cédait"), "ced" );
	deepEqual( Stem("cédant"), "ced" );
	deepEqual( Stem("cédar"), "cédar" );
	deepEqual( Stem("cède"), "ced" );
	deepEqual( Stem("cédé"), "ced" );
	deepEqual( Stem("céder"), "ced" );
	deepEqual( Stem("cédera"), "ced" );
	deepEqual( Stem("céderons"), "ced" );
	deepEqual( Stem("cédez"), "ced" );
	deepEqual( Stem("cèdre"), "cedr" );
	deepEqual( Stem("cèdres"), "cedr" );
	deepEqual( Stem("ceignait"), "ceign" );
	deepEqual( Stem("ceinture"), "ceintur" );
	deepEqual( Stem("cela"), "cel" );
	deepEqual( Stem("célébra"), "célebr" );
	deepEqual( Stem("célébraient"), "célebr" );
	deepEqual( Stem("célébrait"), "célebr" );
	deepEqual( Stem("célèbre"), "célebr" );
	deepEqual( Stem("célébré"), "célebr" );
	deepEqual( Stem("célébrée"), "célebr" );
	deepEqual( Stem("célébrèrent"), "célebr" );
	deepEqual( Stem("célèbres"), "célebr" );
	deepEqual( Stem("célébrés"), "célebr" );
	deepEqual( Stem("céleste"), "célest" );
	deepEqual( Stem("célibataires"), "célibatair" );
	deepEqual( Stem("cella"), "cel" );
	deepEqual( Stem("celle"), "cel" );
	deepEqual( Stem("celles"), "cel" );
	deepEqual( Stem("cellier"), "celli" );
	deepEqual( Stem("cellule"), "cellul" );
	deepEqual( Stem("celui"), "celui" );
	deepEqual( Stem("cendré"), "cendr" );
	deepEqual( Stem("cendres"), "cendr" );
	deepEqual( Stem("cendrés"), "cendr" );
	deepEqual( Stem("cenis"), "cen" );
	deepEqual( Stem("censure"), "censur" );
	deepEqual( Stem("cent"), "cent" );
	deepEqual( Stem("centaine"), "centain" );
	deepEqual( Stem("centaines"), "centain" );
	deepEqual( Stem("centième"), "centiem" );
	deepEqual( Stem("centièmes"), "centiem" );
	deepEqual( Stem("centime"), "centim" );
	deepEqual( Stem("centimes"), "centim" );
	deepEqual( Stem("central"), "central" );
	deepEqual( Stem("centrale"), "central" );
	deepEqual( Stem("centre"), "centr" );
	deepEqual( Stem("centres"), "centr" );
	deepEqual( Stem("cents"), "cent" );
	deepEqual( Stem("centuplais"), "centupl" );
	deepEqual( Stem("centuplait"), "centupl" );
	deepEqual( Stem("centuplée"), "centupl" );
	deepEqual( Stem("cependant"), "cepend" );
	deepEqual( Stem("cercle"), "cercl" );
	deepEqual( Stem("cercles"), "cercl" );
	deepEqual( Stem("cérémonie"), "cérémon" );
	deepEqual( Stem("cérémonies"), "cérémon" );
	deepEqual( Stem("cérémonieuse"), "cérémoni" );
	deepEqual( Stem("cérès"), "céres" );
	deepEqual( Stem("cerf"), "cerf" );
	deepEqual( Stem("cerisiers"), "cerisi" );
	deepEqual( Stem("certain"), "certain" );
	deepEqual( Stem("certaine"), "certain" );
	deepEqual( Stem("certainement"), "certain" );
	deepEqual( Stem("certaines"), "certain" );
	deepEqual( Stem("certains"), "certain" );
	deepEqual( Stem("certes"), "cert" );
	deepEqual( Stem("certi"), "cert" );
	deepEqual( Stem("certificat"), "certificat" );
	deepEqual( Stem("certificats"), "certificat" );
	deepEqual( Stem("certifiera"), "certifi" );
	deepEqual( Stem("certitude"), "certitud" );
	deepEqual( Stem("certitudes"), "certitud" );
	deepEqual( Stem("cerveau"), "cerveau" );
	deepEqual( Stem("cervelle"), "cervel" );
	deepEqual( Stem("ces"), "ce" );
	deepEqual( Stem("césar"), "césar" );
	deepEqual( Stem("cesare"), "cesar" );
	deepEqual( Stem("cessa"), "cess" );
	deepEqual( Stem("cessaient"), "cess" );
	deepEqual( Stem("cessait"), "cess" );
	deepEqual( Stem("cessant"), "cess" );
	deepEqual( Stem("cessante"), "cess" );
	deepEqual( Stem("cessation"), "cessat" );
	deepEqual( Stem("cesse"), "cess" );
	deepEqual( Stem("cessé"), "cess" );
	deepEqual( Stem("cesser"), "cess" );
	deepEqual( Stem("cessera"), "cess" );
	deepEqual( Stem("cesserais"), "cess" );
	deepEqual( Stem("cesseras"), "cess" );
	deepEqual( Stem("cessèrent"), "cess" );
	deepEqual( Stem("cesseront"), "cess" );
	deepEqual( Stem("cessiez"), "cess" );
	deepEqual( Stem("cessions"), "cession" );
	deepEqual( Stem("cet"), "cet" );
	deepEqual( Stem("cette"), "cet" );
	deepEqual( Stem("ceux"), "ceux" );
	deepEqual( Stem("ceylan"), "ceylan" );
	deepEqual( Stem("ceylandais"), "ceyland" );
	deepEqual( Stem("chacun"), "chacun" );
	deepEqual( Stem("chacune"), "chacun" );
	deepEqual( Stem("chagrin"), "chagrin" );
	deepEqual( Stem("chagrine"), "chagrin" );
	deepEqual( Stem("chagriner"), "chagrin" );
	deepEqual( Stem("chagrins"), "chagrin" );
	deepEqual( Stem("chaîne"), "chaîn" );
	deepEqual( Stem("chaînes"), "chaîn" );
	deepEqual( Stem("chaînon"), "chaînon" );
	deepEqual( Stem("chaînons"), "chaînon" );
	deepEqual( Stem("chair"), "chair" );
	deepEqual( Stem("chaire"), "chair" );
	deepEqual( Stem("chaise"), "chais" );
	deepEqual( Stem("chaises"), "chais" );
	deepEqual( Stem("chalands"), "chaland" );
	deepEqual( Stem("châle"), "châl" );
	deepEqual( Stem("chaleur"), "chaleur" );
	deepEqual( Stem("chaleurs"), "chaleur" );
	deepEqual( Stem("châlon"), "châlon" );
	deepEqual( Stem("châlons"), "châlon" );
	deepEqual( Stem("chalvet"), "chalvet" );
	deepEqual( Stem("chamarrées"), "chamarr" );
	deepEqual( Stem("chamarrés"), "chamarr" );
	deepEqual( Stem("chambellan"), "chambellan" );
	deepEqual( Stem("chambellans"), "chambellan" );
	deepEqual( Stem("chambranle"), "chambranl" );
	deepEqual( Stem("chambre"), "chambr" );
	deepEqual( Stem("chambres"), "chambr" );
	deepEqual( Stem("chambrette"), "chambret" );
	deepEqual( Stem("chameau"), "chameau" );
	deepEqual( Stem("champ"), "champ" );
	deepEqual( Stem("champagne"), "champagn" );
	deepEqual( Stem("champêtre"), "champêtr" );
	deepEqual( Stem("champions"), "champion" );
	deepEqual( Stem("champs"), "champ" );
	deepEqual( Stem("chance"), "chanc" );
	deepEqual( Stem("chancelant"), "chancel" );
	deepEqual( Stem("chancelier"), "chanceli" );
	deepEqual( Stem("chancellerie"), "chanceller" );
	deepEqual( Stem("chances"), "chanc" );
	deepEqual( Stem("chanceux"), "chanceux" );
	deepEqual( Stem("chandelle"), "chandel" );
	deepEqual( Stem("chandernagor"), "chandernagor" );
	deepEqual( Stem("change"), "chang" );
	deepEqual( Stem("changé"), "chang" );
	deepEqual( Stem("changea"), "chang" );
	deepEqual( Stem("changeaient"), "chang" );
	deepEqual( Stem("changeait"), "chang" );
	deepEqual( Stem("changeant"), "chang" );
	deepEqual( Stem("changeante"), "chang" );
	deepEqual( Stem("changeants"), "chang" );
	deepEqual( Stem("changée"), "chang" );
	deepEqual( Stem("changement"), "chang" );
	deepEqual( Stem("changements"), "chang" );
	deepEqual( Stem("changent"), "changent" );
	deepEqual( Stem("changer"), "chang" );
	deepEqual( Stem("changerait"), "chang" );
	deepEqual( Stem("changèrent"), "chang" );
	deepEqual( Stem("changeront"), "chang" );
	deepEqual( Stem("changés"), "chang" );
	deepEqual( Stem("chanoine"), "chanoin" );
	deepEqual( Stem("chanoines"), "chanoin" );
	deepEqual( Stem("chanoinesse"), "chanoiness" );
	deepEqual( Stem("chanson"), "chanson" );
	deepEqual( Stem("chansons"), "chanson" );
	deepEqual( Stem("chant"), "chant" );
	deepEqual( Stem("chanta"), "chant" );
	deepEqual( Stem("chantai"), "chant" );
	deepEqual( Stem("chantaient"), "chant" );
	deepEqual( Stem("chantait"), "chant" );
	deepEqual( Stem("chantant"), "chant" );
	deepEqual( Stem("chante"), "chant" );
	deepEqual( Stem("chanté"), "chant" );
	deepEqual( Stem("chantée"), "chant" );
	deepEqual( Stem("chanter"), "chant" );
	deepEqual( Stem("chantèrent"), "chant" );
	deepEqual( Stem("chantés"), "chant" );
	deepEqual( Stem("chanteur"), "chanteur" );
	deepEqual( Stem("chanteuses"), "chanteux" );
	deepEqual( Stem("chantiez"), "chant" );
	deepEqual( Stem("chantonnant"), "chanton" );
	deepEqual( Stem("chants"), "chant" );
	deepEqual( Stem("chanvre"), "chanvr" );
	deepEqual( Stem("chaos"), "chaos" );
	deepEqual( Stem("chap"), "chap" );
	deepEqual( Stem("chapeau"), "chapeau" );
	deepEqual( Stem("chapeaux"), "chapeau" );
	deepEqual( Stem("chapelet"), "chapelet" );
	deepEqual( Stem("chapelle"), "chapel" );
	deepEqual( Stem("chapes"), "chap" );
	deepEqual( Stem("chapitre"), "chapitr" );
	deepEqual( Stem("chapitres"), "chapitr" );
	deepEqual( Stem("chapons"), "chapon" );
	deepEqual( Stem("chaque"), "chaqu" );
	deepEqual( Stem("char"), "char" );
	deepEqual( Stem("charade"), "charad" );
	deepEqual( Stem("charbon"), "charbon" );
	deepEqual( Stem("charbonnier"), "charbonni" );
	deepEqual( Stem("charcot"), "charcot" );
	deepEqual( Stem("charge"), "charg" );
	deepEqual( Stem("chargé"), "charg" );
	deepEqual( Stem("chargea"), "charg" );
	deepEqual( Stem("chargeaient"), "charg" );
	deepEqual( Stem("chargeait"), "charg" );
	deepEqual( Stem("chargeant"), "charg" );
	deepEqual( Stem("chargée"), "charg" );
	deepEqual( Stem("chargées"), "charg" );
	deepEqual( Stem("chargement"), "charg" );
	deepEqual( Stem("charger"), "charg" );
	deepEqual( Stem("chargera"), "charg" );
	deepEqual( Stem("chargerais"), "charg" );
	deepEqual( Stem("chargerait"), "charg" );
	deepEqual( Stem("chargèrent"), "charg" );
	deepEqual( Stem("charges"), "charg" );
	deepEqual( Stem("chargés"), "charg" );
	deepEqual( Stem("chargez"), "charg" );
	deepEqual( Stem("charing"), "charing" );
	deepEqual( Stem("charitable"), "charit" );
	deepEqual( Stem("charité"), "charit" );
	deepEqual( Stem("charlatanisme"), "charlatan" );
	deepEqual( Stem("charlatans"), "charlatan" );
	deepEqual( Stem("charlemagne"), "charlemagn" );
	deepEqual( Stem("charleroi"), "charleroi" );
	deepEqual( Stem("charles"), "charl" );
	deepEqual( Stem("charlotte"), "charlott" );
	deepEqual( Stem("charma"), "charm" );
	deepEqual( Stem("charmant"), "charm" );
	deepEqual( Stem("charmante"), "charm" );
	deepEqual( Stem("charmantes"), "charm" );
	deepEqual( Stem("charmants"), "charm" );
	deepEqual( Stem("charme"), "charm" );
	deepEqual( Stem("charmé"), "charm" );
	deepEqual( Stem("charmée"), "charm" );
	deepEqual( Stem("charmer"), "charm" );
	deepEqual( Stem("charmes"), "charm" );
	deepEqual( Stem("charmier"), "charmi" );
	deepEqual( Stem("charpente"), "charpent" );
	deepEqual( Stem("charpentier"), "charpenti" );
	deepEqual( Stem("charrette"), "charret" );
	deepEqual( Stem("charrettes"), "charret" );
	deepEqual( Stem("charron"), "charron" );
	deepEqual( Stem("charrues"), "charru" );
	deepEqual( Stem("chars"), "char" );
	deepEqual( Stem("charte"), "chart" );
	deepEqual( Stem("chartreuse"), "chartreux" );
	deepEqual( Stem("chartreux"), "chartreux" );
	deepEqual( Stem("chas"), "chas" );
	deepEqual( Stem("chassa"), "chass" );
	deepEqual( Stem("chassaient"), "chass" );
	deepEqual( Stem("chassait"), "chass" );
	deepEqual( Stem("chassant"), "chass" );
	deepEqual( Stem("chasse"), "chass" );
	deepEqual( Stem("châsse"), "châss" );
	deepEqual( Stem("chassé"), "chass" );
	deepEqual( Stem("chassée"), "chass" );
	deepEqual( Stem("chassent"), "chassent" );
	deepEqual( Stem("chasser"), "chass" );
	deepEqual( Stem("chassera"), "chass" );
	deepEqual( Stem("chassés"), "chass" );
	deepEqual( Stem("chasseur"), "chasseur" );
	deepEqual( Stem("chasseurs"), "chasseur" );
	deepEqual( Stem("chassez"), "chass" );
	deepEqual( Stem("châssis"), "châss" );
	deepEqual( Stem("chasuble"), "chasubl" );
	deepEqual( Stem("chasubles"), "chasubl" );
	deepEqual( Stem("chat"), "chat" );
	deepEqual( Stem("châtaignes"), "châtaign" );
	deepEqual( Stem("châtaignier"), "châtaigni" );
	deepEqual( Stem("châtaigniers"), "châtaigni" );
	deepEqual( Stem("châtain"), "châtain" );
	deepEqual( Stem("châtains"), "châtain" );
	deepEqual( Stem("château"), "château" );
	deepEqual( Stem("châteaux"), "château" );
	deepEqual( Stem("châtier"), "châti" );
	deepEqual( Stem("châtiment"), "chât" );
	deepEqual( Stem("chatouillement"), "chatouill" );
	deepEqual( Stem("chatouilleuse"), "chatouill" );
	deepEqual( Stem("chats"), "chat" );
	deepEqual( Stem("chaud"), "chaud" );
	deepEqual( Stem("chaude"), "chaud" );
	deepEqual( Stem("chaudement"), "chaud" );
	deepEqual( Stem("chaudes"), "chaud" );
	deepEqual( Stem("chaudière"), "chaudi" );
	deepEqual( Stem("chaudières"), "chaudi" );
	deepEqual( Stem("chauffage"), "chauffag" );
	deepEqual( Stem("chauffaient"), "chauff" );
	deepEqual( Stem("chauffé"), "chauff" );
	deepEqual( Stem("chauffée"), "chauff" );
	deepEqual( Stem("chauffer"), "chauff" );
	deepEqual( Stem("chauffeur"), "chauffeur" );
	deepEqual( Stem("chauffeurs"), "chauffeur" );
	deepEqual( Stem("chauffez"), "chauff" );
	deepEqual( Stem("chauffons"), "chauffon" );
	deepEqual( Stem("chaulnes"), "chauln" );
	deepEqual( Stem("chaume"), "chaum" );
	deepEqual( Stem("chaumière"), "chaumi" );
	deepEqual( Stem("chaumières"), "chaumi" );
	deepEqual( Stem("chaussa"), "chauss" );
	deepEqual( Stem("chaussé"), "chauss" );
	deepEqual( Stem("chaussée"), "chauss" );
	deepEqual( Stem("chaussés"), "chauss" );
	deepEqual( Stem("chaussettes"), "chausset" );
	deepEqual( Stem("chaussure"), "chaussur" );
	deepEqual( Stem("chaussures"), "chaussur" );
	deepEqual( Stem("chauve"), "chauv" );
	deepEqual( Stem("chaux"), "chaux" );
	deepEqual( Stem("chavira"), "chav" );
	deepEqual( Stem("chavirer"), "chavir" );
	deepEqual( Stem("chazel"), "chazel" );
	deepEqual( Stem("che"), "che" );
	deepEqual( Stem("chef"), "chef" );
	deepEqual( Stem("chefs"), "chef" );
	deepEqual( Stem("chekina"), "chekin" );
	deepEqual( Stem("chékina"), "chékin" );
	deepEqual( Stem("chélan"), "chélan" );
	deepEqual( Stem("chelem"), "chelem" );
	deepEqual( Stem("chelles"), "chel" );
	deepEqual( Stem("chemin"), "chemin" );
	deepEqual( Stem("cheminant"), "chemin" );
	deepEqual( Stem("cheminée"), "chemin" );
	deepEqual( Stem("cheminées"), "chemin" );
	deepEqual( Stem("chemins"), "chemin" );
	deepEqual( Stem("chemise"), "chemis" );
	deepEqual( Stem("chemises"), "chemis" );
	deepEqual( Stem("chêne"), "chên" );
	deepEqual( Stem("chênes"), "chên" );
	deepEqual( Stem("chènevière"), "chènevi" );
	deepEqual( Stem("chenu"), "chenu" );
	deepEqual( Stem("chèque"), "chequ" );
	deepEqual( Stem("chèques"), "chequ" );
	deepEqual( Stem("cher"), "cher" );
	deepEqual( Stem("chercha"), "cherch" );
	deepEqual( Stem("cherchaient"), "cherch" );
	deepEqual( Stem("cherchais"), "cherch" );
	deepEqual( Stem("cherchait"), "cherch" );
	deepEqual( Stem("cherchant"), "cherch" );
	deepEqual( Stem("cherche"), "cherch" );
	deepEqual( Stem("cherché"), "cherch" );
	deepEqual( Stem("cherchée"), "cherch" );
	deepEqual( Stem("cherchent"), "cherchent" );
	deepEqual( Stem("chercher"), "cherch" );
	deepEqual( Stem("cherchera"), "cherch" );
	deepEqual( Stem("chercherai"), "cherch" );
	deepEqual( Stem("chercherait"), "cherch" );
	deepEqual( Stem("cherchèrent"), "cherch" );
	deepEqual( Stem("chercherez"), "cherch" );
	deepEqual( Stem("cherches"), "cherch" );
	deepEqual( Stem("cherchez"), "cherch" );
	deepEqual( Stem("cherchons"), "cherchon" );
	deepEqual( Stem("chère"), "cher" );
	deepEqual( Stem("chèrement"), "cher" );
	deepEqual( Stem("chères"), "cher" );
	deepEqual( Stem("chéri"), "cher" );
	deepEqual( Stem("chérie"), "cher" );
	deepEqual( Stem("chérir"), "cher" );
	deepEqual( Stem("chéris"), "cher" );
	deepEqual( Stem("chers"), "cher" );
	deepEqual( Stem("chester"), "chest" );
	deepEqual( Stem("chétif"), "chétif" );
	deepEqual( Stem("chétifs"), "chétif" );
	deepEqual( Stem("chétive"), "chétiv" );
	deepEqual( Stem("cheval"), "cheval" );
	deepEqual( Stem("chevaleresque"), "chevaleresqu" );
	deepEqual( Stem("chevalerie"), "chevaler" );
	deepEqual( Stem("chevalier"), "chevali" );
	deepEqual( Stem("chevaliers"), "chevali" );
	deepEqual( Stem("chevaux"), "cheval" );
	deepEqual( Stem("chevelure"), "chevelur" );
	deepEqual( Stem("chevet"), "chevet" );
	deepEqual( Stem("cheveu"), "cheveu" );
	deepEqual( Stem("cheveux"), "cheveux" );
	deepEqual( Stem("chèvrefeuilles"), "chèvrefeuill" );
	deepEqual( Stem("chèvres"), "chevr" );
	deepEqual( Stem("chevreuse"), "chevreux" );
	deepEqual( Stem("cheyenne"), "cheyen" );
	deepEqual( Stem("chez"), "chez" );
	deepEqual( Stem("chiaramonti"), "chiaramont" );
	deepEqual( Stem("chicago"), "chicago" );
	deepEqual( Stem("chicorée"), "chicor" );
	deepEqual( Stem("chien"), "chien" );
	deepEqual( Stem("chiens"), "chien" );
	deepEqual( Stem("chiffonna"), "chiffon" );
	deepEqual( Stem("chiffonnait"), "chiffon" );
	deepEqual( Stem("chiffons"), "chiffon" );
	deepEqual( Stem("chiffre"), "chiffr" );
	deepEqual( Stem("chiffrée"), "chiffr" );
	deepEqual( Stem("chiffrées"), "chiffr" );
	deepEqual( Stem("chiffrer"), "chiffr" );
	deepEqual( Stem("chiffres"), "chiffr" );
	deepEqual( Stem("chili"), "chil" );
	deepEqual( Stem("chimère"), "chimer" );
	deepEqual( Stem("chimères"), "chimer" );
	deepEqual( Stem("chimériques"), "chimer" );
	deepEqual( Stem("china"), "chin" );
	deepEqual( Stem("chine"), "chin" );
	deepEqual( Stem("chinois"), "chinois" );
	deepEqual( Stem("chinoise"), "chinois" );
	deepEqual( Stem("chinoises"), "chinois" );
	deepEqual( Stem("chiper"), "chip" );
	deepEqual( Stem("chiperait"), "chip" );
	deepEqual( Stem("chirurgicales"), "chirurgical" );
	deepEqual( Stem("chirurgie"), "chirurg" );
	deepEqual( Stem("chirurgien"), "chirurgien" );
	deepEqual( Stem("chlemm"), "chlemm" );
	deepEqual( Stem("choc"), "choc" );
	deepEqual( Stem("chocolat"), "chocolat" );
	deepEqual( Stem("choeur"), "choeur" );
	deepEqual( Stem("choeurs"), "choeur" );
	deepEqual( Stem("choisi"), "chois" );
	deepEqual( Stem("choisie"), "chois" );
	deepEqual( Stem("choisies"), "chois" );
	deepEqual( Stem("choisir"), "chois" );
	deepEqual( Stem("choisirai"), "chois" );
	deepEqual( Stem("choisirez"), "chois" );
	deepEqual( Stem("choisis"), "chois" );
	deepEqual( Stem("choisissait"), "chois" );
	deepEqual( Stem("choisissez"), "chois" );
	deepEqual( Stem("choisit"), "chois" );
	deepEqual( Stem("choix"), "choix" );
	deepEqual( Stem("cholin"), "cholin" );
	deepEqual( Stem("choqua"), "choqu" );
	deepEqual( Stem("choquait"), "choqu" );
	deepEqual( Stem("choquante"), "choqu" );
	deepEqual( Stem("choque"), "choqu" );
	deepEqual( Stem("choqué"), "choqu" );
	deepEqual( Stem("choquée"), "choqu" );
	deepEqual( Stem("choquer"), "choqu" );
	deepEqual( Stem("choquera"), "choqu" );
	deepEqual( Stem("choqueraient"), "choqu" );
	deepEqual( Stem("choquèrent"), "choqu" );
	deepEqual( Stem("choqués"), "choqu" );
	deepEqual( Stem("chorus"), "chorus" );
	deepEqual( Stem("chose"), "chos" );
	deepEqual( Stem("choses"), "chos" );
	deepEqual( Stem("chouart"), "chouart" );
	deepEqual( Stem("choucroute"), "choucrout" );
	deepEqual( Stem("choyé"), "choi" );
	deepEqual( Stem("chrétien"), "chrétien" );
	deepEqual( Stem("chrétienne"), "chrétien" );
	deepEqual( Stem("chrétiennes"), "chrétien" );
	deepEqual( Stem("chrétiens"), "chrétien" );
	deepEqual( Stem("christ"), "christ" );
	deepEqual( Stem("christianisme"), "christian" );
	deepEqual( Stem("chromatique"), "chromat" );
	deepEqual( Stem("chronicle"), "chronicl" );
	deepEqual( Stem("chronique"), "chroniqu" );
	deepEqual( Stem("chronomètre"), "chronometr" );
	deepEqual( Stem("chronomètres"), "chronometr" );
	deepEqual( Stem("chronométriquement"), "chronometr" );
	deepEqual( Stem("chunar"), "chunar" );
	deepEqual( Stem("chut"), "chut" );
	deepEqual( Stem("chute"), "chut" );
	deepEqual( Stem("chuté"), "chut" );
	deepEqual( Stem("chutes"), "chut" );
	deepEqual( Stem("ci"), "ci" );
	deepEqual( Stem("ciceri"), "cicer" );
	deepEqual( Stem("cicéron"), "cicéron" );
	deepEqual( Stem("cicéronien"), "cicéronien" );
	deepEqual( Stem("ciel"), "ciel" );
	deepEqual( Stem("cierge"), "cierg" );
	deepEqual( Stem("cierges"), "cierg" );
	deepEqual( Stem("cieux"), "cieux" );
	deepEqual( Stem("cigales"), "cigal" );
	deepEqual( Stem("cigare"), "cigar" );
	deepEqual( Stem("cigares"), "cigar" );
	deepEqual( Stem("ciguë"), "cigu" );
	deepEqual( Stem("cils"), "cil" );
	deepEqual( Stem("cimabué"), "cimabu" );
	deepEqual( Stem("cimarosa"), "cimaros" );
	deepEqual( Stem("cime"), "cim" );
	deepEqual( Stem("cimes"), "cim" );
	deepEqual( Stem("cimetière"), "cimeti" );
	deepEqual( Stem("cinnamome"), "cinnamom" );
	deepEqual( Stem("cinq"), "cinq" );
	deepEqual( Stem("cinquantaine"), "cinquantain" );
	deepEqual( Stem("cinquante"), "cinqu" );
	deepEqual( Stem("cinquantième"), "cinquantiem" );
	deepEqual( Stem("cinquième"), "cinquiem" );
	deepEqual( Stem("cipayes"), "cipay" );
	deepEqual( Stem("circé"), "circ" );
	deepEqual( Stem("circonférence"), "circonférent" );
	deepEqual( Stem("circonspection"), "circonspect" );
	deepEqual( Stem("circonstance"), "circonst" );
	deepEqual( Stem("circonstances"), "circonst" );
	deepEqual( Stem("circonstancié"), "circonstanci" );
	deepEqual( Stem("circonvenir"), "circonven" );
	deepEqual( Stem("circula"), "circul" );
	deepEqual( Stem("circulaient"), "circul" );
	deepEqual( Stem("circulaire"), "circulair" );
	deepEqual( Stem("circulairement"), "circulair" );
	deepEqual( Stem("circulaires"), "circulair" );
	deepEqual( Stem("circulant"), "circul" );
	deepEqual( Stem("circulante"), "circul" );
	deepEqual( Stem("circulation"), "circul" );
	deepEqual( Stem("circuler"), "circul" );
	deepEqual( Stem("circulerait"), "circul" );
	deepEqual( Stem("circumnavigation"), "circumnavig" );
	deepEqual( Stem("cire"), "cir" );
	deepEqual( Stem("cirque"), "cirqu" );
	deepEqual( Stem("cirques"), "cirqu" );
	deepEqual( Stem("cisalpin"), "cisalpin" );
	deepEqual( Stem("cisalpine"), "cisalpin" );
	deepEqual( Stem("cisco"), "cisco" );
	deepEqual( Stem("ciseaux"), "ciseau" );
	deepEqual( Stem("cita"), "cit" );
	deepEqual( Stem("citadelle"), "citadel" );
	deepEqual( Stem("citaient"), "cit" );
	deepEqual( Stem("citait"), "cit" );
	deepEqual( Stem("citant"), "cit" );
	deepEqual( Stem("citation"), "citat" );
	deepEqual( Stem("citations"), "citat" );
	deepEqual( Stem("cite"), "cit" );
	deepEqual( Stem("cité"), "cit" );
	deepEqual( Stem("citée"), "cit" );
	deepEqual( Stem("citer"), "cit" );
	deepEqual( Stem("citernes"), "citern" );
	deepEqual( Stem("cités"), "cit" );
	deepEqual( Stem("citoyen"), "citoyen" );
	deepEqual( Stem("citoyennes"), "citoyen" );
	deepEqual( Stem("citoyens"), "citoyen" );
	deepEqual( Stem("citronnier"), "citronni" );
	deepEqual( Stem("city"), "city" );
	deepEqual( Stem("civil"), "civil" );
	deepEqual( Stem("civile"), "civil" );
	deepEqual( Stem("civilisation"), "civilis" );
	deepEqual( Stem("civilisées"), "civilis" );
	deepEqual( Stem("civilisés"), "civilis" );
	deepEqual( Stem("civils"), "civil" );
	deepEqual( Stem("clair"), "clair" );
	deepEqual( Stem("claire"), "clair" );
	deepEqual( Stem("clairement"), "clair" );
	deepEqual( Stem("claires"), "clair" );
	deepEqual( Stem("clairière"), "clairi" );
	deepEqual( Stem("clairs"), "clair" );
	deepEqual( Stem("clairvoyance"), "clairvoi" );
	deepEqual( Stem("clairvoyant"), "clairvoi" );
	deepEqual( Stem("clairvoyante"), "clairvoi" );
	deepEqual( Stem("clairvoyants"), "clairvoi" );
	deepEqual( Stem("clameurs"), "clameur" );
	deepEqual( Stem("clandestin"), "clandestin" );
	deepEqual( Stem("clara"), "clar" );
	deepEqual( Stem("claret"), "claret" );
	deepEqual( Stem("clarté"), "clart" );
	deepEqual( Stem("classait"), "class" );
	deepEqual( Stem("classe"), "class" );
	deepEqual( Stem("classé"), "class" );
	deepEqual( Stem("classes"), "class" );
	deepEqual( Stem("classés"), "class" );
	deepEqual( Stem("clause"), "claus" );
	deepEqual( Stem("clayonnage"), "clayonnag" );
	deepEqual( Stem("clef"), "clef" );
	deepEqual( Stem("clefs"), "clef" );
	deepEqual( Stem("clélia"), "cléli" );
	deepEqual( Stem("clémence"), "clémenc" );
	deepEqual( Stem("clément"), "clément" );
	deepEqual( Stem("clerc"), "clerc" );
	deepEqual( Stem("clercs"), "clerc" );
	deepEqual( Stem("clergé"), "clerg" );
	deepEqual( Stem("clignant"), "clign" );
	deepEqual( Stem("climat"), "climat" );
	deepEqual( Stem("clin"), "clin" );
	deepEqual( Stem("clinquant"), "clinqu" );
	deepEqual( Stem("clippers"), "clipper" );
	deepEqual( Stem("clique"), "cliqu" );
	deepEqual( Stem("cliquettes"), "cliquet" );
	deepEqual( Stem("cloaque"), "cloaqu" );
	deepEqual( Stem("cloche"), "cloch" );
	deepEqual( Stem("clocher"), "cloch" );
	deepEqual( Stem("clochers"), "clocher" );
	deepEqual( Stem("cloches"), "cloch" );
	deepEqual( Stem("clochettes"), "clochet" );
	deepEqual( Stem("cloître"), "cloîtr" );
	deepEqual( Stem("clopant"), "clop" );
	deepEqual( Stem("clopin"), "clopin" );
	deepEqual( Stem("clore"), "clor" );
	deepEqual( Stem("clos"), "clos" );
	deepEqual( Stem("close"), "clos" );
	deepEqual( Stem("closes"), "clos" );
	deepEqual( Stem("clôture"), "clôtur" );
	deepEqual( Stem("clou"), "clou" );
	deepEqual( Stem("cloua"), "clou" );
	deepEqual( Stem("cloud"), "cloud" );
	deepEqual( Stem("cloué"), "clou" );
	deepEqual( Stem("clouée"), "clou" );
	deepEqual( Stem("clous"), "clous" );
	deepEqual( Stem("cloutier"), "clouti" );
	deepEqual( Stem("clown"), "clown" );
	deepEqual( Stem("clowns"), "clown" );
	deepEqual( Stem("club"), "club" );
	deepEqual( Stem("co"), "co" );
	deepEqual( Stem("coach"), "coach" );
	deepEqual( Stem("coaches"), "coach" );
	deepEqual( Stem("coadjuteur"), "coadjuteur" );
	deepEqual( Stem("coblentz"), "coblentz" );
	deepEqual( Stem("cocarde"), "cocard" );
	deepEqual( Stem("cocher"), "coch" );
	deepEqual( Stem("cochère"), "cocher" );
	deepEqual( Stem("cochers"), "cocher" );
	deepEqual( Stem("cochinchine"), "cochinchin" );
	deepEqual( Stem("coconasso"), "coconasso" );
	deepEqual( Stem("cocotiers"), "cocoti" );
	deepEqual( Stem("cocotte"), "cocott" );
	deepEqual( Stem("code"), "cod" );
	deepEqual( Stem("coeur"), "coeur" );
	deepEqual( Stem("coeurs"), "coeur" );
	deepEqual( Stem("coffre"), "coffr" );
	deepEqual( Stem("coffré"), "coffr" );
	deepEqual( Stem("coffres"), "coffr" );
	deepEqual( Stem("cohue"), "cohu" );
	deepEqual( Stem("coidet"), "coidet" );
	deepEqual( Stem("coiffa"), "coiff" );
	deepEqual( Stem("coiffé"), "coiff" );
	deepEqual( Stem("coiffée"), "coiff" );
	deepEqual( Stem("coiffés"), "coiff" );
	deepEqual( Stem("coiffure"), "coiffur" );
	deepEqual( Stem("coin"), "coin" );
	deepEqual( Stem("coïncidence"), "coïncident" );
	deepEqual( Stem("coins"), "coin" );
	deepEqual( Stem("col"), "col" );
	deepEqual( Stem("cola"), "col" );
	deepEqual( Stem("colaba"), "colab" );
	deepEqual( Stem("coldness"), "coldness" );
	deepEqual( Stem("colère"), "coler" );
	deepEqual( Stem("colères"), "coler" );
	deepEqual( Stem("colfax"), "colfax" );
	deepEqual( Stem("colifichet"), "colifichet" );
	deepEqual( Stem("colimaçon"), "colimaçon" );
	deepEqual( Stem("colique"), "coliqu" );
	deepEqual( Stem("colis"), "colis" );
	deepEqual( Stem("collaborateurs"), "collabor" );
	deepEqual( Stem("collait"), "coll" );
	deepEqual( Stem("collants"), "coll" );
	deepEqual( Stem("colle"), "coll" );
	deepEqual( Stem("collé"), "coll" );
	deepEqual( Stem("collecteur"), "collecteur" );
	deepEqual( Stem("collecteurs"), "collecteur" );
	deepEqual( Stem("collection"), "collect" );
	deepEqual( Stem("collège"), "colleg" );
	deepEqual( Stem("collègue"), "collègu" );
	deepEqual( Stem("collègues"), "collègu" );
	deepEqual( Stem("coller"), "coll" );
	deepEqual( Stem("collés"), "coll" );
	deepEqual( Stem("collet"), "collet" );
	deepEqual( Stem("collier"), "colli" );
	deepEqual( Stem("colliers"), "colli" );
	deepEqual( Stem("colline"), "collin" );
	deepEqual( Stem("collines"), "collin" );
	deepEqual( Stem("colloque"), "colloqu" );
	deepEqual( Stem("colmar"), "colmar" );
	deepEqual( Stem("colombes"), "colomb" );
	deepEqual( Stem("colombier"), "colombi" );
	deepEqual( Stem("colonel"), "colonel" );
	deepEqual( Stem("colonels"), "colonel" );
	deepEqual( Stem("colonie"), "colon" );
	deepEqual( Stem("colonisateur"), "colonis" );
	deepEqual( Stem("coloniser"), "colonis" );
	deepEqual( Stem("colonnade"), "colonnad" );
	deepEqual( Stem("colonne"), "colon" );
	deepEqual( Stem("colonnes"), "colon" );
	deepEqual( Stem("colorado"), "colorado" );
	deepEqual( Stem("coloré"), "color" );
	deepEqual( Stem("colorée"), "color" );
	deepEqual( Stem("colorié"), "colori" );
	deepEqual( Stem("coloris"), "color" );
	deepEqual( Stem("colorno"), "colorno" );
	deepEqual( Stem("colossal"), "colossal" );
	deepEqual( Stem("colossale"), "colossal" );
	deepEqual( Stem("colossales"), "colossal" );
	deepEqual( Stem("colpa"), "colp" );
	deepEqual( Stem("colt"), "colt" );
	deepEqual( Stem("columbus"), "columbus" );
	deepEqual( Stem("combat"), "combat" );
	deepEqual( Stem("combats"), "combat" );
	deepEqual( Stem("combattaient"), "combatt" );
	deepEqual( Stem("combattants"), "combatt" );
	deepEqual( Stem("combattis"), "combatt" );
	deepEqual( Stem("combattit"), "combatt" );
	deepEqual( Stem("combattre"), "combattr" );
	deepEqual( Stem("combattu"), "combattu" );
	deepEqual( Stem("combattue"), "combattu" );
	deepEqual( Stem("combien"), "combien" );
	deepEqual( Stem("combina"), "combin" );
	deepEqual( Stem("combinaisons"), "combinaison" );
	deepEqual( Stem("combinant"), "combin" );
	deepEqual( Stem("combiné"), "combin" );
	deepEqual( Stem("combinés"), "combin" );
	deepEqual( Stem("comble"), "combl" );
	deepEqual( Stem("comblé"), "combl" );
	deepEqual( Stem("combler"), "combl" );
	deepEqual( Stem("comblerait"), "combl" );
	deepEqual( Stem("combles"), "combl" );
	deepEqual( Stem("combustible"), "combustibl" );
	deepEqual( Stem("come"), "com" );
	deepEqual( Stem("côme"), "côm" );
	deepEqual( Stem("comédie"), "comed" );
	deepEqual( Stem("comédien"), "comédien" );
	deepEqual( Stem("comédiens"), "comédien" );
	deepEqual( Stem("comédies"), "comed" );
	deepEqual( Stem("comestible"), "comestibl" );
	deepEqual( Stem("comestibles"), "comestibl" );
	deepEqual( Stem("comique"), "comiqu" );
	deepEqual( Stem("comiques"), "comiqu" );
	deepEqual( Stem("comité"), "comit" );
	deepEqual( Stem("commanda"), "command" );
	deepEqual( Stem("commandaient"), "command" );
	deepEqual( Stem("commandait"), "command" );
	deepEqual( Stem("commandant"), "command" );
	deepEqual( Stem("commande"), "command" );
	deepEqual( Stem("commandé"), "command" );
	deepEqual( Stem("commandée"), "command" );
	deepEqual( Stem("commandement"), "command" );
	deepEqual( Stem("commandements"), "command" );
	deepEqual( Stem("commander"), "command" );
	deepEqual( Stem("commandera"), "command" );
	deepEqual( Stem("commanderez"), "command" );
	deepEqual( Stem("commandons"), "commandon" );
	deepEqual( Stem("comme"), "comm" );
	deepEqual( Stem("commença"), "commenc" );
	deepEqual( Stem("commençai"), "commenc" );
	deepEqual( Stem("commençaient"), "commenc" );
	deepEqual( Stem("commençait"), "commenc" );
	deepEqual( Stem("commençant"), "commenc" );
	deepEqual( Stem("commence"), "commenc" );
	deepEqual( Stem("commencé"), "commenc" );
	deepEqual( Stem("commencée"), "commenc" );
	deepEqual( Stem("commencement"), "commenc" );
	deepEqual( Stem("commencements"), "commenc" );
	deepEqual( Stem("commencent"), "commencent" );
	deepEqual( Stem("commencer"), "commenc" );
	deepEqual( Stem("commencera"), "commenc" );
	deepEqual( Stem("commencerai"), "commenc" );
	deepEqual( Stem("commencerait"), "commenc" );
	deepEqual( Stem("commencèrent"), "commenc" );
	deepEqual( Stem("commencés"), "commenc" );
	deepEqual( Stem("commencez"), "commenc" );
	deepEqual( Stem("commençons"), "commençon" );
	deepEqual( Stem("commensal"), "commensal" );
	deepEqual( Stem("comment"), "comment" );
	deepEqual( Stem("commentaire"), "commentair" );
	deepEqual( Stem("commentaires"), "commentair" );
	deepEqual( Stem("commentateurs"), "comment" );
	deepEqual( Stem("commentée"), "comment" );
	deepEqual( Stem("commenter"), "comment" );
	deepEqual( Stem("commentés"), "comment" );
	deepEqual( Stem("commerçante"), "commerc" );
	deepEqual( Stem("commerçantes"), "commerc" );
	deepEqual( Stem("commerçants"), "commerc" );
	deepEqual( Stem("commerce"), "commerc" );
	deepEqual( Stem("commerciale"), "commercial" );
	deepEqual( Stem("commets"), "commet" );
	deepEqual( Stem("commette"), "commet" );
	deepEqual( Stem("commettent"), "commettent" );
	deepEqual( Stem("commettra"), "commettr" );
	deepEqual( Stem("commettrais"), "commettr" );
	deepEqual( Stem("commettre"), "commettr" );
	deepEqual( Stem("commis"), "comm" );
	deepEqual( Stem("commise"), "commis" );
	deepEqual( Stem("commisération"), "commiser" );
	deepEqual( Stem("commissaire"), "commissair" );
	deepEqual( Stem("commission"), "commiss" );
	deepEqual( Stem("commissions"), "comm" );
	deepEqual( Stem("commit"), "comm" );
	deepEqual( Stem("commode"), "commod" );
	deepEqual( Stem("commodément"), "commod" );
	deepEqual( Stem("commotion"), "commot" );
	deepEqual( Stem("commuée"), "commu" );
	deepEqual( Stem("commuer"), "commu" );
	deepEqual( Stem("commuera"), "commu" );
	deepEqual( Stem("commun"), "commun" );
	deepEqual( Stem("communauté"), "communaut" );
	deepEqual( Stem("communaux"), "communal" );
	deepEqual( Stem("commune"), "commun" );
	deepEqual( Stem("communément"), "commun" );
	deepEqual( Stem("communes"), "commun" );
	deepEqual( Stem("communicatif"), "commun" );
	deepEqual( Stem("communication"), "commun" );
	deepEqual( Stem("communications"), "commun" );
	deepEqual( Stem("communicative"), "commun" );
	deepEqual( Stem("communie"), "commun" );
	deepEqual( Stem("communion"), "communion" );
	deepEqual( Stem("communiqua"), "communiqu" );
	deepEqual( Stem("communiquaient"), "communiqu" );
	deepEqual( Stem("communiquait"), "communiqu" );
	deepEqual( Stem("communique"), "commun" );
	deepEqual( Stem("communiqué"), "communiqu" );
	deepEqual( Stem("communiquée"), "communiqu" );
	deepEqual( Stem("communiquer"), "communiqu" );
	deepEqual( Stem("communs"), "commun" );
	deepEqual( Stem("commutation"), "commut" );
	deepEqual( Stem("compagne"), "compagn" );
	deepEqual( Stem("compagnie"), "compagn" );
	deepEqual( Stem("compagnies"), "compagn" );
	deepEqual( Stem("compagnon"), "compagnon" );
	deepEqual( Stem("compagnons"), "compagnon" );
	deepEqual( Stem("compara"), "compar" );
	deepEqual( Stem("comparable"), "compar" );
	deepEqual( Stem("comparaient"), "compar" );
	deepEqual( Stem("comparaison"), "comparaison" );
	deepEqual( Stem("comparait"), "compar" );
	deepEqual( Stem("comparaîtrez"), "comparaîtr" );
	deepEqual( Stem("comparant"), "compar" );
	deepEqual( Stem("comparativement"), "compar" );
	deepEqual( Stem("compare"), "compar" );
	deepEqual( Stem("comparé"), "compar" );
	deepEqual( Stem("comparée"), "compar" );
	deepEqual( Stem("comparer"), "compar" );
	deepEqual( Stem("compartiment"), "compart" );
	deepEqual( Stem("compartiments"), "compart" );
	deepEqual( Stem("compas"), "comp" );
	deepEqual( Stem("compassé"), "compass" );
	deepEqual( Stem("compassées"), "compass" );
	deepEqual( Stem("compatibles"), "compatibl" );
	deepEqual( Stem("compatriote"), "compatriot" );
	deepEqual( Stem("compatriotes"), "compatriot" );
	deepEqual( Stem("compensation"), "compens" );
	deepEqual( Stem("compense"), "compens" );
	deepEqual( Stem("compensé"), "compens" );
	deepEqual( Stem("compenser"), "compens" );
	deepEqual( Stem("compère"), "comper" );
	deepEqual( Stem("complaisait"), "complais" );
	deepEqual( Stem("complaisamment"), "complais" );
	deepEqual( Stem("complaisance"), "complais" );
	deepEqual( Stem("complaisances"), "complais" );
	deepEqual( Stem("complaisant"), "complais" );
	deepEqual( Stem("complaisante"), "complais" );
	deepEqual( Stem("complaisantes"), "complais" );
	deepEqual( Stem("complaisants"), "complais" );
	deepEqual( Stem("complément"), "compl" );
	deepEqual( Stem("complet"), "complet" );
	deepEqual( Stem("complétaient"), "complet" );
	deepEqual( Stem("complétait"), "complet" );
	deepEqual( Stem("complète"), "complet" );
	deepEqual( Stem("complété"), "complet" );
	deepEqual( Stem("complètement"), "complet" );
	deepEqual( Stem("compléter"), "complet" );
	deepEqual( Stem("complètes"), "complet" );
	deepEqual( Stem("complets"), "complet" );
	deepEqual( Stem("complication"), "compliqu" );
	deepEqual( Stem("complice"), "complic" );
	deepEqual( Stem("complices"), "complic" );
	deepEqual( Stem("complicité"), "compliqu" );
	deepEqual( Stem("compliment"), "compl" );
	deepEqual( Stem("complimenté"), "compliment" );
	deepEqual( Stem("complimenteur"), "complimenteur" );
	deepEqual( Stem("complimenteurs"), "complimenteur" );
	deepEqual( Stem("complimenteuse"), "compliment" );
	deepEqual( Stem("compliments"), "compl" );
	deepEqual( Stem("complique"), "compliqu" );
	deepEqual( Stem("compliqué"), "compliqu" );
	deepEqual( Stem("compliquée"), "compliqu" );
	deepEqual( Stem("compliquées"), "compliqu" );
	deepEqual( Stem("compliqués"), "compliqu" );
	deepEqual( Stem("complot"), "complot" );
	deepEqual( Stem("componction"), "componct" );
	deepEqual( Stem("comporta"), "comport" );
	deepEqual( Stem("comportait"), "comport" );
	deepEqual( Stem("comporte"), "comport" );
	deepEqual( Stem("comporté"), "comport" );
	deepEqual( Stem("comportée"), "comport" );
	deepEqual( Stem("composa"), "compos" );
	deepEqual( Stem("composaient"), "compos" );
	deepEqual( Stem("composait"), "compos" );
	deepEqual( Stem("composant"), "compos" );
	deepEqual( Stem("compose"), "compos" );
	deepEqual( Stem("composé"), "compos" );
	deepEqual( Stem("composée"), "compos" );
	deepEqual( Stem("composées"), "compos" );
	deepEqual( Stem("composent"), "composent" );
	deepEqual( Stem("composer"), "compos" );
	deepEqual( Stem("composition"), "composit" );
	deepEqual( Stem("compositions"), "composit" );
	deepEqual( Stem("comprato"), "comprato" );
	deepEqual( Stem("comprenaient"), "compren" );
	deepEqual( Stem("comprenait"), "compren" );
	deepEqual( Stem("comprenant"), "compren" );
	deepEqual( Stem("comprend"), "comprend" );
	deepEqual( Stem("comprendra"), "comprendr" );
	deepEqual( Stem("comprendrai"), "comprendr" );
	deepEqual( Stem("comprendrait"), "comprendr" );
	deepEqual( Stem("comprendre"), "comprendr" );
	deepEqual( Stem("comprendrez"), "comprendr" );
	deepEqual( Stem("comprends"), "comprend" );
	deepEqual( Stem("comprenez"), "compren" );
	deepEqual( Stem("comprenne"), "compren" );
	deepEqual( Stem("comprennent"), "comprennent" );
	deepEqual( Stem("comprimant"), "comprim" );
	deepEqual( Stem("comprimées"), "comprim" );
	deepEqual( Stem("comprimés"), "comprim" );
	deepEqual( Stem("comprirent"), "compr" );
	deepEqual( Stem("compris"), "compr" );
	deepEqual( Stem("comprise"), "compris" );
	deepEqual( Stem("comprit"), "compr" );
	deepEqual( Stem("comprît"), "compr" );
	deepEqual( Stem("compromet"), "compromet" );
	deepEqual( Stem("compromets"), "compromet" );
	deepEqual( Stem("compromettait"), "compromet" );
	deepEqual( Stem("compromettant"), "compromet" );
	deepEqual( Stem("compromettante"), "compromet" );
	deepEqual( Stem("compromettantes"), "compromet" );
	deepEqual( Stem("compromette"), "compromet" );
	deepEqual( Stem("compromettra"), "compromettr" );
	deepEqual( Stem("compromettrais"), "compromettr" );
	deepEqual( Stem("compromettre"), "compromettr" );
	deepEqual( Stem("compromis"), "comprom" );
	deepEqual( Stem("compromise"), "compromis" );
	deepEqual( Stem("compromises"), "compromis" );
	deepEqual( Stem("compta"), "compt" );
	deepEqual( Stem("comptabilité"), "comptabl" );
	deepEqual( Stem("comptaient"), "compt" );
	deepEqual( Stem("comptais"), "compt" );
	deepEqual( Stem("comptait"), "compt" );
	deepEqual( Stem("comptant"), "compt" );
	deepEqual( Stem("comptât"), "compt" );
	deepEqual( Stem("compte"), "compt" );
	deepEqual( Stem("compté"), "compt" );
	deepEqual( Stem("comptées"), "compt" );
	deepEqual( Stem("comptent"), "comptent" );
	deepEqual( Stem("compter"), "compt" );
	deepEqual( Stem("compterai"), "compt" );
	deepEqual( Stem("comptèrent"), "compt" );
	deepEqual( Stem("comptes"), "compt" );
	deepEqual( Stem("comptés"), "compt" );
	deepEqual( Stem("comptez"), "compt" );
	deepEqual( Stem("comptiez"), "compt" );
	deepEqual( Stem("comptoir"), "comptoir" );
	deepEqual( Stem("comptoirs"), "comptoir" );
	deepEqual( Stem("comptons"), "compton" );
	deepEqual( Stem("comte"), "comt" );
	deepEqual( Stem("comté"), "comt" );
	deepEqual( Stem("comtes"), "comt" );
	deepEqual( Stem("comtés"), "comt" );
	deepEqual( Stem("comtesse"), "comtess" );
	deepEqual( Stem("comtois"), "comtois" );
	deepEqual( Stem("comtoise"), "comtois" );
	deepEqual( Stem("concentré"), "concentr" );
	deepEqual( Stem("concentrer"), "concentr" );
	deepEqual( Stem("concentrés"), "concentr" );
	deepEqual( Stem("concernaient"), "concern" );
	deepEqual( Stem("concernant"), "concern" );
	deepEqual( Stem("concerné"), "concern" );
	deepEqual( Stem("concert"), "concert" );
	deepEqual( Stem("concerté"), "concert" );
	deepEqual( Stem("concerts"), "concert" );
	deepEqual( Stem("concession"), "concess" );
	deepEqual( Stem("concessions"), "concess" );
	deepEqual( Stem("concevaient"), "concev" );
	deepEqual( Stem("concevait"), "concev" );
	deepEqual( Stem("concevez"), "concev" );
	deepEqual( Stem("concevoir"), "concevoir" );
	deepEqual( Stem("concierge"), "concierg" );
	deepEqual( Stem("concilié"), "concili" );
	deepEqual( Stem("concilier"), "concili" );
	deepEqual( Stem("concises"), "concis" );
	deepEqual( Stem("concitoyens"), "concitoyen" );
	deepEqual( Stem("conclu"), "conclu" );
	deepEqual( Stem("concluaient"), "conclu" );
	deepEqual( Stem("concluantes"), "conclu" );
	deepEqual( Stem("concluants"), "conclu" );
	deepEqual( Stem("conclue"), "conclu" );
	deepEqual( Stem("conclure"), "conclur" );
	deepEqual( Stem("conclurent"), "conclurent" );
	deepEqual( Stem("conclusion"), "conclus" );
	deepEqual( Stem("conclusions"), "conclus" );
	deepEqual( Stem("conclut"), "conclut" );
	deepEqual( Stem("conçois"), "conçois" );
	deepEqual( Stem("conçoit"), "conçoit" );
	deepEqual( Stem("concordance"), "concord" );
	deepEqual( Stem("concordant"), "concord" );
	deepEqual( Stem("concordat"), "concordat" );
	deepEqual( Stem("concourent"), "concourent" );
	deepEqual( Stem("concours"), "concour" );
	deepEqual( Stem("conçu"), "conçu" );
	deepEqual( Stem("conçue"), "conçu" );
	deepEqual( Stem("concurrent"), "concurrent" );
	deepEqual( Stem("concurrents"), "concurrent" );
	deepEqual( Stem("conçut"), "conçut" );
	deepEqual( Stem("condamnable"), "condamn" );
	deepEqual( Stem("condamnait"), "condamn" );
	deepEqual( Stem("condamnant"), "condamn" );
	deepEqual( Stem("condamnation"), "condamn" );
	deepEqual( Stem("condamne"), "condamn" );
	deepEqual( Stem("condamné"), "condamn" );
	deepEqual( Stem("condamnée"), "condamn" );
	deepEqual( Stem("condamnent"), "condamnent" );
	deepEqual( Stem("condamner"), "condamn" );
	deepEqual( Stem("condamneront"), "condamn" );
	deepEqual( Stem("condamnés"), "condamn" );
	deepEqual( Stem("condé"), "cond" );
	deepEqual( Stem("condescendance"), "condescend" );
	deepEqual( Stem("condillac"), "condillac" );
	deepEqual( Stem("condiments"), "cond" );
	deepEqual( Stem("condition"), "condit" );
	deepEqual( Stem("conditionnée"), "condition" );
	deepEqual( Stem("conditions"), "condit" );
	deepEqual( Stem("condoléance"), "condolé" );
	deepEqual( Stem("conducteur"), "conducteur" );
	deepEqual( Stem("conduira"), "conduir" );
	deepEqual( Stem("conduirait"), "conduir" );
	deepEqual( Stem("conduire"), "conduir" );
	deepEqual( Stem("conduisaient"), "conduis" );
	deepEqual( Stem("conduisait"), "conduis" );
	deepEqual( Stem("conduisant"), "conduis" );
	deepEqual( Stem("conduisent"), "conduisent" );
	deepEqual( Stem("conduisez"), "conduis" );
	deepEqual( Stem("conduisit"), "conduis" );
	deepEqual( Stem("conduit"), "conduit" );
	deepEqual( Stem("conduite"), "conduit" );
	deepEqual( Stem("conduites"), "conduit" );
	deepEqual( Stem("conduits"), "conduit" );
	deepEqual( Stem("confection"), "confect" );
	deepEqual( Stem("confédéré"), "conféder" );
	deepEqual( Stem("conférait"), "confer" );
	deepEqual( Stem("conférence"), "conférent" );
	deepEqual( Stem("conférences"), "conférent" );
	deepEqual( Stem("conférer"), "confer" );
	deepEqual( Stem("confessant"), "confess" );
	deepEqual( Stem("confesser"), "confess" );
	deepEqual( Stem("confesserai"), "confess" );
	deepEqual( Stem("confesseur"), "confesseur" );
	deepEqual( Stem("confesseurs"), "confesseur" );
	deepEqual( Stem("confession"), "confess" );
	deepEqual( Stem("confessionnal"), "confessionnal" );
	deepEqual( Stem("confessionnaux"), "confessionnal" );
	deepEqual( Stem("confessions"), "confess" );
	deepEqual( Stem("confia"), "confi" );
	deepEqual( Stem("confiance"), "confianc" );
	deepEqual( Stem("confidence"), "confident" );
	deepEqual( Stem("confidences"), "confident" );
	deepEqual( Stem("confident"), "confident" );
	deepEqual( Stem("confidente"), "confident" );
	deepEqual( Stem("confié"), "confi" );
	deepEqual( Stem("confiée"), "confi" );
	deepEqual( Stem("confiées"), "confi" );
	deepEqual( Stem("confier"), "confi" );
	deepEqual( Stem("confiés"), "confi" );
	deepEqual( Stem("confiné"), "confin" );
	deepEqual( Stem("confiner"), "confin" );
	deepEqual( Stem("confirma"), "confirm" );
	deepEqual( Stem("confirmait"), "confirm" );
	deepEqual( Stem("confirmée"), "confirm" );
	deepEqual( Stem("confirmer"), "confirm" );
	deepEqual( Stem("confirmèrent"), "confirm" );
	deepEqual( Stem("confiscation"), "confisc" );
	deepEqual( Stem("confisque"), "confisqu" );
	deepEqual( Stem("confisqué"), "confisqu" );
	deepEqual( Stem("confit"), "conf" );
	deepEqual( Stem("confluent"), "confluent" );
	deepEqual( Stem("confondait"), "confond" );
	deepEqual( Stem("confonde"), "confond" );
	deepEqual( Stem("confondent"), "confondent" );
	deepEqual( Stem("confondre"), "confondr" );
	deepEqual( Stem("confondu"), "confondu" );
	deepEqual( Stem("confondus"), "confondus" );
	deepEqual( Stem("conformait"), "conform" );
	deepEqual( Stem("conforme"), "conform" );
	deepEqual( Stem("conformer"), "conform" );
	deepEqual( Stem("confort"), "confort" );
	deepEqual( Stem("confortable"), "confort" );
	deepEqual( Stem("confortablement"), "confort" );
	deepEqual( Stem("confortables"), "confort" );
	deepEqual( Stem("confrère"), "confrer" );
	deepEqual( Stem("confrères"), "confrer" );
	deepEqual( Stem("confrérie"), "confrer" );
	deepEqual( Stem("confucius"), "confucius" );
	deepEqual( Stem("confus"), "confus" );
	deepEqual( Stem("confuse"), "confus" );
	deepEqual( Stem("confusément"), "confus" );
	deepEqual( Stem("confusion"), "confus" );
	deepEqual( Stem("confusions"), "confus" );
	deepEqual( Stem("congé"), "cong" );
	deepEqual( Stem("congédia"), "congédi" );
	deepEqual( Stem("congédiant"), "congédi" );
	deepEqual( Stem("congédié"), "congédi" );
	deepEqual( Stem("congédiés"), "congédi" );
	deepEqual( Stem("congénères"), "congéner" );
	deepEqual( Stem("congestionnée"), "congestion" );
	deepEqual( Stem("congratulation"), "congratul" );
	deepEqual( Stem("congréganiste"), "congrégan" );
	deepEqual( Stem("congréganistes"), "congrégan" );
	deepEqual( Stem("congrégation"), "congreg" );
	deepEqual( Stem("congrès"), "congres" );
	deepEqual( Stem("conjecture"), "conjectur" );
	deepEqual( Stem("conjecturer"), "conjectur" );
	deepEqual( Stem("conjectures"), "conjectur" );
	deepEqual( Stem("conjonctions"), "conjonct" );
	deepEqual( Stem("conjugal"), "conjugal" );
	deepEqual( Stem("conjugale"), "conjugal" );
	deepEqual( Stem("conjuguer"), "conjugu" );
	deepEqual( Stem("conjurait"), "conjur" );
	deepEqual( Stem("conjurant"), "conjur" );
	deepEqual( Stem("conjure"), "conjur" );
	deepEqual( Stem("conjurée"), "conjur" );
	deepEqual( Stem("conjurer"), "conjur" );
	deepEqual( Stem("connais"), "con" );
	deepEqual( Stem("connaissaient"), "connaiss" );
	deepEqual( Stem("connaissais"), "connaiss" );
	deepEqual( Stem("connaissait"), "connaiss" );
	deepEqual( Stem("connaissance"), "connaiss" );
	deepEqual( Stem("connaissances"), "connaiss" );
	deepEqual( Stem("connaissent"), "connaissent" );
	deepEqual( Stem("connaisseurs"), "connaisseur" );
	deepEqual( Stem("connaissez"), "connaiss" );
	deepEqual( Stem("connaissiez"), "connaiss" );
	deepEqual( Stem("connaissons"), "connaisson" );
	deepEqual( Stem("connaît"), "connaît" );
	deepEqual( Stem("connaîtrait"), "connaîtr" );
	deepEqual( Stem("connaitre"), "connaitr" );
	deepEqual( Stem("connaître"), "connaîtr" );
	deepEqual( Stem("connivence"), "connivent" );
	deepEqual( Stem("connu"), "connu" );
	deepEqual( Stem("connue"), "connu" );
	deepEqual( Stem("connues"), "connu" );
	deepEqual( Stem("connus"), "connus" );
	deepEqual( Stem("connut"), "connut" );
	deepEqual( Stem("conquérir"), "conquer" );
	deepEqual( Stem("conquête"), "conquêt" );
	deepEqual( Stem("conquis"), "conqu" );
	deepEqual( Stem("conquise"), "conquis" );
	deepEqual( Stem("conradin"), "conradin" );
	deepEqual( Stem("consacrait"), "consacr" );
	deepEqual( Stem("consacre"), "consacr" );
	deepEqual( Stem("consacré"), "consacr" );
	deepEqual( Stem("consacrée"), "consacr" );
	deepEqual( Stem("consacrées"), "consacr" );
	deepEqual( Stem("consacrer"), "consacr" );
	deepEqual( Stem("consacrerai"), "consacr" );
	deepEqual( Stem("consacrés"), "consacr" );
	deepEqual( Stem("conscience"), "conscienc" );
	deepEqual( Stem("consciencieusement"), "conscienci" );
	deepEqual( Stem("conscription"), "conscript" );
	deepEqual( Stem("conscrit"), "conscr" );
	deepEqual( Stem("conseil"), "conseil" );
	deepEqual( Stem("conseilla"), "conseil" );
	deepEqual( Stem("conseillaient"), "conseil" );
	deepEqual( Stem("conseillait"), "conseil" );
	deepEqual( Stem("conseille"), "conseil" );
	deepEqual( Stem("conseillé"), "conseil" );
	deepEqual( Stem("conseillée"), "conseil" );
	deepEqual( Stem("conseiller"), "conseil" );
	deepEqual( Stem("conseillerai"), "conseil" );
	deepEqual( Stem("conseillerais"), "conseil" );
	deepEqual( Stem("conseillerait"), "conseil" );
	deepEqual( Stem("conseilleriez"), "conseil" );
	deepEqual( Stem("conseillers"), "conseiller" );
	deepEqual( Stem("conseils"), "conseil" );
	deepEqual( Stem("consens"), "consen" );
	deepEqual( Stem("consentait"), "consent" );
	deepEqual( Stem("consente"), "consent" );
	deepEqual( Stem("consentement"), "consent" );
	deepEqual( Stem("consentez"), "consent" );
	deepEqual( Stem("consenti"), "consent" );
	deepEqual( Stem("consentions"), "consent" );
	deepEqual( Stem("consentir"), "consent" );
	deepEqual( Stem("consentirai"), "consent" );
	deepEqual( Stem("consentirais"), "consent" );
	deepEqual( Stem("consentirent"), "consent" );
	deepEqual( Stem("consentit"), "consent" );
	deepEqual( Stem("conséquemment"), "conséquent" );
	deepEqual( Stem("conséquence"), "conséquent" );
	deepEqual( Stem("conséquences"), "conséquent" );
	deepEqual( Stem("conséquent"), "conséquent" );
	deepEqual( Stem("conservait"), "conserv" );
	deepEqual( Stem("conservant"), "conserv" );
	deepEqual( Stem("conservation"), "conserv" );
	deepEqual( Stem("conservatoire"), "conservatoir" );
	deepEqual( Stem("conserve"), "conserv" );
	deepEqual( Stem("conservé"), "conserv" );
	deepEqual( Stem("conservée"), "conserv" );
	deepEqual( Stem("conservées"), "conserv" );
	deepEqual( Stem("conservent"), "conservent" );
	deepEqual( Stem("conserver"), "conserv" );
	deepEqual( Stem("conserverai"), "conserv" );
	deepEqual( Stem("conserves"), "conserv" );
	deepEqual( Stem("considéra"), "consider" );
	deepEqual( Stem("considérable"), "consider" );
	deepEqual( Stem("considérablement"), "consider" );
	deepEqual( Stem("considérables"), "consider" );
	deepEqual( Stem("considérait"), "consider" );
	deepEqual( Stem("considérant"), "consider" );
	deepEqual( Stem("considération"), "consider" );
	deepEqual( Stem("considérations"), "consider" );
	deepEqual( Stem("considère"), "consider" );
	deepEqual( Stem("considéré"), "consider" );
	deepEqual( Stem("considérée"), "consider" );
	deepEqual( Stem("considérées"), "consider" );
	deepEqual( Stem("considérer"), "consider" );
	deepEqual( Stem("considérerais"), "consider" );
	deepEqual( Stem("considérés"), "consider" );
	deepEqual( Stem("consigne"), "consign" );
	deepEqual( Stem("consistait"), "consist" );
	deepEqual( Stem("consistance"), "consist" );
	deepEqual( Stem("consiste"), "consist" );
	deepEqual( Stem("consister"), "consist" );
	deepEqual( Stem("consola"), "consol" );
	deepEqual( Stem("consolaient"), "consol" );
	deepEqual( Stem("consolait"), "consol" );
	deepEqual( Stem("consolation"), "consol" );
	deepEqual( Stem("consolations"), "consol" );
	deepEqual( Stem("console"), "consol" );
	deepEqual( Stem("consolé"), "consol" );
	deepEqual( Stem("consolée"), "consol" );
	deepEqual( Stem("consoler"), "consol" );
	deepEqual( Stem("consomma"), "consomm" );
	deepEqual( Stem("consommateur"), "consomm" );
	deepEqual( Stem("consommateurs"), "consomm" );
	deepEqual( Stem("consommé"), "consomm" );
	deepEqual( Stem("consommée"), "consomm" );
	deepEqual( Stem("consommer"), "consomm" );
	deepEqual( Stem("consommez"), "consomm" );
	deepEqual( Stem("conspirais"), "consp" );
	deepEqual( Stem("conspirante"), "conspir" );
	deepEqual( Stem("conspirateur"), "conspir" );
	deepEqual( Stem("conspirateurs"), "conspir" );
	deepEqual( Stem("conspiration"), "conspir" );
	deepEqual( Stem("conspiré"), "conspir" );
	deepEqual( Stem("conspirer"), "conspir" );
	deepEqual( Stem("conspué"), "conspu" );
	deepEqual( Stem("constamment"), "const" );
	deepEqual( Stem("constance"), "constanc" );
	deepEqual( Stem("constant"), "const" );
	deepEqual( Stem("constante"), "const" );
	deepEqual( Stem("constantin"), "constantin" );
	deepEqual( Stem("constants"), "const" );
	deepEqual( Stem("constata"), "constat" );
	deepEqual( Stem("constaté"), "constat" );
	deepEqual( Stem("constater"), "constat" );
	deepEqual( Stem("consternation"), "constern" );
	deepEqual( Stem("consterné"), "constern" );
	deepEqual( Stem("consternée"), "constern" );
	deepEqual( Stem("constituait"), "constitu" );
	deepEqual( Stem("constitue"), "constitu" );
	deepEqual( Stem("constitué"), "constitu" );
	deepEqual( Stem("constituer"), "constitu" );
	deepEqual( Stem("constituera"), "constitu" );
	deepEqual( Stem("constitution"), "constitu" );
	deepEqual( Stem("constitutionnel"), "constitutionnel" );
	deepEqual( Stem("constitutionnels"), "constitutionnel" );
	deepEqual( Stem("construction"), "construct" );
	deepEqual( Stem("construire"), "construir" );
	deepEqual( Stem("construisait"), "construis" );
	deepEqual( Stem("construit"), "construit" );
	deepEqual( Stem("construite"), "construit" );
	deepEqual( Stem("construites"), "construit" );
	deepEqual( Stem("construits"), "construit" );
	deepEqual( Stem("consul"), "consul" );
	deepEqual( Stem("consulaire"), "consulair" );
	deepEqual( Stem("consulaires"), "consulair" );
	deepEqual( Stem("consulat"), "consulat" );
	deepEqual( Stem("consulta"), "consult" );
	deepEqual( Stem("consultait"), "consult" );
	deepEqual( Stem("consultant"), "consult" );
	deepEqual( Stem("consultative"), "consult" );
	deepEqual( Stem("consulté"), "consult" );
	deepEqual( Stem("consulter"), "consult" );
	deepEqual( Stem("consulterais"), "consult" );
	deepEqual( Stem("consultés"), "consult" );
	deepEqual( Stem("consultons"), "consulton" );
	deepEqual( Stem("consumé"), "consum" );
	deepEqual( Stem("conta"), "cont" );
	deepEqual( Stem("contact"), "contact" );
	deepEqual( Stem("contagieux"), "contagi" );
	deepEqual( Stem("contais"), "cont" );
	deepEqual( Stem("contait"), "cont" );
	deepEqual( Stem("contarini"), "contarin" );
	deepEqual( Stem("conte"), "cont" );
	deepEqual( Stem("conté"), "cont" );
	deepEqual( Stem("contée"), "cont" );
	deepEqual( Stem("contemplait"), "contempl" );
	deepEqual( Stem("contemplant"), "contempl" );
	deepEqual( Stem("contemplation"), "contempl" );
	deepEqual( Stem("contemple"), "contempl" );
	deepEqual( Stem("contempler"), "contempl" );
	deepEqual( Stem("contemplerait"), "contempl" );
	deepEqual( Stem("contemporains"), "contemporain" );
	deepEqual( Stem("contenaient"), "conten" );
	deepEqual( Stem("contenait"), "conten" );
	deepEqual( Stem("contenance"), "conten" );
	deepEqual( Stem("contenant"), "conten" );
	deepEqual( Stem("contenir"), "conten" );
	deepEqual( Stem("content"), "content" );
	deepEqual( Stem("contenta"), "content" );
	deepEqual( Stem("contentait"), "content" );
	deepEqual( Stem("contentant"), "content" );
	deepEqual( Stem("contente"), "content" );
	deepEqual( Stem("contentement"), "content" );
	deepEqual( Stem("contenterait"), "content" );
	deepEqual( Stem("contents"), "content" );
	deepEqual( Stem("contenu"), "contenu" );
	deepEqual( Stem("contenue"), "contenu" );
	deepEqual( Stem("contenues"), "contenu" );
	deepEqual( Stem("contenus"), "contenus" );
	deepEqual( Stem("conter"), "cont" );
	deepEqual( Stem("conterai"), "cont" );
	deepEqual( Stem("conterait"), "cont" );
	deepEqual( Stem("contes"), "cont" );
	deepEqual( Stem("contessina"), "contessin" );
	deepEqual( Stem("contester"), "contest" );
	deepEqual( Stem("conti"), "cont" );
	deepEqual( Stem("contiennent"), "contiennent" );
	deepEqual( Stem("contient"), "contient" );
	deepEqual( Stem("contine"), "contin" );
	deepEqual( Stem("continent"), "continent" );
	deepEqual( Stem("continental"), "continental" );
	deepEqual( Stem("continents"), "continent" );
	deepEqual( Stem("contino"), "contino" );
	deepEqual( Stem("contînt"), "contînt" );
	deepEqual( Stem("continu"), "continu" );
	deepEqual( Stem("continua"), "continu" );
	deepEqual( Stem("continuait"), "continu" );
	deepEqual( Stem("continuant"), "continu" );
	deepEqual( Stem("continuation"), "continu" );
	deepEqual( Stem("continue"), "continu" );
	deepEqual( Stem("continué"), "continu" );
	deepEqual( Stem("continuel"), "continuel" );
	deepEqual( Stem("continuelle"), "continuel" );
	deepEqual( Stem("continuellement"), "continuel" );
	deepEqual( Stem("continuelles"), "continuel" );
	deepEqual( Stem("continuels"), "continuel" );
	deepEqual( Stem("continuer"), "continu" );
	deepEqual( Stem("continuera"), "continu" );
	deepEqual( Stem("continuerait"), "continu" );
	deepEqual( Stem("continueront"), "continu" );
	deepEqual( Stem("continuez"), "continu" );
	deepEqual( Stem("continuité"), "continu" );
	deepEqual( Stem("continuons"), "continuon" );
	deepEqual( Stem("contorsions"), "contors" );
	deepEqual( Stem("contour"), "contour" );
	deepEqual( Stem("contournait"), "contourn" );
	deepEqual( Stem("contournant"), "contourn" );
	deepEqual( Stem("contourne"), "contourn" );
	deepEqual( Stem("contours"), "contour" );
	deepEqual( Stem("contractait"), "contract" );
	deepEqual( Stem("contracté"), "contract" );
	deepEqual( Stem("contractée"), "contract" );
	deepEqual( Stem("contracter"), "contract" );
	deepEqual( Stem("contractés"), "contract" );
	deepEqual( Stem("contractions"), "contract" );
	deepEqual( Stem("contradictoirement"), "contradictoir" );
	deepEqual( Stem("contradictoires"), "contradictoir" );
	deepEqual( Stem("contraindre"), "contraindr" );
	deepEqual( Stem("contraint"), "contraint" );
	deepEqual( Stem("contrainte"), "contraint" );
	deepEqual( Stem("contraintes"), "contraint" );
	deepEqual( Stem("contraire"), "contrair" );
	deepEqual( Stem("contraires"), "contrair" );
	deepEqual( Stem("contraria"), "contrari" );
	deepEqual( Stem("contrariait"), "contrari" );
	deepEqual( Stem("contrariant"), "contrari" );
	deepEqual( Stem("contrarie"), "contrar" );
	deepEqual( Stem("contrarié"), "contrari" );
	deepEqual( Stem("contrariée"), "contrari" );
	deepEqual( Stem("contrarier"), "contrari" );
	deepEqual( Stem("contrariera"), "contrari" );
	deepEqual( Stem("contrariés"), "contrari" );
	deepEqual( Stem("contrariété"), "contrariet" );
	deepEqual( Stem("contrariétés"), "contrariet" );
	deepEqual( Stem("contrariez"), "contrar" );
	deepEqual( Stem("contrastait"), "contrast" );
	deepEqual( Stem("contraste"), "contrast" );
	deepEqual( Stem("contrastes"), "contrast" );
	deepEqual( Stem("contrat"), "contrat" );
	deepEqual( Stem("contravention"), "contravent" );
	deepEqual( Stem("contraventions"), "contravent" );
	deepEqual( Stem("contre"), "contr" );
	deepEqual( Stem("contrebandier"), "contrebandi" );
	deepEqual( Stem("contrebandiers"), "contrebandi" );
	deepEqual( Stem("contrebas"), "contreb" );
	deepEqual( Stem("contrebasse"), "contreb" );
	deepEqual( Stem("contrebasses"), "contreb" );
	deepEqual( Stem("contrecoup"), "contrecoup" );
	deepEqual( Stem("contrecoups"), "contrecoup" );
	deepEqual( Stem("contredanse"), "contredans" );
	deepEqual( Stem("contredanses"), "contredans" );
	deepEqual( Stem("contredirait"), "contred" );
	deepEqual( Stem("contredire"), "contredir" );
	deepEqual( Stem("contredisait"), "contredis" );
	deepEqual( Stem("contredisant"), "contredis" );
	deepEqual( Stem("contredit"), "contred" );
	deepEqual( Stem("contrée"), "contr" );
	deepEqual( Stem("contrées"), "contr" );
	deepEqual( Stem("contrefaite"), "contrefait" );
	deepEqual( Stem("contrefera"), "contref" );
	deepEqual( Stem("contrefort"), "contrefort" );
	deepEqual( Stem("contresens"), "contresen" );
	deepEqual( Stem("contresigner"), "contresign" );
	deepEqual( Stem("contretemps"), "contretemp" );
	deepEqual( Stem("contribua"), "contribu" );
	deepEqual( Stem("contribuai"), "contribu" );
	deepEqual( Stem("contribué"), "contribu" );
	deepEqual( Stem("contribuer"), "contribu" );
	deepEqual( Stem("contribution"), "contribu" );
	deepEqual( Stem("contributions"), "contribu" );
	deepEqual( Stem("contrit"), "contr" );
	deepEqual( Stem("contrition"), "contrit" );
	deepEqual( Stem("contrôle"), "contrôl" );
	deepEqual( Stem("contrôler"), "contrôl" );
	deepEqual( Stem("contrôles"), "contrôl" );
	deepEqual( Stem("contumace"), "contumac" );
	deepEqual( Stem("contusions"), "contus" );
	deepEqual( Stem("convaincre"), "convaincr" );
	deepEqual( Stem("convaincu"), "convaincu" );
	deepEqual( Stem("convaincue"), "convaincu" );
	deepEqual( Stem("convenable"), "conven" );
	deepEqual( Stem("convenablement"), "conven" );
	deepEqual( Stem("convenables"), "conven" );
	deepEqual( Stem("convenaient"), "conven" );
	deepEqual( Stem("convenait"), "conven" );
	deepEqual( Stem("convenance"), "conven" );
	deepEqual( Stem("convenances"), "conven" );
	deepEqual( Stem("convenez"), "conven" );
	deepEqual( Stem("convenir"), "conven" );
	deepEqual( Stem("convenons"), "convenon" );
	deepEqual( Stem("convention"), "convent" );
	deepEqual( Stem("convenu"), "convenu" );
	deepEqual( Stem("convenue"), "convenu" );
	deepEqual( Stem("convenus"), "convenus" );
	deepEqual( Stem("converger"), "converg" );
	deepEqual( Stem("conversation"), "convers" );
	deepEqual( Stem("conversations"), "convers" );
	deepEqual( Stem("conversion"), "convers" );
	deepEqual( Stem("conversions"), "convers" );
	deepEqual( Stem("convertie"), "convert" );
	deepEqual( Stem("convertir"), "convert" );
	deepEqual( Stem("convertis"), "convert" );
	deepEqual( Stem("conviction"), "convict" );
	deepEqual( Stem("convictions"), "convict" );
	deepEqual( Stem("conviendra"), "conviendr" );
	deepEqual( Stem("conviendrait"), "conviendr" );
	deepEqual( Stem("conviendrez"), "conviendr" );
	deepEqual( Stem("conviendrons"), "conviendron" );
	deepEqual( Stem("convienne"), "convien" );
	deepEqual( Stem("conviennent"), "conviennent" );
	deepEqual( Stem("conviens"), "convien" );
	deepEqual( Stem("convient"), "convient" );
	deepEqual( Stem("convier"), "convi" );
	deepEqual( Stem("convint"), "convint" );
	deepEqual( Stem("convînt"), "convînt" );
	deepEqual( Stem("convives"), "conviv" );
	deepEqual( Stem("convocation"), "convoc" );
	deepEqual( Stem("convoi"), "convoi" );
	deepEqual( Stem("convois"), "convois" );
	deepEqual( Stem("convoitise"), "convoitis" );
	deepEqual( Stem("convulsif"), "convuls" );
	deepEqual( Stem("convulsifs"), "convuls" );
	deepEqual( Stem("convulsion"), "convuls" );
	deepEqual( Stem("convulsionnait"), "convulsion" );
	deepEqual( Stem("convulsive"), "convuls" );
	deepEqual( Stem("convulsivement"), "convuls" );
	deepEqual( Stem("coolies"), "cool" );
	deepEqual( Stem("copeaux"), "copeau" );
	deepEqual( Stem("copiait"), "copi" );
	deepEqual( Stem("copiant"), "copi" );
	deepEqual( Stem("copie"), "cop" );
	deepEqual( Stem("copié"), "copi" );
	deepEqual( Stem("copiée"), "copi" );
	deepEqual( Stem("copient"), "copient" );
	deepEqual( Stem("copier"), "copi" );
	deepEqual( Stem("copies"), "cop" );
	deepEqual( Stem("copieusement"), "copieux" );
	deepEqual( Stem("copiez"), "cop" );
	deepEqual( Stem("copiste"), "copist" );
	deepEqual( Stem("coq"), "coq" );
	deepEqual( Stem("coque"), "coqu" );
	deepEqual( Stem("coquets"), "coquet" );
	deepEqual( Stem("coquette"), "coquet" );
	deepEqual( Stem("coquetterie"), "coquetter" );
	deepEqual( Stem("coquetteries"), "coquetter" );
	deepEqual( Stem("coquille"), "coquill" );
	deepEqual( Stem("coquin"), "coquin" );
	deepEqual( Stem("coquine"), "coquin" );
	deepEqual( Stem("coquinerie"), "coquiner" );
	deepEqual( Stem("coquineries"), "coquiner" );
	deepEqual( Stem("coquins"), "coquin" );
	deepEqual( Stem("coran"), "coran" );
	deepEqual( Stem("corbeau"), "corbeau" );
	deepEqual( Stem("corbeaux"), "corbeau" );
	deepEqual( Stem("corbeille"), "corbeil" );
	deepEqual( Stem("corday"), "corday" );
	deepEqual( Stem("corde"), "cord" );
	deepEqual( Stem("cordes"), "cord" );
	deepEqual( Stem("cordon"), "cordon" );
	deepEqual( Stem("cordons"), "cordon" );
	deepEqual( Stem("corea"), "cor" );
	deepEqual( Stem("cormorans"), "cormoran" );
	deepEqual( Stem("cornac"), "cornac" );
	deepEqual( Stem("corne"), "corn" );
	deepEqual( Stem("corneille"), "corneil" );
	deepEqual( Stem("corneilles"), "corneil" );
	deepEqual( Stem("cornelia"), "corneli" );
	deepEqual( Stem("cornelii"), "cornelii" );
	deepEqual( Stem("cornes"), "corn" );
	deepEqual( Stem("corniche"), "cornich" );
	deepEqual( Stem("cornichon"), "cornichon" );
	deepEqual( Stem("cornwallis"), "cornwall" );
	deepEqual( Stem("corporation"), "corpor" );
	deepEqual( Stem("corps"), "corp" );
	deepEqual( Stem("corpus"), "corpus" );
	deepEqual( Stem("corrals"), "corral" );
	deepEqual( Stem("correct"), "correct" );
	deepEqual( Stem("correcte"), "correct" );
	deepEqual( Stem("correctement"), "correct" );
	deepEqual( Stem("correctif"), "correct" );
	deepEqual( Stem("correction"), "correct" );
	deepEqual( Stem("correctionnelle"), "correctionnel" );
	deepEqual( Stem("corrège"), "correg" );
	deepEqual( Stem("correspondait"), "correspond" );
	deepEqual( Stem("correspondance"), "correspond" );
	deepEqual( Stem("correspondances"), "correspond" );
	deepEqual( Stem("correspondant"), "correspond" );
	deepEqual( Stem("correspondants"), "correspond" );
	deepEqual( Stem("correspondre"), "correspondr" );
	deepEqual( Stem("corridor"), "corridor" );
	deepEqual( Stem("corridors"), "corridor" );
	deepEqual( Stem("corrigeait"), "corrig" );
	deepEqual( Stem("corrigée"), "corrig" );
	deepEqual( Stem("corriger"), "corrig" );
	deepEqual( Stem("corrigerez"), "corrig" );
	deepEqual( Stem("corrodant"), "corrod" );
	deepEqual( Stem("corrompre"), "corrompr" );
	deepEqual( Stem("corrompu"), "corrompu" );
	deepEqual( Stem("corrosif"), "corros" );
	deepEqual( Stem("corruption"), "corrupt" );
	deepEqual( Stem("cors"), "cor" );
	deepEqual( Stem("corso"), "corso" );
	deepEqual( Stem("cortège"), "corteg" );
	deepEqual( Stem("cortellate"), "cortellat" );
	deepEqual( Stem("corvée"), "corv" );
	deepEqual( Stem("cosa"), "cos" );
	deepEqual( Stem("cosaques"), "cosaqu" );
	deepEqual( Stem("cosi"), "cos" );
	deepEqual( Stem("cosmopolite"), "cosmopolit" );
	deepEqual( Stem("costume"), "costum" );
	deepEqual( Stem("costumes"), "costum" );
	deepEqual( Stem("cotait"), "cot" );
	deepEqual( Stem("cote"), "cot" );
	deepEqual( Stem("côte"), "côt" );
	deepEqual( Stem("côté"), "côt" );
	deepEqual( Stem("coteaux"), "coteau" );
	deepEqual( Stem("cotée"), "cot" );
	deepEqual( Stem("coterie"), "coter" );
	deepEqual( Stem("coteries"), "coter" );
	deepEqual( Stem("côtes"), "côt" );
	deepEqual( Stem("côtés"), "côt" );
	deepEqual( Stem("coton"), "coton" );
	deepEqual( Stem("cotonnades"), "cotonnad" );
	deepEqual( Stem("cotons"), "coton" );
	deepEqual( Stem("côtoyant"), "côtoi" );
	deepEqual( Stem("côtoyé"), "côtoi" );
	deepEqual( Stem("cotre"), "cotr" );
	deepEqual( Stem("cotte"), "cott" );
	deepEqual( Stem("cou"), "cou" );
	deepEqual( Stem("coucha"), "couch" );
	deepEqual( Stem("couchait"), "couch" );
	deepEqual( Stem("couchant"), "couch" );
	deepEqual( Stem("couche"), "couch" );
	deepEqual( Stem("couché"), "couch" );
	deepEqual( Stem("couchée"), "couch" );
	deepEqual( Stem("couchent"), "couchent" );
	deepEqual( Stem("coucher"), "couch" );
	deepEqual( Stem("coucherai"), "couch" );
	deepEqual( Stem("coucherait"), "couch" );
	deepEqual( Stem("couchèrent"), "couch" );
	deepEqual( Stem("couchés"), "couch" );
	deepEqual( Stem("couchettes"), "couchet" );
	deepEqual( Stem("couchez"), "couch" );
	deepEqual( Stem("coude"), "coud" );
	deepEqual( Stem("coudes"), "coud" );
	deepEqual( Stem("coudre"), "coudr" );
	deepEqual( Stem("coudrier"), "coudri" );
	deepEqual( Stem("couds"), "coud" );
	deepEqual( Stem("coulaient"), "coul" );
	deepEqual( Stem("coulait"), "coul" );
	deepEqual( Stem("coulant"), "coul" );
	deepEqual( Stem("coule"), "coul" );
	deepEqual( Stem("coulé"), "coul" );
	deepEqual( Stem("couler"), "coul" );
	deepEqual( Stem("coulèrent"), "coul" );
	deepEqual( Stem("couleur"), "couleur" );
	deepEqual( Stem("couleurs"), "couleur" );
	deepEqual( Stem("coulisse"), "coul" );
	deepEqual( Stem("coulisses"), "coul" );
	deepEqual( Stem("couloirs"), "couloir" );
	deepEqual( Stem("coulon"), "coulon" );
	deepEqual( Stem("council"), "council" );
	deepEqual( Stem("coup"), "coup" );
	deepEqual( Stem("coupa"), "coup" );
	deepEqual( Stem("coupable"), "coupabl" );
	deepEqual( Stem("coupables"), "coupabl" );
	deepEqual( Stem("coupaient"), "coup" );
	deepEqual( Stem("coupait"), "coup" );
	deepEqual( Stem("coupant"), "coup" );
	deepEqual( Stem("coupât"), "coup" );
	deepEqual( Stem("coupe"), "coup" );
	deepEqual( Stem("coupé"), "coup" );
	deepEqual( Stem("coupée"), "coup" );
	deepEqual( Stem("coupées"), "coup" );
	deepEqual( Stem("coupent"), "coupent" );
	deepEqual( Stem("couper"), "coup" );
	deepEqual( Stem("couperosée"), "couperos" );
	deepEqual( Stem("coupes"), "coup" );
	deepEqual( Stem("coupés"), "coup" );
	deepEqual( Stem("coupez"), "coup" );
	deepEqual( Stem("couple"), "coupl" );
	deepEqual( Stem("couples"), "coupl" );
	deepEqual( Stem("couplet"), "couplet" );
	deepEqual( Stem("couplets"), "couplet" );
	deepEqual( Stem("coups"), "coup" );
	deepEqual( Stem("coupure"), "coupur" );
	deepEqual( Stem("cour"), "cour" );
	deepEqual( Stem("courage"), "courag" );
	deepEqual( Stem("courages"), "courag" );
	deepEqual( Stem("courageuse"), "courag" );
	deepEqual( Stem("courageusement"), "courag" );
	deepEqual( Stem("courageuses"), "courag" );
	deepEqual( Stem("courageux"), "courag" );
	deepEqual( Stem("couraient"), "cour" );
	deepEqual( Stem("courait"), "cour" );
	deepEqual( Stem("courant"), "cour" );
	deepEqual( Stem("courants"), "cour" );
	deepEqual( Stem("courbait"), "courb" );
	deepEqual( Stem("courbe"), "courb" );
	deepEqual( Stem("courbé"), "courb" );
	deepEqual( Stem("courber"), "courb" );
	deepEqual( Stem("courbes"), "courb" );
	deepEqual( Stem("courbés"), "courb" );
	deepEqual( Stem("courbure"), "courbur" );
	deepEqual( Stem("coure"), "cour" );
	deepEqual( Stem("courent"), "courent" );
	deepEqual( Stem("coureur"), "coureur" );
	deepEqual( Stem("coureurs"), "coureur" );
	deepEqual( Stem("courez"), "cour" );
	deepEqual( Stem("courier"), "couri" );
	deepEqual( Stem("courir"), "cour" );
	deepEqual( Stem("couronnaient"), "couron" );
	deepEqual( Stem("couronne"), "couron" );
	deepEqual( Stem("couronné"), "couron" );
	deepEqual( Stem("couronnées"), "couron" );
	deepEqual( Stem("couronnement"), "couron" );
	deepEqual( Stem("couronnent"), "couronnent" );
	deepEqual( Stem("couronner"), "couron" );
	deepEqual( Stem("couronnes"), "couron" );
	deepEqual( Stem("courons"), "couron" );
	deepEqual( Stem("courrais"), "courr" );
	deepEqual( Stem("courrez"), "courr" );
	deepEqual( Stem("courrier"), "courri" );
	deepEqual( Stem("courriers"), "courri" );
	deepEqual( Stem("courroucés"), "courrouc" );
	deepEqual( Stem("courroux"), "courroux" );
	deepEqual( Stem("cours"), "cour" );
	deepEqual( Stem("course"), "cours" );
	deepEqual( Stem("courses"), "cours" );
	deepEqual( Stem("court"), "court" );
	deepEqual( Stem("courte"), "court" );
	deepEqual( Stem("courtes"), "court" );
	deepEqual( Stem("courtier"), "courti" );
	deepEqual( Stem("courtiers"), "courti" );
	deepEqual( Stem("courtine"), "courtin" );
	deepEqual( Stem("courtisan"), "courtisan" );
	deepEqual( Stem("courtisanerie"), "courtisaner" );
	deepEqual( Stem("courtisanesque"), "courtisanesqu" );
	deepEqual( Stem("courtisans"), "courtisan" );
	deepEqual( Stem("courts"), "court" );
	deepEqual( Stem("couru"), "couru" );
	deepEqual( Stem("coururent"), "coururent" );
	deepEqual( Stem("courus"), "courus" );
	deepEqual( Stem("courut"), "courut" );
	deepEqual( Stem("courût"), "courût" );
	deepEqual( Stem("cousait"), "cous" );
	deepEqual( Stem("cousin"), "cousin" );
	deepEqual( Stem("cousine"), "cousin" );
	deepEqual( Stem("cousines"), "cousin" );
	deepEqual( Stem("coussin"), "coussin" );
	deepEqual( Stem("coussins"), "coussin" );
	deepEqual( Stem("cousu"), "cousu" );
	deepEqual( Stem("coûta"), "coût" );
	deepEqual( Stem("coûtaient"), "coût" );
	deepEqual( Stem("coûtait"), "coût" );
	deepEqual( Stem("coûtant"), "coût" );
	deepEqual( Stem("coûte"), "coût" );
	deepEqual( Stem("coûté"), "coût" );
	deepEqual( Stem("couteau"), "couteau" );
	deepEqual( Stem("couteaux"), "couteau" );
	deepEqual( Stem("coûtent"), "coûtent" );
	deepEqual( Stem("couter"), "cout" );
	deepEqual( Stem("coûter"), "coût" );
	deepEqual( Stem("coûtera"), "coût" );
	deepEqual( Stem("coûterait"), "coût" );
	deepEqual( Stem("coûtèrent"), "coût" );
	deepEqual( Stem("coûteront"), "coût" );
	deepEqual( Stem("coutil"), "coutil" );
	deepEqual( Stem("coutume"), "coutum" );
	deepEqual( Stem("coutumes"), "coutum" );
	deepEqual( Stem("couvent"), "couvent" );
	deepEqual( Stem("couvents"), "couvent" );
	deepEqual( Stem("couvert"), "couvert" );
	deepEqual( Stem("couverte"), "couvert" );
	deepEqual( Stem("couvertes"), "couvert" );
	deepEqual( Stem("couverts"), "couvert" );
	deepEqual( Stem("couverture"), "couvertur" );
	deepEqual( Stem("couvertures"), "couvertur" );
	deepEqual( Stem("couvraient"), "couvr" );
	deepEqual( Stem("couvrait"), "couvr" );
	deepEqual( Stem("couvrant"), "couvr" );
	deepEqual( Stem("couvre"), "couvr" );
	deepEqual( Stem("couvrent"), "couvrent" );
	deepEqual( Stem("couvrir"), "couvr" );
	deepEqual( Stem("couvrira"), "couvr" );
	deepEqual( Stem("couvrit"), "couvr" );
	deepEqual( Stem("craché"), "crach" );
	deepEqual( Stem("cracher"), "crach" );
	deepEqual( Stem("craignais"), "craign" );
	deepEqual( Stem("craignait"), "craign" );
	deepEqual( Stem("craignant"), "craign" );
	deepEqual( Stem("craignez"), "craign" );
	deepEqual( Stem("craignions"), "craignion" );
	deepEqual( Stem("craignirent"), "craign" );
	deepEqual( Stem("craignit"), "craign" );
	deepEqual( Stem("craignons"), "craignon" );
	deepEqual( Stem("craindra"), "craindr" );
	deepEqual( Stem("craindrai"), "craindr" );
	deepEqual( Stem("craindre"), "craindr" );
	deepEqual( Stem("crains"), "crain" );
	deepEqual( Stem("craint"), "craint" );
	deepEqual( Stem("crainte"), "craint" );
	deepEqual( Stem("craintes"), "craint" );
	deepEqual( Stem("craintifs"), "craintif" );
	deepEqual( Stem("cramoisi"), "cramois" );
	deepEqual( Stem("cramoisie"), "cramois" );
	deepEqual( Stem("cramoisis"), "cramois" );
	deepEqual( Stem("crampe"), "cramp" );
	deepEqual( Stem("cramponne"), "crampon" );
	deepEqual( Stem("crâne"), "crân" );
	deepEqual( Stem("craquement"), "craqu" );
	deepEqual( Stem("crasseux"), "crasseux" );
	deepEqual( Stem("cravache"), "cravach" );
	deepEqual( Stem("cravate"), "cravat" );
	deepEqual( Stem("crayon"), "crayon" );
	deepEqual( Stem("créance"), "créanc" );
	deepEqual( Stem("créature"), "créatur" );
	deepEqual( Stem("créatures"), "créatur" );
	deepEqual( Stem("credete"), "credet" );
	deepEqual( Stem("crédit"), "cred" );
	deepEqual( Stem("créditeur"), "créditeur" );
	deepEqual( Stem("crédulité"), "crédul" );
	deepEqual( Stem("créé"), "cré" );
	deepEqual( Stem("creek"), "creek" );
	deepEqual( Stem("creeks"), "creek" );
	deepEqual( Stem("crème"), "crem" );
	deepEqual( Stem("créole"), "créol" );
	deepEqual( Stem("crépuscule"), "crépuscul" );
	deepEqual( Stem("crescentini"), "crescentin" );
	deepEqual( Stem("crescentius"), "crescentius" );
	deepEqual( Stem("crescenzi"), "crescenz" );
	deepEqual( Stem("crête"), "crêt" );
	deepEqual( Stem("creusaient"), "creus" );
	deepEqual( Stem("creusait"), "creus" );
	deepEqual( Stem("creusé"), "creus" );
	deepEqual( Stem("creuses"), "creus" );
	deepEqual( Stem("creux"), "creux" );
	deepEqual( Stem("crevé"), "crev" );
	deepEqual( Stem("crèvera"), "crev" );
	deepEqual( Stem("cri"), "cri" );
	deepEqual( Stem("cria"), "cri" );
	deepEqual( Stem("criaient"), "cri" );
	deepEqual( Stem("criait"), "cri" );
	deepEqual( Stem("criant"), "cri" );
	deepEqual( Stem("criante"), "cri" );
	deepEqual( Stem("criards"), "criard" );
	deepEqual( Stem("criblé"), "cribl" );
	deepEqual( Stem("crie"), "cri" );
	deepEqual( Stem("crié"), "cri" );
	deepEqual( Stem("crier"), "cri" );
	deepEqual( Stem("crièrent"), "cri" );
	deepEqual( Stem("criés"), "cri" );
	deepEqual( Stem("criez"), "cri" );
	deepEqual( Stem("crime"), "crim" );
	deepEqual( Stem("crimes"), "crim" );
	deepEqual( Stem("criminel"), "criminel" );
	deepEqual( Stem("criminelle"), "criminel" );
	deepEqual( Stem("criminelles"), "criminel" );
	deepEqual( Stem("criminels"), "criminel" );
	deepEqual( Stem("crin"), "crin" );
	deepEqual( Stem("crinière"), "crini" );
	deepEqual( Stem("crinières"), "crini" );
	deepEqual( Stem("crins"), "crin" );
	deepEqual( Stem("cris"), "cris" );
	deepEqual( Stem("crise"), "cris" );
	deepEqual( Stem("crispe"), "crisp" );
	deepEqual( Stem("cristal"), "cristal" );
	deepEqual( Stem("cristaux"), "cristal" );
	deepEqual( Stem("critique"), "critiqu" );
	deepEqual( Stem("critiqué"), "critiqu" );
	deepEqual( Stem("critiquent"), "critiquent" );
	deepEqual( Stem("critiques"), "critiqu" );
	deepEqual( Stem("crochet"), "crochet" );
	deepEqual( Stem("croie"), "croi" );
	deepEqual( Stem("croient"), "croient" );
	deepEqual( Stem("croira"), "croir" );
	deepEqual( Stem("croirai"), "croir" );
	deepEqual( Stem("croiraient"), "croir" );
	deepEqual( Stem("croirais"), "croir" );
	deepEqual( Stem("croirait"), "croir" );
	deepEqual( Stem("croire"), "croir" );
	deepEqual( Stem("croirez"), "croir" );
	deepEqual( Stem("croiriez"), "croir" );
	deepEqual( Stem("croirons"), "croiron" );
	deepEqual( Stem("croiront"), "croiront" );
	deepEqual( Stem("crois"), "crois" );
	deepEqual( Stem("croisa"), "crois" );
	deepEqual( Stem("croisade"), "croisad" );
	deepEqual( Stem("croisades"), "croisad" );
	deepEqual( Stem("croisaient"), "crois" );
	deepEqual( Stem("croisait"), "crois" );
	deepEqual( Stem("croisé"), "crois" );
	deepEqual( Stem("croisée"), "crois" );
	deepEqual( Stem("croisées"), "crois" );
	deepEqual( Stem("croisenois"), "croisenois" );
	deepEqual( Stem("croisés"), "crois" );
	deepEqual( Stem("croissaient"), "croiss" );
	deepEqual( Stem("croissait"), "croiss" );
	deepEqual( Stem("croissance"), "croissanc" );
	deepEqual( Stem("croissant"), "croiss" );
	deepEqual( Stem("croissante"), "croiss" );
	deepEqual( Stem("croit"), "croit" );
	deepEqual( Stem("croître"), "croîtr" );
	deepEqual( Stem("croix"), "croix" );
	deepEqual( Stem("cromarty"), "cromarty" );
	deepEqual( Stem("cross"), "cross" );
	deepEqual( Stem("crotte"), "crott" );
	deepEqual( Stem("crotté"), "crott" );
	deepEqual( Stem("crottées"), "crott" );
	deepEqual( Stem("crouler"), "croul" );
	deepEqual( Stem("croupe"), "croup" );
	deepEqual( Stem("croupir"), "croup" );
	deepEqual( Stem("croyaient"), "croi" );
	deepEqual( Stem("croyais"), "croi" );
	deepEqual( Stem("croyait"), "croi" );
	deepEqual( Stem("croyance"), "croyanc" );
	deepEqual( Stem("croyant"), "croi" );
	deepEqual( Stem("croyante"), "croi" );
	deepEqual( Stem("croyants"), "croi" );
	deepEqual( Stem("croyez"), "croi" );
	deepEqual( Stem("croyiez"), "croi" );
	deepEqual( Stem("croyons"), "croyon" );
	deepEqual( Stem("cru"), "cru" );
	deepEqual( Stem("cruauté"), "cruaut" );
	deepEqual( Stem("cruautés"), "cruaut" );
	deepEqual( Stem("cruciales"), "crucial" );
	deepEqual( Stem("crucifix"), "crucifix" );
	deepEqual( Stem("crue"), "cru" );
	deepEqual( Stem("cruel"), "cruel" );
	deepEqual( Stem("cruelle"), "cruel" );
	deepEqual( Stem("cruellement"), "cruel" );
	deepEqual( Stem("cruelles"), "cruel" );
	deepEqual( Stem("cruels"), "cruel" );
	deepEqual( Stem("crues"), "cru" );
	deepEqual( Stem("crûment"), "crûment" );
	deepEqual( Stem("crurent"), "crurent" );
	deepEqual( Stem("crus"), "crus" );
	deepEqual( Stem("crut"), "crut" );
	deepEqual( Stem("crût"), "crût" );
	deepEqual( Stem("cueilli"), "cueil" );
	deepEqual( Stem("cuir"), "cuir" );
	deepEqual( Stem("cuirasse"), "cuir" );
	deepEqual( Stem("cuirasses"), "cuir" );
	deepEqual( Stem("cuirassier"), "cuirassi" );
	deepEqual( Stem("cuirassiers"), "cuirassi" );
	deepEqual( Stem("cuisant"), "cuis" );
	deepEqual( Stem("cuisante"), "cuis" );
	deepEqual( Stem("cuisine"), "cuisin" );
	deepEqual( Stem("cuisines"), "cuisin" );
	deepEqual( Stem("cuisinier"), "cuisini" );
	deepEqual( Stem("cuisinière"), "cuisini" );
	deepEqual( Stem("cuisiniers"), "cuisini" );
	deepEqual( Stem("cuisse"), "cuiss" );
	deepEqual( Stem("cuisses"), "cuiss" );
	deepEqual( Stem("cuistre"), "cuistr" );
	deepEqual( Stem("cuistres"), "cuistr" );
	deepEqual( Stem("cuite"), "cuit" );
	deepEqual( Stem("cuivre"), "cuivr" );
	deepEqual( Stem("cuivres"), "cuivr" );
	deepEqual( Stem("culbute"), "culbut" );
	deepEqual( Stem("culotte"), "culott" );
	deepEqual( Stem("culottes"), "culott" );
	deepEqual( Stem("culpa"), "culp" );
	deepEqual( Stem("culpabilité"), "culpabl" );
	deepEqual( Stem("culte"), "cult" );
	deepEqual( Stem("cultivée"), "cultiv" );
	deepEqual( Stem("cultivées"), "cultiv" );
	deepEqual( Stem("cultivent"), "cultivent" );
	deepEqual( Stem("cultiver"), "cultiv" );
	deepEqual( Stem("cunard"), "cunard" );
	deepEqual( Stem("cunctando"), "cunctando" );
	deepEqual( Stem("cupidité"), "cupid" );
	deepEqual( Stem("cure"), "cur" );
	deepEqual( Stem("curé"), "cur" );
	deepEqual( Stem("cures"), "cur" );
	deepEqual( Stem("curés"), "cur" );
	deepEqual( Stem("curieuse"), "curieux" );
	deepEqual( Stem("curieusement"), "curieux" );
	deepEqual( Stem("curieuses"), "curieux" );
	deepEqual( Stem("curieux"), "curieux" );
	deepEqual( Stem("curiosité"), "curios" );
	deepEqual( Stem("custom"), "custom" );
	deepEqual( Stem("cuves"), "cuv" );
	deepEqual( Stem("cuvette"), "cuvet" );
	deepEqual( Stem("cygne"), "cygn" );
	deepEqual( Stem("cymbales"), "cymbal" );
	deepEqual( Stem("cynique"), "cyniqu" );
	deepEqual( Stem("cyr"), "cyr" );
	deepEqual( Stem("d"), "d" );
	deepEqual( Stem("da"), "da" );
	deepEqual( Stem("dague"), "dagu" );
	deepEqual( Stem("daigna"), "daign" );
	deepEqual( Stem("daignaient"), "daign" );
	deepEqual( Stem("daignait"), "daign" );
	deepEqual( Stem("daignant"), "daign" );
	deepEqual( Stem("daignât"), "daign" );
	deepEqual( Stem("daigne"), "daign" );
	deepEqual( Stem("daigné"), "daign" );
	deepEqual( Stem("daignent"), "daignent" );
	deepEqual( Stem("daigner"), "daign" );
	deepEqual( Stem("daignera"), "daign" );
	deepEqual( Stem("daignerait"), "daign" );
	deepEqual( Stem("daignèrent"), "daign" );
	deepEqual( Stem("daignerez"), "daign" );
	deepEqual( Stem("daignez"), "daign" );
	deepEqual( Stem("daily"), "daily" );
	deepEqual( Stem("daim"), "daim" );
	deepEqual( Stem("dais"), "dais" );
	deepEqual( Stem("dakota"), "dakot" );
	deepEqual( Stem("dalles"), "dall" );
	deepEqual( Stem("dalliance"), "dallianc" );
	deepEqual( Stem("dalmate"), "dalmat" );
	deepEqual( Stem("damas"), "dam" );
	deepEqual( Stem("damasquinés"), "damasquin" );
	deepEqual( Stem("dame"), "dam" );
	deepEqual( Stem("dames"), "dam" );
	deepEqual( Stem("damné"), "damn" );
	deepEqual( Stem("damnée"), "damn" );
	deepEqual( Stem("damnent"), "damnent" );
	deepEqual( Stem("damnés"), "damn" );
	deepEqual( Stem("dandin"), "dandin" );
	deepEqual( Stem("dandinant"), "dandin" );
	deepEqual( Stem("dandy"), "dandy" );
	deepEqual( Stem("dandys"), "dandy" );
	deepEqual( Stem("danger"), "dang" );
	deepEqual( Stem("dangereuse"), "danger" );
	deepEqual( Stem("dangereusement"), "danger" );
	deepEqual( Stem("dangereuses"), "danger" );
	deepEqual( Stem("dangereux"), "danger" );
	deepEqual( Stem("dangers"), "danger" );
	deepEqual( Stem("dans"), "dan" );
	deepEqual( Stem("dansa"), "dans" );
	deepEqual( Stem("dansaient"), "dans" );
	deepEqual( Stem("dansait"), "dans" );
	deepEqual( Stem("dansant"), "dans" );
	deepEqual( Stem("danse"), "dans" );
	deepEqual( Stem("dansé"), "dans" );
	deepEqual( Stem("dansent"), "dansent" );
	deepEqual( Stem("danser"), "dans" );
	deepEqual( Stem("dansèrent"), "dans" );
	deepEqual( Stem("danses"), "dans" );
	deepEqual( Stem("danseuses"), "danseux" );
	deepEqual( Stem("dante"), "dant" );
	deepEqual( Stem("danton"), "danton" );
	deepEqual( Stem("darkness"), "darkness" );
	deepEqual( Stem("data"), "dat" );
	deepEqual( Stem("datait"), "dat" );
	deepEqual( Stem("date"), "dat" );
	deepEqual( Stem("daté"), "dat" );
	deepEqual( Stem("datée"), "dat" );
	deepEqual( Stem("datées"), "dat" );
	deepEqual( Stem("dates"), "dat" );
	deepEqual( Stem("dattiers"), "datti" );
	deepEqual( Stem("davantage"), "davantag" );
	deepEqual( Stem("davenport"), "davenport" );
	deepEqual( Stem("davide"), "david" );
	deepEqual( Stem("day"), "day" );
	deepEqual( Stem("days"), "day" );
	deepEqual( Stem("de"), "de" );
	deepEqual( Stem("dé"), "dé" );
	deepEqual( Stem("débarqua"), "débarqu" );
	deepEqual( Stem("débarquaient"), "débarqu" );
	deepEqual( Stem("débarquait"), "débarqu" );
	deepEqual( Stem("débarquant"), "débarqu" );
	deepEqual( Stem("débarque"), "débarqu" );
	deepEqual( Stem("débarqué"), "débarqu" );
	deepEqual( Stem("débarquement"), "débarqu" );
	deepEqual( Stem("débarquer"), "débarqu" );
	deepEqual( Stem("débarquèrent"), "débarqu" );
	deepEqual( Stem("débarrassé"), "débarrass" );
	deepEqual( Stem("débarrassée"), "débarrass" );
	deepEqual( Stem("débarrasser"), "débarrass" );
	deepEqual( Stem("débarrassés"), "débarrass" );
	deepEqual( Stem("débarrassez"), "débarrass" );
	deepEqual( Stem("débat"), "débat" );
	deepEqual( Stem("débats"), "débat" );
	deepEqual( Stem("débattait"), "débatt" );
	deepEqual( Stem("débattant"), "débatt" );
	deepEqual( Stem("débattrais"), "débattr" );
	deepEqual( Stem("débattre"), "débattr" );
	deepEqual( Stem("débattue"), "débattu" );
	deepEqual( Stem("débauche"), "débauch" );
	deepEqual( Stem("debile"), "debil" );
	deepEqual( Stem("débit"), "deb" );
	deepEqual( Stem("débita"), "débit" );
	deepEqual( Stem("débitaient"), "débit" );
	deepEqual( Stem("débitant"), "débit" );
	deepEqual( Stem("débite"), "débit" );
	deepEqual( Stem("débitées"), "débit" );
	deepEqual( Stem("débiter"), "débit" );
	deepEqual( Stem("débiteur"), "débiteur" );
	deepEqual( Stem("débonnaireté"), "débonnairet" );
	deepEqual( Stem("débordait"), "débord" );
	deepEqual( Stem("débordé"), "débord" );
	deepEqual( Stem("déborder"), "débord" );
	deepEqual( Stem("débouchaient"), "débouch" );
	deepEqual( Stem("débouche"), "débouch" );
	deepEqual( Stem("déboucher"), "débouch" );
	deepEqual( Stem("déboursé"), "débours" );
	deepEqual( Stem("debout"), "debout" );
	deepEqual( Stem("débrider"), "débrid" );
	deepEqual( Stem("débris"), "debr" );
	deepEqual( Stem("débrouillée"), "débrouill" );
	deepEqual( Stem("débrouiller"), "débrouill" );
	deepEqual( Stem("début"), "début" );
	deepEqual( Stem("débuta"), "début" );
	deepEqual( Stem("débute"), "début" );
	deepEqual( Stem("débuté"), "début" );
	deepEqual( Stem("débuter"), "début" );
	deepEqual( Stem("décachetait"), "décachet" );
	deepEqual( Stem("décachetée"), "décachet" );
	deepEqual( Stem("décachetées"), "décachet" );
	deepEqual( Stem("décadence"), "décadent" );
	deepEqual( Stem("décampa"), "décamp" );
	deepEqual( Stem("décampe"), "décamp" );
	deepEqual( Stem("décampé"), "décamp" );
	deepEqual( Stem("décamper"), "décamp" );
	deepEqual( Stem("décampons"), "décampon" );
	deepEqual( Stem("décapité"), "décap" );
	deepEqual( Stem("décelât"), "décel" );
	deepEqual( Stem("décembre"), "décembr" );
	deepEqual( Stem("décemment"), "décent" );
	deepEqual( Stem("décence"), "décenc" );
	deepEqual( Stem("décent"), "décent" );
	deepEqual( Stem("décente"), "décent" );
	deepEqual( Stem("décents"), "décent" );
	deepEqual( Stem("déceptions"), "décept" );
	deepEqual( Stem("décès"), "déces" );
	deepEqual( Stem("déchaînait"), "déchaîn" );
	deepEqual( Stem("déchaînât"), "déchaîn" );
	deepEqual( Stem("déchaînement"), "déchaîn" );
	deepEqual( Stem("déchaîner"), "déchaîn" );
	deepEqual( Stem("décharge"), "décharg" );
	deepEqual( Stem("déchargement"), "décharg" );
	deepEqual( Stem("décharger"), "décharg" );
	deepEqual( Stem("décharges"), "décharg" );
	deepEqual( Stem("déchira"), "dech" );
	deepEqual( Stem("déchiraient"), "dech" );
	deepEqual( Stem("déchirait"), "dech" );
	deepEqual( Stem("déchirant"), "déchir" );
	deepEqual( Stem("déchire"), "déchir" );
	deepEqual( Stem("déchiré"), "déchir" );
	deepEqual( Stem("déchirée"), "déchir" );
	deepEqual( Stem("déchirées"), "déchir" );
	deepEqual( Stem("déchirements"), "déchir" );
	deepEqual( Stem("déchirer"), "déchir" );
	deepEqual( Stem("déchirés"), "déchir" );
	deepEqual( Stem("déchirures"), "déchirur" );
	deepEqual( Stem("déchoir"), "déchoir" );
	deepEqual( Stem("déchu"), "déchu" );
	deepEqual( Stem("décida"), "décid" );
	deepEqual( Stem("décidaient"), "décid" );
	deepEqual( Stem("décidait"), "décid" );
	deepEqual( Stem("décidant"), "décid" );
	deepEqual( Stem("décide"), "décid" );
	deepEqual( Stem("décidé"), "décid" );
	deepEqual( Stem("décidée"), "décid" );
	deepEqual( Stem("décidées"), "décid" );
	deepEqual( Stem("décidément"), "décid" );
	deepEqual( Stem("décident"), "décident" );
	deepEqual( Stem("décider"), "décid" );
	deepEqual( Stem("décidera"), "décid" );
	deepEqual( Stem("déciderait"), "décid" );
	deepEqual( Stem("décidèrent"), "décid" );
	deepEqual( Stem("déciderez"), "décid" );
	deepEqual( Stem("décimus"), "décimus" );
	deepEqual( Stem("décisif"), "décis" );
	deepEqual( Stem("décision"), "décis" );
	deepEqual( Stem("décisions"), "décis" );
	deepEqual( Stem("décisive"), "décis" );
	deepEqual( Stem("décius"), "décius" );
	deepEqual( Stem("déclamer"), "déclam" );
	deepEqual( Stem("déclara"), "déclar" );
	deepEqual( Stem("déclarait"), "déclar" );
	deepEqual( Stem("déclarant"), "déclar" );
	deepEqual( Stem("déclaration"), "déclar" );
	deepEqual( Stem("déclarations"), "déclar" );
	deepEqual( Stem("déclare"), "déclar" );
	deepEqual( Stem("déclaré"), "déclar" );
	deepEqual( Stem("déclarée"), "déclar" );
	deepEqual( Stem("déclarer"), "déclar" );
	deepEqual( Stem("déclarerait"), "déclar" );
	deepEqual( Stem("déclarèrent"), "déclar" );
	deepEqual( Stem("déclarés"), "déclar" );
	deepEqual( Stem("déclarez"), "déclar" );
	deepEqual( Stem("déclassés"), "déclass" );
	deepEqual( Stem("décoloré"), "décolor" );
	deepEqual( Stem("décolorée"), "décolor" );
	deepEqual( Stem("décolorées"), "décolor" );
	deepEqual( Stem("décomposition"), "décomposit" );
	deepEqual( Stem("déconcerta"), "déconcert" );
	deepEqual( Stem("déconcertait"), "déconcert" );
	deepEqual( Stem("déconcerté"), "déconcert" );
	deepEqual( Stem("déconcertée"), "déconcert" );
	deepEqual( Stem("déconcerter"), "déconcert" );
	deepEqual( Stem("déconcertés"), "déconcert" );
	deepEqual( Stem("déconfit"), "déconf" );
	deepEqual( Stem("décontenancé"), "décontenanc" );
	deepEqual( Stem("déconvenues"), "déconvenu" );
	deepEqual( Stem("décorateur"), "décor" );
	deepEqual( Stem("décoration"), "décor" );
	deepEqual( Stem("décore"), "décor" );
	deepEqual( Stem("décoré"), "décor" );
	deepEqual( Stem("décorée"), "décor" );
	deepEqual( Stem("décorum"), "décorum" );
	deepEqual( Stem("découchait"), "découch" );
	deepEqual( Stem("découpait"), "découp" );
	deepEqual( Stem("découpant"), "découp" );
	deepEqual( Stem("découpés"), "découp" );
	deepEqual( Stem("découragé"), "décourag" );
	deepEqual( Stem("découragement"), "décourag" );
	deepEqual( Stem("découragements"), "décourag" );
	deepEqual( Stem("décourager"), "décourag" );
	deepEqual( Stem("décousus"), "décousus" );
	deepEqual( Stem("découvert"), "découvert" );
	deepEqual( Stem("découverte"), "découvert" );
	deepEqual( Stem("découvertes"), "découvert" );
	deepEqual( Stem("découverts"), "découvert" );
	deepEqual( Stem("découvrait"), "découvr" );
	deepEqual( Stem("découvrant"), "découvr" );
	deepEqual( Stem("découvre"), "découvr" );
	deepEqual( Stem("découvrir"), "découvr" );
	deepEqual( Stem("découvrira"), "découvr" );
	deepEqual( Stem("découvrirent"), "découvr" );
	deepEqual( Stem("découvrit"), "découvr" );
	deepEqual( Stem("décrépitude"), "décrépitud" );
	deepEqual( Stem("décret"), "décret" );
	deepEqual( Stem("décrets"), "décret" );
	deepEqual( Stem("décrire"), "décrir" );
	deepEqual( Stem("décrit"), "decr" );
	deepEqual( Stem("décrivaient"), "décriv" );
	deepEqual( Stem("décrivait"), "décriv" );
	deepEqual( Stem("décrivant"), "décriv" );
	deepEqual( Stem("décrocha"), "décroch" );
	deepEqual( Stem("dédaignant"), "dédaign" );
	deepEqual( Stem("dédaignée"), "dédaign" );
	deepEqual( Stem("dédaigneuse"), "dédaign" );
	deepEqual( Stem("dédaigneux"), "dédaign" );
	deepEqual( Stem("dédain"), "dédain" );
	deepEqual( Stem("dédains"), "dédain" );
	deepEqual( Stem("dedans"), "dedan" );
	deepEqual( Stem("dédommageait"), "dédommag" );
	deepEqual( Stem("dédommagement"), "dédommag" );
	deepEqual( Stem("dédommagent"), "dédommagent" );
	deepEqual( Stem("dédommagerez"), "dédommag" );
	deepEqual( Stem("déduire"), "déduir" );
	deepEqual( Stem("déduisit"), "déduis" );
	deepEqual( Stem("deem"), "deem" );
	deepEqual( Stem("deeper"), "deep" );
	deepEqual( Stem("déesse"), "déess" );
	deepEqual( Stem("défaillante"), "défaill" );
	deepEqual( Stem("défaillir"), "défaill" );
	deepEqual( Stem("défaire"), "défair" );
	deepEqual( Stem("défais"), "def" );
	deepEqual( Stem("défaisait"), "défais" );
	deepEqual( Stem("défait"), "def" );
	deepEqual( Stem("défaite"), "défait" );
	deepEqual( Stem("défaites"), "défait" );
	deepEqual( Stem("défasse"), "def" );
	deepEqual( Stem("défaut"), "défaut" );
	deepEqual( Stem("défauts"), "défaut" );
	deepEqual( Stem("défaveur"), "défaveur" );
	deepEqual( Stem("défavorable"), "défavor" );
	deepEqual( Stem("défection"), "défect" );
	deepEqual( Stem("défend"), "défend" );
	deepEqual( Stem("défendaient"), "défend" );
	deepEqual( Stem("défendait"), "défend" );
	deepEqual( Stem("défendant"), "défend" );
	deepEqual( Stem("défende"), "défend" );
	deepEqual( Stem("défendent"), "défendent" );
	deepEqual( Stem("défendez"), "défend" );
	deepEqual( Stem("défendit"), "défend" );
	deepEqual( Stem("défendons"), "défendon" );
	deepEqual( Stem("défendre"), "défendr" );
	deepEqual( Stem("défends"), "défend" );
	deepEqual( Stem("défendu"), "défendu" );
	deepEqual( Stem("défendue"), "défendu" );
	deepEqual( Stem("défendues"), "défendu" );
	deepEqual( Stem("défense"), "défens" );
	deepEqual( Stem("défenses"), "défens" );
	deepEqual( Stem("défenseurs"), "défenseur" );
	deepEqual( Stem("défensive"), "défens" );
	deepEqual( Stem("déferai"), "def" );
	deepEqual( Stem("déférence"), "déférent" );
	deepEqual( Stem("défiait"), "défi" );
	deepEqual( Stem("défiance"), "défianc" );
	deepEqual( Stem("défiant"), "défi" );
	deepEqual( Stem("défie"), "def" );
	deepEqual( Stem("défigurait"), "défigur" );
	deepEqual( Stem("défiguré"), "défigur" );
	deepEqual( Stem("défila"), "défil" );
	deepEqual( Stem("défilé"), "défil" );
	deepEqual( Stem("défiler"), "défil" );
	deepEqual( Stem("défilés"), "défil" );
	deepEqual( Stem("définissable"), "définiss" );
	deepEqual( Stem("définitive"), "définit" );
	deepEqual( Stem("définitivement"), "définit" );
	deepEqual( Stem("défit"), "def" );
	deepEqual( Stem("défoncèrent"), "défonc" );
	deepEqual( Stem("défroque"), "défroqu" );
	deepEqual( Stem("défunt"), "défunt" );
	deepEqual( Stem("dégagé"), "dégag" );
	deepEqual( Stem("dégagea"), "dégag" );
	deepEqual( Stem("dégagée"), "dégag" );
	deepEqual( Stem("dégagement"), "dégag" );
	deepEqual( Stem("dégager"), "dégag" );
	deepEqual( Stem("dégât"), "deg" );
	deepEqual( Stem("dégénéré"), "dégéner" );
	deepEqual( Stem("dégoût"), "dégoût" );
	deepEqual( Stem("dégoûtant"), "dégoût" );
	deepEqual( Stem("dégoûtante"), "dégoût" );
	deepEqual( Stem("dégoûté"), "dégoût" );
	deepEqual( Stem("dégoûtée"), "dégoût" );
	deepEqual( Stem("dégradée"), "dégrad" );
	deepEqual( Stem("dégradent"), "dégradent" );
	deepEqual( Stem("dégrader"), "dégrad" );
	deepEqual( Stem("degré"), "degr" );
	deepEqual( Stem("degrés"), "degr" );
	deepEqual( Stem("dégrisa"), "dégris" );
	deepEqual( Stem("déguenillée"), "déguenill" );
	deepEqual( Stem("déguerpir"), "déguerp" );
	deepEqual( Stem("déguisa"), "déguis" );
	deepEqual( Stem("déguisait"), "déguis" );
	deepEqual( Stem("déguise"), "déguis" );
	deepEqual( Stem("déguisé"), "déguis" );
	deepEqual( Stem("déguisée"), "déguis" );
	deepEqual( Stem("déguisement"), "déguis" );
	deepEqual( Stem("déguiser"), "déguis" );
	deepEqual( Stem("déguisèrent"), "déguis" );
	deepEqual( Stem("déguisés"), "déguis" );
	deepEqual( Stem("dehors"), "dehor" );
	deepEqual( Stem("déjà"), "déjà" );
	deepEqual( Stem("déjetées"), "déjet" );
	deepEqual( Stem("déjeuna"), "déjeun" );
	deepEqual( Stem("déjeunait"), "déjeun" );
	deepEqual( Stem("déjeunant"), "déjeun" );
	deepEqual( Stem("déjeuné"), "déjeun" );
	deepEqual( Stem("déjeuner"), "déjeun" );
	deepEqual( Stem("déjeunèrent"), "déjeun" );
	deepEqual( Stem("déjeunons"), "déjeunon" );
	deepEqual( Stem("déjouer"), "déjou" );
	deepEqual( Stem("déjoués"), "déjou" );
	deepEqual( Stem("del"), "del" );
	deepEqual( Stem("delà"), "delà" );
	deepEqual( Stem("délabré"), "délabr" );
	deepEqual( Stem("délabrée"), "délabr" );
	deepEqual( Stem("délabrement"), "délabr" );
	deepEqual( Stem("délai"), "del" );
	deepEqual( Stem("délais"), "del" );
	deepEqual( Stem("délaissé"), "délaiss" );
	deepEqual( Stem("délasser"), "délass" );
	deepEqual( Stem("délations"), "délat" );
	deepEqual( Stem("delavigne"), "delavign" );
	deepEqual( Stem("délayé"), "délai" );
	deepEqual( Stem("délégation"), "déleg" );
	deepEqual( Stem("délibéra"), "déliber" );
	deepEqual( Stem("délibération"), "déliber" );
	deepEqual( Stem("délibérer"), "déliber" );
	deepEqual( Stem("délibérons"), "délibéron" );
	deepEqual( Stem("délicat"), "délicat" );
	deepEqual( Stem("délicate"), "délicat" );
	deepEqual( Stem("délicates"), "délicat" );
	deepEqual( Stem("délicatesse"), "délicatess" );
	deepEqual( Stem("délicats"), "délicat" );
	deepEqual( Stem("délices"), "délic" );
	deepEqual( Stem("délicieuse"), "délici" );
	deepEqual( Stem("délicieusement"), "délici" );
	deepEqual( Stem("délicieuses"), "délici" );
	deepEqual( Stem("délicieux"), "délici" );
	deepEqual( Stem("délier"), "déli" );
	deepEqual( Stem("delille"), "delill" );
	deepEqual( Stem("délire"), "délir" );
	deepEqual( Stem("délit"), "del" );
	deepEqual( Stem("délivra"), "délivr" );
	deepEqual( Stem("délivrance"), "délivr" );
	deepEqual( Stem("délivre"), "délivr" );
	deepEqual( Stem("délivré"), "délivr" );
	deepEqual( Stem("délivrée"), "délivr" );
	deepEqual( Stem("délivrer"), "délivr" );
	deepEqual( Stem("délivrera"), "délivr" );
	deepEqual( Stem("dell"), "del" );
	deepEqual( Stem("della"), "del" );
	deepEqual( Stem("demain"), "demain" );
	deepEqual( Stem("demanda"), "demand" );
	deepEqual( Stem("demandai"), "demand" );
	deepEqual( Stem("demandaient"), "demand" );
	deepEqual( Stem("demandais"), "demand" );
	deepEqual( Stem("demandait"), "demand" );
	deepEqual( Stem("demandant"), "demand" );
	deepEqual( Stem("demande"), "demand" );
	deepEqual( Stem("demandé"), "demand" );
	deepEqual( Stem("demandée"), "demand" );
	deepEqual( Stem("demandées"), "demand" );
	deepEqual( Stem("demander"), "demand" );
	deepEqual( Stem("demandera"), "demand" );
	deepEqual( Stem("demanderai"), "demand" );
	deepEqual( Stem("demanderaient"), "demand" );
	deepEqual( Stem("demanderait"), "demand" );
	deepEqual( Stem("demandèrent"), "demand" );
	deepEqual( Stem("demanderont"), "demand" );
	deepEqual( Stem("demandes"), "demand" );
	deepEqual( Stem("demandés"), "demand" );
	deepEqual( Stem("demandez"), "demand" );
	deepEqual( Stem("demandiez"), "demand" );
	deepEqual( Stem("demandons"), "demandon" );
	deepEqual( Stem("démantelé"), "démantel" );
	deepEqual( Stem("démarche"), "démarch" );
	deepEqual( Stem("démarches"), "démarch" );
	deepEqual( Stem("démarquer"), "démarqu" );
	deepEqual( Stem("démasquer"), "démasqu" );
	deepEqual( Stem("démêloir"), "démêloir" );
	deepEqual( Stem("déménager"), "déménag" );
	deepEqual( Stem("démenaient"), "démen" );
	deepEqual( Stem("démenait"), "démen" );
	deepEqual( Stem("démenti"), "dément" );
	deepEqual( Stem("démentir"), "dément" );
	deepEqual( Stem("démentis"), "dément" );
	deepEqual( Stem("démesurée"), "démesur" );
	deepEqual( Stem("demesurement"), "demesur" );
	deepEqual( Stem("démesurément"), "démesur" );
	deepEqual( Stem("demeura"), "demeur" );
	deepEqual( Stem("demeurait"), "demeur" );
	deepEqual( Stem("demeure"), "demeur" );
	deepEqual( Stem("demeuré"), "demeur" );
	deepEqual( Stem("demeurer"), "demeur" );
	deepEqual( Stem("demeurerait"), "demeur" );
	deepEqual( Stem("demeurèrent"), "demeur" );
	deepEqual( Stem("demeurés"), "demeur" );
	deepEqual( Stem("demi"), "dem" );
	deepEqual( Stem("demie"), "dem" );
	deepEqual( Stem("démission"), "démiss" );
	deepEqual( Stem("démit"), "dem" );
	deepEqual( Stem("demoiselle"), "demoisel" );
	deepEqual( Stem("demoiselles"), "demoisel" );
	deepEqual( Stem("démolir"), "démol" );
	deepEqual( Stem("démolissent"), "démol" );
	deepEqual( Stem("démolition"), "démolit" );
	deepEqual( Stem("démon"), "démon" );
	deepEqual( Stem("démonstration"), "démonstr" );
	deepEqual( Stem("démonté"), "démont" );
	deepEqual( Stem("démontée"), "démont" );
	deepEqual( Stem("démonter"), "démont" );
	deepEqual( Stem("démontés"), "démont" );
	deepEqual( Stem("démontra"), "démontr" );
	deepEqual( Stem("démontrait"), "démontr" );
	deepEqual( Stem("démontré"), "démontr" );
	deepEqual( Stem("dénaturée"), "dénatur" );
	deepEqual( Stem("deniers"), "deni" );
	deepEqual( Stem("dénigrement"), "dénigr" );
	deepEqual( Stem("dénomination"), "dénomin" );
	deepEqual( Stem("dénonçait"), "dénonc" );
	deepEqual( Stem("dénonce"), "dénonc" );
	deepEqual( Stem("dénoncé"), "dénonc" );
	deepEqual( Stem("dénoncer"), "dénonc" );
	deepEqual( Stem("dénoncera"), "dénonc" );
	deepEqual( Stem("dénoncez"), "dénonc" );
	deepEqual( Stem("dénonciateur"), "dénonci" );
	deepEqual( Stem("dénonciation"), "dénonci" );
	deepEqual( Stem("dénonciations"), "dénonci" );
	deepEqual( Stem("dénotaient"), "dénot" );
	deepEqual( Stem("dénotait"), "dénot" );
	deepEqual( Stem("dénoter"), "dénot" );
	deepEqual( Stem("dénouement"), "dénou" );
	deepEqual( Stem("dénoûment"), "dénoû" );
	deepEqual( Stem("densité"), "densit" );
	deepEqual( Stem("dent"), "dent" );
	deepEqual( Stem("dentelle"), "dentel" );
	deepEqual( Stem("dentelles"), "dentel" );
	deepEqual( Stem("dents"), "dent" );
	deepEqual( Stem("dénué"), "dénu" );
	deepEqual( Stem("dénuées"), "dénu" );
	deepEqual( Stem("denver"), "denv" );
	deepEqual( Stem("deo"), "deo" );
	deepEqual( Stem("déparait"), "dépar" );
	deepEqual( Stem("déparant"), "dépar" );
	deepEqual( Stem("déparée"), "dépar" );
	deepEqual( Stem("dépareillé"), "dépareil" );
	deepEqual( Stem("départ"), "départ" );
	deepEqual( Stem("département"), "départ" );
	deepEqual( Stem("dépassaient"), "dépass" );
	deepEqual( Stem("dépassait"), "dépass" );
	deepEqual( Stem("dépasse"), "dep" );
	deepEqual( Stem("dépassé"), "dépass" );
	deepEqual( Stem("dépassées"), "dépass" );
	deepEqual( Stem("dépasser"), "dépass" );
	deepEqual( Stem("dépassés"), "dépass" );
	deepEqual( Stem("dépêcha"), "dépêch" );
	deepEqual( Stem("dépêche"), "dépêch" );
	deepEqual( Stem("dépêché"), "dépêch" );
	deepEqual( Stem("dépêches"), "dépêch" );
	deepEqual( Stem("dépêchez"), "dépêch" );
	deepEqual( Stem("dépêchons"), "dépêchon" );
	deepEqual( Stem("dépeint"), "dépeint" );
	deepEqual( Stem("dépeintes"), "dépeint" );
	deepEqual( Stem("dépenaillé"), "dépenaill" );
	deepEqual( Stem("dépend"), "dépend" );
	deepEqual( Stem("dépendait"), "dépend" );
	deepEqual( Stem("dépendance"), "dépend" );
	deepEqual( Stem("dépendant"), "dépend" );
	deepEqual( Stem("dépendre"), "dépendr" );
	deepEqual( Stem("dépendu"), "dépendu" );
	deepEqual( Stem("dépens"), "dépen" );
	deepEqual( Stem("dépensait"), "dépens" );
	deepEqual( Stem("dépense"), "dépens" );
	deepEqual( Stem("dépensé"), "dépens" );
	deepEqual( Stem("dépensées"), "dépens" );
	deepEqual( Stem("dépenser"), "dépens" );
	deepEqual( Stem("dépenses"), "dépens" );
	deepEqual( Stem("dépérir"), "déper" );
	deepEqual( Stem("dépeuplèrent"), "dépeupl" );
	deepEqual( Stem("dépisté"), "dépist" );
	deepEqual( Stem("dépistées"), "dépist" );
	deepEqual( Stem("dépister"), "dépist" );
	deepEqual( Stem("dépit"), "dep" );
	deepEqual( Stem("dépitée"), "dépit" );
	deepEqual( Stem("déplaçait"), "déplac" );
	deepEqual( Stem("déplace"), "déplac" );
	deepEqual( Stem("déplacé"), "déplac" );
	deepEqual( Stem("déplacées"), "déplac" );
	deepEqual( Stem("déplacement"), "déplac" );
	deepEqual( Stem("déplairais"), "déplair" );
	deepEqual( Stem("déplaire"), "déplair" );
	deepEqual( Stem("déplairez"), "déplair" );
	deepEqual( Stem("déplaisait"), "déplais" );
	deepEqual( Stem("déplaise"), "déplais" );
	deepEqual( Stem("déplaisent"), "déplaisent" );
	deepEqual( Stem("déplaisir"), "déplais" );
	deepEqual( Stem("déplaît"), "déplaît" );
	deepEqual( Stem("dépliage"), "dépliag" );
	deepEqual( Stem("déploie"), "déploi" );
	deepEqual( Stem("déploierais"), "déploi" );
	deepEqual( Stem("déplorable"), "déplor" );
	deepEqual( Stem("déplorables"), "déplor" );
	deepEqual( Stem("déplorait"), "déplor" );
	deepEqual( Stem("déploré"), "déplor" );
	deepEqual( Stem("déploya"), "déploi" );
	deepEqual( Stem("déployaient"), "déploi" );
	deepEqual( Stem("déployé"), "déploi" );
	deepEqual( Stem("déployée"), "déploi" );
	deepEqual( Stem("déployer"), "déploi" );
	deepEqual( Stem("déplu"), "déplu" );
	deepEqual( Stem("déplut"), "déplut" );
	deepEqual( Stem("déporta"), "déport" );
	deepEqual( Stem("déportés"), "déport" );
	deepEqual( Stem("déposa"), "dépos" );
	deepEqual( Stem("déposait"), "dépos" );
	deepEqual( Stem("déposant"), "dépos" );
	deepEqual( Stem("déposât"), "dépos" );
	deepEqual( Stem("dépose"), "dépos" );
	deepEqual( Stem("déposé"), "dépos" );
	deepEqual( Stem("déposée"), "dépos" );
	deepEqual( Stem("déposées"), "dépos" );
	deepEqual( Stem("déposer"), "dépos" );
	deepEqual( Stem("déposèrent"), "dépos" );
	deepEqual( Stem("déposés"), "dépos" );
	deepEqual( Stem("dépositaire"), "dépositair" );
	deepEqual( Stem("déposition"), "déposit" );
	deepEqual( Stem("dépositions"), "déposit" );
	deepEqual( Stem("dépossédé"), "dépossed" );
	deepEqual( Stem("dépôt"), "dépôt" );
	deepEqual( Stem("dépôts"), "dépôt" );
	deepEqual( Stem("dépouillait"), "dépouill" );
	deepEqual( Stem("dépouille"), "dépouill" );
	deepEqual( Stem("dépouillé"), "dépouill" );
	deepEqual( Stem("dépouiller"), "dépouill" );
	deepEqual( Stem("dépourvu"), "dépourvu" );
	deepEqual( Stem("dépression"), "dépress" );
	deepEqual( Stem("dépressions"), "dépress" );
	deepEqual( Stem("déprimée"), "déprim" );
	deepEqual( Stem("depuis"), "depuis" );
	deepEqual( Stem("députation"), "déput" );
	deepEqual( Stem("député"), "déput" );
	deepEqual( Stem("députés"), "déput" );
	deepEqual( Stem("déraillement"), "déraill" );
	deepEqual( Stem("déraillements"), "déraill" );
	deepEqual( Stem("déraison"), "déraison" );
	deepEqual( Stem("déraisonnable"), "déraison" );
	deepEqual( Stem("déraisonnables"), "déraison" );
	deepEqual( Stem("déraisonner"), "déraison" );
	deepEqual( Stem("dérangé"), "dérang" );
	deepEqual( Stem("dérangeait"), "dérang" );
	deepEqual( Stem("dérangements"), "dérang" );
	deepEqual( Stem("déranger"), "dérang" );
	deepEqual( Stem("dérangés"), "dérang" );
	deepEqual( Stem("derechef"), "derechef" );
	deepEqual( Stem("déridait"), "dérid" );
	deepEqual( Stem("dérision"), "déris" );
	deepEqual( Stem("dernier"), "derni" );
	deepEqual( Stem("dernière"), "derni" );
	deepEqual( Stem("dernieres"), "dernier" );
	deepEqual( Stem("dernières"), "derni" );
	deepEqual( Stem("derniers"), "derni" );
	deepEqual( Stem("dérobaient"), "dérob" );
	deepEqual( Stem("dérobé"), "dérob" );
	deepEqual( Stem("dérobée"), "dérob" );
	deepEqual( Stem("dérober"), "dérob" );
	deepEqual( Stem("déroberait"), "dérob" );
	deepEqual( Stem("déroger"), "dérog" );
	deepEqual( Stem("déroula"), "déroul" );
	deepEqual( Stem("déroulant"), "déroul" );
	deepEqual( Stem("déroulèrent"), "déroul" );
	deepEqual( Stem("déroute"), "dérout" );
	deepEqual( Stem("derrière"), "derri" );
	deepEqual( Stem("derville"), "dervill" );
	deepEqual( Stem("des"), "de" );
	deepEqual( Stem("dès"), "des" );
	deepEqual( Stem("désabusé"), "désabus" );
	deepEqual( Stem("désagréable"), "désagré" );
	deepEqual( Stem("désagréablement"), "désagré" );
	deepEqual( Stem("désagréables"), "désagré" );
	deepEqual( Stem("désagrément"), "désagr" );
	deepEqual( Stem("désagréments"), "désagr" );
	deepEqual( Stem("desaix"), "desaix" );
	deepEqual( Stem("désaltéré"), "désalter" );
	deepEqual( Stem("désappointé"), "désappoint" );
	deepEqual( Stem("désappointement"), "désappoint" );
	deepEqual( Stem("désapprouver"), "désapprouv" );
	deepEqual( Stem("désarmé"), "désarm" );
	deepEqual( Stem("désarmer"), "désarm" );
	deepEqual( Stem("désastre"), "désastr" );
	deepEqual( Stem("désastres"), "désastr" );
	deepEqual( Stem("désavantage"), "désavantag" );
	deepEqual( Stem("désavantages"), "désavantag" );
	deepEqual( Stem("désavoue"), "désavou" );
	deepEqual( Stem("desceller"), "descel" );
	deepEqual( Stem("descend"), "descend" );
	deepEqual( Stem("descendaient"), "descend" );
	deepEqual( Stem("descendait"), "descend" );
	deepEqual( Stem("descendant"), "descend" );
	deepEqual( Stem("descendante"), "descend" );
	deepEqual( Stem("descendants"), "descend" );
	deepEqual( Stem("descende"), "descend" );
	deepEqual( Stem("descendent"), "descendent" );
	deepEqual( Stem("descendirent"), "descend" );
	deepEqual( Stem("descendit"), "descend" );
	deepEqual( Stem("descendrait"), "descendr" );
	deepEqual( Stem("descendre"), "descendr" );
	deepEqual( Stem("descendrez"), "descendr" );
	deepEqual( Stem("descends"), "descend" );
	deepEqual( Stem("descendu"), "descendu" );
	deepEqual( Stem("descendue"), "descendu" );
	deepEqual( Stem("descendus"), "descendus" );
	deepEqual( Stem("descente"), "descent" );
	deepEqual( Stem("descoulis"), "descoul" );
	deepEqual( Stem("description"), "descript" );
	deepEqual( Stem("descriptions"), "descript" );
	deepEqual( Stem("désennuyait"), "désennui" );
	deepEqual( Stem("désennuyer"), "désennui" );
	deepEqual( Stem("désert"), "désert" );
	deepEqual( Stem("désertais"), "désert" );
	deepEqual( Stem("déserte"), "désert" );
	deepEqual( Stem("déserté"), "désert" );
	deepEqual( Stem("déserter"), "désert" );
	deepEqual( Stem("désertes"), "désert" );
	deepEqual( Stem("déserteur"), "déserteur" );
	deepEqual( Stem("désertez"), "désert" );
	deepEqual( Stem("désertion"), "désert" );
	deepEqual( Stem("désespérais"), "désesper" );
	deepEqual( Stem("désespérait"), "désesper" );
	deepEqual( Stem("désespérant"), "désesper" );
	deepEqual( Stem("désespérante"), "désesper" );
	deepEqual( Stem("désespérants"), "désesper" );
	deepEqual( Stem("désespère"), "désesper" );
	deepEqual( Stem("désespéré"), "désesper" );
	deepEqual( Stem("désespérée"), "désesper" );
	deepEqual( Stem("désespérer"), "désesper" );
	deepEqual( Stem("désespoir"), "désespoir" );
	deepEqual( Stem("déshabillaient"), "déshabill" );
	deepEqual( Stem("déshabiller"), "déshabill" );
	deepEqual( Stem("déshonneur"), "déshonneur" );
	deepEqual( Stem("déshonorait"), "déshonor" );
	deepEqual( Stem("déshonorant"), "déshonor" );
	deepEqual( Stem("déshonorante"), "déshonor" );
	deepEqual( Stem("déshonore"), "déshonor" );
	deepEqual( Stem("déshonoré"), "déshonor" );
	deepEqual( Stem("déshonorée"), "déshonor" );
	deepEqual( Stem("déshonorent"), "déshonorent" );
	deepEqual( Stem("déshonorer"), "déshonor" );
	deepEqual( Stem("déshonorez"), "déshonor" );
	deepEqual( Stem("désignant"), "désign" );
	deepEqual( Stem("désigne"), "désign" );
	deepEqual( Stem("désigné"), "désign" );
	deepEqual( Stem("désigner"), "désign" );
	deepEqual( Stem("désignèrent"), "désign" );
	deepEqual( Stem("désignés"), "désign" );
	deepEqual( Stem("désignez"), "désign" );
	deepEqual( Stem("désintéresse"), "désintéress" );
	deepEqual( Stem("désintéressé"), "désintéress" );
	deepEqual( Stem("désintéressées"), "désintéress" );
	deepEqual( Stem("désintéressement"), "désintéress" );
	deepEqual( Stem("désintérêt"), "désintérêt" );
	deepEqual( Stem("désir"), "des" );
	deepEqual( Stem("désira"), "des" );
	deepEqual( Stem("désirable"), "désir" );
	deepEqual( Stem("désirait"), "des" );
	deepEqual( Stem("désire"), "désir" );
	deepEqual( Stem("désiré"), "désir" );
	deepEqual( Stem("désirée"), "désir" );
	deepEqual( Stem("désirées"), "désir" );
	deepEqual( Stem("désirent"), "des" );
	deepEqual( Stem("désirer"), "désir" );
	deepEqual( Stem("désirerais"), "désir" );
	deepEqual( Stem("désirez"), "des" );
	deepEqual( Stem("désirs"), "désir" );
	deepEqual( Stem("désobéi"), "désobéi" );
	deepEqual( Stem("désobéissante"), "désobéiss" );
	deepEqual( Stem("désoblige"), "désoblig" );
	deepEqual( Stem("désobligeante"), "désoblig" );
	deepEqual( Stem("désobligeants"), "désoblig" );
	deepEqual( Stem("désoeuvrement"), "désoeuvr" );
	deepEqual( Stem("désolait"), "désol" );
	deepEqual( Stem("désolant"), "désol" );
	deepEqual( Stem("désolation"), "désol" );
	deepEqual( Stem("désole"), "désol" );
	deepEqual( Stem("désolé"), "désol" );
	deepEqual( Stem("désolée"), "désol" );
	deepEqual( Stem("désordonnée"), "désordon" );
	deepEqual( Stem("désordonnés"), "désordon" );
	deepEqual( Stem("désordre"), "désordr" );
	deepEqual( Stem("désorienté"), "désorient" );
	deepEqual( Stem("désormais"), "désorm" );
	deepEqual( Stem("despote"), "despot" );
	deepEqual( Stem("despotes"), "despot" );
	deepEqual( Stem("despotique"), "despot" );
	deepEqual( Stem("despotiquement"), "despot" );
	deepEqual( Stem("despotiques"), "despot" );
	deepEqual( Stem("despotisme"), "despot" );
	deepEqual( Stem("despotismes"), "despot" );
	deepEqual( Stem("desquelles"), "desquel" );
	deepEqual( Stem("desquels"), "desquel" );
	deepEqual( Stem("desséchant"), "dessech" );
	deepEqual( Stem("desséché"), "dessech" );
	deepEqual( Stem("desséchée"), "dessech" );
	deepEqual( Stem("dessein"), "dessein" );
	deepEqual( Stem("desseins"), "dessein" );
	deepEqual( Stem("dessert"), "dessert" );
	deepEqual( Stem("desservait"), "desserv" );
	deepEqual( Stem("desservant"), "desserv" );
	deepEqual( Stem("desservi"), "desserv" );
	deepEqual( Stem("dessiller"), "dessill" );
	deepEqual( Stem("dessillèrent"), "dessill" );
	deepEqual( Stem("dessin"), "dessin" );
	deepEqual( Stem("dessina"), "dessin" );
	deepEqual( Stem("dessinaient"), "dessin" );
	deepEqual( Stem("dessinait"), "dessin" );
	deepEqual( Stem("dessine"), "dessin" );
	deepEqual( Stem("dessiné"), "dessin" );
	deepEqual( Stem("dessinent"), "dessinent" );
	deepEqual( Stem("dessiner"), "dessin" );
	deepEqual( Stem("dessins"), "dessin" );
	deepEqual( Stem("dessous"), "dessous" );
	deepEqual( Stem("dessus"), "dessus" );
	deepEqual( Stem("destin"), "destin" );
	deepEqual( Stem("destinait"), "destin" );
	deepEqual( Stem("destination"), "destin" );
	deepEqual( Stem("destine"), "destin" );
	deepEqual( Stem("destiné"), "destin" );
	deepEqual( Stem("destinée"), "destin" );
	deepEqual( Stem("destinées"), "destin" );
	deepEqual( Stem("destinés"), "destin" );
	deepEqual( Stem("destins"), "destin" );
	deepEqual( Stem("destitua"), "destitu" );
	deepEqual( Stem("destitué"), "destitu" );
	deepEqual( Stem("destituer"), "destitu" );
	deepEqual( Stem("destituera"), "destitu" );
	deepEqual( Stem("destituerai"), "destitu" );
	deepEqual( Stem("destitution"), "destitu" );
	deepEqual( Stem("désunir"), "désun" );
	deepEqual( Stem("détacha"), "détach" );
	deepEqual( Stem("détachaient"), "détach" );
	deepEqual( Stem("détachait"), "détach" );
	deepEqual( Stem("détachant"), "détach" );
	deepEqual( Stem("détache"), "détach" );
	deepEqual( Stem("détaché"), "détach" );
	deepEqual( Stem("détachée"), "détach" );
	deepEqual( Stem("détachées"), "détach" );
	deepEqual( Stem("détachement"), "détach" );
	deepEqual( Stem("détacher"), "détach" );
	deepEqual( Stem("détachèrent"), "détach" );
	deepEqual( Stem("détail"), "détail" );
	deepEqual( Stem("détailla"), "détaill" );
	deepEqual( Stem("détaillant"), "détaill" );
	deepEqual( Stem("détaille"), "détaill" );
	deepEqual( Stem("détaillé"), "détaill" );
	deepEqual( Stem("détaillée"), "détaill" );
	deepEqual( Stem("détaillées"), "détaill" );
	deepEqual( Stem("détailler"), "détaill" );
	deepEqual( Stem("détails"), "détail" );
	deepEqual( Stem("détaler"), "détal" );
	deepEqual( Stem("détective"), "détect" );
	deepEqual( Stem("détectives"), "détect" );
	deepEqual( Stem("détendu"), "détendu" );
	deepEqual( Stem("détendue"), "détendu" );
	deepEqual( Stem("détendus"), "détendus" );
	deepEqual( Stem("détente"), "détent" );
	deepEqual( Stem("détention"), "détent" );
	deepEqual( Stem("détenus"), "détenus" );
	deepEqual( Stem("détermina"), "détermin" );
	deepEqual( Stem("déterminaient"), "détermin" );
	deepEqual( Stem("déterminait"), "détermin" );
	deepEqual( Stem("déterminât"), "détermin" );
	deepEqual( Stem("détermination"), "détermin" );
	deepEqual( Stem("déterminations"), "détermin" );
	deepEqual( Stem("déterminé"), "détermin" );
	deepEqual( Stem("déterminées"), "détermin" );
	deepEqual( Stem("déterminer"), "détermin" );
	deepEqual( Stem("déterminera"), "détermin" );
	deepEqual( Stem("déterrer"), "déterr" );
	deepEqual( Stem("détestable"), "détest" );
	deepEqual( Stem("détestables"), "détest" );
	deepEqual( Stem("détestaient"), "détest" );
	deepEqual( Stem("détestait"), "détest" );
	deepEqual( Stem("déteste"), "détest" );
	deepEqual( Stem("détesté"), "détest" );
	deepEqual( Stem("détestent"), "détestent" );
	deepEqual( Stem("détester"), "détest" );
	deepEqual( Stem("détesterez"), "détest" );
	deepEqual( Stem("détonation"), "déton" );
	deepEqual( Stem("détonations"), "déton" );
	deepEqual( Stem("détour"), "détour" );
	deepEqual( Stem("détourna"), "détourn" );
	deepEqual( Stem("détournaient"), "détourn" );
	deepEqual( Stem("détourné"), "détourn" );
	deepEqual( Stem("détours"), "détour" );
	deepEqual( Stem("détraquer"), "détraqu" );
	deepEqual( Stem("détresse"), "détress" );
	deepEqual( Stem("détriment"), "detr" );
	deepEqual( Stem("détroit"), "détroit" );
	deepEqual( Stem("détrompé"), "détromp" );
	deepEqual( Stem("détruire"), "détruir" );
	deepEqual( Stem("détruisaient"), "détruis" );
	deepEqual( Stem("détruisit"), "détruis" );
	deepEqual( Stem("détruit"), "détruit" );
	deepEqual( Stem("détruites"), "détruit" );
	deepEqual( Stem("détruits"), "détruit" );
	deepEqual( Stem("dette"), "det" );
	deepEqual( Stem("dettes"), "det" );
	deepEqual( Stem("deuil"), "deuil" );
	deepEqual( Stem("deuils"), "deuil" );
	deepEqual( Stem("deum"), "deum" );
	deepEqual( Stem("deux"), "deux" );
	deepEqual( Stem("deuxième"), "deuxiem" );
	deepEqual( Stem("devaient"), "dev" );
	deepEqual( Stem("devais"), "dev" );
	deepEqual( Stem("devait"), "dev" );
	deepEqual( Stem("devançant"), "devanc" );
	deepEqual( Stem("devancer"), "devanc" );
	deepEqual( Stem("devant"), "dev" );
	deepEqual( Stem("devants"), "dev" );
	deepEqual( Stem("développa"), "développ" );
	deepEqual( Stem("développaient"), "développ" );
	deepEqual( Stem("développait"), "développ" );
	deepEqual( Stem("développée"), "développ" );
	deepEqual( Stem("développement"), "développ" );
	deepEqual( Stem("devenaient"), "deven" );
	deepEqual( Stem("devenais"), "deven" );
	deepEqual( Stem("devenait"), "deven" );
	deepEqual( Stem("devenant"), "deven" );
	deepEqual( Stem("devenez"), "deven" );
	deepEqual( Stem("devenir"), "deven" );
	deepEqual( Stem("devenu"), "devenu" );
	deepEqual( Stem("devenue"), "devenu" );
	deepEqual( Stem("devenus"), "devenus" );
	deepEqual( Stem("déverse"), "dévers" );
	deepEqual( Stem("déverser"), "dévers" );
	deepEqual( Stem("devez"), "dev" );
	deepEqual( Stem("deviendra"), "deviendr" );
	deepEqual( Stem("deviendrai"), "deviendr" );
	deepEqual( Stem("deviendraient"), "deviendr" );
	deepEqual( Stem("deviendrais"), "deviendr" );
	deepEqual( Stem("deviendrait"), "deviendr" );
	deepEqual( Stem("deviendrez"), "deviendr" );
	deepEqual( Stem("deviendriez"), "deviendr" );
	deepEqual( Stem("deviennent"), "deviennent" );
	deepEqual( Stem("deviens"), "devien" );
	deepEqual( Stem("devient"), "devient" );
	deepEqual( Stem("deviez"), "dev" );
	deepEqual( Stem("devina"), "devin" );
	deepEqual( Stem("devinait"), "devin" );
	deepEqual( Stem("devinant"), "devin" );
	deepEqual( Stem("devine"), "devin" );
	deepEqual( Stem("deviné"), "devin" );
	deepEqual( Stem("devinée"), "devin" );
	deepEqual( Stem("devinées"), "devin" );
	deepEqual( Stem("deviner"), "devin" );
	deepEqual( Stem("devinera"), "devin" );
	deepEqual( Stem("devinerait"), "devin" );
	deepEqual( Stem("devineront"), "devin" );
	deepEqual( Stem("devines"), "devin" );
	deepEqual( Stem("devinez"), "devin" );
	deepEqual( Stem("devînmes"), "devînm" );
	deepEqual( Stem("devinrent"), "devinrent" );
	deepEqual( Stem("devins"), "devin" );
	deepEqual( Stem("devint"), "devint" );
	deepEqual( Stem("devis"), "dev" );
	deepEqual( Stem("dévisageait"), "dévisag" );
	deepEqual( Stem("dévisager"), "dévisag" );
	deepEqual( Stem("dévisser"), "déviss" );
	deepEqual( Stem("devo"), "devo" );
	deepEqual( Stem("dévoilé"), "dévoil" );
	deepEqual( Stem("devoir"), "devoir" );
	deepEqual( Stem("devoirs"), "devoir" );
	deepEqual( Stem("devons"), "devon" );
	deepEqual( Stem("dévora"), "dévor" );
	deepEqual( Stem("dévoraient"), "dévor" );
	deepEqual( Stem("dévorait"), "dévor" );
	deepEqual( Stem("dévorante"), "dévor" );
	deepEqual( Stem("dévorât"), "dévor" );
	deepEqual( Stem("dévore"), "dévor" );
	deepEqual( Stem("dévoré"), "dévor" );
	deepEqual( Stem("dévorée"), "dévor" );
	deepEqual( Stem("dévorer"), "dévor" );
	deepEqual( Stem("dévoreront"), "dévor" );
	deepEqual( Stem("dévorés"), "dévor" );
	deepEqual( Stem("devoret"), "devoret" );
	deepEqual( Stem("dévorez"), "dévor" );
	deepEqual( Stem("dévot"), "dévot" );
	deepEqual( Stem("dévote"), "dévot" );
	deepEqual( Stem("dévotement"), "dévot" );
	deepEqual( Stem("dévotes"), "dévot" );
	deepEqual( Stem("dévotion"), "dévot" );
	deepEqual( Stem("dévots"), "dévot" );
	deepEqual( Stem("dévoué"), "dévou" );
	deepEqual( Stem("dévouée"), "dévou" );
	deepEqual( Stem("dévouement"), "dévou" );
	deepEqual( Stem("dévouements"), "dévou" );
	deepEqual( Stem("dévouer"), "dévou" );
	deepEqual( Stem("dévoués"), "dévou" );
	deepEqual( Stem("devra"), "devr" );
	deepEqual( Stem("devrai"), "devr" );
	deepEqual( Stem("devraient"), "devr" );
	deepEqual( Stem("devrais"), "devr" );
	deepEqual( Stem("devrait"), "devr" );
	deepEqual( Stem("devriez"), "devr" );
	deepEqual( Stem("devrons"), "devron" );
	deepEqual( Stem("devront"), "devront" );
	deepEqual( Stem("di"), "di" );
	deepEqual( Stem("diable"), "diabl" );
	deepEqual( Stem("diables"), "diabl" );
	deepEqual( Stem("diacre"), "diacr" );
	deepEqual( Stem("dialogue"), "dialogu" );
	deepEqual( Stem("dialogues"), "dialogu" );
	deepEqual( Stem("diamant"), "diam" );
	deepEqual( Stem("diamanté"), "diamant" );
	deepEqual( Stem("diamants"), "diam" );
	deepEqual( Stem("diane"), "dian" );
	deepEqual( Stem("diar"), "diar" );
	deepEqual( Stem("dicta"), "dict" );
	deepEqual( Stem("dictait"), "dict" );
	deepEqual( Stem("dictateur"), "dictateur" );
	deepEqual( Stem("dicté"), "dict" );
	deepEqual( Stem("dictée"), "dict" );
	deepEqual( Stem("dictées"), "dict" );
	deepEqual( Stem("dicter"), "dict" );
	deepEqual( Stem("dictés"), "dict" );
	deepEqual( Stem("diction"), "diction" );
	deepEqual( Stem("dictionnaire"), "dictionnair" );
	deepEqual( Stem("dicton"), "dicton" );
	deepEqual( Stem("diderot"), "diderot" );
	deepEqual( Stem("didon"), "didon" );
	deepEqual( Stem("diego"), "diego" );
	deepEqual( Stem("diègue"), "diègu" );
	deepEqual( Stem("dieu"), "dieu" );
	deepEqual( Stem("dieux"), "dieux" );
	deepEqual( Stem("différence"), "différent" );
	deepEqual( Stem("différences"), "différent" );
	deepEqual( Stem("différend"), "différend" );
	deepEqual( Stem("différends"), "différend" );
	deepEqual( Stem("différent"), "différent" );
	deepEqual( Stem("diffèrent"), "diff" );
	deepEqual( Stem("différente"), "différent" );
	deepEqual( Stem("différentes"), "différent" );
	deepEqual( Stem("différents"), "différent" );
	deepEqual( Stem("différer"), "differ" );
	deepEqual( Stem("difficile"), "difficil" );
	deepEqual( Stem("difficilement"), "difficil" );
	deepEqual( Stem("difficiles"), "difficil" );
	deepEqual( Stem("difficulté"), "difficult" );
	deepEqual( Stem("difficultés"), "difficult" );
	deepEqual( Stem("difficultueux"), "difficultu" );
	deepEqual( Stem("difforme"), "difform" );
	deepEqual( Stem("digère"), "diger" );
	deepEqual( Stem("digne"), "dign" );
	deepEqual( Stem("dignement"), "dign" );
	deepEqual( Stem("dignes"), "dign" );
	deepEqual( Stem("dignité"), "dignit" );
	deepEqual( Stem("dignités"), "dignit" );
	deepEqual( Stem("digue"), "digu" );
	deepEqual( Stem("dijon"), "dijon" );
	deepEqual( Stem("dilettanti"), "dilettant" );
	deepEqual( Stem("diligence"), "diligent" );
	deepEqual( Stem("diligente"), "diligent" );
	deepEqual( Stem("dimanche"), "dimanch" );
	deepEqual( Stem("dimanches"), "dimanch" );
	deepEqual( Stem("dîme"), "dîm" );
	deepEqual( Stem("dimension"), "dimens" );
	deepEqual( Stem("dimensions"), "dimens" );
	deepEqual( Stem("diminua"), "diminu" );
	deepEqual( Stem("diminuaient"), "diminu" );
	deepEqual( Stem("diminuait"), "diminu" );
	deepEqual( Stem("diminuant"), "diminu" );
	deepEqual( Stem("diminue"), "diminu" );
	deepEqual( Stem("diminué"), "diminu" );
	deepEqual( Stem("diminuée"), "diminu" );
	deepEqual( Stem("diminuer"), "diminu" );
	deepEqual( Stem("diminution"), "diminu" );
	deepEqual( Stem("dîna"), "dîn" );
	deepEqual( Stem("dînait"), "dîn" );
	deepEqual( Stem("dînant"), "dîn" );
	deepEqual( Stem("dindon"), "dindon" );
	deepEqual( Stem("dîné"), "dîn" );
	deepEqual( Stem("dînée"), "dîn" );
	deepEqual( Stem("dînées"), "dîn" );
	deepEqual( Stem("dînent"), "dînent" );
	deepEqual( Stem("dîner"), "dîn" );
	deepEqual( Stem("dînerai"), "dîn" );
	deepEqual( Stem("dînerait"), "dîn" );
	deepEqual( Stem("dînèrent"), "dîn" );
	deepEqual( Stem("dîners"), "dîner" );
	deepEqual( Stem("diocèse"), "dioces" );
	deepEqual( Stem("diplomate"), "diplomat" );
	deepEqual( Stem("diplomates"), "diplomat" );
	deepEqual( Stem("diplomatie"), "diplomat" );
	deepEqual( Stem("diplomatique"), "diplomat" );
	deepEqual( Stem("diplomatiquement"), "diplomat" );
	deepEqual( Stem("diplomatiques"), "diplomat" );
	deepEqual( Stem("dira"), "dir" );
	deepEqual( Stem("dirai"), "dir" );
	deepEqual( Stem("diraient"), "dir" );
	deepEqual( Stem("dirais"), "dir" );
	deepEqual( Stem("dirait"), "dir" );
	deepEqual( Stem("diras"), "dir" );
	deepEqual( Stem("dire"), "dir" );
	deepEqual( Stem("direct"), "direct" );
	deepEqual( Stem("directe"), "direct" );
	deepEqual( Stem("directement"), "direct" );
	deepEqual( Stem("directes"), "direct" );
	deepEqual( Stem("directeur"), "directeur" );
	deepEqual( Stem("direction"), "direct" );
	deepEqual( Stem("directions"), "direct" );
	deepEqual( Stem("directoire"), "directoir" );
	deepEqual( Stem("directs"), "direct" );
	deepEqual( Stem("dirent"), "dirent" );
	deepEqual( Stem("direz"), "dir" );
	deepEqual( Stem("dirige"), "dirig" );
	deepEqual( Stem("dirigé"), "dirig" );
	deepEqual( Stem("dirigea"), "dirig" );
	deepEqual( Stem("dirigeait"), "dirig" );
	deepEqual( Stem("dirigeant"), "dirig" );
	deepEqual( Stem("dirigeante"), "dirig" );
	deepEqual( Stem("dirigée"), "dirig" );
	deepEqual( Stem("dirigées"), "dirig" );
	deepEqual( Stem("dirigent"), "dirigent" );
	deepEqual( Stem("diriger"), "dirig" );
	deepEqual( Stem("dirigerait"), "dirig" );
	deepEqual( Stem("dirigèrent"), "dirig" );
	deepEqual( Stem("dirigés"), "dirig" );
	deepEqual( Stem("dirigez"), "dirig" );
	deepEqual( Stem("dirions"), "dirion" );
	deepEqual( Stem("dirons"), "diron" );
	deepEqual( Stem("diront"), "diront" );
	deepEqual( Stem("dis"), "dis" );
	deepEqual( Stem("disaient"), "dis" );
	deepEqual( Stem("disais"), "dis" );
	deepEqual( Stem("disait"), "dis" );
	deepEqual( Stem("disant"), "dis" );
	deepEqual( Stem("disc"), "disc" );
	deepEqual( Stem("discerna"), "discern" );
	deepEqual( Stem("disciple"), "discipl" );
	deepEqual( Stem("disciples"), "discipl" );
	deepEqual( Stem("discontinuaient"), "discontinu" );
	deepEqual( Stem("discontinuer"), "discontinu" );
	deepEqual( Stem("disconvenir"), "disconven" );
	deepEqual( Stem("discordant"), "discord" );
	deepEqual( Stem("discours"), "discour" );
	deepEqual( Stem("discret"), "discret" );
	deepEqual( Stem("discrète"), "discret" );
	deepEqual( Stem("discrétion"), "discret" );
	deepEqual( Stem("discrets"), "discret" );
	deepEqual( Stem("discussion"), "discuss" );
	deepEqual( Stem("discussions"), "discuss" );
	deepEqual( Stem("discuta"), "discut" );
	deepEqual( Stem("discutaient"), "discut" );
	deepEqual( Stem("discutait"), "discut" );
	deepEqual( Stem("discutant"), "discut" );
	deepEqual( Stem("discute"), "discut" );
	deepEqual( Stem("discutée"), "discut" );
	deepEqual( Stem("discuter"), "discut" );
	deepEqual( Stem("discutèrent"), "discut" );
	deepEqual( Stem("discutés"), "discut" );
	deepEqual( Stem("dise"), "dis" );
	deepEqual( Stem("disent"), "disent" );
	deepEqual( Stem("disgrâce"), "disgrâc" );
	deepEqual( Stem("disgracie"), "disgrac" );
	deepEqual( Stem("disgracié"), "disgraci" );
	deepEqual( Stem("disgracierez"), "disgraci" );
	deepEqual( Stem("disinvoltura"), "disinvoltur" );
	deepEqual( Stem("disloqué"), "disloqu" );
	deepEqual( Stem("disparaissaient"), "disparaiss" );
	deepEqual( Stem("disparaissait"), "disparaiss" );
	deepEqual( Stem("disparaissent"), "disparaissent" );
	deepEqual( Stem("disparaît"), "disparaît" );
	deepEqual( Stem("disparaître"), "disparaîtr" );
	deepEqual( Stem("disparition"), "disparit" );
	deepEqual( Stem("disparu"), "disparu" );
	deepEqual( Stem("disparurent"), "disparurent" );
	deepEqual( Stem("disparussent"), "disparussent" );
	deepEqual( Stem("disparut"), "disparut" );
	deepEqual( Stem("dispendieuses"), "dispendi" );
	deepEqual( Stem("dispensé"), "dispens" );
	deepEqual( Stem("dispenser"), "dispens" );
	deepEqual( Stem("dispersaient"), "dispers" );
	deepEqual( Stem("dispersés"), "dispers" );
	deepEqual( Stem("dispos"), "dispos" );
	deepEqual( Stem("disposa"), "dispos" );
	deepEqual( Stem("disposaient"), "dispos" );
	deepEqual( Stem("disposait"), "dispos" );
	deepEqual( Stem("dispose"), "dispos" );
	deepEqual( Stem("disposé"), "dispos" );
	deepEqual( Stem("disposée"), "dispos" );
	deepEqual( Stem("disposées"), "dispos" );
	deepEqual( Stem("disposer"), "dispos" );
	deepEqual( Stem("disposés"), "dispos" );
	deepEqual( Stem("disposez"), "dispos" );
	deepEqual( Stem("disposition"), "disposit" );
	deepEqual( Stem("dispositions"), "disposit" );
	deepEqual( Stem("disposons"), "disposon" );
	deepEqual( Stem("disproportion"), "disproport" );
	deepEqual( Stem("disputa"), "disput" );
	deepEqual( Stem("disputaient"), "disput" );
	deepEqual( Stem("disputait"), "disput" );
	deepEqual( Stem("dispute"), "disput" );
	deepEqual( Stem("disputer"), "disput" );
	deepEqual( Stem("disputèrent"), "disput" );
	deepEqual( Stem("disputons"), "disputon" );
	deepEqual( Stem("disque"), "disqu" );
	deepEqual( Stem("dissembles"), "dissembl" );
	deepEqual( Stem("dissent"), "dissent" );
	deepEqual( Stem("disséquée"), "dissequ" );
	deepEqual( Stem("dissertation"), "dissert" );
	deepEqual( Stem("dissertations"), "dissert" );
	deepEqual( Stem("disserte"), "dissert" );
	deepEqual( Stem("dissimulaient"), "dissimul" );
	deepEqual( Stem("dissimulait"), "dissimul" );
	deepEqual( Stem("dissimulant"), "dissimul" );
	deepEqual( Stem("dissimule"), "dissimul" );
	deepEqual( Stem("dissimulée"), "dissimul" );
	deepEqual( Stem("dissimuler"), "dissimul" );
	deepEqual( Stem("dissimulerai"), "dissimul" );
	deepEqual( Stem("dissimulerons"), "dissimul" );
	deepEqual( Stem("dissimulons"), "dissimulon" );
	deepEqual( Stem("dissipait"), "dissip" );
	deepEqual( Stem("dissipation"), "dissip" );
	deepEqual( Stem("dissipations"), "dissip" );
	deepEqual( Stem("dissipé"), "dissip" );
	deepEqual( Stem("dissipée"), "dissip" );
	deepEqual( Stem("dissipées"), "dissip" );
	deepEqual( Stem("dissiper"), "dissip" );
	deepEqual( Stem("dissipèrent"), "dissip" );
	deepEqual( Stem("dissolution"), "dissolu" );
	deepEqual( Stem("distance"), "distanc" );
	deepEqual( Stem("distancé"), "distanc" );
	deepEqual( Stem("distances"), "distanc" );
	deepEqual( Stem("distant"), "dist" );
	deepEqual( Stem("distillée"), "distill" );
	deepEqual( Stem("distinctement"), "distinct" );
	deepEqual( Stem("distinctes"), "distinct" );
	deepEqual( Stem("distinction"), "distinct" );
	deepEqual( Stem("distinctions"), "distinct" );
	deepEqual( Stem("distincts"), "distinct" );
	deepEqual( Stem("distinguaient"), "distingu" );
	deepEqual( Stem("distinguait"), "distingu" );
	deepEqual( Stem("distinguant"), "distingu" );
	deepEqual( Stem("distingue"), "distingu" );
	deepEqual( Stem("distingué"), "distingu" );
	deepEqual( Stem("distinguée"), "distingu" );
	deepEqual( Stem("distinguées"), "distingu" );
	deepEqual( Stem("distinguer"), "distingu" );
	deepEqual( Stem("distingués"), "distingu" );
	deepEqual( Stem("distinguons"), "distinguon" );
	deepEqual( Stem("distraction"), "distract" );
	deepEqual( Stem("distractions"), "distract" );
	deepEqual( Stem("distrairait"), "distrair" );
	deepEqual( Stem("distraire"), "distrair" );
	deepEqual( Stem("distrait"), "distr" );
	deepEqual( Stem("distraite"), "distrait" );
	deepEqual( Stem("distraites"), "distrait" );
	deepEqual( Stem("distrayaient"), "distrai" );
	deepEqual( Stem("distrayait"), "distrai" );
	deepEqual( Stem("distribua"), "distribu" );
	deepEqual( Stem("distribuait"), "distribu" );
	deepEqual( Stem("distribue"), "distribu" );
	deepEqual( Stem("distribué"), "distribu" );
	deepEqual( Stem("distribuent"), "distribuent" );
	deepEqual( Stem("distribuer"), "distribu" );
	deepEqual( Stem("distribuez"), "distribu" );
	deepEqual( Stem("distribution"), "distribu" );
	deepEqual( Stem("distributions"), "distribu" );
	deepEqual( Stem("distributive"), "distribut" );
	deepEqual( Stem("dit"), "dit" );
	deepEqual( Stem("dît"), "dît" );
	deepEqual( Stem("dite"), "dit" );
	deepEqual( Stem("dites"), "dit" );
	deepEqual( Stem("dithyrambe"), "dithyramb" );
	deepEqual( Stem("dits"), "dit" );
	deepEqual( Stem("diurne"), "diurn" );
	deepEqual( Stem("divan"), "divan" );
	deepEqual( Stem("divers"), "diver" );
	deepEqual( Stem("diverses"), "divers" );
	deepEqual( Stem("diversion"), "divers" );
	deepEqual( Stem("divertir"), "divert" );
	deepEqual( Stem("divertissant"), "divert" );
	deepEqual( Stem("divertissements"), "divert" );
	deepEqual( Stem("divin"), "divin" );
	deepEqual( Stem("divine"), "divin" );
	deepEqual( Stem("divinité"), "divin" );
	deepEqual( Stem("divins"), "divin" );
	deepEqual( Stem("divisa"), "divis" );
	deepEqual( Stem("divisait"), "divis" );
	deepEqual( Stem("divise"), "divis" );
	deepEqual( Stem("divisé"), "divis" );
	deepEqual( Stem("divisée"), "divis" );
	deepEqual( Stem("divisées"), "divis" );
	deepEqual( Stem("divisèrent"), "divis" );
	deepEqual( Stem("divisés"), "divis" );
	deepEqual( Stem("division"), "divis" );
	deepEqual( Stem("divisions"), "divis" );
	deepEqual( Stem("divulguer"), "divulgu" );
	deepEqual( Stem("dix"), "dix" );
	deepEqual( Stem("dixerunt"), "dixerunt" );
	deepEqual( Stem("dixième"), "dixiem" );
	deepEqual( Stem("dizaine"), "dizain" );
	deepEqual( Stem("do"), "do" );
	deepEqual( Stem("docilité"), "docil" );
	deepEqual( Stem("docks"), "dock" );
	deepEqual( Stem("docteur"), "docteur" );
	deepEqual( Stem("doctrine"), "doctrin" );
	deepEqual( Stem("doctrines"), "doctrin" );
	deepEqual( Stem("document"), "docu" );
	deepEqual( Stem("documents"), "docu" );
	deepEqual( Stem("dodge"), "dodg" );
	deepEqual( Stem("doge"), "dog" );
	deepEqual( Stem("dogmatiquement"), "dogmat" );
	deepEqual( Stem("dogme"), "dogm" );
	deepEqual( Stem("doigt"), "doigt" );
	deepEqual( Stem("doigts"), "doigt" );
	deepEqual( Stem("dois"), "dois" );
	deepEqual( Stem("doit"), "doit" );
	deepEqual( Stem("doivent"), "doivent" );
	deepEqual( Stem("dolci"), "dolc" );
	deepEqual( Stem("dôle"), "dôl" );
	deepEqual( Stem("doléances"), "doléanc" );
	deepEqual( Stem("dollar"), "dollar" );
	deepEqual( Stem("dollars"), "dollar" );
	deepEqual( Stem("dolman"), "dolman" );
	deepEqual( Stem("domaine"), "domain" );
	deepEqual( Stem("domaniale"), "domanial" );
	deepEqual( Stem("dôme"), "dôm" );
	deepEqual( Stem("domesticité"), "domest" );
	deepEqual( Stem("domestique"), "domest" );
	deepEqual( Stem("domestiqué"), "domestiqu" );
	deepEqual( Stem("domestiques"), "domest" );
	deepEqual( Stem("domicile"), "domicil" );
	deepEqual( Stem("domina"), "domin" );
	deepEqual( Stem("dominaient"), "domin" );
	deepEqual( Stem("dominait"), "domin" );
	deepEqual( Stem("dominant"), "domin" );
	deepEqual( Stem("dominante"), "domin" );
	deepEqual( Stem("dominateur"), "domin" );
	deepEqual( Stem("domination"), "domin" );
	deepEqual( Stem("domine"), "domin" );
	deepEqual( Stem("dominé"), "domin" );
	deepEqual( Stem("dominée"), "domin" );
	deepEqual( Stem("domingue"), "domingu" );
	deepEqual( Stem("domini"), "domin" );
	deepEqual( Stem("dommage"), "dommag" );
	deepEqual( Stem("dommages"), "dommag" );
	deepEqual( Stem("dompté"), "dompt" );
	deepEqual( Stem("dompter"), "dompt" );
	deepEqual( Stem("don"), "don" );
	deepEqual( Stem("donation"), "donat" );
	deepEqual( Stem("donc"), "donc" );
	deepEqual( Stem("dongo"), "dongo" );
	deepEqual( Stem("donjon"), "donjon" );
	deepEqual( Stem("donna"), "don" );
	deepEqual( Stem("donnai"), "don" );
	deepEqual( Stem("donnaient"), "don" );
	deepEqual( Stem("donnait"), "don" );
	deepEqual( Stem("donnant"), "don" );
	deepEqual( Stem("donnassent"), "don" );
	deepEqual( Stem("donnât"), "don" );
	deepEqual( Stem("donnâtes"), "don" );
	deepEqual( Stem("donne"), "don" );
	deepEqual( Stem("donné"), "don" );
	deepEqual( Stem("donnée"), "don" );
	deepEqual( Stem("données"), "don" );
	deepEqual( Stem("donnent"), "donnent" );
	deepEqual( Stem("donner"), "don" );
	deepEqual( Stem("donnera"), "don" );
	deepEqual( Stem("donnerai"), "don" );
	deepEqual( Stem("donneraient"), "don" );
	deepEqual( Stem("donnerais"), "don" );
	deepEqual( Stem("donnerait"), "don" );
	deepEqual( Stem("donneras"), "don" );
	deepEqual( Stem("donnèrent"), "don" );
	deepEqual( Stem("donnerez"), "don" );
	deepEqual( Stem("donneriez"), "don" );
	deepEqual( Stem("donneront"), "don" );
	deepEqual( Stem("donnes"), "don" );
	deepEqual( Stem("donnés"), "don" );
	deepEqual( Stem("donneur"), "donneur" );
	deepEqual( Stem("donnez"), "don" );
	deepEqual( Stem("donnions"), "donnion" );
	deepEqual( Stem("donnons"), "donnon" );
	deepEqual( Stem("dont"), "dont" );
	deepEqual( Stem("dorat"), "dorat" );
	deepEqual( Stem("doré"), "dor" );
	deepEqual( Stem("dorée"), "dor" );
	deepEqual( Stem("dorées"), "dor" );
	deepEqual( Stem("dorénavant"), "dorénav" );
	deepEqual( Stem("dorés"), "dor" );
	deepEqual( Stem("dormaient"), "dorm" );
	deepEqual( Stem("dormait"), "dorm" );
	deepEqual( Stem("dormantes"), "dorm" );
	deepEqual( Stem("dormeurs"), "dormeur" );
	deepEqual( Stem("dormi"), "dorm" );
	deepEqual( Stem("dormir"), "dorm" );
	deepEqual( Stem("dormirai"), "dorm" );
	deepEqual( Stem("dormit"), "dorm" );
	deepEqual( Stem("dormît"), "dorm" );
	deepEqual( Stem("dort"), "dort" );
	deepEqual( Stem("dortoir"), "dortoir" );
	deepEqual( Stem("dortoirs"), "dortoir" );
	deepEqual( Stem("dorures"), "dorur" );
	deepEqual( Stem("dos"), "dos" );
	deepEqual( Stem("dose"), "dos" );
	deepEqual( Stem("dossier"), "dossi" );
	deepEqual( Stem("dossiers"), "dossi" );
	deepEqual( Stem("dot"), "dot" );
	deepEqual( Stem("douaire"), "douair" );
	deepEqual( Stem("douairière"), "douairi" );
	deepEqual( Stem("douane"), "douan" );
	deepEqual( Stem("douanier"), "douani" );
	deepEqual( Stem("douaniers"), "douani" );
	deepEqual( Stem("doubla"), "doubl" );
	deepEqual( Stem("doublant"), "doubl" );
	deepEqual( Stem("double"), "doubl" );
	deepEqual( Stem("doublé"), "doubl" );
	deepEqual( Stem("doublée"), "doubl" );
	deepEqual( Stem("doublement"), "doubl" );
	deepEqual( Stem("doubler"), "doubl" );
	deepEqual( Stem("doubles"), "doubl" );
	deepEqual( Stem("doublure"), "doublur" );
	deepEqual( Stem("doubs"), "doub" );
	deepEqual( Stem("doubt"), "doubt" );
	deepEqual( Stem("douce"), "douc" );
	deepEqual( Stem("doucement"), "douc" );
	deepEqual( Stem("douces"), "douc" );
	deepEqual( Stem("douceur"), "douceur" );
	deepEqual( Stem("douceurs"), "douceur" );
	deepEqual( Stem("doué"), "dou" );
	deepEqual( Stem("douée"), "dou" );
	deepEqual( Stem("doués"), "dou" );
	deepEqual( Stem("douleur"), "douleur" );
	deepEqual( Stem("douleurs"), "douleur" );
	deepEqual( Stem("douloureuse"), "doulour" );
	deepEqual( Stem("douloureuses"), "doulour" );
	deepEqual( Stem("douloureux"), "doulour" );
	deepEqual( Stem("douta"), "dout" );
	deepEqual( Stem("doutait"), "dout" );
	deepEqual( Stem("doutât"), "dout" );
	deepEqual( Stem("doute"), "dout" );
	deepEqual( Stem("douté"), "dout" );
	deepEqual( Stem("doutée"), "dout" );
	deepEqual( Stem("douter"), "dout" );
	deepEqual( Stem("douterez"), "dout" );
	deepEqual( Stem("doutes"), "dout" );
	deepEqual( Stem("douteuse"), "douteux" );
	deepEqual( Stem("douteuses"), "douteux" );
	deepEqual( Stem("douteux"), "douteux" );
	deepEqual( Stem("doutez"), "dout" );
	deepEqual( Stem("douvres"), "douvr" );
	deepEqual( Stem("doux"), "doux" );
	deepEqual( Stem("douzaine"), "douzain" );
	deepEqual( Stem("douzaines"), "douzain" );
	deepEqual( Stem("douze"), "douz" );
	deepEqual( Stem("doyen"), "doyen" );
	deepEqual( Stem("dragon"), "dragon" );
	deepEqual( Stem("dragons"), "dragon" );
	deepEqual( Stem("dramatique"), "dramat" );
	deepEqual( Stem("dramatiques"), "dramat" );
	deepEqual( Stem("drame"), "dram" );
	deepEqual( Stem("drap"), "drap" );
	deepEqual( Stem("drapeau"), "drapeau" );
	deepEqual( Stem("drapeaux"), "drapeau" );
	deepEqual( Stem("drapée"), "drap" );
	deepEqual( Stem("drapier"), "drapi" );
	deepEqual( Stem("draps"), "drap" );
	deepEqual( Stem("drawing"), "drawing" );
	deepEqual( Stem("dressaient"), "dress" );
	deepEqual( Stem("dressait"), "dress" );
	deepEqual( Stem("dresse"), "dress" );
	deepEqual( Stem("dressé"), "dress" );
	deepEqual( Stem("dressée"), "dress" );
	deepEqual( Stem("dresser"), "dress" );
	deepEqual( Stem("dressés"), "dress" );
	deepEqual( Stem("drisses"), "driss" );
	deepEqual( Stem("drogue"), "drogu" );
	deepEqual( Stem("drogues"), "drogu" );
	deepEqual( Stem("droit"), "droit" );
	deepEqual( Stem("droite"), "droit" );
	deepEqual( Stem("droites"), "droit" );
	deepEqual( Stem("droits"), "droit" );
	deepEqual( Stem("droiture"), "droitur" );
	deepEqual( Stem("drôle"), "drôl" );
	deepEqual( Stem("drôles"), "drôl" );
	deepEqual( Stem("drome"), "drom" );
	deepEqual( Stem("dromes"), "drom" );
	deepEqual( Stem("du"), "du" );
	deepEqual( Stem("dû"), "dû" );
	deepEqual( Stem("dublin"), "dublin" );
	deepEqual( Stem("dubois"), "dubois" );
	deepEqual( Stem("duc"), "duc" );
	deepEqual( Stem("ducats"), "ducat" );
	deepEqual( Stem("duché"), "duch" );
	deepEqual( Stem("duchesse"), "duchess" );
	deepEqual( Stem("duchesses"), "duchess" );
	deepEqual( Stem("ducrest"), "ducrest" );
	deepEqual( Stem("ducros"), "ducros" );
	deepEqual( Stem("ducs"), "duc" );
	deepEqual( Stem("dudit"), "dud" );
	deepEqual( Stem("due"), "du" );
	deepEqual( Stem("duel"), "duel" );
	deepEqual( Stem("duellistes"), "duellist" );
	deepEqual( Stem("duettino"), "duettino" );
	deepEqual( Stem("dugnani"), "dugnan" );
	deepEqual( Stem("dûment"), "dûment" );
	deepEqual( Stem("dunette"), "dunet" );
	deepEqual( Stem("dupe"), "dup" );
	deepEqual( Stem("duperie"), "duper" );
	deepEqual( Stem("dupes"), "dup" );
	deepEqual( Stem("duplicité"), "dupliqu" );
	deepEqual( Stem("duquel"), "duquel" );
	deepEqual( Stem("dur"), "dur" );
	deepEqual( Stem("dura"), "dur" );
	deepEqual( Stem("durable"), "durabl" );
	deepEqual( Stem("durables"), "durabl" );
	deepEqual( Stem("duraient"), "dur" );
	deepEqual( Stem("durait"), "dur" );
	deepEqual( Stem("durand"), "durand" );
	deepEqual( Stem("durant"), "dur" );
	deepEqual( Stem("durât"), "dur" );
	deepEqual( Stem("durati"), "durat" );
	deepEqual( Stem("durcie"), "durc" );
	deepEqual( Stem("dure"), "dur" );
	deepEqual( Stem("duré"), "dur" );
	deepEqual( Stem("durée"), "dur" );
	deepEqual( Stem("durement"), "dur" );
	deepEqual( Stem("durent"), "durent" );
	deepEqual( Stem("durer"), "dur" );
	deepEqual( Stem("durera"), "dur" );
	deepEqual( Stem("dureraient"), "dur" );
	deepEqual( Stem("durerait"), "dur" );
	deepEqual( Stem("dureront"), "dur" );
	deepEqual( Stem("dures"), "dur" );
	deepEqual( Stem("dureté"), "duret" );
	deepEqual( Stem("durini"), "durin" );
	deepEqual( Stem("durs"), "dur" );
	deepEqual( Stem("dus"), "dus" );
	deepEqual( Stem("dussé"), "duss" );
	deepEqual( Stem("dut"), "dut" );
	deepEqual( Stem("dût"), "dût" );
	deepEqual( Stem("duvoisin"), "duvoisin" );
	deepEqual( Stem("e"), "e" );
	deepEqual( Stem("è"), "è" );
	deepEqual( Stem("earnshaw"), "earnshaw" );
	deepEqual( Stem("eastern"), "eastern" );
	deepEqual( Stem("eau"), "eau" );
	deepEqual( Stem("eaux"), "eau" );
	deepEqual( Stem("ébahi"), "ébah" );
	deepEqual( Stem("ébahie"), "ébah" );
	deepEqual( Stem("ébahis"), "ébah" );
	deepEqual( Stem("ébahissement"), "ébah" );
	deepEqual( Stem("ébattre"), "ébattr" );
	deepEqual( Stem("ébaucha"), "ébauch" );
	deepEqual( Stem("ébaudissait"), "ébaud" );
	deepEqual( Stem("ébène"), "ében" );
	deepEqual( Stem("ébloui"), "éblou" );
	deepEqual( Stem("éblouissant"), "éblou" );
	deepEqual( Stem("éblouissante"), "éblou" );
	deepEqual( Stem("éblouissement"), "éblou" );
	deepEqual( Stem("éblouit"), "éblou" );
	deepEqual( Stem("ébouriffé"), "ébouriff" );
	deepEqual( Stem("ébouriffée"), "ébouriff" );
	deepEqual( Stem("ébranla"), "ébranl" );
	deepEqual( Stem("ébranlaient"), "ébranl" );
	deepEqual( Stem("ébranlant"), "ébranl" );
	deepEqual( Stem("ébranlé"), "ébranl" );
	deepEqual( Stem("ébranlée"), "ébranl" );
	deepEqual( Stem("ébranler"), "ébranl" );
	deepEqual( Stem("ébréché"), "ébrech" );
	deepEqual( Stem("ébruité"), "ébruit" );
	deepEqual( Stem("écailles"), "écaill" );
	deepEqual( Stem("écarlate"), "écarlat" );
	deepEqual( Stem("écarquillés"), "écarquill" );
	deepEqual( Stem("écart"), "écart" );
	deepEqual( Stem("écartaient"), "écart" );
	deepEqual( Stem("écartait"), "écart" );
	deepEqual( Stem("écartant"), "écart" );
	deepEqual( Stem("écarte"), "écart" );
	deepEqual( Stem("écarté"), "écart" );
	deepEqual( Stem("écartée"), "écart" );
	deepEqual( Stem("écartées"), "écart" );
	deepEqual( Stem("écartelé"), "écartel" );
	deepEqual( Stem("écarter"), "écart" );
	deepEqual( Stem("eccellenza"), "eccellenz" );
	deepEqual( Stem("ecclesiam"), "ecclesiam" );
	deepEqual( Stem("ecclésiastique"), "ecclésiast" );
	deepEqual( Stem("ecclésiastiques"), "ecclésiast" );
	deepEqual( Stem("écervelés"), "écervel" );
	deepEqual( Stem("échafaud"), "échafaud" );
	deepEqual( Stem("échange"), "échang" );
	deepEqual( Stem("échangé"), "échang" );
	deepEqual( Stem("échangeaient"), "échang" );
	deepEqual( Stem("échangeant"), "échang" );
	deepEqual( Stem("échangée"), "échang" );
	deepEqual( Stem("échangées"), "échang" );
	deepEqual( Stem("échanger"), "échang" );
	deepEqual( Stem("échangés"), "échang" );
	deepEqual( Stem("échantillons"), "échantillon" );
	deepEqual( Stem("échappa"), "échapp" );
	deepEqual( Stem("échappaient"), "échapp" );
	deepEqual( Stem("échappait"), "échapp" );
	deepEqual( Stem("échappe"), "échapp" );
	deepEqual( Stem("échappé"), "échapp" );
	deepEqual( Stem("échappée"), "échapp" );
	deepEqual( Stem("échappées"), "échapp" );
	deepEqual( Stem("échappement"), "échapp" );
	deepEqual( Stem("échapper"), "échapp" );
	deepEqual( Stem("échapperait"), "échapp" );
	deepEqual( Stem("échappés"), "échapp" );
	deepEqual( Stem("échappons"), "échappon" );
	deepEqual( Stem("écharpe"), "écharp" );
	deepEqual( Stem("échauffant"), "échauff" );
	deepEqual( Stem("échauffer"), "échauff" );
	deepEqual( Stem("échéant"), "éché" );
	deepEqual( Stem("échec"), "échec" );
	deepEqual( Stem("échecs"), "échec" );
	deepEqual( Stem("échelle"), "échel" );
	deepEqual( Stem("échelles"), "échel" );
	deepEqual( Stem("échelon"), "échelon" );
	deepEqual( Stem("échelons"), "échelon" );
	deepEqual( Stem("échevelé"), "échevel" );
	deepEqual( Stem("echiquier"), "echiqui" );
	deepEqual( Stem("échiquiers"), "échiqui" );
	deepEqual( Stem("échoiront"), "échoiront" );
	deepEqual( Stem("échoppe"), "échopp" );
	deepEqual( Stem("échouait"), "échou" );
	deepEqual( Stem("échoue"), "échou" );
	deepEqual( Stem("échoué"), "échou" );
	deepEqual( Stem("échouer"), "échou" );
	deepEqual( Stem("échoueraient"), "échou" );
	deepEqual( Stem("échus"), "échus" );
	deepEqual( Stem("échut"), "échut" );
	deepEqual( Stem("éclair"), "éclair" );
	deepEqual( Stem("éclairaient"), "éclair" );
	deepEqual( Stem("éclairait"), "éclair" );
	deepEqual( Stem("éclairant"), "éclair" );
	deepEqual( Stem("éclaircies"), "éclairc" );
	deepEqual( Stem("éclaircir"), "éclairc" );
	deepEqual( Stem("éclaircirent"), "éclairc" );
	deepEqual( Stem("éclaircissant"), "éclairc" );
	deepEqual( Stem("éclaircissement"), "éclairc" );
	deepEqual( Stem("éclaircissent"), "éclairc" );
	deepEqual( Stem("éclaircit"), "éclairc" );
	deepEqual( Stem("éclairé"), "éclair" );
	deepEqual( Stem("éclairée"), "éclair" );
	deepEqual( Stem("éclairer"), "éclair" );
	deepEqual( Stem("éclairèrent"), "éclair" );
	deepEqual( Stem("éclairés"), "éclair" );
	deepEqual( Stem("éclairs"), "éclair" );
	deepEqual( Stem("éclat"), "éclat" );
	deepEqual( Stem("éclata"), "éclat" );
	deepEqual( Stem("éclataient"), "éclat" );
	deepEqual( Stem("éclatait"), "éclat" );
	deepEqual( Stem("éclatant"), "éclat" );
	deepEqual( Stem("éclatante"), "éclat" );
	deepEqual( Stem("éclatantes"), "éclat" );
	deepEqual( Stem("éclatants"), "éclat" );
	deepEqual( Stem("éclate"), "éclat" );
	deepEqual( Stem("éclaté"), "éclat" );
	deepEqual( Stem("éclatent"), "éclatent" );
	deepEqual( Stem("éclater"), "éclat" );
	deepEqual( Stem("éclatèrent"), "éclat" );
	deepEqual( Stem("éclats"), "éclat" );
	deepEqual( Stem("éclipsait"), "éclips" );
	deepEqual( Stem("éclipse"), "éclips" );
	deepEqual( Stem("éclipses"), "éclips" );
	deepEqual( Stem("éclipsés"), "éclips" );
	deepEqual( Stem("école"), "écol" );
	deepEqual( Stem("écolier"), "écoli" );
	deepEqual( Stem("éconduire"), "éconduir" );
	deepEqual( Stem("éconduit"), "éconduit" );
	deepEqual( Stem("économe"), "économ" );
	deepEqual( Stem("économes"), "économ" );
	deepEqual( Stem("économie"), "économ" );
	deepEqual( Stem("économies"), "économ" );
	deepEqual( Stem("économise"), "économis" );
	deepEqual( Stem("économisées"), "économis" );
	deepEqual( Stem("économiser"), "économis" );
	deepEqual( Stem("économisés"), "économis" );
	deepEqual( Stem("écorcha"), "écorch" );
	deepEqual( Stem("écorchaient"), "écorch" );
	deepEqual( Stem("écorchait"), "écorch" );
	deepEqual( Stem("écorché"), "écorch" );
	deepEqual( Stem("écorchée"), "écorch" );
	deepEqual( Stem("écorcher"), "écorch" );
	deepEqual( Stem("écorchures"), "écorchur" );
	deepEqual( Stem("écorné"), "écorn" );
	deepEqual( Stem("écossaise"), "écossais" );
	deepEqual( Stem("écoula"), "écoul" );
	deepEqual( Stem("écoulaient"), "écoul" );
	deepEqual( Stem("écoulant"), "écoul" );
	deepEqual( Stem("écoulé"), "écoul" );
	deepEqual( Stem("écoulée"), "écoul" );
	deepEqual( Stem("écoulement"), "écoul" );
	deepEqual( Stem("écoulent"), "écoulent" );
	deepEqual( Stem("écouler"), "écoul" );
	deepEqual( Stem("écoulèrent"), "écoul" );
	deepEqual( Stem("écoulés"), "écoul" );
	deepEqual( Stem("écouta"), "écout" );
	deepEqual( Stem("écoutaient"), "écout" );
	deepEqual( Stem("écoutais"), "écout" );
	deepEqual( Stem("écoutait"), "écout" );
	deepEqual( Stem("écoutant"), "écout" );
	deepEqual( Stem("écoute"), "écout" );
	deepEqual( Stem("écouté"), "écout" );
	deepEqual( Stem("écoutée"), "écout" );
	deepEqual( Stem("écoutent"), "écoutent" );
	deepEqual( Stem("écouter"), "écout" );
	deepEqual( Stem("écouterai"), "écout" );
	deepEqual( Stem("écouteront"), "écout" );
	deepEqual( Stem("écoutes"), "écout" );
	deepEqual( Stem("écoutés"), "écout" );
	deepEqual( Stem("ecoutez"), "ecout" );
	deepEqual( Stem("écoutez"), "écout" );
	deepEqual( Stem("écoutiez"), "écout" );
	deepEqual( Stem("écrasaient"), "écras" );
	deepEqual( Stem("écrasé"), "écras" );
	deepEqual( Stem("écrasée"), "écras" );
	deepEqual( Stem("écrasées"), "écras" );
	deepEqual( Stem("écraser"), "écras" );
	deepEqual( Stem("écria"), "écri" );
	deepEqual( Stem("écriaient"), "écri" );
	deepEqual( Stem("écriait"), "écri" );
	deepEqual( Stem("écriant"), "écri" );
	deepEqual( Stem("écrie"), "écri" );
	deepEqual( Stem("écrié"), "écri" );
	deepEqual( Stem("écriée"), "écri" );
	deepEqual( Stem("écrient"), "écrient" );
	deepEqual( Stem("écrier"), "écri" );
	deepEqual( Stem("écrièrent"), "écri" );
	deepEqual( Stem("écrin"), "écrin" );
	deepEqual( Stem("écrira"), "écrir" );
	deepEqual( Stem("écrirai"), "écrir" );
	deepEqual( Stem("écrirais"), "écrir" );
	deepEqual( Stem("écrirait"), "écrir" );
	deepEqual( Stem("écrire"), "écrir" );
	deepEqual( Stem("écrirez"), "écrir" );
	deepEqual( Stem("écris"), "écris" );
	deepEqual( Stem("écrit"), "écrit" );
	deepEqual( Stem("écrite"), "écrit" );
	deepEqual( Stem("écriteau"), "écriteau" );
	deepEqual( Stem("écrites"), "écrit" );
	deepEqual( Stem("écritoire"), "écritoir" );
	deepEqual( Stem("écrits"), "écrit" );
	deepEqual( Stem("écriture"), "écritur" );
	deepEqual( Stem("écritures"), "écritur" );
	deepEqual( Stem("écrivailleur"), "écrivailleur" );
	deepEqual( Stem("écrivailleurs"), "écrivailleur" );
	deepEqual( Stem("écrivain"), "écrivain" );
	deepEqual( Stem("écrivains"), "écrivain" );
	deepEqual( Stem("écrivais"), "écriv" );
	deepEqual( Stem("écrivait"), "écriv" );
	deepEqual( Stem("écrivant"), "écriv" );
	deepEqual( Stem("écrivante"), "écriv" );
	deepEqual( Stem("écrive"), "écriv" );
	deepEqual( Stem("écrivez"), "écriv" );
	deepEqual( Stem("écrivirent"), "écriv" );
	deepEqual( Stem("écrivit"), "écriv" );
	deepEqual( Stem("écrivît"), "écriv" );
	deepEqual( Stem("écrivîtes"), "écriv" );
	deepEqual( Stem("écrou"), "écrou" );
	deepEqual( Stem("écroué"), "écrou" );
	deepEqual( Stem("écroula"), "écroul" );
	deepEqual( Stem("écroulaient"), "écroul" );
	deepEqual( Stem("écu"), "écu" );
	deepEqual( Stem("écueil"), "écueil" );
	deepEqual( Stem("écuelle"), "écuel" );
	deepEqual( Stem("écumait"), "écum" );
	deepEqual( Stem("ecumeur"), "ecumeur" );
	deepEqual( Stem("écumeuses"), "écum" );
	deepEqual( Stem("écureuil"), "écureuil" );
	deepEqual( Stem("écurie"), "écur" );
	deepEqual( Stem("écuries"), "écur" );
	deepEqual( Stem("écus"), "écus" );
	deepEqual( Stem("écuyer"), "écui" );
	deepEqual( Stem("édification"), "édif" );
	deepEqual( Stem("édifice"), "édific" );
	deepEqual( Stem("edimbourg"), "edimbourg" );
	deepEqual( Stem("édimbourg"), "édimbourg" );
	deepEqual( Stem("edinburgh"), "edinburgh" );
	deepEqual( Stem("éditer"), "édit" );
	deepEqual( Stem("éditeur"), "éditeur" );
	deepEqual( Stem("édition"), "édit" );
	deepEqual( Stem("éditions"), "édit" );
	deepEqual( Stem("edrisi"), "edris" );
	deepEqual( Stem("éducation"), "éduc" );
	deepEqual( Stem("éduquer"), "éduqu" );
	deepEqual( Stem("effaça"), "effac" );
	deepEqual( Stem("efface"), "effac" );
	deepEqual( Stem("effacé"), "effac" );
	deepEqual( Stem("effacée"), "effac" );
	deepEqual( Stem("effacées"), "effac" );
	deepEqual( Stem("effacer"), "effac" );
	deepEqual( Stem("effaré"), "effar" );
	deepEqual( Stem("effarouchant"), "effarouch" );
	deepEqual( Stem("effarouche"), "effarouch" );
	deepEqual( Stem("effarouché"), "effarouch" );
	deepEqual( Stem("effaroucher"), "effarouch" );
	deepEqual( Stem("effarouches"), "effarouch" );
	deepEqual( Stem("effarouchés"), "effarouch" );
	deepEqual( Stem("effectivement"), "effect" );
	deepEqual( Stem("effectives"), "effect" );
	deepEqual( Stem("efféminées"), "effémin" );
	deepEqual( Stem("effervescence"), "effervescent" );
	deepEqual( Stem("effet"), "effet" );
	deepEqual( Stem("effets"), "effet" );
	deepEqual( Stem("effeuilla"), "effeuill" );
	deepEqual( Stem("effigie"), "effig" );
	deepEqual( Stem("effleurer"), "effleur" );
	deepEqual( Stem("efforçait"), "efforc" );
	deepEqual( Stem("effort"), "effort" );
	deepEqual( Stem("efforts"), "effort" );
	deepEqual( Stem("effraie"), "effrai" );
	deepEqual( Stem("effraya"), "effrai" );
	deepEqual( Stem("effrayaient"), "effrai" );
	deepEqual( Stem("effrayait"), "effrai" );
	deepEqual( Stem("effrayant"), "effrai" );
	deepEqual( Stem("effrayante"), "effrai" );
	deepEqual( Stem("effraye"), "effray" );
	deepEqual( Stem("effrayé"), "effrai" );
	deepEqual( Stem("effrayée"), "effrai" );
	deepEqual( Stem("effrayées"), "effrai" );
	deepEqual( Stem("effrayent"), "effrayent" );
	deepEqual( Stem("effrayer"), "effrai" );
	deepEqual( Stem("effrayèrent"), "effrai" );
	deepEqual( Stem("effrayés"), "effrai" );
	deepEqual( Stem("effréné"), "effren" );
	deepEqual( Stem("effrénée"), "effren" );
	deepEqual( Stem("effroi"), "effroi" );
	deepEqual( Stem("effronté"), "effront" );
	deepEqual( Stem("effrontément"), "effront" );
	deepEqual( Stem("effronterie"), "effronter" );
	deepEqual( Stem("effrontés"), "effront" );
	deepEqual( Stem("effroyable"), "effroi" );
	deepEqual( Stem("effroyablement"), "effroi" );
	deepEqual( Stem("effusion"), "effus" );
	deepEqual( Stem("égaiera"), "égai" );
	deepEqual( Stem("égal"), "égal" );
	deepEqual( Stem("égalait"), "égal" );
	deepEqual( Stem("égale"), "égal" );
	deepEqual( Stem("également"), "égal" );
	deepEqual( Stem("égalent"), "égalent" );
	deepEqual( Stem("égales"), "égal" );
	deepEqual( Stem("égalité"), "égal" );
	deepEqual( Stem("égalités"), "égal" );
	deepEqual( Stem("égara"), "égar" );
	deepEqual( Stem("égarait"), "égar" );
	deepEqual( Stem("égard"), "égard" );
	deepEqual( Stem("égards"), "égard" );
	deepEqual( Stem("égare"), "égar" );
	deepEqual( Stem("égaré"), "égar" );
	deepEqual( Stem("égarée"), "égar" );
	deepEqual( Stem("égarement"), "égar" );
	deepEqual( Stem("égarements"), "égar" );
	deepEqual( Stem("égarer"), "égar" );
	deepEqual( Stem("égares"), "égar" );
	deepEqual( Stem("égarés"), "égar" );
	deepEqual( Stem("égaux"), "égal" );
	deepEqual( Stem("égaya"), "égai" );
	deepEqual( Stem("égayée"), "égai" );
	deepEqual( Stem("égayer"), "égai" );
	deepEqual( Stem("égayés"), "égai" );
	deepEqual( Stem("église"), "églis" );
	deepEqual( Stem("églises"), "églis" );
	deepEqual( Stem("ego"), "ego" );
	deepEqual( Stem("égoïsme"), "égoïsm" );
	deepEqual( Stem("égoïste"), "égoïst" );
	deepEqual( Stem("égoïstes"), "égoïst" );
	deepEqual( Stem("égorgent"), "égorgent" );
	deepEqual( Stem("égorger"), "égorg" );
	deepEqual( Stem("égorgés"), "égorg" );
	deepEqual( Stem("égout"), "égout" );
	deepEqual( Stem("égratignure"), "égratignur" );
	deepEqual( Stem("égratignures"), "égratignur" );
	deepEqual( Stem("egypte"), "egypt" );
	deepEqual( Stem("égypte"), "égypt" );
	deepEqual( Stem("egyptiens"), "egyptien" );
	deepEqual( Stem("égyptiens"), "égyptien" );
	deepEqual( Stem("eh"), "eh" );
	deepEqual( Stem("el"), "el" );
	deepEqual( Stem("élan"), "élan" );
	deepEqual( Stem("élança"), "élanc" );
	deepEqual( Stem("élançait"), "élanc" );
	deepEqual( Stem("élançant"), "élanc" );
	deepEqual( Stem("élance"), "élanc" );
	deepEqual( Stem("élancé"), "élanc" );
	deepEqual( Stem("élancer"), "élanc" );
	deepEqual( Stem("élancera"), "élanc" );
	deepEqual( Stem("élans"), "élan" );
	deepEqual( Stem("élargi"), "élarg" );
	deepEqual( Stem("élastiques"), "élast" );
	deepEqual( Stem("elder"), "elder" );
	deepEqual( Stem("électeur"), "électeur" );
	deepEqual( Stem("électeurs"), "électeur" );
	deepEqual( Stem("élection"), "élect" );
	deepEqual( Stem("élections"), "élect" );
	deepEqual( Stem("électives"), "élect" );
	deepEqual( Stem("électrique"), "électr" );
	deepEqual( Stem("électriques"), "électr" );
	deepEqual( Stem("électrisait"), "électris" );
	deepEqual( Stem("élégamment"), "éleg" );
	deepEqual( Stem("élégance"), "éleg" );
	deepEqual( Stem("élégant"), "éleg" );
	deepEqual( Stem("élégante"), "éleg" );
	deepEqual( Stem("élégantes"), "éleg" );
	deepEqual( Stem("élégants"), "éleg" );
	deepEqual( Stem("élémentaire"), "élémentair" );
	deepEqual( Stem("éléments"), "élément" );
	deepEqual( Stem("éléphant"), "éleph" );
	deepEqual( Stem("eléphanta"), "eléphant" );
	deepEqual( Stem("éléphants"), "éleph" );
	deepEqual( Stem("éleva"), "élev" );
	deepEqual( Stem("élevaient"), "élev" );
	deepEqual( Stem("élevait"), "élev" );
	deepEqual( Stem("élevant"), "élev" );
	deepEqual( Stem("élévation"), "élev" );
	deepEqual( Stem("élévations"), "élev" );
	deepEqual( Stem("élève"), "élev" );
	deepEqual( Stem("élevé"), "élev" );
	deepEqual( Stem("élevée"), "élev" );
	deepEqual( Stem("élevées"), "élev" );
	deepEqual( Stem("élèvent"), "élèvent" );
	deepEqual( Stem("élever"), "élev" );
	deepEqual( Stem("élèvera"), "élev" );
	deepEqual( Stem("élèverai"), "élev" );
	deepEqual( Stem("élèverez"), "élev" );
	deepEqual( Stem("élèves"), "élev" );
	deepEqual( Stem("élevés"), "élev" );
	deepEqual( Stem("éleveurs"), "éleveur" );
	deepEqual( Stem("élisa"), "élis" );
	deepEqual( Stem("élite"), "élit" );
	deepEqual( Stem("elko"), "elko" );
	deepEqual( Stem("elle"), "elle" );
	deepEqual( Stem("elles"), "elle" );
	deepEqual( Stem("ellora"), "ellor" );
	deepEqual( Stem("élocution"), "élocu" );
	deepEqual( Stem("éloge"), "élog" );
	deepEqual( Stem("éloges"), "élog" );
	deepEqual( Stem("éloigna"), "éloign" );
	deepEqual( Stem("éloignaient"), "éloign" );
	deepEqual( Stem("éloignais"), "éloign" );
	deepEqual( Stem("éloignait"), "éloign" );
	deepEqual( Stem("éloignant"), "éloign" );
	deepEqual( Stem("éloignât"), "éloign" );
	deepEqual( Stem("éloigne"), "éloign" );
	deepEqual( Stem("éloigné"), "éloign" );
	deepEqual( Stem("éloignée"), "éloign" );
	deepEqual( Stem("éloignées"), "éloign" );
	deepEqual( Stem("éloignement"), "éloign" );
	deepEqual( Stem("éloigner"), "éloign" );
	deepEqual( Stem("éloignerai"), "éloign" );
	deepEqual( Stem("éloignerait"), "éloign" );
	deepEqual( Stem("éloignèrent"), "éloign" );
	deepEqual( Stem("éloignés"), "éloign" );
	deepEqual( Stem("éloignez"), "éloign" );
	deepEqual( Stem("éloigniez"), "éloign" );
	deepEqual( Stem("éloquence"), "éloquent" );
	deepEqual( Stem("éloquent"), "éloquent" );
	deepEqual( Stem("éloquente"), "éloquent" );
	deepEqual( Stem("élu"), "élu" );
	deepEqual( Stem("éluder"), "élud" );
	deepEqual( Stem("elysées"), "elys" );
	deepEqual( Stem("élysées"), "élys" );
	deepEqual( Stem("émaillée"), "émaill" );
	deepEqual( Stem("emballée"), "emball" );
	deepEqual( Stem("emballer"), "emball" );
	deepEqual( Stem("embarcation"), "embarc" );
	deepEqual( Stem("embarcations"), "embarc" );
	deepEqual( Stem("embardée"), "embard" );
	deepEqual( Stem("embardées"), "embard" );
	deepEqual( Stem("embarqua"), "embarqu" );
	deepEqual( Stem("embarquait"), "embarqu" );
	deepEqual( Stem("embarquant"), "embarqu" );
	deepEqual( Stem("embarque"), "embarqu" );
	deepEqual( Stem("embarqué"), "embarqu" );
	deepEqual( Stem("embarquement"), "embarqu" );
	deepEqual( Stem("embarquer"), "embarqu" );
	deepEqual( Stem("embarqués"), "embarqu" );
	deepEqual( Stem("embarras"), "embarr" );
	deepEqual( Stem("embarrassa"), "embarrass" );
	deepEqual( Stem("embarrassait"), "embarrass" );
	deepEqual( Stem("embarrasse"), "embarr" );
	deepEqual( Stem("embarrassé"), "embarrass" );
	deepEqual( Stem("embarrassée"), "embarrass" );
	deepEqual( Stem("embarrasser"), "embarrass" );
	deepEqual( Stem("embarrassés"), "embarrass" );
	deepEqual( Stem("embaumé"), "embaum" );
	deepEqual( Stem("embaumée"), "embaum" );
	deepEqual( Stem("embelli"), "embel" );
	deepEqual( Stem("embellie"), "embel" );
	deepEqual( Stem("embellir"), "embel" );
	deepEqual( Stem("emblée"), "emblé" );
	deepEqual( Stem("emblème"), "emblem" );
	deepEqual( Stem("embonpoint"), "embonpoint" );
	deepEqual( Stem("embossent"), "embossent" );
	deepEqual( Stem("embouchure"), "embouchur" );
	deepEqual( Stem("embouquait"), "embouqu" );
	deepEqual( Stem("embourbant"), "embourb" );
	deepEqual( Stem("embourser"), "embours" );
	deepEqual( Stem("embranchement"), "embranch" );
	deepEqual( Stem("embranchements"), "embranch" );
	deepEqual( Stem("embrasé"), "embras" );
	deepEqual( Stem("embrasée"), "embras" );
	deepEqual( Stem("embrassa"), "embrass" );
	deepEqual( Stem("embrassaient"), "embrass" );
	deepEqual( Stem("embrassait"), "embrass" );
	deepEqual( Stem("embrassant"), "embrass" );
	deepEqual( Stem("embrasse"), "embrass" );
	deepEqual( Stem("embrassé"), "embrass" );
	deepEqual( Stem("embrassements"), "embrass" );
	deepEqual( Stem("embrasser"), "embrass" );
	deepEqual( Stem("embrasserais"), "embrass" );
	deepEqual( Stem("embrassèrent"), "embrass" );
	deepEqual( Stem("embrouilla"), "embrouill" );
	deepEqual( Stem("embrouillant"), "embrouill" );
	deepEqual( Stem("embrouille"), "embrouill" );
	deepEqual( Stem("embrouiller"), "embrouill" );
	deepEqual( Stem("embrumé"), "embrum" );
	deepEqual( Stem("embrunir"), "embrun" );
	deepEqual( Stem("embruns"), "embrun" );
	deepEqual( Stem("embûche"), "embûch" );
	deepEqual( Stem("embûches"), "embûch" );
	deepEqual( Stem("embuscade"), "embuscad" );
	deepEqual( Stem("émergeait"), "émerg" );
	deepEqual( Stem("émerveillé"), "émerveil" );
	deepEqual( Stem("émerveillée"), "émerveil" );
	deepEqual( Stem("émettre"), "émettr" );
	deepEqual( Stem("émeute"), "émeut" );
	deepEqual( Stem("émeuvent"), "émeuvent" );
	deepEqual( Stem("émigrants"), "émigr" );
	deepEqual( Stem("émigration"), "émigr" );
	deepEqual( Stem("émigrera"), "émigr" );
	deepEqual( Stem("éminemment"), "éminent" );
	deepEqual( Stem("émissaire"), "émissair" );
	deepEqual( Stem("emmancher"), "emmanch" );
	deepEqual( Stem("emmêlés"), "emmêl" );
	deepEqual( Stem("emmena"), "emmen" );
	deepEqual( Stem("emmenaient"), "emmen" );
	deepEqual( Stem("emmenait"), "emmen" );
	deepEqual( Stem("emmène"), "emmen" );
	deepEqual( Stem("emmené"), "emmen" );
	deepEqual( Stem("emmener"), "emmen" );
	deepEqual( Stem("emmènerait"), "emmen" );
	deepEqual( Stem("emmènes"), "emmen" );
	deepEqual( Stem("émoi"), "émoi" );
	deepEqual( Stem("émotion"), "émot" );
	deepEqual( Stem("émotions"), "émot" );
	deepEqual( Stem("émoussés"), "émouss" );
	deepEqual( Stem("émoustiller"), "émoustill" );
	deepEqual( Stem("émouvoir"), "émouvoir" );
	deepEqual( Stem("empaquetée"), "empaquet" );
	deepEqual( Stem("empara"), "empar" );
	deepEqual( Stem("emparaient"), "empar" );
	deepEqual( Stem("emparait"), "empar" );
	deepEqual( Stem("emparant"), "empar" );
	deepEqual( Stem("emparé"), "empar" );
	deepEqual( Stem("emparer"), "empar" );
	deepEqual( Stem("emparèrent"), "empar" );
	deepEqual( Stem("emparés"), "empar" );
	deepEqual( Stem("empaumer"), "empaum" );
	deepEqual( Stem("empêcha"), "empêch" );
	deepEqual( Stem("empêchaient"), "empêch" );
	deepEqual( Stem("empêchait"), "empêch" );
	deepEqual( Stem("empêchât"), "empêch" );
	deepEqual( Stem("empêche"), "empêch" );
	deepEqual( Stem("empêché"), "empêch" );
	deepEqual( Stem("empêchée"), "empêch" );
	deepEqual( Stem("empêchent"), "empêchent" );
	deepEqual( Stem("empêcher"), "empêch" );
	deepEqual( Stem("empêchera"), "empêch" );
	deepEqual( Stem("empêcherai"), "empêch" );
	deepEqual( Stem("empêcheraient"), "empêch" );
	deepEqual( Stem("empêcherait"), "empêch" );
	deepEqual( Stem("empêchèrent"), "empêch" );
	deepEqual( Stem("empêcheront"), "empêch" );
	deepEqual( Stem("empêches"), "empêch" );
	deepEqual( Stem("empêchez"), "empêch" );
	deepEqual( Stem("empereur"), "empereur" );
	deepEqual( Stem("empereurs"), "empereur" );
	deepEqual( Stem("empesé"), "empes" );
	deepEqual( Stem("empestée"), "empest" );
	deepEqual( Stem("empêtrés"), "empêtr" );
	deepEqual( Stem("emphase"), "emphas" );
	deepEqual( Stem("emphatique"), "emphat" );
	deepEqual( Stem("emphatiques"), "emphat" );
	deepEqual( Stem("empilé"), "empil" );
	deepEqual( Stem("empir"), "empir" );
	deepEqual( Stem("empire"), "empir" );
	deepEqual( Stem("empires"), "empir" );
	deepEqual( Stem("emplacement"), "emplac" );
	deepEqual( Stem("emplettes"), "emplet" );
	deepEqual( Stem("emplissent"), "emplissent" );
	deepEqual( Stem("emploi"), "emploi" );
	deepEqual( Stem("emploie"), "emploi" );
	deepEqual( Stem("emploient"), "emploient" );
	deepEqual( Stem("emploierai"), "emploi" );
	deepEqual( Stem("emploieraient"), "emploi" );
	deepEqual( Stem("emploierais"), "emploi" );
	deepEqual( Stem("emploierait"), "emploi" );
	deepEqual( Stem("emplois"), "emplois" );
	deepEqual( Stem("employa"), "emploi" );
	deepEqual( Stem("employaient"), "emploi" );
	deepEqual( Stem("employait"), "emploi" );
	deepEqual( Stem("employant"), "emploi" );
	deepEqual( Stem("employât"), "emploi" );
	deepEqual( Stem("employâtes"), "emploi" );
	deepEqual( Stem("employé"), "emploi" );
	deepEqual( Stem("employée"), "emploi" );
	deepEqual( Stem("employées"), "emploi" );
	deepEqual( Stem("employer"), "emploi" );
	deepEqual( Stem("employés"), "emploi" );
	deepEqual( Stem("employez"), "emploi" );
	deepEqual( Stem("emplumés"), "emplum" );
	deepEqual( Stem("empoché"), "empoch" );
	deepEqual( Stem("empoigné"), "empoign" );
	deepEqual( Stem("empoignera"), "empoign" );
	deepEqual( Stem("empoisonna"), "empoison" );
	deepEqual( Stem("empoisonnaient"), "empoison" );
	deepEqual( Stem("empoisonnait"), "empoison" );
	deepEqual( Stem("empoisonne"), "empoison" );
	deepEqual( Stem("empoisonné"), "empoison" );
	deepEqual( Stem("empoisonnée"), "empoison" );
	deepEqual( Stem("empoisonnement"), "empoison" );
	deepEqual( Stem("empoisonnent"), "empoisonnent" );
	deepEqual( Stem("empoisonner"), "empoison" );
	deepEqual( Stem("empoisonnerai"), "empoison" );
	deepEqual( Stem("empoisonnerait"), "empoison" );
	deepEqual( Stem("empoisonnés"), "empoison" );
	deepEqual( Stem("empoisonneur"), "empoisonneur" );
	deepEqual( Stem("empoisonneurs"), "empoisonneur" );
	deepEqual( Stem("emporta"), "emport" );
	deepEqual( Stem("emportaient"), "emport" );
	deepEqual( Stem("emportait"), "emport" );
	deepEqual( Stem("emportant"), "emport" );
	deepEqual( Stem("emporte"), "emport" );
	deepEqual( Stem("emporté"), "emport" );
	deepEqual( Stem("emportée"), "emport" );
	deepEqual( Stem("emportées"), "emport" );
	deepEqual( Stem("emportement"), "emport" );
	deepEqual( Stem("emportent"), "emportent" );
	deepEqual( Stem("emporter"), "emport" );
	deepEqual( Stem("emporterait"), "emport" );
	deepEqual( Stem("emporterez"), "emport" );
	deepEqual( Stem("emporteront"), "emport" );
	deepEqual( Stem("emportés"), "emport" );
	deepEqual( Stem("empreinte"), "empreint" );
	deepEqual( Stem("empressa"), "empress" );
	deepEqual( Stem("empressé"), "empress" );
	deepEqual( Stem("empressée"), "empress" );
	deepEqual( Stem("empressées"), "empress" );
	deepEqual( Stem("empressement"), "empress" );
	deepEqual( Stem("empressements"), "empress" );
	deepEqual( Stem("empressèrent"), "empress" );
	deepEqual( Stem("empressés"), "empress" );
	deepEqual( Stem("emprisonne"), "emprison" );
	deepEqual( Stem("emprisonné"), "emprison" );
	deepEqual( Stem("emprisonnée"), "emprison" );
	deepEqual( Stem("emprisonnement"), "emprison" );
	deepEqual( Stem("emprunt"), "emprunt" );
	deepEqual( Stem("emprunta"), "emprunt" );
	deepEqual( Stem("emprunté"), "emprunt" );
	deepEqual( Stem("emprunter"), "emprunt" );
	deepEqual( Stem("empruntés"), "emprunt" );
	deepEqual( Stem("ému"), "ému" );
	deepEqual( Stem("émue"), "ému" );
	deepEqual( Stem("émule"), "émul" );
	deepEqual( Stem("émurent"), "émurent" );
	deepEqual( Stem("émus"), "émus" );
	deepEqual( Stem("émut"), "émut" );
	deepEqual( Stem("en"), "en" );
	deepEqual( Stem("encablure"), "encablur" );
	deepEqual( Stem("encadre"), "encadr" );
	deepEqual( Stem("encadré"), "encadr" );
	deepEqual( Stem("encadrées"), "encadr" );
	deepEqual( Stem("enceinte"), "enceint" );
	deepEqual( Stem("encens"), "encen" );
	deepEqual( Stem("enchaîné"), "enchaîn" );
	deepEqual( Stem("enchaînée"), "enchaîn" );
	deepEqual( Stem("enchaînés"), "enchaîn" );
	deepEqual( Stem("enchantait"), "enchant" );
	deepEqual( Stem("enchanté"), "enchant" );
	deepEqual( Stem("enchantée"), "enchant" );
	deepEqual( Stem("enchantement"), "enchant" );
	deepEqual( Stem("enchanter"), "enchant" );
	deepEqual( Stem("enchanteresses"), "enchanteress" );
	deepEqual( Stem("enchantés"), "enchant" );
	deepEqual( Stem("enchanteur"), "enchanteur" );
	deepEqual( Stem("enchanteurs"), "enchanteur" );
	deepEqual( Stem("enchâsser"), "enchâss" );
	deepEqual( Stem("enchère"), "encher" );
	deepEqual( Stem("enchères"), "encher" );
	deepEqual( Stem("enclos"), "enclos" );
	deepEqual( Stem("enclume"), "enclum" );
	deepEqual( Stem("encolure"), "encolur" );
	deepEqual( Stem("encombraient"), "encombr" );
	deepEqual( Stem("encombrant"), "encombr" );
	deepEqual( Stem("encombrante"), "encombr" );
	deepEqual( Stem("encombre"), "encombr" );
	deepEqual( Stem("encombré"), "encombr" );
	deepEqual( Stem("encombrée"), "encombr" );
	deepEqual( Stem("encombrées"), "encombr" );
	deepEqual( Stem("encombrés"), "encombr" );
	deepEqual( Stem("encore"), "encor" );
	deepEqual( Stem("encouragé"), "encourag" );
	deepEqual( Stem("encourageante"), "encourag" );
	deepEqual( Stem("encouragement"), "encourag" );
	deepEqual( Stem("encourager"), "encourag" );
	deepEqual( Stem("encouragés"), "encourag" );
	deepEqual( Stem("encourir"), "encour" );
	deepEqual( Stem("encouru"), "encouru" );
	deepEqual( Stem("encrassaient"), "encrass" );
	deepEqual( Stem("encre"), "encre" );
	deepEqual( Stem("encroûtées"), "encroût" );
	deepEqual( Stem("encyclopédie"), "encycloped" );
	deepEqual( Stem("endoctriné"), "endoctrin" );
	deepEqual( Stem("endommagé"), "endommag" );
	deepEqual( Stem("endormi"), "endorm" );
	deepEqual( Stem("endormir"), "endorm" );
	deepEqual( Stem("endormis"), "endorm" );
	deepEqual( Stem("endormit"), "endorm" );
	deepEqual( Stem("endors"), "endor" );
	deepEqual( Stem("endossé"), "endoss" );
	deepEqual( Stem("endosser"), "endoss" );
	deepEqual( Stem("endroit"), "endroit" );
	deepEqual( Stem("endroits"), "endroit" );
	deepEqual( Stem("enduisirent"), "enduis" );
	deepEqual( Stem("enduraient"), "endur" );
	deepEqual( Stem("endurant"), "endur" );
	deepEqual( Stem("endurci"), "endurc" );
	deepEqual( Stem("endurcie"), "endurc" );
	deepEqual( Stem("endurées"), "endur" );
	deepEqual( Stem("énergie"), "énerg" );
	deepEqual( Stem("énergique"), "énerg" );
	deepEqual( Stem("énergumène"), "énergumen" );
	deepEqual( Stem("énergumènes"), "énergumen" );
	deepEqual( Stem("énervé"), "énerv" );
	deepEqual( Stem("énervée"), "énerv" );
	deepEqual( Stem("énerver"), "énerv" );
	deepEqual( Stem("enfance"), "enfanc" );
	deepEqual( Stem("enfant"), "enfant" );
	deepEqual( Stem("enfantillage"), "enfantillag" );
	deepEqual( Stem("enfantillages"), "enfantillag" );
	deepEqual( Stem("enfantine"), "enfantin" );
	deepEqual( Stem("enfantines"), "enfantin" );
	deepEqual( Stem("enfants"), "enfant" );
	deepEqual( Stem("enfer"), "enfer" );
	deepEqual( Stem("enferma"), "enferm" );
	deepEqual( Stem("enfermais"), "enferm" );
	deepEqual( Stem("enfermait"), "enferm" );
	deepEqual( Stem("enfermant"), "enferm" );
	deepEqual( Stem("enferme"), "enferm" );
	deepEqual( Stem("enfermé"), "enferm" );
	deepEqual( Stem("enfermée"), "enferm" );
	deepEqual( Stem("enfermer"), "enferm" );
	deepEqual( Stem("enfermèrent"), "enferm" );
	deepEqual( Stem("enfermés"), "enferm" );
	deepEqual( Stem("enferrer"), "enferr" );
	deepEqual( Stem("enfers"), "enfer" );
	deepEqual( Stem("enfield"), "enfield" );
	deepEqual( Stem("enfin"), "enfin" );
	deepEqual( Stem("enflamma"), "enflamm" );
	deepEqual( Stem("enflammé"), "enflamm" );
	deepEqual( Stem("enflammée"), "enflamm" );
	deepEqual( Stem("enflammées"), "enflamm" );
	deepEqual( Stem("enflammer"), "enflamm" );
	deepEqual( Stem("enflammèrent"), "enflamm" );
	deepEqual( Stem("enflammés"), "enflamm" );
	deepEqual( Stem("enflée"), "enflé" );
	deepEqual( Stem("enflées"), "enflé" );
	deepEqual( Stem("enfonça"), "enfonc" );
	deepEqual( Stem("enfonçaient"), "enfonc" );
	deepEqual( Stem("enfonçait"), "enfonc" );
	deepEqual( Stem("enfonçât"), "enfonc" );
	deepEqual( Stem("enfonce"), "enfonc" );
	deepEqual( Stem("enfoncer"), "enfonc" );
	deepEqual( Stem("enfonceront"), "enfonc" );
	deepEqual( Stem("enfouis"), "enfou" );
	deepEqual( Stem("enfourcher"), "enfourch" );
	deepEqual( Stem("enfui"), "enfui" );
	deepEqual( Stem("enfuie"), "enfui" );
	deepEqual( Stem("enfuir"), "enfuir" );
	deepEqual( Stem("enfuirai"), "enfuir" );
	deepEqual( Stem("enfuis"), "enfuis" );
	deepEqual( Stem("enfuit"), "enfuit" );
	deepEqual( Stem("enfumé"), "enfum" );
	deepEqual( Stem("enfuyaient"), "enfui" );
	deepEqual( Stem("enfuyait"), "enfui" );
	deepEqual( Stem("engage"), "engag" );
	deepEqual( Stem("engagé"), "engag" );
	deepEqual( Stem("engagea"), "engag" );
	deepEqual( Stem("engageaient"), "engag" );
	deepEqual( Stem("engageait"), "engag" );
	deepEqual( Stem("engageant"), "engag" );
	deepEqual( Stem("engagée"), "engag" );
	deepEqual( Stem("engagées"), "engag" );
	deepEqual( Stem("engagement"), "engag" );
	deepEqual( Stem("engagements"), "engag" );
	deepEqual( Stem("engagent"), "engagent" );
	deepEqual( Stem("engager"), "engag" );
	deepEqual( Stem("engagerai"), "engag" );
	deepEqual( Stem("engeance"), "engeanc" );
	deepEqual( Stem("engendre"), "engendr" );
	deepEqual( Stem("engine"), "engin" );
	deepEqual( Stem("england"), "england" );
	deepEqual( Stem("englishman"), "englishman" );
	deepEqual( Stem("engloutir"), "englout" );
	deepEqual( Stem("engoués"), "engou" );
	deepEqual( Stem("engouffrées"), "engouffr" );
	deepEqual( Stem("engourdis"), "engourd" );
	deepEqual( Stem("engourdissement"), "engourd" );
	deepEqual( Stem("énigmatique"), "énigmat" );
	deepEqual( Stem("énigme"), "énigm" );
	deepEqual( Stem("enivraient"), "enivr" );
	deepEqual( Stem("enivré"), "enivr" );
	deepEqual( Stem("enivrée"), "enivr" );
	deepEqual( Stem("enivrées"), "enivr" );
	deepEqual( Stem("enivrer"), "enivr" );
	deepEqual( Stem("enjambée"), "enjamb" );
	deepEqual( Stem("enjeu"), "enjeu" );
	deepEqual( Stem("enjouement"), "enjou" );
	deepEqual( Stem("enleva"), "enlev" );
	deepEqual( Stem("enlevaient"), "enlev" );
	deepEqual( Stem("enlevait"), "enlev" );
	deepEqual( Stem("enlevât"), "enlev" );
	deepEqual( Stem("enlève"), "enlev" );
	deepEqual( Stem("enlevé"), "enlev" );
	deepEqual( Stem("enlevée"), "enlev" );
	deepEqual( Stem("enlevées"), "enlev" );
	deepEqual( Stem("enlèvement"), "enlev" );
	deepEqual( Stem("enlèvent"), "enlèvent" );
	deepEqual( Stem("enlever"), "enlev" );
	deepEqual( Stem("enlèverais"), "enlev" );
	deepEqual( Stem("enlevèrent"), "enlev" );
	deepEqual( Stem("enlèverez"), "enlev" );
	deepEqual( Stem("enlevez"), "enlev" );
	deepEqual( Stem("enluminée"), "enlumin" );
	deepEqual( Stem("ennemi"), "ennem" );
	deepEqual( Stem("ennemie"), "ennem" );
	deepEqual( Stem("ennemis"), "ennem" );
	deepEqual( Stem("ennius"), "ennius" );
	deepEqual( Stem("ennnui"), "ennnui" );
	deepEqual( Stem("ennui"), "ennui" );
	deepEqual( Stem("ennuie"), "ennui" );
	deepEqual( Stem("ennuient"), "ennuient" );
	deepEqual( Stem("ennuiera"), "ennui" );
	deepEqual( Stem("ennuierais"), "ennui" );
	deepEqual( Stem("ennuierait"), "ennui" );
	deepEqual( Stem("ennuieront"), "ennui" );
	deepEqual( Stem("ennuies"), "ennui" );
	deepEqual( Stem("ennuis"), "ennuis" );
	deepEqual( Stem("ennuya"), "ennui" );
	deepEqual( Stem("ennuyaient"), "ennui" );
	deepEqual( Stem("ennuyais"), "ennui" );
	deepEqual( Stem("ennuyait"), "ennui" );
	deepEqual( Stem("ennuyant"), "ennui" );
	deepEqual( Stem("ennuyé"), "ennui" );
	deepEqual( Stem("ennuyée"), "ennui" );
	deepEqual( Stem("ennuyer"), "ennui" );
	deepEqual( Stem("ennuyés"), "ennui" );
	deepEqual( Stem("ennuyeuse"), "ennui" );
	deepEqual( Stem("ennuyeusement"), "ennui" );
	deepEqual( Stem("ennuyeuses"), "ennui" );
	deepEqual( Stem("ennuyeux"), "ennui" );
	deepEqual( Stem("ennuyez"), "ennui" );
	deepEqual( Stem("énonçait"), "énonc" );
	deepEqual( Stem("énoncé"), "énonc" );
	deepEqual( Stem("énoncer"), "énonc" );
	deepEqual( Stem("enorgueilli"), "enorgueil" );
	deepEqual( Stem("énorme"), "énorm" );
	deepEqual( Stem("énormes"), "énorm" );
	deepEqual( Stem("énormité"), "énorm" );
	deepEqual( Stem("enquérait"), "enquer" );
	deepEqual( Stem("enquête"), "enquêt" );
	deepEqual( Stem("enraciner"), "enracin" );
	deepEqual( Stem("enragé"), "enrag" );
	deepEqual( Stem("enragés"), "enrag" );
	deepEqual( Stem("enrayer"), "enrai" );
	deepEqual( Stem("enrayés"), "enrai" );
	deepEqual( Stem("enrégimentés"), "enrégiment" );
	deepEqual( Stem("enregistrement"), "enregistr" );
	deepEqual( Stem("enregistrer"), "enregistr" );
	deepEqual( Stem("enrhumaient"), "enrhum" );
	deepEqual( Stem("enrhumé"), "enrhum" );
	deepEqual( Stem("enrichi"), "enrich" );
	deepEqual( Stem("enrichir"), "enrich" );
	deepEqual( Stem("enrichis"), "enrich" );
	deepEqual( Stem("enrichissait"), "enrich" );
	deepEqual( Stem("enrichissent"), "enrich" );
	deepEqual( Stem("enrichit"), "enrich" );
	deepEqual( Stem("enrouaient"), "enrou" );
	deepEqual( Stem("enroulait"), "enroul" );
	deepEqual( Stem("enroulant"), "enroul" );
	deepEqual( Stem("ensachés"), "ensach" );
	deepEqual( Stem("ensanglanté"), "ensanglant" );
	deepEqual( Stem("enseignait"), "enseign" );
	deepEqual( Stem("enseigne"), "enseign" );
	deepEqual( Stem("enseigné"), "enseign" );
	deepEqual( Stem("enseignées"), "enseign" );
	deepEqual( Stem("enseignements"), "enseign" );
	deepEqual( Stem("enseignent"), "enseignent" );
	deepEqual( Stem("enseigner"), "enseign" );
	deepEqual( Stem("enseignera"), "enseign" );
	deepEqual( Stem("ensemble"), "ensembl" );
	deepEqual( Stem("enserrer"), "enserr" );
	deepEqual( Stem("ensevelir"), "ensevel" );
	deepEqual( Stem("ensorcela"), "ensorcel" );
	deepEqual( Stem("ensuit"), "ensuit" );
	deepEqual( Stem("ensuite"), "ensuit" );
	deepEqual( Stem("ensuivit"), "ensuiv" );
	deepEqual( Stem("entachés"), "entach" );
	deepEqual( Stem("entama"), "entam" );
	deepEqual( Stem("entame"), "entam" );
	deepEqual( Stem("entamée"), "entam" );
	deepEqual( Stem("entamer"), "entam" );
	deepEqual( Stem("entasse"), "entass" );
	deepEqual( Stem("entassée"), "entass" );
	deepEqual( Stem("entassent"), "entassent" );
	deepEqual( Stem("entend"), "entend" );
	deepEqual( Stem("entendaient"), "entend" );
	deepEqual( Stem("entendais"), "entend" );
	deepEqual( Stem("entendait"), "entend" );
	deepEqual( Stem("entendant"), "entend" );
	deepEqual( Stem("entendent"), "entendent" );
	deepEqual( Stem("entendez"), "entend" );
	deepEqual( Stem("entendirent"), "entend" );
	deepEqual( Stem("entendit"), "entend" );
	deepEqual( Stem("entendît"), "entend" );
	deepEqual( Stem("entendra"), "entendr" );
	deepEqual( Stem("entendrait"), "entendr" );
	deepEqual( Stem("entendre"), "entendr" );
	deepEqual( Stem("entendrez"), "entendr" );
	deepEqual( Stem("entendrons"), "entendron" );
	deepEqual( Stem("entends"), "entend" );
	deepEqual( Stem("entendu"), "entendu" );
	deepEqual( Stem("entendue"), "entendu" );
	deepEqual( Stem("entendus"), "entendus" );
	deepEqual( Stem("enterrer"), "enterr" );
	deepEqual( Stem("enterrez"), "enterr" );
	deepEqual( Stem("entêté"), "entêt" );
	deepEqual( Stem("enthousiasmait"), "enthousiasm" );
	deepEqual( Stem("enthousiasme"), "enthousiasm" );
	deepEqual( Stem("enthousiasmé"), "enthousiasm" );
	deepEqual( Stem("enthousiasmées"), "enthousiasm" );
	deepEqual( Stem("enthousiaste"), "enthousiast" );
	deepEqual( Stem("enthousiastes"), "enthousiast" );
	deepEqual( Stem("entiché"), "entich" );
	deepEqual( Stem("entier"), "enti" );
	deepEqual( Stem("entière"), "entier" );
	deepEqual( Stem("entièrement"), "entier" );
	deepEqual( Stem("entières"), "entier" );
	deepEqual( Stem("entiers"), "entier" );
	deepEqual( Stem("entomologique"), "entomolog" );
	deepEqual( Stem("entonnant"), "enton" );
	deepEqual( Stem("entonné"), "enton" );
	deepEqual( Stem("entonner"), "enton" );
	deepEqual( Stem("entortiller"), "entortill" );
	deepEqual( Stem("entortillés"), "entortill" );
	deepEqual( Stem("entour"), "entour" );
	deepEqual( Stem("entoura"), "entour" );
	deepEqual( Stem("entouraient"), "entour" );
	deepEqual( Stem("entourait"), "entour" );
	deepEqual( Stem("entoure"), "entour" );
	deepEqual( Stem("entouré"), "entour" );
	deepEqual( Stem("entourée"), "entour" );
	deepEqual( Stem("entourées"), "entour" );
	deepEqual( Stem("entourent"), "entourent" );
	deepEqual( Stem("entourés"), "entour" );
	deepEqual( Stem("entra"), "entra" );
	deepEqual( Stem("entrai"), "entrai" );
	deepEqual( Stem("entraient"), "entraient" );
	deepEqual( Stem("entrailles"), "entraill" );
	deepEqual( Stem("entraîna"), "entraîn" );
	deepEqual( Stem("entraînait"), "entraîn" );
	deepEqual( Stem("entraînant"), "entraîn" );
	deepEqual( Stem("entraîne"), "entraîn" );
	deepEqual( Stem("entraîné"), "entraîn" );
	deepEqual( Stem("entraînée"), "entraîn" );
	deepEqual( Stem("entraînement"), "entraîn" );
	deepEqual( Stem("entraîner"), "entraîn" );
	deepEqual( Stem("entraînera"), "entraîn" );
	deepEqual( Stem("entraînés"), "entraîn" );
	deepEqual( Stem("entrait"), "entrait" );
	deepEqual( Stem("entrant"), "entrant" );
	deepEqual( Stem("entraves"), "entrav" );
	deepEqual( Stem("entre"), "entre" );
	deepEqual( Stem("entré"), "entré" );
	deepEqual( Stem("entrecoupée"), "entrecoup" );
	deepEqual( Stem("entrecoupées"), "entrecoup" );
	deepEqual( Stem("entrée"), "entré" );
	deepEqual( Stem("entrées"), "entré" );
	deepEqual( Stem("entrefaites"), "entrefait" );
	deepEqual( Stem("entrelacement"), "entrelac" );
	deepEqual( Stem("entremêlées"), "entremêl" );
	deepEqual( Stem("entremêlés"), "entremêl" );
	deepEqual( Stem("entremets"), "entremet" );
	deepEqual( Stem("entremettre"), "entremettr" );
	deepEqual( Stem("entremise"), "entremis" );
	deepEqual( Stem("entrent"), "entrent" );
	deepEqual( Stem("entrepôts"), "entrepôt" );
	deepEqual( Stem("entreprenait"), "entrepren" );
	deepEqual( Stem("entreprenant"), "entrepren" );
	deepEqual( Stem("entreprend"), "entreprend" );
	deepEqual( Stem("entreprendre"), "entreprendr" );
	deepEqual( Stem("entrepreneur"), "entrepreneur" );
	deepEqual( Stem("entrepris"), "entrepr" );
	deepEqual( Stem("entreprise"), "entrepris" );
	deepEqual( Stem("entreprises"), "entrepris" );
	deepEqual( Stem("entreprit"), "entrepr" );
	deepEqual( Stem("entrer"), "entrer" );
	deepEqual( Stem("entreraient"), "entrer" );
	deepEqual( Stem("entreras"), "entrer" );
	deepEqual( Stem("entrèrent"), "entrèrent" );
	deepEqual( Stem("entrés"), "entré" );
	deepEqual( Stem("entresol"), "entresol" );
	deepEqual( Stem("entretenait"), "entreten" );
	deepEqual( Stem("entretenir"), "entreten" );
	deepEqual( Stem("entretenu"), "entretenu" );
	deepEqual( Stem("entretenus"), "entretenus" );
	deepEqual( Stem("entretien"), "entretien" );
	deepEqual( Stem("entretiens"), "entretien" );
	deepEqual( Stem("entretient"), "entretient" );
	deepEqual( Stem("entretinrent"), "entretinrent" );
	deepEqual( Stem("entretint"), "entretint" );
	deepEqual( Stem("entrevit"), "entrev" );
	deepEqual( Stem("entrevoir"), "entrevoir" );
	deepEqual( Stem("entrevois"), "entrevois" );
	deepEqual( Stem("entrevoit"), "entrevoit" );
	deepEqual( Stem("entrevoyaient"), "entrevoi" );
	deepEqual( Stem("entrevoyait"), "entrevoi" );
	deepEqual( Stem("entrevoyant"), "entrevoi" );
	deepEqual( Stem("entrevu"), "entrevu" );
	deepEqual( Stem("entrevue"), "entrevu" );
	deepEqual( Stem("entrevues"), "entrevu" );
	deepEqual( Stem("entrez"), "entrez" );
	deepEqual( Stem("entrons"), "entron" );
	deepEqual( Stem("entrouverte"), "entrouvert" );
	deepEqual( Stem("entrouvrant"), "entrouvr" );
	deepEqual( Stem("énumération"), "énumer" );
	deepEqual( Stem("envahi"), "envah" );
	deepEqual( Stem("envahie"), "envah" );
	deepEqual( Stem("envahir"), "envah" );
	deepEqual( Stem("envahissaient"), "envah" );
	deepEqual( Stem("envahit"), "envah" );
	deepEqual( Stem("enveloppaient"), "envelopp" );
	deepEqual( Stem("enveloppait"), "envelopp" );
	deepEqual( Stem("enveloppe"), "envelopp" );
	deepEqual( Stem("enveloppé"), "envelopp" );
	deepEqual( Stem("enveloppée"), "envelopp" );
	deepEqual( Stem("envelopper"), "envelopp" );
	deepEqual( Stem("enveloppes"), "envelopp" );
	deepEqual( Stem("envenimée"), "envenim" );
	deepEqual( Stem("enverguait"), "envergu" );
	deepEqual( Stem("envergure"), "envergur" );
	deepEqual( Stem("enverra"), "enverr" );
	deepEqual( Stem("enverrai"), "enverr" );
	deepEqual( Stem("enverrais"), "enverr" );
	deepEqual( Stem("enverras"), "enverr" );
	deepEqual( Stem("enverrez"), "enverr" );
	deepEqual( Stem("envers"), "enver" );
	deepEqual( Stem("envi"), "envi" );
	deepEqual( Stem("enviable"), "enviabl" );
	deepEqual( Stem("enviait"), "envi" );
	deepEqual( Stem("enviant"), "envi" );
	deepEqual( Stem("envie"), "envi" );
	deepEqual( Stem("envié"), "envi" );
	deepEqual( Stem("enviée"), "envi" );
	deepEqual( Stem("envieux"), "envieux" );
	deepEqual( Stem("environ"), "environ" );
	deepEqual( Stem("environnaient"), "environ" );
	deepEqual( Stem("environnait"), "environ" );
	deepEqual( Stem("environnantes"), "environ" );
	deepEqual( Stem("environne"), "environ" );
	deepEqual( Stem("environné"), "environ" );
	deepEqual( Stem("environnée"), "environ" );
	deepEqual( Stem("environnent"), "environnent" );
	deepEqual( Stem("environner"), "environ" );
	deepEqual( Stem("environnés"), "environ" );
	deepEqual( Stem("environs"), "environ" );
	deepEqual( Stem("envisageons"), "envisageon" );
	deepEqual( Stem("envisager"), "envisag" );
	deepEqual( Stem("envisagez"), "envisag" );
	deepEqual( Stem("envoi"), "envoi" );
	deepEqual( Stem("envoie"), "envoi" );
	deepEqual( Stem("envola"), "envol" );
	deepEqual( Stem("envolant"), "envol" );
	deepEqual( Stem("envole"), "envol" );
	deepEqual( Stem("envolées"), "envol" );
	deepEqual( Stem("envoler"), "envol" );
	deepEqual( Stem("envolés"), "envol" );
	deepEqual( Stem("envoya"), "envoi" );
	deepEqual( Stem("envoyaient"), "envoi" );
	deepEqual( Stem("envoyait"), "envoi" );
	deepEqual( Stem("envoyant"), "envoi" );
	deepEqual( Stem("envoyât"), "envoi" );
	deepEqual( Stem("envoyâtes"), "envoi" );
	deepEqual( Stem("envoyé"), "envoi" );
	deepEqual( Stem("envoyée"), "envoi" );
	deepEqual( Stem("envoyées"), "envoi" );
	deepEqual( Stem("envoyer"), "envoi" );
	deepEqual( Stem("envoyés"), "envoi" );
	deepEqual( Stem("envoyez"), "envoi" );
	deepEqual( Stem("éolienne"), "éolien" );
	deepEqual( Stem("épagneul"), "épagneul" );
	deepEqual( Stem("épais"), "épais" );
	deepEqual( Stem("épaisse"), "épaiss" );
	deepEqual( Stem("épaisseur"), "épaisseur" );
	deepEqual( Stem("épanchement"), "épanch" );
	deepEqual( Stem("épanouir"), "épanou" );
	deepEqual( Stem("épanouissaient"), "épanou" );
	deepEqual( Stem("épanouissait"), "épanou" );
	deepEqual( Stem("épanouissement"), "épanou" );
	deepEqual( Stem("épanouit"), "épanou" );
	deepEqual( Stem("épargna"), "épargn" );
	deepEqual( Stem("épargnait"), "épargn" );
	deepEqual( Stem("épargne"), "épargn" );
	deepEqual( Stem("épargné"), "épargn" );
	deepEqual( Stem("épargnée"), "épargn" );
	deepEqual( Stem("épargner"), "épargn" );
	deepEqual( Stem("épargnera"), "épargn" );
	deepEqual( Stem("épargnerait"), "épargn" );
	deepEqual( Stem("épargnez"), "épargn" );
	deepEqual( Stem("épargniez"), "épargn" );
	deepEqual( Stem("éparses"), "épars" );
	deepEqual( Stem("éparvérés"), "éparver" );
	deepEqual( Stem("épaule"), "épaul" );
	deepEqual( Stem("épaules"), "épaul" );
	deepEqual( Stem("épaulés"), "épaul" );
	deepEqual( Stem("épaulettes"), "épaulet" );
	deepEqual( Stem("épée"), "épé" );
	deepEqual( Stem("épées"), "épé" );
	deepEqual( Stem("éperdu"), "éperdu" );
	deepEqual( Stem("éperdue"), "éperdu" );
	deepEqual( Stem("éperdument"), "éperdu" );
	deepEqual( Stem("éperon"), "éperon" );
	deepEqual( Stem("éperons"), "éperon" );
	deepEqual( Stem("épervier"), "épervi" );
	deepEqual( Stem("éperviers"), "épervi" );
	deepEqual( Stem("éphémère"), "éphémer" );
	deepEqual( Stem("épia"), "épi" );
	deepEqual( Stem("épiait"), "épi" );
	deepEqual( Stem("épicée"), "épic" );
	deepEqual( Stem("épiciers"), "épici" );
	deepEqual( Stem("épiderme"), "épiderm" );
	deepEqual( Stem("épie"), "épi" );
	deepEqual( Stem("épient"), "épient" );
	deepEqual( Stem("épier"), "épi" );
	deepEqual( Stem("épigrammatique"), "épigrammat" );
	deepEqual( Stem("épigramme"), "épigramm" );
	deepEqual( Stem("épigrammes"), "épigramm" );
	deepEqual( Stem("épine"), "épin" );
	deepEqual( Stem("épines"), "épin" );
	deepEqual( Stem("épineuses"), "épin" );
	deepEqual( Stem("épingle"), "épingl" );
	deepEqual( Stem("épingles"), "épingl" );
	deepEqual( Stem("épique"), "épiqu" );
	deepEqual( Stem("épis"), "épis" );
	deepEqual( Stem("épiscopal"), "épiscopal" );
	deepEqual( Stem("épiscopat"), "épiscopat" );
	deepEqual( Stem("épisode"), "épisod" );
	deepEqual( Stem("épitaphe"), "épitaph" );
	deepEqual( Stem("épithète"), "épithet" );
	deepEqual( Stem("épître"), "épîtr" );
	deepEqual( Stem("époque"), "époqu" );
	deepEqual( Stem("époques"), "époqu" );
	deepEqual( Stem("épousa"), "épous" );
	deepEqual( Stem("épousait"), "épous" );
	deepEqual( Stem("épousant"), "épous" );
	deepEqual( Stem("épouse"), "épous" );
	deepEqual( Stem("épousé"), "épous" );
	deepEqual( Stem("épousée"), "épous" );
	deepEqual( Stem("épousées"), "épous" );
	deepEqual( Stem("épouser"), "épous" );
	deepEqual( Stem("épousera"), "épous" );
	deepEqual( Stem("épouserai"), "épous" );
	deepEqual( Stem("épouserez"), "épous" );
	deepEqual( Stem("épouseur"), "épouseur" );
	deepEqual( Stem("épousez"), "épous" );
	deepEqual( Stem("épousseter"), "épousset" );
	deepEqual( Stem("épouvantable"), "épouvant" );
	deepEqual( Stem("épouvantablement"), "épouvant" );
	deepEqual( Stem("épouvantables"), "épouvant" );
	deepEqual( Stem("épouvantaient"), "épouvant" );
	deepEqual( Stem("épouvante"), "épouv" );
	deepEqual( Stem("épouvantée"), "épouvant" );
	deepEqual( Stem("épouvantements"), "épouvant" );
	deepEqual( Stem("époux"), "époux" );
	deepEqual( Stem("épreuve"), "épreuv" );
	deepEqual( Stem("épreuves"), "épreuv" );
	deepEqual( Stem("épris"), "épris" );
	deepEqual( Stem("éprise"), "épris" );
	deepEqual( Stem("éprouva"), "éprouv" );
	deepEqual( Stem("éprouvai"), "éprouv" );
	deepEqual( Stem("éprouvait"), "éprouv" );
	deepEqual( Stem("éprouvant"), "éprouv" );
	deepEqual( Stem("éprouve"), "éprouv" );
	deepEqual( Stem("éprouvé"), "éprouv" );
	deepEqual( Stem("éprouvée"), "éprouv" );
	deepEqual( Stem("éprouvées"), "éprouv" );
	deepEqual( Stem("éprouvent"), "éprouvent" );
	deepEqual( Stem("éprouver"), "éprouv" );
	deepEqual( Stem("éprouverais"), "éprouv" );
	deepEqual( Stem("éprouverait"), "éprouv" );
	deepEqual( Stem("éprouvés"), "éprouv" );
	deepEqual( Stem("épuisait"), "épuis" );
	deepEqual( Stem("épuisé"), "épuis" );
	deepEqual( Stem("épuisée"), "épuis" );
	deepEqual( Stem("épuisement"), "épuis" );
	deepEqual( Stem("épuisèrent"), "épuis" );
	deepEqual( Stem("équarrir"), "équarr" );
	deepEqual( Stem("équarrissaient"), "équarr" );
	deepEqual( Stem("équilibre"), "équilibr" );
	deepEqual( Stem("équilibré"), "équilibr" );
	deepEqual( Stem("équilibristes"), "équilibr" );
	deepEqual( Stem("equinoctial"), "equinoctial" );
	deepEqual( Stem("équinoxe"), "équinox" );
	deepEqual( Stem("équinoxes"), "équinox" );
	deepEqual( Stem("équipage"), "équipag" );
	deepEqual( Stem("équipé"), "équip" );
	deepEqual( Stem("équipée"), "équip" );
	deepEqual( Stem("équité"), "équit" );
	deepEqual( Stem("équivalait"), "équival" );
	deepEqual( Stem("équivoques"), "équivoqu" );
	deepEqual( Stem("equus"), "equus" );
	deepEqual( Stem("er"), "er" );
	deepEqual( Stem("éreinté"), "éreint" );
	deepEqual( Stem("ériger"), "érig" );
	deepEqual( Stem("erit"), "erit" );
	deepEqual( Stem("ermitages"), "ermitag" );
	deepEqual( Stem("ernest"), "ernest" );
	deepEqual( Stem("erra"), "erra" );
	deepEqual( Stem("erraient"), "erraient" );
	deepEqual( Stem("errait"), "errait" );
	deepEqual( Stem("errant"), "errant" );
	deepEqual( Stem("errante"), "errant" );
	deepEqual( Stem("erré"), "erré" );
	deepEqual( Stem("errer"), "errer" );
	deepEqual( Stem("erreur"), "erreur" );
	deepEqual( Stem("erreurs"), "erreur" );
	deepEqual( Stem("es"), "e" );
	deepEqual( Stem("escadron"), "escadron" );
	deepEqual( Stem("escaladé"), "escalad" );
	deepEqual( Stem("escalader"), "escalad" );
	deepEqual( Stem("escale"), "escal" );
	deepEqual( Stem("escalier"), "escali" );
	deepEqual( Stem("escaliers"), "escali" );
	deepEqual( Stem("escamotée"), "escamot" );
	deepEqual( Stem("escamoter"), "escamot" );
	deepEqual( Stem("escapade"), "escapad" );
	deepEqual( Stem("escarpés"), "escarp" );
	deepEqual( Stem("escarpins"), "escarpin" );
	deepEqual( Stem("escaut"), "escaut" );
	deepEqual( Stem("esclandre"), "esclandr" );
	deepEqual( Stem("esclave"), "esclav" );
	deepEqual( Stem("esclaves"), "esclav" );
	deepEqual( Stem("escofié"), "escofi" );
	deepEqual( Stem("escogriffe"), "escogriff" );
	deepEqual( Stem("escortaient"), "escort" );
	deepEqual( Stem("escorte"), "escort" );
	deepEqual( Stem("escorté"), "escort" );
	deepEqual( Stem("escortée"), "escort" );
	deepEqual( Stem("escouade"), "escouad" );
	deepEqual( Stem("escrime"), "escrim" );
	deepEqual( Stem("escrit"), "escrit" );
	deepEqual( Stem("espace"), "espac" );
	deepEqual( Stem("espaces"), "espac" );
	deepEqual( Stem("espagne"), "espagn" );
	deepEqual( Stem("espagnol"), "espagnol" );
	deepEqual( Stem("espagnole"), "espagnol" );
	deepEqual( Stem("espagnoles"), "espagnol" );
	deepEqual( Stem("espagnolette"), "espagnolet" );
	deepEqual( Stem("espagnols"), "espagnol" );
	deepEqual( Stem("esparres"), "esparr" );
	deepEqual( Stem("espèce"), "espec" );
	deepEqual( Stem("espèces"), "espec" );
	deepEqual( Stem("espéra"), "esper" );
	deepEqual( Stem("espérais"), "esper" );
	deepEqual( Stem("espérait"), "esper" );
	deepEqual( Stem("espérance"), "esper" );
	deepEqual( Stem("espérances"), "esper" );
	deepEqual( Stem("espérant"), "esper" );
	deepEqual( Stem("espère"), "esper" );
	deepEqual( Stem("espéré"), "esper" );
	deepEqual( Stem("espérée"), "esper" );
	deepEqual( Stem("espérer"), "esper" );
	deepEqual( Stem("espères"), "esper" );
	deepEqual( Stem("espérez"), "esper" );
	deepEqual( Stem("espérons"), "espéron" );
	deepEqual( Stem("espiègle"), "espiegl" );
	deepEqual( Stem("espion"), "espion" );
	deepEqual( Stem("espionnage"), "espionnag" );
	deepEqual( Stem("espionné"), "espion" );
	deepEqual( Stem("espionnes"), "espion" );
	deepEqual( Stem("espions"), "espion" );
	deepEqual( Stem("esplanade"), "esplanad" );
	deepEqual( Stem("espoir"), "espoir" );
	deepEqual( Stem("esprit"), "esprit" );
	deepEqual( Stem("esprits"), "esprit" );
	deepEqual( Stem("esq"), "esq" );
	deepEqual( Stem("esquire"), "esquir" );
	deepEqual( Stem("esquisse"), "esquiss" );
	deepEqual( Stem("esquisser"), "esquiss" );
	deepEqual( Stem("esquiva"), "esquiv" );
	deepEqual( Stem("esquiveras"), "esquiv" );
	deepEqual( Stem("essai"), "essai" );
	deepEqual( Stem("essaiera"), "essai" );
	deepEqual( Stem("essaierai"), "essai" );
	deepEqual( Stem("essaierait"), "essai" );
	deepEqual( Stem("essais"), "essais" );
	deepEqual( Stem("essaya"), "essai" );
	deepEqual( Stem("essayaient"), "essai" );
	deepEqual( Stem("essayait"), "essai" );
	deepEqual( Stem("essayant"), "essai" );
	deepEqual( Stem("essaye"), "essay" );
	deepEqual( Stem("essayé"), "essai" );
	deepEqual( Stem("essayées"), "essai" );
	deepEqual( Stem("essayer"), "essai" );
	deepEqual( Stem("essayons"), "essayon" );
	deepEqual( Stem("essence"), "essenc" );
	deepEqual( Stem("essences"), "essenc" );
	deepEqual( Stem("essentiel"), "essentiel" );
	deepEqual( Stem("essentielle"), "essentiel" );
	deepEqual( Stem("essentiellement"), "essentiel" );
	deepEqual( Stem("essieux"), "essieux" );
	deepEqual( Stem("essoufflé"), "essouffl" );
	deepEqual( Stem("essoufflée"), "essouffl" );
	deepEqual( Stem("essuie"), "essui" );
	deepEqual( Stem("essuyait"), "essui" );
	deepEqual( Stem("essuyé"), "essui" );
	deepEqual( Stem("essuyer"), "essui" );
	deepEqual( Stem("est"), "est" );
	deepEqual( Stem("estafette"), "estafet" );
	deepEqual( Stem("estafier"), "estafi" );
	deepEqual( Stem("estafiers"), "estafi" );
	deepEqual( Stem("estampe"), "estamp" );
	deepEqual( Stem("estampes"), "estamp" );
	deepEqual( Stem("estimable"), "estim" );
	deepEqual( Stem("estimables"), "estim" );
	deepEqual( Stem("estimaient"), "estim" );
	deepEqual( Stem("estimait"), "estim" );
	deepEqual( Stem("estimant"), "estim" );
	deepEqual( Stem("estime"), "estim" );
	deepEqual( Stem("estimé"), "estim" );
	deepEqual( Stem("estimée"), "estim" );
	deepEqual( Stem("estimer"), "estim" );
	deepEqual( Stem("estimeraient"), "estim" );
	deepEqual( Stem("estimez"), "estim" );
	deepEqual( Stem("estomac"), "estomac" );
	deepEqual( Stem("estomacs"), "estomac" );
	deepEqual( Stem("et"), "et" );
	deepEqual( Stem("établi"), "établ" );
	deepEqual( Stem("établie"), "établ" );
	deepEqual( Stem("établies"), "établ" );
	deepEqual( Stem("établir"), "établ" );
	deepEqual( Stem("établira"), "établ" );
	deepEqual( Stem("établirent"), "établ" );
	deepEqual( Stem("établirez"), "établ" );
	deepEqual( Stem("établis"), "établ" );
	deepEqual( Stem("établissaient"), "établ" );
	deepEqual( Stem("établissait"), "établ" );
	deepEqual( Stem("établissant"), "établ" );
	deepEqual( Stem("établissement"), "établ" );
	deepEqual( Stem("établissements"), "établ" );
	deepEqual( Stem("établit"), "établ" );
	deepEqual( Stem("étage"), "étag" );
	deepEqual( Stem("étagea"), "étag" );
	deepEqual( Stem("étageaient"), "étag" );
	deepEqual( Stem("étages"), "étag" );
	deepEqual( Stem("étai"), "étai" );
	deepEqual( Stem("étaie"), "étai" );
	deepEqual( Stem("etaient"), "etaient" );
	deepEqual( Stem("étaient"), "étaient" );
	deepEqual( Stem("étain"), "étain" );
	deepEqual( Stem("étais"), "étais" );
	deepEqual( Stem("etait"), "etait" );
	deepEqual( Stem("était"), "était" );
	deepEqual( Stem("étalage"), "étalag" );
	deepEqual( Stem("étalages"), "étalag" );
	deepEqual( Stem("étalait"), "étal" );
	deepEqual( Stem("étalant"), "étal" );
	deepEqual( Stem("étale"), "étal" );
	deepEqual( Stem("étalé"), "étal" );
	deepEqual( Stem("étalée"), "étal" );
	deepEqual( Stem("étaler"), "étal" );
	deepEqual( Stem("étalés"), "étal" );
	deepEqual( Stem("étancher"), "étanch" );
	deepEqual( Stem("étang"), "étang" );
	deepEqual( Stem("étangs"), "étang" );
	deepEqual( Stem("etant"), "etant" );
	deepEqual( Stem("étant"), "étant" );
	deepEqual( Stem("étarquée"), "étarqu" );
	deepEqual( Stem("etat"), "etat" );
	deepEqual( Stem("état"), "état" );
	deepEqual( Stem("etats"), "etat" );
	deepEqual( Stem("états"), "état" );
	deepEqual( Stem("étaux"), "étal" );
	deepEqual( Stem("étayé"), "étai" );
	deepEqual( Stem("etc"), "etc" );
	deepEqual( Stem("été"), "été" );
	deepEqual( Stem("éteignaient"), "éteign" );
	deepEqual( Stem("éteignait"), "éteign" );
	deepEqual( Stem("éteignirent"), "éteign" );
	deepEqual( Stem("éteignit"), "éteign" );
	deepEqual( Stem("éteindra"), "éteindr" );
	deepEqual( Stem("éteindre"), "éteindr" );
	deepEqual( Stem("éteindrons"), "éteindron" );
	deepEqual( Stem("éteint"), "éteint" );
	deepEqual( Stem("éteinte"), "éteint" );
	deepEqual( Stem("éteints"), "éteint" );
	deepEqual( Stem("étend"), "étend" );
	deepEqual( Stem("étendaient"), "étend" );
	deepEqual( Stem("étendait"), "étend" );
	deepEqual( Stem("étendant"), "étend" );
	deepEqual( Stem("étendent"), "étendent" );
	deepEqual( Stem("étendirent"), "étend" );
	deepEqual( Stem("étendit"), "étend" );
	deepEqual( Stem("étendre"), "étendr" );
	deepEqual( Stem("étendu"), "étendu" );
	deepEqual( Stem("étendue"), "étendu" );
	deepEqual( Stem("étendues"), "étendu" );
	deepEqual( Stem("étendus"), "étendus" );
	deepEqual( Stem("éternel"), "éternel" );
	deepEqual( Stem("éternelle"), "éternel" );
	deepEqual( Stem("éternelles"), "éternel" );
	deepEqual( Stem("éternels"), "éternel" );
	deepEqual( Stem("éternité"), "étern" );
	deepEqual( Stem("êtes"), "ête" );
	deepEqual( Stem("ethnographiques"), "ethnograph" );
	deepEqual( Stem("étienne"), "étien" );
	deepEqual( Stem("étiez"), "éti" );
	deepEqual( Stem("étincelante"), "étincel" );
	deepEqual( Stem("étincelants"), "étincel" );
	deepEqual( Stem("étincelle"), "étincel" );
	deepEqual( Stem("étincelles"), "étincel" );
	deepEqual( Stem("étiole"), "étiol" );
	deepEqual( Stem("étiolés"), "étiol" );
	deepEqual( Stem("étions"), "étion" );
	deepEqual( Stem("étiquette"), "étiquet" );
	deepEqual( Stem("étoffe"), "étoff" );
	deepEqual( Stem("étoffes"), "étoff" );
	deepEqual( Stem("étoile"), "étoil" );
	deepEqual( Stem("étoilé"), "étoil" );
	deepEqual( Stem("étoiles"), "étoil" );
	deepEqual( Stem("étonna"), "éton" );
	deepEqual( Stem("étonnaient"), "éton" );
	deepEqual( Stem("étonnait"), "éton" );
	deepEqual( Stem("étonnant"), "éton" );
	deepEqual( Stem("étonnante"), "éton" );
	deepEqual( Stem("étonnantes"), "éton" );
	deepEqual( Stem("étonnants"), "éton" );
	deepEqual( Stem("étonne"), "éton" );
	deepEqual( Stem("étonné"), "éton" );
	deepEqual( Stem("étonnée"), "éton" );
	deepEqual( Stem("étonnées"), "éton" );
	deepEqual( Stem("étonnement"), "éton" );
	deepEqual( Stem("étonnent"), "étonnent" );
	deepEqual( Stem("étonner"), "éton" );
	deepEqual( Stem("étonnera"), "éton" );
	deepEqual( Stem("étonnerait"), "éton" );
	deepEqual( Stem("étonnèrent"), "éton" );
	deepEqual( Stem("étonnés"), "éton" );
	deepEqual( Stem("étouffaient"), "étouff" );
	deepEqual( Stem("étouffait"), "étouff" );
	deepEqual( Stem("étouffe"), "étouff" );
	deepEqual( Stem("étouffé"), "étouff" );
	deepEqual( Stem("étouffée"), "étouff" );
	deepEqual( Stem("étouffer"), "étouff" );
	deepEqual( Stem("étourderie"), "étourder" );
	deepEqual( Stem("étourderies"), "étourder" );
	deepEqual( Stem("étourdi"), "étourd" );
	deepEqual( Stem("étourdie"), "étourd" );
	deepEqual( Stem("étourdiment"), "étourd" );
	deepEqual( Stem("étourdir"), "étourd" );
	deepEqual( Stem("étourdissait"), "étourd" );
	deepEqual( Stem("étourdissement"), "étourd" );
	deepEqual( Stem("étourdit"), "étourd" );
	deepEqual( Stem("étrange"), "étrang" );
	deepEqual( Stem("étrangement"), "étrang" );
	deepEqual( Stem("étranger"), "étrang" );
	deepEqual( Stem("étrangère"), "étranger" );
	deepEqual( Stem("étrangères"), "étranger" );
	deepEqual( Stem("étrangers"), "étranger" );
	deepEqual( Stem("étranges"), "étrang" );
	deepEqual( Stem("étrangeté"), "étranget" );
	deepEqual( Stem("étranglaient"), "étrangl" );
	deepEqual( Stem("étrangler"), "étrangl" );
	deepEqual( Stem("etrangleurs"), "etrangleur" );
	deepEqual( Stem("étrave"), "étrav" );
	deepEqual( Stem("etre"), "etre" );
	deepEqual( Stem("être"), "être" );
	deepEqual( Stem("étreignit"), "étreign" );
	deepEqual( Stem("étreinte"), "étreint" );
	deepEqual( Stem("êtres"), "être" );
	deepEqual( Stem("étrier"), "étri" );
	deepEqual( Stem("étriers"), "étrier" );
	deepEqual( Stem("étrille"), "étrill" );
	deepEqual( Stem("étroit"), "étroit" );
	deepEqual( Stem("étroite"), "étroit" );
	deepEqual( Stem("étroitement"), "étroit" );
	deepEqual( Stem("étroites"), "étroit" );
	deepEqual( Stem("étroits"), "étroit" );
	deepEqual( Stem("étude"), "étud" );
	deepEqual( Stem("études"), "étud" );
	deepEqual( Stem("étudia"), "étudi" );
	deepEqual( Stem("étudiait"), "étudi" );
	deepEqual( Stem("étudiant"), "étudi" );
	deepEqual( Stem("étudie"), "étud" );
	deepEqual( Stem("étudié"), "étudi" );
	deepEqual( Stem("étudiée"), "étudi" );
	deepEqual( Stem("étudier"), "étudi" );
	deepEqual( Stem("étudierai"), "étudi" );
	deepEqual( Stem("étudiez"), "étud" );
	deepEqual( Stem("étui"), "étui" );
	deepEqual( Stem("étuis"), "étuis" );
	deepEqual( Stem("eu"), "eu" );
	deepEqual( Stem("eue"), "eue" );
	deepEqual( Stem("eues"), "eue" );
	deepEqual( Stem("eugène"), "eugen" );
	deepEqual( Stem("eunuque"), "eunuqu" );
	deepEqual( Stem("euphorbes"), "euphorb" );
	deepEqual( Stem("eurent"), "eurent" );
	deepEqual( Stem("europe"), "europ" );
	deepEqual( Stem("européen"), "européen" );
	deepEqual( Stem("européenne"), "européen" );
	deepEqual( Stem("européennes"), "européen" );
	deepEqual( Stem("européens"), "européen" );
	deepEqual( Stem("eus"), "eus" );
	deepEqual( Stem("eusse"), "euss" );
	deepEqual( Stem("eussent"), "eussent" );
	deepEqual( Stem("eussiez"), "euss" );
	deepEqual( Stem("eut"), "eut" );
	deepEqual( Stem("eût"), "eût" );
	deepEqual( Stem("eux"), "eux" );
	deepEqual( Stem("évacuer"), "évacu" );
	deepEqual( Stem("évader"), "évad" );
	deepEqual( Stem("évaluait"), "évalu" );
	deepEqual( Stem("évangélique"), "évangel" );
	deepEqual( Stem("évangile"), "évangil" );
	deepEqual( Stem("évanoui"), "évanou" );
	deepEqual( Stem("évanouie"), "évanou" );
	deepEqual( Stem("évanouir"), "évanou" );
	deepEqual( Stem("évanouirent"), "évanou" );
	deepEqual( Stem("évanouis"), "évanou" );
	deepEqual( Stem("évanouissait"), "évanou" );
	deepEqual( Stem("évanouissement"), "évanou" );
	deepEqual( Stem("évanouit"), "évanou" );
	deepEqual( Stem("evans"), "evan" );
	deepEqual( Stem("évaporatoire"), "évaporatoir" );
	deepEqual( Stem("évasion"), "évas" );
	deepEqual( Stem("évêché"), "évêch" );
	deepEqual( Stem("éveil"), "éveil" );
	deepEqual( Stem("éveilla"), "éveil" );
	deepEqual( Stem("éveillant"), "éveil" );
	deepEqual( Stem("éveillé"), "éveil" );
	deepEqual( Stem("éveillée"), "éveil" );
	deepEqual( Stem("éveillées"), "éveil" );
	deepEqual( Stem("éveiller"), "éveil" );
	deepEqual( Stem("éveillera"), "éveil" );
	deepEqual( Stem("éveillés"), "éveil" );
	deepEqual( Stem("even"), "even" );
	deepEqual( Stem("événement"), "éven" );
	deepEqual( Stem("événements"), "éven" );
	deepEqual( Stem("evening"), "evening" );
	deepEqual( Stem("éventail"), "éventail" );
	deepEqual( Stem("éventée"), "évent" );
	deepEqual( Stem("éventualité"), "éventual" );
	deepEqual( Stem("éventualités"), "éventual" );
	deepEqual( Stem("évêque"), "évêqu" );
	deepEqual( Stem("évêques"), "évêqu" );
	deepEqual( Stem("évidaient"), "évid" );
	deepEqual( Stem("evidemment"), "evident" );
	deepEqual( Stem("évidemment"), "évident" );
	deepEqual( Stem("évidence"), "évident" );
	deepEqual( Stem("évident"), "évident" );
	deepEqual( Stem("évidente"), "évident" );
	deepEqual( Stem("évidentes"), "évident" );
	deepEqual( Stem("évidents"), "évident" );
	deepEqual( Stem("évita"), "évit" );
	deepEqual( Stem("évitait"), "évit" );
	deepEqual( Stem("évitant"), "évit" );
	deepEqual( Stem("évité"), "évit" );
	deepEqual( Stem("éviter"), "évit" );
	deepEqual( Stem("évitèrent"), "évit" );
	deepEqual( Stem("évitons"), "éviton" );
	deepEqual( Stem("ex"), "ex" );
	deepEqual( Stem("exact"), "exact" );
	deepEqual( Stem("exacte"), "exact" );
	deepEqual( Stem("exactement"), "exact" );
	deepEqual( Stem("exactes"), "exact" );
	deepEqual( Stem("exactitude"), "exactitud" );
	deepEqual( Stem("exacts"), "exact" );
	deepEqual( Stem("exagéra"), "exager" );
	deepEqual( Stem("exagérait"), "exager" );
	deepEqual( Stem("exagérant"), "exager" );
	deepEqual( Stem("exagération"), "exager" );
	deepEqual( Stem("exagérations"), "exager" );
	deepEqual( Stem("exagère"), "exager" );
	deepEqual( Stem("exagéré"), "exager" );
	deepEqual( Stem("exagérée"), "exager" );
	deepEqual( Stem("exagérées"), "exager" );
	deepEqual( Stem("exagèrent"), "exag" );
	deepEqual( Stem("exagérer"), "exager" );
	deepEqual( Stem("exagérés"), "exager" );
	deepEqual( Stem("exalta"), "exalt" );
	deepEqual( Stem("exaltait"), "exalt" );
	deepEqual( Stem("exaltation"), "exalt" );
	deepEqual( Stem("exalte"), "exalt" );
	deepEqual( Stem("exalté"), "exalt" );
	deepEqual( Stem("exaltée"), "exalt" );
	deepEqual( Stem("exaltées"), "exalt" );
	deepEqual( Stem("exalter"), "exalt" );
	deepEqual( Stem("examen"), "examen" );
	deepEqual( Stem("examens"), "examen" );
	deepEqual( Stem("examina"), "examin" );
	deepEqual( Stem("examinait"), "examin" );
	deepEqual( Stem("examinant"), "examin" );
	deepEqual( Stem("examinateur"), "examin" );
	deepEqual( Stem("examinateurs"), "examin" );
	deepEqual( Stem("examine"), "examin" );
	deepEqual( Stem("examiné"), "examin" );
	deepEqual( Stem("examinée"), "examin" );
	deepEqual( Stem("examiner"), "examin" );
	deepEqual( Stem("examinez"), "examin" );
	deepEqual( Stem("exaspérait"), "exasper" );
	deepEqual( Stem("exaspéré"), "exasper" );
	deepEqual( Stem("exaspérée"), "exasper" );
	deepEqual( Stem("exaspérer"), "exasper" );
	deepEqual( Stem("excédé"), "exced" );
	deepEqual( Stem("excédée"), "exced" );
	deepEqual( Stem("excéder"), "exced" );
	deepEqual( Stem("excellence"), "excellent" );
	deepEqual( Stem("excellent"), "excellent" );
	deepEqual( Stem("excellente"), "excellent" );
	deepEqual( Stem("excellentes"), "excellent" );
	deepEqual( Stem("excellents"), "excellent" );
	deepEqual( Stem("excentricité"), "excentr" );
	deepEqual( Stem("excentrique"), "excentr" );
	deepEqual( Stem("excepté"), "except" );
	deepEqual( Stem("exception"), "except" );
	deepEqual( Stem("excès"), "exces" );
	deepEqual( Stem("excessif"), "excess" );
	deepEqual( Stem("excessifs"), "excess" );
	deepEqual( Stem("excessive"), "excess" );
	deepEqual( Stem("excessivement"), "excess" );
	deepEqual( Stem("excessives"), "excess" );
	deepEqual( Stem("excita"), "excit" );
	deepEqual( Stem("excitait"), "excit" );
	deepEqual( Stem("excitation"), "excit" );
	deepEqual( Stem("excité"), "excit" );
	deepEqual( Stem("excitée"), "excit" );
	deepEqual( Stem("excitées"), "excit" );
	deepEqual( Stem("excitent"), "excitent" );
	deepEqual( Stem("exciter"), "excit" );
	deepEqual( Stem("exciterai"), "excit" );
	deepEqual( Stem("exclama"), "exclam" );
	deepEqual( Stem("exclamation"), "exclam" );
	deepEqual( Stem("exclamations"), "exclam" );
	deepEqual( Stem("exclu"), "exclu" );
	deepEqual( Stem("exclusive"), "exclus" );
	deepEqual( Stem("exclusivement"), "exclus" );
	deepEqual( Stem("excusa"), "excus" );
	deepEqual( Stem("excusable"), "excus" );
	deepEqual( Stem("excusait"), "excus" );
	deepEqual( Stem("excusant"), "excus" );
	deepEqual( Stem("excuse"), "excus" );
	deepEqual( Stem("excusée"), "excus" );
	deepEqual( Stem("excuser"), "excus" );
	deepEqual( Stem("excuserez"), "excus" );
	deepEqual( Stem("excuses"), "excus" );
	deepEqual( Stem("excusez"), "excus" );
	deepEqual( Stem("exécrable"), "execr" );
	deepEqual( Stem("exécrait"), "execr" );
	deepEqual( Stem("exécration"), "execr" );
	deepEqual( Stem("exècre"), "execr" );
	deepEqual( Stem("exécrer"), "execr" );
	deepEqual( Stem("exécuta"), "exécut" );
	deepEqual( Stem("exécutait"), "exécut" );
	deepEqual( Stem("exécutant"), "exécut" );
	deepEqual( Stem("exécute"), "exécut" );
	deepEqual( Stem("exécuté"), "exécut" );
	deepEqual( Stem("exécutée"), "exécut" );
	deepEqual( Stem("exécutées"), "exécut" );
	deepEqual( Stem("exécuter"), "exécut" );
	deepEqual( Stem("exécuterai"), "exécut" );
	deepEqual( Stem("exécuterait"), "exécut" );
	deepEqual( Stem("exécuteras"), "exécut" );
	deepEqual( Stem("exécutés"), "exécut" );
	deepEqual( Stem("exécuteur"), "exécuteur" );
	deepEqual( Stem("exécution"), "exécu" );
	deepEqual( Stem("exécutions"), "exécu" );
	deepEqual( Stem("exécutoire"), "exécutoir" );
	deepEqual( Stem("exemplaire"), "exemplair" );
	deepEqual( Stem("exemplaires"), "exemplair" );
	deepEqual( Stem("exemple"), "exempl" );
	deepEqual( Stem("exemples"), "exempl" );
	deepEqual( Stem("exempte"), "exempt" );
	deepEqual( Stem("exempté"), "exempt" );
	deepEqual( Stem("exerçait"), "exerc" );
	deepEqual( Stem("exerçant"), "exerc" );
	deepEqual( Stem("exerce"), "exerc" );
	deepEqual( Stem("exercée"), "exerc" );
	deepEqual( Stem("exercent"), "exercent" );
	deepEqual( Stem("exercer"), "exerc" );
	deepEqual( Stem("exercerait"), "exerc" );
	deepEqual( Stem("exercés"), "exerc" );
	deepEqual( Stem("exercice"), "exercic" );
	deepEqual( Stem("exercices"), "exercic" );
	deepEqual( Stem("exhibant"), "exhib" );
	deepEqual( Stem("exhibe"), "exhib" );
	deepEqual( Stem("exhibition"), "exhibit" );
	deepEqual( Stem("exhibitions"), "exhibit" );
	deepEqual( Stem("exhortait"), "exhort" );
	deepEqual( Stem("exige"), "exig" );
	deepEqual( Stem("exigé"), "exig" );
	deepEqual( Stem("exigea"), "exig" );
	deepEqual( Stem("exigeait"), "exig" );
	deepEqual( Stem("exigences"), "exigent" );
	deepEqual( Stem("exigeons"), "exigeon" );
	deepEqual( Stem("exiger"), "exig" );
	deepEqual( Stem("exigez"), "exig" );
	deepEqual( Stem("exiguë"), "exigu" );
	deepEqual( Stem("exigus"), "exigus" );
	deepEqual( Stem("exil"), "exil" );
	deepEqual( Stem("exila"), "exil" );
	deepEqual( Stem("exilait"), "exil" );
	deepEqual( Stem("exile"), "exil" );
	deepEqual( Stem("exilé"), "exil" );
	deepEqual( Stem("exilées"), "exil" );
	deepEqual( Stem("exiler"), "exil" );
	deepEqual( Stem("exista"), "exist" );
	deepEqual( Stem("existaient"), "exist" );
	deepEqual( Stem("existait"), "exist" );
	deepEqual( Stem("existât"), "exist" );
	deepEqual( Stem("existe"), "exist" );
	deepEqual( Stem("existé"), "exist" );
	deepEqual( Stem("existence"), "existent" );
	deepEqual( Stem("existent"), "existent" );
	deepEqual( Stem("exister"), "exist" );
	deepEqual( Stem("exorbitante"), "exorbit" );
	deepEqual( Stem("exotiques"), "exot" );
	deepEqual( Stem("expansif"), "expans" );
	deepEqual( Stem("expansion"), "expans" );
	deepEqual( Stem("expédia"), "expédi" );
	deepEqual( Stem("expédié"), "expédi" );
	deepEqual( Stem("expédiée"), "expédi" );
	deepEqual( Stem("expédier"), "expédi" );
	deepEqual( Stem("expédition"), "expédit" );
	deepEqual( Stem("expéditions"), "expédit" );
	deepEqual( Stem("expérience"), "expérient" );
	deepEqual( Stem("expiation"), "expiat" );
	deepEqual( Stem("expira"), "expir" );
	deepEqual( Stem("expiré"), "expir" );
	deepEqual( Stem("expirer"), "expir" );
	deepEqual( Stem("explicable"), "explic" );
	deepEqual( Stem("explication"), "expliqu" );
	deepEqual( Stem("explications"), "expliqu" );
	deepEqual( Stem("explicite"), "explicit" );
	deepEqual( Stem("expliqua"), "expliqu" );
	deepEqual( Stem("expliquait"), "expliqu" );
	deepEqual( Stem("expliquant"), "expliqu" );
	deepEqual( Stem("explique"), "expliqu" );
	deepEqual( Stem("expliqué"), "expliqu" );
	deepEqual( Stem("expliquée"), "expliqu" );
	deepEqual( Stem("expliquer"), "expliqu" );
	deepEqual( Stem("expliqués"), "expliqu" );
	deepEqual( Stem("expliquez"), "expliqu" );
	deepEqual( Stem("exploit"), "exploit" );
	deepEqual( Stem("exploits"), "exploit" );
	deepEqual( Stem("explosion"), "explos" );
	deepEqual( Stem("exposa"), "expos" );
	deepEqual( Stem("exposais"), "expos" );
	deepEqual( Stem("exposait"), "expos" );
	deepEqual( Stem("exposant"), "expos" );
	deepEqual( Stem("expose"), "expos" );
	deepEqual( Stem("exposé"), "expos" );
	deepEqual( Stem("exposée"), "expos" );
	deepEqual( Stem("exposées"), "expos" );
	deepEqual( Stem("exposer"), "expos" );
	deepEqual( Stem("exposerai"), "expos" );
	deepEqual( Stem("exposerais"), "expos" );
	deepEqual( Stem("exposerait"), "expos" );
	deepEqual( Stem("exposés"), "expos" );
	deepEqual( Stem("exposez"), "expos" );
	deepEqual( Stem("exprès"), "expres" );
	deepEqual( Stem("express"), "express" );
	deepEqual( Stem("expresse"), "express" );
	deepEqual( Stem("expressément"), "express" );
	deepEqual( Stem("expressifs"), "express" );
	deepEqual( Stem("expression"), "express" );
	deepEqual( Stem("expressions"), "express" );
	deepEqual( Stem("exprima"), "exprim" );
	deepEqual( Stem("exprimaient"), "exprim" );
	deepEqual( Stem("exprimait"), "exprim" );
	deepEqual( Stem("exprimant"), "exprim" );
	deepEqual( Stem("exprime"), "exprim" );
	deepEqual( Stem("exprimé"), "exprim" );
	deepEqual( Stem("exprimée"), "exprim" );
	deepEqual( Stem("exprimer"), "exprim" );
	deepEqual( Stem("exprimèrent"), "exprim" );
	deepEqual( Stem("exprimeront"), "exprim" );
	deepEqual( Stem("exquise"), "exquis" );
	deepEqual( Stem("extase"), "extas" );
	deepEqual( Stem("extases"), "extas" );
	deepEqual( Stem("extatique"), "extat" );
	deepEqual( Stem("extension"), "extens" );
	deepEqual( Stem("extérieur"), "extérieur" );
	deepEqual( Stem("extérieure"), "extérieur" );
	deepEqual( Stem("extérieures"), "extérieur" );
	deepEqual( Stem("extérieurs"), "extérieur" );
	deepEqual( Stem("exterminés"), "extermin" );
	deepEqual( Stem("extinction"), "extinct" );
	deepEqual( Stem("extorqué"), "extorqu" );
	deepEqual( Stem("extradition"), "extradit" );
	deepEqual( Stem("extrait"), "extrait" );
	deepEqual( Stem("extraites"), "extrait" );
	deepEqual( Stem("extraordinaire"), "extraordinair" );
	deepEqual( Stem("extraordinairement"), "extraordinair" );
	deepEqual( Stem("extraordinaires"), "extraordinair" );
	deepEqual( Stem("extravagant"), "extravag" );
	deepEqual( Stem("extravagante"), "extravag" );
	deepEqual( Stem("extravagantes"), "extravag" );
	deepEqual( Stem("extrême"), "extrêm" );
	deepEqual( Stem("extrêmement"), "extrêm" );
	deepEqual( Stem("extrêmes"), "extrêm" );
	deepEqual( Stem("extrémité"), "extrem" );
	deepEqual( Stem("extrémités"), "extrem" );
	deepEqual( Stem("f"), "f" );
	deepEqual( Stem("fa"), "fa" );
	deepEqual( Stem("fabio"), "fabio" );
	deepEqual( Stem("fable"), "fabl" );
	deepEqual( Stem("fables"), "fabl" );
	deepEqual( Stem("fabricant"), "fabric" );
	deepEqual( Stem("fabricants"), "fabric" );
	deepEqual( Stem("fabrice"), "fabric" );
	deepEqual( Stem("fabriquaient"), "fabriqu" );
	deepEqual( Stem("fabrique"), "fabriqu" );
	deepEqual( Stem("fabriquée"), "fabriqu" );
	deepEqual( Stem("fabriquées"), "fabriqu" );
	deepEqual( Stem("fabriquer"), "fabriqu" );
	deepEqual( Stem("fabriques"), "fabriqu" );
	deepEqual( Stem("fabuleux"), "fabul" );
	deepEqual( Stem("fabuliste"), "fabul" );
	deepEqual( Stem("façade"), "façad" );
	deepEqual( Stem("façades"), "façad" );
	deepEqual( Stem("face"), "fac" );
	deepEqual( Stem("fâcha"), "fâch" );
	deepEqual( Stem("fâchait"), "fâch" );
	deepEqual( Stem("fâchât"), "fâch" );
	deepEqual( Stem("fâche"), "fâch" );
	deepEqual( Stem("fâché"), "fâch" );
	deepEqual( Stem("fâchée"), "fâch" );
	deepEqual( Stem("fâchent"), "fâchent" );
	deepEqual( Stem("fâcher"), "fâch" );
	deepEqual( Stem("fâchèrent"), "fâch" );
	deepEqual( Stem("fâchés"), "fâch" );
	deepEqual( Stem("fâcheuse"), "fâcheux" );
	deepEqual( Stem("fâcheuses"), "fâcheux" );
	deepEqual( Stem("fâcheux"), "fâcheux" );
	deepEqual( Stem("fâchez"), "fâch" );
	deepEqual( Stem("facile"), "facil" );
	deepEqual( Stem("facilement"), "facil" );
	deepEqual( Stem("facilitait"), "facilit" );
	deepEqual( Stem("facilité"), "facil" );
	deepEqual( Stem("facilitent"), "facilitent" );
	deepEqual( Stem("faciliter"), "facilit" );
	deepEqual( Stem("facio"), "facio" );
	deepEqual( Stem("façon"), "façon" );
	deepEqual( Stem("faconde"), "facond" );
	deepEqual( Stem("façons"), "façon" );
	deepEqual( Stem("facteur"), "facteur" );
	deepEqual( Stem("faction"), "faction" );
	deepEqual( Stem("factotum"), "factotum" );
	deepEqual( Stem("faculté"), "facult" );
	deepEqual( Stem("facultés"), "facult" );
	deepEqual( Stem("fade"), "fad" );
	deepEqual( Stem("fagots"), "fagot" );
	deepEqual( Stem("fahrenheit"), "fahrenheit" );
	deepEqual( Stem("faible"), "faibl" );
	deepEqual( Stem("faibles"), "faibl" );
	deepEqual( Stem("faiblesse"), "faibless" );
	deepEqual( Stem("faiblesses"), "faibless" );
	deepEqual( Stem("faiblir"), "faibl" );
	deepEqual( Stem("faiblirent"), "faibl" );
	deepEqual( Stem("faict"), "faict" );
	deepEqual( Stem("failli"), "faill" );
	deepEqual( Stem("faillir"), "faill" );
	deepEqual( Stem("faillirent"), "faill" );
	deepEqual( Stem("faillit"), "faill" );
	deepEqual( Stem("faim"), "faim" );
	deepEqual( Stem("fainéant"), "fainé" );
	deepEqual( Stem("faire"), "fair" );
	deepEqual( Stem("fais"), "fais" );
	deepEqual( Stem("faisable"), "faisabl" );
	deepEqual( Stem("faisaient"), "fais" );
	deepEqual( Stem("faisais"), "fais" );
	deepEqual( Stem("faisait"), "fais" );
	deepEqual( Stem("faisant"), "fais" );
	deepEqual( Stem("faisceaux"), "faisceau" );
	deepEqual( Stem("faisiez"), "fais" );
	deepEqual( Stem("faisons"), "faison" );
	deepEqual( Stem("fait"), "fait" );
	deepEqual( Stem("faite"), "fait" );
	deepEqual( Stem("faîte"), "faît" );
	deepEqual( Stem("faites"), "fait" );
	deepEqual( Stem("faits"), "fait" );
	deepEqual( Stem("fakirs"), "fakir" );
	deepEqual( Stem("falcoz"), "falcoz" );
	deepEqual( Stem("faliero"), "faliero" );
	deepEqual( Stem("fallait"), "fall" );
	deepEqual( Stem("fallentin"), "fallentin" );
	deepEqual( Stem("falloir"), "falloir" );
	deepEqual( Stem("fallu"), "fallu" );
	deepEqual( Stem("fallut"), "fallut" );
	deepEqual( Stem("fameuse"), "fameux" );
	deepEqual( Stem("fameusement"), "fameux" );
	deepEqual( Stem("fameux"), "fameux" );
	deepEqual( Stem("familiarisé"), "familiaris" );
	deepEqual( Stem("familiarité"), "familiar" );
	deepEqual( Stem("familier"), "famili" );
	deepEqual( Stem("familièrement"), "famili" );
	deepEqual( Stem("famille"), "famill" );
	deepEqual( Stem("familles"), "famill" );
	deepEqual( Stem("fanal"), "fanal" );
	deepEqual( Stem("fanatique"), "fanat" );
	deepEqual( Stem("fanatiques"), "fanat" );
	deepEqual( Stem("fanatisme"), "fanat" );
	deepEqual( Stem("fanfarons"), "fanfaron" );
	deepEqual( Stem("fange"), "fang" );
	deepEqual( Stem("fangeuses"), "fangeux" );
	deepEqual( Stem("fangeux"), "fangeux" );
	deepEqual( Stem("fantaisie"), "fantais" );
	deepEqual( Stem("fantaisies"), "fantais" );
	deepEqual( Stem("fantaisistes"), "fantais" );
	deepEqual( Stem("fantasque"), "fantasqu" );
	deepEqual( Stem("fantastique"), "fantast" );
	deepEqual( Stem("fantastiques"), "fantast" );
	deepEqual( Stem("fantôme"), "fantôm" );
	deepEqual( Stem("faquins"), "faquin" );
	deepEqual( Stem("far"), "far" );
	deepEqual( Stem("faraud"), "faraud" );
	deepEqual( Stem("farceur"), "farceur" );
	deepEqual( Stem("farceurs"), "farceur" );
	deepEqual( Stem("farci"), "farc" );
	deepEqual( Stem("fardeau"), "fardeau" );
	deepEqual( Stem("fare"), "far" );
	deepEqual( Stem("farine"), "farin" );
	deepEqual( Stem("farmer"), "farm" );
	deepEqual( Stem("farnèse"), "farnes" );
	deepEqual( Stem("farouche"), "farouch" );
	deepEqual( Stem("farouches"), "farouch" );
	deepEqual( Stem("farthing"), "farthing" );
	deepEqual( Stem("fascinant"), "fascin" );
	deepEqual( Stem("fascination"), "fascin" );
	deepEqual( Stem("fasciné"), "fascin" );
	deepEqual( Stem("fasciner"), "fascin" );
	deepEqual( Stem("fasse"), "fass" );
	deepEqual( Stem("fassent"), "fassent" );
	deepEqual( Stem("fassiez"), "fass" );
	deepEqual( Stem("faste"), "fast" );
	deepEqual( Stem("fastenet"), "fastenet" );
	deepEqual( Stem("fat"), "fat" );
	deepEqual( Stem("fata"), "fat" );
	deepEqual( Stem("fatal"), "fatal" );
	deepEqual( Stem("fatale"), "fatal" );
	deepEqual( Stem("fatales"), "fatal" );
	deepEqual( Stem("fatalité"), "fatal" );
	deepEqual( Stem("fatigant"), "fatig" );
	deepEqual( Stem("fatigante"), "fatig" );
	deepEqual( Stem("fatigua"), "fatigu" );
	deepEqual( Stem("fatiguaient"), "fatigu" );
	deepEqual( Stem("fatigue"), "fatigu" );
	deepEqual( Stem("fatigué"), "fatigu" );
	deepEqual( Stem("fatiguée"), "fatigu" );
	deepEqual( Stem("fatiguées"), "fatigu" );
	deepEqual( Stem("fatiguer"), "fatigu" );
	deepEqual( Stem("fatiguerai"), "fatigu" );
	deepEqual( Stem("fatigues"), "fatigu" );
	deepEqual( Stem("fatuité"), "fatuit" );
	deepEqual( Stem("faublas"), "faubl" );
	deepEqual( Stem("faubourg"), "faubourg" );
	deepEqual( Stem("faudra"), "faudr" );
	deepEqual( Stem("faudrait"), "faudr" );
	deepEqual( Stem("faufilant"), "faufil" );
	deepEqual( Stem("fausse"), "fauss" );
	deepEqual( Stem("fausses"), "fauss" );
	deepEqual( Stem("fausseté"), "fausset" );
	deepEqual( Stem("faussetés"), "fausset" );
	deepEqual( Stem("fausta"), "faust" );
	deepEqual( Stem("faut"), "faut" );
	deepEqual( Stem("faute"), "faut" );
	deepEqual( Stem("fautes"), "faut" );
	deepEqual( Stem("fauteuil"), "fauteuil" );
	deepEqual( Stem("fauteuils"), "fauteuil" );
	deepEqual( Stem("fauve"), "fauv" );
	deepEqual( Stem("fauves"), "fauv" );
	deepEqual( Stem("faux"), "faux" );
	deepEqual( Stem("faveur"), "faveur" );
	deepEqual( Stem("faveurs"), "faveur" );
	deepEqual( Stem("favorable"), "favor" );
	deepEqual( Stem("favorablement"), "favor" );
	deepEqual( Stem("favorables"), "favor" );
	deepEqual( Stem("favori"), "favor" );
	deepEqual( Stem("favoris"), "favor" );
	deepEqual( Stem("favorisa"), "favoris" );
	deepEqual( Stem("favorisait"), "favoris" );
	deepEqual( Stem("favoriser"), "favoris" );
	deepEqual( Stem("favorite"), "favorit" );
	deepEqual( Stem("fay"), "fay" );
	deepEqual( Stem("fayette"), "fayet" );
	deepEqual( Stem("fé"), "fé" );
	deepEqual( Stem("fébrile"), "fébril" );
	deepEqual( Stem("fébrilement"), "fébril" );
	deepEqual( Stem("feci"), "fec" );
	deepEqual( Stem("fécond"), "fécond" );
	deepEqual( Stem("féconde"), "fécond" );
	deepEqual( Stem("feignait"), "feign" );
	deepEqual( Stem("feignant"), "feign" );
	deepEqual( Stem("feignent"), "feignent" );
	deepEqual( Stem("feignit"), "feign" );
	deepEqual( Stem("feindre"), "feindr" );
	deepEqual( Stem("feins"), "fein" );
	deepEqual( Stem("feint"), "feint" );
	deepEqual( Stem("feinte"), "feint" );
	deepEqual( Stem("felice"), "felic" );
	deepEqual( Stem("félicita"), "félicit" );
	deepEqual( Stem("félicitait"), "félicit" );
	deepEqual( Stem("félicite"), "félicit" );
	deepEqual( Stem("félicité"), "féliqu" );
	deepEqual( Stem("félicités"), "féliqu" );
	deepEqual( Stem("felino"), "felino" );
	deepEqual( Stem("félix"), "félix" );
	deepEqual( Stem("fellah"), "fellah" );
	deepEqual( Stem("fellahs"), "fellah" );
	deepEqual( Stem("féminin"), "féminin" );
	deepEqual( Stem("féminine"), "féminin" );
	deepEqual( Stem("femme"), "femm" );
	deepEqual( Stem("femmelette"), "femmelet" );
	deepEqual( Stem("femmes"), "femm" );
	deepEqual( Stem("fendaient"), "fend" );
	deepEqual( Stem("fendait"), "fend" );
	deepEqual( Stem("fendues"), "fendu" );
	deepEqual( Stem("fénelon"), "fénelon" );
	deepEqual( Stem("fenestrelles"), "fenestrel" );
	deepEqual( Stem("fenêtre"), "fenêtr" );
	deepEqual( Stem("fenêtres"), "fenêtr" );
	deepEqual( Stem("fente"), "fent" );
	deepEqual( Stem("féodal"), "féodal" );
	deepEqual( Stem("fer"), "fer" );
	deepEqual( Stem("fera"), "fer" );
	deepEqual( Stem("ferai"), "fer" );
	deepEqual( Stem("feraient"), "fer" );
	deepEqual( Stem("ferais"), "fer" );
	deepEqual( Stem("ferait"), "fer" );
	deepEqual( Stem("feras"), "fer" );
	deepEqual( Stem("feretrius"), "feretrius" );
	deepEqual( Stem("ferez"), "fer" );
	deepEqual( Stem("feriez"), "fer" );
	deepEqual( Stem("feringhea"), "feringh" );
	deepEqual( Stem("ferions"), "ferion" );
	deepEqual( Stem("ferma"), "ferm" );
	deepEqual( Stem("fermage"), "fermag" );
	deepEqual( Stem("fermaient"), "ferm" );
	deepEqual( Stem("fermait"), "ferm" );
	deepEqual( Stem("fermant"), "ferm" );
	deepEqual( Stem("fermât"), "ferm" );
	deepEqual( Stem("ferme"), "ferm" );
	deepEqual( Stem("fermé"), "ferm" );
	deepEqual( Stem("fermée"), "ferm" );
	deepEqual( Stem("fermées"), "ferm" );
	deepEqual( Stem("fermement"), "ferm" );
	deepEqual( Stem("fermentation"), "ferment" );
	deepEqual( Stem("fermer"), "ferm" );
	deepEqual( Stem("fermerait"), "ferm" );
	deepEqual( Stem("fermèrent"), "ferm" );
	deepEqual( Stem("fermerons"), "ferm" );
	deepEqual( Stem("fermes"), "ferm" );
	deepEqual( Stem("fermés"), "ferm" );
	deepEqual( Stem("fermeté"), "fermet" );
	deepEqual( Stem("fermeture"), "fermetur" );
	deepEqual( Stem("fermier"), "fermi" );
	deepEqual( Stem("fermiers"), "fermi" );
	deepEqual( Stem("féroce"), "féroc" );
	deepEqual( Stem("féroces"), "féroc" );
	deepEqual( Stem("férocité"), "féroc" );
	deepEqual( Stem("ferons"), "feron" );
	deepEqual( Stem("feront"), "feront" );
	deepEqual( Stem("ferrante"), "ferr" );
	deepEqual( Stem("ferrare"), "ferrar" );
	deepEqual( Stem("ferrée"), "ferr" );
	deepEqual( Stem("ferrures"), "ferrur" );
	deepEqual( Stem("ferry"), "ferry" );
	deepEqual( Stem("fers"), "fer" );
	deepEqual( Stem("fertile"), "fertil" );
	deepEqual( Stem("fertiles"), "fertil" );
	deepEqual( Stem("fervaques"), "fervaqu" );
	deepEqual( Stem("fervent"), "fervent" );
	deepEqual( Stem("fervente"), "fervent" );
	deepEqual( Stem("fervents"), "fervent" );
	deepEqual( Stem("ferveur"), "ferveur" );
	deepEqual( Stem("fête"), "fêt" );
	deepEqual( Stem("fêté"), "fêt" );
	deepEqual( Stem("fêtes"), "fêt" );
	deepEqual( Stem("feu"), "feu" );
	deepEqual( Stem("feuillage"), "feuillag" );
	deepEqual( Stem("feuille"), "feuill" );
	deepEqual( Stem("feuilles"), "feuill" );
	deepEqual( Stem("feuilleta"), "feuillet" );
	deepEqual( Stem("feuilletait"), "feuillet" );
	deepEqual( Stem("feuilletant"), "feuillet" );
	deepEqual( Stem("feuillets"), "feuillet" );
	deepEqual( Stem("feutre"), "feutr" );
	deepEqual( Stem("feux"), "feux" );
	deepEqual( Stem("few"), "few" );
	deepEqual( Stem("fi"), "fi" );
	deepEqual( Stem("fiacre"), "fiacr" );
	deepEqual( Stem("ficelé"), "ficel" );
	deepEqual( Stem("ficelles"), "ficel" );
	deepEqual( Stem("fichée"), "fich" );
	deepEqual( Stem("fiches"), "fich" );
	deepEqual( Stem("fidèle"), "fidel" );
	deepEqual( Stem("fidèlement"), "fidel" );
	deepEqual( Stem("fidèles"), "fidel" );
	deepEqual( Stem("fidélité"), "fidel" );
	deepEqual( Stem("fie"), "fi" );
	deepEqual( Stem("fier"), "fi" );
	deepEqual( Stem("fierai"), "fi" );
	deepEqual( Stem("fière"), "fier" );
	deepEqual( Stem("fièrement"), "fier" );
	deepEqual( Stem("fières"), "fier" );
	deepEqual( Stem("fiers"), "fier" );
	deepEqual( Stem("fierté"), "fiert" );
	deepEqual( Stem("fièvre"), "fievr" );
	deepEqual( Stem("fiévreux"), "fiévreux" );
	deepEqual( Stem("figaro"), "figaro" );
	deepEqual( Stem("figura"), "figur" );
	deepEqual( Stem("figuraient"), "figur" );
	deepEqual( Stem("figurais"), "figur" );
	deepEqual( Stem("figurait"), "figur" );
	deepEqual( Stem("figurât"), "figur" );
	deepEqual( Stem("figure"), "figur" );
	deepEqual( Stem("figuré"), "figur" );
	deepEqual( Stem("figurer"), "figur" );
	deepEqual( Stem("figurerai"), "figur" );
	deepEqual( Stem("figureriez"), "figur" );
	deepEqual( Stem("figures"), "figur" );
	deepEqual( Stem("figurés"), "figur" );
	deepEqual( Stem("figurez"), "figur" );
	deepEqual( Stem("fil"), "fil" );
	deepEqual( Stem("fila"), "fil" );
	deepEqual( Stem("filait"), "fil" );
	deepEqual( Stem("filant"), "fil" );
	deepEqual( Stem("filasse"), "fil" );
	deepEqual( Stem("file"), "fil" );
	deepEqual( Stem("filé"), "fil" );
	deepEqual( Stem("filent"), "filent" );
	deepEqual( Stem("filer"), "fil" );
	deepEqual( Stem("filerai"), "fil" );
	deepEqual( Stem("files"), "fil" );
	deepEqual( Stem("filet"), "filet" );
	deepEqual( Stem("filez"), "fil" );
	deepEqual( Stem("fili"), "fil" );
	deepEqual( Stem("filiale"), "filial" );
	deepEqual( Stem("filigrane"), "filigran" );
	deepEqual( Stem("filins"), "filin" );
	deepEqual( Stem("fille"), "fill" );
	deepEqual( Stem("filles"), "fill" );
	deepEqual( Stem("filons"), "filon" );
	deepEqual( Stem("fils"), "fil" );
	deepEqual( Stem("filtrait"), "filtr" );
	deepEqual( Stem("fin"), "fin" );
	deepEqual( Stem("finance"), "financ" );
	deepEqual( Stem("finances"), "financ" );
	deepEqual( Stem("financier"), "financi" );
	deepEqual( Stem("financièrement"), "financi" );
	deepEqual( Stem("finds"), "find" );
	deepEqual( Stem("fine"), "fin" );
	deepEqual( Stem("fines"), "fin" );
	deepEqual( Stem("finesse"), "finess" );
	deepEqual( Stem("finesses"), "finess" );
	deepEqual( Stem("fini"), "fin" );
	deepEqual( Stem("finie"), "fin" );
	deepEqual( Stem("finies"), "fin" );
	deepEqual( Stem("finir"), "fin" );
	deepEqual( Stem("finira"), "fin" );
	deepEqual( Stem("finiraient"), "fin" );
	deepEqual( Stem("finirait"), "fin" );
	deepEqual( Stem("finirent"), "fin" );
	deepEqual( Stem("finis"), "fin" );
	deepEqual( Stem("finissait"), "fin" );
	deepEqual( Stem("finissant"), "fin" );
	deepEqual( Stem("finisse"), "fin" );
	deepEqual( Stem("finissent"), "fin" );
	deepEqual( Stem("finissons"), "fin" );
	deepEqual( Stem("finit"), "fin" );
	deepEqual( Stem("fins"), "fin" );
	deepEqual( Stem("fiole"), "fiol" );
	deepEqual( Stem("fir"), "fir" );
	deepEqual( Stem("fire"), "fir" );
	deepEqual( Stem("firent"), "firent" );
	deepEqual( Stem("fis"), "fis" );
	deepEqual( Stem("fiscal"), "fiscal" );
	deepEqual( Stem("fisse"), "fiss" );
	deepEqual( Stem("fit"), "fit" );
	deepEqual( Stem("fît"), "fît" );
	deepEqual( Stem("fitz"), "fitz" );
	deepEqual( Stem("fix"), "fix" );
	deepEqual( Stem("fixa"), "fix" );
	deepEqual( Stem("fixaient"), "fix" );
	deepEqual( Stem("fixait"), "fix" );
	deepEqual( Stem("fixant"), "fix" );
	deepEqual( Stem("fixe"), "fix" );
	deepEqual( Stem("fixé"), "fix" );
	deepEqual( Stem("fixée"), "fix" );
	deepEqual( Stem("fixement"), "fix" );
	deepEqual( Stem("fixer"), "fix" );
	deepEqual( Stem("fixèrent"), "fix" );
	deepEqual( Stem("fixés"), "fix" );
	deepEqual( Stem("fixité"), "fixit" );
	deepEqual( Stem("flacon"), "flacon" );
	deepEqual( Stem("flagrant"), "flagr" );
	deepEqual( Stem("flair"), "flair" );
	deepEqual( Stem("flairait"), "flair" );
	deepEqual( Stem("flamand"), "flamand" );
	deepEqual( Stem("flamande"), "flamand" );
	deepEqual( Stem("flambé"), "flamb" );
	deepEqual( Stem("flambeaux"), "flambeau" );
	deepEqual( Stem("flambés"), "flamb" );
	deepEqual( Stem("flamboyants"), "flamboi" );
	deepEqual( Stem("flamme"), "flamm" );
	deepEqual( Stem("flammes"), "flamm" );
	deepEqual( Stem("flâna"), "flân" );
	deepEqual( Stem("flanagan"), "flanagan" );
	deepEqual( Stem("flânait"), "flân" );
	deepEqual( Stem("flânant"), "flân" );
	deepEqual( Stem("flanc"), "flanc" );
	deepEqual( Stem("flancs"), "flanc" );
	deepEqual( Stem("flatta"), "flatt" );
	deepEqual( Stem("flattait"), "flatt" );
	deepEqual( Stem("flatte"), "flatt" );
	deepEqual( Stem("flatté"), "flatt" );
	deepEqual( Stem("flattée"), "flatt" );
	deepEqual( Stem("flatter"), "flatt" );
	deepEqual( Stem("flatteries"), "flatter" );
	deepEqual( Stem("flatteur"), "flatteur" );
	deepEqual( Stem("flatteurs"), "flatteur" );
	deepEqual( Stem("flatteuse"), "flatteux" );
	deepEqual( Stem("flatteuses"), "flatteux" );
	deepEqual( Stem("flèche"), "flech" );
	deepEqual( Stem("flèches"), "flech" );
	deepEqual( Stem("fléchir"), "flech" );
	deepEqual( Stem("flegmatique"), "flegmat" );
	deepEqual( Stem("flegme"), "flegm" );
	deepEqual( Stem("flétri"), "fletr" );
	deepEqual( Stem("flétrirait"), "fletr" );
	deepEqual( Stem("fleur"), "fleur" );
	deepEqual( Stem("fleurs"), "fleur" );
	deepEqual( Stem("fleury"), "fleury" );
	deepEqual( Stem("fleuve"), "fleuv" );
	deepEqual( Stem("fleuves"), "fleuv" );
	deepEqual( Stem("flexible"), "flexibl" );
	deepEqual( Stem("flexibles"), "flexibl" );
	deepEqual( Stem("flocons"), "flocon" );
	deepEqual( Stem("florence"), "florenc" );
	deepEqual( Stem("florissante"), "flor" );
	deepEqual( Stem("flot"), "flot" );
	deepEqual( Stem("flots"), "flot" );
	deepEqual( Stem("flottaient"), "flott" );
	deepEqual( Stem("flottant"), "flott" );
	deepEqual( Stem("flottantes"), "flott" );
	deepEqual( Stem("flottants"), "flott" );
	deepEqual( Stem("flotter"), "flott" );
	deepEqual( Stem("flottille"), "flottill" );
	deepEqual( Stem("flûtes"), "flût" );
	deepEqual( Stem("fo"), "fo" );
	deepEqual( Stem("foc"), "foc" );
	deepEqual( Stem("focs"), "foc" );
	deepEqual( Stem("fogg"), "fogg" );
	deepEqual( Stem("foi"), "foi" );
	deepEqual( Stem("foin"), "foin" );
	deepEqual( Stem("fois"), "fois" );
	deepEqual( Stem("foison"), "foison" );
	deepEqual( Stem("foisonnait"), "foison" );
	deepEqual( Stem("foisonne"), "foison" );
	deepEqual( Stem("fokelberg"), "fokelberg" );
	deepEqual( Stem("fol"), "fol" );
	deepEqual( Stem("folie"), "fol" );
	deepEqual( Stem("folies"), "fol" );
	deepEqual( Stem("folio"), "folio" );
	deepEqual( Stem("folke"), "folk" );
	deepEqual( Stem("folle"), "foll" );
	deepEqual( Stem("follement"), "foll" );
	deepEqual( Stem("folles"), "foll" );
	deepEqual( Stem("foncé"), "fonc" );
	deepEqual( Stem("foncièrement"), "fonci" );
	deepEqual( Stem("fonctionnaire"), "fonctionnair" );
	deepEqual( Stem("fonctionnaires"), "fonctionnair" );
	deepEqual( Stem("fonctionne"), "fonction" );
	deepEqual( Stem("fonctions"), "fonction" );
	deepEqual( Stem("fond"), "fond" );
	deepEqual( Stem("fonda"), "fond" );
	deepEqual( Stem("fondaient"), "fond" );
	deepEqual( Stem("fondait"), "fond" );
	deepEqual( Stem("fondant"), "fond" );
	deepEqual( Stem("fondateur"), "fondateur" );
	deepEqual( Stem("fondations"), "fondat" );
	deepEqual( Stem("fondé"), "fond" );
	deepEqual( Stem("fondée"), "fond" );
	deepEqual( Stem("fondées"), "fond" );
	deepEqual( Stem("fondements"), "fond" );
	deepEqual( Stem("fondent"), "fondent" );
	deepEqual( Stem("fonder"), "fond" );
	deepEqual( Stem("fonderies"), "fonder" );
	deepEqual( Stem("fondés"), "fond" );
	deepEqual( Stem("fondirent"), "fond" );
	deepEqual( Stem("fondit"), "fond" );
	deepEqual( Stem("fondre"), "fondr" );
	deepEqual( Stem("fonds"), "fond" );
	deepEqual( Stem("fondu"), "fondu" );
	deepEqual( Stem("fondue"), "fondu" );
	deepEqual( Stem("font"), "font" );
	deepEqual( Stem("fontaine"), "fontain" );
	deepEqual( Stem("fontaines"), "fontain" );
	deepEqual( Stem("fontan"), "fontan" );
	deepEqual( Stem("fontana"), "fontan" );
	deepEqual( Stem("fontenoy"), "fontenoy" );
	deepEqual( Stem("for"), "for" );
	deepEqual( Stem("força"), "forc" );
	deepEqual( Stem("forçaient"), "forc" );
	deepEqual( Stem("forçais"), "forc" );
	deepEqual( Stem("forçait"), "forc" );
	deepEqual( Stem("forçant"), "forc" );
	deepEqual( Stem("force"), "forc" );
	deepEqual( Stem("forcé"), "forc" );
	deepEqual( Stem("forcée"), "forc" );
	deepEqual( Stem("forcer"), "forc" );
	deepEqual( Stem("forcera"), "forc" );
	deepEqual( Stem("forcerai"), "forc" );
	deepEqual( Stem("forcèrent"), "forc" );
	deepEqual( Stem("forces"), "forc" );
	deepEqual( Stem("forcés"), "forc" );
	deepEqual( Stem("forcez"), "forc" );
	deepEqual( Stem("forêt"), "forêt" );
	deepEqual( Stem("foretells"), "foretel" );
	deepEqual( Stem("forets"), "foret" );
	deepEqual( Stem("forêts"), "forêt" );
	deepEqual( Stem("forfaitz"), "forfaitz" );
	deepEqual( Stem("forgé"), "forg" );
	deepEqual( Stem("forma"), "form" );
	deepEqual( Stem("formaient"), "form" );
	deepEqual( Stem("formait"), "form" );
	deepEqual( Stem("formalisait"), "formalis" );
	deepEqual( Stem("formaliste"), "formal" );
	deepEqual( Stem("formalistes"), "formal" );
	deepEqual( Stem("formalité"), "formal" );
	deepEqual( Stem("formalités"), "formal" );
	deepEqual( Stem("formant"), "form" );
	deepEqual( Stem("formation"), "format" );
	deepEqual( Stem("forme"), "form" );
	deepEqual( Stem("formé"), "form" );
	deepEqual( Stem("formée"), "form" );
	deepEqual( Stem("formées"), "form" );
	deepEqual( Stem("formel"), "formel" );
	deepEqual( Stem("formellement"), "formel" );
	deepEqual( Stem("forment"), "forment" );
	deepEqual( Stem("former"), "form" );
	deepEqual( Stem("formera"), "form" );
	deepEqual( Stem("formèrent"), "form" );
	deepEqual( Stem("formes"), "form" );
	deepEqual( Stem("formés"), "form" );
	deepEqual( Stem("formez"), "form" );
	deepEqual( Stem("formidable"), "formid" );
	deepEqual( Stem("formidables"), "formid" );
	deepEqual( Stem("formose"), "formos" );
	deepEqual( Stem("formula"), "formul" );
	deepEqual( Stem("formule"), "formul" );
	deepEqual( Stem("formulée"), "formul" );
	deepEqual( Stem("formuler"), "formul" );
	deepEqual( Stem("formules"), "formul" );
	deepEqual( Stem("forster"), "forst" );
	deepEqual( Stem("fort"), "fort" );
	deepEqual( Stem("forte"), "fort" );
	deepEqual( Stem("fortement"), "fort" );
	deepEqual( Stem("forteresse"), "forteress" );
	deepEqual( Stem("fortes"), "fort" );
	deepEqual( Stem("forth"), "forth" );
	deepEqual( Stem("fortifications"), "fortif" );
	deepEqual( Stem("fortifié"), "fortifi" );
	deepEqual( Stem("fortifiée"), "fortifi" );
	deepEqual( Stem("fortifiées"), "fortifi" );
	deepEqual( Stem("fortifier"), "fortifi" );
	deepEqual( Stem("fortifions"), "fortif" );
	deepEqual( Stem("forts"), "fort" );
	deepEqual( Stem("fortune"), "fortun" );
	deepEqual( Stem("fortuné"), "fortun" );
	deepEqual( Stem("fortunées"), "fortun" );
	deepEqual( Stem("fortunes"), "fortun" );
	deepEqual( Stem("fortunés"), "fortun" );
	deepEqual( Stem("foscarini"), "foscarin" );
	deepEqual( Stem("fosse"), "foss" );
	deepEqual( Stem("fossé"), "foss" );
	deepEqual( Stem("fosses"), "foss" );
	deepEqual( Stem("fossés"), "foss" );
	deepEqual( Stem("fou"), "fou" );
	deepEqual( Stem("foudre"), "foudr" );
	deepEqual( Stem("foudroyer"), "foudroi" );
	deepEqual( Stem("fouet"), "fouet" );
	deepEqual( Stem("fouettait"), "fouet" );
	deepEqual( Stem("fouetté"), "fouet" );
	deepEqual( Stem("fouetter"), "fouet" );
	deepEqual( Stem("fouetterait"), "fouet" );
	deepEqual( Stem("fougères"), "fouger" );
	deepEqual( Stem("fougueuse"), "fougueux" );
	deepEqual( Stem("fougueux"), "fougueux" );
	deepEqual( Stem("fouillait"), "fouill" );
	deepEqual( Stem("fouillât"), "fouill" );
	deepEqual( Stem("fouille"), "fouill" );
	deepEqual( Stem("fouillé"), "fouill" );
	deepEqual( Stem("fouiller"), "fouill" );
	deepEqual( Stem("fouilles"), "fouill" );
	deepEqual( Stem("fouillés"), "fouill" );
	deepEqual( Stem("fouillez"), "fouill" );
	deepEqual( Stem("foule"), "foul" );
	deepEqual( Stem("foulé"), "foul" );
	deepEqual( Stem("foules"), "foul" );
	deepEqual( Stem("fouqué"), "fouqu" );
	deepEqual( Stem("fourbes"), "fourb" );
	deepEqual( Stem("fourgons"), "fourgon" );
	deepEqual( Stem("fourmilière"), "fourmili" );
	deepEqual( Stem("fourmillait"), "fourmill" );
	deepEqual( Stem("fourmillement"), "fourmill" );
	deepEqual( Stem("fourmis"), "fourm" );
	deepEqual( Stem("fourmont"), "fourmont" );
	deepEqual( Stem("fourneaux"), "fourneau" );
	deepEqual( Stem("fourni"), "fourn" );
	deepEqual( Stem("fournie"), "fourn" );
	deepEqual( Stem("fournir"), "fourn" );
	deepEqual( Stem("fourniront"), "fourn" );
	deepEqual( Stem("fournis"), "fourn" );
	deepEqual( Stem("fournissaient"), "fourn" );
	deepEqual( Stem("fournissait"), "fourn" );
	deepEqual( Stem("fournissant"), "fourn" );
	deepEqual( Stem("fournisseurs"), "fournisseur" );
	deepEqual( Stem("fournit"), "fourn" );
	deepEqual( Stem("fourniture"), "fournitur" );
	deepEqual( Stem("fournitures"), "fournitur" );
	deepEqual( Stem("fourraient"), "fourr" );
	deepEqual( Stem("fourré"), "fourr" );
	deepEqual( Stem("fourreau"), "fourreau" );
	deepEqual( Stem("fourrer"), "fourr" );
	deepEqual( Stem("fourrier"), "fourri" );
	deepEqual( Stem("fourriers"), "fourri" );
	deepEqual( Stem("fourrures"), "fourrur" );
	deepEqual( Stem("fous"), "fous" );
	deepEqual( Stem("fox"), "fox" );
	deepEqual( Stem("foyer"), "foi" );
	deepEqual( Stem("frac"), "frac" );
	deepEqual( Stem("fracas"), "frac" );
	deepEqual( Stem("fracassée"), "fracass" );
	deepEqual( Stem("fracassés"), "fracass" );
	deepEqual( Stem("fragile"), "fragil" );
	deepEqual( Stem("fragments"), "fragment" );
	deepEqual( Stem("fraîche"), "fraîch" );
	deepEqual( Stem("fraîches"), "fraîch" );
	deepEqual( Stem("fraîcheur"), "fraîcheur" );
	deepEqual( Stem("fraîchir"), "fraîch" );
	deepEqual( Stem("fraîchissait"), "fraîch" );
	deepEqual( Stem("fraîchit"), "fraîch" );
	deepEqual( Stem("frailty"), "frailty" );
	deepEqual( Stem("frais"), "frais" );
	deepEqual( Stem("franc"), "franc" );
	deepEqual( Stem("français"), "franc" );
	deepEqual( Stem("française"), "français" );
	deepEqual( Stem("françaises"), "français" );
	deepEqual( Stem("france"), "franc" );
	deepEqual( Stem("francese"), "frances" );
	deepEqual( Stem("francfort"), "francfort" );
	deepEqual( Stem("franche"), "franch" );
	deepEqual( Stem("franchement"), "franch" );
	deepEqual( Stem("franchi"), "franch" );
	deepEqual( Stem("franchie"), "franch" );
	deepEqual( Stem("franchies"), "franch" );
	deepEqual( Stem("franchir"), "franch" );
	deepEqual( Stem("franchis"), "franch" );
	deepEqual( Stem("franchise"), "franchis" );
	deepEqual( Stem("franchissait"), "franch" );
	deepEqual( Stem("franchissant"), "franch" );
	deepEqual( Stem("franchissent"), "franch" );
	deepEqual( Stem("franchit"), "franch" );
	deepEqual( Stem("francis"), "franc" );
	deepEqual( Stem("francisco"), "francisco" );
	deepEqual( Stem("françois"), "françois" );
	deepEqual( Stem("francs"), "franc" );
	deepEqual( Stem("frappa"), "frapp" );
	deepEqual( Stem("frappaient"), "frapp" );
	deepEqual( Stem("frappait"), "frapp" );
	deepEqual( Stem("frappant"), "frapp" );
	deepEqual( Stem("frappante"), "frapp" );
	deepEqual( Stem("frappantes"), "frapp" );
	deepEqual( Stem("frappât"), "frapp" );
	deepEqual( Stem("frappe"), "frapp" );
	deepEqual( Stem("frappé"), "frapp" );
	deepEqual( Stem("frappée"), "frapp" );
	deepEqual( Stem("frappées"), "frapp" );
	deepEqual( Stem("frappent"), "frappent" );
	deepEqual( Stem("frapper"), "frapp" );
	deepEqual( Stem("frapperai"), "frapp" );
	deepEqual( Stem("frappés"), "frapp" );
	deepEqual( Stem("fraternelle"), "fraternel" );
	deepEqual( Stem("fraternisaient"), "fraternis" );
	deepEqual( Stem("fraude"), "fraud" );
	deepEqual( Stem("frayée"), "frai" );
	deepEqual( Stem("frayeur"), "frayeur" );
	deepEqual( Stem("frédéric"), "frédéric" );
	deepEqual( Stem("freins"), "frein" );
	deepEqual( Stem("frêle"), "frêl" );
	deepEqual( Stem("freluquets"), "freluquet" );
	deepEqual( Stem("frémi"), "frem" );
	deepEqual( Stem("frémir"), "frem" );
	deepEqual( Stem("frémis"), "frem" );
	deepEqual( Stem("frémit"), "frem" );
	deepEqual( Stem("fremont"), "fremont" );
	deepEqual( Stem("frênes"), "frên" );
	deepEqual( Stem("frénétique"), "frénet" );
	deepEqual( Stem("fréquemment"), "fréquent" );
	deepEqual( Stem("fréquence"), "fréquenc" );
	deepEqual( Stem("fréquent"), "fréquent" );
	deepEqual( Stem("fréquente"), "fréquent" );
	deepEqual( Stem("fréquenté"), "fréquent" );
	deepEqual( Stem("fréquentée"), "fréquent" );
	deepEqual( Stem("fréquentées"), "fréquent" );
	deepEqual( Stem("fréquenter"), "fréquent" );
	deepEqual( Stem("fréquentes"), "fréquent" );
	deepEqual( Stem("fréquents"), "fréquent" );
	deepEqual( Stem("frère"), "frer" );
	deepEqual( Stem("frères"), "frer" );
	deepEqual( Stem("fresque"), "fresqu" );
	deepEqual( Stem("fret"), "fret" );
	deepEqual( Stem("fréter"), "fret" );
	deepEqual( Stem("frilair"), "frilair" );
	deepEqual( Stem("fringante"), "fring" );
	deepEqual( Stem("friperie"), "friper" );
	deepEqual( Stem("friperies"), "friper" );
	deepEqual( Stem("fripon"), "fripon" );
	deepEqual( Stem("friponner"), "fripon" );
	deepEqual( Stem("friponnerie"), "friponner" );
	deepEqual( Stem("friponneries"), "friponner" );
	deepEqual( Stem("fripons"), "fripon" );
	deepEqual( Stem("frisaient"), "fris" );
	deepEqual( Stem("frisait"), "fris" );
	deepEqual( Stem("friser"), "fris" );
	deepEqual( Stem("frises"), "fris" );
	deepEqual( Stem("frisés"), "fris" );
	deepEqual( Stem("frisson"), "frisson" );
	deepEqual( Stem("frivole"), "frivol" );
	deepEqual( Stem("froc"), "froc" );
	deepEqual( Stem("froid"), "froid" );
	deepEqual( Stem("froide"), "froid" );
	deepEqual( Stem("froidement"), "froid" );
	deepEqual( Stem("froides"), "froid" );
	deepEqual( Stem("froideur"), "froideur" );
	deepEqual( Stem("froids"), "froid" );
	deepEqual( Stem("froissa"), "froiss" );
	deepEqual( Stem("froissant"), "froiss" );
	deepEqual( Stem("froissants"), "froiss" );
	deepEqual( Stem("froissé"), "froiss" );
	deepEqual( Stem("from"), "from" );
	deepEqual( Stem("fromage"), "fromag" );
	deepEqual( Stem("froment"), "froment" );
	deepEqual( Stem("fronçait"), "fronc" );
	deepEqual( Stem("fronçant"), "fronc" );
	deepEqual( Stem("froncé"), "fronc" );
	deepEqual( Stem("froncement"), "fronc" );
	deepEqual( Stem("froncer"), "fronc" );
	deepEqual( Stem("froncera"), "fronc" );
	deepEqual( Stem("fronde"), "frond" );
	deepEqual( Stem("frondeur"), "frondeur" );
	deepEqual( Stem("front"), "front" );
	deepEqual( Stem("frontière"), "fronti" );
	deepEqual( Stem("frontières"), "fronti" );
	deepEqual( Stem("frontins"), "frontin" );
	deepEqual( Stem("fronts"), "front" );
	deepEqual( Stem("frotta"), "frott" );
	deepEqual( Stem("frottait"), "frott" );
	deepEqual( Stem("frottant"), "frott" );
	deepEqual( Stem("frotté"), "frott" );
	deepEqual( Stem("frottements"), "frott" );
	deepEqual( Stem("fruit"), "fruit" );
	deepEqual( Stem("fruitières"), "fruiti" );
	deepEqual( Stem("fruits"), "fruit" );
	deepEqual( Stem("fugitif"), "fugit" );
	deepEqual( Stem("fugitifs"), "fugit" );
	deepEqual( Stem("fui"), "fui" );
	deepEqual( Stem("fuient"), "fuient" );
	deepEqual( Stem("fuir"), "fuir" );
	deepEqual( Stem("fuirais"), "fuir" );
	deepEqual( Stem("fuis"), "fuis" );
	deepEqual( Stem("fuite"), "fuit" );
	deepEqual( Stem("fulgence"), "fulgenc" );
	deepEqual( Stem("fuligineuses"), "fuligin" );
	deepEqual( Stem("fulminante"), "fulmin" );
	deepEqual( Stem("fumaient"), "fum" );
	deepEqual( Stem("fumant"), "fum" );
	deepEqual( Stem("fume"), "fum" );
	deepEqual( Stem("fumée"), "fum" );
	deepEqual( Stem("fumées"), "fum" );
	deepEqual( Stem("fumer"), "fum" );
	deepEqual( Stem("fumeur"), "fumeur" );
	deepEqual( Stem("fumeurs"), "fumeur" );
	deepEqual( Stem("funèbre"), "funebr" );
	deepEqual( Stem("funèbres"), "funebr" );
	deepEqual( Stem("funeste"), "funest" );
	deepEqual( Stem("funestes"), "funest" );
	deepEqual( Stem("fur"), "fur" );
	deepEqual( Stem("furent"), "furent" );
	deepEqual( Stem("fureur"), "fureur" );
	deepEqual( Stem("furia"), "furi" );
	deepEqual( Stem("furibond"), "furibond" );
	deepEqual( Stem("furibonde"), "furibond" );
	deepEqual( Stem("furibondes"), "furibond" );
	deepEqual( Stem("furibonds"), "furibond" );
	deepEqual( Stem("furieuse"), "furieux" );
	deepEqual( Stem("furieusement"), "furieux" );
	deepEqual( Stem("furieuses"), "furieux" );
	deepEqual( Stem("furieux"), "furieux" );
	deepEqual( Stem("furtivement"), "furtiv" );
	deepEqual( Stem("fus"), "fus" );
	deepEqual( Stem("fusait"), "fus" );
	deepEqual( Stem("fuseau"), "fuseau" );
	deepEqual( Stem("fuseaux"), "fuseau" );
	deepEqual( Stem("fusil"), "fusil" );
	deepEqual( Stem("fusiliers"), "fusili" );
	deepEqual( Stem("fusillé"), "fusill" );
	deepEqual( Stem("fusiller"), "fusill" );
	deepEqual( Stem("fusillés"), "fusill" );
	deepEqual( Stem("fusils"), "fusil" );
	deepEqual( Stem("fusse"), "fuss" );
	deepEqual( Stem("fussent"), "fussent" );
	deepEqual( Stem("fussiez"), "fuss" );
	deepEqual( Stem("fut"), "fut" );
	deepEqual( Stem("fût"), "fût" );
	deepEqual( Stem("futé"), "fut" );
	deepEqual( Stem("futilité"), "futil" );
	deepEqual( Stem("futilités"), "futil" );
	deepEqual( Stem("futur"), "futur" );
	deepEqual( Stem("futura"), "futur" );
	deepEqual( Stem("future"), "futur" );
	deepEqual( Stem("futures"), "futur" );
	deepEqual( Stem("futurs"), "futur" );
	deepEqual( Stem("fuyaient"), "fui" );
	deepEqual( Stem("fuyait"), "fui" );
	deepEqual( Stem("fuyant"), "fui" );
	deepEqual( Stem("fuyards"), "fuyard" );
	deepEqual( Stem("fuyez"), "fui" );
	deepEqual( Stem("g"), "g" );
	deepEqual( Stem("gabarit"), "gabar" );
	deepEqual( Stem("gabrielle"), "gabriel" );
	deepEqual( Stem("gâchis"), "gâch" );
	deepEqual( Stem("gage"), "gag" );
	deepEqual( Stem("gages"), "gag" );
	deepEqual( Stem("gageure"), "gageur" );
	deepEqual( Stem("gagna"), "gagn" );
	deepEqual( Stem("gagnaient"), "gagn" );
	deepEqual( Stem("gagnais"), "gagn" );
	deepEqual( Stem("gagnait"), "gagn" );
	deepEqual( Stem("gagnant"), "gagn" );
	deepEqual( Stem("gagne"), "gagn" );
	deepEqual( Stem("gagné"), "gagn" );
	deepEqual( Stem("gagnée"), "gagn" );
	deepEqual( Stem("gagnées"), "gagn" );
	deepEqual( Stem("gagnent"), "gagnent" );
	deepEqual( Stem("gagner"), "gagn" );
	deepEqual( Stem("gagnerai"), "gagn" );
	deepEqual( Stem("gagneras"), "gagn" );
	deepEqual( Stem("gagnèrent"), "gagn" );
	deepEqual( Stem("gagnés"), "gagn" );
	deepEqual( Stem("gagnez"), "gagn" );
	deepEqual( Stem("gagnons"), "gagnon" );
	deepEqual( Stem("gai"), "gai" );
	deepEqual( Stem("gaie"), "gai" );
	deepEqual( Stem("gaiement"), "gai" );
	deepEqual( Stem("gaies"), "gai" );
	deepEqual( Stem("gaieté"), "gaiet" );
	deepEqual( Stem("gaillard"), "gaillard" );
	deepEqual( Stem("gaillardement"), "gaillard" );
	deepEqual( Stem("gaîment"), "gaî" );
	deepEqual( Stem("gain"), "gain" );
	deepEqual( Stem("gains"), "gain" );
	deepEqual( Stem("gais"), "gais" );
	deepEqual( Stem("gaîté"), "gaît" );
	deepEqual( Stem("gala"), "gal" );
	deepEqual( Stem("galamment"), "gal" );
	deepEqual( Stem("galant"), "gal" );
	deepEqual( Stem("galante"), "gal" );
	deepEqual( Stem("galanterie"), "galanter" );
	deepEqual( Stem("galantes"), "gal" );
	deepEqual( Stem("galéas"), "galé" );
	deepEqual( Stem("galère"), "galer" );
	deepEqual( Stem("galères"), "galer" );
	deepEqual( Stem("galerie"), "galer" );
	deepEqual( Stem("galériens"), "galérien" );
	deepEqual( Stem("galeries"), "galer" );
	deepEqual( Stem("galeuse"), "galeux" );
	deepEqual( Stem("galeux"), "galeux" );
	deepEqual( Stem("gallicane"), "gallican" );
	deepEqual( Stem("galon"), "galon" );
	deepEqual( Stem("galonnées"), "galon" );
	deepEqual( Stem("galons"), "galon" );
	deepEqual( Stem("galop"), "galop" );
	deepEqual( Stem("galopa"), "galop" );
	deepEqual( Stem("galopaient"), "galop" );
	deepEqual( Stem("galopait"), "galop" );
	deepEqual( Stem("galopant"), "galop" );
	deepEqual( Stem("galope"), "galop" );
	deepEqual( Stem("galoper"), "galop" );
	deepEqual( Stem("galopera"), "galop" );
	deepEqual( Stem("galoperai"), "galop" );
	deepEqual( Stem("galopez"), "galop" );
	deepEqual( Stem("galvanisées"), "galvanis" );
	deepEqual( Stem("gambadant"), "gambad" );
	deepEqual( Stem("gamins"), "gamin" );
	deepEqual( Stem("gamme"), "gamm" );
	deepEqual( Stem("ganaches"), "ganach" );
	deepEqual( Stem("gange"), "gang" );
	deepEqual( Stem("gangrène"), "gangren" );
	deepEqual( Stem("gangrenée"), "gangren" );
	deepEqual( Stem("gangrenées"), "gangren" );
	deepEqual( Stem("gant"), "gant" );
	deepEqual( Stem("gants"), "gant" );
	deepEqual( Stem("garantie"), "garant" );
	deepEqual( Stem("garanties"), "garant" );
	deepEqual( Stem("garantissait"), "garant" );
	deepEqual( Stem("garçon"), "garçon" );
	deepEqual( Stem("garçons"), "garçon" );
	deepEqual( Stem("garda"), "gard" );
	deepEqual( Stem("gardai"), "gard" );
	deepEqual( Stem("gardaient"), "gard" );
	deepEqual( Stem("gardait"), "gard" );
	deepEqual( Stem("gardant"), "gard" );
	deepEqual( Stem("garde"), "gard" );
	deepEqual( Stem("gardé"), "gard" );
	deepEqual( Stem("gardée"), "gard" );
	deepEqual( Stem("gardées"), "gard" );
	deepEqual( Stem("gardens"), "garden" );
	deepEqual( Stem("garder"), "gard" );
	deepEqual( Stem("gardera"), "gard" );
	deepEqual( Stem("garderai"), "gard" );
	deepEqual( Stem("garderais"), "gard" );
	deepEqual( Stem("garderait"), "gard" );
	deepEqual( Stem("garderas"), "gard" );
	deepEqual( Stem("gardes"), "gard" );
	deepEqual( Stem("gardés"), "gard" );
	deepEqual( Stem("gardez"), "gard" );
	deepEqual( Stem("gardien"), "gardien" );
	deepEqual( Stem("gardiens"), "gardien" );
	deepEqual( Stem("gare"), "gar" );
	deepEqual( Stem("garnement"), "garn" );
	deepEqual( Stem("garni"), "garn" );
	deepEqual( Stem("garnie"), "garn" );
	deepEqual( Stem("garnies"), "garn" );
	deepEqual( Stem("garnis"), "garn" );
	deepEqual( Stem("garnison"), "garnison" );
	deepEqual( Stem("garnit"), "garn" );
	deepEqual( Stem("garrot"), "garrot" );
	deepEqual( Stem("garrotté"), "garrott" );
	deepEqual( Stem("gascons"), "gascon" );
	deepEqual( Stem("gaspilla"), "gaspill" );
	deepEqual( Stem("gâtaient"), "gât" );
	deepEqual( Stem("gâtait"), "gât" );
	deepEqual( Stem("gâte"), "gât" );
	deepEqual( Stem("gâté"), "gât" );
	deepEqual( Stem("gâteau"), "gâteau" );
	deepEqual( Stem("gâtée"), "gât" );
	deepEqual( Stem("gâtées"), "gât" );
	deepEqual( Stem("gâter"), "gât" );
	deepEqual( Stem("gâterait"), "gât" );
	deepEqual( Stem("gâtés"), "gât" );
	deepEqual( Stem("gauche"), "gauch" );
	deepEqual( Stem("gaucherie"), "gaucher" );
	deepEqual( Stem("gaucheries"), "gaucher" );
	deepEqual( Stem("gauches"), "gauch" );
	deepEqual( Stem("gauthier"), "gauthi" );
	deepEqual( Stem("gay"), "gay" );
	deepEqual( Stem("gaz"), "gaz" );
	deepEqual( Stem("gaze"), "gaz" );
	deepEqual( Stem("gazes"), "gaz" );
	deepEqual( Stem("gazette"), "gazet" );
	deepEqual( Stem("gazettes"), "gazet" );
	deepEqual( Stem("gazon"), "gazon" );
	deepEqual( Stem("gazouillements"), "gazouill" );
	deepEqual( Stem("géant"), "gé" );
	deepEqual( Stem("géants"), "gé" );
	deepEqual( Stem("gémi"), "gem" );
	deepEqual( Stem("gémissait"), "gem" );
	deepEqual( Stem("gémissant"), "gem" );
	deepEqual( Stem("gémissements"), "gem" );
	deepEqual( Stem("gênaient"), "gên" );
	deepEqual( Stem("gênait"), "gên" );
	deepEqual( Stem("gênant"), "gên" );
	deepEqual( Stem("gênante"), "gên" );
	deepEqual( Stem("gendarme"), "gendarm" );
	deepEqual( Stem("gendarmer"), "gendarm" );
	deepEqual( Stem("gendarmerie"), "gendarmer" );
	deepEqual( Stem("gendarmes"), "gendarm" );
	deepEqual( Stem("gendre"), "gendr" );
	deepEqual( Stem("gêne"), "gên" );
	deepEqual( Stem("gêné"), "gên" );
	deepEqual( Stem("généalogie"), "généalog" );
	deepEqual( Stem("généalogique"), "généalog" );
	deepEqual( Stem("gênent"), "gênent" );
	deepEqual( Stem("gêner"), "gên" );
	deepEqual( Stem("gênerait"), "gên" );
	deepEqual( Stem("general"), "general" );
	deepEqual( Stem("général"), "général" );
	deepEqual( Stem("générale"), "général" );
	deepEqual( Stem("généralement"), "général" );
	deepEqual( Stem("générales"), "général" );
	deepEqual( Stem("généraux"), "général" );
	deepEqual( Stem("généreuse"), "géner" );
	deepEqual( Stem("généreusement"), "géner" );
	deepEqual( Stem("généreuses"), "géner" );
	deepEqual( Stem("généreux"), "géner" );
	deepEqual( Stem("générosité"), "généros" );
	deepEqual( Stem("gênes"), "gên" );
	deepEqual( Stem("genèse"), "genes" );
	deepEqual( Stem("genève"), "genev" );
	deepEqual( Stem("genevois"), "genevois" );
	deepEqual( Stem("génie"), "gen" );
	deepEqual( Stem("génies"), "gen" );
	deepEqual( Stem("genlis"), "genl" );
	deepEqual( Stem("génoise"), "génois" );
	deepEqual( Stem("genoux"), "genoux" );
	deepEqual( Stem("genre"), "genr" );
	deepEqual( Stem("genres"), "genr" );
	deepEqual( Stem("gens"), "gen" );
	deepEqual( Stem("gentil"), "gentil" );
	deepEqual( Stem("gentilhomme"), "gentilhomm" );
	deepEqual( Stem("gentille"), "gentill" );
	deepEqual( Stem("gentils"), "gentil" );
	deepEqual( Stem("gentilshommes"), "gentilshomm" );
	deepEqual( Stem("gentle"), "gentl" );
	deepEqual( Stem("gentleman"), "gentleman" );
	deepEqual( Stem("gentlemen"), "gentlemen" );
	deepEqual( Stem("géographie"), "géograph" );
	deepEqual( Stem("geôlier"), "geôli" );
	deepEqual( Stem("geôlière"), "geôli" );
	deepEqual( Stem("geôliers"), "geôli" );
	deepEqual( Stem("géomètre"), "géometr" );
	deepEqual( Stem("géométrie"), "géometr" );
	deepEqual( Stem("george"), "georg" );
	deepEqual( Stem("géorgiques"), "géorgiqu" );
	deepEqual( Stem("gerbes"), "gerb" );
	deepEqual( Stem("germain"), "germain" );
	deepEqual( Stem("géronimo"), "géronimo" );
	deepEqual( Stem("geste"), "gest" );
	deepEqual( Stem("gestes"), "gest" );
	deepEqual( Stem("gesticulant"), "gesticul" );
	deepEqual( Stem("ghari"), "ghar" );
	deepEqual( Stem("ghâtes"), "ghât" );
	deepEqual( Stem("ghazepour"), "ghazepour" );
	deepEqual( Stem("gherardi"), "gherard" );
	deepEqual( Stem("ghisleri"), "ghisler" );
	deepEqual( Stem("ghisolfi"), "ghisolf" );
	deepEqual( Stem("ghita"), "ghit" );
	deepEqual( Stem("gia"), "gi" );
	deepEqual( Stem("giacomo"), "giacomo" );
	deepEqual( Stem("gibelotte"), "gibelott" );
	deepEqual( Stem("giberne"), "gibern" );
	deepEqual( Stem("gibier"), "gibi" );
	deepEqual( Stem("gibraltar"), "gibraltar" );
	deepEqual( Stem("gigantesque"), "gigantesqu" );
	deepEqual( Stem("gigantesques"), "gigantesqu" );
	deepEqual( Stem("gilet"), "gilet" );
	deepEqual( Stem("gilets"), "gilet" );
	deepEqual( Stem("giletti"), "gilet" );
	deepEqual( Stem("gin"), "gin" );
	deepEqual( Stem("gina"), "gin" );
	deepEqual( Stem("giovanni"), "giovann" );
	deepEqual( Stem("giovannone"), "giovannon" );
	deepEqual( Stem("giovita"), "giovit" );
	deepEqual( Stem("girafe"), "giraf" );
	deepEqual( Stem("giration"), "girat" );
	deepEqual( Stem("giraud"), "giraud" );
	deepEqual( Stem("girodet"), "girodet" );
	deepEqual( Stem("girofliers"), "girofli" );
	deepEqual( Stem("girondin"), "girondin" );
	deepEqual( Stem("gisaient"), "gis" );
	deepEqual( Stem("gisant"), "gis" );
	deepEqual( Stem("gît"), "gît" );
	deepEqual( Stem("giulia"), "giuli" );
	deepEqual( Stem("giuseppe"), "giusepp" );
	deepEqual( Stem("give"), "giv" );
	deepEqual( Stem("glaçaient"), "glac" );
	deepEqual( Stem("glaçait"), "glac" );
	deepEqual( Stem("glace"), "glac" );
	deepEqual( Stem("glacé"), "glac" );
	deepEqual( Stem("glacée"), "glac" );
	deepEqual( Stem("glacées"), "glac" );
	deepEqual( Stem("glacer"), "glac" );
	deepEqual( Stem("glaces"), "glac" );
	deepEqual( Stem("glacial"), "glacial" );
	deepEqual( Stem("glaciale"), "glacial" );
	deepEqual( Stem("glances"), "glanc" );
	deepEqual( Stem("glapissante"), "glap" );
	deepEqual( Stem("glasgow"), "glasgow" );
	deepEqual( Stem("glissa"), "gliss" );
	deepEqual( Stem("glissaient"), "gliss" );
	deepEqual( Stem("glissait"), "gliss" );
	deepEqual( Stem("glissant"), "gliss" );
	deepEqual( Stem("glisse"), "gliss" );
	deepEqual( Stem("glissé"), "gliss" );
	deepEqual( Stem("glissent"), "glissent" );
	deepEqual( Stem("glisser"), "gliss" );
	deepEqual( Stem("glissera"), "gliss" );
	deepEqual( Stem("glissons"), "glisson" );
	deepEqual( Stem("globe"), "glob" );
	deepEqual( Stem("gloire"), "gloir" );
	deepEqual( Stem("glorieux"), "glorieux" );
	deepEqual( Stem("glory"), "glory" );
	deepEqual( Stem("gloutons"), "glouton" );
	deepEqual( Stem("glu"), "glu" );
	deepEqual( Stem("goa"), "go" );
	deepEqual( Stem("gobelet"), "gobelet" );
	deepEqual( Stem("godart"), "godart" );
	deepEqual( Stem("godavery"), "godavery" );
	deepEqual( Stem("godille"), "godill" );
	deepEqual( Stem("goélette"), "goélet" );
	deepEqual( Stem("goélettes"), "goélet" );
	deepEqual( Stem("goethe"), "goeth" );
	deepEqual( Stem("goguenard"), "goguenard" );
	deepEqual( Stem("goguenards"), "goguenard" );
	deepEqual( Stem("golconde"), "golcond" );
	deepEqual( Stem("goldoni"), "goldon" );
	deepEqual( Stem("golfe"), "golf" );
	deepEqual( Stem("golfes"), "golf" );
	deepEqual( Stem("golgonda"), "golgond" );
	deepEqual( Stem("golgonde"), "golgond" );
	deepEqual( Stem("gonds"), "gond" );
	deepEqual( Stem("gongs"), "gong" );
	deepEqual( Stem("gonzo"), "gonzo" );
	deepEqual( Stem("gorge"), "gorg" );
	deepEqual( Stem("gorgées"), "gorg" );
	deepEqual( Stem("gorges"), "gorg" );
	deepEqual( Stem("gothard"), "gothard" );
	deepEqual( Stem("gothique"), "gothiqu" );
	deepEqual( Stem("gothiques"), "gothiqu" );
	deepEqual( Stem("gouailler"), "gouaill" );
	deepEqual( Stem("goudron"), "goudron" );
	deepEqual( Stem("goulée"), "goul" );
	deepEqual( Stem("gour"), "gour" );
	deepEqual( Stem("gourmande"), "gourmand" );
	deepEqual( Stem("gourmandise"), "gourmandis" );
	deepEqual( Stem("gourmets"), "gourmet" );
	deepEqual( Stem("gousset"), "gousset" );
	deepEqual( Stem("goût"), "goût" );
	deepEqual( Stem("goûta"), "goût" );
	deepEqual( Stem("goûtant"), "goût" );
	deepEqual( Stem("goûte"), "goût" );
	deepEqual( Stem("goûté"), "goût" );
	deepEqual( Stem("goûtées"), "goût" );
	deepEqual( Stem("goûter"), "goût" );
	deepEqual( Stem("goûterait"), "goût" );
	deepEqual( Stem("goûtés"), "goût" );
	deepEqual( Stem("goûts"), "goût" );
	deepEqual( Stem("goutte"), "goutt" );
	deepEqual( Stem("gouttes"), "goutt" );
	deepEqual( Stem("gouvernail"), "gouvernail" );
	deepEqual( Stem("gouvernait"), "gouvern" );
	deepEqual( Stem("gouverne"), "gouvern" );
	deepEqual( Stem("gouverné"), "gouvern" );
	deepEqual( Stem("gouvernement"), "gouvern" );
	deepEqual( Stem("gouvernements"), "gouvern" );
	deepEqual( Stem("gouvernent"), "gouvernent" );
	deepEqual( Stem("gouverner"), "gouvern" );
	deepEqual( Stem("gouverneriez"), "gouvern" );
	deepEqual( Stem("gouverneur"), "gouverneur" );
	deepEqual( Stem("gouverneurs"), "gouverneur" );
	deepEqual( Stem("gouvion"), "gouvion" );
	deepEqual( Stem("government"), "government" );
	deepEqual( Stem("grâce"), "grâc" );
	deepEqual( Stem("grâces"), "grâc" );
	deepEqual( Stem("gracieuse"), "gracieux" );
	deepEqual( Stem("gracieusement"), "gracieux" );
	deepEqual( Stem("gracieuses"), "gracieux" );
	deepEqual( Stem("gracieux"), "gracieux" );
	deepEqual( Stem("grade"), "grad" );
	deepEqual( Stem("graduée"), "gradu" );
	deepEqual( Stem("graduellement"), "graduel" );
	deepEqual( Stem("grain"), "grain" );
	deepEqual( Stem("grains"), "grain" );
	deepEqual( Stem("graisse"), "graiss" );
	deepEqual( Stem("graisser"), "graiss" );
	deepEqual( Stem("grand"), "grand" );
	deepEqual( Stem("grande"), "grand" );
	deepEqual( Stem("grandement"), "grand" );
	deepEqual( Stem("grandes"), "grand" );
	deepEqual( Stem("grandeur"), "grandeur" );
	deepEqual( Stem("grandeurs"), "grandeur" );
	deepEqual( Stem("grandi"), "grand" );
	deepEqual( Stem("grandie"), "grand" );
	deepEqual( Stem("grandiose"), "grandios" );
	deepEqual( Stem("grandis"), "grand" );
	deepEqual( Stem("grandit"), "grand" );
	deepEqual( Stem("grands"), "grand" );
	deepEqual( Stem("granit"), "gran" );
	deepEqual( Stem("grant"), "grant" );
	deepEqual( Stem("granvelle"), "granvel" );
	deepEqual( Stem("grappe"), "grapp" );
	deepEqual( Stem("gras"), "gras" );
	deepEqual( Stem("grasse"), "grass" );
	deepEqual( Stem("gratification"), "gratif" );
	deepEqual( Stem("gratifié"), "gratifi" );
	deepEqual( Stem("gratis"), "grat" );
	deepEqual( Stem("gratius"), "gratius" );
	deepEqual( Stem("gratter"), "gratt" );
	deepEqual( Stem("gratuite"), "gratuit" );
	deepEqual( Stem("gratuitement"), "gratuit" );
	deepEqual( Stem("grave"), "grav" );
	deepEqual( Stem("gravé"), "grav" );
	deepEqual( Stem("gravement"), "grav" );
	deepEqual( Stem("graver"), "grav" );
	deepEqual( Stem("graves"), "grav" );
	deepEqual( Stem("graveur"), "graveur" );
	deepEqual( Stem("gravir"), "grav" );
	deepEqual( Stem("gravissaient"), "grav" );
	deepEqual( Stem("gravitaient"), "gravit" );
	deepEqual( Stem("gravité"), "gravit" );
	deepEqual( Stem("gravures"), "gravur" );
	deepEqual( Stem("gray"), "gray" );
	deepEqual( Stem("gré"), "gré" );
	deepEqual( Stem("great"), "great" );
	deepEqual( Stem("greatly"), "greatly" );
	deepEqual( Stem("grec"), "grec" );
	deepEqual( Stem("grèce"), "grec" );
	deepEqual( Stem("grecque"), "grecqu" );
	deepEqual( Stem("grecques"), "grecqu" );
	deepEqual( Stem("gredin"), "gredin" );
	deepEqual( Stem("gréé"), "gré" );
	deepEqual( Stem("green"), "green" );
	deepEqual( Stem("greenwich"), "greenwich" );
	deepEqual( Stem("gréer"), "gré" );
	deepEqual( Stem("greffier"), "greffi" );
	deepEqual( Stem("grégoire"), "grégoir" );
	deepEqual( Stem("grêles"), "grêl" );
	deepEqual( Stem("grenade"), "grenad" );
	deepEqual( Stem("grenadier"), "grenadi" );
	deepEqual( Stem("grenadiers"), "grenadi" );
	deepEqual( Stem("grenier"), "greni" );
	deepEqual( Stem("grève"), "grev" );
	deepEqual( Stem("grianta"), "griant" );
	deepEqual( Stem("griefs"), "grief" );
	deepEqual( Stem("grièvement"), "griev" );
	deepEqual( Stem("griffe"), "griff" );
	deepEqual( Stem("griffonnages"), "griffonnag" );
	deepEqual( Stem("griffonnait"), "griffon" );
	deepEqual( Stem("grillages"), "grillag" );
	deepEqual( Stem("grille"), "grill" );
	deepEqual( Stem("grillé"), "grill" );
	deepEqual( Stem("grillée"), "grill" );
	deepEqual( Stem("grillées"), "grill" );
	deepEqual( Stem("grilles"), "grill" );
	deepEqual( Stem("grillo"), "grillo" );
	deepEqual( Stem("grimaçant"), "grimac" );
	deepEqual( Stem("grimaçante"), "grimac" );
	deepEqual( Stem("grimaçantes"), "grimac" );
	deepEqual( Stem("grimaçants"), "grimac" );
	deepEqual( Stem("grimace"), "grimac" );
	deepEqual( Stem("grimaces"), "grimac" );
	deepEqual( Stem("grimer"), "grim" );
	deepEqual( Stem("grimpait"), "grimp" );
	deepEqual( Stem("grimpant"), "grimp" );
	deepEqual( Stem("gringalet"), "gringalet" );
	deepEqual( Stem("gris"), "gris" );
	deepEqual( Stem("grisâtre"), "grisâtr" );
	deepEqual( Stem("grise"), "gris" );
	deepEqual( Stem("grisé"), "gris" );
	deepEqual( Stem("grisonnants"), "grison" );
	deepEqual( Stem("grivelé"), "grivel" );
	deepEqual( Stem("grogeot"), "grogeot" );
	deepEqual( Stem("grognement"), "grogn" );
	deepEqual( Stem("grognon"), "grognon" );
	deepEqual( Stem("gronda"), "grond" );
	deepEqual( Stem("grondait"), "grond" );
	deepEqual( Stem("grondant"), "grond" );
	deepEqual( Stem("gronde"), "grond" );
	deepEqual( Stem("grondé"), "grond" );
	deepEqual( Stem("grondée"), "grond" );
	deepEqual( Stem("gronder"), "grond" );
	deepEqual( Stem("gronderez"), "grond" );
	deepEqual( Stem("grondez"), "grond" );
	deepEqual( Stem("groom"), "groom" );
	deepEqual( Stem("gros"), "gros" );
	deepEqual( Stem("groseilles"), "groseil" );
	deepEqual( Stem("grosse"), "gross" );
	deepEqual( Stem("grosses"), "gross" );
	deepEqual( Stem("grossesse"), "grossess" );
	deepEqual( Stem("grosseur"), "grosseur" );
	deepEqual( Stem("grossie"), "gross" );
	deepEqual( Stem("grossier"), "grossi" );
	deepEqual( Stem("grossière"), "grossi" );
	deepEqual( Stem("grossièrement"), "grossi" );
	deepEqual( Stem("grossières"), "grossi" );
	deepEqual( Stem("grossièreté"), "grossièret" );
	deepEqual( Stem("grossièretés"), "grossièret" );
	deepEqual( Stem("grossiers"), "grossi" );
	deepEqual( Stem("grotesque"), "grotesqu" );
	deepEqual( Stem("grotesques"), "grotesqu" );
	deepEqual( Stem("grotte"), "grott" );
	deepEqual( Stem("grottes"), "grott" );
	deepEqual( Stem("grouillait"), "grouill" );
	deepEqual( Stem("groupe"), "group" );
	deepEqual( Stem("groupes"), "group" );
	deepEqual( Stem("grues"), "gru" );
	deepEqual( Stem("guardate"), "guardat" );
	deepEqual( Stem("guèbres"), "guebr" );
	deepEqual( Stem("guenilles"), "guenill" );
	deepEqual( Stem("guépards"), "guépard" );
	deepEqual( Stem("guerchin"), "guerchin" );
	deepEqual( Stem("guère"), "guer" );
	deepEqual( Stem("guéri"), "guer" );
	deepEqual( Stem("guérin"), "guérin" );
	deepEqual( Stem("guérir"), "guer" );
	deepEqual( Stem("guérison"), "guérison" );
	deepEqual( Stem("guérissez"), "guer" );
	deepEqual( Stem("guérit"), "guer" );
	deepEqual( Stem("guérite"), "guérit" );
	deepEqual( Stem("guérites"), "guérit" );
	deepEqual( Stem("guerre"), "guerr" );
	deepEqual( Stem("guerres"), "guerr" );
	deepEqual( Stem("guerriers"), "guerri" );
	deepEqual( Stem("guess"), "guess" );
	deepEqual( Stem("guet"), "guet" );
	deepEqual( Stem("guetta"), "guet" );
	deepEqual( Stem("guettait"), "guet" );
	deepEqual( Stem("guette"), "guet" );
	deepEqual( Stem("guettent"), "guettent" );
	deepEqual( Stem("guetteurs"), "guetteur" );
	deepEqual( Stem("gueule"), "gueul" );
	deepEqual( Stem("gueux"), "gueux" );
	deepEqual( Stem("gui"), "gui" );
	deepEqual( Stem("guichet"), "guichet" );
	deepEqual( Stem("guichetier"), "guicheti" );
	deepEqual( Stem("guidant"), "guid" );
	deepEqual( Stem("guide"), "guid" );
	deepEqual( Stem("guidé"), "guid" );
	deepEqual( Stem("guidée"), "guid" );
	deepEqual( Stem("guider"), "guid" );
	deepEqual( Stem("guidés"), "guid" );
	deepEqual( Stem("guidon"), "guidon" );
	deepEqual( Stem("guignon"), "guignon" );
	deepEqual( Stem("guillotinaient"), "guillotin" );
	deepEqual( Stem("guillotine"), "guillotin" );
	deepEqual( Stem("guillotiné"), "guillotin" );
	deepEqual( Stem("guillotiner"), "guillotin" );
	deepEqual( Stem("guillotinés"), "guillotin" );
	deepEqual( Stem("guindé"), "guind" );
	deepEqual( Stem("guinder"), "guind" );
	deepEqual( Stem("guinée"), "guin" );
	deepEqual( Stem("guinées"), "guin" );
	deepEqual( Stem("guise"), "guis" );
	deepEqual( Stem("guitare"), "guitar" );
	deepEqual( Stem("gustave"), "gustav" );
	deepEqual( Stem("guy"), "guy" );
	deepEqual( Stem("gymnase"), "gymnas" );
	deepEqual( Stem("gymnaste"), "gymnast" );
	deepEqual( Stem("gymnastes"), "gymnast" );
	deepEqual( Stem("gymnastique"), "gymnast" );
	deepEqual( Stem("h"), "h" );
	deepEqual( Stem("ha"), "ha" );
	deepEqual( Stem("habile"), "habil" );
	deepEqual( Stem("habilement"), "habil" );
	deepEqual( Stem("habiles"), "habil" );
	deepEqual( Stem("habileté"), "habilet" );
	deepEqual( Stem("habilla"), "habill" );
	deepEqual( Stem("habillait"), "habill" );
	deepEqual( Stem("habillant"), "habill" );
	deepEqual( Stem("habille"), "habill" );
	deepEqual( Stem("habillé"), "habill" );
	deepEqual( Stem("habillée"), "habill" );
	deepEqual( Stem("habillement"), "habill" );
	deepEqual( Stem("habiller"), "habill" );
	deepEqual( Stem("habillés"), "habill" );
	deepEqual( Stem("habit"), "hab" );
	deepEqual( Stem("habitais"), "habit" );
	deepEqual( Stem("habitait"), "habit" );
	deepEqual( Stem("habitant"), "habit" );
	deepEqual( Stem("habitants"), "habit" );
	deepEqual( Stem("habitation"), "habit" );
	deepEqual( Stem("habite"), "habit" );
	deepEqual( Stem("habité"), "habit" );
	deepEqual( Stem("habitée"), "habit" );
	deepEqual( Stem("habiter"), "habit" );
	deepEqual( Stem("habiterai"), "habit" );
	deepEqual( Stem("habiteras"), "habit" );
	deepEqual( Stem("habités"), "habit" );
	deepEqual( Stem("habitez"), "habit" );
	deepEqual( Stem("habits"), "habit" );
	deepEqual( Stem("habitude"), "habitud" );
	deepEqual( Stem("habitudes"), "habitud" );
	deepEqual( Stem("habituée"), "habitu" );
	deepEqual( Stem("habituel"), "habituel" );
	deepEqual( Stem("habituelle"), "habituel" );
	deepEqual( Stem("habituellement"), "habituel" );
	deepEqual( Stem("habituelles"), "habituel" );
	deepEqual( Stem("habituels"), "habituel" );
	deepEqual( Stem("habitués"), "habitu" );
	deepEqual( Stem("hache"), "hach" );
	deepEqual( Stem("haches"), "hach" );
	deepEqual( Stem("hagard"), "hagard" );
	deepEqual( Stem("hagards"), "hagard" );
	deepEqual( Stem("haï"), "haï" );
	deepEqual( Stem("haie"), "hai" );
	deepEqual( Stem("haies"), "hai" );
	deepEqual( Stem("haillons"), "haillon" );
	deepEqual( Stem("haine"), "hain" );
	deepEqual( Stem("haines"), "hain" );
	deepEqual( Stem("haineuse"), "haineux" );
	deepEqual( Stem("haineuses"), "haineux" );
	deepEqual( Stem("hair"), "hair" );
	deepEqual( Stem("haïr"), "haïr" );
	deepEqual( Stem("haïraient"), "haïr" );
	deepEqual( Stem("hais"), "hais" );
	deepEqual( Stem("haïssaient"), "haïss" );
	deepEqual( Stem("haïssait"), "haïss" );
	deepEqual( Stem("haïssent"), "haïssent" );
	deepEqual( Stem("hait"), "hait" );
	deepEqual( Stem("hâla"), "hâl" );
	deepEqual( Stem("halage"), "halag" );
	deepEqual( Stem("hâle"), "hâl" );
	deepEqual( Stem("haleine"), "halein" );
	deepEqual( Stem("haletant"), "halet" );
	deepEqual( Stem("halleck"), "halleck" );
	deepEqual( Stem("halte"), "halt" );
	deepEqual( Stem("haltes"), "halt" );
	deepEqual( Stem("hambourg"), "hambourg" );
	deepEqual( Stem("hambourgeois"), "hambourgeois" );
	deepEqual( Stem("hambourgeoise"), "hambourgeois" );
	deepEqual( Stem("hameau"), "hameau" );
	deepEqual( Stem("hampe"), "hamp" );
	deepEqual( Stem("hanche"), "hanch" );
	deepEqual( Stem("hand"), "hand" );
	deepEqual( Stem("hang"), "hang" );
	deepEqual( Stem("hangar"), "hangar" );
	deepEqual( Stem("hantée"), "hant" );
	deepEqual( Stem("hantées"), "hant" );
	deepEqual( Stem("happy"), "happy" );
	deepEqual( Stem("harangua"), "harangu" );
	deepEqual( Stem("haranguer"), "harangu" );
	deepEqual( Stem("harassés"), "harass" );
	deepEqual( Stem("hardes"), "hard" );
	deepEqual( Stem("hardi"), "hard" );
	deepEqual( Stem("hardie"), "hard" );
	deepEqual( Stem("hardies"), "hard" );
	deepEqual( Stem("hardiesse"), "hardiess" );
	deepEqual( Stem("hardiment"), "hard" );
	deepEqual( Stem("hardis"), "hard" );
	deepEqual( Stem("harmonie"), "harmon" );
	deepEqual( Stem("harmonieusement"), "harmoni" );
	deepEqual( Stem("harmonieux"), "harmoni" );
	deepEqual( Stem("harmoniques"), "harmon" );
	deepEqual( Stem("harpe"), "harp" );
	deepEqual( Stem("hasard"), "hasard" );
	deepEqual( Stem("hasarda"), "hasard" );
	deepEqual( Stem("hasardaient"), "hasard" );
	deepEqual( Stem("hasarde"), "hasard" );
	deepEqual( Stem("hasardé"), "hasard" );
	deepEqual( Stem("hasarder"), "hasard" );
	deepEqual( Stem("hasardera"), "hasard" );
	deepEqual( Stem("hasardeuse"), "hasard" );
	deepEqual( Stem("hasardeuses"), "hasard" );
	deepEqual( Stem("hasardeux"), "hasard" );
	deepEqual( Stem("hasards"), "hasard" );
	deepEqual( Stem("hâta"), "hât" );
	deepEqual( Stem("hâtait"), "hât" );
	deepEqual( Stem("hâte"), "hât" );
	deepEqual( Stem("hâté"), "hât" );
	deepEqual( Stem("hâter"), "hât" );
	deepEqual( Stem("hâtèrent"), "hât" );
	deepEqual( Stem("hâtez"), "hât" );
	deepEqual( Stem("hâtons"), "hâton" );
	deepEqual( Stem("haubans"), "hauban" );
	deepEqual( Stem("haubert"), "haubert" );
	deepEqual( Stem("haus"), "haus" );
	deepEqual( Stem("haussant"), "hauss" );
	deepEqual( Stem("haussé"), "hauss" );
	deepEqual( Stem("haussement"), "hauss" );
	deepEqual( Stem("haut"), "haut" );
	deepEqual( Stem("hautain"), "hautain" );
	deepEqual( Stem("hautaine"), "hautain" );
	deepEqual( Stem("haute"), "haut" );
	deepEqual( Stem("hautement"), "haut" );
	deepEqual( Stem("hautes"), "haut" );
	deepEqual( Stem("hauteur"), "hauteur" );
	deepEqual( Stem("hauteurs"), "hauteur" );
	deepEqual( Stem("hauts"), "haut" );
	deepEqual( Stem("havre"), "havr" );
	deepEqual( Stem("hay"), "hay" );
	deepEqual( Stem("hayez"), "hai" );
	deepEqual( Stem("he"), "he" );
	deepEqual( Stem("hé"), "hé" );
	deepEqual( Stem("heaviest"), "heaviest" );
	deepEqual( Stem("hébété"), "hébet" );
	deepEqual( Stem("hébétés"), "hébet" );
	deepEqual( Stem("hein"), "hein" );
	deepEqual( Stem("héla"), "hel" );
	deepEqual( Stem("hélas"), "hel" );
	deepEqual( Stem("hélène"), "hélen" );
	deepEqual( Stem("hélice"), "hélic" );
	deepEqual( Stem("héloïse"), "héloïs" );
	deepEqual( Stem("helvétie"), "helvet" );
	deepEqual( Stem("hémisphère"), "hémispher" );
	deepEqual( Stem("henné"), "hen" );
	deepEqual( Stem("hennissant"), "hen" );
	deepEqual( Stem("hennissement"), "hen" );
	deepEqual( Stem("hennissements"), "hen" );
	deepEqual( Stem("hennit"), "hen" );
	deepEqual( Stem("henri"), "henr" );
	deepEqual( Stem("henriet"), "henriet" );
	deepEqual( Stem("henrietta"), "henriet" );
	deepEqual( Stem("henry"), "henry" );
	deepEqual( Stem("her"), "her" );
	deepEqual( Stem("héraut"), "héraut" );
	deepEqual( Stem("hérauts"), "héraut" );
	deepEqual( Stem("herbe"), "herb" );
	deepEqual( Stem("herbes"), "herb" );
	deepEqual( Stem("hercule"), "hercul" );
	deepEqual( Stem("herculéenne"), "herculéen" );
	deepEqual( Stem("hère"), "her" );
	deepEqual( Stem("héréditaire"), "héréditair" );
	deepEqual( Stem("hérédité"), "héred" );
	deepEqual( Stem("hères"), "her" );
	deepEqual( Stem("hérésie"), "héres" );
	deepEqual( Stem("hérésies"), "héres" );
	deepEqual( Stem("hérisse"), "her" );
	deepEqual( Stem("hérissé"), "hériss" );
	deepEqual( Stem("hérissée"), "hériss" );
	deepEqual( Stem("hérissées"), "hériss" );
	deepEqual( Stem("hérissés"), "hériss" );
	deepEqual( Stem("héritage"), "héritag" );
	deepEqual( Stem("hérité"), "hérit" );
	deepEqual( Stem("héritier"), "hériti" );
	deepEqual( Stem("héritière"), "hériti" );
	deepEqual( Stem("hermétiquement"), "hermet" );
	deepEqual( Stem("hernani"), "hernan" );
	deepEqual( Stem("hérodiade"), "hérodiad" );
	deepEqual( Stem("hérodiades"), "hérodiad" );
	deepEqual( Stem("héroïne"), "héroïn" );
	deepEqual( Stem("héroïque"), "héroïqu" );
	deepEqual( Stem("héroïquement"), "héroïqu" );
	deepEqual( Stem("héroïques"), "héroïqu" );
	deepEqual( Stem("héroïsme"), "héroïsm" );
	deepEqual( Stem("héron"), "héron" );
	deepEqual( Stem("héros"), "héros" );
	deepEqual( Stem("hers"), "her" );
	deepEqual( Stem("hésita"), "hésit" );
	deepEqual( Stem("hésitait"), "hésit" );
	deepEqual( Stem("hésitant"), "hésit" );
	deepEqual( Stem("hésitation"), "hésit" );
	deepEqual( Stem("hésite"), "hésit" );
	deepEqual( Stem("hésité"), "hésit" );
	deepEqual( Stem("hésiter"), "hésit" );
	deepEqual( Stem("hésiterais"), "hésit" );
	deepEqual( Stem("hésiteront"), "hésit" );
	deepEqual( Stem("hésitiez"), "hésit" );
	deepEqual( Stem("hêtre"), "hêtr" );
	deepEqual( Stem("hêtres"), "hêtr" );
	deepEqual( Stem("heure"), "heur" );
	deepEqual( Stem("heures"), "heur" );
	deepEqual( Stem("heureuse"), "heureux" );
	deepEqual( Stem("heureusement"), "heureux" );
	deepEqual( Stem("heureuses"), "heureux" );
	deepEqual( Stem("heureux"), "heureux" );
	deepEqual( Stem("heurtaient"), "heurt" );
	deepEqual( Stem("heurte"), "heurt" );
	deepEqual( Stem("heurter"), "heurt" );
	deepEqual( Stem("hic"), "hic" );
	deepEqual( Stem("hideuse"), "hideux" );
	deepEqual( Stem("hideuses"), "hideux" );
	deepEqual( Stem("hideux"), "hideux" );
	deepEqual( Stem("hier"), "hi" );
	deepEqual( Stem("hiérarchie"), "hiérarch" );
	deepEqual( Stem("hill"), "hill" );
	deepEqual( Stem("himalaya"), "himalai" );
	deepEqual( Stem("hindous"), "hindous" );
	deepEqual( Stem("hip"), "hip" );
	deepEqual( Stem("hippolyte"), "hippolyt" );
	deepEqual( Stem("his"), "his" );
	deepEqual( Stem("hissa"), "hiss" );
	deepEqual( Stem("hissé"), "hiss" );
	deepEqual( Stem("hissées"), "hiss" );
	deepEqual( Stem("histoire"), "histoir" );
	deepEqual( Stem("histoires"), "histoir" );
	deepEqual( Stem("historien"), "historien" );
	deepEqual( Stem("historiens"), "historien" );
	deepEqual( Stem("historique"), "histor" );
	deepEqual( Stem("historiques"), "histor" );
	deepEqual( Stem("histrion"), "histrion" );
	deepEqual( Stem("hitch"), "hitch" );
	deepEqual( Stem("hiver"), "hiv" );
	deepEqual( Stem("ho"), "ho" );
	deepEqual( Stem("hobbes"), "hobb" );
	deepEqual( Stem("hobereau"), "hobereau" );
	deepEqual( Stem("hobereaux"), "hobereau" );
	deepEqual( Stem("hoc"), "hoc" );
	deepEqual( Stem("hochant"), "hoch" );
	deepEqual( Stem("hoche"), "hoch" );
	deepEqual( Stem("holà"), "holà" );
	deepEqual( Stem("holland"), "holland" );
	deepEqual( Stem("hollandais"), "holland" );
	deepEqual( Stem("hollandaises"), "hollandais" );
	deepEqual( Stem("hollande"), "holland" );
	deepEqual( Stem("homélie"), "homel" );
	deepEqual( Stem("homélies"), "homel" );
	deepEqual( Stem("homère"), "homer" );
	deepEqual( Stem("hommage"), "hommag" );
	deepEqual( Stem("hommages"), "hommag" );
	deepEqual( Stem("homme"), "homm" );
	deepEqual( Stem("hommes"), "homm" );
	deepEqual( Stem("hong"), "hong" );
	deepEqual( Stem("hongrois"), "hongrois" );
	deepEqual( Stem("honnête"), "honnêt" );
	deepEqual( Stem("honnêtes"), "honnêt" );
	deepEqual( Stem("honnêteté"), "honnêtet" );
	deepEqual( Stem("honnêtetés"), "honnêtet" );
	deepEqual( Stem("honneur"), "honneur" );
	deepEqual( Stem("honneurs"), "honneur" );
	deepEqual( Stem("honorabilité"), "honor" );
	deepEqual( Stem("honorable"), "honor" );
	deepEqual( Stem("honorables"), "honor" );
	deepEqual( Stem("honore"), "honor" );
	deepEqual( Stem("honoré"), "honor" );
	deepEqual( Stem("honorée"), "honor" );
	deepEqual( Stem("honorent"), "honorent" );
	deepEqual( Stem("honorer"), "honor" );
	deepEqual( Stem("honorera"), "honor" );
	deepEqual( Stem("honorés"), "honor" );
	deepEqual( Stem("honte"), "hont" );
	deepEqual( Stem("honteuse"), "honteux" );
	deepEqual( Stem("honteusement"), "honteux" );
	deepEqual( Stem("honteux"), "honteux" );
	deepEqual( Stem("honur"), "honur" );
	deepEqual( Stem("hook"), "hook" );
	deepEqual( Stem("hôpital"), "hôpital" );
	deepEqual( Stem("hôpitaux"), "hôpital" );
	deepEqual( Stem("horace"), "horac" );
	deepEqual( Stem("horde"), "hord" );
	deepEqual( Stem("horions"), "horion" );
	deepEqual( Stem("horizon"), "horizon" );
	deepEqual( Stem("horloge"), "horlog" );
	deepEqual( Stem("horlogerie"), "horloger" );
	deepEqual( Stem("horloges"), "horlog" );
	deepEqual( Stem("horreur"), "horreur" );
	deepEqual( Stem("horreurs"), "horreur" );
	deepEqual( Stem("horrible"), "horribl" );
	deepEqual( Stem("horriblement"), "horribl" );
	deepEqual( Stem("horribles"), "horribl" );
	deepEqual( Stem("hors"), "hor" );
	deepEqual( Stem("hospice"), "hospic" );
	deepEqual( Stem("hospitalité"), "hospital" );
	deepEqual( Stem("hostie"), "host" );
	deepEqual( Stem("hostile"), "hostil" );
	deepEqual( Stem("hostiles"), "hostil" );
	deepEqual( Stem("hostilité"), "hostil" );
	deepEqual( Stem("hôte"), "hôt" );
	deepEqual( Stem("hôtel"), "hôtel" );
	deepEqual( Stem("hôtels"), "hôtel" );
	deepEqual( Stem("hôtes"), "hôt" );
	deepEqual( Stem("hôtesse"), "hôtess" );
	deepEqual( Stem("hôtesses"), "hôtess" );
	deepEqual( Stem("hotte"), "hott" );
	deepEqual( Stem("hottentots"), "hottentot" );
	deepEqual( Stem("hougly"), "hougly" );
	deepEqual( Stem("houille"), "houill" );
	deepEqual( Stem("houle"), "houl" );
	deepEqual( Stem("houles"), "houl" );
	deepEqual( Stem("houleuse"), "houleux" );
	deepEqual( Stem("housards"), "housard" );
	deepEqual( Stem("house"), "hous" );
	deepEqual( Stem("housse"), "houss" );
	deepEqual( Stem("how"), "how" );
	deepEqual( Stem("hudson"), "hudson" );
	deepEqual( Stem("hugo"), "hugo" );
	deepEqual( Stem("hui"), "hui" );
	deepEqual( Stem("huile"), "huil" );
	deepEqual( Stem("huilé"), "huil" );
	deepEqual( Stem("huissier"), "huissi" );
	deepEqual( Stem("huit"), "huit" );
	deepEqual( Stem("huitième"), "huitiem" );
	deepEqual( Stem("huîtres"), "huîtr" );
	deepEqual( Stem("humain"), "humain" );
	deepEqual( Stem("humaine"), "humain" );
	deepEqual( Stem("humainement"), "humain" );
	deepEqual( Stem("humaines"), "humain" );
	deepEqual( Stem("humains"), "humain" );
	deepEqual( Stem("humait"), "hum" );
	deepEqual( Stem("humaniste"), "human" );
	deepEqual( Stem("humanité"), "human" );
	deepEqual( Stem("humanités"), "human" );
	deepEqual( Stem("humble"), "humbl" );
	deepEqual( Stem("humblement"), "humbl" );
	deepEqual( Stem("humbles"), "humbl" );
	deepEqual( Stem("humboldt"), "humboldt" );
	deepEqual( Stem("hume"), "hum" );
	deepEqual( Stem("humer"), "hum" );
	deepEqual( Stem("humeur"), "humeur" );
	deepEqual( Stem("humide"), "humid" );
	deepEqual( Stem("humides"), "humid" );
	deepEqual( Stem("humidité"), "humid" );
	deepEqual( Stem("humiliant"), "humili" );
	deepEqual( Stem("humiliante"), "humili" );
	deepEqual( Stem("humiliantes"), "humili" );
	deepEqual( Stem("humiliants"), "humili" );
	deepEqual( Stem("humiliation"), "humili" );
	deepEqual( Stem("humiliations"), "humili" );
	deepEqual( Stem("humilie"), "humil" );
	deepEqual( Stem("humilié"), "humili" );
	deepEqual( Stem("humiliée"), "humili" );
	deepEqual( Stem("humilient"), "humilient" );
	deepEqual( Stem("humilier"), "humili" );
	deepEqual( Stem("humiliez"), "humil" );
	deepEqual( Stem("humilité"), "humil" );
	deepEqual( Stem("hune"), "hun" );
	deepEqual( Stem("huniers"), "huni" );
	deepEqual( Stem("hurlante"), "hurl" );
	deepEqual( Stem("hurlements"), "hurl" );
	deepEqual( Stem("hurlent"), "hurlent" );
	deepEqual( Stem("hurler"), "hurl" );
	deepEqual( Stem("hurrah"), "hurrah" );
	deepEqual( Stem("hurrahs"), "hurrah" );
	deepEqual( Stem("hussard"), "hussard" );
	deepEqual( Stem("hussarde"), "hussard" );
	deepEqual( Stem("hussards"), "hussard" );
	deepEqual( Stem("hutte"), "hutt" );
	deepEqual( Stem("huttes"), "hutt" );
	deepEqual( Stem("hvram"), "hvram" );
	deepEqual( Stem("hydrogène"), "hydrogen" );
	deepEqual( Stem("hydrographique"), "hydrograph" );
	deepEqual( Stem("hyères"), "hyer" );
	deepEqual( Stem("hypocrisie"), "hypocris" );
	deepEqual( Stem("hypocrisies"), "hypocris" );
	deepEqual( Stem("hypocrite"), "hypocrit" );
	deepEqual( Stem("hypocrites"), "hypocrit" );
	deepEqual( Stem("hypogées"), "hypog" );
	deepEqual( Stem("hypothèse"), "hypothes" );
	deepEqual( Stem("i"), "i" );
	deepEqual( Stem("iago"), "iago" );
	deepEqual( Stem("ici"), "ici" );
	deepEqual( Stem("ideal"), "ideal" );
	deepEqual( Stem("idéal"), "idéal" );
	deepEqual( Stem("idéale"), "idéal" );
	deepEqual( Stem("idée"), "idé" );
	deepEqual( Stem("idées"), "idé" );
	deepEqual( Stem("identique"), "ident" );
	deepEqual( Stem("identité"), "ident" );
	deepEqual( Stem("idiots"), "idiot" );
	deepEqual( Stem("idolâtrie"), "idolâtr" );
	deepEqual( Stem("idole"), "idol" );
	deepEqual( Stem("ignares"), "ignar" );
	deepEqual( Stem("ignes"), "igne" );
	deepEqual( Stem("ignoble"), "ignobl" );
	deepEqual( Stem("ignobles"), "ignobl" );
	deepEqual( Stem("ignominie"), "ignomin" );
	deepEqual( Stem("ignoraient"), "ignor" );
	deepEqual( Stem("ignorais"), "ignor" );
	deepEqual( Stem("ignorait"), "ignor" );
	deepEqual( Stem("ignorance"), "ignor" );
	deepEqual( Stem("ignorant"), "ignor" );
	deepEqual( Stem("ignorante"), "ignor" );
	deepEqual( Stem("ignore"), "ignor" );
	deepEqual( Stem("ignorent"), "ignorent" );
	deepEqual( Stem("ignorer"), "ignor" );
	deepEqual( Stem("ignores"), "ignor" );
	deepEqual( Stem("ignoriez"), "ignor" );
	deepEqual( Stem("ii"), "ii" );
	deepEqual( Stem("iii"), "iii" );
	deepEqual( Stem("il"), "il" );
	deepEqual( Stem("île"), "île" );
	deepEqual( Stem("îles"), "île" );
	deepEqual( Stem("illicites"), "illicit" );
	deepEqual( Stem("illimité"), "illim" );
	deepEqual( Stem("illimitée"), "illimit" );
	deepEqual( Stem("illinois"), "illinois" );
	deepEqual( Stem("illisible"), "illisibl" );
	deepEqual( Stem("illisibles"), "illisibl" );
	deepEqual( Stem("illumina"), "illumin" );
	deepEqual( Stem("illumination"), "illumin" );
	deepEqual( Stem("illuminé"), "illumin" );
	deepEqual( Stem("illuminée"), "illumin" );
	deepEqual( Stem("illuminer"), "illumin" );
	deepEqual( Stem("illusion"), "illus" );
	deepEqual( Stem("illusions"), "illus" );
	deepEqual( Stem("illustrated"), "illustrated" );
	deepEqual( Stem("illustration"), "illustr" );
	deepEqual( Stem("illustre"), "illustr" );
	deepEqual( Stem("illustrer"), "illustr" );
	deepEqual( Stem("illustrissime"), "illustrissim" );
	deepEqual( Stem("îlot"), "îlot" );
	deepEqual( Stem("îlots"), "îlot" );
	deepEqual( Stem("ils"), "il" );
	deepEqual( Stem("image"), "imag" );
	deepEqual( Stem("images"), "imag" );
	deepEqual( Stem("imagina"), "imagin" );
	deepEqual( Stem("imaginaient"), "imagin" );
	deepEqual( Stem("imaginaire"), "imaginair" );
	deepEqual( Stem("imaginaires"), "imaginair" );
	deepEqual( Stem("imaginais"), "imagin" );
	deepEqual( Stem("imaginait"), "imagin" );
	deepEqual( Stem("imaginant"), "imagin" );
	deepEqual( Stem("imagination"), "imagin" );
	deepEqual( Stem("imaginations"), "imagin" );
	deepEqual( Stem("imaginative"), "imagin" );
	deepEqual( Stem("imagine"), "imagin" );
	deepEqual( Stem("imaginé"), "imagin" );
	deepEqual( Stem("imaginer"), "imagin" );
	deepEqual( Stem("imbécile"), "imbécil" );
	deepEqual( Stem("imbéciles"), "imbécil" );
	deepEqual( Stem("imita"), "imit" );
	deepEqual( Stem("imitait"), "imit" );
	deepEqual( Stem("imitant"), "imit" );
	deepEqual( Stem("imitation"), "imit" );
	deepEqual( Stem("imité"), "imit" );
	deepEqual( Stem("imitées"), "imit" );
	deepEqual( Stem("imiter"), "imit" );
	deepEqual( Stem("imman"), "imman" );
	deepEqual( Stem("immanquable"), "immanqu" );
	deepEqual( Stem("immanquablement"), "immanqu" );
	deepEqual( Stem("immédiat"), "immédiat" );
	deepEqual( Stem("immédiate"), "immédiat" );
	deepEqual( Stem("immédiatement"), "immédiat" );
	deepEqual( Stem("immédiates"), "immédiat" );
	deepEqual( Stem("immédiats"), "immédiat" );
	deepEqual( Stem("immense"), "immens" );
	deepEqual( Stem("immensément"), "immens" );
	deepEqual( Stem("immenses"), "immens" );
	deepEqual( Stem("immensité"), "immens" );
	deepEqual( Stem("imminence"), "imminent" );
	deepEqual( Stem("imminent"), "imminent" );
	deepEqual( Stem("immobile"), "immobil" );
	deepEqual( Stem("immobiles"), "immobil" );
	deepEqual( Stem("immolé"), "immol" );
	deepEqual( Stem("immoler"), "immol" );
	deepEqual( Stem("immonde"), "immond" );
	deepEqual( Stem("immoral"), "immoral" );
	deepEqual( Stem("immorales"), "immoral" );
	deepEqual( Stem("immoralité"), "immoral" );
	deepEqual( Stem("immortalisé"), "immortalis" );
	deepEqual( Stem("immortaliser"), "immortalis" );
	deepEqual( Stem("immortel"), "immortel" );
	deepEqual( Stem("immuable"), "immuabl" );
	deepEqual( Stem("imola"), "imol" );
	deepEqual( Stem("impardonnable"), "impardon" );
	deepEqual( Stem("impardonnables"), "impardon" );
	deepEqual( Stem("imparfait"), "imparf" );
	deepEqual( Stem("imparfaite"), "imparfait" );
	deepEqual( Stem("imparfaitement"), "imparfait" );
	deepEqual( Stem("impassibilité"), "impassibil" );
	deepEqual( Stem("impassible"), "impassibl" );
	deepEqual( Stem("impatience"), "impatient" );
	deepEqual( Stem("impatient"), "impatient" );
	deepEqual( Stem("impatienta"), "impatient" );
	deepEqual( Stem("impatientait"), "impatient" );
	deepEqual( Stem("impatientant"), "impatient" );
	deepEqual( Stem("impatientante"), "impatient" );
	deepEqual( Stem("impatiente"), "impatient" );
	deepEqual( Stem("impatienté"), "impatient" );
	deepEqual( Stem("impatientée"), "impatient" );
	deepEqual( Stem("impatienter"), "impatient" );
	deepEqual( Stem("impatientera"), "impatient" );
	deepEqual( Stem("impayable"), "impai" );
	deepEqual( Stem("impénétrable"), "impénetr" );
	deepEqual( Stem("impératif"), "imper" );
	deepEqual( Stem("impératrice"), "imper" );
	deepEqual( Stem("imperceptibles"), "imperceptibl" );
	deepEqual( Stem("imperfection"), "imperfect" );
	deepEqual( Stem("impérial"), "impérial" );
	deepEqual( Stem("impériale"), "impérial" );
	deepEqual( Stem("impériales"), "impérial" );
	deepEqual( Stem("impérieuse"), "impéri" );
	deepEqual( Stem("impérieusement"), "impéri" );
	deepEqual( Stem("impérieux"), "impéri" );
	deepEqual( Stem("impertinence"), "impertinent" );
	deepEqual( Stem("impertinences"), "impertinent" );
	deepEqual( Stem("impertinent"), "impertinent" );
	deepEqual( Stem("impertinente"), "impertinent" );
	deepEqual( Stem("impertinentes"), "impertinent" );
	deepEqual( Stem("imperturbable"), "imperturb" );
	deepEqual( Stem("imperturbablement"), "imperturb" );
	deepEqual( Stem("impétueusement"), "impétu" );
	deepEqual( Stem("impie"), "impi" );
	deepEqual( Stem("impies"), "impi" );
	deepEqual( Stem("impiété"), "impiet" );
	deepEqual( Stem("impitoyable"), "impitoi" );
	deepEqual( Stem("impitoyablement"), "impitoi" );
	deepEqual( Stem("implacable"), "implac" );
	deepEqual( Stem("implicite"), "implicit" );
	deepEqual( Stem("implora"), "implor" );
	deepEqual( Stem("implorer"), "implor" );
	deepEqual( Stem("impoli"), "impol" );
	deepEqual( Stem("impolie"), "impol" );
	deepEqual( Stem("impoliment"), "impol" );
	deepEqual( Stem("importait"), "import" );
	deepEqual( Stem("importance"), "import" );
	deepEqual( Stem("important"), "import" );
	deepEqual( Stem("importante"), "import" );
	deepEqual( Stem("importantes"), "import" );
	deepEqual( Stem("importants"), "import" );
	deepEqual( Stem("importe"), "import" );
	deepEqual( Stem("importée"), "import" );
	deepEqual( Stem("importent"), "importent" );
	deepEqual( Stem("importés"), "import" );
	deepEqual( Stem("importun"), "importun" );
	deepEqual( Stem("importuna"), "importun" );
	deepEqual( Stem("importune"), "importun" );
	deepEqual( Stem("importunités"), "importun" );
	deepEqual( Stem("importuns"), "importun" );
	deepEqual( Stem("imposa"), "impos" );
	deepEqual( Stem("imposaient"), "impos" );
	deepEqual( Stem("imposait"), "impos" );
	deepEqual( Stem("imposant"), "impos" );
	deepEqual( Stem("imposante"), "impos" );
	deepEqual( Stem("impose"), "impos" );
	deepEqual( Stem("imposé"), "impos" );
	deepEqual( Stem("imposée"), "impos" );
	deepEqual( Stem("imposées"), "impos" );
	deepEqual( Stem("imposent"), "imposent" );
	deepEqual( Stem("imposer"), "impos" );
	deepEqual( Stem("imposera"), "impos" );
	deepEqual( Stem("imposèrent"), "impos" );
	deepEqual( Stem("imposés"), "impos" );
	deepEqual( Stem("impositions"), "imposit" );
	deepEqual( Stem("impossibilité"), "impossibil" );
	deepEqual( Stem("impossible"), "impossibl" );
	deepEqual( Stem("impossibles"), "impossibl" );
	deepEqual( Stem("impraticable"), "impratic" );
	deepEqual( Stem("imprécations"), "imprec" );
	deepEqual( Stem("imprégnait"), "impregn" );
	deepEqual( Stem("imprégné"), "impregn" );
	deepEqual( Stem("impresario"), "impresario" );
	deepEqual( Stem("imprescriptibles"), "imprescriptibl" );
	deepEqual( Stem("impression"), "impress" );
	deepEqual( Stem("impressionna"), "impression" );
	deepEqual( Stem("impressionnait"), "impression" );
	deepEqual( Stem("impressions"), "impress" );
	deepEqual( Stem("imprévu"), "imprévu" );
	deepEqual( Stem("imprévue"), "imprévu" );
	deepEqual( Stem("imprévues"), "imprévu" );
	deepEqual( Stem("imprima"), "imprim" );
	deepEqual( Stem("imprimait"), "imprim" );
	deepEqual( Stem("imprime"), "imprim" );
	deepEqual( Stem("imprimé"), "imprim" );
	deepEqual( Stem("imprimée"), "imprim" );
	deepEqual( Stem("imprimées"), "imprim" );
	deepEqual( Stem("imprimer"), "imprim" );
	deepEqual( Stem("imprimerie"), "imprimer" );
	deepEqual( Stem("imprimés"), "imprim" );
	deepEqual( Stem("imprimeur"), "imprimeur" );
	deepEqual( Stem("imprimeurs"), "imprimeur" );
	deepEqual( Stem("improbable"), "improb" );
	deepEqual( Stem("improbables"), "improb" );
	deepEqual( Stem("impromptu"), "impromptu" );
	deepEqual( Stem("impromptue"), "impromptu" );
	deepEqual( Stem("impropre"), "impropr" );
	deepEqual( Stem("improprement"), "impropr" );
	deepEqual( Stem("improvisais"), "improvis" );
	deepEqual( Stem("improvisait"), "improvis" );
	deepEqual( Stem("improvisée"), "improvis" );
	deepEqual( Stem("improvisées"), "improvis" );
	deepEqual( Stem("improvises"), "improvis" );
	deepEqual( Stem("improvisés"), "improvis" );
	deepEqual( Stem("improviste"), "improv" );
	deepEqual( Stem("imprudemment"), "imprudent" );
	deepEqual( Stem("imprudence"), "imprudent" );
	deepEqual( Stem("imprudences"), "imprudent" );
	deepEqual( Stem("imprudent"), "imprudent" );
	deepEqual( Stem("imprudente"), "imprudent" );
	deepEqual( Stem("imprudentes"), "imprudent" );
	deepEqual( Stem("imprudents"), "imprudent" );
	deepEqual( Stem("impudence"), "impudent" );
	deepEqual( Stem("impudent"), "impudent" );
	deepEqual( Stem("impudents"), "impudent" );
	deepEqual( Stem("impuissante"), "impuiss" );
	deepEqual( Stem("impuissants"), "impuiss" );
	deepEqual( Stem("impulsion"), "impuls" );
	deepEqual( Stem("impunément"), "impun" );
	deepEqual( Stem("impunité"), "impun" );
	deepEqual( Stem("imputant"), "imput" );
	deepEqual( Stem("imputations"), "imput" );
	deepEqual( Stem("imputées"), "imput" );
	deepEqual( Stem("imputer"), "imput" );
	deepEqual( Stem("in"), "in" );
	deepEqual( Stem("ina"), "ina" );
	deepEqual( Stem("inaccessible"), "inaccessibl" );
	deepEqual( Stem("inaccessibles"), "inaccessibl" );
	deepEqual( Stem("inaccoutumé"), "inaccoutum" );
	deepEqual( Stem("inaccoutumée"), "inaccoutum" );
	deepEqual( Stem("inaccoutumées"), "inaccoutum" );
	deepEqual( Stem("inaction"), "inact" );
	deepEqual( Stem("inadmissible"), "inadmissibl" );
	deepEqual( Stem("inadmissibles"), "inadmissibl" );
	deepEqual( Stem("inaltérable"), "inalter" );
	deepEqual( Stem("inamovible"), "inamovibl" );
	deepEqual( Stem("inanimé"), "inanim" );
	deepEqual( Stem("inanimée"), "inanim" );
	deepEqual( Stem("inanimés"), "inanim" );
	deepEqual( Stem("inaperçu"), "inaperçu" );
	deepEqual( Stem("inaperçue"), "inaperçu" );
	deepEqual( Stem("inaperçues"), "inaperçu" );
	deepEqual( Stem("inarticulés"), "inarticul" );
	deepEqual( Stem("inattaquable"), "inattaqu" );
	deepEqual( Stem("inattaquables"), "inattaqu" );
	deepEqual( Stem("inattendu"), "inattendu" );
	deepEqual( Stem("inattendue"), "inattendu" );
	deepEqual( Stem("inattention"), "inattent" );
	deepEqual( Stem("inauguration"), "inaugur" );
	deepEqual( Stem("inaugurer"), "inaugur" );
	deepEqual( Stem("incapable"), "incap" );
	deepEqual( Stem("incarne"), "incarn" );
	deepEqual( Stem("incarnée"), "incarn" );
	deepEqual( Stem("incartade"), "incartad" );
	deepEqual( Stem("incedo"), "incedo" );
	deepEqual( Stem("incendiaires"), "incendiair" );
	deepEqual( Stem("incendie"), "incend" );
	deepEqual( Stem("incendies"), "incend" );
	deepEqual( Stem("incertain"), "incertain" );
	deepEqual( Stem("incertaine"), "incertain" );
	deepEqual( Stem("incertains"), "incertain" );
	deepEqual( Stem("incertitude"), "incertitud" );
	deepEqual( Stem("incertitudes"), "incertitud" );
	deepEqual( Stem("incessamment"), "incess" );
	deepEqual( Stem("incessant"), "incess" );
	deepEqual( Stem("incessants"), "incess" );
	deepEqual( Stem("inceste"), "incest" );
	deepEqual( Stem("incident"), "incident" );
	deepEqual( Stem("incidenter"), "incident" );
	deepEqual( Stem("incidents"), "incident" );
	deepEqual( Stem("incisif"), "incis" );
	deepEqual( Stem("incisions"), "incis" );
	deepEqual( Stem("incisive"), "incis" );
	deepEqual( Stem("incisives"), "incis" );
	deepEqual( Stem("inclina"), "inclin" );
	deepEqual( Stem("inclinaient"), "inclin" );
	deepEqual( Stem("inclination"), "inclin" );
	deepEqual( Stem("incliné"), "inclin" );
	deepEqual( Stem("inclinée"), "inclin" );
	deepEqual( Stem("inclinera"), "inclin" );
	deepEqual( Stem("inclus"), "inclus" );
	deepEqual( Stem("incluse"), "inclus" );
	deepEqual( Stem("incognito"), "incognito" );
	deepEqual( Stem("incommensurable"), "incommensur" );
	deepEqual( Stem("incommode"), "incommod" );
	deepEqual( Stem("incommodée"), "incommod" );
	deepEqual( Stem("incommodes"), "incommod" );
	deepEqual( Stem("incommodité"), "incommod" );
	deepEqual( Stem("incomodo"), "incomodo" );
	deepEqual( Stem("incompatible"), "incompatibl" );
	deepEqual( Stem("incompatibles"), "incompatibl" );
	deepEqual( Stem("incomplètes"), "incomplet" );
	deepEqual( Stem("incongruité"), "incongru" );
	deepEqual( Stem("inconnu"), "inconnu" );
	deepEqual( Stem("inconnue"), "inconnu" );
	deepEqual( Stem("inconnus"), "inconnus" );
	deepEqual( Stem("inconsciemment"), "inconscient" );
	deepEqual( Stem("inconsciente"), "inconscient" );
	deepEqual( Stem("inconsidérée"), "inconsider" );
	deepEqual( Stem("inconsolable"), "inconsol" );
	deepEqual( Stem("inconstance"), "inconst" );
	deepEqual( Stem("inconstant"), "inconst" );
	deepEqual( Stem("inconstante"), "inconst" );
	deepEqual( Stem("incontestable"), "incontest" );
	deepEqual( Stem("incontestablement"), "incontest" );
	deepEqual( Stem("inconvenance"), "inconven" );
	deepEqual( Stem("inconvenant"), "inconven" );
	deepEqual( Stem("inconvenante"), "inconven" );
	deepEqual( Stem("inconvenantes"), "inconven" );
	deepEqual( Stem("inconvénient"), "inconvénient" );
	deepEqual( Stem("inconvénients"), "inconvénient" );
	deepEqual( Stem("incorporer"), "incorpor" );
	deepEqual( Stem("incrédule"), "incrédul" );
	deepEqual( Stem("incrédulité"), "incrédul" );
	deepEqual( Stem("incriminait"), "incrimin" );
	deepEqual( Stem("incroyable"), "incroi" );
	deepEqual( Stem("incroyables"), "incroi" );
	deepEqual( Stem("incrusta"), "incrust" );
	deepEqual( Stem("incruster"), "incrust" );
	deepEqual( Stem("incrustés"), "incrust" );
	deepEqual( Stem("incurie"), "incur" );
	deepEqual( Stem("inde"), "inde" );
	deepEqual( Stem("indécence"), "indécent" );
	deepEqual( Stem("indécent"), "indécent" );
	deepEqual( Stem("indécentes"), "indécent" );
	deepEqual( Stem("indécents"), "indécent" );
	deepEqual( Stem("indéchiffrable"), "indéchiffr" );
	deepEqual( Stem("indécis"), "indec" );
	deepEqual( Stem("indécise"), "indécis" );
	deepEqual( Stem("indéfini"), "indéfin" );
	deepEqual( Stem("indéfinissable"), "indéfiniss" );
	deepEqual( Stem("indélicatesse"), "indélicatess" );
	deepEqual( Stem("indemne"), "indemn" );
	deepEqual( Stem("indépendamment"), "indépend" );
	deepEqual( Stem("independance"), "independ" );
	deepEqual( Stem("indépendance"), "indépend" );
	deepEqual( Stem("indépendant"), "indépend" );
	deepEqual( Stem("indépendante"), "indépend" );
	deepEqual( Stem("indépendantes"), "indépend" );
	deepEqual( Stem("indépendants"), "indépend" );
	deepEqual( Stem("indes"), "inde" );
	deepEqual( Stem("indian"), "indian" );
	deepEqual( Stem("indiana"), "indian" );
	deepEqual( Stem("indication"), "indiqu" );
	deepEqual( Stem("indications"), "indiqu" );
	deepEqual( Stem("indices"), "indic" );
	deepEqual( Stem("indicible"), "indicibl" );
	deepEqual( Stem("indicibles"), "indicibl" );
	deepEqual( Stem("indien"), "indien" );
	deepEqual( Stem("indienne"), "indien" );
	deepEqual( Stem("indiens"), "indien" );
	deepEqual( Stem("indifférence"), "indifférent" );
	deepEqual( Stem("indifférent"), "indifférent" );
	deepEqual( Stem("indifférents"), "indifférent" );
	deepEqual( Stem("indigène"), "indigen" );
	deepEqual( Stem("indigènes"), "indigen" );
	deepEqual( Stem("indigna"), "indign" );
	deepEqual( Stem("indignation"), "indign" );
	deepEqual( Stem("indignations"), "indign" );
	deepEqual( Stem("indigne"), "indign" );
	deepEqual( Stem("indigné"), "indign" );
	deepEqual( Stem("indignée"), "indign" );
	deepEqual( Stem("indignement"), "indign" );
	deepEqual( Stem("indigner"), "indign" );
	deepEqual( Stem("indignes"), "indign" );
	deepEqual( Stem("indignés"), "indign" );
	deepEqual( Stem("indigo"), "indigo" );
	deepEqual( Stem("indiqua"), "indiqu" );
	deepEqual( Stem("indiquaient"), "indiqu" );
	deepEqual( Stem("indiquait"), "indiqu" );
	deepEqual( Stem("indiquant"), "indiqu" );
	deepEqual( Stem("indique"), "indiqu" );
	deepEqual( Stem("indiqué"), "indiqu" );
	deepEqual( Stem("indiquée"), "indiqu" );
	deepEqual( Stem("indiquent"), "indiquent" );
	deepEqual( Stem("indiquer"), "indiqu" );
	deepEqual( Stem("indiquera"), "indiqu" );
	deepEqual( Stem("indiquerait"), "indiqu" );
	deepEqual( Stem("indiqués"), "indiqu" );
	deepEqual( Stem("indiquez"), "indiqu" );
	deepEqual( Stem("indirect"), "indirect" );
	deepEqual( Stem("indirecte"), "indirect" );
	deepEqual( Stem("indirectement"), "indirect" );
	deepEqual( Stem("indirectes"), "indirect" );
	deepEqual( Stem("indiscret"), "indiscret" );
	deepEqual( Stem("indiscrète"), "indiscret" );
	deepEqual( Stem("indiscrètes"), "indiscret" );
	deepEqual( Stem("indiscrétion"), "indiscret" );
	deepEqual( Stem("indiscrétions"), "indiscret" );
	deepEqual( Stem("indiscrets"), "indiscret" );
	deepEqual( Stem("indispensable"), "indispens" );
	deepEqual( Stem("indispensables"), "indispens" );
	deepEqual( Stem("indisposé"), "indispos" );
	deepEqual( Stem("indisposée"), "indispos" );
	deepEqual( Stem("indisposition"), "indisposit" );
	deepEqual( Stem("indistincte"), "indistinct" );
	deepEqual( Stem("individu"), "individu" );
	deepEqual( Stem("individuelle"), "individuel" );
	deepEqual( Stem("individus"), "individus" );
	deepEqual( Stem("indou"), "indou" );
	deepEqual( Stem("indoue"), "indou" );
	deepEqual( Stem("indoues"), "indou" );
	deepEqual( Stem("indous"), "indous" );
	deepEqual( Stem("indubitable"), "indubit" );
	deepEqual( Stem("indue"), "indu" );
	deepEqual( Stem("indulgence"), "indulgent" );
	deepEqual( Stem("indulgent"), "indulgent" );
	deepEqual( Stem("indulgente"), "indulgent" );
	deepEqual( Stem("indulgents"), "indulgent" );
	deepEqual( Stem("indus"), "indus" );
	deepEqual( Stem("industrie"), "industr" );
	deepEqual( Stem("industriel"), "industriel" );
	deepEqual( Stem("industrielle"), "industriel" );
	deepEqual( Stem("industriels"), "industriel" );
	deepEqual( Stem("industrieux"), "industri" );
	deepEqual( Stem("inébranlable"), "inébranl" );
	deepEqual( Stem("inedit"), "ined" );
	deepEqual( Stem("inédit"), "ined" );
	deepEqual( Stem("ineffaçable"), "ineffac" );
	deepEqual( Stem("inégal"), "inégal" );
	deepEqual( Stem("inégalement"), "inégal" );
	deepEqual( Stem("inégales"), "inégal" );
	deepEqual( Stem("inélégantes"), "inéleg" );
	deepEqual( Stem("inéprouvé"), "inéprouv" );
	deepEqual( Stem("inepte"), "inept" );
	deepEqual( Stem("ineptes"), "inept" );
	deepEqual( Stem("inépuisable"), "inépuis" );
	deepEqual( Stem("inerte"), "inert" );
	deepEqual( Stem("inespéré"), "inesper" );
	deepEqual( Stem("inévitablement"), "inévit" );
	deepEqual( Stem("inévitables"), "inévit" );
	deepEqual( Stem("inexactitude"), "inexactitud" );
	deepEqual( Stem("inexécutable"), "inexécut" );
	deepEqual( Stem("inexorable"), "inexor" );
	deepEqual( Stem("inexpérimenté"), "inexpériment" );
	deepEqual( Stem("inexplicable"), "inexplic" );
	deepEqual( Stem("inexprimable"), "inexprim" );
	deepEqual( Stem("inexprimables"), "inexprim" );
	deepEqual( Stem("inextricable"), "inextric" );
	deepEqual( Stem("infâme"), "infâm" );
	deepEqual( Stem("infâmes"), "infâm" );
	deepEqual( Stem("infamie"), "infam" );
	deepEqual( Stem("infamies"), "infam" );
	deepEqual( Stem("infanterie"), "infanter" );
	deepEqual( Stem("infatigable"), "infatig" );
	deepEqual( Stem("inférieur"), "inférieur" );
	deepEqual( Stem("inférieure"), "inférieur" );
	deepEqual( Stem("inférieures"), "inférieur" );
	deepEqual( Stem("inférieurs"), "inférieur" );
	deepEqual( Stem("infériorité"), "inférior" );
	deepEqual( Stem("infernale"), "infernal" );
	deepEqual( Stem("infidèle"), "infidel" );
	deepEqual( Stem("infidélité"), "infidel" );
	deepEqual( Stem("infini"), "infin" );
	deepEqual( Stem("infinie"), "infin" );
	deepEqual( Stem("infinies"), "infin" );
	deepEqual( Stem("infiniment"), "infin" );
	deepEqual( Stem("infinis"), "infin" );
	deepEqual( Stem("infinité"), "infin" );
	deepEqual( Stem("infirmerie"), "infirmer" );
	deepEqual( Stem("infirmités"), "infirm" );
	deepEqual( Stem("inflammation"), "inflamm" );
	deepEqual( Stem("infléchit"), "inflech" );
	deepEqual( Stem("infligé"), "inflig" );
	deepEqual( Stem("infligée"), "inflig" );
	deepEqual( Stem("infliger"), "inflig" );
	deepEqual( Stem("influence"), "influenc" );
	deepEqual( Stem("influencer"), "influenc" );
	deepEqual( Stem("influent"), "influent" );
	deepEqual( Stem("influents"), "influent" );
	deepEqual( Stem("influer"), "influ" );
	deepEqual( Stem("informa"), "inform" );
	deepEqual( Stem("informait"), "inform" );
	deepEqual( Stem("informations"), "inform" );
	deepEqual( Stem("informée"), "inform" );
	deepEqual( Stem("informes"), "inform" );
	deepEqual( Stem("informés"), "inform" );
	deepEqual( Stem("infortune"), "infortun" );
	deepEqual( Stem("infortuné"), "infortun" );
	deepEqual( Stem("infortunée"), "infortun" );
	deepEqual( Stem("infortunes"), "infortun" );
	deepEqual( Stem("infortunés"), "infortun" );
	deepEqual( Stem("infraction"), "infract" );
	deepEqual( Stem("infusion"), "infus" );
	deepEqual( Stem("ingénieur"), "ingénieur" );
	deepEqual( Stem("ingénieurs"), "ingénieur" );
	deepEqual( Stem("ingénieuse"), "ingéni" );
	deepEqual( Stem("ingénieusement"), "ingéni" );
	deepEqual( Stem("ingénieuses"), "ingéni" );
	deepEqual( Stem("ingénieux"), "ingéni" );
	deepEqual( Stem("ingénu"), "ingénu" );
	deepEqual( Stem("ingrat"), "ingrat" );
	deepEqual( Stem("ingrate"), "ingrat" );
	deepEqual( Stem("ingratitude"), "ingratitud" );
	deepEqual( Stem("inhabileté"), "inhabilet" );
	deepEqual( Stem("inhabitée"), "inhabit" );
	deepEqual( Stem("inhalation"), "inhal" );
	deepEqual( Stem("inhérent"), "inhérent" );
	deepEqual( Stem("inhérente"), "inhérent" );
	deepEqual( Stem("inhumaine"), "inhumain" );
	deepEqual( Stem("inhumé"), "inhum" );
	deepEqual( Stem("inintelligible"), "inintelligibl" );
	deepEqual( Stem("iniques"), "iniqu" );
	deepEqual( Stem("iniquité"), "iniqu" );
	deepEqual( Stem("initiative"), "initi" );
	deepEqual( Stem("initièrent"), "initi" );
	deepEqual( Stem("injure"), "injur" );
	deepEqual( Stem("injures"), "injur" );
	deepEqual( Stem("injurié"), "injuri" );
	deepEqual( Stem("injurieuse"), "injuri" );
	deepEqual( Stem("injurieuses"), "injuri" );
	deepEqual( Stem("injurieux"), "injuri" );
	deepEqual( Stem("injuste"), "injust" );
	deepEqual( Stem("injustement"), "injust" );
	deepEqual( Stem("injustes"), "injust" );
	deepEqual( Stem("injustice"), "injustic" );
	deepEqual( Stem("injustices"), "injustic" );
	deepEqual( Stem("inn"), "inn" );
	deepEqual( Stem("inné"), "inné" );
	deepEqual( Stem("innée"), "inné" );
	deepEqual( Stem("innocemment"), "innocent" );
	deepEqual( Stem("innocence"), "innocent" );
	deepEqual( Stem("innocent"), "innocent" );
	deepEqual( Stem("innocente"), "innocent" );
	deepEqual( Stem("innocentes"), "innocent" );
	deepEqual( Stem("innombrable"), "innombr" );
	deepEqual( Stem("innombrables"), "innombr" );
	deepEqual( Stem("innovation"), "innov" );
	deepEqual( Stem("inoccupées"), "inoccup" );
	deepEqual( Stem("inoculé"), "inocul" );
	deepEqual( Stem("inoffensif"), "inoffens" );
	deepEqual( Stem("inondaient"), "inond" );
	deepEqual( Stem("inondait"), "inond" );
	deepEqual( Stem("inondation"), "inond" );
	deepEqual( Stem("inondé"), "inond" );
	deepEqual( Stem("inondée"), "inond" );
	deepEqual( Stem("inondées"), "inond" );
	deepEqual( Stem("inonder"), "inond" );
	deepEqual( Stem("inondèrent"), "inond" );
	deepEqual( Stem("inondés"), "inond" );
	deepEqual( Stem("inopinément"), "inopin" );
	deepEqual( Stem("inopportunes"), "inopportun" );
	deepEqual( Stem("inopportuns"), "inopportun" );
	deepEqual( Stem("inouï"), "inouï" );
	deepEqual( Stem("inouïs"), "inouï" );
	deepEqual( Stem("inqualifiable"), "inqualifi" );
	deepEqual( Stem("inquiet"), "inquiet" );
	deepEqual( Stem("inquiéta"), "inquiet" );
	deepEqual( Stem("inquiétait"), "inquiet" );
	deepEqual( Stem("inquiétant"), "inquiet" );
	deepEqual( Stem("inquiétantes"), "inquiet" );
	deepEqual( Stem("inquiétants"), "inquiet" );
	deepEqual( Stem("inquiète"), "inquiet" );
	deepEqual( Stem("inquiéter"), "inquiet" );
	deepEqual( Stem("inquiets"), "inquiet" );
	deepEqual( Stem("inquiétude"), "inquiétud" );
	deepEqual( Stem("inquiétudes"), "inquiétud" );
	deepEqual( Stem("inquisiteurs"), "inquisiteur" );
	deepEqual( Stem("inquisition"), "inquisit" );
	deepEqual( Stem("insaisissable"), "insaisiss" );
	deepEqual( Stem("inscription"), "inscript" );
	deepEqual( Stem("inscriptions"), "inscript" );
	deepEqual( Stem("inscrire"), "inscrir" );
	deepEqual( Stem("inscrit"), "inscrit" );
	deepEqual( Stem("inscrits"), "inscrit" );
	deepEqual( Stem("inscrivit"), "inscriv" );
	deepEqual( Stem("insectes"), "insect" );
	deepEqual( Stem("insensé"), "insens" );
	deepEqual( Stem("insensée"), "insens" );
	deepEqual( Stem("insensés"), "insens" );
	deepEqual( Stem("insensibilité"), "insensibil" );
	deepEqual( Stem("insensible"), "insensibl" );
	deepEqual( Stem("insensiblement"), "insensibl" );
	deepEqual( Stem("insensibles"), "insensibl" );
	deepEqual( Stem("inséparable"), "insépar" );
	deepEqual( Stem("insérer"), "inser" );
	deepEqual( Stem("insigne"), "insign" );
	deepEqual( Stem("insignes"), "insign" );
	deepEqual( Stem("insignifiance"), "insignifi" );
	deepEqual( Stem("insignifiant"), "insignifi" );
	deepEqual( Stem("insignifiante"), "insignifi" );
	deepEqual( Stem("insignifiants"), "insignifi" );
	deepEqual( Stem("insinuera"), "insinu" );
	deepEqual( Stem("insipide"), "insipid" );
	deepEqual( Stem("insipides"), "insipid" );
	deepEqual( Stem("insista"), "insist" );
	deepEqual( Stem("insistait"), "insist" );
	deepEqual( Stem("insistance"), "insist" );
	deepEqual( Stem("insistant"), "insist" );
	deepEqual( Stem("insiste"), "insist" );
	deepEqual( Stem("insisté"), "insist" );
	deepEqual( Stem("insister"), "insist" );
	deepEqual( Stem("insociable"), "insoci" );
	deepEqual( Stem("insolemment"), "insolent" );
	deepEqual( Stem("insolence"), "insolent" );
	deepEqual( Stem("insolences"), "insolent" );
	deepEqual( Stem("insolent"), "insolent" );
	deepEqual( Stem("insolente"), "insolent" );
	deepEqual( Stem("insolents"), "insolent" );
	deepEqual( Stem("insolite"), "insolit" );
	deepEqual( Stem("insolites"), "insolit" );
	deepEqual( Stem("insouciance"), "insouci" );
	deepEqual( Stem("insouciant"), "insouci" );
	deepEqual( Stem("inspecteur"), "inspecteur" );
	deepEqual( Stem("inspecteurs"), "inspecteur" );
	deepEqual( Stem("inspection"), "inspect" );
	deepEqual( Stem("inspira"), "inspir" );
	deepEqual( Stem("inspiraient"), "inspir" );
	deepEqual( Stem("inspirait"), "inspir" );
	deepEqual( Stem("inspirant"), "inspir" );
	deepEqual( Stem("inspiration"), "inspir" );
	deepEqual( Stem("inspirations"), "inspir" );
	deepEqual( Stem("inspire"), "inspir" );
	deepEqual( Stem("inspiré"), "inspir" );
	deepEqual( Stem("inspirée"), "inspir" );
	deepEqual( Stem("inspirées"), "inspir" );
	deepEqual( Stem("inspirent"), "inspirent" );
	deepEqual( Stem("inspirer"), "inspir" );
	deepEqual( Stem("inspirerait"), "inspir" );
	deepEqual( Stem("inspirèrent"), "inspir" );
	deepEqual( Stem("inspires"), "inspir" );
	deepEqual( Stem("inspirés"), "inspir" );
	deepEqual( Stem("inspirez"), "inspir" );
	deepEqual( Stem("instable"), "instabl" );
	deepEqual( Stem("installation"), "install" );
	deepEqual( Stem("installé"), "install" );
	deepEqual( Stem("installée"), "install" );
	deepEqual( Stem("installer"), "install" );
	deepEqual( Stem("installèrent"), "install" );
	deepEqual( Stem("installés"), "install" );
	deepEqual( Stem("instances"), "instanc" );
	deepEqual( Stem("instant"), "instant" );
	deepEqual( Stem("instantané"), "instantan" );
	deepEqual( Stem("instantanément"), "instantan" );
	deepEqual( Stem("instante"), "instant" );
	deepEqual( Stem("instants"), "instant" );
	deepEqual( Stem("instar"), "instar" );
	deepEqual( Stem("instinct"), "instinct" );
	deepEqual( Stem("instinctif"), "instinct" );
	deepEqual( Stem("instinctivement"), "instinct" );
	deepEqual( Stem("institution"), "institu" );
	deepEqual( Stem("institutions"), "institu" );
	deepEqual( Stem("instructif"), "instruct" );
	deepEqual( Stem("instruction"), "instruct" );
	deepEqual( Stem("instructions"), "instruct" );
	deepEqual( Stem("instruire"), "instruir" );
	deepEqual( Stem("instruisait"), "instruis" );
	deepEqual( Stem("instruit"), "instruit" );
	deepEqual( Stem("instrument"), "instrument" );
	deepEqual( Stem("instruments"), "instrument" );
	deepEqual( Stem("insu"), "insu" );
	deepEqual( Stem("insuccès"), "insucces" );
	deepEqual( Stem("insuffisant"), "insuffis" );
	deepEqual( Stem("insuffisante"), "insuffis" );
	deepEqual( Stem("insuffisantes"), "insuffis" );
	deepEqual( Stem("insulta"), "insult" );
	deepEqual( Stem("insultant"), "insult" );
	deepEqual( Stem("insultante"), "insult" );
	deepEqual( Stem("insulte"), "insult" );
	deepEqual( Stem("insulté"), "insult" );
	deepEqual( Stem("insulter"), "insult" );
	deepEqual( Stem("insultes"), "insult" );
	deepEqual( Stem("insulteur"), "insulteur" );
	deepEqual( Stem("insupportable"), "insupport" );
	deepEqual( Stem("insupportables"), "insupport" );
	deepEqual( Stem("insurmontable"), "insurmont" );
	deepEqual( Stem("insurmontables"), "insurmont" );
	deepEqual( Stem("insurrection"), "insurrect" );
	deepEqual( Stem("intact"), "intact" );
	deepEqual( Stem("intègres"), "integr" );
	deepEqual( Stem("intellectuel"), "intellectuel" );
	deepEqual( Stem("intellectuelle"), "intellectuel" );
	deepEqual( Stem("intelligence"), "intelligent" );
	deepEqual( Stem("intelligences"), "intelligent" );
	deepEqual( Stem("intelligent"), "intelligent" );
	deepEqual( Stem("intelligente"), "intelligent" );
	deepEqual( Stem("intelligenti"), "intelligent" );
	deepEqual( Stem("intelligents"), "intelligent" );
	deepEqual( Stem("intelligible"), "intelligibl" );
	deepEqual( Stem("intelligibles"), "intelligibl" );
	deepEqual( Stem("intempestive"), "intempest" );
	deepEqual( Stem("intendant"), "intend" );
	deepEqual( Stem("intense"), "intens" );
	deepEqual( Stem("intenses"), "intens" );
	deepEqual( Stem("intensité"), "intens" );
	deepEqual( Stem("intention"), "intent" );
	deepEqual( Stem("intentionné"), "intention" );
	deepEqual( Stem("intentions"), "intent" );
	deepEqual( Stem("interceptait"), "intercept" );
	deepEqual( Stem("intercepté"), "intercept" );
	deepEqual( Stem("interceptée"), "intercept" );
	deepEqual( Stem("interceptées"), "intercept" );
	deepEqual( Stem("intercepter"), "intercept" );
	deepEqual( Stem("intercepterait"), "intercept" );
	deepEqual( Stem("intercession"), "intercess" );
	deepEqual( Stem("interdire"), "interdir" );
	deepEqual( Stem("interdis"), "interd" );
	deepEqual( Stem("interdit"), "interd" );
	deepEqual( Stem("interdite"), "interdit" );
	deepEqual( Stem("intéressa"), "intéress" );
	deepEqual( Stem("intéressaient"), "intéress" );
	deepEqual( Stem("intéressait"), "intéress" );
	deepEqual( Stem("intéressant"), "intéress" );
	deepEqual( Stem("intéressante"), "intéress" );
	deepEqual( Stem("intéressantes"), "intéress" );
	deepEqual( Stem("intéressants"), "intéress" );
	deepEqual( Stem("intéresse"), "intéress" );
	deepEqual( Stem("intéressé"), "intéress" );
	deepEqual( Stem("intéressée"), "intéress" );
	deepEqual( Stem("intéressent"), "intéressent" );
	deepEqual( Stem("intéresser"), "intéress" );
	deepEqual( Stem("intéresseront"), "intéress" );
	deepEqual( Stem("intéressés"), "intéress" );
	deepEqual( Stem("interet"), "interet" );
	deepEqual( Stem("intérêt"), "intérêt" );
	deepEqual( Stem("interets"), "interet" );
	deepEqual( Stem("intérêts"), "intérêt" );
	deepEqual( Stem("intérieur"), "intérieur" );
	deepEqual( Stem("intérieure"), "intérieur" );
	deepEqual( Stem("intérieurement"), "intérieur" );
	deepEqual( Stem("intérieurs"), "intérieur" );
	deepEqual( Stem("interjections"), "interject" );
	deepEqual( Stem("interlocuteur"), "interlocuteur" );
	deepEqual( Stem("interlocuteurs"), "interlocuteur" );
	deepEqual( Stem("interlope"), "interlop" );
	deepEqual( Stem("intermédiaire"), "intermédiair" );
	deepEqual( Stem("interminable"), "intermin" );
	deepEqual( Stem("interminables"), "intermin" );
	deepEqual( Stem("international"), "international" );
	deepEqual( Stem("interpellé"), "interpel" );
	deepEqual( Stem("interpeller"), "interpel" );
	deepEqual( Stem("interposé"), "interpos" );
	deepEqual( Stem("interpréta"), "interpret" );
	deepEqual( Stem("interprétation"), "interpret" );
	deepEqual( Stem("interprétations"), "interpret" );
	deepEqual( Stem("interprété"), "interpret" );
	deepEqual( Stem("interprétée"), "interpret" );
	deepEqual( Stem("interprètes"), "interpret" );
	deepEqual( Stem("interrogatif"), "interrog" );
	deepEqual( Stem("interrogation"), "interrog" );
	deepEqual( Stem("interrogatoire"), "interrogatoir" );
	deepEqual( Stem("interrogatoires"), "interrogatoir" );
	deepEqual( Stem("interroge"), "interrog" );
	deepEqual( Stem("interrogé"), "interrog" );
	deepEqual( Stem("interrogea"), "interrog" );
	deepEqual( Stem("interrogeant"), "interrog" );
	deepEqual( Stem("interroger"), "interrog" );
	deepEqual( Stem("interrogerait"), "interrog" );
	deepEqual( Stem("interrogez"), "interrog" );
	deepEqual( Stem("interrompait"), "interromp" );
	deepEqual( Stem("interrompant"), "interromp" );
	deepEqual( Stem("interrompirent"), "interromp" );
	deepEqual( Stem("interrompit"), "interromp" );
	deepEqual( Stem("interromprait"), "interrompr" );
	deepEqual( Stem("interrompre"), "interrompr" );
	deepEqual( Stem("interrompt"), "interrompt" );
	deepEqual( Stem("interrompu"), "interrompu" );
	deepEqual( Stem("interrompue"), "interrompu" );
	deepEqual( Stem("interrompues"), "interrompu" );
	deepEqual( Stem("interrompus"), "interrompus" );
	deepEqual( Stem("interrupteur"), "interrupteur" );
	deepEqual( Stem("interruption"), "interrupt" );
	deepEqual( Stem("intervalle"), "intervall" );
	deepEqual( Stem("intervalles"), "intervall" );
	deepEqual( Stem("intervention"), "intervent" );
	deepEqual( Stem("interviendrais"), "interviendr" );
	deepEqual( Stem("intima"), "intim" );
	deepEqual( Stem("intime"), "intim" );
	deepEqual( Stem("intimement"), "intim" );
	deepEqual( Stem("intimes"), "intim" );
	deepEqual( Stem("intimida"), "intimid" );
	deepEqual( Stem("intimidé"), "intimid" );
	deepEqual( Stem("intimident"), "intimident" );
	deepEqual( Stem("intimider"), "intimid" );
	deepEqual( Stem("intimité"), "intim" );
	deepEqual( Stem("intitulés"), "intitul" );
	deepEqual( Stem("intolérable"), "intoler" );
	deepEqual( Stem("intolérables"), "intoler" );
	deepEqual( Stem("intonation"), "inton" );
	deepEqual( Stem("intraitable"), "intrait" );
	deepEqual( Stem("intrépide"), "intrépid" );
	deepEqual( Stem("intrépidement"), "intrépid" );
	deepEqual( Stem("intrépidité"), "intrépid" );
	deepEqual( Stem("intrigant"), "intrig" );
	deepEqual( Stem("intrigante"), "intrig" );
	deepEqual( Stem("intrigants"), "intrig" );
	deepEqual( Stem("intriguait"), "intrigu" );
	deepEqual( Stem("intrigue"), "intrigu" );
	deepEqual( Stem("intrigué"), "intrigu" );
	deepEqual( Stem("intrigues"), "intrigu" );
	deepEqual( Stem("introduction"), "introduct" );
	deepEqual( Stem("introduire"), "introduir" );
	deepEqual( Stem("introduis"), "introduis" );
	deepEqual( Stem("introduisit"), "introduis" );
	deepEqual( Stem("introduit"), "introduit" );
	deepEqual( Stem("introduite"), "introduit" );
	deepEqual( Stem("introduits"), "introduit" );
	deepEqual( Stem("intrus"), "intrus" );
	deepEqual( Stem("inusitée"), "inusit" );
	deepEqual( Stem("inutile"), "inutil" );
	deepEqual( Stem("inutilement"), "inutil" );
	deepEqual( Stem("inutiles"), "inutil" );
	deepEqual( Stem("inutilite"), "inutilit" );
	deepEqual( Stem("inutilité"), "inutil" );
	deepEqual( Stem("invalides"), "invalid" );
	deepEqual( Stem("invariable"), "invari" );
	deepEqual( Stem("invariablement"), "invari" );
	deepEqual( Stem("invariables"), "invari" );
	deepEqual( Stem("invasion"), "invas" );
	deepEqual( Stem("inventaire"), "inventair" );
	deepEqual( Stem("inventait"), "invent" );
	deepEqual( Stem("inventant"), "invent" );
	deepEqual( Stem("invente"), "invent" );
	deepEqual( Stem("inventé"), "invent" );
	deepEqual( Stem("inventée"), "invent" );
	deepEqual( Stem("inventées"), "invent" );
	deepEqual( Stem("inventer"), "invent" );
	deepEqual( Stem("inventèrent"), "invent" );
	deepEqual( Stem("inventeur"), "inventeur" );
	deepEqual( Stem("inventif"), "invent" );
	deepEqual( Stem("invention"), "invent" );
	deepEqual( Stem("inventions"), "invent" );
	deepEqual( Stem("inverse"), "invers" );
	deepEqual( Stem("invincible"), "invincibl" );
	deepEqual( Stem("invinciblement"), "invincibl" );
	deepEqual( Stem("invisible"), "invisibl" );
	deepEqual( Stem("invisibles"), "invisibl" );
	deepEqual( Stem("invita"), "invit" );
	deepEqual( Stem("invitait"), "invit" );
	deepEqual( Stem("invitant"), "invit" );
	deepEqual( Stem("invitation"), "invit" );
	deepEqual( Stem("invitations"), "invit" );
	deepEqual( Stem("invite"), "invit" );
	deepEqual( Stem("invité"), "invit" );
	deepEqual( Stem("inviter"), "invit" );
	deepEqual( Stem("inviterai"), "invit" );
	deepEqual( Stem("invités"), "invit" );
	deepEqual( Stem("inviti"), "invit" );
	deepEqual( Stem("invocation"), "invoc" );
	deepEqual( Stem("involontaire"), "involontair" );
	deepEqual( Stem("involontairement"), "involontair" );
	deepEqual( Stem("invraisemblable"), "invraisembl" );
	deepEqual( Stem("invraisemblables"), "invraisembl" );
	deepEqual( Stem("invraisemblance"), "invraisembl" );
	deepEqual( Stem("invulnérable"), "invulner" );
	deepEqual( Stem("ioniques"), "ioniqu" );
	deepEqual( Stem("iowa"), "iow" );
	deepEqual( Stem("ira"), "ira" );
	deepEqual( Stem("irai"), "irai" );
	deepEqual( Stem("iraient"), "iraient" );
	deepEqual( Stem("irais"), "irais" );
	deepEqual( Stem("irait"), "irait" );
	deepEqual( Stem("iras"), "iras" );
	deepEqual( Stem("irascible"), "irascibl" );
	deepEqual( Stem("irez"), "irez" );
	deepEqual( Stem("iriez"), "iri" );
	deepEqual( Stem("irlande"), "irland" );
	deepEqual( Stem("ironie"), "iron" );
	deepEqual( Stem("ironique"), "iron" );
	deepEqual( Stem("irons"), "iron" );
	deepEqual( Stem("iront"), "iront" );
	deepEqual( Stem("irrégulière"), "irréguli" );
	deepEqual( Stem("irrégulièrement"), "irréguli" );
	deepEqual( Stem("irréguliers"), "irréguli" );
	deepEqual( Stem("irrémédiable"), "irrémédi" );
	deepEqual( Stem("irrémissiblement"), "irrémissibl" );
	deepEqual( Stem("irréparable"), "irrépar" );
	deepEqual( Stem("irréparablement"), "irrépar" );
	deepEqual( Stem("irréprochable"), "irréproch" );
	deepEqual( Stem("irréprochables"), "irréproch" );
	deepEqual( Stem("irrésistible"), "irrésistibl" );
	deepEqual( Stem("irrésistiblement"), "irrésistibl" );
	deepEqual( Stem("irrésistibles"), "irrésistibl" );
	deepEqual( Stem("irrésolution"), "irrésolu" );
	deepEqual( Stem("irrésolutions"), "irrésolu" );
	deepEqual( Stem("irresponsable"), "irrespons" );
	deepEqual( Stem("irréussites"), "irréussit" );
	deepEqual( Stem("irrévocablement"), "irrévoc" );
	deepEqual( Stem("irriguaient"), "irrigu" );
	deepEqual( Stem("irrita"), "irrit" );
	deepEqual( Stem("irritable"), "irrit" );
	deepEqual( Stem("irritaient"), "irrit" );
	deepEqual( Stem("irritait"), "irrit" );
	deepEqual( Stem("irritant"), "irrit" );
	deepEqual( Stem("irritation"), "irrit" );
	deepEqual( Stem("irrite"), "irrit" );
	deepEqual( Stem("irrité"), "irrit" );
	deepEqual( Stem("irritée"), "irrit" );
	deepEqual( Stem("irriter"), "irrit" );
	deepEqual( Stem("irritèrent"), "irrit" );
	deepEqual( Stem("irruption"), "irrupt" );
	deepEqual( Stem("is"), "is" );
	deepEqual( Stem("island"), "island" );
	deepEqual( Stem("isole"), "isol" );
	deepEqual( Stem("isolé"), "isol" );
	deepEqual( Stem("isolée"), "isol" );
	deepEqual( Stem("isolement"), "isol" );
	deepEqual( Stem("isolés"), "isol" );
	deepEqual( Stem("isota"), "isot" );
	deepEqual( Stem("israël"), "israël" );
	deepEqual( Stem("issu"), "issu" );
	deepEqual( Stem("issue"), "issu" );
	deepEqual( Stem("issues"), "issu" );
	deepEqual( Stem("it"), "it" );
	deepEqual( Stem("ita"), "ita" );
	deepEqual( Stem("italie"), "ital" );
	deepEqual( Stem("italien"), "italien" );
	deepEqual( Stem("italienne"), "italien" );
	deepEqual( Stem("italiennes"), "italien" );
	deepEqual( Stem("italiens"), "italien" );
	deepEqual( Stem("itinéraire"), "itinérair" );
	deepEqual( Stem("itou"), "itou" );
	deepEqual( Stem("its"), "it" );
	deepEqual( Stem("itself"), "itself" );
	deepEqual( Stem("iv"), "iv" );
	deepEqual( Stem("ivoire"), "ivoir" );
	deepEqual( Stem("ivre"), "ivre" );
	deepEqual( Stem("ivres"), "ivre" );
	deepEqual( Stem("ivresse"), "ivress" );
	deepEqual( Stem("ivrogne"), "ivrogn" );
	deepEqual( Stem("ivrognes"), "ivrogn" );
	deepEqual( Stem("ix"), "ix" );
	deepEqual( Stem("j"), "j" );
	deepEqual( Stem("jacobin"), "jacobin" );
	deepEqual( Stem("jacobine"), "jacobin" );
	deepEqual( Stem("jacobinisme"), "jacobin" );
	deepEqual( Stem("jacobins"), "jacobin" );
	deepEqual( Stem("jacopo"), "jacopo" );
	deepEqual( Stem("jacques"), "jacqu" );
	deepEqual( Stem("jadis"), "jad" );
	deepEqual( Stem("jaggernaut"), "jaggernaut" );
	deepEqual( Stem("jailli"), "jaill" );
	deepEqual( Stem("jaillissaient"), "jaill" );
	deepEqual( Stem("jais"), "jais" );
	deepEqual( Stem("jalousait"), "jalous" );
	deepEqual( Stem("jalouse"), "jalous" );
	deepEqual( Stem("jalousé"), "jalous" );
	deepEqual( Stem("jalouses"), "jalous" );
	deepEqual( Stem("jalousie"), "jalous" );
	deepEqual( Stem("jalousies"), "jalous" );
	deepEqual( Stem("jaloux"), "jaloux" );
	deepEqual( Stem("jamais"), "jam" );
	deepEqual( Stem("jambe"), "jamb" );
	deepEqual( Stem("jambes"), "jamb" );
	deepEqual( Stem("james"), "jam" );
	deepEqual( Stem("jansénisme"), "jansen" );
	deepEqual( Stem("janséniste"), "jansen" );
	deepEqual( Stem("jansénistes"), "jansen" );
	deepEqual( Stem("jante"), "jant" );
	deepEqual( Stem("janvier"), "janvi" );
	deepEqual( Stem("japon"), "japon" );
	deepEqual( Stem("japonais"), "japon" );
	deepEqual( Stem("japonaise"), "japonais" );
	deepEqual( Stem("japonaisé"), "japonais" );
	deepEqual( Stem("japonaises"), "japonais" );
	deepEqual( Stem("jaquette"), "jaquet" );
	deepEqual( Stem("jardin"), "jardin" );
	deepEqual( Stem("jardinage"), "jardinag" );
	deepEqual( Stem("jardinier"), "jardini" );
	deepEqual( Stem("jardins"), "jardin" );
	deepEqual( Stem("jarnac"), "jarnac" );
	deepEqual( Stem("jarrets"), "jarret" );
	deepEqual( Stem("jasant"), "jas" );
	deepEqual( Stem("jasent"), "jasent" );
	deepEqual( Stem("jaser"), "jas" );
	deepEqual( Stem("jasmin"), "jasmin" );
	deepEqual( Stem("jaugeant"), "jaug" );
	deepEqual( Stem("jaunâtres"), "jaunâtr" );
	deepEqual( Stem("jaune"), "jaun" );
	deepEqual( Stem("jaunes"), "jaun" );
	deepEqual( Stem("jaunets"), "jaunet" );
	deepEqual( Stem("jaunies"), "jaun" );
	deepEqual( Stem("je"), "je" );
	deepEqual( Stem("jean"), "jean" );
	deepEqual( Stem("jeannes"), "jeann" );
	deepEqual( Stem("jejeebhoy"), "jejeebhoy" );
	deepEqual( Stem("jejeeh"), "jejeeh" );
	deepEqual( Stem("jenrel"), "jenrel" );
	deepEqual( Stem("jérémiades"), "jérémiad" );
	deepEqual( Stem("jérôme"), "jérôm" );
	deepEqual( Stem("jersey"), "jersey" );
	deepEqual( Stem("jérusalem"), "jérusalem" );
	deepEqual( Stem("jest"), "jest" );
	deepEqual( Stem("jésuite"), "jésuit" );
	deepEqual( Stem("jésuites"), "jésuit" );
	deepEqual( Stem("jésuitique"), "jésuit" );
	deepEqual( Stem("jésuitisme"), "jésuit" );
	deepEqual( Stem("jésus"), "jésus" );
	deepEqual( Stem("jeta"), "jet" );
	deepEqual( Stem("jetaient"), "jet" );
	deepEqual( Stem("jetait"), "jet" );
	deepEqual( Stem("jetant"), "jet" );
	deepEqual( Stem("jetât"), "jet" );
	deepEqual( Stem("jeté"), "jet" );
	deepEqual( Stem("jetée"), "jet" );
	deepEqual( Stem("jetées"), "jet" );
	deepEqual( Stem("jeter"), "jet" );
	deepEqual( Stem("jetèrent"), "jet" );
	deepEqual( Stem("jetés"), "jet" );
	deepEqual( Stem("jetez"), "jet" );
	deepEqual( Stem("jetons"), "jeton" );
	deepEqual( Stem("jette"), "jet" );
	deepEqual( Stem("jettent"), "jettent" );
	deepEqual( Stem("jetterais"), "jet" );
	deepEqual( Stem("jetterait"), "jet" );
	deepEqual( Stem("jetterez"), "jet" );
	deepEqual( Stem("jeu"), "jeu" );
	deepEqual( Stem("jeudi"), "jeud" );
	deepEqual( Stem("jeudis"), "jeud" );
	deepEqual( Stem("jeun"), "jeun" );
	deepEqual( Stem("jeûnant"), "jeûn" );
	deepEqual( Stem("jeune"), "jeun" );
	deepEqual( Stem("jeûne"), "jeûn" );
	deepEqual( Stem("jeunes"), "jeun" );
	deepEqual( Stem("jeûnes"), "jeûn" );
	deepEqual( Stem("jeunesse"), "jeuness" );
	deepEqual( Stem("jeux"), "jeux" );
	deepEqual( Stem("joe"), "jo" );
	deepEqual( Stem("john"), "john" );
	deepEqual( Stem("joie"), "joi" );
	deepEqual( Stem("joies"), "joi" );
	deepEqual( Stem("joignait"), "joign" );
	deepEqual( Stem("joignant"), "joign" );
	deepEqual( Stem("joignit"), "joign" );
	deepEqual( Stem("joindre"), "joindr" );
	deepEqual( Stem("joint"), "joint" );
	deepEqual( Stem("jointe"), "joint" );
	deepEqual( Stem("jointes"), "joint" );
	deepEqual( Stem("joli"), "jol" );
	deepEqual( Stem("jolie"), "jol" );
	deepEqual( Stem("jolies"), "jol" );
	deepEqual( Stem("joliment"), "jol" );
	deepEqual( Stem("jolis"), "jol" );
	deepEqual( Stem("jonc"), "jonc" );
	deepEqual( Stem("jonché"), "jonch" );
	deepEqual( Stem("jonglaient"), "jongl" );
	deepEqual( Stem("jonglait"), "jongl" );
	deepEqual( Stem("jonglerie"), "jongler" );
	deepEqual( Stem("jongleurs"), "jongleur" );
	deepEqual( Stem("jonques"), "jonqu" );
	deepEqual( Stem("jonquille"), "jonquill" );
	deepEqual( Stem("joseph"), "joseph" );
	deepEqual( Stem("joua"), "jou" );
	deepEqual( Stem("jouaient"), "jou" );
	deepEqual( Stem("jouait"), "jou" );
	deepEqual( Stem("jouant"), "jou" );
	deepEqual( Stem("jouât"), "jou" );
	deepEqual( Stem("joue"), "jou" );
	deepEqual( Stem("joué"), "jou" );
	deepEqual( Stem("jouée"), "jou" );
	deepEqual( Stem("jouer"), "jou" );
	deepEqual( Stem("jouera"), "jou" );
	deepEqual( Stem("jouerai"), "jou" );
	deepEqual( Stem("joueraient"), "jou" );
	deepEqual( Stem("jouerais"), "jou" );
	deepEqual( Stem("jouerait"), "jou" );
	deepEqual( Stem("joues"), "jou" );
	deepEqual( Stem("joueur"), "joueur" );
	deepEqual( Stem("joueurs"), "joueur" );
	deepEqual( Stem("jouez"), "jou" );
	deepEqual( Stem("joui"), "jou" );
	deepEqual( Stem("jouir"), "jou" );
	deepEqual( Stem("jouira"), "jou" );
	deepEqual( Stem("jouirait"), "jou" );
	deepEqual( Stem("jouiras"), "jou" );
	deepEqual( Stem("jouis"), "jou" );
	deepEqual( Stem("jouissaient"), "jou" );
	deepEqual( Stem("jouissait"), "jou" );
	deepEqual( Stem("jouissance"), "jouiss" );
	deepEqual( Stem("jouissances"), "jouiss" );
	deepEqual( Stem("jouissant"), "jou" );
	deepEqual( Stem("jouisse"), "jou" );
	deepEqual( Stem("jouissent"), "jou" );
	deepEqual( Stem("jouissons"), "jou" );
	deepEqual( Stem("jouit"), "jou" );
	deepEqual( Stem("joujoux"), "joujoux" );
	deepEqual( Stem("joumate"), "joumat" );
	deepEqual( Stem("jouons"), "jouon" );
	deepEqual( Stem("jour"), "jour" );
	deepEqual( Stem("jourdain"), "jourdain" );
	deepEqual( Stem("jourdan"), "jourdan" );
	deepEqual( Stem("journal"), "journal" );
	deepEqual( Stem("journalière"), "journali" );
	deepEqual( Stem("journalistes"), "journal" );
	deepEqual( Stem("journaux"), "journal" );
	deepEqual( Stem("journée"), "journ" );
	deepEqual( Stem("journées"), "journ" );
	deepEqual( Stem("journellement"), "journel" );
	deepEqual( Stem("jours"), "jour" );
	deepEqual( Stem("joyeuse"), "joyeux" );
	deepEqual( Stem("joyeusement"), "joyeux" );
	deepEqual( Stem("joyeux"), "joyeux" );
	deepEqual( Stem("juan"), "juan" );
	deepEqual( Stem("jucha"), "juch" );
	deepEqual( Stem("juché"), "juch" );
	deepEqual( Stem("judiciaires"), "judiciair" );
	deepEqual( Stem("judicieux"), "judici" );
	deepEqual( Stem("judith"), "judith" );
	deepEqual( Stem("juge"), "jug" );
	deepEqual( Stem("jugé"), "jug" );
	deepEqual( Stem("jugea"), "jug" );
	deepEqual( Stem("jugeait"), "jug" );
	deepEqual( Stem("jugeant"), "jug" );
	deepEqual( Stem("jugement"), "jug" );
	deepEqual( Stem("jugements"), "jug" );
	deepEqual( Stem("jugent"), "jugent" );
	deepEqual( Stem("juger"), "jug" );
	deepEqual( Stem("jugera"), "jug" );
	deepEqual( Stem("jugerai"), "jug" );
	deepEqual( Stem("jugeront"), "jug" );
	deepEqual( Stem("juges"), "jug" );
	deepEqual( Stem("jugés"), "jug" );
	deepEqual( Stem("jugez"), "jug" );
	deepEqual( Stem("juif"), "juif" );
	deepEqual( Stem("juifs"), "juif" );
	deepEqual( Stem("juillet"), "juillet" );
	deepEqual( Stem("juin"), "juin" );
	deepEqual( Stem("jules"), "jul" );
	deepEqual( Stem("julesburgh"), "julesburgh" );
	deepEqual( Stem("julia"), "juli" );
	deepEqual( Stem("julien"), "julien" );
	deepEqual( Stem("jumna"), "jumn" );
	deepEqual( Stem("junction"), "junction" );
	deepEqual( Stem("jungles"), "jungl" );
	deepEqual( Stem("junior"), "junior" );
	deepEqual( Stem("jupon"), "jupon" );
	deepEqual( Stem("jura"), "jur" );
	deepEqual( Stem("juraient"), "jur" );
	deepEqual( Stem("jurait"), "jur" );
	deepEqual( Stem("jurant"), "jur" );
	deepEqual( Stem("jure"), "jur" );
	deepEqual( Stem("juré"), "jur" );
	deepEqual( Stem("jurée"), "jur" );
	deepEqual( Stem("jurement"), "jur" );
	deepEqual( Stem("jurements"), "jur" );
	deepEqual( Stem("jurer"), "jur" );
	deepEqual( Stem("jurerai"), "jur" );
	deepEqual( Stem("jurerais"), "jur" );
	deepEqual( Stem("jures"), "jur" );
	deepEqual( Stem("jurés"), "jur" );
	deepEqual( Stem("jurez"), "jur" );
	deepEqual( Stem("jurisconsulte"), "jurisconsult" );
	deepEqual( Stem("jurisconsultes"), "jurisconsult" );
	deepEqual( Stem("juron"), "juron" );
	deepEqual( Stem("jurons"), "juron" );
	deepEqual( Stem("jury"), "jury" );
	deepEqual( Stem("jusqu"), "jusqu" );
	deepEqual( Stem("jusque"), "jusqu" );
	deepEqual( Stem("jusques"), "jusqu" );
	deepEqual( Stem("just"), "just" );
	deepEqual( Stem("juste"), "just" );
	deepEqual( Stem("justement"), "just" );
	deepEqual( Stem("justes"), "just" );
	deepEqual( Stem("justesse"), "justess" );
	deepEqual( Stem("justice"), "justic" );
	deepEqual( Stem("justifia"), "justifi" );
	deepEqual( Stem("justifiait"), "justifi" );
	deepEqual( Stem("justificatif"), "justif" );
	deepEqual( Stem("justification"), "justif" );
	deepEqual( Stem("justifications"), "justif" );
	deepEqual( Stem("justifie"), "justif" );
	deepEqual( Stem("justifié"), "justifi" );
	deepEqual( Stem("justifiée"), "justifi" );
	deepEqual( Stem("justifier"), "justifi" );
	deepEqual( Stem("kâli"), "kâl" );
	deepEqual( Stem("kalisky"), "kalisky" );
	deepEqual( Stem("kallenger"), "kalleng" );
	deepEqual( Stem("kama"), "kam" );
	deepEqual( Stem("kamerfield"), "kamerfield" );
	deepEqual( Stem("kandallah"), "kandallah" );
	deepEqual( Stem("kanhérie"), "kanher" );
	deepEqual( Stem("kansas"), "kans" );
	deepEqual( Stem("kant"), "kant" );
	deepEqual( Stem("kauffmann"), "kauffmann" );
	deepEqual( Stem("kearney"), "kearney" );
	deepEqual( Stem("kehl"), "kehl" );
	deepEqual( Stem("kent"), "kent" );
	deepEqual( Stem("khajours"), "khajour" );
	deepEqual( Stem("khandeish"), "khandeish" );
	deepEqual( Stem("kholby"), "kholby" );
	deepEqual( Stem("kien"), "kien" );
	deepEqual( Stem("kilomètres"), "kilometr" );
	deepEqual( Stem("kind"), "kind" );
	deepEqual( Stem("kiouni"), "kioun" );
	deepEqual( Stem("kirimon"), "kirimon" );
	deepEqual( Stem("kirkland"), "kirkland" );
	deepEqual( Stem("kléber"), "kleb" );
	deepEqual( Stem("kong"), "kong" );
	deepEqual( Stem("korasoff"), "korasoff" );
	deepEqual( Stem("l"), "l" );
	deepEqual( Stem("la"), "la" );
	deepEqual( Stem("là"), "là" );
	deepEqual( Stem("laborieusement"), "labori" );
	deepEqual( Stem("laborieux"), "labori" );
	deepEqual( Stem("labourée"), "labour" );
	deepEqual( Stem("lac"), "lac" );
	deepEqual( Stem("lâcha"), "lâch" );
	deepEqual( Stem("lachaise"), "lachais" );
	deepEqual( Stem("lâchait"), "lâch" );
	deepEqual( Stem("lâche"), "lâch" );
	deepEqual( Stem("lâchement"), "lâch" );
	deepEqual( Stem("lâcher"), "lâch" );
	deepEqual( Stem("lâches"), "lâch" );
	deepEqual( Stem("lâcheté"), "lâchet" );
	deepEqual( Stem("lâchez"), "lâch" );
	deepEqual( Stem("laconiquement"), "lacon" );
	deepEqual( Stem("lacs"), "lac" );
	deepEqual( Stem("ladislas"), "ladisl" );
	deepEqual( Stem("ladri"), "ladr" );
	deepEqual( Stem("lafayette"), "lafayet" );
	deepEqual( Stem("lago"), "lago" );
	deepEqual( Stem("laïc"), "laïc" );
	deepEqual( Stem("laïcs"), "laïc" );
	deepEqual( Stem("laid"), "laid" );
	deepEqual( Stem("laide"), "laid" );
	deepEqual( Stem("laides"), "laid" );
	deepEqual( Stem("laideur"), "laideur" );
	deepEqual( Stem("laideurs"), "laideur" );
	deepEqual( Stem("laine"), "lain" );
	deepEqual( Stem("laïque"), "laïqu" );
	deepEqual( Stem("laissa"), "laiss" );
	deepEqual( Stem("laissaient"), "laiss" );
	deepEqual( Stem("laissais"), "laiss" );
	deepEqual( Stem("laissait"), "laiss" );
	deepEqual( Stem("laissant"), "laiss" );
	deepEqual( Stem("laissât"), "laiss" );
	deepEqual( Stem("laisse"), "laiss" );
	deepEqual( Stem("laissé"), "laiss" );
	deepEqual( Stem("laissée"), "laiss" );
	deepEqual( Stem("laissées"), "laiss" );
	deepEqual( Stem("laissent"), "laissent" );
	deepEqual( Stem("laisser"), "laiss" );
	deepEqual( Stem("laissera"), "laiss" );
	deepEqual( Stem("laisserai"), "laiss" );
	deepEqual( Stem("laisserais"), "laiss" );
	deepEqual( Stem("laisserait"), "laiss" );
	deepEqual( Stem("laissèrent"), "laiss" );
	deepEqual( Stem("laisserez"), "laiss" );
	deepEqual( Stem("laissés"), "laiss" );
	deepEqual( Stem("laissez"), "laiss" );
	deepEqual( Stem("laissions"), "laission" );
	deepEqual( Stem("laissons"), "laisson" );
	deepEqual( Stem("lait"), "lait" );
	deepEqual( Stem("laiterie"), "laiter" );
	deepEqual( Stem("laiton"), "laiton" );
	deepEqual( Stem("laitue"), "laitu" );
	deepEqual( Stem("lake"), "lak" );
	deepEqual( Stem("lambeau"), "lambeau" );
	deepEqual( Stem("lambeaux"), "lambeau" );
	deepEqual( Stem("lambris"), "lambr" );
	deepEqual( Stem("lambrissée"), "lambriss" );
	deepEqual( Stem("lame"), "lam" );
	deepEqual( Stem("lamée"), "lam" );
	deepEqual( Stem("lamentable"), "lament" );
	deepEqual( Stem("lamentables"), "lament" );
	deepEqual( Stem("lames"), "lam" );
	deepEqual( Stem("lampe"), "lamp" );
	deepEqual( Stem("lampes"), "lamp" );
	deepEqual( Stem("lança"), "lanc" );
	deepEqual( Stem("lançaient"), "lanc" );
	deepEqual( Stem("lançait"), "lanc" );
	deepEqual( Stem("lançant"), "lanc" );
	deepEqual( Stem("lance"), "lanc" );
	deepEqual( Stem("lancé"), "lanc" );
	deepEqual( Stem("lancée"), "lanc" );
	deepEqual( Stem("lancer"), "lanc" );
	deepEqual( Stem("lancés"), "lanc" );
	deepEqual( Stem("landau"), "landau" );
	deepEqual( Stem("landes"), "land" );
	deepEqual( Stem("landriani"), "landrian" );
	deepEqual( Stem("langage"), "langag" );
	deepEqual( Stem("lange"), "lang" );
	deepEqual( Stem("langue"), "langu" );
	deepEqual( Stem("languedoc"), "languedoc" );
	deepEqual( Stem("langues"), "langu" );
	deepEqual( Stem("langueur"), "langueur" );
	deepEqual( Stem("languir"), "languir" );
	deepEqual( Stem("languis"), "languis" );
	deepEqual( Stem("languissait"), "languiss" );
	deepEqual( Stem("languissante"), "languiss" );
	deepEqual( Stem("lanterne"), "lantern" );
	deepEqual( Stem("lanternes"), "lantern" );
	deepEqual( Stem("lapidaire"), "lapidair" );
	deepEqual( Stem("lapin"), "lapin" );
	deepEqual( Stem("laps"), "lap" );
	deepEqual( Stem("laquais"), "laqu" );
	deepEqual( Stem("laque"), "laqu" );
	deepEqual( Stem("laquelle"), "laquel" );
	deepEqual( Stem("laramie"), "laram" );
	deepEqual( Stem("lard"), "lard" );
	deepEqual( Stem("larga"), "larg" );
	deepEqual( Stem("large"), "larg" );
	deepEqual( Stem("largement"), "larg" );
	deepEqual( Stem("larges"), "larg" );
	deepEqual( Stem("largeur"), "largeur" );
	deepEqual( Stem("larguait"), "largu" );
	deepEqual( Stem("largue"), "largu" );
	deepEqual( Stem("larme"), "larm" );
	deepEqual( Stem("larmes"), "larm" );
	deepEqual( Stem("las"), "las" );
	deepEqual( Stem("lascia"), "lasci" );
	deepEqual( Stem("lassa"), "lass" );
	deepEqual( Stem("lasse"), "lass" );
	deepEqual( Stem("lasser"), "lass" );
	deepEqual( Stem("lasseront"), "lass" );
	deepEqual( Stem("last"), "last" );
	deepEqual( Stem("lataniers"), "latani" );
	deepEqual( Stem("latérale"), "latéral" );
	deepEqual( Stem("latérales"), "latéral" );
	deepEqual( Stem("latin"), "latin" );
	deepEqual( Stem("latinam"), "latinam" );
	deepEqual( Stem("latine"), "latin" );
	deepEqual( Stem("latines"), "latin" );
	deepEqual( Stem("latiniste"), "latin" );
	deepEqual( Stem("latinité"), "latin" );
	deepEqual( Stem("latins"), "latin" );
	deepEqual( Stem("laudanum"), "laudanum" );
	deepEqual( Stem("laughter"), "laught" );
	deepEqual( Stem("lauréat"), "lauréat" );
	deepEqual( Stem("laurent"), "laurent" );
	deepEqual( Stem("laurier"), "lauri" );
	deepEqual( Stem("lauriers"), "lauri" );
	deepEqual( Stem("lausanne"), "lausann" );
	deepEqual( Stem("lavalette"), "lavalet" );
	deepEqual( Stem("lave"), "lav" );
	deepEqual( Stem("laveno"), "laveno" );
	deepEqual( Stem("laver"), "lav" );
	deepEqual( Stem("laye"), "lay" );
	deepEqual( Stem("le"), "le" );
	deepEqual( Stem("least"), "least" );
	deepEqual( Stem("lecco"), "lecco" );
	deepEqual( Stem("leçon"), "leçon" );
	deepEqual( Stem("leçons"), "leçon" );
	deepEqual( Stem("lecteur"), "lecteur" );
	deepEqual( Stem("lecteurs"), "lecteur" );
	deepEqual( Stem("lectrice"), "lectric" );
	deepEqual( Stem("lecture"), "lectur" );
	deepEqual( Stem("ledit"), "led" );
	deepEqual( Stem("left"), "left" );
	deepEqual( Stem("légale"), "légal" );
	deepEqual( Stem("légalement"), "légal" );
	deepEqual( Stem("légalité"), "légal" );
	deepEqual( Stem("légation"), "légat" );
	deepEqual( Stem("légendaire"), "légendair" );
	deepEqual( Stem("légendes"), "légend" );
	deepEqual( Stem("leger"), "leg" );
	deepEqual( Stem("léger"), "leg" );
	deepEqual( Stem("légère"), "léger" );
	deepEqual( Stem("légèrement"), "léger" );
	deepEqual( Stem("légères"), "léger" );
	deepEqual( Stem("légèreté"), "légèret" );
	deepEqual( Stem("légers"), "léger" );
	deepEqual( Stem("légion"), "légion" );
	deepEqual( Stem("législateur"), "législ" );
	deepEqual( Stem("législateurs"), "législ" );
	deepEqual( Stem("législature"), "législatur" );
	deepEqual( Stem("legitime"), "legitim" );
	deepEqual( Stem("légitime"), "légitim" );
	deepEqual( Stem("légitimes"), "légitim" );
	deepEqual( Stem("légitimité"), "légitim" );
	deepEqual( Stem("legs"), "leg" );
	deepEqual( Stem("légua"), "légu" );
	deepEqual( Stem("lègue"), "lègu" );
	deepEqual( Stem("légué"), "légu" );
	deepEqual( Stem("leipsick"), "leipsick" );
	deepEqual( Stem("lek"), "lek" );
	deepEqual( Stem("lélio"), "lélio" );
	deepEqual( Stem("lendemain"), "lendemain" );
	deepEqual( Stem("lent"), "lent" );
	deepEqual( Stem("lente"), "lent" );
	deepEqual( Stem("lentement"), "lent" );
	deepEqual( Stem("lentes"), "lent" );
	deepEqual( Stem("lenteur"), "lenteur" );
	deepEqual( Stem("lenteurs"), "lenteur" );
	deepEqual( Stem("lents"), "lent" );
	deepEqual( Stem("leo"), "leo" );
	deepEqual( Stem("léonard"), "léonard" );
	deepEqual( Stem("léontine"), "léontin" );
	deepEqual( Stem("léotard"), "léotard" );
	deepEqual( Stem("lépidoptères"), "lépidopter" );
	deepEqual( Stem("lequel"), "lequel" );
	deepEqual( Stem("leroy"), "leroy" );
	deepEqual( Stem("les"), "le" );
	deepEqual( Stem("lés"), "lé" );
	deepEqual( Stem("lescaut"), "lescaut" );
	deepEqual( Stem("lesdits"), "lesdit" );
	deepEqual( Stem("lèse"), "les" );
	deepEqual( Stem("lésineries"), "lésiner" );
	deepEqual( Stem("lesquelles"), "lesquel" );
	deepEqual( Stem("lesquels"), "lesquel" );
	deepEqual( Stem("less"), "less" );
	deepEqual( Stem("lesseps"), "lessep" );
	deepEqual( Stem("lest"), "lest" );
	deepEqual( Stem("leste"), "lest" );
	deepEqual( Stem("lestement"), "lest" );
	deepEqual( Stem("lester"), "lest" );
	deepEqual( Stem("léthargique"), "létharg" );
	deepEqual( Stem("lettre"), "lettr" );
	deepEqual( Stem("lettres"), "lettr" );
	deepEqual( Stem("leur"), "leur" );
	deepEqual( Stem("leurs"), "leur" );
	deepEqual( Stem("leva"), "lev" );
	deepEqual( Stem("levait"), "lev" );
	deepEqual( Stem("levant"), "lev" );
	deepEqual( Stem("lève"), "lev" );
	deepEqual( Stem("levé"), "lev" );
	deepEqual( Stem("levée"), "lev" );
	deepEqual( Stem("levées"), "lev" );
	deepEqual( Stem("lèvent"), "lèvent" );
	deepEqual( Stem("lever"), "lev" );
	deepEqual( Stem("lèvera"), "lev" );
	deepEqual( Stem("levèrent"), "lev" );
	deepEqual( Stem("levez"), "lev" );
	deepEqual( Stem("levier"), "levi" );
	deepEqual( Stem("leviers"), "levi" );
	deepEqual( Stem("levis"), "lev" );
	deepEqual( Stem("lévite"), "lévit" );
	deepEqual( Stem("lèvre"), "levr" );
	deepEqual( Stem("lèvres"), "levr" );
	deepEqual( Stem("lia"), "li" );
	deepEqual( Stem("liaison"), "liaison" );
	deepEqual( Stem("liaisons"), "liaison" );
	deepEqual( Stem("liant"), "li" );
	deepEqual( Stem("liard"), "liard" );
	deepEqual( Stem("liasse"), "li" );
	deepEqual( Stem("liasses"), "li" );
	deepEqual( Stem("liât"), "li" );
	deepEqual( Stem("libellé"), "libel" );
	deepEqual( Stem("libellée"), "libel" );
	deepEqual( Stem("libéral"), "libéral" );
	deepEqual( Stem("libérales"), "libéral" );
	deepEqual( Stem("libéralisme"), "libéral" );
	deepEqual( Stem("libérateur"), "liber" );
	deepEqual( Stem("libéraux"), "libéral" );
	deepEqual( Stem("liberté"), "libert" );
	deepEqual( Stem("libertin"), "libertin" );
	deepEqual( Stem("libertinage"), "libertinag" );
	deepEqual( Stem("libraire"), "librair" );
	deepEqual( Stem("libraires"), "librair" );
	deepEqual( Stem("libre"), "libr" );
	deepEqual( Stem("librement"), "libr" );
	deepEqual( Stem("libres"), "libr" );
	deepEqual( Stem("lichtenberg"), "lichtenberg" );
	deepEqual( Stem("lie"), "li" );
	deepEqual( Stem("lié"), "li" );
	deepEqual( Stem("liée"), "li" );
	deepEqual( Stem("liées"), "li" );
	deepEqual( Stem("liège"), "lieg" );
	deepEqual( Stem("lien"), "lien" );
	deepEqual( Stem("liens"), "lien" );
	deepEqual( Stem("lier"), "li" );
	deepEqual( Stem("lierre"), "lierr" );
	deepEqual( Stem("liés"), "li" );
	deepEqual( Stem("lieu"), "lieu" );
	deepEqual( Stem("lieue"), "lieu" );
	deepEqual( Stem("lieues"), "lieu" );
	deepEqual( Stem("lieutenance"), "lieuten" );
	deepEqual( Stem("lieutenant"), "lieuten" );
	deepEqual( Stem("lieutenants"), "lieuten" );
	deepEqual( Stem("lieux"), "lieux" );
	deepEqual( Stem("liéven"), "liéven" );
	deepEqual( Stem("lièvre"), "lievr" );
	deepEqual( Stem("lièvres"), "lievr" );
	deepEqual( Stem("light"), "light" );
	deepEqual( Stem("ligne"), "lign" );
	deepEqual( Stem("lignes"), "lign" );
	deepEqual( Stem("ligny"), "ligny" );
	deepEqual( Stem("ligorio"), "ligorio" );
	deepEqual( Stem("ligue"), "ligu" );
	deepEqual( Stem("ligués"), "ligu" );
	deepEqual( Stem("lilliputiens"), "lilliputien" );
	deepEqual( Stem("limercati"), "limercat" );
	deepEqual( Stem("limite"), "limit" );
	deepEqual( Stem("limites"), "limit" );
	deepEqual( Stem("limpide"), "limpid" );
	deepEqual( Stem("limpides"), "limpid" );
	deepEqual( Stem("lincoln"), "lincoln" );
	deepEqual( Stem("line"), "lin" );
	deepEqual( Stem("linge"), "ling" );
	deepEqual( Stem("lingère"), "linger" );
	deepEqual( Stem("lingot"), "lingot" );
	deepEqual( Stem("linguam"), "linguam" );
	deepEqual( Stem("lion"), "lion" );
	deepEqual( Stem("lip"), "lip" );
	deepEqual( Stem("liqueur"), "liqueur" );
	deepEqual( Stem("liqueurs"), "liqueur" );
	deepEqual( Stem("liquide"), "liquid" );
	deepEqual( Stem("liquidée"), "liquid" );
	deepEqual( Stem("lira"), "lir" );
	deepEqual( Stem("lirai"), "lir" );
	deepEqual( Stem("liras"), "lir" );
	deepEqual( Stem("lire"), "lir" );
	deepEqual( Stem("lis"), "lis" );
	deepEqual( Stem("lisaient"), "lis" );
	deepEqual( Stem("lisait"), "lis" );
	deepEqual( Stem("lisant"), "lis" );
	deepEqual( Stem("lisard"), "lisard" );
	deepEqual( Stem("lisent"), "lisent" );
	deepEqual( Stem("lisez"), "lis" );
	deepEqual( Stem("lisible"), "lisibl" );
	deepEqual( Stem("lisière"), "lisi" );
	deepEqual( Stem("lisse"), "liss" );
	deepEqual( Stem("lisses"), "liss" );
	deepEqual( Stem("liste"), "list" );
	deepEqual( Stem("lit"), "lit" );
	deepEqual( Stem("litanies"), "litan" );
	deepEqual( Stem("lithographiée"), "lithographi" );
	deepEqual( Stem("lithographies"), "lithograph" );
	deepEqual( Stem("litière"), "liti" );
	deepEqual( Stem("litières"), "liti" );
	deepEqual( Stem("lits"), "lit" );
	deepEqual( Stem("littéraire"), "littérair" );
	deepEqual( Stem("littéraires"), "littérair" );
	deepEqual( Stem("littéralement"), "littéral" );
	deepEqual( Stem("littérature"), "littératur" );
	deepEqual( Stem("little"), "littl" );
	deepEqual( Stem("live"), "liv" );
	deepEqual( Stem("liverpool"), "liverpool" );
	deepEqual( Stem("liveru"), "liveru" );
	deepEqual( Stem("livra"), "livr" );
	deepEqual( Stem("livraient"), "livr" );
	deepEqual( Stem("livrais"), "livr" );
	deepEqual( Stem("livrait"), "livr" );
	deepEqual( Stem("livre"), "livr" );
	deepEqual( Stem("livré"), "livr" );
	deepEqual( Stem("livrée"), "livr" );
	deepEqual( Stem("livrées"), "livr" );
	deepEqual( Stem("livrer"), "livr" );
	deepEqual( Stem("livres"), "livr" );
	deepEqual( Stem("livrés"), "livr" );
	deepEqual( Stem("livret"), "livret" );
	deepEqual( Stem("ll"), "ll" );
	deepEqual( Stem("locale"), "local" );
	deepEqual( Stem("locarno"), "locarno" );
	deepEqual( Stem("locataire"), "locatair" );
	deepEqual( Stem("location"), "locat" );
	deepEqual( Stem("loch"), "loch" );
	deepEqual( Stem("locke"), "lock" );
	deepEqual( Stem("locomotion"), "locomot" );
	deepEqual( Stem("locomotive"), "locomot" );
	deepEqual( Stem("locomotives"), "locomot" );
	deepEqual( Stem("lodge"), "lodg" );
	deepEqual( Stem("lodi"), "lod" );
	deepEqual( Stem("loge"), "log" );
	deepEqual( Stem("logé"), "log" );
	deepEqual( Stem("logeable"), "logeabl" );
	deepEqual( Stem("logement"), "log" );
	deepEqual( Stem("logements"), "log" );
	deepEqual( Stem("loger"), "log" );
	deepEqual( Stem("loges"), "log" );
	deepEqual( Stem("logés"), "log" );
	deepEqual( Stem("logions"), "logion" );
	deepEqual( Stem("logique"), "logiqu" );
	deepEqual( Stem("logiques"), "logiqu" );
	deepEqual( Stem("logis"), "log" );
	deepEqual( Stem("loi"), "loi" );
	deepEqual( Stem("loin"), "loin" );
	deepEqual( Stem("lointain"), "lointain" );
	deepEqual( Stem("lointaine"), "lointain" );
	deepEqual( Stem("lointaines"), "lointain" );
	deepEqual( Stem("lointains"), "lointain" );
	deepEqual( Stem("lois"), "lois" );
	deepEqual( Stem("loisir"), "lois" );
	deepEqual( Stem("lombarde"), "lombard" );
	deepEqual( Stem("lombardie"), "lombard" );
	deepEqual( Stem("lombardo"), "lombardo" );
	deepEqual( Stem("lombards"), "lombard" );
	deepEqual( Stem("lonato"), "lonato" );
	deepEqual( Stem("london"), "london" );
	deepEqual( Stem("londonner"), "london" );
	deepEqual( Stem("londres"), "londr" );
	deepEqual( Stem("long"), "long" );
	deepEqual( Stem("longanimité"), "longanim" );
	deepEqual( Stem("longe"), "long" );
	deepEqual( Stem("longeant"), "long" );
	deepEqual( Stem("longerons"), "long" );
	deepEqual( Stem("longévité"), "longev" );
	deepEqual( Stem("longs"), "long" );
	deepEqual( Stem("longsferry"), "longsferry" );
	deepEqual( Stem("longtemps"), "longtemp" );
	deepEqual( Stem("longue"), "longu" );
	deepEqual( Stem("longuement"), "longu" );
	deepEqual( Stem("longues"), "longu" );
	deepEqual( Stem("longueur"), "longueur" );
	deepEqual( Stem("longueville"), "longuevill" );
	deepEqual( Stem("lope"), "lop" );
	deepEqual( Stem("loquerisne"), "loquerisn" );
	deepEqual( Stem("loques"), "loqu" );
	deepEqual( Stem("loquet"), "loquet" );
	deepEqual( Stem("lord"), "lord" );
	deepEqual( Stem("lords"), "lord" );
	deepEqual( Stem("lorgnette"), "lorgnet" );
	deepEqual( Stem("lorgnettes"), "lorgnet" );
	deepEqual( Stem("lors"), "lor" );
	deepEqual( Stem("lorsqu"), "lorsqu" );
	deepEqual( Stem("lorsque"), "lorsqu" );
	deepEqual( Stem("lot"), "lot" );
	deepEqual( Stem("loterie"), "loter" );
	deepEqual( Stem("lotus"), "lotus" );
	deepEqual( Stem("loua"), "lou" );
	deepEqual( Stem("louables"), "louabl" );
	deepEqual( Stem("louage"), "louag" );
	deepEqual( Stem("louaient"), "lou" );
	deepEqual( Stem("louange"), "louang" );
	deepEqual( Stem("louanges"), "louang" );
	deepEqual( Stem("louant"), "lou" );
	deepEqual( Stem("louche"), "louch" );
	deepEqual( Stem("loue"), "lou" );
	deepEqual( Stem("loué"), "lou" );
	deepEqual( Stem("louée"), "lou" );
	deepEqual( Stem("louées"), "lou" );
	deepEqual( Stem("louer"), "lou" );
	deepEqual( Stem("louera"), "lou" );
	deepEqual( Stem("loueras"), "lou" );
	deepEqual( Stem("louèrent"), "lou" );
	deepEqual( Stem("loueur"), "loueur" );
	deepEqual( Stem("loueuse"), "loueux" );
	deepEqual( Stem("louez"), "lou" );
	deepEqual( Stem("louiez"), "lou" );
	deepEqual( Stem("louis"), "lou" );
	deepEqual( Stem("louise"), "louis" );
	deepEqual( Stem("louons"), "louon" );
	deepEqual( Stem("loup"), "loup" );
	deepEqual( Stem("loups"), "loup" );
	deepEqual( Stem("lourd"), "lourd" );
	deepEqual( Stem("lourde"), "lourd" );
	deepEqual( Stem("lourdement"), "lourd" );
	deepEqual( Stem("lourdes"), "lourd" );
	deepEqual( Stem("lourdeur"), "lourdeur" );
	deepEqual( Stem("loutre"), "loutr" );
	deepEqual( Stem("louvre"), "louvr" );
	deepEqual( Stem("love"), "lov" );
	deepEqual( Stem("lowe"), "low" );
	deepEqual( Stem("loyal"), "loyal" );
	deepEqual( Stem("loyalement"), "loyal" );
	deepEqual( Stem("loyauté"), "loyaut" );
	deepEqual( Stem("loyaux"), "loyal" );
	deepEqual( Stem("lu"), "lu" );
	deepEqual( Stem("lucides"), "lucid" );
	deepEqual( Stem("lucrative"), "lucrat" );
	deepEqual( Stem("ludovic"), "ludovic" );
	deepEqual( Stem("lue"), "lu" );
	deepEqual( Stem("lues"), "lu" );
	deepEqual( Stem("lueur"), "lueur" );
	deepEqual( Stem("lueurs"), "lueur" );
	deepEqual( Stem("lugano"), "lugano" );
	deepEqual( Stem("lugubre"), "lugubr" );
	deepEqual( Stem("lugubrement"), "lugubr" );
	deepEqual( Stem("lugubres"), "lugubr" );
	deepEqual( Stem("lui"), "lui" );
	deepEqual( Stem("luisante"), "luis" );
	deepEqual( Stem("lumière"), "lumi" );
	deepEqual( Stem("lumières"), "lumi" );
	deepEqual( Stem("lumineuse"), "lumin" );
	deepEqual( Stem("luna"), "lun" );
	deepEqual( Stem("lunch"), "lunch" );
	deepEqual( Stem("lundi"), "lund" );
	deepEqual( Stem("lune"), "lun" );
	deepEqual( Stem("lunette"), "lunet" );
	deepEqual( Stem("luoghi"), "luogh" );
	deepEqual( Stem("lustre"), "lustr" );
	deepEqual( Stem("lustres"), "lustr" );
	deepEqual( Stem("lut"), "lut" );
	deepEqual( Stem("luther"), "luth" );
	deepEqual( Stem("luttaient"), "lutt" );
	deepEqual( Stem("luttait"), "lutt" );
	deepEqual( Stem("lutte"), "lutt" );
	deepEqual( Stem("luttent"), "luttent" );
	deepEqual( Stem("lutter"), "lutt" );
	deepEqual( Stem("luttera"), "lutt" );
	deepEqual( Stem("luttes"), "lutt" );
	deepEqual( Stem("luxe"), "lux" );
	deepEqual( Stem("luxée"), "lux" );
	deepEqual( Stem("luxembourg"), "luxembourg" );
	deepEqual( Stem("luxuriantes"), "luxuri" );
	deepEqual( Stem("luz"), "luz" );
	deepEqual( Stem("lycéens"), "lycéen" );
	deepEqual( Stem("lyon"), "lyon" );
	deepEqual( Stem("lyre"), "lyr" );
	deepEqual( Stem("m"), "m" );
	deepEqual( Stem("ma"), "ma" );
	deepEqual( Stem("mac"), "mac" );
	deepEqual( Stem("macadamisées"), "macadamis" );
	deepEqual( Stem("macao"), "macao" );
	deepEqual( Stem("mâchais"), "mâch" );
	deepEqual( Stem("mâchait"), "mâch" );
	deepEqual( Stem("machiavel"), "machiavel" );
	deepEqual( Stem("machiavélisme"), "machiavel" );
	deepEqual( Stem("machiavelli"), "machiavel" );
	deepEqual( Stem("machinalement"), "machinal" );
	deepEqual( Stem("machine"), "machin" );
	deepEqual( Stem("machines"), "machin" );
	deepEqual( Stem("mackintosh"), "mackintosh" );
	deepEqual( Stem("macon"), "macon" );
	deepEqual( Stem("maçon"), "maçon" );
	deepEqual( Stem("maçonnerie"), "maçonner" );
	deepEqual( Stem("maçons"), "maçon" );
	deepEqual( Stem("madame"), "madam" );
	deepEqual( Stem("made"), "mad" );
	deepEqual( Stem("madeleine"), "madelein" );
	deepEqual( Stem("mademoiselle"), "mademoisel" );
	deepEqual( Stem("madone"), "madon" );
	deepEqual( Stem("madras"), "madr" );
	deepEqual( Stem("madriers"), "madri" );
	deepEqual( Stem("maestro"), "maestro" );
	deepEqual( Stem("magalon"), "magalon" );
	deepEqual( Stem("magasin"), "magasin" );
	deepEqual( Stem("magasins"), "magasin" );
	deepEqual( Stem("maggiore"), "maggior" );
	deepEqual( Stem("magicien"), "magicien" );
	deepEqual( Stem("magie"), "mag" );
	deepEqual( Stem("magique"), "magiqu" );
	deepEqual( Stem("magistral"), "magistral" );
	deepEqual( Stem("magistrat"), "magistrat" );
	deepEqual( Stem("magistrats"), "magistrat" );
	deepEqual( Stem("magistrature"), "magistratur" );
	deepEqual( Stem("magnanime"), "magnanim" );
	deepEqual( Stem("magnificence"), "magnificent" );
	deepEqual( Stem("magnifique"), "magnif" );
	deepEqual( Stem("magnifiquement"), "magnif" );
	deepEqual( Stem("magnifiques"), "magnif" );
	deepEqual( Stem("magot"), "magot" );
	deepEqual( Stem("mahomet"), "mahomet" );
	deepEqual( Stem("mahout"), "mahout" );
	deepEqual( Stem("mai"), "mai" );
	deepEqual( Stem("maigre"), "maigr" );
	deepEqual( Stem("maigres"), "maigr" );
	deepEqual( Stem("maigreur"), "maigreur" );
	deepEqual( Stem("maigri"), "maigr" );
	deepEqual( Stem("maigrie"), "maigr" );
	deepEqual( Stem("mail"), "mail" );
	deepEqual( Stem("mailles"), "maill" );
	deepEqual( Stem("main"), "main" );
	deepEqual( Stem("mains"), "main" );
	deepEqual( Stem("maintenaient"), "mainten" );
	deepEqual( Stem("maintenait"), "mainten" );
	deepEqual( Stem("maintenant"), "mainten" );
	deepEqual( Stem("maintenir"), "mainten" );
	deepEqual( Stem("maintenue"), "maintenu" );
	deepEqual( Stem("maintien"), "maintien" );
	deepEqual( Stem("maintint"), "maintint" );
	deepEqual( Stem("maire"), "mair" );
	deepEqual( Stem("maires"), "mair" );
	deepEqual( Stem("mairie"), "mair" );
	deepEqual( Stem("mais"), "mais" );
	deepEqual( Stem("maïs"), "maï" );
	deepEqual( Stem("maison"), "maison" );
	deepEqual( Stem("maisons"), "maison" );
	deepEqual( Stem("maistre"), "maistr" );
	deepEqual( Stem("maitre"), "maitr" );
	deepEqual( Stem("maître"), "maîtr" );
	deepEqual( Stem("maîtres"), "maîtr" );
	deepEqual( Stem("maîtresse"), "maîtress" );
	deepEqual( Stem("maîtresses"), "maîtress" );
	deepEqual( Stem("majesté"), "majest" );
	deepEqual( Stem("majestueuse"), "majestu" );
	deepEqual( Stem("majestueusement"), "majestu" );
	deepEqual( Stem("majestueux"), "majestu" );
	deepEqual( Stem("majeur"), "majeur" );
	deepEqual( Stem("majeure"), "majeur" );
	deepEqual( Stem("major"), "major" );
	deepEqual( Stem("majordome"), "majordom" );
	deepEqual( Stem("majordomes"), "majordom" );
	deepEqual( Stem("majorité"), "major" );
	deepEqual( Stem("majorités"), "major" );
	deepEqual( Stem("mal"), "mal" );
	deepEqual( Stem("malacca"), "malacc" );
	deepEqual( Stem("malade"), "malad" );
	deepEqual( Stem("malades"), "malad" );
	deepEqual( Stem("maladie"), "malad" );
	deepEqual( Stem("maladies"), "malad" );
	deepEqual( Stem("maladive"), "malad" );
	deepEqual( Stem("maladresse"), "maladress" );
	deepEqual( Stem("maladresses"), "maladress" );
	deepEqual( Stem("maladroit"), "maladroit" );
	deepEqual( Stem("maladroite"), "maladroit" );
	deepEqual( Stem("maladroitement"), "maladroit" );
	deepEqual( Stem("malaga"), "malag" );
	deepEqual( Stem("malagrida"), "malagrid" );
	deepEqual( Stem("malais"), "mal" );
	deepEqual( Stem("malaise"), "malais" );
	deepEqual( Stem("malaisie"), "malais" );
	deepEqual( Stem("maldonne"), "maldon" );
	deepEqual( Stem("mâle"), "mâl" );
	deepEqual( Stem("malebar"), "malebar" );
	deepEqual( Stem("malédiction"), "malédict" );
	deepEqual( Stem("malencontreuse"), "malencontr" );
	deepEqual( Stem("malencontreusement"), "malencontr" );
	deepEqual( Stem("malencontreux"), "malencontr" );
	deepEqual( Stem("malentendu"), "malentendu" );
	deepEqual( Stem("mâles"), "mâl" );
	deepEqual( Stem("malgré"), "malgr" );
	deepEqual( Stem("malhabile"), "malhabil" );
	deepEqual( Stem("malheur"), "malheur" );
	deepEqual( Stem("malheureuse"), "malheur" );
	deepEqual( Stem("malheureusement"), "malheur" );
	deepEqual( Stem("malheureuses"), "malheur" );
	deepEqual( Stem("malheureux"), "malheur" );
	deepEqual( Stem("malheurs"), "malheur" );
	deepEqual( Stem("malhonnête"), "malhonnêt" );
	deepEqual( Stem("malhonnêteté"), "malhonnêtet" );
	deepEqual( Stem("malice"), "malic" );
	deepEqual( Stem("malicieux"), "malici" );
	deepEqual( Stem("maligne"), "malign" );
	deepEqual( Stem("malignité"), "malign" );
	deepEqual( Stem("malin"), "malin" );
	deepEqual( Stem("mall"), "mall" );
	deepEqual( Stem("malle"), "mall" );
	deepEqual( Stem("malles"), "mall" );
	deepEqual( Stem("malligaum"), "malligaum" );
	deepEqual( Stem("malmaison"), "malmaison" );
	deepEqual( Stem("malmener"), "malmen" );
	deepEqual( Stem("maltraite"), "maltrait" );
	deepEqual( Stem("maltraité"), "maltrait" );
	deepEqual( Stem("maltraitées"), "maltrait" );
	deepEqual( Stem("maltraiter"), "maltrait" );
	deepEqual( Stem("maman"), "maman" );
	deepEqual( Stem("mameluks"), "mameluk" );
	deepEqual( Stem("mammacia"), "mammaci" );
	deepEqual( Stem("manant"), "man" );
	deepEqual( Stem("mancar"), "mancar" );
	deepEqual( Stem("manche"), "manch" );
	deepEqual( Stem("manches"), "manch" );
	deepEqual( Stem("manchester"), "manchest" );
	deepEqual( Stem("manda"), "mand" );
	deepEqual( Stem("mandarin"), "mandarin" );
	deepEqual( Stem("mandat"), "mandat" );
	deepEqual( Stem("mandé"), "mand" );
	deepEqual( Stem("mandeb"), "mandeb" );
	deepEqual( Stem("mandement"), "mand" );
	deepEqual( Stem("mander"), "mand" );
	deepEqual( Stem("mandiboy"), "mandiboy" );
	deepEqual( Stem("manège"), "maneg" );
	deepEqual( Stem("mânes"), "mân" );
	deepEqual( Stem("manette"), "manet" );
	deepEqual( Stem("mange"), "mang" );
	deepEqual( Stem("mangé"), "mang" );
	deepEqual( Stem("mangea"), "mang" );
	deepEqual( Stem("mangeaient"), "mang" );
	deepEqual( Stem("mangeais"), "mang" );
	deepEqual( Stem("mangeait"), "mang" );
	deepEqual( Stem("mangeant"), "mang" );
	deepEqual( Stem("mangent"), "mangent" );
	deepEqual( Stem("mangeoire"), "mangeoir" );
	deepEqual( Stem("manger"), "mang" );
	deepEqual( Stem("mangerai"), "mang" );
	deepEqual( Stem("mangerait"), "mang" );
	deepEqual( Stem("mangèrent"), "mang" );
	deepEqual( Stem("mangeur"), "mangeur" );
	deepEqual( Stem("mangoustes"), "mangoust" );
	deepEqual( Stem("maniable"), "maniabl" );
	deepEqual( Stem("maniait"), "mani" );
	deepEqual( Stem("maniant"), "mani" );
	deepEqual( Stem("maniaque"), "maniaqu" );
	deepEqual( Stem("manie"), "man" );
	deepEqual( Stem("manié"), "mani" );
	deepEqual( Stem("manier"), "mani" );
	deepEqual( Stem("manière"), "mani" );
	deepEqual( Stem("manières"), "mani" );
	deepEqual( Stem("manifestation"), "manifest" );
	deepEqual( Stem("manifesté"), "manifest" );
	deepEqual( Stem("manifester"), "manifest" );
	deepEqual( Stem("mannequins"), "mannequin" );
	deepEqual( Stem("manner"), "mann" );
	deepEqual( Stem("manoeuvraient"), "manoeuvr" );
	deepEqual( Stem("manoeuvrant"), "manoeuvr" );
	deepEqual( Stem("manoeuvre"), "manoeuvr" );
	deepEqual( Stem("manoeuvré"), "manoeuvr" );
	deepEqual( Stem("manoeuvrer"), "manoeuvr" );
	deepEqual( Stem("manoeuvres"), "manoeuvr" );
	deepEqual( Stem("manoeuvrés"), "manoeuvr" );
	deepEqual( Stem("manon"), "manon" );
	deepEqual( Stem("manouvriers"), "manouvri" );
	deepEqual( Stem("manqua"), "manqu" );
	deepEqual( Stem("manquaient"), "manqu" );
	deepEqual( Stem("manquais"), "manqu" );
	deepEqual( Stem("manquait"), "manqu" );
	deepEqual( Stem("manquant"), "manqu" );
	deepEqual( Stem("manquât"), "manqu" );
	deepEqual( Stem("manque"), "manqu" );
	deepEqual( Stem("manqué"), "manqu" );
	deepEqual( Stem("manquée"), "manqu" );
	deepEqual( Stem("manquent"), "manquent" );
	deepEqual( Stem("manquer"), "manqu" );
	deepEqual( Stem("manquera"), "manqu" );
	deepEqual( Stem("manquerai"), "manqu" );
	deepEqual( Stem("manqueraient"), "manqu" );
	deepEqual( Stem("manquerais"), "manqu" );
	deepEqual( Stem("manquerait"), "manqu" );
	deepEqual( Stem("manquèrent"), "manqu" );
	deepEqual( Stem("manquerez"), "manqu" );
	deepEqual( Stem("manqueront"), "manqu" );
	deepEqual( Stem("manques"), "manqu" );
	deepEqual( Stem("manquez"), "manqu" );
	deepEqual( Stem("manquons"), "manquon" );
	deepEqual( Stem("mansarde"), "mansard" );
	deepEqual( Stem("manteau"), "manteau" );
	deepEqual( Stem("manteaux"), "manteau" );
	deepEqual( Stem("mantoue"), "mantou" );
	deepEqual( Stem("manuel"), "manuel" );
	deepEqual( Stem("manufacture"), "manufactur" );
	deepEqual( Stem("manufactures"), "manufactur" );
	deepEqual( Stem("manufacturières"), "manufacturi" );
	deepEqual( Stem("manufacturiers"), "manufacturi" );
	deepEqual( Stem("manuscrit"), "manuscr" );
	deepEqual( Stem("manuscrites"), "manuscrit" );
	deepEqual( Stem("manuscrits"), "manuscrit" );
	deepEqual( Stem("maquignon"), "maquignon" );
	deepEqual( Stem("marais"), "mar" );
	deepEqual( Stem("marâtre"), "marâtr" );
	deepEqual( Stem("marbre"), "marbr" );
	deepEqual( Stem("marbres"), "marbr" );
	deepEqual( Stem("marcha"), "march" );
	deepEqual( Stem("marchaient"), "march" );
	deepEqual( Stem("marchait"), "march" );
	deepEqual( Stem("marchand"), "marchand" );
	deepEqual( Stem("marchande"), "marchand" );
	deepEqual( Stem("marchandise"), "marchandis" );
	deepEqual( Stem("marchandises"), "marchandis" );
	deepEqual( Stem("marchands"), "marchand" );
	deepEqual( Stem("marchant"), "march" );
	deepEqual( Stem("marche"), "march" );
	deepEqual( Stem("marché"), "march" );
	deepEqual( Stem("marchent"), "marchent" );
	deepEqual( Stem("marchepied"), "marchepied" );
	deepEqual( Stem("marchepieds"), "marchepied" );
	deepEqual( Stem("marcher"), "march" );
	deepEqual( Stem("marcherez"), "march" );
	deepEqual( Stem("marcherions"), "march" );
	deepEqual( Stem("marcherons"), "march" );
	deepEqual( Stem("marches"), "march" );
	deepEqual( Stem("marchés"), "march" );
	deepEqual( Stem("marchesi"), "marches" );
	deepEqual( Stem("marchesine"), "marchesin" );
	deepEqual( Stem("marchesino"), "marchesino" );
	deepEqual( Stem("marcheur"), "marcheur" );
	deepEqual( Stem("marcheurs"), "marcheur" );
	deepEqual( Stem("marchez"), "march" );
	deepEqual( Stem("marchiez"), "march" );
	deepEqual( Stem("marchions"), "marchion" );
	deepEqual( Stem("marchons"), "marchon" );
	deepEqual( Stem("mardi"), "mard" );
	deepEqual( Stem("mare"), "mar" );
	deepEqual( Stem("marécages"), "marécag" );
	deepEqual( Stem("marécageuse"), "marécag" );
	deepEqual( Stem("maréchal"), "maréchal" );
	deepEqual( Stem("maréchale"), "maréchal" );
	deepEqual( Stem("maréchaux"), "maréchal" );
	deepEqual( Stem("marée"), "mar" );
	deepEqual( Stem("marengo"), "marengo" );
	deepEqual( Stem("marge"), "marg" );
	deepEqual( Stem("marges"), "marg" );
	deepEqual( Stem("margot"), "margot" );
	deepEqual( Stem("marguerite"), "marguerit" );
	deepEqual( Stem("marguillier"), "marguilli" );
	deepEqual( Stem("mari"), "mar" );
	deepEqual( Stem("maria"), "mari" );
	deepEqual( Stem("mariage"), "mariag" );
	deepEqual( Stem("mariages"), "mariag" );
	deepEqual( Stem("mariait"), "mari" );
	deepEqual( Stem("marie"), "mar" );
	deepEqual( Stem("marié"), "mari" );
	deepEqual( Stem("mariée"), "mari" );
	deepEqual( Stem("mariées"), "mari" );
	deepEqual( Stem("marier"), "mari" );
	deepEqual( Stem("mariera"), "mari" );
	deepEqual( Stem("marietta"), "mariet" );
	deepEqual( Stem("mariettina"), "mariettin" );
	deepEqual( Stem("marin"), "marin" );
	deepEqual( Stem("marini"), "marin" );
	deepEqual( Stem("mariniers"), "marini" );
	deepEqual( Stem("marino"), "marino" );
	deepEqual( Stem("marins"), "marin" );
	deepEqual( Stem("maris"), "mar" );
	deepEqual( Stem("maritime"), "maritim" );
	deepEqual( Stem("maritimes"), "maritim" );
	deepEqual( Stem("markésine"), "markésin" );
	deepEqual( Stem("market"), "market" );
	deepEqual( Stem("marmande"), "marmand" );
	deepEqual( Stem("marmots"), "marmot" );
	deepEqual( Stem("maroquin"), "maroquin" );
	deepEqual( Stem("marote"), "marot" );
	deepEqual( Stem("marotte"), "marott" );
	deepEqual( Stem("marqua"), "marqu" );
	deepEqual( Stem("marquaient"), "marqu" );
	deepEqual( Stem("marquait"), "marqu" );
	deepEqual( Stem("marquant"), "marqu" );
	deepEqual( Stem("marque"), "marqu" );
	deepEqual( Stem("marqué"), "marqu" );
	deepEqual( Stem("marquée"), "marqu" );
	deepEqual( Stem("marquées"), "marqu" );
	deepEqual( Stem("marquent"), "marquent" );
	deepEqual( Stem("marquer"), "marqu" );
	deepEqual( Stem("marquerai"), "marqu" );
	deepEqual( Stem("marquèrent"), "marqu" );
	deepEqual( Stem("marques"), "marqu" );
	deepEqual( Stem("marqués"), "marqu" );
	deepEqual( Stem("marqueterie"), "marqueter" );
	deepEqual( Stem("marquinot"), "marquinot" );
	deepEqual( Stem("marquis"), "marqu" );
	deepEqual( Stem("marquise"), "marquis" );
	deepEqual( Stem("marronnier"), "marronni" );
	deepEqual( Stem("marronniers"), "marronni" );
	deepEqual( Stem("marrons"), "marron" );
	deepEqual( Stem("mars"), "mar" );
	deepEqual( Stem("marseille"), "marseil" );
	deepEqual( Stem("marteau"), "marteau" );
	deepEqual( Stem("marteaux"), "marteau" );
	deepEqual( Stem("martial"), "martial" );
	deepEqual( Stem("martiale"), "martial" );
	deepEqual( Stem("martin"), "martin" );
	deepEqual( Stem("martyr"), "martyr" );
	deepEqual( Stem("martyre"), "martyr" );
	deepEqual( Stem("mary"), "mary" );
	deepEqual( Stem("mascarilles"), "mascarill" );
	deepEqual( Stem("masculin"), "masculin" );
	deepEqual( Stem("masculine"), "masculin" );
	deepEqual( Stem("maslon"), "maslon" );
	deepEqual( Stem("masquait"), "masqu" );
	deepEqual( Stem("masque"), "masqu" );
	deepEqual( Stem("masqué"), "masqu" );
	deepEqual( Stem("masquée"), "masqu" );
	deepEqual( Stem("masquer"), "masqu" );
	deepEqual( Stem("masques"), "masqu" );
	deepEqual( Stem("masqués"), "masqu" );
	deepEqual( Stem("massacre"), "massacr" );
	deepEqual( Stem("massacrer"), "massacr" );
	deepEqual( Stem("massacrés"), "massacr" );
	deepEqual( Stem("massant"), "mass" );
	deepEqual( Stem("masse"), "mass" );
	deepEqual( Stem("masses"), "mass" );
	deepEqual( Stem("massif"), "massif" );
	deepEqual( Stem("massifs"), "massif" );
	deepEqual( Stem("massillon"), "massillon" );
	deepEqual( Stem("massinger"), "massing" );
	deepEqual( Stem("mat"), "mat" );
	deepEqual( Stem("mât"), "mât" );
	deepEqual( Stem("matches"), "match" );
	deepEqual( Stem("matelas"), "matel" );
	deepEqual( Stem("matelots"), "matelot" );
	deepEqual( Stem("matériel"), "matériel" );
	deepEqual( Stem("matérielle"), "matériel" );
	deepEqual( Stem("matériellement"), "matériel" );
	deepEqual( Stem("matérielles"), "matériel" );
	deepEqual( Stem("matériels"), "matériel" );
	deepEqual( Stem("maternel"), "maternel" );
	deepEqual( Stem("mathématique"), "mathémat" );
	deepEqual( Stem("mathématiquement"), "mathémat" );
	deepEqual( Stem("mathématiques"), "mathémat" );
	deepEqual( Stem("mathilde"), "mathild" );
	deepEqual( Stem("matiere"), "matier" );
	deepEqual( Stem("matière"), "mati" );
	deepEqual( Stem("matieres"), "matier" );
	deepEqual( Stem("matières"), "mati" );
	deepEqual( Stem("matin"), "matin" );
	deepEqual( Stem("matinale"), "matinal" );
	deepEqual( Stem("matinée"), "matin" );
	deepEqual( Stem("matins"), "matin" );
	deepEqual( Stem("matrimoniale"), "matrimonial" );
	deepEqual( Stem("matrimonio"), "matrimonio" );
	deepEqual( Stem("mâts"), "mât" );
	deepEqual( Stem("mâture"), "mâtur" );
	deepEqual( Stem("mâtures"), "mâtur" );
	deepEqual( Stem("maubeuge"), "maubeug" );
	deepEqual( Stem("maudire"), "maudir" );
	deepEqual( Stem("maudis"), "maud" );
	deepEqual( Stem("maudissait"), "maud" );
	deepEqual( Stem("maudissant"), "maud" );
	deepEqual( Stem("maudissez"), "maud" );
	deepEqual( Stem("maudit"), "maud" );
	deepEqual( Stem("maudite"), "maudit" );
	deepEqual( Stem("maudits"), "maudit" );
	deepEqual( Stem("maugiron"), "maugiron" );
	deepEqual( Stem("maugirons"), "maug" );
	deepEqual( Stem("maugréait"), "maugré" );
	deepEqual( Stem("maury"), "maury" );
	deepEqual( Stem("mausolée"), "mausol" );
	deepEqual( Stem("maussade"), "maussad" );
	deepEqual( Stem("mauvais"), "mauv" );
	deepEqual( Stem("mauvaise"), "mauvais" );
	deepEqual( Stem("mauvaises"), "mauvais" );
	deepEqual( Stem("mauve"), "mauv" );
	deepEqual( Stem("maux"), "maux" );
	deepEqual( Stem("maxime"), "maxim" );
	deepEqual( Stem("maximes"), "maxim" );
	deepEqual( Stem("maximum"), "maximum" );
	deepEqual( Stem("mayence"), "mayenc" );
	deepEqual( Stem("me"), "me" );
	deepEqual( Stem("meako"), "meako" );
	deepEqual( Stem("mean"), "mean" );
	deepEqual( Stem("mécanicien"), "mécanicien" );
	deepEqual( Stem("mécanique"), "mécan" );
	deepEqual( Stem("mécaniquement"), "mécan" );
	deepEqual( Stem("mécanisme"), "mécan" );
	deepEqual( Stem("mécène"), "mécen" );
	deepEqual( Stem("méchanceté"), "méchancet" );
	deepEqual( Stem("méchancetés"), "méchancet" );
	deepEqual( Stem("méchant"), "mech" );
	deepEqual( Stem("méchante"), "mech" );
	deepEqual( Stem("méchantes"), "mech" );
	deepEqual( Stem("méchants"), "mech" );
	deepEqual( Stem("mèche"), "mech" );
	deepEqual( Stem("mécomptes"), "mécompt" );
	deepEqual( Stem("méconnaissez"), "méconnaiss" );
	deepEqual( Stem("mécontent"), "mécontent" );
	deepEqual( Stem("mécontente"), "mécontent" );
	deepEqual( Stem("mécontentement"), "mécontent" );
	deepEqual( Stem("mécontents"), "mécontent" );
	deepEqual( Stem("médaille"), "médaill" );
	deepEqual( Stem("médecin"), "médecin" );
	deepEqual( Stem("médecine"), "médecin" );
	deepEqual( Stem("médecins"), "médecin" );
	deepEqual( Stem("médée"), "med" );
	deepEqual( Stem("medicine"), "medicin" );
	deepEqual( Stem("médicis"), "médic" );
	deepEqual( Stem("médiocre"), "médiocr" );
	deepEqual( Stem("médiocrement"), "médiocr" );
	deepEqual( Stem("médiocres"), "médiocr" );
	deepEqual( Stem("médiocrité"), "médiocr" );
	deepEqual( Stem("médire"), "médir" );
	deepEqual( Stem("médisance"), "médis" );
	deepEqual( Stem("médît"), "med" );
	deepEqual( Stem("médita"), "médit" );
	deepEqual( Stem("méditait"), "médit" );
	deepEqual( Stem("méditation"), "médit" );
	deepEqual( Stem("méditations"), "médit" );
	deepEqual( Stem("méditée"), "médit" );
	deepEqual( Stem("méditer"), "médit" );
	deepEqual( Stem("meeting"), "meeting" );
	deepEqual( Stem("méfiance"), "méfianc" );
	deepEqual( Stem("méfiant"), "méfi" );
	deepEqual( Stem("méfie"), "mef" );
	deepEqual( Stem("méfier"), "méfi" );
	deepEqual( Stem("meilleur"), "meilleur" );
	deepEqual( Stem("meilleure"), "meilleur" );
	deepEqual( Stem("meilleures"), "meilleur" );
	deepEqual( Stem("meilleurs"), "meilleur" );
	deepEqual( Stem("mêla"), "mêl" );
	deepEqual( Stem("mêlaient"), "mêl" );
	deepEqual( Stem("mêlait"), "mêl" );
	deepEqual( Stem("mélancolie"), "mélancol" );
	deepEqual( Stem("mélancolique"), "mélancol" );
	deepEqual( Stem("mélancoliquement"), "mélancol" );
	deepEqual( Stem("mélange"), "mélang" );
	deepEqual( Stem("mélangé"), "mélang" );
	deepEqual( Stem("mélangée"), "mélang" );
	deepEqual( Stem("mélangées"), "mélang" );
	deepEqual( Stem("mêlant"), "mêl" );
	deepEqual( Stem("mêle"), "mêl" );
	deepEqual( Stem("mêlé"), "mêl" );
	deepEqual( Stem("mêlée"), "mêl" );
	deepEqual( Stem("mêlent"), "mêlent" );
	deepEqual( Stem("mêler"), "mêl" );
	deepEqual( Stem("mêlés"), "mêl" );
	deepEqual( Stem("mêlez"), "mêl" );
	deepEqual( Stem("mélodie"), "mélod" );
	deepEqual( Stem("mélodieuse"), "mélodi" );
	deepEqual( Stem("mélodrame"), "mélodram" );
	deepEqual( Stem("melzi"), "melz" );
	deepEqual( Stem("membre"), "membr" );
	deepEqual( Stem("membres"), "membr" );
	deepEqual( Stem("membrure"), "membrur" );
	deepEqual( Stem("meme"), "mem" );
	deepEqual( Stem("même"), "mêm" );
	deepEqual( Stem("mêmes"), "mêm" );
	deepEqual( Stem("mémoire"), "mémoir" );
	deepEqual( Stem("mémoires"), "mémoir" );
	deepEqual( Stem("mémorial"), "mémorial" );
	deepEqual( Stem("menaça"), "menac" );
	deepEqual( Stem("menaçaient"), "menac" );
	deepEqual( Stem("menaçais"), "menac" );
	deepEqual( Stem("menaçait"), "menac" );
	deepEqual( Stem("menaçant"), "menac" );
	deepEqual( Stem("menace"), "menac" );
	deepEqual( Stem("menacé"), "menac" );
	deepEqual( Stem("menacée"), "menac" );
	deepEqual( Stem("menacer"), "menac" );
	deepEqual( Stem("menaces"), "menac" );
	deepEqual( Stem("ménage"), "ménag" );
	deepEqual( Stem("ménagé"), "ménag" );
	deepEqual( Stem("ménagement"), "ménag" );
	deepEqual( Stem("ménagements"), "ménag" );
	deepEqual( Stem("ménager"), "ménag" );
	deepEqual( Stem("ménagera"), "ménag" );
	deepEqual( Stem("ménages"), "ménag" );
	deepEqual( Stem("ménagez"), "ménag" );
	deepEqual( Stem("menagio"), "menagio" );
	deepEqual( Stem("menait"), "men" );
	deepEqual( Stem("mendiant"), "mendi" );
	deepEqual( Stem("mendiante"), "mendi" );
	deepEqual( Stem("mendicité"), "mendiqu" );
	deepEqual( Stem("mène"), "men" );
	deepEqual( Stem("mené"), "men" );
	deepEqual( Stem("menée"), "men" );
	deepEqual( Stem("menées"), "men" );
	deepEqual( Stem("mener"), "men" );
	deepEqual( Stem("mènera"), "men" );
	deepEqual( Stem("mènerai"), "men" );
	deepEqual( Stem("mènerais"), "men" );
	deepEqual( Stem("mènerait"), "men" );
	deepEqual( Stem("menèrent"), "men" );
	deepEqual( Stem("meneurs"), "meneur" );
	deepEqual( Stem("menez"), "men" );
	deepEqual( Stem("menottes"), "menott" );
	deepEqual( Stem("mens"), "men" );
	deepEqual( Stem("mensonge"), "mensong" );
	deepEqual( Stem("mensonges"), "mensong" );
	deepEqual( Stem("mentait"), "ment" );
	deepEqual( Stem("mentales"), "mental" );
	deepEqual( Stem("mente"), "ment" );
	deepEqual( Stem("menteurs"), "menteur" );
	deepEqual( Stem("menteuse"), "menteux" );
	deepEqual( Stem("mentez"), "ment" );
	deepEqual( Stem("menti"), "ment" );
	deepEqual( Stem("mention"), "mention" );
	deepEqual( Stem("mentionne"), "mention" );
	deepEqual( Stem("mentionner"), "mention" );
	deepEqual( Stem("mentir"), "ment" );
	deepEqual( Stem("mentirais"), "ment" );
	deepEqual( Stem("menton"), "menton" );
	deepEqual( Stem("menues"), "menu" );
	deepEqual( Stem("menuiserie"), "menuiser" );
	deepEqual( Stem("menuisier"), "menuisi" );
	deepEqual( Stem("menuisiers"), "menuisi" );
	deepEqual( Stem("méphistophélès"), "méphistophéles" );
	deepEqual( Stem("méprenait"), "mépren" );
	deepEqual( Stem("méprendre"), "méprendr" );
	deepEqual( Stem("mépris"), "mepr" );
	deepEqual( Stem("méprisa"), "mépris" );
	deepEqual( Stem("méprisable"), "mépris" );
	deepEqual( Stem("méprisais"), "mépris" );
	deepEqual( Stem("méprisait"), "mépris" );
	deepEqual( Stem("méprisant"), "mépris" );
	deepEqual( Stem("méprise"), "mépris" );
	deepEqual( Stem("méprisé"), "mépris" );
	deepEqual( Stem("méprisée"), "mépris" );
	deepEqual( Stem("méprisent"), "méprisent" );
	deepEqual( Stem("mépriser"), "mépris" );
	deepEqual( Stem("méprisera"), "mépris" );
	deepEqual( Stem("mépriserai"), "mépris" );
	deepEqual( Stem("mépriseraient"), "mépris" );
	deepEqual( Stem("mépriserait"), "mépris" );
	deepEqual( Stem("méprisez"), "mépris" );
	deepEqual( Stem("mer"), "mer" );
	deepEqual( Stem("mercadante"), "mercad" );
	deepEqual( Stem("mercantile"), "mercantil" );
	deepEqual( Stem("merci"), "merc" );
	deepEqual( Stem("mercredi"), "mercred" );
	deepEqual( Stem("mercure"), "mercur" );
	deepEqual( Stem("mère"), "mer" );
	deepEqual( Stem("méridien"), "méridien" );
	deepEqual( Stem("méridiens"), "méridien" );
	deepEqual( Stem("méridional"), "méridional" );
	deepEqual( Stem("méridionale"), "méridional" );
	deepEqual( Stem("méridionaux"), "méridional" );
	deepEqual( Stem("mérimée"), "mérim" );
	deepEqual( Stem("méritait"), "mérit" );
	deepEqual( Stem("méritant"), "mérit" );
	deepEqual( Stem("mérite"), "mérit" );
	deepEqual( Stem("mérité"), "mérit" );
	deepEqual( Stem("méritée"), "mérit" );
	deepEqual( Stem("méritées"), "mérit" );
	deepEqual( Stem("mériter"), "mérit" );
	deepEqual( Stem("méritera"), "mérit" );
	deepEqual( Stem("mériterais"), "mérit" );
	deepEqual( Stem("méritèrent"), "mérit" );
	deepEqual( Stem("mérites"), "mérit" );
	deepEqual( Stem("mérités"), "mérit" );
	deepEqual( Stem("méritez"), "mérit" );
	deepEqual( Stem("méritoire"), "méritoir" );
	deepEqual( Stem("mers"), "mer" );
	deepEqual( Stem("merveille"), "merveil" );
	deepEqual( Stem("merveilles"), "merveil" );
	deepEqual( Stem("merveilleuse"), "merveil" );
	deepEqual( Stem("merveilleusement"), "merveil" );
	deepEqual( Stem("merveilleuses"), "merveil" );
	deepEqual( Stem("merveilleux"), "merveil" );
	deepEqual( Stem("méry"), "méry" );
	deepEqual( Stem("mes"), "me" );
	deepEqual( Stem("mésalliance"), "mésalli" );
	deepEqual( Stem("mésaventure"), "mésaventur" );
	deepEqual( Stem("mesi"), "mes" );
	deepEqual( Stem("mesquin"), "mesquin" );
	deepEqual( Stem("mesquine"), "mesquin" );
	deepEqual( Stem("mesquins"), "mesquin" );
	deepEqual( Stem("message"), "messag" );
	deepEqual( Stem("messager"), "messag" );
	deepEqual( Stem("messageries"), "messager" );
	deepEqual( Stem("messe"), "mess" );
	deepEqual( Stem("messes"), "mess" );
	deepEqual( Stem("messieurs"), "messieur" );
	deepEqual( Stem("messire"), "messir" );
	deepEqual( Stem("mesure"), "mesur" );
	deepEqual( Stem("mesuré"), "mesur" );
	deepEqual( Stem("mesurée"), "mesur" );
	deepEqual( Stem("mesurées"), "mesur" );
	deepEqual( Stem("mesurer"), "mesur" );
	deepEqual( Stem("mesures"), "mesur" );
	deepEqual( Stem("mesurés"), "mesur" );
	deepEqual( Stem("met"), "met" );
	deepEqual( Stem("métal"), "métal" );
	deepEqual( Stem("métalliques"), "métall" );
	deepEqual( Stem("métaphysiques"), "métaphys" );
	deepEqual( Stem("météorologiste"), "météorolog" );
	deepEqual( Stem("méthodes"), "méthod" );
	deepEqual( Stem("méthodique"), "méthod" );
	deepEqual( Stem("méthodiquement"), "méthod" );
	deepEqual( Stem("méthodisme"), "méthod" );
	deepEqual( Stem("méticuleuse"), "méticul" );
	deepEqual( Stem("méticuleux"), "méticul" );
	deepEqual( Stem("métier"), "méti" );
	deepEqual( Stem("métiers"), "méti" );
	deepEqual( Stem("mètres"), "metr" );
	deepEqual( Stem("métropole"), "métropol" );
	deepEqual( Stem("métropolitaine"), "métropolitain" );
	deepEqual( Stem("mets"), "met" );
	deepEqual( Stem("mettaient"), "met" );
	deepEqual( Stem("mettais"), "met" );
	deepEqual( Stem("mettait"), "met" );
	deepEqual( Stem("mettant"), "met" );
	deepEqual( Stem("mette"), "met" );
	deepEqual( Stem("mettent"), "mettent" );
	deepEqual( Stem("mettez"), "met" );
	deepEqual( Stem("mettions"), "mettion" );
	deepEqual( Stem("mettons"), "metton" );
	deepEqual( Stem("mettra"), "mettr" );
	deepEqual( Stem("mettrai"), "mettr" );
	deepEqual( Stem("mettraient"), "mettr" );
	deepEqual( Stem("mettrais"), "mettr" );
	deepEqual( Stem("mettrait"), "mettr" );
	deepEqual( Stem("mettras"), "mettr" );
	deepEqual( Stem("mettre"), "mettr" );
	deepEqual( Stem("mettrez"), "mettr" );
	deepEqual( Stem("mettriez"), "mettr" );
	deepEqual( Stem("mettrons"), "mettron" );
	deepEqual( Stem("mettront"), "mettront" );
	deepEqual( Stem("metz"), "metz" );
	deepEqual( Stem("meuble"), "meubl" );
	deepEqual( Stem("meublée"), "meubl" );
	deepEqual( Stem("meublées"), "meubl" );
	deepEqual( Stem("meubler"), "meubl" );
	deepEqual( Stem("meubles"), "meubl" );
	deepEqual( Stem("meudon"), "meudon" );
	deepEqual( Stem("meunier"), "meuni" );
	deepEqual( Stem("meure"), "meur" );
	deepEqual( Stem("meures"), "meur" );
	deepEqual( Stem("meurs"), "meur" );
	deepEqual( Stem("meurt"), "meurt" );
	deepEqual( Stem("meurtre"), "meurtr" );
	deepEqual( Stem("meurtres"), "meurtr" );
	deepEqual( Stem("meurtrier"), "meurtri" );
	deepEqual( Stem("meurtrière"), "meurtri" );
	deepEqual( Stem("meurtris"), "meurtr" );
	deepEqual( Stem("meurtrissure"), "meurtrissur" );
	deepEqual( Stem("meus"), "meus" );
	deepEqual( Stem("mexicain"), "mexicain" );
	deepEqual( Stem("mexique"), "mexiqu" );
	deepEqual( Stem("mezzo"), "mezzo" );
	deepEqual( Stem("mi"), "mi" );
	deepEqual( Stem("mia"), "mi" );
	deepEqual( Stem("miaulé"), "miaul" );
	deepEqual( Stem("michaud"), "michaud" );
	deepEqual( Stem("michel"), "michel" );
	deepEqual( Stem("michele"), "michel" );
	deepEqual( Stem("michelet"), "michelet" );
	deepEqual( Stem("micheli"), "michel" );
	deepEqual( Stem("michigan"), "michigan" );
	deepEqual( Stem("microscope"), "microscop" );
	deepEqual( Stem("microscopique"), "microscop" );
	deepEqual( Stem("microscopiques"), "microscop" );
	deepEqual( Stem("midi"), "mid" );
	deepEqual( Stem("mielleuse"), "mielleux" );
	deepEqual( Stem("mielleuses"), "mielleux" );
	deepEqual( Stem("mien"), "mien" );
	deepEqual( Stem("mienne"), "mien" );
	deepEqual( Stem("miens"), "mien" );
	deepEqual( Stem("miettes"), "miet" );
	deepEqual( Stem("mieux"), "mieux" );
	deepEqual( Stem("mignonnes"), "mignon" );
	deepEqual( Stem("migraine"), "migrain" );
	deepEqual( Stem("migration"), "migrat" );
	deepEqual( Stem("mikado"), "mikado" );
	deepEqual( Stem("milan"), "milan" );
	deepEqual( Stem("milanais"), "milan" );
	deepEqual( Stem("milanaise"), "milanais" );
	deepEqual( Stem("milieu"), "milieu" );
	deepEqual( Stem("militaire"), "militair" );
	deepEqual( Stem("militaires"), "militair" );
	deepEqual( Stem("mille"), "mill" );
	deepEqual( Stem("milles"), "mill" );
	deepEqual( Stem("milliard"), "milliard" );
	deepEqual( Stem("milliards"), "milliard" );
	deepEqual( Stem("milliers"), "milli" );
	deepEqual( Stem("million"), "million" );
	deepEqual( Stem("millionnaire"), "millionnair" );
	deepEqual( Stem("millionnaires"), "millionnair" );
	deepEqual( Stem("millions"), "million" );
	deepEqual( Stem("mimosées"), "mimos" );
	deepEqual( Stem("minaret"), "minaret" );
	deepEqual( Stem("minarets"), "minaret" );
	deepEqual( Stem("mince"), "minc" );
	deepEqual( Stem("minces"), "minc" );
	deepEqual( Stem("mind"), "mind" );
	deepEqual( Stem("mine"), "min" );
	deepEqual( Stem("minéralogie"), "minéralog" );
	deepEqual( Stem("minéraux"), "minéral" );
	deepEqual( Stem("minerve"), "minerv" );
	deepEqual( Stem("mines"), "min" );
	deepEqual( Stem("mineurs"), "mineur" );
	deepEqual( Stem("miniature"), "miniatur" );
	deepEqual( Stem("minimum"), "minimum" );
	deepEqual( Stem("ministère"), "minister" );
	deepEqual( Stem("ministères"), "minister" );
	deepEqual( Stem("ministériel"), "ministériel" );
	deepEqual( Stem("ministérielle"), "ministériel" );
	deepEqual( Stem("ministre"), "ministr" );
	deepEqual( Stem("ministres"), "ministr" );
	deepEqual( Stem("minuit"), "minuit" );
	deepEqual( Stem("minute"), "minut" );
	deepEqual( Stem("minutes"), "minut" );
	deepEqual( Stem("mirabeau"), "mirabeau" );
	deepEqual( Stem("miracle"), "miracl" );
	deepEqual( Stem("miracles"), "miracl" );
	deepEqual( Stem("miraculeuse"), "miracul" );
	deepEqual( Stem("mirari"), "mirar" );
	deepEqual( Stem("miraut"), "miraut" );
	deepEqual( Stem("mire"), "mir" );
	deepEqual( Stem("mirent"), "mirent" );
	deepEqual( Stem("miroir"), "miroir" );
	deepEqual( Stem("mis"), "mis" );
	deepEqual( Stem("misaine"), "misain" );
	deepEqual( Stem("mise"), "mis" );
	deepEqual( Stem("misène"), "misen" );
	deepEqual( Stem("misérable"), "miser" );
	deepEqual( Stem("misérables"), "miser" );
	deepEqual( Stem("misère"), "miser" );
	deepEqual( Stem("misères"), "miser" );
	deepEqual( Stem("miséricorde"), "miséricord" );
	deepEqual( Stem("mises"), "mis" );
	deepEqual( Stem("missel"), "missel" );
	deepEqual( Stem("mission"), "mission" );
	deepEqual( Stem("missionnaire"), "missionnair" );
	deepEqual( Stem("missions"), "mission" );
	deepEqual( Stem("mississippi"), "mississipp" );
	deepEqual( Stem("missive"), "missiv" );
	deepEqual( Stem("missouri"), "missour" );
	deepEqual( Stem("mit"), "mit" );
	deepEqual( Stem("mît"), "mît" );
	deepEqual( Stem("mitiger"), "mitig" );
	deepEqual( Stem("mitre"), "mitr" );
	deepEqual( Stem("mitres"), "mitr" );
	deepEqual( Stem("mm"), "mm" );
	deepEqual( Stem("mme"), "mme" );
	deepEqual( Stem("mobile"), "mobil" );
	deepEqual( Stem("mobiles"), "mobil" );
	deepEqual( Stem("mobilité"), "mobil" );
	deepEqual( Stem("mode"), "mod" );
	deepEqual( Stem("modèle"), "model" );
	deepEqual( Stem("modelée"), "model" );
	deepEqual( Stem("modèles"), "model" );
	deepEqual( Stem("modène"), "moden" );
	deepEqual( Stem("modéra"), "moder" );
	deepEqual( Stem("modération"), "moder" );
	deepEqual( Stem("modéré"), "moder" );
	deepEqual( Stem("modérée"), "moder" );
	deepEqual( Stem("modérés"), "moder" );
	deepEqual( Stem("modérez"), "moder" );
	deepEqual( Stem("moderne"), "modern" );
	deepEqual( Stem("modernes"), "modern" );
	deepEqual( Stem("modes"), "mod" );
	deepEqual( Stem("modeste"), "modest" );
	deepEqual( Stem("modestie"), "modest" );
	deepEqual( Stem("modifia"), "modifi" );
	deepEqual( Stem("modification"), "modif" );
	deepEqual( Stem("modifiée"), "modifi" );
	deepEqual( Stem("modifier"), "modifi" );
	deepEqual( Stem("modifierait"), "modifi" );
	deepEqual( Stem("moelleux"), "moelleux" );
	deepEqual( Stem("moeurs"), "moeur" );
	deepEqual( Stem("moi"), "moi" );
	deepEqual( Stem("moindre"), "moindr" );
	deepEqual( Stem("moindres"), "moindr" );
	deepEqual( Stem("moine"), "moin" );
	deepEqual( Stem("moineaux"), "moineau" );
	deepEqual( Stem("moines"), "moin" );
	deepEqual( Stem("moins"), "moin" );
	deepEqual( Stem("moirod"), "moirod" );
	deepEqual( Stem("mois"), "mois" );
	deepEqual( Stem("moisson"), "moisson" );
	deepEqual( Stem("moitié"), "moiti" );
	deepEqual( Stem("moka"), "mok" );
	deepEqual( Stem("mole"), "mol" );
	deepEqual( Stem("molière"), "moli" );
	deepEqual( Stem("molle"), "moll" );
	deepEqual( Stem("mollement"), "moll" );
	deepEqual( Stem("molleton"), "molleton" );
	deepEqual( Stem("mollissait"), "moll" );
	deepEqual( Stem("mollit"), "moll" );
	deepEqual( Stem("moltiplico"), "moltiplico" );
	deepEqual( Stem("moment"), "moment" );
	deepEqual( Stem("momentanée"), "momentan" );
	deepEqual( Stem("moments"), "moment" );
	deepEqual( Stem("momie"), "mom" );
	deepEqual( Stem("momies"), "mom" );
	deepEqual( Stem("mon"), "mon" );
	deepEqual( Stem("monaca"), "monac" );
	deepEqual( Stem("monarchie"), "monarch" );
	deepEqual( Stem("monarchies"), "monarch" );
	deepEqual( Stem("monarchique"), "monarch" );
	deepEqual( Stem("monarchiques"), "monarch" );
	deepEqual( Stem("monastères"), "monaster" );
	deepEqual( Stem("moncade"), "moncad" );
	deepEqual( Stem("monceau"), "monceau" );
	deepEqual( Stem("moncontour"), "moncontour" );
	deepEqual( Stem("mondain"), "mondain" );
	deepEqual( Stem("mondaine"), "mondain" );
	deepEqual( Stem("mondaines"), "mondain" );
	deepEqual( Stem("mondains"), "mondain" );
	deepEqual( Stem("monde"), "mond" );
	deepEqual( Stem("monférine"), "monférin" );
	deepEqual( Stem("monfleury"), "monfleury" );
	deepEqual( Stem("monghir"), "mongh" );
	deepEqual( Stem("mongolia"), "mongoli" );
	deepEqual( Stem("moniteur"), "moniteur" );
	deepEqual( Stem("monnaie"), "monnai" );
	deepEqual( Stem("monologue"), "monologu" );
	deepEqual( Stem("monomanes"), "monoman" );
	deepEqual( Stem("monopole"), "monopol" );
	deepEqual( Stem("monosyllabes"), "monosyllab" );
	deepEqual( Stem("monotone"), "monoton" );
	deepEqual( Stem("monotones"), "monoton" );
	deepEqual( Stem("monseigneur"), "monseigneur" );
	deepEqual( Stem("monsieur"), "monsieur" );
	deepEqual( Stem("monsignor"), "monsignor" );
	deepEqual( Stem("monsignore"), "monsignor" );
	deepEqual( Stem("monstre"), "monstr" );
	deepEqual( Stem("monstres"), "monstr" );
	deepEqual( Stem("monstrueuses"), "monstrueux" );
	deepEqual( Stem("mont"), "mont" );
	deepEqual( Stem("monta"), "mont" );
	deepEqual( Stem("montagne"), "montagn" );
	deepEqual( Stem("montagnes"), "montagn" );
	deepEqual( Stem("montagneuse"), "montagn" );
	deepEqual( Stem("montagneux"), "montagn" );
	deepEqual( Stem("montagnola"), "montagnol" );
	deepEqual( Stem("montaient"), "mont" );
	deepEqual( Stem("montais"), "mont" );
	deepEqual( Stem("montait"), "mont" );
	deepEqual( Stem("montant"), "mont" );
	deepEqual( Stem("montât"), "mont" );
	deepEqual( Stem("monte"), "mont" );
	deepEqual( Stem("monté"), "mont" );
	deepEqual( Stem("montée"), "mont" );
	deepEqual( Stem("montent"), "montent" );
	deepEqual( Stem("monter"), "mont" );
	deepEqual( Stem("montera"), "mont" );
	deepEqual( Stem("monterai"), "mont" );
	deepEqual( Stem("montèrent"), "mont" );
	deepEqual( Stem("montés"), "mont" );
	deepEqual( Stem("montesson"), "montesson" );
	deepEqual( Stem("montez"), "mont" );
	deepEqual( Stem("montgommery"), "montgommery" );
	deepEqual( Stem("monti"), "mont" );
	deepEqual( Stem("montmartre"), "montmartr" );
	deepEqual( Stem("montmirail"), "montmirail" );
	deepEqual( Stem("montmorency"), "montmorency" );
	deepEqual( Stem("montoir"), "montoir" );
	deepEqual( Stem("montons"), "monton" );
	deepEqual( Stem("montra"), "montr" );
	deepEqual( Stem("montraient"), "montr" );
	deepEqual( Stem("montrait"), "montr" );
	deepEqual( Stem("montrant"), "montr" );
	deepEqual( Stem("montrât"), "montr" );
	deepEqual( Stem("montre"), "montr" );
	deepEqual( Stem("montré"), "montr" );
	deepEqual( Stem("montrée"), "montr" );
	deepEqual( Stem("montrent"), "montrent" );
	deepEqual( Stem("montrer"), "montr" );
	deepEqual( Stem("montrera"), "montr" );
	deepEqual( Stem("montrerai"), "montr" );
	deepEqual( Stem("montrerait"), "montr" );
	deepEqual( Stem("montrèrent"), "montr" );
	deepEqual( Stem("montreriez"), "montr" );
	deepEqual( Stem("montres"), "montr" );
	deepEqual( Stem("montrés"), "montr" );
	deepEqual( Stem("montreur"), "montreur" );
	deepEqual( Stem("montrez"), "montr" );
	deepEqual( Stem("monts"), "mont" );
	deepEqual( Stem("monture"), "montur" );
	deepEqual( Stem("monument"), "monu" );
	deepEqual( Stem("monumental"), "monumental" );
	deepEqual( Stem("monuments"), "monu" );
	deepEqual( Stem("moqua"), "moqu" );
	deepEqual( Stem("moquai"), "moqu" );
	deepEqual( Stem("moquaient"), "moqu" );
	deepEqual( Stem("moquais"), "moqu" );
	deepEqual( Stem("moquait"), "moqu" );
	deepEqual( Stem("moquant"), "moqu" );
	deepEqual( Stem("moque"), "moqu" );
	deepEqual( Stem("moqué"), "moqu" );
	deepEqual( Stem("moquent"), "moquent" );
	deepEqual( Stem("moquer"), "moqu" );
	deepEqual( Stem("moquera"), "moqu" );
	deepEqual( Stem("moquerais"), "moqu" );
	deepEqual( Stem("moquerait"), "moqu" );
	deepEqual( Stem("moquerie"), "moquer" );
	deepEqual( Stem("moqueur"), "moqueur" );
	deepEqual( Stem("moqueurs"), "moqueur" );
	deepEqual( Stem("moqueuse"), "moqueux" );
	deepEqual( Stem("moral"), "moral" );
	deepEqual( Stem("morale"), "moral" );
	deepEqual( Stem("morales"), "moral" );
	deepEqual( Stem("moralité"), "moral" );
	deepEqual( Stem("moralités"), "moral" );
	deepEqual( Stem("moraux"), "moral" );
	deepEqual( Stem("moravie"), "morav" );
	deepEqual( Stem("morbleu"), "morbleu" );
	deepEqual( Stem("morceau"), "morceau" );
	deepEqual( Stem("morceaux"), "morceau" );
	deepEqual( Stem("mord"), "mord" );
	deepEqual( Stem("mordait"), "mord" );
	deepEqual( Stem("mordant"), "mord" );
	deepEqual( Stem("mordantes"), "mord" );
	deepEqual( Stem("moreri"), "morer" );
	deepEqual( Stem("morfondre"), "morfondr" );
	deepEqual( Stem("mormon"), "mormon" );
	deepEqual( Stem("mormone"), "mormon" );
	deepEqual( Stem("mormones"), "mormon" );
	deepEqual( Stem("mormonisme"), "mormon" );
	deepEqual( Stem("mormons"), "mormon" );
	deepEqual( Stem("morne"), "morn" );
	deepEqual( Stem("mornes"), "morn" );
	deepEqual( Stem("morning"), "morning" );
	deepEqual( Stem("morom"), "morom" );
	deepEqual( Stem("morose"), "moros" );
	deepEqual( Stem("moroses"), "moros" );
	deepEqual( Stem("mort"), "mort" );
	deepEqual( Stem("mortaretti"), "mortaret" );
	deepEqual( Stem("morte"), "mort" );
	deepEqual( Stem("mortel"), "mortel" );
	deepEqual( Stem("mortelle"), "mortel" );
	deepEqual( Stem("mortellement"), "mortel" );
	deepEqual( Stem("mortelles"), "mortel" );
	deepEqual( Stem("mortels"), "mortel" );
	deepEqual( Stem("mortes"), "mort" );
	deepEqual( Stem("mortier"), "morti" );
	deepEqual( Stem("mortiers"), "morti" );
	deepEqual( Stem("mortifiantes"), "mortifi" );
	deepEqual( Stem("mortifié"), "mortifi" );
	deepEqual( Stem("mortifier"), "mortifi" );
	deepEqual( Stem("morts"), "mort" );
	deepEqual( Stem("morveux"), "morveux" );
	deepEqual( Stem("mosca"), "mosc" );
	deepEqual( Stem("moscou"), "moscou" );
	deepEqual( Stem("moskova"), "moskov" );
	deepEqual( Stem("mosquées"), "mosqu" );
	deepEqual( Stem("most"), "most" );
	deepEqual( Stem("mot"), "mot" );
	deepEqual( Stem("moteur"), "moteur" );
	deepEqual( Stem("motif"), "motif" );
	deepEqual( Stem("motifs"), "motif" );
	deepEqual( Stem("motivât"), "motiv" );
	deepEqual( Stem("motivé"), "motiv" );
	deepEqual( Stem("motrices"), "motric" );
	deepEqual( Stem("mots"), "mot" );
	deepEqual( Stem("motu"), "motu" );
	deepEqual( Stem("mouche"), "mouch" );
	deepEqual( Stem("mouchent"), "mouchent" );
	deepEqual( Stem("moucher"), "mouch" );
	deepEqual( Stem("moucheurs"), "moucheur" );
	deepEqual( Stem("mouchoir"), "mouchoir" );
	deepEqual( Stem("mouchoirs"), "mouchoir" );
	deepEqual( Stem("mouettes"), "mouet" );
	deepEqual( Stem("mouilla"), "mouill" );
	deepEqual( Stem("mouillé"), "mouill" );
	deepEqual( Stem("mouiller"), "mouill" );
	deepEqual( Stem("mouillèrent"), "mouill" );
	deepEqual( Stem("mouillés"), "mouill" );
	deepEqual( Stem("moule"), "moul" );
	deepEqual( Stem("moulin"), "moulin" );
	deepEqual( Stem("moulus"), "moulus" );
	deepEqual( Stem("mountains"), "mountain" );
	deepEqual( Stem("mourais"), "mour" );
	deepEqual( Stem("mourait"), "mour" );
	deepEqual( Stem("mourant"), "mour" );
	deepEqual( Stem("mourante"), "mour" );
	deepEqual( Stem("mourants"), "mour" );
	deepEqual( Stem("mourions"), "mourion" );
	deepEqual( Stem("mourir"), "mour" );
	deepEqual( Stem("mourons"), "mouron" );
	deepEqual( Stem("mourra"), "mourr" );
	deepEqual( Stem("mourrai"), "mourr" );
	deepEqual( Stem("mourrais"), "mourr" );
	deepEqual( Stem("mourrait"), "mourr" );
	deepEqual( Stem("mourras"), "mourr" );
	deepEqual( Stem("mourrez"), "mourr" );
	deepEqual( Stem("mourrons"), "mourron" );
	deepEqual( Stem("mourront"), "mourront" );
	deepEqual( Stem("mourshedabad"), "mourshedabad" );
	deepEqual( Stem("mourusse"), "mouruss" );
	deepEqual( Stem("mourut"), "mourut" );
	deepEqual( Stem("mourût"), "mourût" );
	deepEqual( Stem("mousqueterie"), "mousqueter" );
	deepEqual( Stem("mousseline"), "mousselin" );
	deepEqual( Stem("mousseux"), "mousseux" );
	deepEqual( Stem("moustache"), "moustach" );
	deepEqual( Stem("moustaches"), "moustach" );
	deepEqual( Stem("mouton"), "mouton" );
	deepEqual( Stem("moutonnaient"), "mouton" );
	deepEqual( Stem("moutons"), "mouton" );
	deepEqual( Stem("mouvement"), "mouv" );
	deepEqual( Stem("mouvements"), "mouv" );
	deepEqual( Stem("mouvoir"), "mouvoir" );
	deepEqual( Stem("moyen"), "moyen" );
	deepEqual( Stem("moyenne"), "moyen" );
	deepEqual( Stem("moyennes"), "moyen" );
	deepEqual( Stem("moyens"), "moyen" );
	deepEqual( Stem("moyeux"), "moyeux" );
	deepEqual( Stem("mozart"), "mozart" );
	deepEqual( Stem("mr"), "mr" );
	deepEqual( Stem("mrs"), "mr" );
	deepEqual( Stem("mû"), "mû" );
	deepEqual( Stem("much"), "much" );
	deepEqual( Stem("muddy"), "muddy" );
	deepEqual( Stem("mudge"), "mudg" );
	deepEqual( Stem("muet"), "muet" );
	deepEqual( Stem("muets"), "muet" );
	deepEqual( Stem("mugissements"), "mug" );
	deepEqual( Stem("mulet"), "mulet" );
	deepEqual( Stem("muletiers"), "muleti" );
	deepEqual( Stem("mulhouse"), "mulhous" );
	deepEqual( Stem("multicolores"), "multicolor" );
	deepEqual( Stem("multiplications"), "multipl" );
	deepEqual( Stem("multiplicité"), "multipl" );
	deepEqual( Stem("multiplie"), "multipl" );
	deepEqual( Stem("multiplier"), "multipli" );
	deepEqual( Stem("multipliés"), "multipli" );
	deepEqual( Stem("muni"), "mun" );
	deepEqual( Stem("munich"), "munich" );
	deepEqual( Stem("municipal"), "municipal" );
	deepEqual( Stem("munir"), "mun" );
	deepEqual( Stem("munis"), "mun" );
	deepEqual( Stem("munster"), "munst" );
	deepEqual( Stem("mur"), "mur" );
	deepEqual( Stem("mûr"), "mûr" );
	deepEqual( Stem("muraille"), "muraill" );
	deepEqual( Stem("murailles"), "muraill" );
	deepEqual( Stem("mural"), "mural" );
	deepEqual( Stem("murat"), "murat" );
	deepEqual( Stem("murées"), "mur" );
	deepEqual( Stem("mûrement"), "mûr" );
	deepEqual( Stem("mûrir"), "mûr" );
	deepEqual( Stem("murmura"), "murmur" );
	deepEqual( Stem("murmurait"), "murmur" );
	deepEqual( Stem("murmure"), "murmur" );
	deepEqual( Stem("murmures"), "murmur" );
	deepEqual( Stem("murs"), "mur" );
	deepEqual( Stem("muscadiers"), "muscadi" );
	deepEqual( Stem("muscles"), "muscl" );
	deepEqual( Stem("musculaire"), "musculair" );
	deepEqual( Stem("musculature"), "musculatur" );
	deepEqual( Stem("musée"), "mus" );
	deepEqual( Stem("mushroom"), "mushroom" );
	deepEqual( Stem("musicien"), "musicien" );
	deepEqual( Stem("musiciens"), "musicien" );
	deepEqual( Stem("musique"), "musiqu" );
	deepEqual( Stem("musset"), "musset" );
	deepEqual( Stem("mutilation"), "mutil" );
	deepEqual( Stem("mutilé"), "mutil" );
	deepEqual( Stem("mutsh"), "mutsh" );
	deepEqual( Stem("mutuel"), "mutuel" );
	deepEqual( Stem("mylord"), "mylord" );
	deepEqual( Stem("mystère"), "myster" );
	deepEqual( Stem("mystères"), "myster" );
	deepEqual( Stem("mystérieuse"), "mystéri" );
	deepEqual( Stem("mystérieusement"), "mystéri" );
	deepEqual( Stem("mystérieux"), "mystéri" );
	deepEqual( Stem("mysticité"), "mystiqu" );
	deepEqual( Stem("mystification"), "mystif" );
	deepEqual( Stem("mystifie"), "mystif" );
	deepEqual( Stem("mystifié"), "mystifi" );
	deepEqual( Stem("mystifiée"), "mystifi" );
	deepEqual( Stem("mystifier"), "mystifi" );
	deepEqual( Stem("mystique"), "mystiqu" );
	deepEqual( Stem("n"), "n" );
	deepEqual( Stem("nadir"), "nad" );
	deepEqual( Stem("nagasaki"), "nagasak" );
	deepEqual( Stem("nage"), "nag" );
	deepEqual( Stem("nagent"), "nagent" );
	deepEqual( Stem("nager"), "nag" );
	deepEqual( Stem("naguère"), "naguer" );
	deepEqual( Stem("naïf"), "naïf" );
	deepEqual( Stem("naïfs"), "naïf" );
	deepEqual( Stem("nains"), "nain" );
	deepEqual( Stem("naissance"), "naissanc" );
	deepEqual( Stem("naissant"), "naiss" );
	deepEqual( Stem("naissante"), "naiss" );
	deepEqual( Stem("naissent"), "naissent" );
	deepEqual( Stem("naît"), "naît" );
	deepEqual( Stem("naître"), "naîtr" );
	deepEqual( Stem("naïve"), "naïv" );
	deepEqual( Stem("naïvement"), "naïv" );
	deepEqual( Stem("naïves"), "naïv" );
	deepEqual( Stem("naïveté"), "naïvet" );
	deepEqual( Stem("nanan"), "nanan" );
	deepEqual( Stem("nani"), "nan" );
	deepEqual( Stem("nankin"), "nankin" );
	deepEqual( Stem("nanking"), "nanking" );
	deepEqual( Stem("napier"), "napi" );
	deepEqual( Stem("naples"), "napl" );
	deepEqual( Stem("napoléon"), "napoléon" );
	deepEqual( Stem("napoléons"), "napoléon" );
	deepEqual( Stem("napolitain"), "napolitain" );
	deepEqual( Stem("nappe"), "napp" );
	deepEqual( Stem("narcotique"), "narcot" );
	deepEqual( Stem("narra"), "narr" );
	deepEqual( Stem("narrant"), "narr" );
	deepEqual( Stem("narrateur"), "narrateur" );
	deepEqual( Stem("narration"), "narrat" );
	deepEqual( Stem("narrer"), "narr" );
	deepEqual( Stem("nasillard"), "nasillard" );
	deepEqual( Stem("nassik"), "nassik" );
	deepEqual( Stem("natal"), "natal" );
	deepEqual( Stem("natif"), "natif" );
	deepEqual( Stem("nation"), "nation" );
	deepEqual( Stem("national"), "national" );
	deepEqual( Stem("nationale"), "national" );
	deepEqual( Stem("nationales"), "national" );
	deepEqual( Stem("nationalité"), "national" );
	deepEqual( Stem("nationalités"), "national" );
	deepEqual( Stem("nations"), "nation" );
	deepEqual( Stem("nature"), "natur" );
	deepEqual( Stem("naturel"), "naturel" );
	deepEqual( Stem("naturelle"), "naturel" );
	deepEqual( Stem("naturellement"), "naturel" );
	deepEqual( Stem("naturelles"), "naturel" );
	deepEqual( Stem("naturels"), "naturel" );
	deepEqual( Stem("naufrages"), "naufrag" );
	deepEqual( Stem("nauséabondes"), "nauséabond" );
	deepEqual( Stem("nausées"), "naus" );
	deepEqual( Stem("nautique"), "nautiqu" );
	deepEqual( Stem("nauvoo"), "nauvoo" );
	deepEqual( Stem("navarre"), "navarr" );
	deepEqual( Stem("navigateur"), "navig" );
	deepEqual( Stem("navigateurs"), "navig" );
	deepEqual( Stem("navigation"), "navig" );
	deepEqual( Stem("navigua"), "navigu" );
	deepEqual( Stem("naviguant"), "navigu" );
	deepEqual( Stem("naviguent"), "naviguent" );
	deepEqual( Stem("navire"), "navir" );
	deepEqual( Stem("navires"), "navir" );
	deepEqual( Stem("navré"), "navr" );
	deepEqual( Stem("navrée"), "navr" );
	deepEqual( Stem("nazaro"), "nazaro" );
	deepEqual( Stem("ne"), "ne" );
	deepEqual( Stem("né"), "né" );
	deepEqual( Stem("néanmoins"), "néanmoin" );
	deepEqual( Stem("néant"), "né" );
	deepEqual( Stem("nébieu"), "nébieu" );
	deepEqual( Stem("nebraska"), "nebrask" );
	deepEqual( Stem("nécessaire"), "nécessair" );
	deepEqual( Stem("nécessairement"), "nécessair" );
	deepEqual( Stem("nécessaires"), "nécessair" );
	deepEqual( Stem("nécessitant"), "nécessit" );
	deepEqual( Stem("nécessité"), "nécess" );
	deepEqual( Stem("née"), "né" );
	deepEqual( Stem("nées"), "né" );
	deepEqual( Stem("nef"), "nef" );
	deepEqual( Stem("nefs"), "nef" );
	deepEqual( Stem("négatif"), "négat" );
	deepEqual( Stem("néglige"), "néglig" );
	deepEqual( Stem("négligé"), "néglig" );
	deepEqual( Stem("négligeait"), "néglig" );
	deepEqual( Stem("négligemment"), "négligent" );
	deepEqual( Stem("négligence"), "négligent" );
	deepEqual( Stem("négligents"), "négligent" );
	deepEqual( Stem("négliger"), "néglig" );
	deepEqual( Stem("négligerait"), "néglig" );
	deepEqual( Stem("négociant"), "négoci" );
	deepEqual( Stem("négociants"), "négoci" );
	deepEqual( Stem("négociateur"), "négoci" );
	deepEqual( Stem("négociation"), "négoci" );
	deepEqual( Stem("négociations"), "négoci" );
	deepEqual( Stem("nègre"), "negr" );
	deepEqual( Stem("nègres"), "negr" );
	deepEqual( Stem("neige"), "neig" );
	deepEqual( Stem("neigeait"), "neig" );
	deepEqual( Stem("neiges"), "neig" );
	deepEqual( Stem("neptune"), "neptun" );
	deepEqual( Stem("nerfs"), "nerf" );
	deepEqual( Stem("nerval"), "nerval" );
	deepEqual( Stem("nerveuse"), "nerveux" );
	deepEqual( Stem("nerveux"), "nerveux" );
	deepEqual( Stem("nés"), "né" );
	deepEqual( Stem("net"), "net" );
	deepEqual( Stem("nets"), "net" );
	deepEqual( Stem("nette"), "net" );
	deepEqual( Stem("nettement"), "net" );
	deepEqual( Stem("nettes"), "net" );
	deepEqual( Stem("netteté"), "nettet" );
	deepEqual( Stem("nettoya"), "nettoi" );
	deepEqual( Stem("nettoyer"), "nettoi" );
	deepEqual( Stem("neuf"), "neuf" );
	deepEqual( Stem("neufs"), "neuf" );
	deepEqual( Stem("neutralité"), "neutral" );
	deepEqual( Stem("neutre"), "neutr" );
	deepEqual( Stem("neuvaine"), "neuvain" );
	deepEqual( Stem("neuve"), "neuv" );
	deepEqual( Stem("neuves"), "neuv" );
	deepEqual( Stem("neuvième"), "neuviem" );
	deepEqual( Stem("nevada"), "nevad" );
	deepEqual( Stem("never"), "nev" );
	deepEqual( Stem("neveu"), "neveu" );
	deepEqual( Stem("neveux"), "neveux" );
	deepEqual( Stem("new"), "new" );
	deepEqual( Stem("news"), "new" );
	deepEqual( Stem("ney"), "ney" );
	deepEqual( Stem("nez"), "nez" );
	deepEqual( Stem("ni"), "ni" );
	deepEqual( Stem("niais"), "ni" );
	deepEqual( Stem("niaiserie"), "niaiser" );
	deepEqual( Stem("niaiseries"), "niaiser" );
	deepEqual( Stem("niaises"), "niais" );
	deepEqual( Stem("nice"), "nic" );
	deepEqual( Stem("niche"), "nich" );
	deepEqual( Stem("nicolas"), "nicol" );
	deepEqual( Stem("nids"), "nid" );
	deepEqual( Stem("nie"), "ni" );
	deepEqual( Stem("nié"), "ni" );
	deepEqual( Stem("nièce"), "niec" );
	deepEqual( Stem("nièces"), "niec" );
	deepEqual( Stem("nier"), "ni" );
	deepEqual( Stem("nierais"), "ni" );
	deepEqual( Stem("nierons"), "ni" );
	deepEqual( Stem("nigaud"), "nigaud" );
	deepEqual( Stem("nigauderie"), "nigauder" );
	deepEqual( Stem("nigauds"), "nigaud" );
	deepEqual( Stem("night"), "night" );
	deepEqual( Stem("nil"), "nil" );
	deepEqual( Stem("niveau"), "niveau" );
	deepEqual( Stem("nivelées"), "nivel" );
	deepEqual( Stem("nizam"), "nizam" );
	deepEqual( Stem("no"), "no" );
	deepEqual( Stem("nobiliaires"), "nobiliair" );
	deepEqual( Stem("noble"), "nobl" );
	deepEqual( Stem("nobles"), "nobl" );
	deepEqual( Stem("noblesse"), "nobless" );
	deepEqual( Stem("noce"), "noc" );
	deepEqual( Stem("noces"), "noc" );
	deepEqual( Stem("nocturne"), "nocturn" );
	deepEqual( Stem("nocturnes"), "nocturn" );
	deepEqual( Stem("noeud"), "noeud" );
	deepEqual( Stem("noeuds"), "noeud" );
	deepEqual( Stem("noie"), "noi" );
	deepEqual( Stem("noir"), "noir" );
	deepEqual( Stem("noirci"), "noirc" );
	deepEqual( Stem("noircie"), "noirc" );
	deepEqual( Stem("noircies"), "noirc" );
	deepEqual( Stem("noircis"), "noirc" );
	deepEqual( Stem("noire"), "noir" );
	deepEqual( Stem("noires"), "noir" );
	deepEqual( Stem("noiroud"), "noiroud" );
	deepEqual( Stem("noirs"), "noir" );
	deepEqual( Stem("noix"), "noix" );
	deepEqual( Stem("nom"), "nom" );
	deepEqual( Stem("nombre"), "nombr" );
	deepEqual( Stem("nombreuse"), "nombreux" );
	deepEqual( Stem("nombreuses"), "nombreux" );
	deepEqual( Stem("nombreux"), "nombreux" );
	deepEqual( Stem("nominal"), "nominal" );
	deepEqual( Stem("nominale"), "nominal" );
	deepEqual( Stem("nomination"), "nomin" );
	deepEqual( Stem("nommait"), "nomm" );
	deepEqual( Stem("nommant"), "nomm" );
	deepEqual( Stem("nomme"), "nomm" );
	deepEqual( Stem("nommé"), "nomm" );
	deepEqual( Stem("nommée"), "nomm" );
	deepEqual( Stem("nommer"), "nomm" );
	deepEqual( Stem("nommés"), "nomm" );
	deepEqual( Stem("nommez"), "nomm" );
	deepEqual( Stem("noms"), "nom" );
	deepEqual( Stem("non"), "non" );
	deepEqual( Stem("nonante"), "non" );
	deepEqual( Stem("nonchalance"), "nonchal" );
	deepEqual( Stem("nonchalant"), "nonchal" );
	deepEqual( Stem("norbert"), "norbert" );
	deepEqual( Stem("nord"), "nord" );
	deepEqual( Stem("norimons"), "norimon" );
	deepEqual( Stem("normale"), "normal" );
	deepEqual( Stem("normandie"), "normand" );
	deepEqual( Stem("normands"), "normand" );
	deepEqual( Stem("north"), "north" );
	deepEqual( Stem("nos"), "nos" );
	deepEqual( Stem("not"), "not" );
	deepEqual( Stem("notable"), "notabl" );
	deepEqual( Stem("notablement"), "notabl" );
	deepEqual( Stem("notables"), "notabl" );
	deepEqual( Stem("notaire"), "notair" );
	deepEqual( Stem("notaires"), "notair" );
	deepEqual( Stem("note"), "not" );
	deepEqual( Stem("noté"), "not" );
	deepEqual( Stem("noter"), "not" );
	deepEqual( Stem("notes"), "not" );
	deepEqual( Stem("notez"), "not" );
	deepEqual( Stem("nothing"), "nothing" );
	deepEqual( Stem("notice"), "notic" );
	deepEqual( Stem("notices"), "notic" );
	deepEqual( Stem("notions"), "notion" );
	deepEqual( Stem("notoire"), "notoir" );
	deepEqual( Stem("notoirement"), "notoir" );
	deepEqual( Stem("notre"), "notr" );
	deepEqual( Stem("nôtre"), "nôtr" );
	deepEqual( Stem("nôtres"), "nôtr" );
	deepEqual( Stem("nouant"), "nou" );
	deepEqual( Stem("nouée"), "nou" );
	deepEqual( Stem("nourri"), "nourr" );
	deepEqual( Stem("nourrice"), "nourric" );
	deepEqual( Stem("nourrie"), "nourr" );
	deepEqual( Stem("nourrir"), "nourr" );
	deepEqual( Stem("nourrirait"), "nourr" );
	deepEqual( Stem("nourris"), "nourr" );
	deepEqual( Stem("nourrissait"), "nourr" );
	deepEqual( Stem("nourrissant"), "nourr" );
	deepEqual( Stem("nourrisse"), "nourr" );
	deepEqual( Stem("nourrissent"), "nourr" );
	deepEqual( Stem("nourrit"), "nourr" );
	deepEqual( Stem("nourriture"), "nourritur" );
	deepEqual( Stem("nous"), "nous" );
	deepEqual( Stem("nouveau"), "nouveau" );
	deepEqual( Stem("nouveauté"), "nouveaut" );
	deepEqual( Stem("nouveautés"), "nouveaut" );
	deepEqual( Stem("nouveaux"), "nouveau" );
	deepEqual( Stem("nouvel"), "nouvel" );
	deepEqual( Stem("nouvelle"), "nouvel" );
	deepEqual( Stem("nouvellement"), "nouvel" );
	deepEqual( Stem("nouvelles"), "nouvel" );
	deepEqual( Stem("novare"), "novar" );
	deepEqual( Stem("novateurs"), "novateur" );
	deepEqual( Stem("novembre"), "novembr" );
	deepEqual( Stem("novi"), "nov" );
	deepEqual( Stem("novice"), "novic" );
	deepEqual( Stem("now"), "now" );
	deepEqual( Stem("noyée"), "noi" );
	deepEqual( Stem("noyer"), "noi" );
	deepEqual( Stem("noyers"), "noyer" );
	deepEqual( Stem("noyés"), "noi" );
	deepEqual( Stem("nu"), "nu" );
	deepEqual( Stem("nuage"), "nuag" );
	deepEqual( Stem("nuages"), "nuag" );
	deepEqual( Stem("nuance"), "nuanc" );
	deepEqual( Stem("nuances"), "nuanc" );
	deepEqual( Stem("nudité"), "nudit" );
	deepEqual( Stem("nue"), "nu" );
	deepEqual( Stem("nuées"), "nu" );
	deepEqual( Stem("nues"), "nu" );
	deepEqual( Stem("nui"), "nui" );
	deepEqual( Stem("nuira"), "nuir" );
	deepEqual( Stem("nuiraient"), "nuir" );
	deepEqual( Stem("nuirait"), "nuir" );
	deepEqual( Stem("nuire"), "nuir" );
	deepEqual( Stem("nuisait"), "nuis" );
	deepEqual( Stem("nuisant"), "nuis" );
	deepEqual( Stem("nuisible"), "nuisibl" );
	deepEqual( Stem("nuisibles"), "nuisibl" );
	deepEqual( Stem("nuit"), "nuit" );
	deepEqual( Stem("nuits"), "nuit" );
	deepEqual( Stem("nul"), "nul" );
	deepEqual( Stem("nulle"), "null" );
	deepEqual( Stem("nullement"), "null" );
	deepEqual( Stem("nullité"), "nullit" );
	deepEqual( Stem("nuls"), "nul" );
	deepEqual( Stem("numéro"), "numéro" );
	deepEqual( Stem("numéros"), "numéros" );
	deepEqual( Stem("numérotées"), "numérot" );
	deepEqual( Stem("nunc"), "nunc" );
	deepEqual( Stem("nuremberg"), "nuremberg" );
	deepEqual( Stem("nus"), "nus" );
	deepEqual( Stem("o"), "o" );
	deepEqual( Stem("ô"), "ô" );
	deepEqual( Stem("oakland"), "oakland" );
	deepEqual( Stem("oaths"), "oath" );
	deepEqual( Stem("obadiah"), "obadiah" );
	deepEqual( Stem("obéi"), "obéi" );
	deepEqual( Stem("obéie"), "obei" );
	deepEqual( Stem("obéir"), "obéir" );
	deepEqual( Stem("obéira"), "obéir" );
	deepEqual( Stem("obéirai"), "obéir" );
	deepEqual( Stem("obéirais"), "obéir" );
	deepEqual( Stem("obéirez"), "obéir" );
	deepEqual( Stem("obéis"), "obéis" );
	deepEqual( Stem("obéissaient"), "obéiss" );
	deepEqual( Stem("obéissait"), "obéiss" );
	deepEqual( Stem("obéissance"), "obéiss" );
	deepEqual( Stem("obéissant"), "obéiss" );
	deepEqual( Stem("obéissants"), "obéiss" );
	deepEqual( Stem("obéisse"), "obéiss" );
	deepEqual( Stem("obéissez"), "obéiss" );
	deepEqual( Stem("obéit"), "obéit" );
	deepEqual( Stem("objecter"), "object" );
	deepEqual( Stem("objection"), "object" );
	deepEqual( Stem("objections"), "object" );
	deepEqual( Stem("objet"), "objet" );
	deepEqual( Stem("objets"), "objet" );
	deepEqual( Stem("obligation"), "oblig" );
	deepEqual( Stem("obligations"), "oblig" );
	deepEqual( Stem("obligatoire"), "obligatoir" );
	deepEqual( Stem("oblige"), "oblig" );
	deepEqual( Stem("obligé"), "oblig" );
	deepEqual( Stem("obligea"), "oblig" );
	deepEqual( Stem("obligeait"), "oblig" );
	deepEqual( Stem("obligeamment"), "oblig" );
	deepEqual( Stem("obligeances"), "oblige" );
	deepEqual( Stem("obligeant"), "oblig" );
	deepEqual( Stem("obligeante"), "oblig" );
	deepEqual( Stem("obligeantes"), "oblig" );
	deepEqual( Stem("obligeants"), "oblig" );
	deepEqual( Stem("obligeât"), "oblig" );
	deepEqual( Stem("obligée"), "oblig" );
	deepEqual( Stem("obligent"), "obligent" );
	deepEqual( Stem("obliger"), "oblig" );
	deepEqual( Stem("obligera"), "oblig" );
	deepEqual( Stem("obligeraient"), "oblig" );
	deepEqual( Stem("obligerez"), "oblig" );
	deepEqual( Stem("obligés"), "oblig" );
	deepEqual( Stem("obligez"), "oblig" );
	deepEqual( Stem("obliqua"), "obliqu" );
	deepEqual( Stem("obole"), "obol" );
	deepEqual( Stem("obscur"), "obscur" );
	deepEqual( Stem("obscurcit"), "obscurc" );
	deepEqual( Stem("obscure"), "obscur" );
	deepEqual( Stem("obscurément"), "obscur" );
	deepEqual( Stem("obscures"), "obscur" );
	deepEqual( Stem("obscurité"), "obscur" );
	deepEqual( Stem("obséda"), "obsed" );
	deepEqual( Stem("obsédé"), "obsed" );
	deepEqual( Stem("observa"), "observ" );
	deepEqual( Stem("observaient"), "observ" );
	deepEqual( Stem("observait"), "observ" );
	deepEqual( Stem("observance"), "observ" );
	deepEqual( Stem("observant"), "observ" );
	deepEqual( Stem("observateur"), "observ" );
	deepEqual( Stem("observateurs"), "observ" );
	deepEqual( Stem("observation"), "observ" );
	deepEqual( Stem("observations"), "observ" );
	deepEqual( Stem("observatoire"), "observatoir" );
	deepEqual( Stem("observe"), "observ" );
	deepEqual( Stem("observé"), "observ" );
	deepEqual( Stem("observer"), "observ" );
	deepEqual( Stem("observèrent"), "observ" );
	deepEqual( Stem("observés"), "observ" );
	deepEqual( Stem("obstacle"), "obstacl" );
	deepEqual( Stem("obstacles"), "obstacl" );
	deepEqual( Stem("obstina"), "obstin" );
	deepEqual( Stem("obstinait"), "obstin" );
	deepEqual( Stem("obstinant"), "obstin" );
	deepEqual( Stem("obstination"), "obstin" );
	deepEqual( Stem("obstiné"), "obstin" );
	deepEqual( Stem("obstinément"), "obstin" );
	deepEqual( Stem("obstiner"), "obstin" );
	deepEqual( Stem("obstruaient"), "obstru" );
	deepEqual( Stem("obtenait"), "obten" );
	deepEqual( Stem("obtenez"), "obten" );
	deepEqual( Stem("obtenir"), "obten" );
	deepEqual( Stem("obtenu"), "obtenu" );
	deepEqual( Stem("obtenue"), "obtenu" );
	deepEqual( Stem("obtenus"), "obtenus" );
	deepEqual( Stem("obtiendrai"), "obtiendr" );
	deepEqual( Stem("obtiendrais"), "obtiendr" );
	deepEqual( Stem("obtiendront"), "obtiendront" );
	deepEqual( Stem("obtienne"), "obtien" );
	deepEqual( Stem("obtiennent"), "obtiennent" );
	deepEqual( Stem("obtiens"), "obtien" );
	deepEqual( Stem("obtient"), "obtient" );
	deepEqual( Stem("obtinrent"), "obtinrent" );
	deepEqual( Stem("obtint"), "obtint" );
	deepEqual( Stem("occasion"), "occas" );
	deepEqual( Stem("occasionner"), "occasion" );
	deepEqual( Stem("occasionnés"), "occasion" );
	deepEqual( Stem("occasions"), "occas" );
	deepEqual( Stem("occidentales"), "occidental" );
	deepEqual( Stem("occulte"), "occult" );
	deepEqual( Stem("occultes"), "occult" );
	deepEqual( Stem("occupa"), "occup" );
	deepEqual( Stem("occupaient"), "occup" );
	deepEqual( Stem("occupait"), "occup" );
	deepEqual( Stem("occupant"), "occup" );
	deepEqual( Stem("occupante"), "occup" );
	deepEqual( Stem("occupât"), "occup" );
	deepEqual( Stem("occupation"), "occup" );
	deepEqual( Stem("occupations"), "occup" );
	deepEqual( Stem("occupe"), "occup" );
	deepEqual( Stem("occupé"), "occup" );
	deepEqual( Stem("occupée"), "occup" );
	deepEqual( Stem("occupées"), "occup" );
	deepEqual( Stem("occupent"), "occupent" );
	deepEqual( Stem("occuper"), "occup" );
	deepEqual( Stem("occupera"), "occup" );
	deepEqual( Stem("occuperai"), "occup" );
	deepEqual( Stem("occupèrent"), "occup" );
	deepEqual( Stem("occupés"), "occup" );
	deepEqual( Stem("occupiez"), "occup" );
	deepEqual( Stem("occupons"), "occupon" );
	deepEqual( Stem("occurrence"), "occurrent" );
	deepEqual( Stem("occurrences"), "occurrent" );
	deepEqual( Stem("ocean"), "ocean" );
	deepEqual( Stem("océan"), "océan" );
	deepEqual( Stem("océans"), "océan" );
	deepEqual( Stem("ocre"), "ocre" );
	deepEqual( Stem("octave"), "octav" );
	deepEqual( Stem("octobre"), "octobr" );
	deepEqual( Stem("octroi"), "octroi" );
	deepEqual( Stem("odalisque"), "odalisqu" );
	deepEqual( Stem("ode"), "ode" );
	deepEqual( Stem("odes"), "ode" );
	deepEqual( Stem("odeur"), "odeur" );
	deepEqual( Stem("odieuse"), "odieux" );
	deepEqual( Stem("odieux"), "odieux" );
	deepEqual( Stem("odorante"), "odor" );
	deepEqual( Stem("odorat"), "odorat" );
	deepEqual( Stem("oeil"), "oeil" );
	deepEqual( Stem("oeuf"), "oeuf" );
	deepEqual( Stem("oeufs"), "oeuf" );
	deepEqual( Stem("oeuvre"), "oeuvr" );
	deepEqual( Stem("oeuvres"), "oeuvr" );
	deepEqual( Stem("of"), "of" );
	deepEqual( Stem("offensa"), "offens" );
	deepEqual( Stem("offensait"), "offens" );
	deepEqual( Stem("offensant"), "offens" );
	deepEqual( Stem("offensante"), "offens" );
	deepEqual( Stem("offensantes"), "offens" );
	deepEqual( Stem("offensât"), "offens" );
	deepEqual( Stem("offense"), "offens" );
	deepEqual( Stem("offensé"), "offens" );
	deepEqual( Stem("offensée"), "offens" );
	deepEqual( Stem("offenser"), "offens" );
	deepEqual( Stem("offenserait"), "offens" );
	deepEqual( Stem("offenses"), "offens" );
	deepEqual( Stem("offensés"), "offens" );
	deepEqual( Stem("offensive"), "offens" );
	deepEqual( Stem("offert"), "offert" );
	deepEqual( Stem("offerte"), "offert" );
	deepEqual( Stem("offerts"), "offert" );
	deepEqual( Stem("office"), "offic" );
	deepEqual( Stem("offices"), "offic" );
	deepEqual( Stem("officiant"), "offici" );
	deepEqual( Stem("officiel"), "officiel" );
	deepEqual( Stem("officielle"), "officiel" );
	deepEqual( Stem("officiellement"), "officiel" );
	deepEqual( Stem("officielles"), "officiel" );
	deepEqual( Stem("officiels"), "officiel" );
	deepEqual( Stem("officier"), "offici" );
	deepEqual( Stem("officiers"), "offici" );
	deepEqual( Stem("offraient"), "offraient" );
	deepEqual( Stem("offrais"), "offrais" );
	deepEqual( Stem("offrait"), "offrait" );
	deepEqual( Stem("offrande"), "offrand" );
	deepEqual( Stem("offrandes"), "offrand" );
	deepEqual( Stem("offrant"), "offrant" );
	deepEqual( Stem("offre"), "offre" );
	deepEqual( Stem("offrent"), "offrent" );
	deepEqual( Stem("offres"), "offre" );
	deepEqual( Stem("offrir"), "offrir" );
	deepEqual( Stem("offrira"), "offrir" );
	deepEqual( Stem("offrirai"), "offrir" );
	deepEqual( Stem("offriraient"), "offrir" );
	deepEqual( Stem("offrirait"), "offrir" );
	deepEqual( Stem("offris"), "offris" );
	deepEqual( Stem("offrit"), "offrit" );
	deepEqual( Stem("offusqué"), "offusqu" );
	deepEqual( Stem("ogden"), "ogden" );
	deepEqual( Stem("ogive"), "ogiv" );
	deepEqual( Stem("ogre"), "ogre" );
	deepEqual( Stem("oh"), "oh" );
	deepEqual( Stem("ohio"), "ohio" );
	deepEqual( Stem("oies"), "oie" );
	deepEqual( Stem("oiseau"), "oiseau" );
	deepEqual( Stem("oiseaux"), "oiseau" );
	deepEqual( Stem("oisifs"), "oisif" );
	deepEqual( Stem("oisive"), "oisiv" );
	deepEqual( Stem("olivier"), "olivi" );
	deepEqual( Stem("olo"), "olo" );
	deepEqual( Stem("omaha"), "omah" );
	deepEqual( Stem("ombragée"), "ombrag" );
	deepEqual( Stem("ombrages"), "ombrag" );
	deepEqual( Stem("ombre"), "ombre" );
	deepEqual( Stem("ombres"), "ombre" );
	deepEqual( Stem("ombreuses"), "ombreux" );
	deepEqual( Stem("omelette"), "omelet" );
	deepEqual( Stem("omis"), "omis" );
	deepEqual( Stem("omission"), "omiss" );
	deepEqual( Stem("omit"), "omit" );
	deepEqual( Stem("omnia"), "omni" );
	deepEqual( Stem("omnibus"), "omnibus" );
	deepEqual( Stem("on"), "on" );
	deepEqual( Stem("onces"), "once" );
	deepEqual( Stem("oncle"), "oncle" );
	deepEqual( Stem("oncles"), "oncle" );
	deepEqual( Stem("onction"), "onction" );
	deepEqual( Stem("ondulation"), "ondul" );
	deepEqual( Stem("ondulations"), "ondul" );
	deepEqual( Stem("ont"), "ont" );
	deepEqual( Stem("onze"), "onze" );
	deepEqual( Stem("opera"), "oper" );
	deepEqual( Stem("opéra"), "oper" );
	deepEqual( Stem("opéraient"), "oper" );
	deepEqual( Stem("opérait"), "oper" );
	deepEqual( Stem("opération"), "oper" );
	deepEqual( Stem("opérations"), "oper" );
	deepEqual( Stem("opère"), "oper" );
	deepEqual( Stem("opérée"), "oper" );
	deepEqual( Stem("opérer"), "oper" );
	deepEqual( Stem("opiner"), "opin" );
	deepEqual( Stem("opiniâtrement"), "opiniâtr" );
	deepEqual( Stem("opinion"), "opinion" );
	deepEqual( Stem("opinions"), "opin" );
	deepEqual( Stem("opium"), "opium" );
	deepEqual( Stem("opportun"), "opportun" );
	deepEqual( Stem("opportune"), "opportun" );
	deepEqual( Stem("opportunité"), "opportun" );
	deepEqual( Stem("opposaient"), "oppos" );
	deepEqual( Stem("opposant"), "oppos" );
	deepEqual( Stem("oppose"), "oppos" );
	deepEqual( Stem("opposé"), "oppos" );
	deepEqual( Stem("opposée"), "oppos" );
	deepEqual( Stem("opposées"), "oppos" );
	deepEqual( Stem("opposent"), "opposent" );
	deepEqual( Stem("opposer"), "oppos" );
	deepEqual( Stem("opposerai"), "oppos" );
	deepEqual( Stem("opposés"), "oppos" );
	deepEqual( Stem("opposition"), "opposit" );
	deepEqual( Stem("opprimait"), "opprim" );
	deepEqual( Stem("opprimés"), "opprim" );
	deepEqual( Stem("opprobre"), "opprobr" );
	deepEqual( Stem("opter"), "opter" );
	deepEqual( Stem("optime"), "optim" );
	deepEqual( Stem("opulence"), "opulent" );
	deepEqual( Stem("opulentes"), "opulent" );
	deepEqual( Stem("opulents"), "opulent" );
	deepEqual( Stem("or"), "or" );
	deepEqual( Stem("ora"), "ora" );
	deepEqual( Stem("orage"), "orag" );
	deepEqual( Stem("orages"), "orag" );
	deepEqual( Stem("orange"), "orang" );
	deepEqual( Stem("orangé"), "orang" );
	deepEqual( Stem("oranger"), "orang" );
	deepEqual( Stem("orangerie"), "oranger" );
	deepEqual( Stem("orangers"), "oranger" );
	deepEqual( Stem("oranges"), "orang" );
	deepEqual( Stem("orateur"), "orateur" );
	deepEqual( Stem("orateurs"), "orateur" );
	deepEqual( Stem("orbite"), "orbit" );
	deepEqual( Stem("orchestre"), "orchestr" );
	deepEqual( Stem("ordinaire"), "ordinair" );
	deepEqual( Stem("ordinairement"), "ordinair" );
	deepEqual( Stem("ordinaires"), "ordinair" );
	deepEqual( Stem("ordonna"), "ordon" );
	deepEqual( Stem("ordonnait"), "ordon" );
	deepEqual( Stem("ordonnance"), "ordon" );
	deepEqual( Stem("ordonnant"), "ordon" );
	deepEqual( Stem("ordonne"), "ordon" );
	deepEqual( Stem("ordonné"), "ordon" );
	deepEqual( Stem("ordonnée"), "ordon" );
	deepEqual( Stem("ordonner"), "ordon" );
	deepEqual( Stem("ordonnera"), "ordon" );
	deepEqual( Stem("ordonnes"), "ordon" );
	deepEqual( Stem("ordonnés"), "ordon" );
	deepEqual( Stem("ordre"), "ordre" );
	deepEqual( Stem("ordres"), "ordre" );
	deepEqual( Stem("oregon"), "oregon" );
	deepEqual( Stem("oreille"), "oreil" );
	deepEqual( Stem("oreiller"), "oreil" );
	deepEqual( Stem("oreillers"), "oreiller" );
	deepEqual( Stem("oreilles"), "oreil" );
	deepEqual( Stem("orfèvre"), "orfevr" );
	deepEqual( Stem("orfèvrerie"), "orfèvrer" );
	deepEqual( Stem("orfèvres"), "orfevr" );
	deepEqual( Stem("orfraie"), "orfrai" );
	deepEqual( Stem("organes"), "organ" );
	deepEqual( Stem("organisa"), "organis" );
	deepEqual( Stem("organisait"), "organis" );
	deepEqual( Stem("organisation"), "organis" );
	deepEqual( Stem("organisé"), "organis" );
	deepEqual( Stem("organisée"), "organis" );
	deepEqual( Stem("organiser"), "organis" );
	deepEqual( Stem("organisèrent"), "organis" );
	deepEqual( Stem("orge"), "orge" );
	deepEqual( Stem("orgie"), "orgi" );
	deepEqual( Stem("orgue"), "orgu" );
	deepEqual( Stem("orgueil"), "orgueil" );
	deepEqual( Stem("orgueilleuse"), "orgueil" );
	deepEqual( Stem("orgueilleusement"), "orgueil" );
	deepEqual( Stem("orgueilleux"), "orgueil" );
	deepEqual( Stem("orient"), "orient" );
	deepEqual( Stem("oriental"), "oriental" );
	deepEqual( Stem("orientale"), "oriental" );
	deepEqual( Stem("orientalistes"), "oriental" );
	deepEqual( Stem("orienter"), "orient" );
	deepEqual( Stem("original"), "original" );
	deepEqual( Stem("originale"), "original" );
	deepEqual( Stem("originalité"), "original" );
	deepEqual( Stem("originaux"), "original" );
	deepEqual( Stem("origine"), "origin" );
	deepEqual( Stem("orléans"), "orléan" );
	deepEqual( Stem("ornaient"), "ornaient" );
	deepEqual( Stem("ornait"), "ornait" );
	deepEqual( Stem("orne"), "orne" );
	deepEqual( Stem("orné"), "orné" );
	deepEqual( Stem("ornée"), "orné" );
	deepEqual( Stem("ornées"), "orné" );
	deepEqual( Stem("ornement"), "ornement" );
	deepEqual( Stem("ornementation"), "ornement" );
	deepEqual( Stem("ornements"), "ornement" );
	deepEqual( Stem("ornent"), "ornent" );
	deepEqual( Stem("orner"), "orner" );
	deepEqual( Stem("ornèrent"), "ornèrent" );
	deepEqual( Stem("ornés"), "orné" );
	deepEqual( Stem("ornière"), "ornier" );
	deepEqual( Stem("orpheline"), "orphelin" );
	deepEqual( Stem("orphelins"), "orphelin" );
	deepEqual( Stem("orta"), "orta" );
	deepEqual( Stem("orteils"), "orteil" );
	deepEqual( Stem("orthographe"), "orthograph" );
	deepEqual( Stem("orties"), "orti" );
	deepEqual( Stem("ory"), "ory" );
	deepEqual( Stem("os"), "os" );
	deepEqual( Stem("osa"), "osa" );
	deepEqual( Stem("osai"), "osai" );
	deepEqual( Stem("osaient"), "osaient" );
	deepEqual( Stem("osais"), "osais" );
	deepEqual( Stem("osait"), "osait" );
	deepEqual( Stem("osant"), "osant" );
	deepEqual( Stem("osât"), "osât" );
	deepEqual( Stem("oscillaient"), "oscill" );
	deepEqual( Stem("oscillait"), "oscill" );
	deepEqual( Stem("oscuro"), "oscuro" );
	deepEqual( Stem("ose"), "ose" );
	deepEqual( Stem("osé"), "osé" );
	deepEqual( Stem("osées"), "osé" );
	deepEqual( Stem("oseille"), "oseil" );
	deepEqual( Stem("osent"), "osent" );
	deepEqual( Stem("oser"), "oser" );
	deepEqual( Stem("osera"), "oser" );
	deepEqual( Stem("oserai"), "oser" );
	deepEqual( Stem("oseraient"), "oser" );
	deepEqual( Stem("oserais"), "oser" );
	deepEqual( Stem("oserait"), "oser" );
	deepEqual( Stem("osèrent"), "osèrent" );
	deepEqual( Stem("oserons"), "oseron" );
	deepEqual( Stem("osez"), "osez" );
	deepEqual( Stem("ostensiblement"), "ostensibl" );
	deepEqual( Stem("ôta"), "ôta" );
	deepEqual( Stem("ôtaient"), "ôtaient" );
	deepEqual( Stem("ôtait"), "ôtait" );
	deepEqual( Stem("ôte"), "ôte" );
	deepEqual( Stem("ôté"), "ôté" );
	deepEqual( Stem("ôtées"), "ôté" );
	deepEqual( Stem("ôter"), "ôter" );
	deepEqual( Stem("ôtera"), "ôter" );
	deepEqual( Stem("ôterai"), "ôter" );
	deepEqual( Stem("ôterait"), "ôter" );
	deepEqual( Stem("ôtèrent"), "ôtèrent" );
	deepEqual( Stem("ôterez"), "ôter" );
	deepEqual( Stem("ôtez"), "ôtez" );
	deepEqual( Stem("othello"), "othello" );
	deepEqual( Stem("ottomane"), "ottoman" );
	deepEqual( Stem("ou"), "ou" );
	deepEqual( Stem("où"), "où" );
	deepEqual( Stem("ouailles"), "ouaill" );
	deepEqual( Stem("oubli"), "oubl" );
	deepEqual( Stem("oublia"), "oubli" );
	deepEqual( Stem("oubliai"), "oubli" );
	deepEqual( Stem("oubliais"), "oubli" );
	deepEqual( Stem("oubliait"), "oubli" );
	deepEqual( Stem("oubliant"), "oubli" );
	deepEqual( Stem("oublie"), "oubl" );
	deepEqual( Stem("oublié"), "oubli" );
	deepEqual( Stem("oubliée"), "oubli" );
	deepEqual( Stem("oubliées"), "oubli" );
	deepEqual( Stem("oublient"), "oublient" );
	deepEqual( Stem("oublier"), "oubli" );
	deepEqual( Stem("oubliera"), "oubli" );
	deepEqual( Stem("oublierai"), "oubli" );
	deepEqual( Stem("oublierais"), "oubli" );
	deepEqual( Stem("oublierait"), "oubli" );
	deepEqual( Stem("oublierez"), "oubli" );
	deepEqual( Stem("oublies"), "oubl" );
	deepEqual( Stem("oubliez"), "oubl" );
	deepEqual( Stem("oublions"), "oublion" );
	deepEqual( Stem("ouest"), "ouest" );
	deepEqual( Stem("oui"), "oui" );
	deepEqual( Stem("ouï"), "ouï" );
	deepEqual( Stem("ouïe"), "ouï" );
	deepEqual( Stem("our"), "our" );
	deepEqual( Stem("ouragan"), "ouragan" );
	deepEqual( Stem("ouragans"), "ouragan" );
	deepEqual( Stem("ourdies"), "ourd" );
	deepEqual( Stem("ours"), "our" );
	deepEqual( Stem("outils"), "outil" );
	deepEqual( Stem("outrage"), "outrag" );
	deepEqual( Stem("outrageait"), "outrag" );
	deepEqual( Stem("outrageantes"), "outrag" );
	deepEqual( Stem("outrageants"), "outrag" );
	deepEqual( Stem("outragée"), "outrag" );
	deepEqual( Stem("outrager"), "outrag" );
	deepEqual( Stem("outrages"), "outrag" );
	deepEqual( Stem("outragés"), "outrag" );
	deepEqual( Stem("outrageusement"), "outrag" );
	deepEqual( Stem("outrait"), "outr" );
	deepEqual( Stem("outrance"), "outranc" );
	deepEqual( Stem("outrant"), "outr" );
	deepEqual( Stem("outre"), "outr" );
	deepEqual( Stem("outré"), "outr" );
	deepEqual( Stem("outrée"), "outr" );
	deepEqual( Stem("outrepasser"), "outrepass" );
	deepEqual( Stem("outrez"), "outr" );
	deepEqual( Stem("ouvert"), "ouvert" );
	deepEqual( Stem("ouverte"), "ouvert" );
	deepEqual( Stem("ouvertement"), "ouvert" );
	deepEqual( Stem("ouvertes"), "ouvert" );
	deepEqual( Stem("ouverts"), "ouvert" );
	deepEqual( Stem("ouverture"), "ouvertur" );
	deepEqual( Stem("ouvrage"), "ouvrag" );
	deepEqual( Stem("ouvragé"), "ouvrag" );
	deepEqual( Stem("ouvrages"), "ouvrag" );
	deepEqual( Stem("ouvraient"), "ouvr" );
	deepEqual( Stem("ouvrait"), "ouvr" );
	deepEqual( Stem("ouvrant"), "ouvr" );
	deepEqual( Stem("ouvrante"), "ouvr" );
	deepEqual( Stem("ouvre"), "ouvr" );
	deepEqual( Stem("ouvrez"), "ouvr" );
	deepEqual( Stem("ouvrier"), "ouvri" );
	deepEqual( Stem("ouvrière"), "ouvri" );
	deepEqual( Stem("ouvriers"), "ouvri" );
	deepEqual( Stem("ouvrir"), "ouvr" );
	deepEqual( Stem("ouvrira"), "ouvr" );
	deepEqual( Stem("ouvrirait"), "ouvr" );
	deepEqual( Stem("ouvrirent"), "ouvr" );
	deepEqual( Stem("ouvrit"), "ouvr" );
	deepEqual( Stem("ouvrît"), "ouvr" );
	deepEqual( Stem("ovale"), "oval" );
	deepEqual( Stem("oxydé"), "oxyd" );
	deepEqual( Stem("oysterpuf"), "oysterpuf" );
	deepEqual( Stem("oysters"), "oyster" );
	deepEqual( Stem("p"), "p" );
	deepEqual( Stem("pablo"), "pablo" );
	deepEqual( Stem("pace"), "pac" );
	deepEqual( Stem("pacha"), "pach" );
	deepEqual( Stem("pacific"), "pacific" );
	deepEqual( Stem("pacifique"), "pacif" );
	deepEqual( Stem("pacifiques"), "pacif" );
	deepEqual( Stem("packet"), "packet" );
	deepEqual( Stem("padoue"), "padou" );
	deepEqual( Stem("paganisme"), "pagan" );
	deepEqual( Stem("pagato"), "pagato" );
	deepEqual( Stem("page"), "pag" );
	deepEqual( Stem("pages"), "pag" );
	deepEqual( Stem("pagina"), "pagin" );
	deepEqual( Stem("pagode"), "pagod" );
	deepEqual( Stem("pagodes"), "pagod" );
	deepEqual( Stem("paie"), "pai" );
	deepEqual( Stem("paiement"), "pai" );
	deepEqual( Stem("paiements"), "pai" );
	deepEqual( Stem("païen"), "païen" );
	deepEqual( Stem("paient"), "paient" );
	deepEqual( Stem("paierai"), "pai" );
	deepEqual( Stem("paierait"), "pai" );
	deepEqual( Stem("paieras"), "pai" );
	deepEqual( Stem("paieriez"), "pai" );
	deepEqual( Stem("paillasse"), "paill" );
	deepEqual( Stem("paillasses"), "paill" );
	deepEqual( Stem("paille"), "paill" );
	deepEqual( Stem("pain"), "pain" );
	deepEqual( Stem("pains"), "pain" );
	deepEqual( Stem("pair"), "pair" );
	deepEqual( Stem("paire"), "pair" );
	deepEqual( Stem("paires"), "pair" );
	deepEqual( Stem("pairie"), "pair" );
	deepEqual( Stem("pairs"), "pair" );
	deepEqual( Stem("paisible"), "paisibl" );
	deepEqual( Stem("paisiblement"), "paisibl" );
	deepEqual( Stem("paix"), "paix" );
	deepEqual( Stem("pal"), "pal" );
	deepEqual( Stem("palais"), "pal" );
	deepEqual( Stem("palanquin"), "palanquin" );
	deepEqual( Stem("palanquins"), "palanquin" );
	deepEqual( Stem("palanza"), "palanz" );
	deepEqual( Stem("palazzeto"), "palazzeto" );
	deepEqual( Stem("pale"), "pal" );
	deepEqual( Stem("pâle"), "pâl" );
	deepEqual( Stem("palefrenier"), "palefreni" );
	deepEqual( Stem("pâles"), "pâl" );
	deepEqual( Stem("palestine"), "palestin" );
	deepEqual( Stem("paletot"), "paletot" );
	deepEqual( Stem("pâleur"), "pâleur" );
	deepEqual( Stem("pâli"), "pâl" );
	deepEqual( Stem("palier"), "pali" );
	deepEqual( Stem("pâlir"), "pâl" );
	deepEqual( Stem("palissades"), "palissad" );
	deepEqual( Stem("pâlissaient"), "pâl" );
	deepEqual( Stem("pâlissant"), "pâl" );
	deepEqual( Stem("pâlissantes"), "pâl" );
	deepEqual( Stem("pâlissent"), "pâl" );
	deepEqual( Stem("pâlit"), "pâl" );
	deepEqual( Stem("palki"), "palk" );
	deepEqual( Stem("palkigharis"), "palkighar" );
	deepEqual( Stem("pall"), "pall" );
	deepEqual( Stem("palla"), "pall" );
	deepEqual( Stem("pallagi"), "pallag" );
	deepEqual( Stem("pallida"), "pallid" );
	deepEqual( Stem("palmiers"), "palmi" );
	deepEqual( Stem("palpitait"), "palpit" );
	deepEqual( Stem("palpitant"), "palpit" );
	deepEqual( Stem("palpitante"), "palpit" );
	deepEqual( Stem("palpitants"), "palpit" );
	deepEqual( Stem("palpiter"), "palpit" );
	deepEqual( Stem("pamphlet"), "pamphlet" );
	deepEqual( Stem("pamphlets"), "pamphlet" );
	deepEqual( Stem("pan"), "pan" );
	deepEqual( Stem("panache"), "panach" );
	deepEqual( Stem("pança"), "panc" );
	deepEqual( Stem("panier"), "pani" );
	deepEqual( Stem("panneaux"), "panneau" );
	deepEqual( Stem("panorama"), "panoram" );
	deepEqual( Stem("panoramique"), "panoram" );
	deepEqual( Stem("pansa"), "pans" );
	deepEqual( Stem("pansaient"), "pans" );
	deepEqual( Stem("pansement"), "pans" );
	deepEqual( Stem("panser"), "pans" );
	deepEqual( Stem("pansez"), "pans" );
	deepEqual( Stem("pantalon"), "pantalon" );
	deepEqual( Stem("pantalons"), "pantalon" );
	deepEqual( Stem("panthères"), "panther" );
	deepEqual( Stem("pantoufles"), "pantoufl" );
	deepEqual( Stem("paolina"), "paolin" );
	deepEqual( Stem("papa"), "pap" );
	deepEqual( Stem("pape"), "pap" );
	deepEqual( Stem("paperasses"), "paper" );
	deepEqual( Stem("paperassière"), "paperassi" );
	deepEqual( Stem("papier"), "papi" );
	deepEqual( Stem("papiers"), "papi" );
	deepEqual( Stem("papillon"), "papillon" );
	deepEqual( Stem("papillons"), "papillon" );
	deepEqual( Stem("papillotes"), "papillot" );
	deepEqual( Stem("papouas"), "papou" );
	deepEqual( Stem("papyrus"), "papyrus" );
	deepEqual( Stem("paquebot"), "paquebot" );
	deepEqual( Stem("paquebots"), "paquebot" );
	deepEqual( Stem("paquet"), "paquet" );
	deepEqual( Stem("paquetées"), "paquet" );
	deepEqual( Stem("paquets"), "paquet" );
	deepEqual( Stem("par"), "par" );
	deepEqual( Stem("para"), "par" );
	deepEqual( Stem("parade"), "parad" );
	deepEqual( Stem("parader"), "parad" );
	deepEqual( Stem("paradis"), "parad" );
	deepEqual( Stem("parages"), "parag" );
	deepEqual( Stem("paragraphe"), "paragraph" );
	deepEqual( Stem("parais"), "par" );
	deepEqual( Stem("paraissaient"), "paraiss" );
	deepEqual( Stem("paraissais"), "paraiss" );
	deepEqual( Stem("paraissait"), "paraiss" );
	deepEqual( Stem("paraisse"), "paraiss" );
	deepEqual( Stem("paraissent"), "paraissent" );
	deepEqual( Stem("parait"), "par" );
	deepEqual( Stem("paraît"), "paraît" );
	deepEqual( Stem("paraîtra"), "paraîtr" );
	deepEqual( Stem("paraîtrai"), "paraîtr" );
	deepEqual( Stem("paraîtraient"), "paraîtr" );
	deepEqual( Stem("paraître"), "paraîtr" );
	deepEqual( Stem("paraîtrons"), "paraîtron" );
	deepEqual( Stem("parallèle"), "parallel" );
	deepEqual( Stem("parallèlement"), "parallel" );
	deepEqual( Stem("paralysaient"), "paralys" );
	deepEqual( Stem("paralyse"), "paralys" );
	deepEqual( Stem("paralysé"), "paralys" );
	deepEqual( Stem("paralyser"), "paralys" );
	deepEqual( Stem("paralytique"), "paralyt" );
	deepEqual( Stem("parant"), "par" );
	deepEqual( Stem("parapet"), "parapet" );
	deepEqual( Stem("paraphait"), "paraph" );
	deepEqual( Stem("paraphe"), "paraph" );
	deepEqual( Stem("paraphrasa"), "paraphras" );
	deepEqual( Stem("parapluie"), "paraplui" );
	deepEqual( Stem("paratonnerre"), "paratonnerr" );
	deepEqual( Stem("paratonnerres"), "paratonnerr" );
	deepEqual( Stem("paravent"), "paravent" );
	deepEqual( Stem("parbleu"), "parbleu" );
	deepEqual( Stem("parc"), "parc" );
	deepEqual( Stem("parce"), "parc" );
	deepEqual( Stem("parchemin"), "parchemin" );
	deepEqual( Stem("parcouraient"), "parcour" );
	deepEqual( Stem("parcourait"), "parcour" );
	deepEqual( Stem("parcourant"), "parcour" );
	deepEqual( Stem("parcourent"), "parcourent" );
	deepEqual( Stem("parcourir"), "parcour" );
	deepEqual( Stem("parcourrai"), "parcourr" );
	deepEqual( Stem("parcours"), "parcour" );
	deepEqual( Stem("parcourt"), "parcourt" );
	deepEqual( Stem("parcouru"), "parcouru" );
	deepEqual( Stem("parcourue"), "parcouru" );
	deepEqual( Stem("parcoururent"), "parcoururent" );
	deepEqual( Stem("parcourus"), "parcourus" );
	deepEqual( Stem("parcourut"), "parcourut" );
	deepEqual( Stem("pardessus"), "pardessus" );
	deepEqual( Stem("pardi"), "pard" );
	deepEqual( Stem("pardieu"), "pardieu" );
	deepEqual( Stem("pardon"), "pardon" );
	deepEqual( Stem("pardonna"), "pardon" );
	deepEqual( Stem("pardonnable"), "pardon" );
	deepEqual( Stem("pardonnables"), "pardon" );
	deepEqual( Stem("pardonnait"), "pardon" );
	deepEqual( Stem("pardonne"), "pardon" );
	deepEqual( Stem("pardonné"), "pardon" );
	deepEqual( Stem("pardonnées"), "pardon" );
	deepEqual( Stem("pardonnent"), "pardonnent" );
	deepEqual( Stem("pardonner"), "pardon" );
	deepEqual( Stem("pardonnera"), "pardon" );
	deepEqual( Stem("pardonnerai"), "pardon" );
	deepEqual( Stem("pardonnerais"), "pardon" );
	deepEqual( Stem("pardonnerait"), "pardon" );
	deepEqual( Stem("pardonnerez"), "pardon" );
	deepEqual( Stem("pardonnes"), "pardon" );
	deepEqual( Stem("pardonnez"), "pardon" );
	deepEqual( Stem("pardonniez"), "pardon" );
	deepEqual( Stem("pardons"), "pardon" );
	deepEqual( Stem("pare"), "par" );
	deepEqual( Stem("paré"), "par" );
	deepEqual( Stem("parée"), "par" );
	deepEqual( Stem("pareil"), "pareil" );
	deepEqual( Stem("pareille"), "pareil" );
	deepEqual( Stem("pareilles"), "pareil" );
	deepEqual( Stem("pareils"), "pareil" );
	deepEqual( Stem("parent"), "parent" );
	deepEqual( Stem("parente"), "parent" );
	deepEqual( Stem("parentes"), "parent" );
	deepEqual( Stem("parenthèse"), "parenthes" );
	deepEqual( Stem("parents"), "parent" );
	deepEqual( Stem("parer"), "par" );
	deepEqual( Stem("paresse"), "paress" );
	deepEqual( Stem("paresseuse"), "paress" );
	deepEqual( Stem("paresseux"), "paress" );
	deepEqual( Stem("parfait"), "parf" );
	deepEqual( Stem("parfaite"), "parfait" );
	deepEqual( Stem("parfaitement"), "parfait" );
	deepEqual( Stem("parfaites"), "parfait" );
	deepEqual( Stem("parfaits"), "parfait" );
	deepEqual( Stem("parfois"), "parfois" );
	deepEqual( Stem("parfum"), "parfum" );
	deepEqual( Stem("parfumée"), "parfum" );
	deepEqual( Stem("parfums"), "parfum" );
	deepEqual( Stem("pari"), "pari" );
	deepEqual( Stem("paria"), "pari" );
	deepEqual( Stem("parie"), "pari" );
	deepEqual( Stem("parié"), "pari" );
	deepEqual( Stem("parient"), "parient" );
	deepEqual( Stem("parier"), "pari" );
	deepEqual( Stem("parierais"), "pari" );
	deepEqual( Stem("parièrent"), "pari" );
	deepEqual( Stem("pariétaires"), "pariétair" );
	deepEqual( Stem("parieurs"), "parieur" );
	deepEqual( Stem("paris"), "paris" );
	deepEqual( Stem("parisien"), "parisien" );
	deepEqual( Stem("parisienne"), "parisien" );
	deepEqual( Stem("parisiennes"), "parisien" );
	deepEqual( Stem("parisiens"), "parisien" );
	deepEqual( Stem("parla"), "parl" );
	deepEqual( Stem("parlaient"), "parl" );
	deepEqual( Stem("parlais"), "parl" );
	deepEqual( Stem("parlait"), "parl" );
	deepEqual( Stem("parlant"), "parl" );
	deepEqual( Stem("parlantes"), "parl" );
	deepEqual( Stem("parlants"), "parl" );
	deepEqual( Stem("parlassent"), "parl" );
	deepEqual( Stem("parlât"), "parl" );
	deepEqual( Stem("parle"), "parl" );
	deepEqual( Stem("parlé"), "parl" );
	deepEqual( Stem("parlement"), "parl" );
	deepEqual( Stem("parlent"), "parlent" );
	deepEqual( Stem("parler"), "parl" );
	deepEqual( Stem("parlera"), "parl" );
	deepEqual( Stem("parlerai"), "parl" );
	deepEqual( Stem("parlerais"), "parl" );
	deepEqual( Stem("parlerait"), "parl" );
	deepEqual( Stem("parlèrent"), "parl" );
	deepEqual( Stem("parlerez"), "parl" );
	deepEqual( Stem("parlerons"), "parl" );
	deepEqual( Stem("parleront"), "parl" );
	deepEqual( Stem("parles"), "parl" );
	deepEqual( Stem("parleur"), "parleur" );
	deepEqual( Stem("parleurs"), "parleur" );
	deepEqual( Stem("parlez"), "parl" );
	deepEqual( Stem("parliez"), "parl" );
	deepEqual( Stem("parlions"), "parlion" );
	deepEqual( Stem("parloir"), "parloir" );
	deepEqual( Stem("parlons"), "parlon" );
	deepEqual( Stem("parma"), "parm" );
	deepEqual( Stem("parme"), "parm" );
	deepEqual( Stem("parmesan"), "parmesan" );
	deepEqual( Stem("parmesans"), "parmesan" );
	deepEqual( Stem("parmi"), "parm" );
	deepEqual( Stem("parois"), "parois" );
	deepEqual( Stem("paroisse"), "paroiss" );
	deepEqual( Stem("paroisses"), "paroiss" );
	deepEqual( Stem("paroissiale"), "paroissial" );
	deepEqual( Stem("paroissiens"), "paroissien" );
	deepEqual( Stem("parole"), "parol" );
	deepEqual( Stem("paroles"), "parol" );
	deepEqual( Stem("paroxysme"), "paroxysm" );
	deepEqual( Stem("parquet"), "parquet" );
	deepEqual( Stem("parquetée"), "parquet" );
	deepEqual( Stem("parrain"), "parrain" );
	deepEqual( Stem("pars"), "par" );
	deepEqual( Stem("parsemée"), "parsem" );
	deepEqual( Stem("parsi"), "pars" );
	deepEqual( Stem("parsie"), "pars" );
	deepEqual( Stem("parsis"), "pars" );
	deepEqual( Stem("part"), "part" );
	deepEqual( Stem("partage"), "partag" );
	deepEqual( Stem("partagé"), "partag" );
	deepEqual( Stem("partagea"), "partag" );
	deepEqual( Stem("partageait"), "partag" );
	deepEqual( Stem("partagée"), "partag" );
	deepEqual( Stem("partager"), "partag" );
	deepEqual( Stem("partagerai"), "partag" );
	deepEqual( Stem("partagerais"), "partag" );
	deepEqual( Stem("partaient"), "part" );
	deepEqual( Stem("partait"), "part" );
	deepEqual( Stem("partana"), "partan" );
	deepEqual( Stem("partance"), "partanc" );
	deepEqual( Stem("partant"), "part" );
	deepEqual( Stem("parte"), "part" );
	deepEqual( Stem("partenaire"), "partenair" );
	deepEqual( Stem("partenaires"), "partenair" );
	deepEqual( Stem("partent"), "partent" );
	deepEqual( Stem("parterre"), "parterr" );
	deepEqual( Stem("parterres"), "parterr" );
	deepEqual( Stem("partes"), "part" );
	deepEqual( Stem("partez"), "part" );
	deepEqual( Stem("parti"), "part" );
	deepEqual( Stem("particularité"), "particular" );
	deepEqual( Stem("particularités"), "particular" );
	deepEqual( Stem("particulier"), "particuli" );
	deepEqual( Stem("particulière"), "particuli" );
	deepEqual( Stem("particulièrement"), "particuli" );
	deepEqual( Stem("particuliers"), "particuli" );
	deepEqual( Stem("partie"), "part" );
	deepEqual( Stem("parties"), "part" );
	deepEqual( Stem("partiez"), "part" );
	deepEqual( Stem("partir"), "part" );
	deepEqual( Stem("partira"), "part" );
	deepEqual( Stem("partirai"), "part" );
	deepEqual( Stem("partirais"), "part" );
	deepEqual( Stem("partirait"), "part" );
	deepEqual( Stem("partirent"), "part" );
	deepEqual( Stem("partirez"), "part" );
	deepEqual( Stem("partirons"), "part" );
	deepEqual( Stem("partis"), "part" );
	deepEqual( Stem("partisan"), "partisan" );
	deepEqual( Stem("partisans"), "partisan" );
	deepEqual( Stem("partit"), "part" );
	deepEqual( Stem("partît"), "part" );
	deepEqual( Stem("partner"), "partn" );
	deepEqual( Stem("partons"), "parton" );
	deepEqual( Stem("partout"), "partout" );
	deepEqual( Stem("parts"), "part" );
	deepEqual( Stem("paru"), "paru" );
	deepEqual( Stem("parurent"), "parurent" );
	deepEqual( Stem("parut"), "parut" );
	deepEqual( Stem("parût"), "parût" );
	deepEqual( Stem("parvenaient"), "parven" );
	deepEqual( Stem("parvenait"), "parven" );
	deepEqual( Stem("parvenir"), "parven" );
	deepEqual( Stem("parvenons"), "parvenon" );
	deepEqual( Stem("parvenu"), "parvenu" );
	deepEqual( Stem("parvenue"), "parvenu" );
	deepEqual( Stem("parviendrai"), "parviendr" );
	deepEqual( Stem("parviendraient"), "parviendr" );
	deepEqual( Stem("parviendrait"), "parviendr" );
	deepEqual( Stem("parviendras"), "parviendr" );
	deepEqual( Stem("parviendrons"), "parviendron" );
	deepEqual( Stem("parviendront"), "parviendront" );
	deepEqual( Stem("parviens"), "parvien" );
	deepEqual( Stem("parvient"), "parvient" );
	deepEqual( Stem("parvinrent"), "parvinrent" );
	deepEqual( Stem("parvint"), "parvint" );
	deepEqual( Stem("pas"), "pas" );
	deepEqual( Stem("pascal"), "pascal" );
	deepEqual( Stem("pass"), "pass" );
	deepEqual( Stem("passa"), "pass" );
	deepEqual( Stem("passable"), "passabl" );
	deepEqual( Stem("passablement"), "passabl" );
	deepEqual( Stem("passables"), "passabl" );
	deepEqual( Stem("passage"), "passag" );
	deepEqual( Stem("passager"), "passag" );
	deepEqual( Stem("passagère"), "passager" );
	deepEqual( Stem("passagères"), "passager" );
	deepEqual( Stem("passagers"), "passager" );
	deepEqual( Stem("passages"), "passag" );
	deepEqual( Stem("passaient"), "pass" );
	deepEqual( Stem("passais"), "pass" );
	deepEqual( Stem("passait"), "pass" );
	deepEqual( Stem("passant"), "pass" );
	deepEqual( Stem("passants"), "pass" );
	deepEqual( Stem("passar"), "passar" );
	deepEqual( Stem("passe"), "pass" );
	deepEqual( Stem("passé"), "pass" );
	deepEqual( Stem("passée"), "pass" );
	deepEqual( Stem("passées"), "pass" );
	deepEqual( Stem("passementier"), "passementi" );
	deepEqual( Stem("passent"), "passent" );
	deepEqual( Stem("passepartout"), "passepartout" );
	deepEqual( Stem("passeport"), "passeport" );
	deepEqual( Stem("passeports"), "passeport" );
	deepEqual( Stem("passer"), "pass" );
	deepEqual( Stem("passera"), "pass" );
	deepEqual( Stem("passerai"), "pass" );
	deepEqual( Stem("passerais"), "pass" );
	deepEqual( Stem("passerait"), "pass" );
	deepEqual( Stem("passerelle"), "passerel" );
	deepEqual( Stem("passerelles"), "passerel" );
	deepEqual( Stem("passèrent"), "pass" );
	deepEqual( Stem("passerons"), "pass" );
	deepEqual( Stem("passeront"), "pass" );
	deepEqual( Stem("passes"), "pass" );
	deepEqual( Stem("passés"), "pass" );
	deepEqual( Stem("passez"), "pass" );
	deepEqual( Stem("passif"), "passif" );
	deepEqual( Stem("passion"), "passion" );
	deepEqual( Stem("passionnait"), "passion" );
	deepEqual( Stem("passionnant"), "passion" );
	deepEqual( Stem("passionne"), "passion" );
	deepEqual( Stem("passionné"), "passion" );
	deepEqual( Stem("passionnée"), "passion" );
	deepEqual( Stem("passionnées"), "passion" );
	deepEqual( Stem("passionnément"), "passion" );
	deepEqual( Stem("passionner"), "passion" );
	deepEqual( Stem("passionnés"), "passion" );
	deepEqual( Stem("passions"), "passion" );
	deepEqual( Stem("passive"), "passiv" );
	deepEqual( Stem("passons"), "passon" );
	deepEqual( Stem("pastoral"), "pastoral" );
	deepEqual( Stem("pastorale"), "pastoral" );
	deepEqual( Stem("pataugeant"), "pataug" );
	deepEqual( Stem("pâté"), "pât" );
	deepEqual( Stem("patelin"), "patelin" );
	deepEqual( Stem("patente"), "patent" );
	deepEqual( Stem("pater"), "pat" );
	deepEqual( Stem("paterne"), "patern" );
	deepEqual( Stem("paternel"), "paternel" );
	deepEqual( Stem("paternelle"), "paternel" );
	deepEqual( Stem("pathétique"), "pathet" );
	deepEqual( Stem("pathétiques"), "pathet" );
	deepEqual( Stem("pathos"), "pathos" );
	deepEqual( Stem("patiemment"), "patient" );
	deepEqual( Stem("patience"), "patienc" );
	deepEqual( Stem("patinant"), "patin" );
	deepEqual( Stem("patna"), "patn" );
	deepEqual( Stem("patois"), "patois" );
	deepEqual( Stem("patrician"), "patrician" );
	deepEqual( Stem("patricien"), "patricien" );
	deepEqual( Stem("patricienne"), "patricien" );
	deepEqual( Stem("patriciens"), "patricien" );
	deepEqual( Stem("patrie"), "patr" );
	deepEqual( Stem("patriotes"), "patriot" );
	deepEqual( Stem("patriotisme"), "patriot" );
	deepEqual( Stem("patron"), "patron" );
	deepEqual( Stem("patronage"), "patronag" );
	deepEqual( Stem("patronne"), "patron" );
	deepEqual( Stem("patronnes"), "patron" );
	deepEqual( Stem("patrouille"), "patrouill" );
	deepEqual( Stem("patte"), "patt" );
	deepEqual( Stem("pâture"), "pâtur" );
	deepEqual( Stem("pauca"), "pauc" );
	deepEqual( Stem("paul"), "paul" );
	deepEqual( Stem("paupière"), "paupi" );
	deepEqual( Stem("paupières"), "paupi" );
	deepEqual( Stem("pauvre"), "pauvr" );
	deepEqual( Stem("pauvrement"), "pauvr" );
	deepEqual( Stem("pauvres"), "pauvr" );
	deepEqual( Stem("pauvreté"), "pauvret" );
	deepEqual( Stem("pauwell"), "pauwel" );
	deepEqual( Stem("pavé"), "pav" );
	deepEqual( Stem("pavée"), "pav" );
	deepEqual( Stem("pavie"), "pav" );
	deepEqual( Stem("pavillon"), "pavillon" );
	deepEqual( Stem("pavillons"), "pavillon" );
	deepEqual( Stem("pavois"), "pavois" );
	deepEqual( Stem("pawnies"), "pawn" );
	deepEqual( Stem("paya"), "pai" );
	deepEqual( Stem("payables"), "payabl" );
	deepEqual( Stem("payait"), "pai" );
	deepEqual( Stem("payant"), "pai" );
	deepEqual( Stem("paye"), "pay" );
	deepEqual( Stem("payé"), "pai" );
	deepEqual( Stem("payée"), "pai" );
	deepEqual( Stem("payent"), "payent" );
	deepEqual( Stem("payer"), "pai" );
	deepEqual( Stem("payera"), "pai" );
	deepEqual( Stem("payés"), "pai" );
	deepEqual( Stem("payiez"), "pai" );
	deepEqual( Stem("payons"), "payon" );
	deepEqual( Stem("pays"), "pay" );
	deepEqual( Stem("paysage"), "paysag" );
	deepEqual( Stem("paysages"), "paysag" );
	deepEqual( Stem("paysan"), "paysan" );
	deepEqual( Stem("paysanne"), "paysann" );
	deepEqual( Stem("paysans"), "paysan" );
	deepEqual( Stem("peak"), "peak" );
	deepEqual( Stem("peau"), "peau" );
	deepEqual( Stem("peccadille"), "peccadill" );
	deepEqual( Stem("peccavi"), "peccav" );
	deepEqual( Stem("péchais"), "pech" );
	deepEqual( Stem("pêche"), "pêch" );
	deepEqual( Stem("péché"), "pech" );
	deepEqual( Stem("pécher"), "pech" );
	deepEqual( Stem("péchés"), "pech" );
	deepEqual( Stem("pécheur"), "pécheur" );
	deepEqual( Stem("pêcheurs"), "pêcheur" );
	deepEqual( Stem("pectorale"), "pectoral" );
	deepEqual( Stem("pécule"), "pécul" );
	deepEqual( Stem("pécuniaire"), "pécuniair" );
	deepEqual( Stem("pédant"), "ped" );
	deepEqual( Stem("pédanterie"), "pédanter" );
	deepEqual( Stem("pédantesque"), "pédantesqu" );
	deepEqual( Stem("pedroti"), "pedrot" );
	deepEqual( Stem("peignaient"), "peign" );
	deepEqual( Stem("peignait"), "peign" );
	deepEqual( Stem("peignant"), "peign" );
	deepEqual( Stem("peigné"), "peign" );
	deepEqual( Stem("peignez"), "peign" );
	deepEqual( Stem("peignit"), "peign" );
	deepEqual( Stem("peindra"), "peindr" );
	deepEqual( Stem("peindre"), "peindr" );
	deepEqual( Stem("peine"), "pein" );
	deepEqual( Stem("peiné"), "pein" );
	deepEqual( Stem("peines"), "pein" );
	deepEqual( Stem("peinés"), "pein" );
	deepEqual( Stem("peint"), "peint" );
	deepEqual( Stem("peinte"), "peint" );
	deepEqual( Stem("peintes"), "peint" );
	deepEqual( Stem("peintre"), "peintr" );
	deepEqual( Stem("peintres"), "peintr" );
	deepEqual( Stem("peints"), "peint" );
	deepEqual( Stem("peinture"), "peintur" );
	deepEqual( Stem("peintures"), "peintur" );
	deepEqual( Stem("pékin"), "pékin" );
	deepEqual( Stem("pêle"), "pêl" );
	deepEqual( Stem("pelegrino"), "pelegrino" );
	deepEqual( Stem("pèlerinage"), "pèlerinag" );
	deepEqual( Stem("pèlerinages"), "pèlerinag" );
	deepEqual( Stem("pèlerine"), "pèlerin" );
	deepEqual( Stem("pèlerins"), "pèlerin" );
	deepEqual( Stem("pélicans"), "pélican" );
	deepEqual( Stem("pelisse"), "pel" );
	deepEqual( Stem("pelisses"), "pel" );
	deepEqual( Stem("pelletées"), "pellet" );
	deepEqual( Stem("pellico"), "pellico" );
	deepEqual( Stem("peloton"), "peloton" );
	deepEqual( Stem("pénal"), "pénal" );
	deepEqual( Stem("penaud"), "penaud" );
	deepEqual( Stem("penauds"), "penaud" );
	deepEqual( Stem("pence"), "penc" );
	deepEqual( Stem("pencha"), "pench" );
	deepEqual( Stem("penchaient"), "pench" );
	deepEqual( Stem("penchant"), "pench" );
	deepEqual( Stem("penché"), "pench" );
	deepEqual( Stem("pencher"), "pench" );
	deepEqual( Stem("pend"), "pend" );
	deepEqual( Stem("pendable"), "pendabl" );
	deepEqual( Stem("pendables"), "pendabl" );
	deepEqual( Stem("pendaient"), "pend" );
	deepEqual( Stem("pendait"), "pend" );
	deepEqual( Stem("pendant"), "pend" );
	deepEqual( Stem("pendante"), "pend" );
	deepEqual( Stem("pendantes"), "pend" );
	deepEqual( Stem("pendre"), "pendr" );
	deepEqual( Stem("pendu"), "pendu" );
	deepEqual( Stem("pendue"), "pendu" );
	deepEqual( Stem("pendule"), "pendul" );
	deepEqual( Stem("pendules"), "pendul" );
	deepEqual( Stem("pendus"), "pendus" );
	deepEqual( Stem("pénétra"), "pénetr" );
	deepEqual( Stem("pénétrait"), "pénetr" );
	deepEqual( Stem("pénétrant"), "pénetr" );
	deepEqual( Stem("pénétration"), "pénetr" );
	deepEqual( Stem("pénètre"), "pénetr" );
	deepEqual( Stem("pénétré"), "pénetr" );
	deepEqual( Stem("pénétrée"), "pénetr" );
	deepEqual( Stem("pénétrer"), "pénetr" );
	deepEqual( Stem("pénétrera"), "pénetr" );
	deepEqual( Stem("pénétrèrent"), "pénetr" );
	deepEqual( Stem("pénible"), "pénibl" );
	deepEqual( Stem("péniblement"), "pénibl" );
	deepEqual( Stem("pénibles"), "pénibl" );
	deepEqual( Stem("péninsulaire"), "péninsulair" );
	deepEqual( Stem("peninsular"), "peninsular" );
	deepEqual( Stem("péninsule"), "péninsul" );
	deepEqual( Stem("pénitence"), "pénitent" );
	deepEqual( Stem("pennsylvanie"), "pennsylvan" );
	deepEqual( Stem("penny"), "penny" );
	deepEqual( Stem("pensa"), "pens" );
	deepEqual( Stem("pensai"), "pens" );
	deepEqual( Stem("pensaient"), "pens" );
	deepEqual( Stem("pensais"), "pens" );
	deepEqual( Stem("pensait"), "pens" );
	deepEqual( Stem("pensant"), "pens" );
	deepEqual( Stem("pensante"), "pens" );
	deepEqual( Stem("pensants"), "pens" );
	deepEqual( Stem("pensât"), "pens" );
	deepEqual( Stem("pense"), "pens" );
	deepEqual( Stem("pensé"), "pens" );
	deepEqual( Stem("pensée"), "pens" );
	deepEqual( Stem("pensées"), "pens" );
	deepEqual( Stem("pensent"), "pensent" );
	deepEqual( Stem("penser"), "pens" );
	deepEqual( Stem("pensera"), "pens" );
	deepEqual( Stem("penserais"), "pens" );
	deepEqual( Stem("penserait"), "pens" );
	deepEqual( Stem("pensèrent"), "pens" );
	deepEqual( Stem("penseur"), "penseur" );
	deepEqual( Stem("pensez"), "pens" );
	deepEqual( Stem("pensif"), "pensif" );
	deepEqual( Stem("pension"), "pension" );
	deepEqual( Stem("pensionnaire"), "pensionnair" );
	deepEqual( Stem("pensive"), "pensiv" );
	deepEqual( Stem("pensons"), "penson" );
	deepEqual( Stem("pentagone"), "pentagon" );
	deepEqual( Stem("pentateuque"), "pentateuqu" );
	deepEqual( Stem("pente"), "pent" );
	deepEqual( Stem("pentes"), "pent" );
	deepEqual( Stem("pénurie"), "pénur" );
	deepEqual( Stem("pépé"), "pep" );
	deepEqual( Stem("pépites"), "pépit" );
	deepEqual( Stem("pequigny"), "pequigny" );
	deepEqual( Stem("per"), "per" );
	deepEqual( Stem("perçaient"), "perc" );
	deepEqual( Stem("perçait"), "perc" );
	deepEqual( Stem("perçant"), "perc" );
	deepEqual( Stem("perçante"), "perc" );
	deepEqual( Stem("perce"), "perc" );
	deepEqual( Stem("percé"), "perc" );
	deepEqual( Stem("percepteur"), "percepteur" );
	deepEqual( Stem("percer"), "perc" );
	deepEqual( Stem("percèrent"), "perc" );
	deepEqual( Stem("perche"), "perch" );
	deepEqual( Stem("perché"), "perch" );
	deepEqual( Stem("percussion"), "percuss" );
	deepEqual( Stem("perd"), "perd" );
	deepEqual( Stem("perdaient"), "perd" );
	deepEqual( Stem("perdais"), "perd" );
	deepEqual( Stem("perdait"), "perd" );
	deepEqual( Stem("perdant"), "perd" );
	deepEqual( Stem("perde"), "perd" );
	deepEqual( Stem("perdent"), "perdent" );
	deepEqual( Stem("perdez"), "perd" );
	deepEqual( Stem("perdirent"), "perd" );
	deepEqual( Stem("perdit"), "perd" );
	deepEqual( Stem("perdition"), "perdit" );
	deepEqual( Stem("perdons"), "perdon" );
	deepEqual( Stem("perdra"), "perdr" );
	deepEqual( Stem("perdrai"), "perdr" );
	deepEqual( Stem("perdrais"), "perdr" );
	deepEqual( Stem("perdrait"), "perdr" );
	deepEqual( Stem("perdras"), "perdr" );
	deepEqual( Stem("perdre"), "perdr" );
	deepEqual( Stem("perdreau"), "perdreau" );
	deepEqual( Stem("perdriez"), "perdr" );
	deepEqual( Stem("perdrix"), "perdrix" );
	deepEqual( Stem("perds"), "perd" );
	deepEqual( Stem("perdu"), "perdu" );
	deepEqual( Stem("perdue"), "perdu" );
	deepEqual( Stem("perdus"), "perdus" );
	deepEqual( Stem("père"), "per" );
	deepEqual( Stem("pereire"), "pereir" );
	deepEqual( Stem("pères"), "per" );
	deepEqual( Stem("perfection"), "perfect" );
	deepEqual( Stem("perfectionner"), "perfection" );
	deepEqual( Stem("pergolèse"), "pergoles" );
	deepEqual( Stem("péri"), "per" );
	deepEqual( Stem("péril"), "péril" );
	deepEqual( Stem("périlleux"), "périll" );
	deepEqual( Stem("périls"), "péril" );
	deepEqual( Stem("périmètre"), "périmetr" );
	deepEqual( Stem("période"), "périod" );
	deepEqual( Stem("périodique"), "périod" );
	deepEqual( Stem("périr"), "per" );
	deepEqual( Stem("périraient"), "per" );
	deepEqual( Stem("péris"), "per" );
	deepEqual( Stem("périsse"), "per" );
	deepEqual( Stem("périssent"), "per" );
	deepEqual( Stem("périssez"), "per" );
	deepEqual( Stem("péristyle"), "péristyl" );
	deepEqual( Stem("péristyles"), "péristyl" );
	deepEqual( Stem("périt"), "per" );
	deepEqual( Stem("perles"), "perl" );
	deepEqual( Stem("permanence"), "permanent" );
	deepEqual( Stem("permanente"), "permanent" );
	deepEqual( Stem("permet"), "permet" );
	deepEqual( Stem("permets"), "permet" );
	deepEqual( Stem("permettaient"), "permet" );
	deepEqual( Stem("permettait"), "permet" );
	deepEqual( Stem("permettant"), "permet" );
	deepEqual( Stem("permette"), "permet" );
	deepEqual( Stem("permettent"), "permettent" );
	deepEqual( Stem("permettez"), "permet" );
	deepEqual( Stem("permettra"), "permettr" );
	deepEqual( Stem("permettrai"), "permettr" );
	deepEqual( Stem("permettrait"), "permettr" );
	deepEqual( Stem("permettre"), "permettr" );
	deepEqual( Stem("permettrez"), "permettr" );
	deepEqual( Stem("permettront"), "permettront" );
	deepEqual( Stem("permirent"), "perm" );
	deepEqual( Stem("permis"), "perm" );
	deepEqual( Stem("permise"), "permis" );
	deepEqual( Stem("permission"), "permiss" );
	deepEqual( Stem("permit"), "perm" );
	deepEqual( Stem("permît"), "perm" );
	deepEqual( Stem("pernice"), "pernic" );
	deepEqual( Stem("pérorait"), "péror" );
	deepEqual( Stem("péroré"), "péror" );
	deepEqual( Stem("pérou"), "pérou" );
	deepEqual( Stem("pérouse"), "pérous" );
	deepEqual( Stem("perpendiculairement"), "perpendiculair" );
	deepEqual( Stem("perpétuelle"), "perpétuel" );
	deepEqual( Stem("perpétuels"), "perpétuel" );
	deepEqual( Stem("perplexités"), "perplex" );
	deepEqual( Stem("perqué"), "perqu" );
	deepEqual( Stem("perquisition"), "perquisit" );
	deepEqual( Stem("perron"), "perron" );
	deepEqual( Stem("perruque"), "perruqu" );
	deepEqual( Stem("perruques"), "perruqu" );
	deepEqual( Stem("persans"), "persan" );
	deepEqual( Stem("persécutait"), "persécut" );
	deepEqual( Stem("persécute"), "persécut" );
	deepEqual( Stem("persécuté"), "persécut" );
	deepEqual( Stem("persécuterait"), "persécut" );
	deepEqual( Stem("persécutés"), "persécut" );
	deepEqual( Stem("persécutions"), "persécu" );
	deepEqual( Stem("perses"), "pers" );
	deepEqual( Stem("persienne"), "persien" );
	deepEqual( Stem("persiennes"), "persien" );
	deepEqual( Stem("persiflage"), "persiflag" );
	deepEqual( Stem("persiflèrent"), "persifl" );
	deepEqual( Stem("persista"), "persist" );
	deepEqual( Stem("persistance"), "persist" );
	deepEqual( Stem("personnage"), "personnag" );
	deepEqual( Stem("personnages"), "personnag" );
	deepEqual( Stem("personnalité"), "personnal" );
	deepEqual( Stem("personne"), "person" );
	deepEqual( Stem("personnel"), "personnel" );
	deepEqual( Stem("personnelle"), "personnel" );
	deepEqual( Stem("personnellement"), "personnel" );
	deepEqual( Stem("personnelles"), "personnel" );
	deepEqual( Stem("personnels"), "personnel" );
	deepEqual( Stem("personnes"), "person" );
	deepEqual( Stem("personnification"), "personnif" );
	deepEqual( Stem("personnifiée"), "personnifi" );
	deepEqual( Stem("perspective"), "perspect" );
	deepEqual( Stem("perspectives"), "perspect" );
	deepEqual( Stem("perspicacité"), "perspicac" );
	deepEqual( Stem("persuadé"), "persuad" );
	deepEqual( Stem("persuadée"), "persuad" );
	deepEqual( Stem("persuader"), "persuad" );
	deepEqual( Stem("persuasion"), "persuas" );
	deepEqual( Stem("perte"), "pert" );
	deepEqual( Stem("pertes"), "pert" );
	deepEqual( Stem("pertuis"), "pertuis" );
	deepEqual( Stem("perturbations"), "perturb" );
	deepEqual( Stem("péruvien"), "péruvien" );
	deepEqual( Stem("pervers"), "perver" );
	deepEqual( Stem("perversité"), "pervers" );
	deepEqual( Stem("pervertisse"), "pervert" );
	deepEqual( Stem("pesait"), "pes" );
	deepEqual( Stem("pesant"), "pes" );
	deepEqual( Stem("pesante"), "pes" );
	deepEqual( Stem("pesanteur"), "pesanteur" );
	deepEqual( Stem("pesants"), "pes" );
	deepEqual( Stem("pèse"), "pes" );
	deepEqual( Stem("pesé"), "pes" );
	deepEqual( Stem("peser"), "pes" );
	deepEqual( Stem("pesés"), "pes" );
	deepEqual( Stem("pesez"), "pes" );
	deepEqual( Stem("pessimisme"), "pessim" );
	deepEqual( Stem("peste"), "pest" );
	deepEqual( Stem("pester"), "pest" );
	deepEqual( Stem("pétaudière"), "pétaudi" );
	deepEqual( Stem("pétillante"), "pétill" );
	deepEqual( Stem("petit"), "pet" );
	deepEqual( Stem("petite"), "petit" );
	deepEqual( Stem("petites"), "petit" );
	deepEqual( Stem("petitesse"), "petitess" );
	deepEqual( Stem("petitesses"), "petitess" );
	deepEqual( Stem("pétition"), "pétit" );
	deepEqual( Stem("pétitions"), "pétit" );
	deepEqual( Stem("petits"), "petit" );
	deepEqual( Stem("pétrarque"), "pétrarqu" );
	deepEqual( Stem("pétrifié"), "pétrifi" );
	deepEqual( Stem("pétrifiée"), "pétrifi" );
	deepEqual( Stem("pétrole"), "pétrol" );
	deepEqual( Stem("pétrone"), "pétron" );
	deepEqual( Stem("petto"), "petto" );
	deepEqual( Stem("pétulance"), "pétul" );
	deepEqual( Stem("peu"), "peu" );
	deepEqual( Stem("peuple"), "peupl" );
	deepEqual( Stem("peuplé"), "peupl" );
	deepEqual( Stem("peuplée"), "peupl" );
	deepEqual( Stem("peuplent"), "peuplent" );
	deepEqual( Stem("peuples"), "peupl" );
	deepEqual( Stem("peuplés"), "peupl" );
	deepEqual( Stem("peuplier"), "peupli" );
	deepEqual( Stem("peur"), "peur" );
	deepEqual( Stem("peureux"), "peureux" );
	deepEqual( Stem("peurs"), "peur" );
	deepEqual( Stem("peut"), "peut" );
	deepEqual( Stem("peuvent"), "peuvent" );
	deepEqual( Stem("peux"), "peux" );
	deepEqual( Stem("pharsale"), "pharsal" );
	deepEqual( Stem("pherson"), "pherson" );
	deepEqual( Stem("phileas"), "phil" );
	deepEqual( Stem("philippe"), "philipp" );
	deepEqual( Stem("philosophant"), "philosoph" );
	deepEqual( Stem("philosophe"), "philosoph" );
	deepEqual( Stem("philosophes"), "philosoph" );
	deepEqual( Stem("philosophie"), "philosoph" );
	deepEqual( Stem("philosophique"), "philosoph" );
	deepEqual( Stem("philosophiquement"), "philosoph" );
	deepEqual( Stem("philosophiques"), "philosoph" );
	deepEqual( Stem("phosphorescentes"), "phosphorescent" );
	deepEqual( Stem("photographie"), "photograph" );
	deepEqual( Stem("phrase"), "phras" );
	deepEqual( Stem("phrases"), "phras" );
	deepEqual( Stem("physiognomoniques"), "physiognomon" );
	deepEqual( Stem("physionomie"), "physionom" );
	deepEqual( Stem("physionomies"), "physionom" );
	deepEqual( Stem("physionomistes"), "physionom" );
	deepEqual( Stem("physique"), "physiqu" );
	deepEqual( Stem("physiquement"), "physiqu" );
	deepEqual( Stem("physiques"), "physiqu" );
	deepEqual( Stem("piacere"), "piacer" );
	deepEqual( Stem("pianiste"), "pianist" );
	deepEqual( Stem("piano"), "piano" );
	deepEqual( Stem("pianos"), "pianos" );
	deepEqual( Stem("pic"), "pic" );
	deepEqual( Stem("pichegru"), "pichegru" );
	deepEqual( Stem("pics"), "pic" );
	deepEqual( Stem("pie"), "pi" );
	deepEqual( Stem("pièce"), "piec" );
	deepEqual( Stem("pièces"), "piec" );
	deepEqual( Stem("piécettes"), "piécet" );
	deepEqual( Stem("pied"), "pied" );
	deepEqual( Stem("pieds"), "pied" );
	deepEqual( Stem("piège"), "pieg" );
	deepEqual( Stem("pieges"), "pieg" );
	deepEqual( Stem("pièges"), "pieg" );
	deepEqual( Stem("piémont"), "piémont" );
	deepEqual( Stem("piémontais"), "piémont" );
	deepEqual( Stem("piémontaise"), "piémontais" );
	deepEqual( Stem("pier"), "pi" );
	deepEqual( Stem("pierre"), "pierr" );
	deepEqual( Stem("pierres"), "pierr" );
	deepEqual( Stem("piété"), "piet" );
	deepEqual( Stem("piéton"), "piéton" );
	deepEqual( Stem("piétons"), "piéton" );
	deepEqual( Stem("pietragrua"), "pietragru" );
	deepEqual( Stem("pietranera"), "pietran" );
	deepEqual( Stem("piètre"), "pietr" );
	deepEqual( Stem("pieuse"), "pieus" );
	deepEqual( Stem("pieusement"), "pieus" );
	deepEqual( Stem("pieuses"), "pieus" );
	deepEqual( Stem("pieux"), "pieux" );
	deepEqual( Stem("pigeon"), "pigeon" );
	deepEqual( Stem("pigeons"), "pigeon" );
	deepEqual( Stem("pilastre"), "pilastr" );
	deepEqual( Stem("pile"), "pil" );
	deepEqual( Stem("pilé"), "pil" );
	deepEqual( Stem("piler"), "pil" );
	deepEqual( Stem("pilier"), "pili" );
	deepEqual( Stem("piliers"), "pili" );
	deepEqual( Stem("pillage"), "pillag" );
	deepEqual( Stem("pillages"), "pillag" );
	deepEqual( Stem("pillaient"), "pill" );
	deepEqual( Stem("pillaji"), "pillaj" );
	deepEqual( Stem("pille"), "pill" );
	deepEqual( Stem("pillé"), "pill" );
	deepEqual( Stem("pillée"), "pill" );
	deepEqual( Stem("pillent"), "pillent" );
	deepEqual( Stem("pillés"), "pill" );
	deepEqual( Stem("pilori"), "pilor" );
	deepEqual( Stem("pilote"), "pilot" );
	deepEqual( Stem("pilotes"), "pilot" );
	deepEqual( Stem("pimentel"), "pimentel" );
	deepEqual( Stem("pinceau"), "pinceau" );
	deepEqual( Stem("pincée"), "pinc" );
	deepEqual( Stem("pincette"), "pincet" );
	deepEqual( Stem("pintes"), "pint" );
	deepEqual( Stem("piochant"), "pioch" );
	deepEqual( Stem("pioneer"), "pione" );
	deepEqual( Stem("pipe"), "pip" );
	deepEqual( Stem("pipes"), "pip" );
	deepEqual( Stem("piqua"), "piqu" );
	deepEqual( Stem("piquait"), "piqu" );
	deepEqual( Stem("piquant"), "piqu" );
	deepEqual( Stem("piquante"), "piqu" );
	deepEqual( Stem("piquantes"), "piqu" );
	deepEqual( Stem("pique"), "piqu" );
	deepEqual( Stem("piqué"), "piqu" );
	deepEqual( Stem("piquée"), "piqu" );
	deepEqual( Stem("piquer"), "piqu" );
	deepEqual( Stem("piquerait"), "piqu" );
	deepEqual( Stem("piqués"), "piqu" );
	deepEqual( Stem("piquez"), "piqu" );
	deepEqual( Stem("pirard"), "pirard" );
	deepEqual( Stem("pirate"), "pirat" );
	deepEqual( Stem("pire"), "pir" );
	deepEqual( Stem("pis"), "pis" );
	deepEqual( Stem("piste"), "pist" );
	deepEqual( Stem("pistolet"), "pistolet" );
	deepEqual( Stem("pistolets"), "pistolet" );
	deepEqual( Stem("piston"), "piston" );
	deepEqual( Stem("pistons"), "piston" );
	deepEqual( Stem("pitance"), "pitanc" );
	deepEqual( Stem("piteuse"), "piteux" );
	deepEqual( Stem("piteusement"), "piteux" );
	deepEqual( Stem("piteux"), "piteux" );
	deepEqual( Stem("pitié"), "piti" );
	deepEqual( Stem("pitoyable"), "pitoi" );
	deepEqual( Stem("pitt"), "pitt" );
	deepEqual( Stem("pittoresque"), "pittoresqu" );
	deepEqual( Stem("pittoresques"), "pittoresqu" );
	deepEqual( Stem("pittsburg"), "pittsburg" );
	deepEqual( Stem("più"), "più" );
	deepEqual( Stem("plaça"), "plac" );
	deepEqual( Stem("plaçait"), "plac" );
	deepEqual( Stem("plaçant"), "plac" );
	deepEqual( Stem("placard"), "placard" );
	deepEqual( Stem("place"), "plac" );
	deepEqual( Stem("placé"), "plac" );
	deepEqual( Stem("placée"), "plac" );
	deepEqual( Stem("placées"), "plac" );
	deepEqual( Stem("placer"), "plac" );
	deepEqual( Stem("placera"), "plac" );
	deepEqual( Stem("placerai"), "plac" );
	deepEqual( Stem("placerait"), "plac" );
	deepEqual( Stem("placèrent"), "plac" );
	deepEqual( Stem("placerez"), "plac" );
	deepEqual( Stem("placers"), "placer" );
	deepEqual( Stem("places"), "plac" );
	deepEqual( Stem("placés"), "plac" );
	deepEqual( Stem("placez"), "plac" );
	deepEqual( Stem("placidité"), "placid" );
	deepEqual( Stem("plafond"), "plafond" );
	deepEqual( Stem("plafonds"), "plafond" );
	deepEqual( Stem("plaida"), "plaid" );
	deepEqual( Stem("plaidait"), "plaid" );
	deepEqual( Stem("plaider"), "plaid" );
	deepEqual( Stem("plaidoirie"), "plaidoir" );
	deepEqual( Stem("plaie"), "plai" );
	deepEqual( Stem("plaignait"), "plaign" );
	deepEqual( Stem("plaignant"), "plaign" );
	deepEqual( Stem("plaignants"), "plaign" );
	deepEqual( Stem("plaignez"), "plaign" );
	deepEqual( Stem("plaignirent"), "plaign" );
	deepEqual( Stem("plaignit"), "plaign" );
	deepEqual( Stem("plain"), "plain" );
	deepEqual( Stem("plaindrai"), "plaindr" );
	deepEqual( Stem("plaindrais"), "plaindr" );
	deepEqual( Stem("plaindre"), "plaindr" );
	deepEqual( Stem("plaine"), "plain" );
	deepEqual( Stem("plaines"), "plain" );
	deepEqual( Stem("plains"), "plain" );
	deepEqual( Stem("plaint"), "plaint" );
	deepEqual( Stem("plainte"), "plaint" );
	deepEqual( Stem("plaintes"), "plaint" );
	deepEqual( Stem("plaintive"), "plaintiv" );
	deepEqual( Stem("plaints"), "plaint" );
	deepEqual( Stem("plaira"), "plair" );
	deepEqual( Stem("plairait"), "plair" );
	deepEqual( Stem("plaire"), "plair" );
	deepEqual( Stem("plais"), "plais" );
	deepEqual( Stem("plaisaient"), "plais" );
	deepEqual( Stem("plaisait"), "plais" );
	deepEqual( Stem("plaisamment"), "plais" );
	deepEqual( Stem("plaisance"), "plaisanc" );
	deepEqual( Stem("plaisant"), "plais" );
	deepEqual( Stem("plaisanta"), "plaisant" );
	deepEqual( Stem("plaisantaient"), "plaisant" );
	deepEqual( Stem("plaisantait"), "plaisant" );
	deepEqual( Stem("plaisantant"), "plaisant" );
	deepEqual( Stem("plaisantât"), "plaisant" );
	deepEqual( Stem("plaisante"), "plais" );
	deepEqual( Stem("plaisanté"), "plaisant" );
	deepEqual( Stem("plaisantent"), "plaisantent" );
	deepEqual( Stem("plaisanter"), "plaisant" );
	deepEqual( Stem("plaisanterie"), "plaisanter" );
	deepEqual( Stem("plaisanteries"), "plaisanter" );
	deepEqual( Stem("plaisantes"), "plais" );
	deepEqual( Stem("plaisants"), "plais" );
	deepEqual( Stem("plaise"), "plais" );
	deepEqual( Stem("plaisent"), "plaisent" );
	deepEqual( Stem("plaisir"), "plais" );
	deepEqual( Stem("plaisirs"), "plaisir" );
	deepEqual( Stem("plaît"), "plaît" );
	deepEqual( Stem("plan"), "plan" );
	deepEqual( Stem("planait"), "plan" );
	deepEqual( Stem("planche"), "planch" );
	deepEqual( Stem("plancher"), "planch" );
	deepEqual( Stem("planches"), "planch" );
	deepEqual( Stem("planchette"), "planchet" );
	deepEqual( Stem("planisphère"), "planispher" );
	deepEqual( Stem("plans"), "plan" );
	deepEqual( Stem("plant"), "plant" );
	deepEqual( Stem("planta"), "plant" );
	deepEqual( Stem("plantation"), "plantat" );
	deepEqual( Stem("plantations"), "plantat" );
	deepEqual( Stem("plante"), "plant" );
	deepEqual( Stem("planté"), "plant" );
	deepEqual( Stem("planter"), "plant" );
	deepEqual( Stem("planterez"), "plant" );
	deepEqual( Stem("planterons"), "plant" );
	deepEqual( Stem("plantes"), "plant" );
	deepEqual( Stem("plantés"), "plant" );
	deepEqual( Stem("plantiez"), "plant" );
	deepEqual( Stem("plaque"), "plaqu" );
	deepEqual( Stem("plaques"), "plaqu" );
	deepEqual( Stem("plastron"), "plastron" );
	deepEqual( Stem("plat"), "plat" );
	deepEqual( Stem("platanes"), "platan" );
	deepEqual( Stem("plate"), "plat" );
	deepEqual( Stem("plateau"), "plateau" );
	deepEqual( Stem("platement"), "plat" );
	deepEqual( Stem("plates"), "plat" );
	deepEqual( Stem("platitude"), "platitud" );
	deepEqual( Stem("platitudes"), "platitud" );
	deepEqual( Stem("platonique"), "platon" );
	deepEqual( Stem("plâtre"), "plâtr" );
	deepEqual( Stem("plats"), "plat" );
	deepEqual( Stem("platte"), "platt" );
	deepEqual( Stem("plausible"), "plausibl" );
	deepEqual( Stem("please"), "pleas" );
	deepEqual( Stem("plébéien"), "plébéien" );
	deepEqual( Stem("plébéiennes"), "plébéien" );
	deepEqual( Stem("plébéiens"), "plébéien" );
	deepEqual( Stem("plein"), "plein" );
	deepEqual( Stem("pleine"), "plein" );
	deepEqual( Stem("pleinement"), "plein" );
	deepEqual( Stem("pleines"), "plein" );
	deepEqual( Stem("pleins"), "plein" );
	deepEqual( Stem("pleura"), "pleur" );
	deepEqual( Stem("pleurait"), "pleur" );
	deepEqual( Stem("pleurant"), "pleur" );
	deepEqual( Stem("pleure"), "pleur" );
	deepEqual( Stem("pleuré"), "pleur" );
	deepEqual( Stem("pleurer"), "pleur" );
	deepEqual( Stem("pleurera"), "pleur" );
	deepEqual( Stem("pleurerait"), "pleur" );
	deepEqual( Stem("pleurèrent"), "pleur" );
	deepEqual( Stem("pleureur"), "pleureur" );
	deepEqual( Stem("pleurez"), "pleur" );
	deepEqual( Stem("pleurs"), "pleur" );
	deepEqual( Stem("pleutre"), "pleutr" );
	deepEqual( Stem("pleuvaient"), "pleuv" );
	deepEqual( Stem("pleuvait"), "pleuv" );
	deepEqual( Stem("pleuvent"), "pleuvent" );
	deepEqual( Stem("pli"), "pli" );
	deepEqual( Stem("plia"), "pli" );
	deepEqual( Stem("pliaient"), "pli" );
	deepEqual( Stem("plié"), "pli" );
	deepEqual( Stem("pliée"), "pli" );
	deepEqual( Stem("plier"), "pli" );
	deepEqual( Stem("pliniana"), "plinian" );
	deepEqual( Stem("plis"), "plis" );
	deepEqual( Stem("plissa"), "pliss" );
	deepEqual( Stem("plomb"), "plomb" );
	deepEqual( Stem("plombées"), "plomb" );
	deepEqual( Stem("plonge"), "plong" );
	deepEqual( Stem("plongé"), "plong" );
	deepEqual( Stem("plongea"), "plong" );
	deepEqual( Stem("plongeaient"), "plong" );
	deepEqual( Stem("plongeait"), "plong" );
	deepEqual( Stem("plongeant"), "plong" );
	deepEqual( Stem("plongée"), "plong" );
	deepEqual( Stem("plonger"), "plong" );
	deepEqual( Stem("plongerais"), "plong" );
	deepEqual( Stem("plongés"), "plong" );
	deepEqual( Stem("plours"), "plour" );
	deepEqual( Stem("plu"), "plu" );
	deepEqual( Stem("pluie"), "plui" );
	deepEqual( Stem("pluies"), "plui" );
	deepEqual( Stem("plum"), "plum" );
	deepEqual( Stem("plume"), "plum" );
	deepEqual( Stem("plumes"), "plum" );
	deepEqual( Stem("plupart"), "plupart" );
	deepEqual( Stem("plus"), "plus" );
	deepEqual( Stem("plusieurs"), "plusieur" );
	deepEqual( Stem("plut"), "plut" );
	deepEqual( Stem("plût"), "plût" );
	deepEqual( Stem("plutôt"), "plutôt" );
	deepEqual( Stem("pô"), "pô" );
	deepEqual( Stem("poche"), "poch" );
	deepEqual( Stem("poches"), "poch" );
	deepEqual( Stem("poco"), "poco" );
	deepEqual( Stem("podestat"), "podestat" );
	deepEqual( Stem("podestats"), "podestat" );
	deepEqual( Stem("poêle"), "poêl" );
	deepEqual( Stem("poème"), "poem" );
	deepEqual( Stem("poemi"), "poem" );
	deepEqual( Stem("poésie"), "poes" );
	deepEqual( Stem("poésies"), "poes" );
	deepEqual( Stem("poète"), "poet" );
	deepEqual( Stem("poètes"), "poet" );
	deepEqual( Stem("poétique"), "poétiqu" );
	deepEqual( Stem("poids"), "poid" );
	deepEqual( Stem("poignante"), "poign" );
	deepEqual( Stem("poignantes"), "poign" );
	deepEqual( Stem("poignard"), "poignard" );
	deepEqual( Stem("poignarda"), "poignard" );
	deepEqual( Stem("poignardé"), "poignard" );
	deepEqual( Stem("poignardée"), "poignard" );
	deepEqual( Stem("poignarder"), "poignard" );
	deepEqual( Stem("poignards"), "poignard" );
	deepEqual( Stem("poigne"), "poign" );
	deepEqual( Stem("poignée"), "poign" );
	deepEqual( Stem("poignées"), "poign" );
	deepEqual( Stem("poils"), "poil" );
	deepEqual( Stem("poindre"), "poindr" );
	deepEqual( Stem("poing"), "poing" );
	deepEqual( Stem("poings"), "poing" );
	deepEqual( Stem("point"), "point" );
	deepEqual( Stem("pointe"), "point" );
	deepEqual( Stem("pointes"), "point" );
	deepEqual( Stem("points"), "point" );
	deepEqual( Stem("pointus"), "pointus" );
	deepEqual( Stem("poireaux"), "poireau" );
	deepEqual( Stem("poison"), "poison" );
	deepEqual( Stem("poisons"), "poison" );
	deepEqual( Stem("poisson"), "poisson" );
	deepEqual( Stem("poissonnerie"), "poissonner" );
	deepEqual( Stem("poissons"), "poisson" );
	deepEqual( Stem("poissy"), "poissy" );
	deepEqual( Stem("poitrail"), "poitrail" );
	deepEqual( Stem("poitrine"), "poitrin" );
	deepEqual( Stem("poivriers"), "poivri" );
	deepEqual( Stem("pole"), "pol" );
	deepEqual( Stem("poli"), "pol" );
	deepEqual( Stem("police"), "polic" );
	deepEqual( Stem("policeman"), "policeman" );
	deepEqual( Stem("policemen"), "policemen" );
	deepEqual( Stem("polices"), "polic" );
	deepEqual( Stem("polichinelle"), "polichinel" );
	deepEqual( Stem("polidori"), "polidor" );
	deepEqual( Stem("polie"), "pol" );
	deepEqual( Stem("polies"), "pol" );
	deepEqual( Stem("poliment"), "pol" );
	deepEqual( Stem("polis"), "pol" );
	deepEqual( Stem("polish"), "polish" );
	deepEqual( Stem("polisson"), "polisson" );
	deepEqual( Stem("politesse"), "politess" );
	deepEqual( Stem("politesses"), "politess" );
	deepEqual( Stem("politique"), "polit" );
	deepEqual( Stem("politiques"), "polit" );
	deepEqual( Stem("polonais"), "polon" );
	deepEqual( Stem("polyeucte"), "polyeuct" );
	deepEqual( Stem("polygames"), "polygam" );
	deepEqual( Stem("polygamie"), "polygam" );
	deepEqual( Stem("polygones"), "polygon" );
	deepEqual( Stem("pommades"), "pommad" );
	deepEqual( Stem("pomme"), "pomm" );
	deepEqual( Stem("pommeau"), "pommeau" );
	deepEqual( Stem("pommelé"), "pommel" );
	deepEqual( Stem("pommes"), "pomm" );
	deepEqual( Stem("pommettes"), "pommet" );
	deepEqual( Stem("pommiers"), "pommi" );
	deepEqual( Stem("pompe"), "pomp" );
	deepEqual( Stem("pompes"), "pomp" );
	deepEqual( Stem("pompiers"), "pompi" );
	deepEqual( Stem("pompon"), "pompon" );
	deepEqual( Stem("ponceaux"), "ponceau" );
	deepEqual( Stem("poncet"), "poncet" );
	deepEqual( Stem("ponctualité"), "ponctual" );
	deepEqual( Stem("ponctuel"), "ponctuel" );
	deepEqual( Stem("ponctuelle"), "ponctuel" );
	deepEqual( Stem("ponctuellement"), "ponctuel" );
	deepEqual( Stem("pondéré"), "ponder" );
	deepEqual( Stem("poney"), "poney" );
	deepEqual( Stem("poneys"), "poney" );
	deepEqual( Stem("pont"), "pont" );
	deepEqual( Stem("pontarlier"), "pontarli" );
	deepEqual( Stem("ponte"), "pont" );
	deepEqual( Stem("ponton"), "ponton" );
	deepEqual( Stem("ponts"), "pont" );
	deepEqual( Stem("populace"), "populac" );
	deepEqual( Stem("populaire"), "populair" );
	deepEqual( Stem("population"), "popul" );
	deepEqual( Stem("populations"), "popul" );
	deepEqual( Stem("porcelaine"), "porcelain" );
	deepEqual( Stem("porco"), "porco" );
	deepEqual( Stem("porcs"), "porc" );
	deepEqual( Stem("porphyre"), "porphyr" );
	deepEqual( Stem("port"), "port" );
	deepEqual( Stem("porta"), "port" );
	deepEqual( Stem("portaient"), "port" );
	deepEqual( Stem("portait"), "port" );
	deepEqual( Stem("portant"), "port" );
	deepEqual( Stem("portât"), "port" );
	deepEqual( Stem("portative"), "portat" );
	deepEqual( Stem("porte"), "port" );
	deepEqual( Stem("porté"), "port" );
	deepEqual( Stem("portée"), "port" );
	deepEqual( Stem("portées"), "port" );
	deepEqual( Stem("portefaix"), "portefaix" );
	deepEqual( Stem("portefeuille"), "portefeuill" );
	deepEqual( Stem("portefeuilles"), "portefeuill" );
	deepEqual( Stem("portemanteau"), "portemanteau" );
	deepEqual( Stem("portent"), "portent" );
	deepEqual( Stem("porter"), "port" );
	deepEqual( Stem("portera"), "port" );
	deepEqual( Stem("porteras"), "port" );
	deepEqual( Stem("portèrent"), "port" );
	deepEqual( Stem("porterez"), "port" );
	deepEqual( Stem("porteront"), "port" );
	deepEqual( Stem("portes"), "port" );
	deepEqual( Stem("portés"), "port" );
	deepEqual( Stem("porteur"), "porteur" );
	deepEqual( Stem("porteurs"), "porteur" );
	deepEqual( Stem("portez"), "port" );
	deepEqual( Stem("portier"), "porti" );
	deepEqual( Stem("portière"), "porti" );
	deepEqual( Stem("portières"), "porti" );
	deepEqual( Stem("portiers"), "porti" );
	deepEqual( Stem("portion"), "portion" );
	deepEqual( Stem("portique"), "portiqu" );
	deepEqual( Stem("porto"), "porto" );
	deepEqual( Stem("portons"), "porton" );
	deepEqual( Stem("portrait"), "portr" );
	deepEqual( Stem("portraits"), "portrait" );
	deepEqual( Stem("ports"), "port" );
	deepEqual( Stem("portugais"), "portug" );
	deepEqual( Stem("portugaise"), "portugais" );
	deepEqual( Stem("posa"), "pos" );
	deepEqual( Stem("posant"), "pos" );
	deepEqual( Stem("posé"), "pos" );
	deepEqual( Stem("posée"), "pos" );
	deepEqual( Stem("posément"), "pos" );
	deepEqual( Stem("poser"), "pos" );
	deepEqual( Stem("posés"), "pos" );
	deepEqual( Stem("positif"), "posit" );
	deepEqual( Stem("position"), "posit" );
	deepEqual( Stem("positions"), "posit" );
	deepEqual( Stem("positive"), "posit" );
	deepEqual( Stem("positivement"), "posit" );
	deepEqual( Stem("possédait"), "possed" );
	deepEqual( Stem("possédant"), "possed" );
	deepEqual( Stem("possède"), "possed" );
	deepEqual( Stem("possédé"), "possed" );
	deepEqual( Stem("posséder"), "possed" );
	deepEqual( Stem("possédés"), "possed" );
	deepEqual( Stem("possesseur"), "possesseur" );
	deepEqual( Stem("possession"), "possess" );
	deepEqual( Stem("possessions"), "possess" );
	deepEqual( Stem("possibilité"), "possibil" );
	deepEqual( Stem("possibilités"), "possibil" );
	deepEqual( Stem("possible"), "possibl" );
	deepEqual( Stem("possibles"), "possibl" );
	deepEqual( Stem("poste"), "post" );
	deepEqual( Stem("posté"), "post" );
	deepEqual( Stem("postérité"), "poster" );
	deepEqual( Stem("postes"), "post" );
	deepEqual( Stem("posthume"), "posthum" );
	deepEqual( Stem("postillon"), "postillon" );
	deepEqual( Stem("potage"), "potag" );
	deepEqual( Stem("potager"), "potag" );
	deepEqual( Stem("potagères"), "potager" );
	deepEqual( Stem("potentats"), "potentat" );
	deepEqual( Stem("pouce"), "pouc" );
	deepEqual( Stem("pouces"), "pouc" );
	deepEqual( Stem("poudrait"), "poudr" );
	deepEqual( Stem("poudre"), "poudr" );
	deepEqual( Stem("poudrées"), "poudr" );
	deepEqual( Stem("poudrés"), "poudr" );
	deepEqual( Stem("pouffer"), "pouff" );
	deepEqual( Stem("poule"), "poul" );
	deepEqual( Stem("poulet"), "poulet" );
	deepEqual( Stem("poulets"), "poulet" );
	deepEqual( Stem("poulies"), "poul" );
	deepEqual( Stem("poumons"), "poumon" );
	deepEqual( Stem("pounah"), "pounah" );
	deepEqual( Stem("poupée"), "poup" );
	deepEqual( Stem("poupées"), "poup" );
	deepEqual( Stem("pour"), "pour" );
	deepEqual( Stem("pourceaux"), "pourceau" );
	deepEqual( Stem("pourparlers"), "pourparler" );
	deepEqual( Stem("pourpensées"), "pourpens" );
	deepEqual( Stem("pourpoint"), "pourpoint" );
	deepEqual( Stem("pourpres"), "pourpr" );
	deepEqual( Stem("pourquoi"), "pourquoi" );
	deepEqual( Stem("pourra"), "pourr" );
	deepEqual( Stem("pourrai"), "pourr" );
	deepEqual( Stem("pourraient"), "pourr" );
	deepEqual( Stem("pourrais"), "pourr" );
	deepEqual( Stem("pourrait"), "pourr" );
	deepEqual( Stem("pourras"), "pourr" );
	deepEqual( Stem("pourrez"), "pourr" );
	deepEqual( Stem("pourriez"), "pourr" );
	deepEqual( Stem("pourrions"), "pourrion" );
	deepEqual( Stem("pourriture"), "pourritur" );
	deepEqual( Stem("pourrons"), "pourron" );
	deepEqual( Stem("pourront"), "pourront" );
	deepEqual( Stem("poursuit"), "poursuit" );
	deepEqual( Stem("poursuite"), "poursuit" );
	deepEqual( Stem("poursuites"), "poursuit" );
	deepEqual( Stem("poursuivaient"), "poursuiv" );
	deepEqual( Stem("poursuivait"), "poursuiv" );
	deepEqual( Stem("poursuivant"), "poursuiv" );
	deepEqual( Stem("poursuivez"), "poursuiv" );
	deepEqual( Stem("poursuivi"), "poursuiv" );
	deepEqual( Stem("poursuivie"), "poursuiv" );
	deepEqual( Stem("poursuivis"), "poursuiv" );
	deepEqual( Stem("poursuivit"), "poursuiv" );
	deepEqual( Stem("poursuivrai"), "poursuivr" );
	deepEqual( Stem("poursuivraient"), "poursuivr" );
	deepEqual( Stem("poursuivrait"), "poursuivr" );
	deepEqual( Stem("poursuivre"), "poursuivr" );
	deepEqual( Stem("poursuivront"), "poursuivront" );
	deepEqual( Stem("pourtant"), "pourt" );
	deepEqual( Stem("pourvoir"), "pourvoir" );
	deepEqual( Stem("pourvu"), "pourvu" );
	deepEqual( Stem("poussa"), "pouss" );
	deepEqual( Stem("poussaient"), "pouss" );
	deepEqual( Stem("poussait"), "pouss" );
	deepEqual( Stem("poussant"), "pouss" );
	deepEqual( Stem("pousse"), "pouss" );
	deepEqual( Stem("poussé"), "pouss" );
	deepEqual( Stem("poussée"), "pouss" );
	deepEqual( Stem("poussent"), "poussent" );
	deepEqual( Stem("pousser"), "pouss" );
	deepEqual( Stem("poussera"), "pouss" );
	deepEqual( Stem("poussés"), "pouss" );
	deepEqual( Stem("poussez"), "pouss" );
	deepEqual( Stem("poussière"), "poussi" );
	deepEqual( Stem("poutre"), "poutr" );
	deepEqual( Stem("poutres"), "poutr" );
	deepEqual( Stem("pouvaient"), "pouv" );
	deepEqual( Stem("pouvais"), "pouv" );
	deepEqual( Stem("pouvait"), "pouv" );
	deepEqual( Stem("pouvant"), "pouv" );
	deepEqual( Stem("pouvez"), "pouv" );
	deepEqual( Stem("pouviez"), "pouv" );
	deepEqual( Stem("pouvions"), "pouvion" );
	deepEqual( Stem("pouvoir"), "pouvoir" );
	deepEqual( Stem("pouvons"), "pouvon" );
	deepEqual( Stem("pozzo"), "pozzo" );
	deepEqual( Stem("pradt"), "pradt" );
	deepEqual( Stem("prairie"), "prair" );
	deepEqual( Stem("prairies"), "prair" );
	deepEqual( Stem("praticable"), "pratic" );
	deepEqual( Stem("pratiquais"), "pratiqu" );
	deepEqual( Stem("pratique"), "pratiqu" );
	deepEqual( Stem("pratiqué"), "pratiqu" );
	deepEqual( Stem("pratiquée"), "pratiqu" );
	deepEqual( Stem("pratiquées"), "pratiqu" );
	deepEqual( Stem("pratiquer"), "pratiqu" );
	deepEqual( Stem("pratiques"), "pratiqu" );
	deepEqual( Stem("pré"), "pré" );
	deepEqual( Stem("préalable"), "préalabl" );
	deepEqual( Stem("préalablement"), "préalabl" );
	deepEqual( Stem("préambule"), "préambul" );
	deepEqual( Stem("précaution"), "précaut" );
	deepEqual( Stem("précautions"), "précaut" );
	deepEqual( Stem("précéda"), "préced" );
	deepEqual( Stem("précédait"), "préced" );
	deepEqual( Stem("précédé"), "préced" );
	deepEqual( Stem("précédée"), "préced" );
	deepEqual( Stem("précédent"), "précédent" );
	deepEqual( Stem("précédente"), "précédent" );
	deepEqual( Stem("précédents"), "précédent" );
	deepEqual( Stem("précédèrent"), "préced" );
	deepEqual( Stem("précédés"), "préced" );
	deepEqual( Stem("précepte"), "précept" );
	deepEqual( Stem("préceptes"), "précept" );
	deepEqual( Stem("précepteur"), "précepteur" );
	deepEqual( Stem("précepteurs"), "précepteur" );
	deepEqual( Stem("prêcha"), "prêch" );
	deepEqual( Stem("prêchaient"), "prêch" );
	deepEqual( Stem("prêchait"), "prêch" );
	deepEqual( Stem("prêchant"), "prêch" );
	deepEqual( Stem("prêché"), "prêch" );
	deepEqual( Stem("prêcher"), "prêch" );
	deepEqual( Stem("prêchera"), "prêch" );
	deepEqual( Stem("prêcherai"), "prêch" );
	deepEqual( Stem("prêcherait"), "prêch" );
	deepEqual( Stem("prêches"), "prêch" );
	deepEqual( Stem("précieuse"), "précieux" );
	deepEqual( Stem("précieusement"), "précieux" );
	deepEqual( Stem("précieuses"), "précieux" );
	deepEqual( Stem("précieux"), "précieux" );
	deepEqual( Stem("précipices"), "précipic" );
	deepEqual( Stem("précipita"), "précipit" );
	deepEqual( Stem("précipitaient"), "précipit" );
	deepEqual( Stem("précipitait"), "précipit" );
	deepEqual( Stem("précipitamment"), "précipit" );
	deepEqual( Stem("précipitant"), "précipit" );
	deepEqual( Stem("précipitation"), "précipit" );
	deepEqual( Stem("précipite"), "précipit" );
	deepEqual( Stem("précipité"), "précip" );
	deepEqual( Stem("précipitent"), "précipitent" );
	deepEqual( Stem("précipiter"), "précipit" );
	deepEqual( Stem("précipitèrent"), "précipit" );
	deepEqual( Stem("précipités"), "précip" );
	deepEqual( Stem("précis"), "prec" );
	deepEqual( Stem("précise"), "précis" );
	deepEqual( Stem("précisément"), "précis" );
	deepEqual( Stem("précises"), "précis" );
	deepEqual( Stem("précision"), "précis" );
	deepEqual( Stem("précoces"), "précoc" );
	deepEqual( Stem("précurseur"), "précurseur" );
	deepEqual( Stem("précurseurs"), "précurseur" );
	deepEqual( Stem("prédécesseur"), "prédécesseur" );
	deepEqual( Stem("prédestiné"), "prédestin" );
	deepEqual( Stem("prédestinée"), "prédestin" );
	deepEqual( Stem("prédicateur"), "prédiqu" );
	deepEqual( Stem("prédication"), "prédiqu" );
	deepEqual( Stem("prédications"), "prédiqu" );
	deepEqual( Stem("prédiction"), "prédict" );
	deepEqual( Stem("prédictions"), "prédict" );
	deepEqual( Stem("prédire"), "prédir" );
	deepEqual( Stem("prédispose"), "prédispos" );
	deepEqual( Stem("prédit"), "pred" );
	deepEqual( Stem("préface"), "préfac" );
	deepEqual( Stem("préfecture"), "préfectur" );
	deepEqual( Stem("préféra"), "préfer" );
	deepEqual( Stem("préférable"), "préfer" );
	deepEqual( Stem("préférables"), "préfer" );
	deepEqual( Stem("préférait"), "préfer" );
	deepEqual( Stem("préfère"), "préfer" );
	deepEqual( Stem("préféré"), "préfer" );
	deepEqual( Stem("préférence"), "préférent" );
	deepEqual( Stem("préférences"), "préférent" );
	deepEqual( Stem("préférer"), "préfer" );
	deepEqual( Stem("préférerez"), "préfer" );
	deepEqual( Stem("préférez"), "préfer" );
	deepEqual( Stem("préfériez"), "préfer" );
	deepEqual( Stem("préfet"), "préfet" );
	deepEqual( Stem("préfète"), "préfet" );
	deepEqual( Stem("préfets"), "préfet" );
	deepEqual( Stem("préjudice"), "préjudic" );
	deepEqual( Stem("préjudiciable"), "préjudici" );
	deepEqual( Stem("préjudicierait"), "préjudici" );
	deepEqual( Stem("préjugé"), "préjug" );
	deepEqual( Stem("préjugés"), "préjug" );
	deepEqual( Stem("prélat"), "prélat" );
	deepEqual( Stem("prélature"), "prélatur" );
	deepEqual( Stem("prélevés"), "prélev" );
	deepEqual( Stem("préliminaires"), "préliminair" );
	deepEqual( Stem("préludé"), "prélud" );
	deepEqual( Stem("prématurément"), "prématur" );
	deepEqual( Stem("préméditation"), "prémédit" );
	deepEqual( Stem("prémédité"), "prémed" );
	deepEqual( Stem("premier"), "premi" );
	deepEqual( Stem("première"), "premi" );
	deepEqual( Stem("premièrement"), "premi" );
	deepEqual( Stem("premières"), "premi" );
	deepEqual( Stem("premiers"), "premi" );
	deepEqual( Stem("prenaient"), "pren" );
	deepEqual( Stem("prenais"), "pren" );
	deepEqual( Stem("prenait"), "pren" );
	deepEqual( Stem("prenant"), "pren" );
	deepEqual( Stem("prend"), "prend" );
	deepEqual( Stem("prendra"), "prendr" );
	deepEqual( Stem("prendrai"), "prendr" );
	deepEqual( Stem("prendrais"), "prendr" );
	deepEqual( Stem("prendrait"), "prendr" );
	deepEqual( Stem("prendras"), "prendr" );
	deepEqual( Stem("prendre"), "prendr" );
	deepEqual( Stem("prendrez"), "prendr" );
	deepEqual( Stem("prendront"), "prendront" );
	deepEqual( Stem("prends"), "prend" );
	deepEqual( Stem("prenez"), "pren" );
	deepEqual( Stem("prenne"), "pren" );
	deepEqual( Stem("prennent"), "prennent" );
	deepEqual( Stem("prenons"), "prenon" );
	deepEqual( Stem("préoccupa"), "préoccup" );
	deepEqual( Stem("préoccupait"), "préoccup" );
	deepEqual( Stem("préoccupation"), "préoccup" );
	deepEqual( Stem("préoccupations"), "préoccup" );
	deepEqual( Stem("préoccupé"), "préoccup" );
	deepEqual( Stem("préoccupée"), "préoccup" );
	deepEqual( Stem("préoccuper"), "préoccup" );
	deepEqual( Stem("prépara"), "prépar" );
	deepEqual( Stem("préparaient"), "prépar" );
	deepEqual( Stem("préparais"), "prépar" );
	deepEqual( Stem("préparait"), "prépar" );
	deepEqual( Stem("préparant"), "prépar" );
	deepEqual( Stem("préparât"), "prépar" );
	deepEqual( Stem("préparatifs"), "prépar" );
	deepEqual( Stem("préparation"), "prépar" );
	deepEqual( Stem("préparatoire"), "préparatoir" );
	deepEqual( Stem("préparatoires"), "préparatoir" );
	deepEqual( Stem("prépare"), "prépar" );
	deepEqual( Stem("préparé"), "prépar" );
	deepEqual( Stem("préparer"), "prépar" );
	deepEqual( Stem("préparera"), "prépar" );
	deepEqual( Stem("préparèrent"), "prépar" );
	deepEqual( Stem("préparés"), "prépar" );
	deepEqual( Stem("préparez"), "prépar" );
	deepEqual( Stem("préposé"), "prépos" );
	deepEqual( Stem("prepotenze"), "prepotenz" );
	deepEqual( Stem("prérogative"), "prérog" );
	deepEqual( Stem("près"), "pres" );
	deepEqual( Stem("présage"), "présag" );
	deepEqual( Stem("présageait"), "présag" );
	deepEqual( Stem("présages"), "présag" );
	deepEqual( Stem("presbytère"), "presbyter" );
	deepEqual( Stem("prescrira"), "prescr" );
	deepEqual( Stem("prescrire"), "prescrir" );
	deepEqual( Stem("prescrit"), "prescr" );
	deepEqual( Stem("prescrite"), "prescrit" );
	deepEqual( Stem("prescrivaient"), "prescriv" );
	deepEqual( Stem("prescrivait"), "prescriv" );
	deepEqual( Stem("préséance"), "préséanc" );
	deepEqual( Stem("préséances"), "préséanc" );
	deepEqual( Stem("présence"), "présenc" );
	deepEqual( Stem("présent"), "présent" );
	deepEqual( Stem("présenta"), "présent" );
	deepEqual( Stem("présentable"), "présent" );
	deepEqual( Stem("présentaient"), "présent" );
	deepEqual( Stem("présentait"), "présent" );
	deepEqual( Stem("présentant"), "présent" );
	deepEqual( Stem("présentation"), "présent" );
	deepEqual( Stem("présentations"), "présent" );
	deepEqual( Stem("présente"), "présent" );
	deepEqual( Stem("présenté"), "présent" );
	deepEqual( Stem("présentée"), "présent" );
	deepEqual( Stem("présentées"), "présent" );
	deepEqual( Stem("présentement"), "présent" );
	deepEqual( Stem("présentent"), "présentent" );
	deepEqual( Stem("présenter"), "présent" );
	deepEqual( Stem("présentera"), "présent" );
	deepEqual( Stem("présenterait"), "présent" );
	deepEqual( Stem("présentèrent"), "présent" );
	deepEqual( Stem("présenterez"), "présent" );
	deepEqual( Stem("présentes"), "présent" );
	deepEqual( Stem("présentés"), "présent" );
	deepEqual( Stem("présentez"), "présent" );
	deepEqual( Stem("présents"), "présent" );
	deepEqual( Stem("préservant"), "préserv" );
	deepEqual( Stem("préserve"), "préserv" );
	deepEqual( Stem("préservé"), "préserv" );
	deepEqual( Stem("préservée"), "préserv" );
	deepEqual( Stem("préserver"), "préserv" );
	deepEqual( Stem("présidait"), "présid" );
	deepEqual( Stem("présidence"), "président" );
	deepEqual( Stem("président"), "président" );
	deepEqual( Stem("présidente"), "président" );
	deepEqual( Stem("présidents"), "président" );
	deepEqual( Stem("présider"), "présid" );
	deepEqual( Stem("présomption"), "présompt" );
	deepEqual( Stem("présomptions"), "présompt" );
	deepEqual( Stem("presqu"), "presqu" );
	deepEqual( Stem("presque"), "presqu" );
	deepEqual( Stem("pressa"), "press" );
	deepEqual( Stem("pressaient"), "press" );
	deepEqual( Stem("pressais"), "press" );
	deepEqual( Stem("pressait"), "press" );
	deepEqual( Stem("pressant"), "press" );
	deepEqual( Stem("pressante"), "press" );
	deepEqual( Stem("presse"), "press" );
	deepEqual( Stem("pressé"), "press" );
	deepEqual( Stem("pressée"), "press" );
	deepEqual( Stem("pressent"), "pressent" );
	deepEqual( Stem("pressentiment"), "pressent" );
	deepEqual( Stem("pressentiments"), "pressent" );
	deepEqual( Stem("pressentir"), "pressent" );
	deepEqual( Stem("presser"), "press" );
	deepEqual( Stem("pressés"), "press" );
	deepEqual( Stem("pression"), "pression" );
	deepEqual( Stem("pressoir"), "pressoir" );
	deepEqual( Stem("pressure"), "pressur" );
	deepEqual( Stem("prestige"), "prestig" );
	deepEqual( Stem("prestigieuse"), "prestigi" );
	deepEqual( Stem("prestigieux"), "prestigi" );
	deepEqual( Stem("présume"), "présum" );
	deepEqual( Stem("présumé"), "présum" );
	deepEqual( Stem("prêt"), "prêt" );
	deepEqual( Stem("prêta"), "prêt" );
	deepEqual( Stem("prêtait"), "prêt" );
	deepEqual( Stem("prêtant"), "prêt" );
	deepEqual( Stem("prête"), "prêt" );
	deepEqual( Stem("prêté"), "prêt" );
	deepEqual( Stem("prêtée"), "prêt" );
	deepEqual( Stem("prétend"), "prétend" );
	deepEqual( Stem("prétendaient"), "prétend" );
	deepEqual( Stem("prétendait"), "prétend" );
	deepEqual( Stem("prétendant"), "prétend" );
	deepEqual( Stem("prétendent"), "prétendent" );
	deepEqual( Stem("prétendez"), "prétend" );
	deepEqual( Stem("prétendit"), "prétend" );
	deepEqual( Stem("prétendons"), "prétendon" );
	deepEqual( Stem("prétendrait"), "prétendr" );
	deepEqual( Stem("prétendre"), "prétendr" );
	deepEqual( Stem("prétends"), "prétend" );
	deepEqual( Stem("prétendu"), "prétendu" );
	deepEqual( Stem("prétendue"), "prétendu" );
	deepEqual( Stem("prétendues"), "prétendu" );
	deepEqual( Stem("prétendus"), "prétendus" );
	deepEqual( Stem("prétention"), "prétent" );
	deepEqual( Stem("prétentions"), "prétent" );
	deepEqual( Stem("prêter"), "prêt" );
	deepEqual( Stem("prêtes"), "prêt" );
	deepEqual( Stem("prêtés"), "prêt" );
	deepEqual( Stem("prétexta"), "prétext" );
	deepEqual( Stem("prétextant"), "prétext" );
	deepEqual( Stem("prétexte"), "prétext" );
	deepEqual( Stem("prétextes"), "prétext" );
	deepEqual( Stem("prêtez"), "prêt" );
	deepEqual( Stem("prétoire"), "prétoir" );
	deepEqual( Stem("prêtre"), "prêtr" );
	deepEqual( Stem("prêtres"), "prêtr" );
	deepEqual( Stem("prêts"), "prêt" );
	deepEqual( Stem("preuve"), "preuv" );
	deepEqual( Stem("preuves"), "preuv" );
	deepEqual( Stem("preux"), "preux" );
	deepEqual( Stem("prévalant"), "préval" );
	deepEqual( Stem("prévaloir"), "prévaloir" );
	deepEqual( Stem("prévenait"), "préven" );
	deepEqual( Stem("prévenances"), "préven" );
	deepEqual( Stem("prévenez"), "préven" );
	deepEqual( Stem("prévenir"), "préven" );
	deepEqual( Stem("préventions"), "prévent" );
	deepEqual( Stem("prévenu"), "prévenu" );
	deepEqual( Stem("prévenus"), "prévenus" );
	deepEqual( Stem("prévienne"), "prévien" );
	deepEqual( Stem("préviens"), "prévien" );
	deepEqual( Stem("prévision"), "prévis" );
	deepEqual( Stem("prévisions"), "prévis" );
	deepEqual( Stem("prévoir"), "prévoir" );
	deepEqual( Stem("prévois"), "prévois" );
	deepEqual( Stem("prévoit"), "prévoit" );
	deepEqual( Stem("prévost"), "prévost" );
	deepEqual( Stem("prévoyait"), "prévoi" );
	deepEqual( Stem("prévoyant"), "prévoi" );
	deepEqual( Stem("prévu"), "prévu" );
	deepEqual( Stem("prévue"), "prévu" );
	deepEqual( Stem("pria"), "pri" );
	deepEqual( Stem("priais"), "pri" );
	deepEqual( Stem("priait"), "pri" );
	deepEqual( Stem("priant"), "pri" );
	deepEqual( Stem("prie"), "pri" );
	deepEqual( Stem("prié"), "pri" );
	deepEqual( Stem("prier"), "pri" );
	deepEqual( Stem("prierai"), "pri" );
	deepEqual( Stem("prière"), "prier" );
	deepEqual( Stem("prièrent"), "pri" );
	deepEqual( Stem("prières"), "prier" );
	deepEqual( Stem("prieur"), "prieur" );
	deepEqual( Stem("priez"), "pri" );
	deepEqual( Stem("prime"), "prim" );
	deepEqual( Stem("primé"), "prim" );
	deepEqual( Stem("primer"), "prim" );
	deepEqual( Stem("primes"), "prim" );
	deepEqual( Stem("primitif"), "primit" );
	deepEqual( Stem("primitives"), "primit" );
	deepEqual( Stem("primo"), "primo" );
	deepEqual( Stem("prina"), "prin" );
	deepEqual( Stem("prince"), "princ" );
	deepEqual( Stem("princes"), "princ" );
	deepEqual( Stem("princesse"), "princess" );
	deepEqual( Stem("princesses"), "princess" );
	deepEqual( Stem("principal"), "principal" );
	deepEqual( Stem("principale"), "principal" );
	deepEqual( Stem("principalement"), "principal" );
	deepEqual( Stem("principales"), "principal" );
	deepEqual( Stem("principaux"), "principal" );
	deepEqual( Stem("principe"), "princip" );
	deepEqual( Stem("principes"), "princip" );
	deepEqual( Stem("printemps"), "printemp" );
	deepEqual( Stem("prirent"), "prirent" );
	deepEqual( Stem("pris"), "pris" );
	deepEqual( Stem("prise"), "pris" );
	deepEqual( Stem("prises"), "pris" );
	deepEqual( Stem("prison"), "prison" );
	deepEqual( Stem("prisonnier"), "prisonni" );
	deepEqual( Stem("prisonnière"), "prisonni" );
	deepEqual( Stem("prisonniers"), "prisonni" );
	deepEqual( Stem("prisons"), "prison" );
	deepEqual( Stem("prit"), "prit" );
	deepEqual( Stem("prît"), "prît" );
	deepEqual( Stem("priva"), "priv" );
	deepEqual( Stem("privation"), "privat" );
	deepEqual( Stem("prive"), "priv" );
	deepEqual( Stem("privé"), "priv" );
	deepEqual( Stem("privée"), "priv" );
	deepEqual( Stem("privées"), "priv" );
	deepEqual( Stem("priverai"), "priv" );
	deepEqual( Stem("privés"), "priv" );
	deepEqual( Stem("privilège"), "privileg" );
	deepEqual( Stem("privilèges"), "privileg" );
	deepEqual( Stem("privilégié"), "privilégi" );
	deepEqual( Stem("privilégiée"), "privilégi" );
	deepEqual( Stem("prix"), "prix" );
	deepEqual( Stem("pro"), "pro" );
	deepEqual( Stem("probabilité"), "probabl" );
	deepEqual( Stem("probabilités"), "probabl" );
	deepEqual( Stem("probable"), "probabl" );
	deepEqual( Stem("probablement"), "probabl" );
	deepEqual( Stem("probantes"), "prob" );
	deepEqual( Stem("probe"), "prob" );
	deepEqual( Stem("probes"), "prob" );
	deepEqual( Stem("probité"), "probit" );
	deepEqual( Stem("problème"), "problem" );
	deepEqual( Stem("problèmes"), "problem" );
	deepEqual( Stem("procédé"), "proced" );
	deepEqual( Stem("procédés"), "proced" );
	deepEqual( Stem("procédure"), "procédur" );
	deepEqual( Stem("procès"), "proces" );
	deepEqual( Stem("procession"), "process" );
	deepEqual( Stem("processionnellement"), "processionnel" );
	deepEqual( Stem("processions"), "process" );
	deepEqual( Stem("prochain"), "prochain" );
	deepEqual( Stem("prochaine"), "prochain" );
	deepEqual( Stem("proche"), "proch" );
	deepEqual( Stem("proches"), "proch" );
	deepEqual( Stem("proclamation"), "proclam" );
	deepEqual( Stem("proclamations"), "proclam" );
	deepEqual( Stem("proclamée"), "proclam" );
	deepEqual( Stem("proclamer"), "proclam" );
	deepEqual( Stem("proctor"), "proctor" );
	deepEqual( Stem("procuration"), "procur" );
	deepEqual( Stem("procure"), "procur" );
	deepEqual( Stem("procuré"), "procur" );
	deepEqual( Stem("procurée"), "procur" );
	deepEqual( Stem("procurer"), "procur" );
	deepEqual( Stem("procurerai"), "procur" );
	deepEqual( Stem("procureur"), "procureur" );
	deepEqual( Stem("procureurs"), "procureur" );
	deepEqual( Stem("prodige"), "prodig" );
	deepEqual( Stem("prodiges"), "prodig" );
	deepEqual( Stem("prodigieuse"), "prodigi" );
	deepEqual( Stem("prodigieusement"), "prodigi" );
	deepEqual( Stem("prodigieux"), "prodigi" );
	deepEqual( Stem("prodiguait"), "prodigu" );
	deepEqual( Stem("prodigue"), "prodigu" );
	deepEqual( Stem("prodiguer"), "prodigu" );
	deepEqual( Stem("prodiguera"), "prodigu" );
	deepEqual( Stem("prodiguerait"), "prodigu" );
	deepEqual( Stem("prodiguèrent"), "prodigu" );
	deepEqual( Stem("production"), "product" );
	deepEqual( Stem("produirait"), "produir" );
	deepEqual( Stem("produire"), "produir" );
	deepEqual( Stem("produis"), "produis" );
	deepEqual( Stem("produisaient"), "produis" );
	deepEqual( Stem("produisait"), "produis" );
	deepEqual( Stem("produisant"), "produis" );
	deepEqual( Stem("produise"), "produis" );
	deepEqual( Stem("produisit"), "produis" );
	deepEqual( Stem("produit"), "produit" );
	deepEqual( Stem("produite"), "produit" );
	deepEqual( Stem("produites"), "produit" );
	deepEqual( Stem("produits"), "produit" );
	deepEqual( Stem("profanateur"), "profan" );
	deepEqual( Stem("profane"), "profan" );
	deepEqual( Stem("profanes"), "profan" );
	deepEqual( Stem("proférait"), "profer" );
	deepEqual( Stem("proférant"), "profer" );
	deepEqual( Stem("proférées"), "profer" );
	deepEqual( Stem("proférer"), "profer" );
	deepEqual( Stem("proférés"), "profer" );
	deepEqual( Stem("professait"), "profess" );
	deepEqual( Stem("professeur"), "professeur" );
	deepEqual( Stem("professeurs"), "professeur" );
	deepEqual( Stem("profession"), "profess" );
	deepEqual( Stem("professions"), "profess" );
	deepEqual( Stem("profil"), "profil" );
	deepEqual( Stem("profilait"), "profil" );
	deepEqual( Stem("profilant"), "profil" );
	deepEqual( Stem("profilée"), "profil" );
	deepEqual( Stem("profils"), "profil" );
	deepEqual( Stem("profit"), "prof" );
	deepEqual( Stem("profita"), "profit" );
	deepEqual( Stem("profitable"), "profit" );
	deepEqual( Stem("profitait"), "profit" );
	deepEqual( Stem("profitant"), "profit" );
	deepEqual( Stem("profité"), "profit" );
	deepEqual( Stem("profiter"), "profit" );
	deepEqual( Stem("profiterait"), "profit" );
	deepEqual( Stem("profitons"), "profiton" );
	deepEqual( Stem("profits"), "profit" );
	deepEqual( Stem("profond"), "profond" );
	deepEqual( Stem("profonde"), "profond" );
	deepEqual( Stem("profondément"), "profond" );
	deepEqual( Stem("profondes"), "profond" );
	deepEqual( Stem("profondeur"), "profondeur" );
	deepEqual( Stem("profondeurs"), "profondeur" );
	deepEqual( Stem("profonds"), "profond" );
	deepEqual( Stem("programme"), "programm" );
	deepEqual( Stem("progrès"), "progres" );
	deepEqual( Stem("prohibée"), "prohib" );
	deepEqual( Stem("proie"), "proi" );
	deepEqual( Stem("projectiles"), "projectil" );
	deepEqual( Stem("projet"), "projet" );
	deepEqual( Stem("projeté"), "projet" );
	deepEqual( Stem("projetée"), "projet" );
	deepEqual( Stem("projets"), "projet" );
	deepEqual( Stem("prolonge"), "prolong" );
	deepEqual( Stem("prolongé"), "prolong" );
	deepEqual( Stem("prolongea"), "prolong" );
	deepEqual( Stem("prolongeaient"), "prolong" );
	deepEqual( Stem("prolongeant"), "prolong" );
	deepEqual( Stem("prolongée"), "prolong" );
	deepEqual( Stem("prolongent"), "prolongent" );
	deepEqual( Stem("prolonger"), "prolong" );
	deepEqual( Stem("prolongés"), "prolong" );
	deepEqual( Stem("promena"), "promen" );
	deepEqual( Stem("promenade"), "promenad" );
	deepEqual( Stem("promenades"), "promenad" );
	deepEqual( Stem("promenaient"), "promen" );
	deepEqual( Stem("promenait"), "promen" );
	deepEqual( Stem("promenant"), "promen" );
	deepEqual( Stem("promène"), "promen" );
	deepEqual( Stem("promené"), "promen" );
	deepEqual( Stem("promènent"), "promènent" );
	deepEqual( Stem("promener"), "promen" );
	deepEqual( Stem("promenèrent"), "promen" );
	deepEqual( Stem("promenés"), "promen" );
	deepEqual( Stem("promeneur"), "promeneur" );
	deepEqual( Stem("promeneurs"), "promeneur" );
	deepEqual( Stem("promenez"), "promen" );
	deepEqual( Stem("promenions"), "promen" );
	deepEqual( Stem("promesse"), "promess" );
	deepEqual( Stem("promesses"), "promess" );
	deepEqual( Stem("promet"), "promet" );
	deepEqual( Stem("promets"), "promet" );
	deepEqual( Stem("promettait"), "promet" );
	deepEqual( Stem("promette"), "promet" );
	deepEqual( Stem("promettent"), "promettent" );
	deepEqual( Stem("promettez"), "promet" );
	deepEqual( Stem("promettons"), "prometton" );
	deepEqual( Stem("promettre"), "promettr" );
	deepEqual( Stem("promis"), "prom" );
	deepEqual( Stem("promise"), "promis" );
	deepEqual( Stem("promit"), "prom" );
	deepEqual( Stem("promontoire"), "promontoir" );
	deepEqual( Stem("promotion"), "promot" );
	deepEqual( Stem("prompte"), "prompt" );
	deepEqual( Stem("promptement"), "prompt" );
	deepEqual( Stem("prôner"), "prôn" );
	deepEqual( Stem("prononça"), "prononc" );
	deepEqual( Stem("prononçait"), "prononc" );
	deepEqual( Stem("prononçant"), "prononc" );
	deepEqual( Stem("prononce"), "prononc" );
	deepEqual( Stem("prononcé"), "prononc" );
	deepEqual( Stem("prononcée"), "prononc" );
	deepEqual( Stem("prononcées"), "prononc" );
	deepEqual( Stem("prononcer"), "prononc" );
	deepEqual( Stem("prononcera"), "prononc" );
	deepEqual( Stem("prononcerait"), "prononc" );
	deepEqual( Stem("prononcèrent"), "prononc" );
	deepEqual( Stem("prononcés"), "prononc" );
	deepEqual( Stem("prononciation"), "prononci" );
	deepEqual( Stem("prononçons"), "prononçon" );
	deepEqual( Stem("pronostics"), "pronostic" );
	deepEqual( Stem("propageaient"), "propag" );
	deepEqual( Stem("propagèrent"), "propag" );
	deepEqual( Stem("propension"), "propens" );
	deepEqual( Stem("prophète"), "prophet" );
	deepEqual( Stem("prophètes"), "prophet" );
	deepEqual( Stem("prophétie"), "prophet" );
	deepEqual( Stem("prophéties"), "prophet" );
	deepEqual( Stem("propice"), "propic" );
	deepEqual( Stem("propices"), "propic" );
	deepEqual( Stem("propitiatoires"), "propitiatoir" );
	deepEqual( Stem("proportion"), "proport" );
	deepEqual( Stem("proportionné"), "proportion" );
	deepEqual( Stem("proportions"), "proport" );
	deepEqual( Stem("propos"), "propos" );
	deepEqual( Stem("proposa"), "propos" );
	deepEqual( Stem("proposait"), "propos" );
	deepEqual( Stem("propose"), "propos" );
	deepEqual( Stem("proposé"), "propos" );
	deepEqual( Stem("proposer"), "propos" );
	deepEqual( Stem("proposerait"), "propos" );
	deepEqual( Stem("proposés"), "propos" );
	deepEqual( Stem("proposez"), "propos" );
	deepEqual( Stem("proposition"), "proposit" );
	deepEqual( Stem("propositions"), "proposit" );
	deepEqual( Stem("propre"), "propr" );
	deepEqual( Stem("proprement"), "propr" );
	deepEqual( Stem("propres"), "propr" );
	deepEqual( Stem("propreté"), "propret" );
	deepEqual( Stem("propriétaire"), "propriétair" );
	deepEqual( Stem("propriétaires"), "propriétair" );
	deepEqual( Stem("propriété"), "propriet" );
	deepEqual( Stem("propriétés"), "propriet" );
	deepEqual( Stem("proprio"), "proprio" );
	deepEqual( Stem("prosaïquement"), "prosaïqu" );
	deepEqual( Stem("prosaïques"), "prosaïqu" );
	deepEqual( Stem("proscrivent"), "proscrivent" );
	deepEqual( Stem("prose"), "pros" );
	deepEqual( Stem("prosélytisme"), "prosélyt" );
	deepEqual( Stem("prospèrent"), "prosp" );
	deepEqual( Stem("prospérité"), "prosper" );
	deepEqual( Stem("prospérités"), "prosper" );
	deepEqual( Stem("prosterna"), "prostern" );
	deepEqual( Stem("prosternait"), "prostern" );
	deepEqual( Stem("prosternant"), "prostern" );
	deepEqual( Stem("prostration"), "prostrat" );
	deepEqual( Stem("protecteur"), "protecteur" );
	deepEqual( Stem("protecteurs"), "protecteur" );
	deepEqual( Stem("protection"), "protect" );
	deepEqual( Stem("protections"), "protect" );
	deepEqual( Stem("protège"), "proteg" );
	deepEqual( Stem("protégé"), "proteg" );
	deepEqual( Stem("protégeaient"), "proteg" );
	deepEqual( Stem("protégeait"), "proteg" );
	deepEqual( Stem("protéger"), "proteg" );
	deepEqual( Stem("protégera"), "proteg" );
	deepEqual( Stem("protégés"), "proteg" );
	deepEqual( Stem("protégez"), "proteg" );
	deepEqual( Stem("protesta"), "protest" );
	deepEqual( Stem("protestait"), "protest" );
	deepEqual( Stem("protestant"), "protest" );
	deepEqual( Stem("protestante"), "protest" );
	deepEqual( Stem("protestantisme"), "protestant" );
	deepEqual( Stem("protestants"), "protest" );
	deepEqual( Stem("protestations"), "protest" );
	deepEqual( Stem("proteste"), "protest" );
	deepEqual( Stem("protesté"), "protest" );
	deepEqual( Stem("protester"), "protest" );
	deepEqual( Stem("prouesse"), "prouess" );
	deepEqual( Stem("prouva"), "prouv" );
	deepEqual( Stem("prouvaient"), "prouv" );
	deepEqual( Stem("prouvait"), "prouv" );
	deepEqual( Stem("prouvant"), "prouv" );
	deepEqual( Stem("prouve"), "prouv" );
	deepEqual( Stem("prouvé"), "prouv" );
	deepEqual( Stem("prouvée"), "prouv" );
	deepEqual( Stem("prouvées"), "prouv" );
	deepEqual( Stem("prouvent"), "prouvent" );
	deepEqual( Stem("prouver"), "prouv" );
	deepEqual( Stem("prouveraient"), "prouv" );
	deepEqual( Stem("prouvez"), "prouv" );
	deepEqual( Stem("provenaient"), "proven" );
	deepEqual( Stem("provenait"), "proven" );
	deepEqual( Stem("provence"), "provenc" );
	deepEqual( Stem("proverbe"), "proverb" );
	deepEqual( Stem("proverbiale"), "proverbial" );
	deepEqual( Stem("providence"), "provident" );
	deepEqual( Stem("provient"), "provient" );
	deepEqual( Stem("province"), "provinc" );
	deepEqual( Stem("provinces"), "provinc" );
	deepEqual( Stem("provincial"), "provincial" );
	deepEqual( Stem("provinciale"), "provincial" );
	deepEqual( Stem("provinciaux"), "provincial" );
	deepEqual( Stem("provision"), "provis" );
	deepEqual( Stem("provisions"), "provis" );
	deepEqual( Stem("provocante"), "provoc" );
	deepEqual( Stem("provocatrice"), "provoc" );
	deepEqual( Stem("provoqua"), "provoqu" );
	deepEqual( Stem("provoquait"), "provoqu" );
	deepEqual( Stem("provoqué"), "provoqu" );
	deepEqual( Stem("provoquée"), "provoqu" );
	deepEqual( Stem("provoquer"), "provoqu" );
	deepEqual( Stem("prude"), "prud" );
	deepEqual( Stem("prudemment"), "prudent" );
	deepEqual( Stem("prudence"), "prudenc" );
	deepEqual( Stem("prudent"), "prudent" );
	deepEqual( Stem("prudente"), "prudent" );
	deepEqual( Stem("prudentes"), "prudent" );
	deepEqual( Stem("prudents"), "prudent" );
	deepEqual( Stem("pruderie"), "pruder" );
	deepEqual( Stem("prunelle"), "prunel" );
	deepEqual( Stem("pruniers"), "pruni" );
	deepEqual( Stem("prusse"), "pruss" );
	deepEqual( Stem("prussien"), "prussien" );
	deepEqual( Stem("prussienne"), "prussien" );
	deepEqual( Stem("prussiens"), "prussien" );
	deepEqual( Stem("psalmodie"), "psalmod" );
	deepEqual( Stem("psaume"), "psaum" );
	deepEqual( Stem("psaumes"), "psaum" );
	deepEqual( Stem("pseudonyme"), "pseudonym" );
	deepEqual( Stem("psyché"), "psych" );
	deepEqual( Stem("pu"), "pu" );
	deepEqual( Stem("publia"), "publi" );
	deepEqual( Stem("public"), "public" );
	deepEqual( Stem("publicité"), "publiqu" );
	deepEqual( Stem("publics"), "public" );
	deepEqual( Stem("publie"), "publ" );
	deepEqual( Stem("publié"), "publi" );
	deepEqual( Stem("publiée"), "publi" );
	deepEqual( Stem("publiées"), "publi" );
	deepEqual( Stem("publièrent"), "publi" );
	deepEqual( Stem("publique"), "publiqu" );
	deepEqual( Stem("publiquement"), "publiqu" );
	deepEqual( Stem("publiques"), "publiqu" );
	deepEqual( Stem("pudeur"), "pudeur" );
	deepEqual( Stem("puériles"), "puéril" );
	deepEqual( Stem("puis"), "puis" );
	deepEqual( Stem("puisait"), "puis" );
	deepEqual( Stem("puisant"), "puis" );
	deepEqual( Stem("puisée"), "puis" );
	deepEqual( Stem("puiser"), "puis" );
	deepEqual( Stem("puisés"), "puis" );
	deepEqual( Stem("puisqu"), "puisqu" );
	deepEqual( Stem("puisque"), "puisqu" );
	deepEqual( Stem("puissamment"), "puiss" );
	deepEqual( Stem("puissance"), "puissanc" );
	deepEqual( Stem("puissances"), "puissanc" );
	deepEqual( Stem("puissant"), "puiss" );
	deepEqual( Stem("puissante"), "puiss" );
	deepEqual( Stem("puissantes"), "puiss" );
	deepEqual( Stem("puissants"), "puiss" );
	deepEqual( Stem("puisse"), "puiss" );
	deepEqual( Stem("puissent"), "puissent" );
	deepEqual( Stem("puissiez"), "puiss" );
	deepEqual( Stem("puissions"), "puission" );
	deepEqual( Stem("puits"), "puit" );
	deepEqual( Stem("pullulaient"), "pullul" );
	deepEqual( Stem("pullulent"), "pullulent" );
	deepEqual( Stem("punch"), "punch" );
	deepEqual( Stem("puni"), "pun" );
	deepEqual( Stem("punie"), "pun" );
	deepEqual( Stem("punir"), "pun" );
	deepEqual( Stem("punira"), "pun" );
	deepEqual( Stem("punirait"), "pun" );
	deepEqual( Stem("punirmi"), "punirm" );
	deepEqual( Stem("punis"), "pun" );
	deepEqual( Stem("punisse"), "pun" );
	deepEqual( Stem("punit"), "pun" );
	deepEqual( Stem("punîtes"), "pun" );
	deepEqual( Stem("punition"), "punit" );
	deepEqual( Stem("punitions"), "punit" );
	deepEqual( Stem("puntiglio"), "puntiglio" );
	deepEqual( Stem("pupille"), "pupill" );
	deepEqual( Stem("pupitre"), "pupitr" );
	deepEqual( Stem("pur"), "pur" );
	deepEqual( Stem("pure"), "pur" );
	deepEqual( Stem("purement"), "pur" );
	deepEqual( Stem("purent"), "purent" );
	deepEqual( Stem("pureté"), "puret" );
	deepEqual( Stem("purgeait"), "purg" );
	deepEqual( Stem("purger"), "purg" );
	deepEqual( Stem("puritaine"), "puritain" );
	deepEqual( Stem("purs"), "pur" );
	deepEqual( Stem("purser"), "purs" );
	deepEqual( Stem("pusillanime"), "pusillanim" );
	deepEqual( Stem("pusillanimes"), "pusillanim" );
	deepEqual( Stem("pusillanimité"), "pusillanim" );
	deepEqual( Stem("pusse"), "puss" );
	deepEqual( Stem("pussent"), "pussent" );
	deepEqual( Stem("put"), "put" );
	deepEqual( Stem("pût"), "pût" );
	deepEqual( Stem("putiphar"), "putiphar" );
	deepEqual( Stem("putréfaction"), "putréfact" );
	deepEqual( Stem("pyramide"), "pyramid" );
	deepEqual( Stem("pyrénées"), "pyren" );
	deepEqual( Stem("qu"), "qu" );
	deepEqual( Stem("qua"), "qua" );
	deepEqual( Stem("quadrille"), "quadrill" );
	deepEqual( Stem("quadrupède"), "quadruped" );
	deepEqual( Stem("quadruple"), "quadrupl" );
	deepEqual( Stem("quai"), "quai" );
	deepEqual( Stem("quais"), "quais" );
	deepEqual( Stem("quakeresse"), "quakeress" );
	deepEqual( Stem("qualifiait"), "qualifi" );
	deepEqual( Stem("qualificatif"), "qualif" );
	deepEqual( Stem("qualification"), "qualif" );
	deepEqual( Stem("qualité"), "qualit" );
	deepEqual( Stem("qualités"), "qualit" );
	deepEqual( Stem("quand"), "quand" );
	deepEqual( Stem("quando"), "quando" );
	deepEqual( Stem("quant"), "quant" );
	deepEqual( Stem("quanti"), "quant" );
	deepEqual( Stem("quantième"), "quantiem" );
	deepEqual( Stem("quantièmes"), "quantiem" );
	deepEqual( Stem("quantité"), "quantit" );
	deepEqual( Stem("quarantaine"), "quarantain" );
	deepEqual( Stem("quarante"), "quar" );
	deepEqual( Stem("quarantième"), "quarantiem" );
	deepEqual( Stem("quart"), "quart" );
	deepEqual( Stem("quarti"), "quart" );
	deepEqual( Stem("quartier"), "quarti" );
	deepEqual( Stem("quartiers"), "quarti" );
	deepEqual( Stem("quarto"), "quarto" );
	deepEqual( Stem("quarts"), "quart" );
	deepEqual( Stem("quatorze"), "quatorz" );
	deepEqual( Stem("quatre"), "quatr" );
	deepEqual( Stem("quatrième"), "quatriem" );
	deepEqual( Stem("quatrièmes"), "quatriem" );
	deepEqual( Stem("que"), "que" );
	deepEqual( Stem("queenstown"), "queenstown" );
	deepEqual( Stem("quel"), "quel" );
	deepEqual( Stem("quelconque"), "quelconqu" );
	deepEqual( Stem("quelle"), "quel" );
	deepEqual( Stem("quelles"), "quel" );
	deepEqual( Stem("quelqu"), "quelqu" );
	deepEqual( Stem("quelque"), "quelqu" );
	deepEqual( Stem("quelquefois"), "quelquefois" );
	deepEqual( Stem("quelques"), "quelqu" );
	deepEqual( Stem("quels"), "quel" );
	deepEqual( Stem("quem"), "quem" );
	deepEqual( Stem("querelle"), "querel" );
	deepEqual( Stem("querelles"), "querel" );
	deepEqual( Stem("question"), "question" );
	deepEqual( Stem("questionner"), "question" );
	deepEqual( Stem("questions"), "question" );
	deepEqual( Stem("quête"), "quêt" );
	deepEqual( Stem("quêtes"), "quêt" );
	deepEqual( Stem("quêteurs"), "quêteur" );
	deepEqual( Stem("queue"), "queu" );
	deepEqual( Stem("qui"), "qui" );
	deepEqual( Stem("quibus"), "quibus" );
	deepEqual( Stem("quichotte"), "quichott" );
	deepEqual( Stem("quiconque"), "quiconqu" );
	deepEqual( Stem("quid"), "quid" );
	deepEqual( Stem("quille"), "quill" );
	deepEqual( Stem("quint"), "quint" );
	deepEqual( Stem("quintaux"), "quintal" );
	deepEqual( Stem("quinte"), "quint" );
	deepEqual( Stem("quinzaine"), "quinzain" );
	deepEqual( Stem("quinze"), "quinz" );
	deepEqual( Stem("quinzième"), "quinziem" );
	deepEqual( Stem("quitta"), "quitt" );
	deepEqual( Stem("quittai"), "quitt" );
	deepEqual( Stem("quittais"), "quitt" );
	deepEqual( Stem("quittait"), "quitt" );
	deepEqual( Stem("quittant"), "quitt" );
	deepEqual( Stem("quittât"), "quitt" );
	deepEqual( Stem("quitte"), "quitt" );
	deepEqual( Stem("quitté"), "quitt" );
	deepEqual( Stem("quittent"), "quittent" );
	deepEqual( Stem("quitter"), "quitt" );
	deepEqual( Stem("quittera"), "quitt" );
	deepEqual( Stem("quitterai"), "quitt" );
	deepEqual( Stem("quitterait"), "quitt" );
	deepEqual( Stem("quittèrent"), "quitt" );
	deepEqual( Stem("quitterez"), "quitt" );
	deepEqual( Stem("quitterons"), "quitt" );
	deepEqual( Stem("quittes"), "quitt" );
	deepEqual( Stem("quittés"), "quitt" );
	deepEqual( Stem("quittez"), "quitt" );
	deepEqual( Stem("quittons"), "quitton" );
	deepEqual( Stem("quoerens"), "quoeren" );
	deepEqual( Stem("quoi"), "quoi" );
	deepEqual( Stem("quoiqu"), "quoiqu" );
	deepEqual( Stem("quoique"), "quoiqu" );
	deepEqual( Stem("quotidien"), "quotidien" );
	deepEqual( Stem("quotidienne"), "quotidien" );
	deepEqual( Stem("quotidiennement"), "quotidien" );
	deepEqual( Stem("quotité"), "quotit" );
	deepEqual( Stem("r"), "r" );
	deepEqual( Stem("rabâchage"), "rabâchag" );
	deepEqual( Stem("rabaisser"), "rabaiss" );
	deepEqual( Stem("raccommodait"), "raccommod" );
	deepEqual( Stem("raccommodant"), "raccommod" );
	deepEqual( Stem("raccommodé"), "raccommod" );
	deepEqual( Stem("raccommodements"), "raccommod" );
	deepEqual( Stem("raccommoder"), "raccommod" );
	deepEqual( Stem("raccordent"), "raccordent" );
	deepEqual( Stem("raccourcis"), "raccourc" );
	deepEqual( Stem("race"), "rac" );
	deepEqual( Stem("races"), "rac" );
	deepEqual( Stem("rachète"), "rachet" );
	deepEqual( Stem("racheter"), "rachet" );
	deepEqual( Stem("racine"), "racin" );
	deepEqual( Stem("raconta"), "racont" );
	deepEqual( Stem("racontait"), "racont" );
	deepEqual( Stem("racontant"), "racont" );
	deepEqual( Stem("racontât"), "racont" );
	deepEqual( Stem("raconte"), "racont" );
	deepEqual( Stem("raconté"), "racont" );
	deepEqual( Stem("racontent"), "racontent" );
	deepEqual( Stem("raconter"), "racont" );
	deepEqual( Stem("raconterai"), "racont" );
	deepEqual( Stem("raconteraient"), "racont" );
	deepEqual( Stem("raconterait"), "racont" );
	deepEqual( Stem("racontèrent"), "racont" );
	deepEqual( Stem("raconterons"), "racont" );
	deepEqual( Stem("racontés"), "racont" );
	deepEqual( Stem("racontez"), "racont" );
	deepEqual( Stem("rade"), "rad" );
	deepEqual( Stem("radieux"), "radieux" );
	deepEqual( Stem("radouci"), "radouc" );
	deepEqual( Stem("rafale"), "rafal" );
	deepEqual( Stem("rafales"), "rafal" );
	deepEqual( Stem("raffinée"), "raffin" );
	deepEqual( Stem("rafraîchie"), "rafraîch" );
	deepEqual( Stem("rafraîchir"), "rafraîch" );
	deepEqual( Stem("rafraîchissements"), "rafraîch" );
	deepEqual( Stem("rafraîchit"), "rafraîch" );
	deepEqual( Stem("rage"), "rag" );
	deepEqual( Stem("rageant"), "rag" );
	deepEqual( Stem("rages"), "rag" );
	deepEqual( Stem("rageurs"), "rageur" );
	deepEqual( Stem("raide"), "raid" );
	deepEqual( Stem("raidi"), "raid" );
	deepEqual( Stem("raidie"), "raid" );
	deepEqual( Stem("raidirent"), "raid" );
	deepEqual( Stem("raies"), "rai" );
	deepEqual( Stem("rail"), "rail" );
	deepEqual( Stem("raillerie"), "railler" );
	deepEqual( Stem("railroad"), "railroad" );
	deepEqual( Stem("rails"), "rail" );
	deepEqual( Stem("railway"), "railway" );
	deepEqual( Stem("railways"), "railway" );
	deepEqual( Stem("raison"), "raison" );
	deepEqual( Stem("raisonna"), "raison" );
	deepEqual( Stem("raisonnable"), "raison" );
	deepEqual( Stem("raisonnablement"), "raison" );
	deepEqual( Stem("raisonnables"), "raison" );
	deepEqual( Stem("raisonnais"), "raison" );
	deepEqual( Stem("raisonnait"), "raison" );
	deepEqual( Stem("raisonnante"), "raison" );
	deepEqual( Stem("raisonne"), "raison" );
	deepEqual( Stem("raisonnement"), "raison" );
	deepEqual( Stem("raisonnements"), "raison" );
	deepEqual( Stem("raisonner"), "raison" );
	deepEqual( Stem("raisonneur"), "raisonneur" );
	deepEqual( Stem("raisons"), "raison" );
	deepEqual( Stem("rajah"), "rajah" );
	deepEqual( Stem("rajahs"), "rajah" );
	deepEqual( Stem("rajeuni"), "rajeun" );
	deepEqual( Stem("râlaient"), "râl" );
	deepEqual( Stem("ralentie"), "ralent" );
	deepEqual( Stem("ralentir"), "ralent" );
	deepEqual( Stem("ralentissant"), "ralent" );
	deepEqual( Stem("ralentit"), "ralent" );
	deepEqual( Stem("ralliait"), "ralli" );
	deepEqual( Stem("rallier"), "ralli" );
	deepEqual( Stem("ralluma"), "rallum" );
	deepEqual( Stem("ralph"), "ralph" );
	deepEqual( Stem("ramassa"), "ramass" );
	deepEqual( Stem("ramassaient"), "ramass" );
	deepEqual( Stem("ramassait"), "ramass" );
	deepEqual( Stem("ramasse"), "ram" );
	deepEqual( Stem("ramassé"), "ramass" );
	deepEqual( Stem("ramasser"), "ramass" );
	deepEqual( Stem("ramasseraient"), "ramass" );
	deepEqual( Stem("ramassés"), "ramass" );
	deepEqual( Stem("ramassis"), "ramass" );
	deepEqual( Stem("ramayana"), "ramayan" );
	deepEqual( Stem("rambarde"), "rambard" );
	deepEqual( Stem("rambo"), "rambo" );
	deepEqual( Stem("rame"), "ram" );
	deepEqual( Stem("ramena"), "ramen" );
	deepEqual( Stem("ramenait"), "ramen" );
	deepEqual( Stem("ramenant"), "ramen" );
	deepEqual( Stem("ramener"), "ramen" );
	deepEqual( Stem("rames"), "ram" );
	deepEqual( Stem("rameurs"), "rameur" );
	deepEqual( Stem("ramifiant"), "ramifi" );
	deepEqual( Stem("ramifications"), "ramif" );
	deepEqual( Stem("ramifiées"), "ramifi" );
	deepEqual( Stem("rampant"), "ramp" );
	deepEqual( Stem("rampe"), "ramp" );
	deepEqual( Stem("rampes"), "ramp" );
	deepEqual( Stem("ramure"), "ramur" );
	deepEqual( Stem("ramures"), "ramur" );
	deepEqual( Stem("ranchos"), "ranchos" );
	deepEqual( Stem("rancune"), "rancun" );
	deepEqual( Stem("rancunier"), "rancuni" );
	deepEqual( Stem("rang"), "rang" );
	deepEqual( Stem("rangé"), "rang" );
	deepEqual( Stem("rangea"), "rang" );
	deepEqual( Stem("rangeait"), "rang" );
	deepEqual( Stem("rangée"), "rang" );
	deepEqual( Stem("rangées"), "rang" );
	deepEqual( Stem("ranger"), "rang" );
	deepEqual( Stem("rangerait"), "rang" );
	deepEqual( Stem("rangèrent"), "rang" );
	deepEqual( Stem("ranges"), "rang" );
	deepEqual( Stem("rangés"), "rang" );
	deepEqual( Stem("rangoon"), "rangoon" );
	deepEqual( Stem("rangs"), "rang" );
	deepEqual( Stem("ranima"), "ranim" );
	deepEqual( Stem("ranimé"), "ranim" );
	deepEqual( Stem("ranimer"), "ranim" );
	deepEqual( Stem("ranimèrent"), "ranim" );
	deepEqual( Stem("ranuce"), "ranuc" );
	deepEqual( Stem("rapacité"), "rapac" );
	deepEqual( Stem("rapatrier"), "rapatri" );
	deepEqual( Stem("râpé"), "râp" );
	deepEqual( Stem("râpés"), "râp" );
	deepEqual( Stem("rapide"), "rapid" );
	deepEqual( Stem("rapidement"), "rapid" );
	deepEqual( Stem("rapides"), "rapid" );
	deepEqual( Stem("rapidité"), "rapid" );
	deepEqual( Stem("rappela"), "rappel" );
	deepEqual( Stem("rappelaient"), "rappel" );
	deepEqual( Stem("rappelait"), "rappel" );
	deepEqual( Stem("rappelant"), "rappel" );
	deepEqual( Stem("rappelât"), "rappel" );
	deepEqual( Stem("rappelé"), "rappel" );
	deepEqual( Stem("rappelée"), "rappel" );
	deepEqual( Stem("rappeler"), "rappel" );
	deepEqual( Stem("rappelèrent"), "rappel" );
	deepEqual( Stem("rappelés"), "rappel" );
	deepEqual( Stem("rappelez"), "rappel" );
	deepEqual( Stem("rappelle"), "rappel" );
	deepEqual( Stem("rappellent"), "rappellent" );
	deepEqual( Stem("rappellera"), "rappel" );
	deepEqual( Stem("rappellerai"), "rappel" );
	deepEqual( Stem("rappellerais"), "rappel" );
	deepEqual( Stem("rappellerait"), "rappel" );
	deepEqual( Stem("rappellerez"), "rappel" );
	deepEqual( Stem("rapport"), "rapport" );
	deepEqual( Stem("rapporta"), "rapport" );
	deepEqual( Stem("rapportaient"), "rapport" );
	deepEqual( Stem("rapportait"), "rapport" );
	deepEqual( Stem("rapportant"), "rapport" );
	deepEqual( Stem("rapportât"), "rapport" );
	deepEqual( Stem("rapporte"), "rapport" );
	deepEqual( Stem("rapporté"), "rapport" );
	deepEqual( Stem("rapportée"), "rapport" );
	deepEqual( Stem("rapportées"), "rapport" );
	deepEqual( Stem("rapporter"), "rapport" );
	deepEqual( Stem("rapporterait"), "rapport" );
	deepEqual( Stem("rapportèrent"), "rapport" );
	deepEqual( Stem("rapporterons"), "rapport" );
	deepEqual( Stem("rapportes"), "rapport" );
	deepEqual( Stem("rapporteur"), "rapporteur" );
	deepEqual( Stem("rapports"), "rapport" );
	deepEqual( Stem("rapprocha"), "rapproch" );
	deepEqual( Stem("rapprochaient"), "rapproch" );
	deepEqual( Stem("rapprochait"), "rapproch" );
	deepEqual( Stem("rapprochant"), "rapproch" );
	deepEqual( Stem("rapproche"), "rapproch" );
	deepEqual( Stem("rapproché"), "rapproch" );
	deepEqual( Stem("rapprochées"), "rapproch" );
	deepEqual( Stem("rapprocher"), "rapproch" );
	deepEqual( Stem("rapprocherait"), "rapproch" );
	deepEqual( Stem("rapprochèrent"), "rapproch" );
	deepEqual( Stem("rapprochés"), "rapproch" );
	deepEqual( Stem("raquettes"), "raquet" );
	deepEqual( Stem("rare"), "rar" );
	deepEqual( Stem("raréfiaient"), "raréfi" );
	deepEqual( Stem("rarement"), "rar" );
	deepEqual( Stem("rares"), "rar" );
	deepEqual( Stem("ras"), "ras" );
	deepEqual( Stem("rasant"), "ras" );
	deepEqual( Stem("rasé"), "ras" );
	deepEqual( Stem("rasée"), "ras" );
	deepEqual( Stem("rasées"), "ras" );
	deepEqual( Stem("raser"), "ras" );
	deepEqual( Stem("raserait"), "ras" );
	deepEqual( Stem("rassasié"), "rassasi" );
	deepEqual( Stem("rassasiée"), "rassasi" );
	deepEqual( Stem("rassasier"), "rassasi" );
	deepEqual( Stem("rassemblait"), "rassembl" );
	deepEqual( Stem("rassemblé"), "rassembl" );
	deepEqual( Stem("rassembler"), "rassembl" );
	deepEqual( Stem("rassemblés"), "rassembl" );
	deepEqual( Stem("rasseoir"), "rasseoir" );
	deepEqual( Stem("rasséréna"), "rasséren" );
	deepEqual( Stem("rasséréner"), "rasséren" );
	deepEqual( Stem("rassi"), "rass" );
	deepEqual( Stem("rassit"), "rass" );
	deepEqual( Stem("rassura"), "rassur" );
	deepEqual( Stem("rassuraient"), "rassur" );
	deepEqual( Stem("rassurait"), "rassur" );
	deepEqual( Stem("rassure"), "rassur" );
	deepEqual( Stem("rassuré"), "rassur" );
	deepEqual( Stem("rassurée"), "rassur" );
	deepEqual( Stem("rassurer"), "rassur" );
	deepEqual( Stem("rassurez"), "rassur" );
	deepEqual( Stem("ratine"), "ratin" );
	deepEqual( Stem("rationnelle"), "rationnel" );
	deepEqual( Stem("rationnellement"), "rationnel" );
	deepEqual( Stem("rats"), "rat" );
	deepEqual( Stem("rattachait"), "rattach" );
	deepEqual( Stem("ravages"), "ravag" );
	deepEqual( Stem("ravaler"), "raval" );
	deepEqual( Stem("ravenne"), "raven" );
	deepEqual( Stem("raversi"), "ravers" );
	deepEqual( Stem("ravi"), "rav" );
	deepEqual( Stem("ravie"), "rav" );
	deepEqual( Stem("ravins"), "ravin" );
	deepEqual( Stem("ravir"), "rav" );
	deepEqual( Stem("ravis"), "rav" );
	deepEqual( Stem("raviser"), "ravis" );
	deepEqual( Stem("ravissait"), "rav" );
	deepEqual( Stem("ravissant"), "rav" );
	deepEqual( Stem("ravissante"), "rav" );
	deepEqual( Stem("ravissantes"), "rav" );
	deepEqual( Stem("ravissants"), "rav" );
	deepEqual( Stem("ravissement"), "rav" );
	deepEqual( Stem("ravisseur"), "ravisseur" );
	deepEqual( Stem("ravisseurs"), "ravisseur" );
	deepEqual( Stem("ravit"), "rav" );
	deepEqual( Stem("ravoir"), "ravoir" );
	deepEqual( Stem("rayées"), "rai" );
	deepEqual( Stem("raynal"), "raynal" );
	deepEqual( Stem("rayon"), "rayon" );
	deepEqual( Stem("rayonna"), "rayon" );
	deepEqual( Stem("rayons"), "rayon" );
	deepEqual( Stem("razori"), "razor" );
	deepEqual( Stem("réaction"), "réaction" );
	deepEqual( Stem("reading"), "reading" );
	deepEqual( Stem("réal"), "réal" );
	deepEqual( Stem("réalisable"), "réalis" );
	deepEqual( Stem("réaliser"), "réalis" );
	deepEqual( Stem("réaliste"), "réalist" );
	deepEqual( Stem("réalité"), "réalit" );
	deepEqual( Stem("réapprovisionner"), "réapprovision" );
	deepEqual( Stem("rébarbatif"), "rébarb" );
	deepEqual( Stem("rébarbative"), "rébarb" );
	deepEqual( Stem("rebâtir"), "rebât" );
	deepEqual( Stem("rebelle"), "rebel" );
	deepEqual( Stem("rebelles"), "rebel" );
	deepEqual( Stem("rébellion"), "rébellion" );
	deepEqual( Stem("récapitulant"), "récapitul" );
	deepEqual( Stem("récemment"), "récent" );
	deepEqual( Stem("récente"), "récent" );
	deepEqual( Stem("réception"), "récept" );
	deepEqual( Stem("réceptions"), "récept" );
	deepEqual( Stem("recette"), "recet" );
	deepEqual( Stem("recettes"), "recet" );
	deepEqual( Stem("recevaient"), "recev" );
	deepEqual( Stem("recevait"), "recev" );
	deepEqual( Stem("recevant"), "recev" );
	deepEqual( Stem("recevez"), "recev" );
	deepEqual( Stem("receviez"), "recev" );
	deepEqual( Stem("recevoir"), "recevoir" );
	deepEqual( Stem("recevra"), "recevr" );
	deepEqual( Stem("recevrai"), "recevr" );
	deepEqual( Stem("recevrait"), "recevr" );
	deepEqual( Stem("recevrez"), "recevr" );
	deepEqual( Stem("recharger"), "recharg" );
	deepEqual( Stem("rechargez"), "recharg" );
	deepEqual( Stem("réchauffé"), "réchauff" );
	deepEqual( Stem("rechercha"), "recherch" );
	deepEqual( Stem("recherchait"), "recherch" );
	deepEqual( Stem("recherche"), "recherch" );
	deepEqual( Stem("recherché"), "recherch" );
	deepEqual( Stem("rechercher"), "recherch" );
	deepEqual( Stem("rechercheront"), "recherch" );
	deepEqual( Stem("recherches"), "recherch" );
	deepEqual( Stem("recherchés"), "recherch" );
	deepEqual( Stem("rechignant"), "rechign" );
	deepEqual( Stem("rechigné"), "rechign" );
	deepEqual( Stem("rechute"), "rechut" );
	deepEqual( Stem("récidive"), "récid" );
	deepEqual( Stem("reciproquement"), "reciproqu" );
	deepEqual( Stem("réciproquement"), "réciproqu" );
	deepEqual( Stem("recit"), "rec" );
	deepEqual( Stem("récit"), "rec" );
	deepEqual( Stem("récita"), "récit" );
	deepEqual( Stem("récitaient"), "récit" );
	deepEqual( Stem("récitait"), "récit" );
	deepEqual( Stem("récitant"), "récit" );
	deepEqual( Stem("récitatif"), "récit" );
	deepEqual( Stem("récitation"), "récit" );
	deepEqual( Stem("récite"), "récit" );
	deepEqual( Stem("récité"), "récit" );
	deepEqual( Stem("réciter"), "récit" );
	deepEqual( Stem("réciterai"), "récit" );
	deepEqual( Stem("réciterez"), "récit" );
	deepEqual( Stem("récits"), "récit" );
	deepEqual( Stem("réclamait"), "réclam" );
	deepEqual( Stem("réclame"), "réclam" );
	deepEqual( Stem("réclamée"), "réclam" );
	deepEqual( Stem("réclamer"), "réclam" );
	deepEqual( Stem("réclamés"), "réclam" );
	deepEqual( Stem("reclus"), "reclus" );
	deepEqual( Stem("réclusion"), "réclus" );
	deepEqual( Stem("reçois"), "reçois" );
	deepEqual( Stem("reçoit"), "reçoit" );
	deepEqual( Stem("reçoive"), "reçoiv" );
	deepEqual( Stem("reçoivent"), "reçoivent" );
	deepEqual( Stem("récolte"), "récolt" );
	deepEqual( Stem("recommanda"), "recommand" );
	deepEqual( Stem("recommandait"), "recommand" );
	deepEqual( Stem("recommandant"), "recommand" );
	deepEqual( Stem("recommandation"), "recommand" );
	deepEqual( Stem("recommandations"), "recommand" );
	deepEqual( Stem("recommande"), "recommand" );
	deepEqual( Stem("recommandé"), "recommand" );
	deepEqual( Stem("recommander"), "recommand" );
	deepEqual( Stem("recommandés"), "recommand" );
	deepEqual( Stem("recommandez"), "recommand" );
	deepEqual( Stem("recommença"), "recommenc" );
	deepEqual( Stem("recommençaient"), "recommenc" );
	deepEqual( Stem("recommençait"), "recommenc" );
	deepEqual( Stem("recommençât"), "recommenc" );
	deepEqual( Stem("recommence"), "recomment" );
	deepEqual( Stem("recommencé"), "recommenc" );
	deepEqual( Stem("recommencer"), "recommenc" );
	deepEqual( Stem("recommencerai"), "recommenc" );
	deepEqual( Stem("recommenceraient"), "recommenc" );
	deepEqual( Stem("recommencerait"), "recommenc" );
	deepEqual( Stem("recommencèrent"), "recommenc" );
	deepEqual( Stem("recommencez"), "recommenc" );
	deepEqual( Stem("récompense"), "récompens" );
	deepEqual( Stem("récompensé"), "récompens" );
	deepEqual( Stem("récompensée"), "récompens" );
	deepEqual( Stem("recomptait"), "recompt" );
	deepEqual( Stem("réconciliation"), "réconcili" );
	deepEqual( Stem("réconcilie"), "réconcil" );
	deepEqual( Stem("reconduire"), "reconduir" );
	deepEqual( Stem("reconduisait"), "reconduis" );
	deepEqual( Stem("reconduisant"), "reconduis" );
	deepEqual( Stem("reconduisit"), "reconduis" );
	deepEqual( Stem("reconduit"), "reconduit" );
	deepEqual( Stem("reconnais"), "recon" );
	deepEqual( Stem("reconnaissable"), "reconnaiss" );
	deepEqual( Stem("reconnaissaient"), "reconnaiss" );
	deepEqual( Stem("reconnaissait"), "reconnaiss" );
	deepEqual( Stem("reconnaissance"), "reconnaiss" );
	deepEqual( Stem("reconnaissant"), "reconnaiss" );
	deepEqual( Stem("reconnaisse"), "reconnaiss" );
	deepEqual( Stem("reconnaissent"), "reconnaissent" );
	deepEqual( Stem("reconnaissez"), "reconnaiss" );
	deepEqual( Stem("reconnaît"), "reconnaît" );
	deepEqual( Stem("reconnaîtra"), "reconnaîtr" );
	deepEqual( Stem("reconnaître"), "reconnaîtr" );
	deepEqual( Stem("reconnu"), "reconnu" );
	deepEqual( Stem("reconnue"), "reconnu" );
	deepEqual( Stem("reconnurent"), "reconnurent" );
	deepEqual( Stem("reconnus"), "reconnus" );
	deepEqual( Stem("reconnut"), "reconnut" );
	deepEqual( Stem("reconquérir"), "reconquer" );
	deepEqual( Stem("reconquerrait"), "reconquerr" );
	deepEqual( Stem("reconquis"), "reconqu" );
	deepEqual( Stem("recoucher"), "recouch" );
	deepEqual( Stem("recoudre"), "recoudr" );
	deepEqual( Stem("recourir"), "recour" );
	deepEqual( Stem("recours"), "recour" );
	deepEqual( Stem("recouvert"), "recouvert" );
	deepEqual( Stem("recouverte"), "recouvert" );
	deepEqual( Stem("recouverts"), "recouvert" );
	deepEqual( Stem("recouvra"), "recouvr" );
	deepEqual( Stem("recouvrait"), "recouvr" );
	deepEqual( Stem("recouvrée"), "recouvr" );
	deepEqual( Stem("recouvrer"), "recouvr" );
	deepEqual( Stem("recouvrir"), "recouvr" );
	deepEqual( Stem("recouvrît"), "recouvr" );
	deepEqual( Stem("récréation"), "récréat" );
	deepEqual( Stem("récréations"), "récréat" );
	deepEqual( Stem("récriait"), "récri" );
	deepEqual( Stem("récrier"), "récri" );
	deepEqual( Stem("récrièrent"), "récri" );
	deepEqual( Stem("recrues"), "recru" );
	deepEqual( Stem("recrute"), "recrut" );
	deepEqual( Stem("recruter"), "recrut" );
	deepEqual( Stem("rectifia"), "rectifi" );
	deepEqual( Stem("rectifiait"), "rectifi" );
	deepEqual( Stem("rectifier"), "rectifi" );
	deepEqual( Stem("rectiligne"), "rectilign" );
	deepEqual( Stem("reçu"), "reçu" );
	deepEqual( Stem("reçue"), "reçu" );
	deepEqual( Stem("recueil"), "recueil" );
	deepEqual( Stem("recueillent"), "recueillent" );
	deepEqual( Stem("recueilli"), "recueil" );
	deepEqual( Stem("recueillir"), "recueil" );
	deepEqual( Stem("recueillirent"), "recueil" );
	deepEqual( Stem("reçues"), "reçu" );
	deepEqual( Stem("recula"), "recul" );
	deepEqual( Stem("reculant"), "recul" );
	deepEqual( Stem("recule"), "recul" );
	deepEqual( Stem("reculé"), "recul" );
	deepEqual( Stem("reculer"), "recul" );
	deepEqual( Stem("reçurent"), "reçurent" );
	deepEqual( Stem("reçus"), "reçus" );
	deepEqual( Stem("reçut"), "reçut" );
	deepEqual( Stem("reçût"), "reçût" );
	deepEqual( Stem("rédacteur"), "rédacteur" );
	deepEqual( Stem("rédacteurs"), "rédacteur" );
	deepEqual( Stem("rédaction"), "rédact" );
	deepEqual( Stem("redemande"), "redemand" );
	deepEqual( Stem("redescend"), "redescend" );
	deepEqual( Stem("redescendant"), "redescend" );
	deepEqual( Stem("redescendit"), "redescend" );
	deepEqual( Stem("redescendre"), "redescendr" );
	deepEqual( Stem("redescendue"), "redescendu" );
	deepEqual( Stem("redevenaient"), "redeven" );
	deepEqual( Stem("redevenait"), "redeven" );
	deepEqual( Stem("redevenant"), "redeven" );
	deepEqual( Stem("redevenu"), "redevenu" );
	deepEqual( Stem("redevenue"), "redevenu" );
	deepEqual( Stem("redevint"), "redevint" );
	deepEqual( Stem("rédigea"), "rédig" );
	deepEqual( Stem("rédigée"), "rédig" );
	deepEqual( Stem("rédigerait"), "rédig" );
	deepEqual( Stem("redingote"), "redingot" );
	deepEqual( Stem("redingotes"), "redingot" );
	deepEqual( Stem("redira"), "red" );
	deepEqual( Stem("redits"), "redit" );
	deepEqual( Stem("redonner"), "redon" );
	deepEqual( Stem("redoubla"), "redoubl" );
	deepEqual( Stem("redoublaient"), "redoubl" );
	deepEqual( Stem("redoublait"), "redoubl" );
	deepEqual( Stem("redoublant"), "redoubl" );
	deepEqual( Stem("redouble"), "redoubl" );
	deepEqual( Stem("redoublé"), "redoubl" );
	deepEqual( Stem("redoublement"), "redoubl" );
	deepEqual( Stem("redoubler"), "redoubl" );
	deepEqual( Stem("redoublerait"), "redoubl" );
	deepEqual( Stem("redoublèrent"), "redoubl" );
	deepEqual( Stem("redoutables"), "redout" );
	deepEqual( Stem("redoutaient"), "redout" );
	deepEqual( Stem("redoutait"), "redout" );
	deepEqual( Stem("redoute"), "redout" );
	deepEqual( Stem("redouté"), "redout" );
	deepEqual( Stem("redouter"), "redout" );
	deepEqual( Stem("redoutons"), "redouton" );
	deepEqual( Stem("redressait"), "redress" );
	deepEqual( Stem("redresser"), "redress" );
	deepEqual( Stem("réduiras"), "réduir" );
	deepEqual( Stem("réduire"), "réduir" );
	deepEqual( Stem("réduirons"), "réduiron" );
	deepEqual( Stem("réduisait"), "réduis" );
	deepEqual( Stem("réduisent"), "réduisent" );
	deepEqual( Stem("réduisit"), "réduis" );
	deepEqual( Stem("réduit"), "réduit" );
	deepEqual( Stem("réduite"), "réduit" );
	deepEqual( Stem("réduites"), "réduit" );
	deepEqual( Stem("réduits"), "réduit" );
	deepEqual( Stem("réel"), "réel" );
	deepEqual( Stem("réélection"), "réélect" );
	deepEqual( Stem("réelle"), "réel" );
	deepEqual( Stem("réellement"), "réel" );
	deepEqual( Stem("réelles"), "réel" );
	deepEqual( Stem("réels"), "réel" );
	deepEqual( Stem("réexpédié"), "réexpédi" );
	deepEqual( Stem("refaire"), "refair" );
	deepEqual( Stem("refaisait"), "refais" );
	deepEqual( Stem("refaites"), "refait" );
	deepEqual( Stem("réfectoire"), "réfectoir" );
	deepEqual( Stem("références"), "référent" );
	deepEqual( Stem("referma"), "referm" );
	deepEqual( Stem("refermé"), "referm" );
	deepEqual( Stem("refermée"), "referm" );
	deepEqual( Stem("refermer"), "referm" );
	deepEqual( Stem("réfléchi"), "réflech" );
	deepEqual( Stem("réfléchir"), "réflech" );
	deepEqual( Stem("réfléchirez"), "réflech" );
	deepEqual( Stem("réfléchissait"), "réflech" );
	deepEqual( Stem("réfléchissant"), "réflech" );
	deepEqual( Stem("réfléchissez"), "réflech" );
	deepEqual( Stem("réfléchit"), "réflech" );
	deepEqual( Stem("réfléchît"), "réflech" );
	deepEqual( Stem("reflet"), "reflet" );
	deepEqual( Stem("reflétait"), "reflet" );
	deepEqual( Stem("reflète"), "reflet" );
	deepEqual( Stem("reflets"), "reflet" );
	deepEqual( Stem("réflexion"), "réflexion" );
	deepEqual( Stem("réflexions"), "réflex" );
	deepEqual( Stem("reflua"), "reflu" );
	deepEqual( Stem("refluait"), "reflu" );
	deepEqual( Stem("reform"), "reform" );
	deepEqual( Stem("refouler"), "refoul" );
	deepEqual( Stem("réfractaire"), "réfractair" );
	deepEqual( Stem("réfractaires"), "réfractair" );
	deepEqual( Stem("refrain"), "refrain" );
	deepEqual( Stem("refrains"), "refrain" );
	deepEqual( Stem("refroidies"), "refroid" );
	deepEqual( Stem("refroidir"), "refroid" );
	deepEqual( Stem("refuge"), "refug" );
	deepEqual( Stem("réfugia"), "réfugi" );
	deepEqual( Stem("réfugiait"), "réfugi" );
	deepEqual( Stem("réfugiant"), "réfugi" );
	deepEqual( Stem("réfugie"), "réfug" );
	deepEqual( Stem("réfugié"), "réfugi" );
	deepEqual( Stem("réfugiée"), "réfugi" );
	deepEqual( Stem("réfugier"), "réfugi" );
	deepEqual( Stem("réfugieront"), "réfugi" );
	deepEqual( Stem("réfugiés"), "réfugi" );
	deepEqual( Stem("réfugiez"), "réfug" );
	deepEqual( Stem("refus"), "refus" );
	deepEqual( Stem("refusa"), "refus" );
	deepEqual( Stem("refusait"), "refus" );
	deepEqual( Stem("refusant"), "refus" );
	deepEqual( Stem("refuse"), "refus" );
	deepEqual( Stem("refusé"), "refus" );
	deepEqual( Stem("refusée"), "refus" );
	deepEqual( Stem("refusées"), "refus" );
	deepEqual( Stem("refusent"), "refusent" );
	deepEqual( Stem("refuser"), "refus" );
	deepEqual( Stem("refuserait"), "refus" );
	deepEqual( Stem("refuseriez"), "refus" );
	deepEqual( Stem("refusez"), "refus" );
	deepEqual( Stem("refusiez"), "refus" );
	deepEqual( Stem("réfutés"), "réfut" );
	deepEqual( Stem("regagna"), "regagn" );
	deepEqual( Stem("regagnaient"), "regagn" );
	deepEqual( Stem("regagnait"), "regagn" );
	deepEqual( Stem("regagné"), "regagn" );
	deepEqual( Stem("regagner"), "regagn" );
	deepEqual( Stem("régalait"), "régal" );
	deepEqual( Stem("regard"), "regard" );
	deepEqual( Stem("regarda"), "regard" );
	deepEqual( Stem("regardaient"), "regard" );
	deepEqual( Stem("regardais"), "regard" );
	deepEqual( Stem("regardait"), "regard" );
	deepEqual( Stem("regardant"), "regard" );
	deepEqual( Stem("regarde"), "regard" );
	deepEqual( Stem("regardé"), "regard" );
	deepEqual( Stem("regardée"), "regard" );
	deepEqual( Stem("regardent"), "regardent" );
	deepEqual( Stem("regarder"), "regard" );
	deepEqual( Stem("regardera"), "regard" );
	deepEqual( Stem("regarderai"), "regard" );
	deepEqual( Stem("regardèrent"), "regard" );
	deepEqual( Stem("regarderez"), "regard" );
	deepEqual( Stem("regarderont"), "regard" );
	deepEqual( Stem("regardés"), "regard" );
	deepEqual( Stem("regardez"), "regard" );
	deepEqual( Stem("regards"), "regard" );
	deepEqual( Stem("régate"), "régat" );
	deepEqual( Stem("régénérateur"), "régéner" );
	deepEqual( Stem("régénérer"), "régéner" );
	deepEqual( Stem("regent"), "regent" );
	deepEqual( Stem("régent"), "régent" );
	deepEqual( Stem("regimbait"), "regimb" );
	deepEqual( Stem("régime"), "régim" );
	deepEqual( Stem("régiment"), "reg" );
	deepEqual( Stem("régiments"), "reg" );
	deepEqual( Stem("régimes"), "régim" );
	deepEqual( Stem("région"), "région" );
	deepEqual( Stem("régions"), "région" );
	deepEqual( Stem("registre"), "registr" );
	deepEqual( Stem("registres"), "registr" );
	deepEqual( Stem("régla"), "regl" );
	deepEqual( Stem("réglant"), "regl" );
	deepEqual( Stem("règle"), "regl" );
	deepEqual( Stem("réglé"), "regl" );
	deepEqual( Stem("réglée"), "regl" );
	deepEqual( Stem("règlement"), "regl" );
	deepEqual( Stem("réglementaire"), "réglementair" );
	deepEqual( Stem("réglementaires"), "réglementair" );
	deepEqual( Stem("réglementation"), "réglement" );
	deepEqual( Stem("réglementée"), "réglement" );
	deepEqual( Stem("règlements"), "regl" );
	deepEqual( Stem("régler"), "regl" );
	deepEqual( Stem("réglera"), "regl" );
	deepEqual( Stem("règles"), "regl" );
	deepEqual( Stem("réglés"), "regl" );
	deepEqual( Stem("régna"), "regn" );
	deepEqual( Stem("régnaient"), "regn" );
	deepEqual( Stem("régnait"), "regn" );
	deepEqual( Stem("régnant"), "regn" );
	deepEqual( Stem("régnante"), "regn" );
	deepEqual( Stem("règne"), "regn" );
	deepEqual( Stem("régné"), "regn" );
	deepEqual( Stem("règnent"), "règnent" );
	deepEqual( Stem("régner"), "regn" );
	deepEqual( Stem("régnera"), "regn" );
	deepEqual( Stem("régnez"), "regn" );
	deepEqual( Stem("régnons"), "régnon" );
	deepEqual( Stem("regorgeant"), "regorg" );
	deepEqual( Stem("regorgent"), "regorgent" );
	deepEqual( Stem("regret"), "regret" );
	deepEqual( Stem("regrets"), "regret" );
	deepEqual( Stem("regrettaient"), "regret" );
	deepEqual( Stem("regrettait"), "regret" );
	deepEqual( Stem("regrette"), "regret" );
	deepEqual( Stem("regrettée"), "regret" );
	deepEqual( Stem("regrettées"), "regret" );
	deepEqual( Stem("regretter"), "regret" );
	deepEqual( Stem("regretterais"), "regret" );
	deepEqual( Stem("regretteriez"), "regret" );
	deepEqual( Stem("regrettez"), "regret" );
	deepEqual( Stem("régularisé"), "régularis" );
	deepEqual( Stem("régularité"), "régular" );
	deepEqual( Stem("régulateur"), "régul" );
	deepEqual( Stem("régulier"), "réguli" );
	deepEqual( Stem("régulière"), "réguli" );
	deepEqual( Stem("régulièrement"), "réguli" );
	deepEqual( Stem("rehausse"), "rehauss" );
	deepEqual( Stem("rein"), "rein" );
	deepEqual( Stem("reina"), "rein" );
	deepEqual( Stem("reine"), "rein" );
	deepEqual( Stem("reins"), "rein" );
	deepEqual( Stem("réintégré"), "réintegr" );
	deepEqual( Stem("réintégrés"), "réintegr" );
	deepEqual( Stem("réitérée"), "réiter" );
	deepEqual( Stem("rejaillir"), "rejaill" );
	deepEqual( Stem("rejeta"), "rejet" );
	deepEqual( Stem("rejeté"), "rejet" );
	deepEqual( Stem("rejettera"), "rejet" );
	deepEqual( Stem("rejoignait"), "rejoign" );
	deepEqual( Stem("rejoignant"), "rejoign" );
	deepEqual( Stem("rejoignent"), "rejoignent" );
	deepEqual( Stem("rejoignirent"), "rejoign" );
	deepEqual( Stem("rejoignit"), "rejoign" );
	deepEqual( Stem("rejoindra"), "rejoindr" );
	deepEqual( Stem("rejoindre"), "rejoindr" );
	deepEqual( Stem("rejoint"), "rejoint" );
	deepEqual( Stem("réjouie"), "réjou" );
	deepEqual( Stem("réjouir"), "réjou" );
	deepEqual( Stem("réjouirez"), "réjou" );
	deepEqual( Stem("réjouissait"), "réjou" );
	deepEqual( Stem("réjouissances"), "réjouiss" );
	deepEqual( Stem("réjouit"), "réjou" );
	deepEqual( Stem("relâchait"), "relâch" );
	deepEqual( Stem("relâche"), "relâch" );
	deepEqual( Stem("relâché"), "relâch" );
	deepEqual( Stem("relâchées"), "relâch" );
	deepEqual( Stem("relâcher"), "relâch" );
	deepEqual( Stem("relais"), "rel" );
	deepEqual( Stem("relancer"), "relanc" );
	deepEqual( Stem("relatif"), "relat" );
	deepEqual( Stem("relatifs"), "relat" );
	deepEqual( Stem("relation"), "relat" );
	deepEqual( Stem("relations"), "relat" );
	deepEqual( Stem("relative"), "relat" );
	deepEqual( Stem("relativement"), "relat" );
	deepEqual( Stem("relatives"), "relat" );
	deepEqual( Stem("relégué"), "relégu" );
	deepEqual( Stem("reléguée"), "relégu" );
	deepEqual( Stem("reléguer"), "relégu" );
	deepEqual( Stem("releva"), "relev" );
	deepEqual( Stem("relevaient"), "relev" );
	deepEqual( Stem("relevait"), "relev" );
	deepEqual( Stem("relevant"), "relev" );
	deepEqual( Stem("relevé"), "relev" );
	deepEqual( Stem("relevée"), "relev" );
	deepEqual( Stem("relevées"), "relev" );
	deepEqual( Stem("relèvent"), "relèvent" );
	deepEqual( Stem("relever"), "relev" );
	deepEqual( Stem("relèveras"), "relev" );
	deepEqual( Stem("relié"), "reli" );
	deepEqual( Stem("reliée"), "reli" );
	deepEqual( Stem("reliées"), "reli" );
	deepEqual( Stem("relief"), "relief" );
	deepEqual( Stem("reliefs"), "relief" );
	deepEqual( Stem("relier"), "reli" );
	deepEqual( Stem("reliés"), "reli" );
	deepEqual( Stem("religieuse"), "religi" );
	deepEqual( Stem("religieusement"), "religi" );
	deepEqual( Stem("religieuses"), "religi" );
	deepEqual( Stem("religieux"), "religi" );
	deepEqual( Stem("religion"), "religion" );
	deepEqual( Stem("religions"), "relig" );
	deepEqual( Stem("religiosité"), "religios" );
	deepEqual( Stem("reliquat"), "reliquat" );
	deepEqual( Stem("relique"), "reliqu" );
	deepEqual( Stem("relire"), "relir" );
	deepEqual( Stem("relis"), "rel" );
	deepEqual( Stem("relisais"), "relis" );
	deepEqual( Stem("relisait"), "relis" );
	deepEqual( Stem("relise"), "relis" );
	deepEqual( Stem("relu"), "relu" );
	deepEqual( Stem("relut"), "relut" );
	deepEqual( Stem("rem"), "rem" );
	deepEqual( Stem("remariais"), "remari" );
	deepEqual( Stem("remarqua"), "remarqu" );
	deepEqual( Stem("remarquable"), "remarqu" );
	deepEqual( Stem("remarquablement"), "remarqu" );
	deepEqual( Stem("remarquables"), "remarqu" );
	deepEqual( Stem("remarquaient"), "remarqu" );
	deepEqual( Stem("remarquait"), "remarqu" );
	deepEqual( Stem("remarquant"), "remarqu" );
	deepEqual( Stem("remarquâtes"), "remarqu" );
	deepEqual( Stem("remarque"), "remarqu" );
	deepEqual( Stem("remarqué"), "remarqu" );
	deepEqual( Stem("remarquée"), "remarqu" );
	deepEqual( Stem("remarquer"), "remarqu" );
	deepEqual( Stem("remarquera"), "remarqu" );
	deepEqual( Stem("remarquèrent"), "remarqu" );
	deepEqual( Stem("remarquerez"), "remarqu" );
	deepEqual( Stem("remarques"), "remarqu" );
	deepEqual( Stem("remarqués"), "remarqu" );
	deepEqual( Stem("remarquez"), "remarqu" );
	deepEqual( Stem("rembourse"), "rembours" );
	deepEqual( Stem("remboursement"), "rembours" );
	deepEqual( Stem("rembourser"), "rembours" );
	deepEqual( Stem("rembrunit"), "rembrun" );
	deepEqual( Stem("remède"), "remed" );
	deepEqual( Stem("remèdes"), "remed" );
	deepEqual( Stem("remédier"), "remédi" );
	deepEqual( Stem("remercia"), "remerci" );
	deepEqual( Stem("remerciait"), "remerci" );
	deepEqual( Stem("remerciant"), "remerci" );
	deepEqual( Stem("remercie"), "remerc" );
	deepEqual( Stem("remercié"), "remerci" );
	deepEqual( Stem("remerciée"), "remerci" );
	deepEqual( Stem("remerciements"), "remerci" );
	deepEqual( Stem("remercier"), "remerci" );
	deepEqual( Stem("remercierais"), "remerci" );
	deepEqual( Stem("remercierait"), "remerci" );
	deepEqual( Stem("remercîment"), "remercî" );
	deepEqual( Stem("remercîments"), "remercî" );
	deepEqual( Stem("remet"), "remet" );
	deepEqual( Stem("remets"), "remet" );
	deepEqual( Stem("remettait"), "remet" );
	deepEqual( Stem("remettant"), "remet" );
	deepEqual( Stem("remette"), "remet" );
	deepEqual( Stem("remettent"), "remettent" );
	deepEqual( Stem("remettra"), "remettr" );
	deepEqual( Stem("remettrai"), "remettr" );
	deepEqual( Stem("remettrais"), "remettr" );
	deepEqual( Stem("remettrait"), "remettr" );
	deepEqual( Stem("remettras"), "remettr" );
	deepEqual( Stem("remettre"), "remettr" );
	deepEqual( Stem("remettrez"), "remettr" );
	deepEqual( Stem("remiers"), "remi" );
	deepEqual( Stem("remirent"), "rem" );
	deepEqual( Stem("remis"), "rem" );
	deepEqual( Stem("remise"), "remis" );
	deepEqual( Stem("remises"), "remis" );
	deepEqual( Stem("rémission"), "rémiss" );
	deepEqual( Stem("remit"), "rem" );
	deepEqual( Stem("remonta"), "remont" );
	deepEqual( Stem("remontait"), "remont" );
	deepEqual( Stem("remontant"), "remont" );
	deepEqual( Stem("remonte"), "remont" );
	deepEqual( Stem("remonté"), "remont" );
	deepEqual( Stem("remontent"), "remontent" );
	deepEqual( Stem("remonter"), "remont" );
	deepEqual( Stem("remonterait"), "remont" );
	deepEqual( Stem("remontez"), "remont" );
	deepEqual( Stem("remontrance"), "remontr" );
	deepEqual( Stem("remontrances"), "remontr" );
	deepEqual( Stem("remontrer"), "remontr" );
	deepEqual( Stem("remords"), "remord" );
	deepEqual( Stem("remorquant"), "remorqu" );
	deepEqual( Stem("remous"), "remous" );
	deepEqual( Stem("rempart"), "rempart" );
	deepEqual( Stem("remparts"), "rempart" );
	deepEqual( Stem("remplaça"), "remplac" );
	deepEqual( Stem("remplaçaient"), "remplac" );
	deepEqual( Stem("remplaçait"), "remplac" );
	deepEqual( Stem("remplace"), "remplac" );
	deepEqual( Stem("remplacé"), "remplac" );
	deepEqual( Stem("remplacée"), "remplac" );
	deepEqual( Stem("remplacement"), "remplac" );
	deepEqual( Stem("remplacer"), "remplac" );
	deepEqual( Stem("remplacera"), "remplac" );
	deepEqual( Stem("remplacés"), "remplac" );
	deepEqual( Stem("rempli"), "rempl" );
	deepEqual( Stem("remplie"), "rempl" );
	deepEqual( Stem("remplies"), "rempl" );
	deepEqual( Stem("remplir"), "rempl" );
	deepEqual( Stem("remplirent"), "rempl" );
	deepEqual( Stem("remplis"), "rempl" );
	deepEqual( Stem("remplissaient"), "rempl" );
	deepEqual( Stem("remplissait"), "rempl" );
	deepEqual( Stem("remplissant"), "rempl" );
	deepEqual( Stem("remplissent"), "rempl" );
	deepEqual( Stem("remplit"), "rempl" );
	deepEqual( Stem("remplumai"), "remplum" );
	deepEqual( Stem("remportant"), "remport" );
	deepEqual( Stem("remporter"), "remport" );
	deepEqual( Stem("remua"), "remu" );
	deepEqual( Stem("remuant"), "remu" );
	deepEqual( Stem("remue"), "remu" );
	deepEqual( Stem("remuée"), "remu" );
	deepEqual( Stem("remuer"), "remu" );
	deepEqual( Stem("remues"), "remu" );
	deepEqual( Stem("rémunération"), "rémuner" );
	deepEqual( Stem("renaissant"), "renaiss" );
	deepEqual( Stem("renaissantes"), "renaiss" );
	deepEqual( Stem("renaître"), "renaîtr" );
	deepEqual( Stem("rênal"), "rênal" );
	deepEqual( Stem("renard"), "renard" );
	deepEqual( Stem("rencontra"), "rencontr" );
	deepEqual( Stem("rencontrai"), "rencontr" );
	deepEqual( Stem("rencontrait"), "rencontr" );
	deepEqual( Stem("rencontrâmes"), "rencontr" );
	deepEqual( Stem("rencontrant"), "rencontr" );
	deepEqual( Stem("rencontrassent"), "rencontr" );
	deepEqual( Stem("rencontrât"), "rencontr" );
	deepEqual( Stem("rencontre"), "rencontr" );
	deepEqual( Stem("rencontré"), "rencontr" );
	deepEqual( Stem("rencontrée"), "rencontr" );
	deepEqual( Stem("rencontrées"), "rencontr" );
	deepEqual( Stem("rencontrent"), "rencontrent" );
	deepEqual( Stem("rencontrer"), "rencontr" );
	deepEqual( Stem("rencontrerai"), "rencontr" );
	deepEqual( Stem("rencontreraient"), "rencontr" );
	deepEqual( Stem("rencontrèrent"), "rencontr" );
	deepEqual( Stem("rencontres"), "rencontr" );
	deepEqual( Stem("rencontrés"), "rencontr" );
	deepEqual( Stem("rend"), "rend" );
	deepEqual( Stem("rendaient"), "rend" );
	deepEqual( Stem("rendait"), "rend" );
	deepEqual( Stem("rendant"), "rend" );
	deepEqual( Stem("rende"), "rend" );
	deepEqual( Stem("rendent"), "rendent" );
	deepEqual( Stem("rendez"), "rend" );
	deepEqual( Stem("rendirent"), "rend" );
	deepEqual( Stem("rendit"), "rend" );
	deepEqual( Stem("rendît"), "rend" );
	deepEqual( Stem("rendra"), "rendr" );
	deepEqual( Stem("rendrai"), "rendr" );
	deepEqual( Stem("rendrait"), "rendr" );
	deepEqual( Stem("rendre"), "rendr" );
	deepEqual( Stem("rendrez"), "rendr" );
	deepEqual( Stem("rendriez"), "rendr" );
	deepEqual( Stem("rendrons"), "rendron" );
	deepEqual( Stem("rendront"), "rendront" );
	deepEqual( Stem("rends"), "rend" );
	deepEqual( Stem("rendu"), "rendu" );
	deepEqual( Stem("rendue"), "rendu" );
	deepEqual( Stem("rendus"), "rendus" );
	deepEqual( Stem("rêne"), "rên" );
	deepEqual( Stem("rené"), "ren" );
	deepEqual( Stem("renfermait"), "renferm" );
	deepEqual( Stem("renfermant"), "renferm" );
	deepEqual( Stem("renferme"), "renferm" );
	deepEqual( Stem("renfermé"), "renferm" );
	deepEqual( Stem("renfermée"), "renferm" );
	deepEqual( Stem("renfermer"), "renferm" );
	deepEqual( Stem("renforcé"), "renforc" );
	deepEqual( Stem("renfort"), "renfort" );
	deepEqual( Stem("renfrogné"), "renfrogn" );
	deepEqual( Stem("reniera"), "reni" );
	deepEqual( Stem("reno"), "reno" );
	deepEqual( Stem("renom"), "renom" );
	deepEqual( Stem("renommé"), "renomm" );
	deepEqual( Stem("renommée"), "renomm" );
	deepEqual( Stem("renonça"), "renonc" );
	deepEqual( Stem("renonçait"), "renonc" );
	deepEqual( Stem("renonce"), "renonc" );
	deepEqual( Stem("renoncé"), "renonc" );
	deepEqual( Stem("renoncer"), "renonc" );
	deepEqual( Stem("renoncera"), "renonc" );
	deepEqual( Stem("renoncerais"), "renonc" );
	deepEqual( Stem("renoncez"), "renonc" );
	deepEqual( Stem("renoué"), "renou" );
	deepEqual( Stem("renouer"), "renou" );
	deepEqual( Stem("renouvela"), "renouvel" );
	deepEqual( Stem("renouvelait"), "renouvel" );
	deepEqual( Stem("renouvelant"), "renouvel" );
	deepEqual( Stem("renouvelé"), "renouvel" );
	deepEqual( Stem("renouvelées"), "renouvel" );
	deepEqual( Stem("renouveler"), "renouvel" );
	deepEqual( Stem("renouvelèrent"), "renouvel" );
	deepEqual( Stem("renouvellement"), "renouvel" );
	deepEqual( Stem("renouvellent"), "renouvellent" );
	deepEqual( Stem("renseignement"), "renseign" );
	deepEqual( Stem("renseignements"), "renseign" );
	deepEqual( Stem("rente"), "rent" );
	deepEqual( Stem("rentes"), "rent" );
	deepEqual( Stem("rentra"), "rentr" );
	deepEqual( Stem("rentrait"), "rentr" );
	deepEqual( Stem("rentrant"), "rentr" );
	deepEqual( Stem("rentrât"), "rentr" );
	deepEqual( Stem("rentre"), "rentr" );
	deepEqual( Stem("rentré"), "rentr" );
	deepEqual( Stem("rentrée"), "rentr" );
	deepEqual( Stem("rentrent"), "rentrent" );
	deepEqual( Stem("rentrer"), "rentr" );
	deepEqual( Stem("rentrera"), "rentr" );
	deepEqual( Stem("rentrerai"), "rentr" );
	deepEqual( Stem("rentrèrent"), "rentr" );
	deepEqual( Stem("rentrerez"), "rentr" );
	deepEqual( Stem("rentrés"), "rentr" );
	deepEqual( Stem("rentrons"), "rentron" );
	deepEqual( Stem("renverra"), "renverr" );
	deepEqual( Stem("renverraient"), "renverr" );
	deepEqual( Stem("renverrez"), "renverr" );
	deepEqual( Stem("renverrons"), "renverron" );
	deepEqual( Stem("renversa"), "renvers" );
	deepEqual( Stem("renversant"), "renvers" );
	deepEqual( Stem("renverse"), "renvers" );
	deepEqual( Stem("renversé"), "renvers" );
	deepEqual( Stem("renversée"), "renvers" );
	deepEqual( Stem("renversement"), "renvers" );
	deepEqual( Stem("renverser"), "renvers" );
	deepEqual( Stem("renverseront"), "renvers" );
	deepEqual( Stem("renvoie"), "renvoi" );
	deepEqual( Stem("renvoya"), "renvoi" );
	deepEqual( Stem("renvoyait"), "renvoi" );
	deepEqual( Stem("renvoyant"), "renvoi" );
	deepEqual( Stem("renvoyé"), "renvoi" );
	deepEqual( Stem("renvoyée"), "renvoi" );
	deepEqual( Stem("renvoyer"), "renvoi" );
	deepEqual( Stem("renvoyèrent"), "renvoi" );
	deepEqual( Stem("renvoyez"), "renvoi" );
	deepEqual( Stem("renvoyiez"), "renvoi" );
	deepEqual( Stem("renvoyons"), "renvoyon" );
	deepEqual( Stem("renza"), "renz" );
	deepEqual( Stem("repaire"), "repair" );
	deepEqual( Stem("répandaient"), "répand" );
	deepEqual( Stem("répandait"), "répand" );
	deepEqual( Stem("répandant"), "répand" );
	deepEqual( Stem("répandent"), "répandent" );
	deepEqual( Stem("répandit"), "répand" );
	deepEqual( Stem("répandît"), "répand" );
	deepEqual( Stem("répandrait"), "répandr" );
	deepEqual( Stem("répandre"), "répandr" );
	deepEqual( Stem("répandu"), "répandu" );
	deepEqual( Stem("répandue"), "répandu" );
	deepEqual( Stem("répandues"), "répandu" );
	deepEqual( Stem("reparaissaient"), "reparaiss" );
	deepEqual( Stem("reparaissait"), "reparaiss" );
	deepEqual( Stem("reparaîtra"), "reparaîtr" );
	deepEqual( Stem("reparaîtrai"), "reparaîtr" );
	deepEqual( Stem("reparaîtrait"), "reparaîtr" );
	deepEqual( Stem("reparaître"), "reparaîtr" );
	deepEqual( Stem("reparaîtrons"), "reparaîtron" );
	deepEqual( Stem("réparation"), "répar" );
	deepEqual( Stem("réparations"), "répar" );
	deepEqual( Stem("réparée"), "répar" );
	deepEqual( Stem("réparent"), "réparent" );
	deepEqual( Stem("réparer"), "répar" );
	deepEqual( Stem("répareraient"), "répar" );
	deepEqual( Stem("réparerait"), "répar" );
	deepEqual( Stem("répareras"), "répar" );
	deepEqual( Stem("reparlait"), "reparl" );
	deepEqual( Stem("repartaient"), "repart" );
	deepEqual( Stem("reparti"), "repart" );
	deepEqual( Stem("repartie"), "repart" );
	deepEqual( Stem("reparties"), "repart" );
	deepEqual( Stem("repartir"), "repart" );
	deepEqual( Stem("repartirent"), "repart" );
	deepEqual( Stem("repartit"), "repart" );
	deepEqual( Stem("répartition"), "répartit" );
	deepEqual( Stem("repartons"), "reparton" );
	deepEqual( Stem("reparu"), "reparu" );
	deepEqual( Stem("reparurent"), "reparurent" );
	deepEqual( Stem("reparut"), "reparut" );
	deepEqual( Stem("repas"), "rep" );
	deepEqual( Stem("repassa"), "repass" );
	deepEqual( Stem("repassai"), "repass" );
	deepEqual( Stem("repassait"), "repass" );
	deepEqual( Stem("repassant"), "repass" );
	deepEqual( Stem("repasser"), "repass" );
	deepEqual( Stem("repasserait"), "repass" );
	deepEqual( Stem("repens"), "repen" );
	deepEqual( Stem("repensant"), "repens" );
	deepEqual( Stem("repenser"), "repens" );
	deepEqual( Stem("repentie"), "repent" );
	deepEqual( Stem("repentir"), "repent" );
	deepEqual( Stem("reperdre"), "reperdr" );
	deepEqual( Stem("répéta"), "répet" );
	deepEqual( Stem("répétaient"), "répet" );
	deepEqual( Stem("répétait"), "répet" );
	deepEqual( Stem("répétant"), "répet" );
	deepEqual( Stem("répétât"), "répet" );
	deepEqual( Stem("répète"), "répet" );
	deepEqual( Stem("répété"), "répet" );
	deepEqual( Stem("répétée"), "répet" );
	deepEqual( Stem("répétées"), "répet" );
	deepEqual( Stem("répètent"), "répètent" );
	deepEqual( Stem("repeter"), "repet" );
	deepEqual( Stem("répéter"), "répet" );
	deepEqual( Stem("répétera"), "répet" );
	deepEqual( Stem("répéterai"), "répet" );
	deepEqual( Stem("répéterait"), "répet" );
	deepEqual( Stem("répéterons"), "répet" );
	deepEqual( Stem("répéteront"), "répet" );
	deepEqual( Stem("répétez"), "répet" );
	deepEqual( Stem("répétions"), "répet" );
	deepEqual( Stem("répétiteur"), "répétiteur" );
	deepEqual( Stem("répit"), "rep" );
	deepEqual( Stem("replaça"), "replac" );
	deepEqual( Stem("replaçant"), "replac" );
	deepEqual( Stem("replacer"), "replac" );
	deepEqual( Stem("repliée"), "repli" );
	deepEqual( Stem("replièrent"), "repli" );
	deepEqual( Stem("répliqua"), "répliqu" );
	deepEqual( Stem("répliquait"), "répliqu" );
	deepEqual( Stem("réplique"), "répliqu" );
	deepEqual( Stem("répliquer"), "répliqu" );
	deepEqual( Stem("répliquerai"), "répliqu" );
	deepEqual( Stem("répliques"), "répliqu" );
	deepEqual( Stem("replis"), "repl" );
	deepEqual( Stem("répond"), "répond" );
	deepEqual( Stem("répondaient"), "répond" );
	deepEqual( Stem("répondais"), "répond" );
	deepEqual( Stem("répondait"), "répond" );
	deepEqual( Stem("répondant"), "répond" );
	deepEqual( Stem("répondez"), "répond" );
	deepEqual( Stem("répondiez"), "répond" );
	deepEqual( Stem("répondirent"), "répond" );
	deepEqual( Stem("répondit"), "répond" );
	deepEqual( Stem("répondît"), "répond" );
	deepEqual( Stem("répondra"), "répondr" );
	deepEqual( Stem("répondrai"), "répondr" );
	deepEqual( Stem("répondrais"), "répondr" );
	deepEqual( Stem("répondrait"), "répondr" );
	deepEqual( Stem("répondras"), "répondr" );
	deepEqual( Stem("répondre"), "répondr" );
	deepEqual( Stem("répondrez"), "répondr" );
	deepEqual( Stem("réponds"), "répond" );
	deepEqual( Stem("répondu"), "répondu" );
	deepEqual( Stem("réponse"), "répons" );
	deepEqual( Stem("réponses"), "répons" );
	deepEqual( Stem("reportant"), "report" );
	deepEqual( Stem("reporté"), "report" );
	deepEqual( Stem("reporters"), "reporter" );
	deepEqual( Stem("repos"), "repos" );
	deepEqual( Stem("reposa"), "repos" );
	deepEqual( Stem("reposait"), "repos" );
	deepEqual( Stem("repose"), "repos" );
	deepEqual( Stem("reposé"), "repos" );
	deepEqual( Stem("reposer"), "repos" );
	deepEqual( Stem("reposera"), "repos" );
	deepEqual( Stem("reposoir"), "reposoir" );
	deepEqual( Stem("reposoirs"), "reposoir" );
	deepEqual( Stem("repoussa"), "repouss" );
	deepEqual( Stem("repoussais"), "repouss" );
	deepEqual( Stem("repoussait"), "repouss" );
	deepEqual( Stem("repoussant"), "repouss" );
	deepEqual( Stem("repousse"), "repouss" );
	deepEqual( Stem("repoussé"), "repouss" );
	deepEqual( Stem("repoussée"), "repouss" );
	deepEqual( Stem("repoussées"), "repouss" );
	deepEqual( Stem("repousser"), "repouss" );
	deepEqual( Stem("repousserait"), "repouss" );
	deepEqual( Stem("repoussés"), "repouss" );
	deepEqual( Stem("repoussez"), "repouss" );
	deepEqual( Stem("reprenaient"), "repren" );
	deepEqual( Stem("reprenait"), "repren" );
	deepEqual( Stem("reprenant"), "repren" );
	deepEqual( Stem("reprend"), "reprend" );
	deepEqual( Stem("reprendra"), "reprendr" );
	deepEqual( Stem("reprendrai"), "reprendr" );
	deepEqual( Stem("reprendrait"), "reprendr" );
	deepEqual( Stem("reprendre"), "reprendr" );
	deepEqual( Stem("reprendrons"), "reprendron" );
	deepEqual( Stem("reprends"), "reprend" );
	deepEqual( Stem("reprenez"), "repren" );
	deepEqual( Stem("représenta"), "représent" );
	deepEqual( Stem("représentaient"), "représent" );
	deepEqual( Stem("représentait"), "représent" );
	deepEqual( Stem("représentant"), "représent" );
	deepEqual( Stem("représentation"), "représent" );
	deepEqual( Stem("representations"), "represent" );
	deepEqual( Stem("représentations"), "représent" );
	deepEqual( Stem("représente"), "représent" );
	deepEqual( Stem("représenté"), "représent" );
	deepEqual( Stem("représenter"), "représent" );
	deepEqual( Stem("réprimande"), "réprimand" );
	deepEqual( Stem("réprimer"), "réprim" );
	deepEqual( Stem("reprirent"), "repr" );
	deepEqual( Stem("repris"), "repr" );
	deepEqual( Stem("reprise"), "repris" );
	deepEqual( Stem("reprises"), "repris" );
	deepEqual( Stem("reprit"), "repr" );
	deepEqual( Stem("reprît"), "repr" );
	deepEqual( Stem("reprocha"), "reproch" );
	deepEqual( Stem("reprochaient"), "reproch" );
	deepEqual( Stem("reprochait"), "reproch" );
	deepEqual( Stem("reprochant"), "reproch" );
	deepEqual( Stem("reproche"), "reproch" );
	deepEqual( Stem("reproché"), "reproch" );
	deepEqual( Stem("reprochée"), "reproch" );
	deepEqual( Stem("reprocher"), "reproch" );
	deepEqual( Stem("reprochera"), "reproch" );
	deepEqual( Stem("reprocherai"), "reproch" );
	deepEqual( Stem("reprocherais"), "reproch" );
	deepEqual( Stem("reproches"), "reproch" );
	deepEqual( Stem("reprochons"), "reprochon" );
	deepEqual( Stem("reproduire"), "reproduir" );
	deepEqual( Stem("reproduisait"), "reproduis" );
	deepEqual( Stem("reproduisent"), "reproduisent" );
	deepEqual( Stem("reproduisirent"), "reproduis" );
	deepEqual( Stem("reproduisit"), "reproduis" );
	deepEqual( Stem("reproduit"), "reproduit" );
	deepEqual( Stem("reprouvez"), "reprouv" );
	deepEqual( Stem("reptation"), "reptat" );
	deepEqual( Stem("reptiles"), "reptil" );
	deepEqual( Stem("républicain"), "républicain" );
	deepEqual( Stem("républicains"), "républicain" );
	deepEqual( Stem("republican"), "republican" );
	deepEqual( Stem("république"), "républ" );
	deepEqual( Stem("républiques"), "républ" );
	deepEqual( Stem("répudié"), "répudi" );
	deepEqual( Stem("répugnait"), "répugn" );
	deepEqual( Stem("répugnance"), "répugn" );
	deepEqual( Stem("réputation"), "réput" );
	deepEqual( Stem("réputations"), "réput" );
	deepEqual( Stem("requiers"), "requi" );
	deepEqual( Stem("requise"), "requis" );
	deepEqual( Stem("réquisitionnaire"), "réquisitionnair" );
	deepEqual( Stem("rescousse"), "rescouss" );
	deepEqual( Stem("rescrit"), "rescr" );
	deepEqual( Stem("réseau"), "réseau" );
	deepEqual( Stem("resegon"), "resegon" );
	deepEqual( Stem("resembleth"), "resembleth" );
	deepEqual( Stem("réserva"), "réserv" );
	deepEqual( Stem("réservait"), "réserv" );
	deepEqual( Stem("réserve"), "réserv" );
	deepEqual( Stem("réservé"), "réserv" );
	deepEqual( Stem("réservée"), "réserv" );
	deepEqual( Stem("réservées"), "réserv" );
	deepEqual( Stem("réserver"), "réserv" );
	deepEqual( Stem("réserves"), "réserv" );
	deepEqual( Stem("réservés"), "réserv" );
	deepEqual( Stem("réservoir"), "réservoir" );
	deepEqual( Stem("résidais"), "résid" );
	deepEqual( Stem("résidait"), "résid" );
	deepEqual( Stem("résidence"), "résident" );
	deepEqual( Stem("résigna"), "résign" );
	deepEqual( Stem("résignation"), "résign" );
	deepEqual( Stem("résigné"), "résign" );
	deepEqual( Stem("résignée"), "résign" );
	deepEqual( Stem("résigner"), "résign" );
	deepEqual( Stem("résines"), "résin" );
	deepEqual( Stem("résista"), "résist" );
	deepEqual( Stem("résistaient"), "résist" );
	deepEqual( Stem("résistait"), "résist" );
	deepEqual( Stem("résistance"), "résist" );
	deepEqual( Stem("résistant"), "résist" );
	deepEqual( Stem("résiste"), "résist" );
	deepEqual( Stem("résister"), "résist" );
	deepEqual( Stem("résisterez"), "résist" );
	deepEqual( Stem("résistes"), "résist" );
	deepEqual( Stem("résolu"), "résolu" );
	deepEqual( Stem("résolue"), "résolu" );
	deepEqual( Stem("résolues"), "résolu" );
	deepEqual( Stem("résolument"), "résolu" );
	deepEqual( Stem("résolurent"), "résolurent" );
	deepEqual( Stem("résolut"), "résolut" );
	deepEqual( Stem("résolution"), "résolu" );
	deepEqual( Stem("résolutions"), "résolu" );
	deepEqual( Stem("résonnaient"), "réson" );
	deepEqual( Stem("résoudre"), "résoudr" );
	deepEqual( Stem("respect"), "respect" );
	deepEqual( Stem("respecta"), "respect" );
	deepEqual( Stem("respectable"), "respect" );
	deepEqual( Stem("respectables"), "respect" );
	deepEqual( Stem("respectais"), "respect" );
	deepEqual( Stem("respectait"), "respect" );
	deepEqual( Stem("respectant"), "respect" );
	deepEqual( Stem("respectante"), "respect" );
	deepEqual( Stem("respecte"), "respect" );
	deepEqual( Stem("respecté"), "respect" );
	deepEqual( Stem("respecter"), "respect" );
	deepEqual( Stem("respecterais"), "respect" );
	deepEqual( Stem("respectés"), "respect" );
	deepEqual( Stem("respective"), "respect" );
	deepEqual( Stem("respects"), "respect" );
	deepEqual( Stem("respectueuse"), "respectu" );
	deepEqual( Stem("respectueusement"), "respectu" );
	deepEqual( Stem("respectueuses"), "respectu" );
	deepEqual( Stem("respectueux"), "respectu" );
	deepEqual( Stem("respira"), "resp" );
	deepEqual( Stem("respiraient"), "resp" );
	deepEqual( Stem("respirait"), "resp" );
	deepEqual( Stem("respirant"), "respir" );
	deepEqual( Stem("respiration"), "respir" );
	deepEqual( Stem("respire"), "respir" );
	deepEqual( Stem("respirer"), "respir" );
	deepEqual( Stem("respirerai"), "respir" );
	deepEqual( Stem("respirons"), "resp" );
	deepEqual( Stem("resplendissant"), "resplend" );
	deepEqual( Stem("resplendissante"), "resplend" );
	deepEqual( Stem("resplendissent"), "resplend" );
	deepEqual( Stem("responsable"), "respons" );
	deepEqual( Stem("ressemblaient"), "ressembl" );
	deepEqual( Stem("ressemblait"), "ressembl" );
	deepEqual( Stem("ressemblance"), "ressembl" );
	deepEqual( Stem("ressemblant"), "ressembl" );
	deepEqual( Stem("ressemblât"), "ressembl" );
	deepEqual( Stem("ressemble"), "ressembl" );
	deepEqual( Stem("ressemblé"), "ressembl" );
	deepEqual( Stem("ressemblent"), "ressemblent" );
	deepEqual( Stem("ressembler"), "ressembl" );
	deepEqual( Stem("ressemblera"), "ressembl" );
	deepEqual( Stem("ressemblez"), "ressembl" );
	deepEqual( Stem("ressens"), "ressen" );
	deepEqual( Stem("ressentait"), "ressent" );
	deepEqual( Stem("ressentir"), "ressent" );
	deepEqual( Stem("ressentit"), "ressent" );
	deepEqual( Stem("resserré"), "resserr" );
	deepEqual( Stem("ressort"), "ressort" );
	deepEqual( Stem("ressorti"), "ressort" );
	deepEqual( Stem("ressortir"), "ressort" );
	deepEqual( Stem("ressorts"), "ressort" );
	deepEqual( Stem("ressource"), "ressourc" );
	deepEqual( Stem("ressources"), "ressourc" );
	deepEqual( Stem("ressuscité"), "ressusc" );
	deepEqual( Stem("ressuscitèrent"), "ressuscit" );
	deepEqual( Stem("resta"), "rest" );
	deepEqual( Stem("restai"), "rest" );
	deepEqual( Stem("restaient"), "rest" );
	deepEqual( Stem("restait"), "rest" );
	deepEqual( Stem("restant"), "rest" );
	deepEqual( Stem("restassent"), "rest" );
	deepEqual( Stem("restât"), "rest" );
	deepEqual( Stem("restaurant"), "restaur" );
	deepEqual( Stem("restaurants"), "restaur" );
	deepEqual( Stem("restauration"), "restaur" );
	deepEqual( Stem("restaurations"), "restaur" );
	deepEqual( Stem("restauré"), "restaur" );
	deepEqual( Stem("reste"), "rest" );
	deepEqual( Stem("resté"), "rest" );
	deepEqual( Stem("restée"), "rest" );
	deepEqual( Stem("restées"), "rest" );
	deepEqual( Stem("restent"), "restent" );
	deepEqual( Stem("rester"), "rest" );
	deepEqual( Stem("restera"), "rest" );
	deepEqual( Stem("resterai"), "rest" );
	deepEqual( Stem("resteraient"), "rest" );
	deepEqual( Stem("resterais"), "rest" );
	deepEqual( Stem("resterait"), "rest" );
	deepEqual( Stem("resteras"), "rest" );
	deepEqual( Stem("restèrent"), "rest" );
	deepEqual( Stem("resterez"), "rest" );
	deepEqual( Stem("resteront"), "rest" );
	deepEqual( Stem("restes"), "rest" );
	deepEqual( Stem("restés"), "rest" );
	deepEqual( Stem("restez"), "rest" );
	deepEqual( Stem("restiez"), "rest" );
	deepEqual( Stem("restitué"), "restitu" );
	deepEqual( Stem("restituée"), "restitu" );
	deepEqual( Stem("restituit"), "restituit" );
	deepEqual( Stem("restitution"), "restitu" );
	deepEqual( Stem("restriction"), "restrict" );
	deepEqual( Stem("résultait"), "résult" );
	deepEqual( Stem("résultat"), "résultat" );
	deepEqual( Stem("résultats"), "résultat" );
	deepEqual( Stem("résumait"), "résum" );
	deepEqual( Stem("résumé"), "résum" );
	deepEqual( Stem("résumer"), "résum" );
	deepEqual( Stem("résumons"), "résumon" );
	deepEqual( Stem("résurrection"), "résurrect" );
	deepEqual( Stem("rétabli"), "rétabl" );
	deepEqual( Stem("rétablie"), "rétabl" );
	deepEqual( Stem("rétablir"), "rétabl" );
	deepEqual( Stem("rétabliras"), "rétabl" );
	deepEqual( Stem("rétablissait"), "rétabl" );
	deepEqual( Stem("rétablissement"), "rétabl" );
	deepEqual( Stem("rétablit"), "rétabl" );
	deepEqual( Stem("retard"), "retard" );
	deepEqual( Stem("retardait"), "retard" );
	deepEqual( Stem("retardant"), "retard" );
	deepEqual( Stem("retardataire"), "retardatair" );
	deepEqual( Stem("retarde"), "retard" );
	deepEqual( Stem("retardé"), "retard" );
	deepEqual( Stem("retardée"), "retard" );
	deepEqual( Stem("retardent"), "retardent" );
	deepEqual( Stem("retarder"), "retard" );
	deepEqual( Stem("retardez"), "retard" );
	deepEqual( Stem("retards"), "retard" );
	deepEqual( Stem("retenaient"), "reten" );
	deepEqual( Stem("retenait"), "reten" );
	deepEqual( Stem("retenant"), "reten" );
	deepEqual( Stem("retenez"), "reten" );
	deepEqual( Stem("retenir"), "reten" );
	deepEqual( Stem("retenti"), "retent" );
	deepEqual( Stem("retentir"), "retent" );
	deepEqual( Stem("retentiraient"), "retent" );
	deepEqual( Stem("retentirait"), "retent" );
	deepEqual( Stem("retentirent"), "retent" );
	deepEqual( Stem("retentissaient"), "retent" );
	deepEqual( Stem("retentissait"), "retent" );
	deepEqual( Stem("retentissant"), "retent" );
	deepEqual( Stem("retentissement"), "retent" );
	deepEqual( Stem("retentit"), "retent" );
	deepEqual( Stem("retenu"), "retenu" );
	deepEqual( Stem("retenue"), "retenu" );
	deepEqual( Stem("retenues"), "retenu" );
	deepEqual( Stem("retenus"), "retenus" );
	deepEqual( Stem("retiendrai"), "retiendr" );
	deepEqual( Stem("retienne"), "retien" );
	deepEqual( Stem("retiennent"), "retiennent" );
	deepEqual( Stem("retient"), "retient" );
	deepEqual( Stem("retinrent"), "retinrent" );
	deepEqual( Stem("retint"), "retint" );
	deepEqual( Stem("retira"), "ret" );
	deepEqual( Stem("retiraient"), "ret" );
	deepEqual( Stem("retirait"), "ret" );
	deepEqual( Stem("retirant"), "retir" );
	deepEqual( Stem("retirât"), "retir" );
	deepEqual( Stem("retire"), "retir" );
	deepEqual( Stem("retiré"), "retir" );
	deepEqual( Stem("retirée"), "retir" );
	deepEqual( Stem("retirées"), "retir" );
	deepEqual( Stem("retirer"), "retir" );
	deepEqual( Stem("retirerais"), "retir" );
	deepEqual( Stem("retirerait"), "retir" );
	deepEqual( Stem("retirèrent"), "retir" );
	deepEqual( Stem("retirerez"), "retir" );
	deepEqual( Stem("retirés"), "retir" );
	deepEqual( Stem("retirez"), "ret" );
	deepEqual( Stem("retirons"), "ret" );
	deepEqual( Stem("retomba"), "retomb" );
	deepEqual( Stem("retombait"), "retomb" );
	deepEqual( Stem("retombant"), "retomb" );
	deepEqual( Stem("retombe"), "retomb" );
	deepEqual( Stem("retombée"), "retomb" );
	deepEqual( Stem("retomber"), "retomb" );
	deepEqual( Stem("retomberait"), "retomb" );
	deepEqual( Stem("retombes"), "retomb" );
	deepEqual( Stem("retour"), "retour" );
	deepEqual( Stem("retourna"), "retourn" );
	deepEqual( Stem("retournaient"), "retourn" );
	deepEqual( Stem("retournait"), "retourn" );
	deepEqual( Stem("retournant"), "retourn" );
	deepEqual( Stem("retourne"), "retourn" );
	deepEqual( Stem("retourné"), "retourn" );
	deepEqual( Stem("retourner"), "retourn" );
	deepEqual( Stem("retournèrent"), "retourn" );
	deepEqual( Stem("retournez"), "retourn" );
	deepEqual( Stem("retracer"), "retrac" );
	deepEqual( Stem("rétracte"), "rétract" );
	deepEqual( Stem("retraite"), "retrait" );
	deepEqual( Stem("retraites"), "retrait" );
	deepEqual( Stem("retrancher"), "retranch" );
	deepEqual( Stem("retranchés"), "retranch" );
	deepEqual( Stem("rétréci"), "rétrec" );
	deepEqual( Stem("rétrécir"), "rétrec" );
	deepEqual( Stem("rétrécissait"), "rétrec" );
	deepEqual( Stem("retrempait"), "retremp" );
	deepEqual( Stem("retrempé"), "retremp" );
	deepEqual( Stem("rétribution"), "rétribu" );
	deepEqual( Stem("rétrospectif"), "rétrospect" );
	deepEqual( Stem("retrouva"), "retrouv" );
	deepEqual( Stem("retrouvaient"), "retrouv" );
	deepEqual( Stem("retrouvait"), "retrouv" );
	deepEqual( Stem("retrouvant"), "retrouv" );
	deepEqual( Stem("retrouvât"), "retrouv" );
	deepEqual( Stem("retrouve"), "retrouv" );
	deepEqual( Stem("retrouvé"), "retrouv" );
	deepEqual( Stem("retrouvée"), "retrouv" );
	deepEqual( Stem("retrouver"), "retrouv" );
	deepEqual( Stem("retrouvera"), "retrouv" );
	deepEqual( Stem("retrouverai"), "retrouv" );
	deepEqual( Stem("retrouvèrent"), "retrouv" );
	deepEqual( Stem("retrouverez"), "retrouv" );
	deepEqual( Stem("retrouverons"), "retrouv" );
	deepEqual( Stem("retz"), "retz" );
	deepEqual( Stem("réuni"), "réun" );
	deepEqual( Stem("réunie"), "réun" );
	deepEqual( Stem("réunies"), "réun" );
	deepEqual( Stem("réunion"), "réunion" );
	deepEqual( Stem("réunir"), "réun" );
	deepEqual( Stem("réunirent"), "réun" );
	deepEqual( Stem("réuniront"), "réun" );
	deepEqual( Stem("réunis"), "réun" );
	deepEqual( Stem("réunissaient"), "réun" );
	deepEqual( Stem("réunissait"), "réun" );
	deepEqual( Stem("réunissant"), "réun" );
	deepEqual( Stem("réunissent"), "réun" );
	deepEqual( Stem("réunissez"), "réun" );
	deepEqual( Stem("réunit"), "réun" );
	deepEqual( Stem("réussi"), "réuss" );
	deepEqual( Stem("réussir"), "réuss" );
	deepEqual( Stem("réussirais"), "réuss" );
	deepEqual( Stem("réussis"), "réuss" );
	deepEqual( Stem("réussissait"), "réuss" );
	deepEqual( Stem("réussissez"), "réuss" );
	deepEqual( Stem("réussit"), "réuss" );
	deepEqual( Stem("réussite"), "réussit" );
	deepEqual( Stem("rêva"), "rêv" );
	deepEqual( Stem("rêvait"), "rêv" );
	deepEqual( Stem("revanche"), "revanch" );
	deepEqual( Stem("rêvant"), "rêv" );
	deepEqual( Stem("revaudrai"), "revaudr" );
	deepEqual( Stem("rêve"), "rêv" );
	deepEqual( Stem("rêvé"), "rêv" );
	deepEqual( Stem("réveil"), "réveil" );
	deepEqual( Stem("réveilla"), "réveil" );
	deepEqual( Stem("réveillait"), "réveil" );
	deepEqual( Stem("réveillant"), "réveil" );
	deepEqual( Stem("réveillât"), "réveil" );
	deepEqual( Stem("réveille"), "réveil" );
	deepEqual( Stem("réveillé"), "réveil" );
	deepEqual( Stem("réveillée"), "réveil" );
	deepEqual( Stem("réveiller"), "réveil" );
	deepEqual( Stem("réveillèrent"), "réveil" );
	deepEqual( Stem("réveillés"), "réveil" );
	deepEqual( Stem("révéla"), "rével" );
	deepEqual( Stem("révélait"), "rével" );
	deepEqual( Stem("révélation"), "rével" );
	deepEqual( Stem("révélé"), "rével" );
	deepEqual( Stem("révéler"), "rével" );
	deepEqual( Stem("revenaient"), "reven" );
	deepEqual( Stem("revenait"), "reven" );
	deepEqual( Stem("revenant"), "reven" );
	deepEqual( Stem("revendeur"), "revendeur" );
	deepEqual( Stem("revendre"), "revendr" );
	deepEqual( Stem("revenez"), "reven" );
	deepEqual( Stem("revenir"), "reven" );
	deepEqual( Stem("revenons"), "revenon" );
	deepEqual( Stem("revenu"), "revenu" );
	deepEqual( Stem("revenue"), "revenu" );
	deepEqual( Stem("revenus"), "revenus" );
	deepEqual( Stem("rêver"), "rêv" );
	deepEqual( Stem("révéré"), "réver" );
	deepEqual( Stem("révérence"), "révérent" );
	deepEqual( Stem("révérences"), "révérent" );
	deepEqual( Stem("révérencieuses"), "révérenci" );
	deepEqual( Stem("révérend"), "révérend" );
	deepEqual( Stem("révérendissime"), "révérendissim" );
	deepEqual( Stem("rêverie"), "rêver" );
	deepEqual( Stem("rêveries"), "rêver" );
	deepEqual( Stem("reverrai"), "reverr" );
	deepEqual( Stem("reverrais"), "reverr" );
	deepEqual( Stem("reverrait"), "reverr" );
	deepEqual( Stem("reverrez"), "reverr" );
	deepEqual( Stem("reverrons"), "reverron" );
	deepEqual( Stem("reverront"), "reverront" );
	deepEqual( Stem("revers"), "rever" );
	deepEqual( Stem("rêves"), "rêv" );
	deepEqual( Stem("revêtir"), "revêt" );
	deepEqual( Stem("revêtu"), "revêtu" );
	deepEqual( Stem("revêtus"), "revêtus" );
	deepEqual( Stem("rêveur"), "rêveur" );
	deepEqual( Stem("rêveuse"), "rêveux" );
	deepEqual( Stem("rêvez"), "rêv" );
	deepEqual( Stem("reviendra"), "reviendr" );
	deepEqual( Stem("reviendrai"), "reviendr" );
	deepEqual( Stem("reviendrais"), "reviendr" );
	deepEqual( Stem("reviendrait"), "reviendr" );
	deepEqual( Stem("reviendrez"), "reviendr" );
	deepEqual( Stem("reviendront"), "reviendront" );
	deepEqual( Stem("revienne"), "revien" );
	deepEqual( Stem("reviennent"), "reviennent" );
	deepEqual( Stem("reviens"), "revien" );
	deepEqual( Stem("revient"), "revient" );
	deepEqual( Stem("review"), "review" );
	deepEqual( Stem("revinrent"), "revinrent" );
	deepEqual( Stem("revinssent"), "revinssent" );
	deepEqual( Stem("revint"), "revint" );
	deepEqual( Stem("revirement"), "revir" );
	deepEqual( Stem("revirent"), "rev" );
	deepEqual( Stem("revissent"), "rev" );
	deepEqual( Stem("revit"), "rev" );
	deepEqual( Stem("revivaient"), "reviv" );
	deepEqual( Stem("revoie"), "revoi" );
	deepEqual( Stem("revoies"), "revoi" );
	deepEqual( Stem("revoir"), "revoir" );
	deepEqual( Stem("revois"), "revois" );
	deepEqual( Stem("révolta"), "révolt" );
	deepEqual( Stem("révoltante"), "révolt" );
	deepEqual( Stem("révoltantes"), "révolt" );
	deepEqual( Stem("révoltât"), "révolt" );
	deepEqual( Stem("révolte"), "révolt" );
	deepEqual( Stem("révolté"), "révolt" );
	deepEqual( Stem("révoltée"), "révolt" );
	deepEqual( Stem("révolter"), "révolt" );
	deepEqual( Stem("révolues"), "révolu" );
	deepEqual( Stem("révolus"), "révolus" );
	deepEqual( Stem("révolution"), "révolu" );
	deepEqual( Stem("révolutionnaire"), "révolutionnair" );
	deepEqual( Stem("révolutionnaires"), "révolutionnair" );
	deepEqual( Stem("révolutions"), "révolu" );
	deepEqual( Stem("revolver"), "revolv" );
	deepEqual( Stem("revolvers"), "revolver" );
	deepEqual( Stem("révoquée"), "révoqu" );
	deepEqual( Stem("révoquerai"), "révoqu" );
	deepEqual( Stem("révoquerez"), "révoqu" );
	deepEqual( Stem("revoyait"), "revoi" );
	deepEqual( Stem("revoyant"), "revoi" );
	deepEqual( Stem("revu"), "revu" );
	deepEqual( Stem("revue"), "revu" );
	deepEqual( Stem("revues"), "revu" );
	deepEqual( Stem("rez"), "rez" );
	deepEqual( Stem("rhin"), "rhin" );
	deepEqual( Stem("rhône"), "rhôn" );
	deepEqual( Stem("rhubarbe"), "rhubarb" );
	deepEqual( Stem("rhume"), "rhum" );
	deepEqual( Stem("ri"), "ri" );
	deepEqual( Stem("riaient"), "ri" );
	deepEqual( Stem("riais"), "ri" );
	deepEqual( Stem("riait"), "ri" );
	deepEqual( Stem("riant"), "ri" );
	deepEqual( Stem("riante"), "ri" );
	deepEqual( Stem("riants"), "ri" );
	deepEqual( Stem("ricanant"), "rican" );
	deepEqual( Stem("ricanement"), "rican" );
	deepEqual( Stem("ricciarda"), "ricciard" );
	deepEqual( Stem("richards"), "richard" );
	deepEqual( Stem("riche"), "rich" );
	deepEqual( Stem("richelieu"), "richelieu" );
	deepEqual( Stem("richement"), "rich" );
	deepEqual( Stem("richemond"), "richemond" );
	deepEqual( Stem("riches"), "rich" );
	deepEqual( Stem("richesse"), "richess" );
	deepEqual( Stem("richesses"), "richess" );
	deepEqual( Stem("richissime"), "richissim" );
	deepEqual( Stem("rideau"), "rideau" );
	deepEqual( Stem("rideaux"), "rideau" );
	deepEqual( Stem("rides"), "rid" );
	deepEqual( Stem("ridicule"), "ridicul" );
	deepEqual( Stem("ridicules"), "ridicul" );
	deepEqual( Stem("rie"), "ri" );
	deepEqual( Stem("rien"), "rien" );
	deepEqual( Stem("riens"), "rien" );
	deepEqual( Stem("rient"), "rient" );
	deepEqual( Stem("rienzi"), "rienz" );
	deepEqual( Stem("rigides"), "rigid" );
	deepEqual( Stem("rigoureuse"), "rigour" );
	deepEqual( Stem("rigoureusement"), "rigour" );
	deepEqual( Stem("rigoureux"), "rigour" );
	deepEqual( Stem("rigueur"), "rigueur" );
	deepEqual( Stem("rigueurs"), "rigueur" );
	deepEqual( Stem("rimailleur"), "rimailleur" );
	deepEqual( Stem("rimes"), "rim" );
	deepEqual( Stem("rios"), "rios" );
	deepEqual( Stem("riposta"), "ripost" );
	deepEqual( Stem("ripostaient"), "ripost" );
	deepEqual( Stem("rire"), "rir" );
	deepEqual( Stem("rires"), "rir" );
	deepEqual( Stem("ris"), "ris" );
	deepEqual( Stem("riscara"), "riscar" );
	deepEqual( Stem("risqua"), "risqu" );
	deepEqual( Stem("risquaient"), "risqu" );
	deepEqual( Stem("risque"), "risqu" );
	deepEqual( Stem("risqué"), "risqu" );
	deepEqual( Stem("risquer"), "risqu" );
	deepEqual( Stem("risquerai"), "risqu" );
	deepEqual( Stem("risques"), "risqu" );
	deepEqual( Stem("risquiez"), "risqu" );
	deepEqual( Stem("risquons"), "risquon" );
	deepEqual( Stem("rit"), "rit" );
	deepEqual( Stem("rît"), "rît" );
	deepEqual( Stem("ritournelle"), "ritournel" );
	deepEqual( Stem("riva"), "riv" );
	deepEqual( Stem("rivage"), "rivag" );
	deepEqual( Stem("rival"), "rival" );
	deepEqual( Stem("rivale"), "rival" );
	deepEqual( Stem("rivales"), "rival" );
	deepEqual( Stem("rivalité"), "rival" );
	deepEqual( Stem("rivarol"), "rivarol" );
	deepEqual( Stem("rivaux"), "rival" );
	deepEqual( Stem("rive"), "riv" );
	deepEqual( Stem("river"), "riv" );
	deepEqual( Stem("riverisco"), "riverisco" );
	deepEqual( Stem("rives"), "riv" );
	deepEqual( Stem("rivière"), "rivi" );
	deepEqual( Stem("rivières"), "rivi" );
	deepEqual( Stem("rivoli"), "rivol" );
	deepEqual( Stem("riz"), "riz" );
	deepEqual( Stem("rizières"), "rizi" );
	deepEqual( Stem("road"), "road" );
	deepEqual( Stem("roads"), "road" );
	deepEqual( Stem("roastbeef"), "roastbeef" );
	deepEqual( Stem("robe"), "rob" );
	deepEqual( Stem("robert"), "robert" );
	deepEqual( Stem("robes"), "rob" );
	deepEqual( Stem("robespierre"), "robespierr" );
	deepEqual( Stem("robre"), "robr" );
	deepEqual( Stem("robres"), "robr" );
	deepEqual( Stem("robuste"), "robust" );
	deepEqual( Stem("robustes"), "robust" );
	deepEqual( Stem("roc"), "roc" );
	deepEqual( Stem("roch"), "roch" );
	deepEqual( Stem("rocher"), "roch" );
	deepEqual( Stem("rochers"), "rocher" );
	deepEqual( Stem("roches"), "roch" );
	deepEqual( Stem("rocheuses"), "rocheux" );
	deepEqual( Stem("rock"), "rock" );
	deepEqual( Stem("rocky"), "rocky" );
	deepEqual( Stem("roclin"), "roclin" );
	deepEqual( Stem("rôdait"), "rôd" );
	deepEqual( Stem("rôdant"), "rôd" );
	deepEqual( Stem("rôder"), "rôd" );
	deepEqual( Stem("rogations"), "rogat" );
	deepEqual( Stem("rogné"), "rogn" );
	deepEqual( Stem("rognure"), "rognur" );
	deepEqual( Stem("rogue"), "rogu" );
	deepEqual( Stem("roguerie"), "roguer" );
	deepEqual( Stem("roi"), "roi" );
	deepEqual( Stem("rois"), "rois" );
	deepEqual( Stem("roiville"), "roivill" );
	deepEqual( Stem("roland"), "roland" );
	deepEqual( Stem("rôle"), "rôl" );
	deepEqual( Stem("rôles"), "rôl" );
	deepEqual( Stem("romagnan"), "romagnan" );
	deepEqual( Stem("romagnano"), "romagnano" );
	deepEqual( Stem("romagne"), "romagn" );
	deepEqual( Stem("romain"), "romain" );
	deepEqual( Stem("romaine"), "romain" );
	deepEqual( Stem("romains"), "romain" );
	deepEqual( Stem("roman"), "roman" );
	deepEqual( Stem("romanesque"), "romanesqu" );
	deepEqual( Stem("romanesques"), "romanesqu" );
	deepEqual( Stem("romans"), "roman" );
	deepEqual( Stem("rome"), "rom" );
	deepEqual( Stem("rompe"), "romp" );
	deepEqual( Stem("rompez"), "romp" );
	deepEqual( Stem("rompit"), "romp" );
	deepEqual( Stem("rompre"), "rompr" );
	deepEqual( Stem("rompt"), "rompt" );
	deepEqual( Stem("rompu"), "rompu" );
	deepEqual( Stem("rompus"), "rompus" );
	deepEqual( Stem("ronces"), "ronc" );
	deepEqual( Stem("ronceux"), "ronceux" );
	deepEqual( Stem("rond"), "rond" );
	deepEqual( Stem("ronde"), "rond" );
	deepEqual( Stem("rondement"), "rond" );
	deepEqual( Stem("rondes"), "rond" );
	deepEqual( Stem("ronds"), "rond" );
	deepEqual( Stem("ronflait"), "ronfl" );
	deepEqual( Stem("ronflantes"), "ronfl" );
	deepEqual( Stem("ronfle"), "ronfl" );
	deepEqual( Stem("ronflement"), "ronfl" );
	deepEqual( Stem("ronflements"), "ronfl" );
	deepEqual( Stem("rongeait"), "rong" );
	deepEqual( Stem("ronsard"), "ronsard" );
	deepEqual( Stem("room"), "room" );
	deepEqual( Stem("rooms"), "room" );
	deepEqual( Stem("rose"), "ros" );
	deepEqual( Stem("roseau"), "roseau" );
	deepEqual( Stem("roseaux"), "roseau" );
	deepEqual( Stem("rosée"), "ros" );
	deepEqual( Stem("roses"), "ros" );
	deepEqual( Stem("rosier"), "rosi" );
	deepEqual( Stem("rosiers"), "rosi" );
	deepEqual( Stem("rosse"), "ross" );
	deepEqual( Stem("rossé"), "ross" );
	deepEqual( Stem("rosses"), "ross" );
	deepEqual( Stem("rossini"), "rossin" );
	deepEqual( Stem("rothal"), "rothal" );
	deepEqual( Stem("rothschild"), "rothschild" );
	deepEqual( Stem("rôti"), "rôt" );
	deepEqual( Stem("rôtie"), "rôt" );
	deepEqual( Stem("rôties"), "rôt" );
	deepEqual( Stem("rotrou"), "rotrou" );
	deepEqual( Stem("roue"), "rou" );
	deepEqual( Stem("roué"), "rou" );
	deepEqual( Stem("rouer"), "rou" );
	deepEqual( Stem("roueries"), "rouer" );
	deepEqual( Stem("roues"), "rou" );
	deepEqual( Stem("rouffles"), "rouffl" );
	deepEqual( Stem("rouge"), "roug" );
	deepEqual( Stem("rougeâtre"), "rougeâtr" );
	deepEqual( Stem("rouges"), "roug" );
	deepEqual( Stem("rougeur"), "rougeur" );
	deepEqual( Stem("rougi"), "roug" );
	deepEqual( Stem("rougir"), "roug" );
	deepEqual( Stem("rougira"), "roug" );
	deepEqual( Stem("rougirait"), "roug" );
	deepEqual( Stem("rougissait"), "roug" );
	deepEqual( Stem("rougissant"), "roug" );
	deepEqual( Stem("rougit"), "roug" );
	deepEqual( Stem("rouille"), "rouill" );
	deepEqual( Stem("rouillé"), "rouill" );
	deepEqual( Stem("roula"), "roul" );
	deepEqual( Stem("roulaient"), "roul" );
	deepEqual( Stem("roulait"), "roul" );
	deepEqual( Stem("roulant"), "roul" );
	deepEqual( Stem("roule"), "roul" );
	deepEqual( Stem("rouleau"), "rouleau" );
	deepEqual( Stem("roulement"), "roul" );
	deepEqual( Stem("roulèrent"), "roul" );
	deepEqual( Stem("roulis"), "roul" );
	deepEqual( Stem("rousseau"), "rousseau" );
	deepEqual( Stem("route"), "rout" );
	deepEqual( Stem("routes"), "rout" );
	deepEqual( Stem("rouvert"), "rouvert" );
	deepEqual( Stem("rouvray"), "rouvray" );
	deepEqual( Stem("rouvrit"), "rouvr" );
	deepEqual( Stem("rovere"), "rover" );
	deepEqual( Stem("rovère"), "rover" );
	deepEqual( Stem("row"), "row" );
	deepEqual( Stem("rowan"), "rowan" );
	deepEqual( Stem("royal"), "royal" );
	deepEqual( Stem("royale"), "royal" );
	deepEqual( Stem("royaliste"), "royal" );
	deepEqual( Stem("royalistes"), "royal" );
	deepEqual( Stem("royaume"), "royaum" );
	deepEqual( Stem("ruban"), "ruban" );
	deepEqual( Stem("rubempré"), "rubempr" );
	deepEqual( Stem("rubigneau"), "rubigneau" );
	deepEqual( Stem("rude"), "rud" );
	deepEqual( Stem("rudement"), "rud" );
	deepEqual( Stem("rudes"), "rud" );
	deepEqual( Stem("rudesse"), "rudess" );
	deepEqual( Stem("rue"), "ru" );
	deepEqual( Stem("rues"), "ru" );
	deepEqual( Stem("ruga"), "rug" );
	deepEqual( Stem("rugissements"), "rug" );
	deepEqual( Stem("ruina"), "ruin" );
	deepEqual( Stem("ruinait"), "ruin" );
	deepEqual( Stem("ruine"), "ruin" );
	deepEqual( Stem("ruiné"), "ruin" );
	deepEqual( Stem("ruinée"), "ruin" );
	deepEqual( Stem("ruinées"), "ruin" );
	deepEqual( Stem("ruinent"), "ruinent" );
	deepEqual( Stem("ruiner"), "ruin" );
	deepEqual( Stem("ruines"), "ruin" );
	deepEqual( Stem("ruinés"), "ruin" );
	deepEqual( Stem("ruineux"), "ruineux" );
	deepEqual( Stem("ruinez"), "ruin" );
	deepEqual( Stem("ruisseau"), "ruisseau" );
	deepEqual( Stem("ruisseaux"), "ruisseau" );
	deepEqual( Stem("ruminait"), "rumin" );
	deepEqual( Stem("ruminants"), "rumin" );
	deepEqual( Stem("rupture"), "ruptur" );
	deepEqual( Stem("rus"), "rus" );
	deepEqual( Stem("rusca"), "rusc" );
	deepEqual( Stem("ruse"), "rus" );
	deepEqual( Stem("rusé"), "rus" );
	deepEqual( Stem("russe"), "russ" );
	deepEqual( Stem("russell"), "russel" );
	deepEqual( Stem("russes"), "russ" );
	deepEqual( Stem("russie"), "russ" );
	deepEqual( Stem("s"), "s" );
	deepEqual( Stem("sa"), "sa" );
	deepEqual( Stem("sablé"), "sabl" );
	deepEqual( Stem("sablées"), "sabl" );
	deepEqual( Stem("sabre"), "sabr" );
	deepEqual( Stem("sabré"), "sabr" );
	deepEqual( Stem("sabrer"), "sabr" );
	deepEqual( Stem("sabres"), "sabr" );
	deepEqual( Stem("sabrés"), "sabr" );
	deepEqual( Stem("sac"), "sac" );
	deepEqual( Stem("sacca"), "sacc" );
	deepEqual( Stem("saccadés"), "saccad" );
	deepEqual( Stem("sachant"), "sach" );
	deepEqual( Stem("sache"), "sach" );
	deepEqual( Stem("saches"), "sach" );
	deepEqual( Stem("sachez"), "sach" );
	deepEqual( Stem("sachiez"), "sach" );
	deepEqual( Stem("sachons"), "sachon" );
	deepEqual( Stem("sacramentelle"), "sacramentel" );
	deepEqual( Stem("sacramento"), "sacramento" );
	deepEqual( Stem("sacre"), "sacr" );
	deepEqual( Stem("sacré"), "sacr" );
	deepEqual( Stem("sacrédié"), "sacrédi" );
	deepEqual( Stem("sacrée"), "sacr" );
	deepEqual( Stem("sacrées"), "sacr" );
	deepEqual( Stem("sacrement"), "sacr" );
	deepEqual( Stem("sacrements"), "sacr" );
	deepEqual( Stem("sacrés"), "sacr" );
	deepEqual( Stem("sacrifiait"), "sacrifi" );
	deepEqual( Stem("sacrifiant"), "sacrifi" );
	deepEqual( Stem("sacrifice"), "sacrific" );
	deepEqual( Stem("sacrifices"), "sacrific" );
	deepEqual( Stem("sacrifie"), "sacrif" );
	deepEqual( Stem("sacrifié"), "sacrifi" );
	deepEqual( Stem("sacrifiées"), "sacrifi" );
	deepEqual( Stem("sacrifier"), "sacrifi" );
	deepEqual( Stem("sacrifierait"), "sacrifi" );
	deepEqual( Stem("sacrifiés"), "sacrifi" );
	deepEqual( Stem("sacrifiez"), "sacrif" );
	deepEqual( Stem("sacrilège"), "sacrileg" );
	deepEqual( Stem("sacristie"), "sacrist" );
	deepEqual( Stem("saddle"), "saddl" );
	deepEqual( Stem("sagacité"), "sagac" );
	deepEqual( Stem("sage"), "sag" );
	deepEqual( Stem("sagement"), "sag" );
	deepEqual( Stem("sages"), "sag" );
	deepEqual( Stem("sagesse"), "sagess" );
	deepEqual( Stem("sagoutiers"), "sagouti" );
	deepEqual( Stem("saïd"), "saïd" );
	deepEqual( Stem("saigna"), "saign" );
	deepEqual( Stem("saignait"), "saign" );
	deepEqual( Stem("saigné"), "saign" );
	deepEqual( Stem("saignées"), "saign" );
	deepEqual( Stem("saigner"), "saign" );
	deepEqual( Stem("saillant"), "saill" );
	deepEqual( Stem("saillante"), "saill" );
	deepEqual( Stem("saillantes"), "saill" );
	deepEqual( Stem("saillants"), "saill" );
	deepEqual( Stem("saillie"), "saill" );
	deepEqual( Stem("saillies"), "saill" );
	deepEqual( Stem("sain"), "sain" );
	deepEqual( Stem("sainclair"), "sainclair" );
	deepEqual( Stem("saine"), "sain" );
	deepEqual( Stem("sains"), "sain" );
	deepEqual( Stem("saint"), "saint" );
	deepEqual( Stem("sainte"), "saint" );
	deepEqual( Stem("saintes"), "saint" );
	deepEqual( Stem("sainteté"), "saintet" );
	deepEqual( Stem("saints"), "saint" );
	deepEqual( Stem("sais"), "sais" );
	deepEqual( Stem("saisi"), "sais" );
	deepEqual( Stem("saisie"), "sais" );
	deepEqual( Stem("saisines"), "saisin" );
	deepEqual( Stem("saisir"), "sais" );
	deepEqual( Stem("saisirais"), "sais" );
	deepEqual( Stem("saisirent"), "sais" );
	deepEqual( Stem("saisis"), "sais" );
	deepEqual( Stem("saisissait"), "sais" );
	deepEqual( Stem("saisissant"), "sais" );
	deepEqual( Stem("saisissante"), "sais" );
	deepEqual( Stem("saisissement"), "sais" );
	deepEqual( Stem("saisissez"), "sais" );
	deepEqual( Stem("saisit"), "sais" );
	deepEqual( Stem("saisîtes"), "sais" );
	deepEqual( Stem("saison"), "saison" );
	deepEqual( Stem("sait"), "sait" );
	deepEqual( Stem("saki"), "sak" );
	deepEqual( Stem("salaire"), "salair" );
	deepEqual( Stem("salanganes"), "salangan" );
	deepEqual( Stem("salcette"), "salcet" );
	deepEqual( Stem("sale"), "sal" );
	deepEqual( Stem("salé"), "sal" );
	deepEqual( Stem("salement"), "sal" );
	deepEqual( Stem("sales"), "sal" );
	deepEqual( Stem("saleté"), "salet" );
	deepEqual( Stem("salis"), "sal" );
	deepEqual( Stem("salle"), "sall" );
	deepEqual( Stem("salles"), "sall" );
	deepEqual( Stem("salomon"), "salomon" );
	deepEqual( Stem("salon"), "salon" );
	deepEqual( Stem("salons"), "salon" );
	deepEqual( Stem("salt"), "salt" );
	deepEqual( Stem("saltimbanques"), "saltimbanqu" );
	deepEqual( Stem("salua"), "salu" );
	deepEqual( Stem("saluaient"), "salu" );
	deepEqual( Stem("saluait"), "salu" );
	deepEqual( Stem("saluant"), "salu" );
	deepEqual( Stem("salue"), "salu" );
	deepEqual( Stem("salué"), "salu" );
	deepEqual( Stem("saluer"), "salu" );
	deepEqual( Stem("saluèrent"), "salu" );
	deepEqual( Stem("salure"), "salur" );
	deepEqual( Stem("salut"), "salut" );
	deepEqual( Stem("salutaire"), "salutair" );
	deepEqual( Stem("samedi"), "samed" );
	deepEqual( Stem("samedis"), "samed" );
	deepEqual( Stem("samuel"), "samuel" );
	deepEqual( Stem("san"), "san" );
	deepEqual( Stem("sancho"), "sancho" );
	deepEqual( Stem("sanctifie"), "sanctif" );
	deepEqual( Stem("sanctuaire"), "sanctuair" );
	deepEqual( Stem("sanctus"), "sanctus" );
	deepEqual( Stem("sandales"), "sandal" );
	deepEqual( Stem("sandolaro"), "sandolaro" );
	deepEqual( Stem("sandrino"), "sandrino" );
	deepEqual( Stem("sandy"), "sandy" );
	deepEqual( Stem("sang"), "sang" );
	deepEqual( Stem("sanglant"), "sangl" );
	deepEqual( Stem("sanglante"), "sangl" );
	deepEqual( Stem("sanglier"), "sangli" );
	deepEqual( Stem("sanglot"), "sanglot" );
	deepEqual( Stem("sanglotaient"), "sanglot" );
	deepEqual( Stem("sanglotant"), "sanglot" );
	deepEqual( Stem("sanglots"), "sanglot" );
	deepEqual( Stem("sangsues"), "sangsu" );
	deepEqual( Stem("sanguigna"), "sanguign" );
	deepEqual( Stem("sanguinaire"), "sanguinair" );
	deepEqual( Stem("sannazaro"), "sannazaro" );
	deepEqual( Stem("sans"), "san" );
	deepEqual( Stem("sanseverina"), "sanseverin" );
	deepEqual( Stem("santal"), "santal" );
	deepEqual( Stem("santé"), "sant" );
	deepEqual( Stem("saper"), "sap" );
	deepEqual( Stem("sapin"), "sapin" );
	deepEqual( Stem("sapins"), "sapin" );
	deepEqual( Stem("sarà"), "sarà" );
	deepEqual( Stem("saragosse"), "saragoss" );
	deepEqual( Stem("sarasine"), "sarasin" );
	deepEqual( Stem("sarcasmes"), "sarcasm" );
	deepEqual( Stem("sardonique"), "sardon" );
	deepEqual( Stem("sarono"), "sarono" );
	deepEqual( Stem("sat"), "sat" );
	deepEqual( Stem("satiété"), "satiet" );
	deepEqual( Stem("satin"), "satin" );
	deepEqual( Stem("satirique"), "satir" );
	deepEqual( Stem("satiriques"), "satir" );
	deepEqual( Stem("satisfaction"), "satisfact" );
	deepEqual( Stem("satisfaire"), "satisfair" );
	deepEqual( Stem("satisfaisant"), "satisfais" );
	deepEqual( Stem("satisfait"), "satisf" );
	deepEqual( Stem("satisfera"), "satisf" );
	deepEqual( Stem("saturaient"), "satur" );
	deepEqual( Stem("saturée"), "satur" );
	deepEqual( Stem("sauce"), "sauc" );
	deepEqual( Stem("saucisses"), "sauc" );
	deepEqual( Stem("sauders"), "sauder" );
	deepEqual( Stem("sauf"), "sauf" );
	deepEqual( Stem("saugrenues"), "saugrenu" );
	deepEqual( Stem("saule"), "saul" );
	deepEqual( Stem("saules"), "saul" );
	deepEqual( Stem("saura"), "saur" );
	deepEqual( Stem("saurai"), "saur" );
	deepEqual( Stem("sauraient"), "saur" );
	deepEqual( Stem("saurais"), "saur" );
	deepEqual( Stem("saurait"), "saur" );
	deepEqual( Stem("saurez"), "saur" );
	deepEqual( Stem("sauriez"), "saur" );
	deepEqual( Stem("saurons"), "sauron" );
	deepEqual( Stem("sauront"), "sauront" );
	deepEqual( Stem("saut"), "saut" );
	deepEqual( Stem("sauta"), "saut" );
	deepEqual( Stem("sautait"), "saut" );
	deepEqual( Stem("sautant"), "saut" );
	deepEqual( Stem("saute"), "saut" );
	deepEqual( Stem("sauté"), "saut" );
	deepEqual( Stem("sauter"), "saut" );
	deepEqual( Stem("sauterai"), "saut" );
	deepEqual( Stem("sauterait"), "saut" );
	deepEqual( Stem("sautèrent"), "saut" );
	deepEqual( Stem("sautés"), "saut" );
	deepEqual( Stem("sauteur"), "sauteur" );
	deepEqual( Stem("sauteuse"), "sauteux" );
	deepEqual( Stem("sautillant"), "sautill" );
	deepEqual( Stem("sautoir"), "sautoir" );
	deepEqual( Stem("sauts"), "saut" );
	deepEqual( Stem("sauva"), "sauv" );
	deepEqual( Stem("sauvage"), "sauvag" );
	deepEqual( Stem("sauvages"), "sauvag" );
	deepEqual( Stem("sauvait"), "sauv" );
	deepEqual( Stem("sauvant"), "sauv" );
	deepEqual( Stem("sauve"), "sauv" );
	deepEqual( Stem("sauvé"), "sauv" );
	deepEqual( Stem("sauvée"), "sauv" );
	deepEqual( Stem("sauvegarder"), "sauvegard" );
	deepEqual( Stem("sauvent"), "sauvent" );
	deepEqual( Stem("sauver"), "sauv" );
	deepEqual( Stem("sauvera"), "sauv" );
	deepEqual( Stem("sauverai"), "sauv" );
	deepEqual( Stem("sauveraient"), "sauv" );
	deepEqual( Stem("sauveront"), "sauv" );
	deepEqual( Stem("sauvés"), "sauv" );
	deepEqual( Stem("sauveur"), "sauveur" );
	deepEqual( Stem("sauveurs"), "sauveur" );
	deepEqual( Stem("sauvez"), "sauv" );
	deepEqual( Stem("sauvions"), "sauvion" );
	deepEqual( Stem("sauvons"), "sauvon" );
	deepEqual( Stem("savaient"), "sav" );
	deepEqual( Stem("savais"), "sav" );
	deepEqual( Stem("savait"), "sav" );
	deepEqual( Stem("savamment"), "sav" );
	deepEqual( Stem("savant"), "sav" );
	deepEqual( Stem("savante"), "sav" );
	deepEqual( Stem("savantes"), "sav" );
	deepEqual( Stem("savants"), "sav" );
	deepEqual( Stem("savent"), "savent" );
	deepEqual( Stem("saveur"), "saveur" );
	deepEqual( Stem("savez"), "sav" );
	deepEqual( Stem("saviez"), "sav" );
	deepEqual( Stem("saville"), "savill" );
	deepEqual( Stem("savoir"), "savoir" );
	deepEqual( Stem("savons"), "savon" );
	deepEqual( Stem("saxe"), "sax" );
	deepEqual( Stem("saxon"), "saxon" );
	deepEqual( Stem("saxons"), "saxon" );
	deepEqual( Stem("sbires"), "sbir" );
	deepEqual( Stem("scabreuses"), "scabreux" );
	deepEqual( Stem("scabreux"), "scabreux" );
	deepEqual( Stem("scagliola"), "scagliol" );
	deepEqual( Stem("scala"), "scal" );
	deepEqual( Stem("scalpent"), "scalpent" );
	deepEqual( Stem("scandale"), "scandal" );
	deepEqual( Stem("scandaleuse"), "scandal" );
	deepEqual( Stem("scandalisaient"), "scandalis" );
	deepEqual( Stem("scandalisé"), "scandalis" );
	deepEqual( Stem("scandalisée"), "scandalis" );
	deepEqual( Stem("scandalisera"), "scandalis" );
	deepEqual( Stem("scandalisés"), "scandalis" );
	deepEqual( Stem("scandinavie"), "scandinav" );
	deepEqual( Stem("sceau"), "sceau" );
	deepEqual( Stem("sceaux"), "sceau" );
	deepEqual( Stem("scélérat"), "scélérat" );
	deepEqual( Stem("scélératesse"), "scélératess" );
	deepEqual( Stem("scélérats"), "scélérat" );
	deepEqual( Stem("scellé"), "scel" );
	deepEqual( Stem("scène"), "scen" );
	deepEqual( Stem("scènes"), "scen" );
	deepEqual( Stem("schiller"), "schill" );
	deepEqual( Stem("schuyler"), "schuyl" );
	deepEqual( Stem("sciant"), "sci" );
	deepEqual( Stem("scie"), "sci" );
	deepEqual( Stem("scié"), "sci" );
	deepEqual( Stem("sciemment"), "scient" );
	deepEqual( Stem("science"), "scienc" );
	deepEqual( Stem("sciences"), "scienc" );
	deepEqual( Stem("scier"), "sci" );
	deepEqual( Stem("scierie"), "scier" );
	deepEqual( Stem("scies"), "sci" );
	deepEqual( Stem("scieur"), "scieur" );
	deepEqual( Stem("scintillants"), "scintill" );
	deepEqual( Stem("scintillations"), "scintill" );
	deepEqual( Stem("scotland"), "scotland" );
	deepEqual( Stem("scott"), "scott" );
	deepEqual( Stem("scotti"), "scott" );
	deepEqual( Stem("scrupule"), "scrupul" );
	deepEqual( Stem("scrupules"), "scrupul" );
	deepEqual( Stem("scrupuleuse"), "scrupul" );
	deepEqual( Stem("scrupuleusement"), "scrupul" );
	deepEqual( Stem("scrutateur"), "scrutateur" );
	deepEqual( Stem("sculptée"), "sculpt" );
	deepEqual( Stem("sculptées"), "sculpt" );
	deepEqual( Stem("sculptés"), "sculpt" );
	deepEqual( Stem("sculpteur"), "sculpteur" );
	deepEqual( Stem("sculpteurs"), "sculpteur" );
	deepEqual( Stem("se"), "se" );
	deepEqual( Stem("séance"), "séanc" );
	deepEqual( Stem("sec"), "sec" );
	deepEqual( Stem("secatore"), "secator" );
	deepEqual( Stem("sèche"), "sech" );
	deepEqual( Stem("séché"), "sech" );
	deepEqual( Stem("séchée"), "sech" );
	deepEqual( Stem("sèchement"), "sech" );
	deepEqual( Stem("sécher"), "sech" );
	deepEqual( Stem("sécheresse"), "sécheress" );
	deepEqual( Stem("sèches"), "sech" );
	deepEqual( Stem("second"), "second" );
	deepEqual( Stem("secondaient"), "second" );
	deepEqual( Stem("seconde"), "second" );
	deepEqual( Stem("secondé"), "second" );
	deepEqual( Stem("secondent"), "secondent" );
	deepEqual( Stem("seconderait"), "second" );
	deepEqual( Stem("secondes"), "second" );
	deepEqual( Stem("secoua"), "secou" );
	deepEqual( Stem("secouaient"), "secou" );
	deepEqual( Stem("secouait"), "secou" );
	deepEqual( Stem("secouant"), "secou" );
	deepEqual( Stem("secoue"), "secou" );
	deepEqual( Stem("secouée"), "secou" );
	deepEqual( Stem("secoués"), "secou" );
	deepEqual( Stem("secourable"), "secour" );
	deepEqual( Stem("secourez"), "secour" );
	deepEqual( Stem("secourir"), "secour" );
	deepEqual( Stem("secours"), "secour" );
	deepEqual( Stem("secouru"), "secouru" );
	deepEqual( Stem("secousse"), "secouss" );
	deepEqual( Stem("secousses"), "secouss" );
	deepEqual( Stem("secret"), "secret" );
	deepEqual( Stem("secrétaire"), "secrétair" );
	deepEqual( Stem("secrétaires"), "secrétair" );
	deepEqual( Stem("secrète"), "secret" );
	deepEqual( Stem("secrètement"), "secret" );
	deepEqual( Stem("secrètes"), "secret" );
	deepEqual( Stem("secrets"), "secret" );
	deepEqual( Stem("secs"), "sec" );
	deepEqual( Stem("sectaire"), "sectair" );
	deepEqual( Stem("sectateur"), "sectateur" );
	deepEqual( Stem("sectateurs"), "sectateur" );
	deepEqual( Stem("secte"), "sect" );
	deepEqual( Stem("section"), "section" );
	deepEqual( Stem("séculaires"), "séculair" );
	deepEqual( Stem("secundo"), "secundo" );
	deepEqual( Stem("sécurité"), "sécur" );
	deepEqual( Stem("sédentaire"), "sédentair" );
	deepEqual( Stem("sedgwick"), "sedgwick" );
	deepEqual( Stem("sediola"), "sediol" );
	deepEqual( Stem("séditieuse"), "séditi" );
	deepEqual( Stem("séditieux"), "séditi" );
	deepEqual( Stem("sédition"), "sédit" );
	deepEqual( Stem("séducteur"), "séducteur" );
	deepEqual( Stem("séduction"), "séduct" );
	deepEqual( Stem("séductions"), "séduct" );
	deepEqual( Stem("séduire"), "séduir" );
	deepEqual( Stem("séduisait"), "séduis" );
	deepEqual( Stem("séduisant"), "séduis" );
	deepEqual( Stem("séduisante"), "séduis" );
	deepEqual( Stem("séduisants"), "séduis" );
	deepEqual( Stem("séduit"), "séduit" );
	deepEqual( Stem("séduite"), "séduit" );
	deepEqual( Stem("séduits"), "séduit" );
	deepEqual( Stem("segreto"), "segreto" );
	deepEqual( Stem("seigneur"), "seigneur" );
	deepEqual( Stem("seigneuries"), "seigneur" );
	deepEqual( Stem("seigneurs"), "seigneur" );
	deepEqual( Stem("sein"), "sein" );
	deepEqual( Stem("seine"), "sein" );
	deepEqual( Stem("seize"), "seiz" );
	deepEqual( Stem("séjour"), "séjour" );
	deepEqual( Stem("séjournait"), "séjourn" );
	deepEqual( Stem("séjournât"), "séjourn" );
	deepEqual( Stem("séjourner"), "séjourn" );
	deepEqual( Stem("sel"), "sel" );
	deepEqual( Stem("sella"), "sel" );
	deepEqual( Stem("selle"), "sel" );
	deepEqual( Stem("sellé"), "sel" );
	deepEqual( Stem("sellette"), "sellet" );
	deepEqual( Stem("selon"), "selon" );
	deepEqual( Stem("sema"), "sem" );
	deepEqual( Stem("semaine"), "semain" );
	deepEqual( Stem("semaines"), "semain" );
	deepEqual( Stem("sembla"), "sembl" );
	deepEqual( Stem("semblable"), "semblabl" );
	deepEqual( Stem("semblables"), "semblabl" );
	deepEqual( Stem("semblaient"), "sembl" );
	deepEqual( Stem("semblait"), "sembl" );
	deepEqual( Stem("semblant"), "sembl" );
	deepEqual( Stem("semblât"), "sembl" );
	deepEqual( Stem("semble"), "sembl" );
	deepEqual( Stem("semblé"), "sembl" );
	deepEqual( Stem("semblent"), "semblent" );
	deepEqual( Stem("sembler"), "sembl" );
	deepEqual( Stem("semblera"), "sembl" );
	deepEqual( Stem("semblerait"), "sembl" );
	deepEqual( Stem("semblèrent"), "sembl" );
	deepEqual( Stem("semblez"), "sembl" );
	deepEqual( Stem("sème"), "sem" );
	deepEqual( Stem("semé"), "sem" );
	deepEqual( Stem("semée"), "sem" );
	deepEqual( Stem("semées"), "sem" );
	deepEqual( Stem("semelle"), "semel" );
	deepEqual( Stem("semelles"), "semel" );
	deepEqual( Stem("semer"), "sem" );
	deepEqual( Stem("semés"), "sem" );
	deepEqual( Stem("semez"), "sem" );
	deepEqual( Stem("semi"), "sem" );
	deepEqual( Stem("sémillant"), "sémill" );
	deepEqual( Stem("sémillante"), "sémill" );
	deepEqual( Stem("séminaire"), "séminair" );
	deepEqual( Stem("séminariste"), "séminar" );
	deepEqual( Stem("séminaristes"), "séminar" );
	deepEqual( Stem("sempans"), "sempan" );
	deepEqual( Stem("sens"), "sen" );
	deepEqual( Stem("sensation"), "sensat" );
	deepEqual( Stem("sensations"), "sensat" );
	deepEqual( Stem("sensée"), "sens" );
	deepEqual( Stem("sensés"), "sens" );
	deepEqual( Stem("sensibilité"), "sensibil" );
	deepEqual( Stem("sensible"), "sensibl" );
	deepEqual( Stem("sensiblement"), "sensibl" );
	deepEqual( Stem("sensibles"), "sensibl" );
	deepEqual( Stem("sent"), "sent" );
	deepEqual( Stem("sentaient"), "sent" );
	deepEqual( Stem("sentais"), "sent" );
	deepEqual( Stem("sentait"), "sent" );
	deepEqual( Stem("sentant"), "sent" );
	deepEqual( Stem("sentence"), "sentenc" );
	deepEqual( Stem("sentences"), "sentenc" );
	deepEqual( Stem("sentent"), "sentent" );
	deepEqual( Stem("sentez"), "sent" );
	deepEqual( Stem("senti"), "sent" );
	deepEqual( Stem("sentie"), "sent" );
	deepEqual( Stem("sentier"), "senti" );
	deepEqual( Stem("sentiers"), "senti" );
	deepEqual( Stem("senties"), "sent" );
	deepEqual( Stem("sentiment"), "sent" );
	deepEqual( Stem("sentimentale"), "sentimental" );
	deepEqual( Stem("sentimentales"), "sentimental" );
	deepEqual( Stem("sentiments"), "sent" );
	deepEqual( Stem("sentinelle"), "sentinel" );
	deepEqual( Stem("sentinelles"), "sentinel" );
	deepEqual( Stem("sentir"), "sent" );
	deepEqual( Stem("sentira"), "sent" );
	deepEqual( Stem("sentirez"), "sent" );
	deepEqual( Stem("sentisses"), "sent" );
	deepEqual( Stem("sentit"), "sent" );
	deepEqual( Stem("sépara"), "sépar" );
	deepEqual( Stem("séparaient"), "sépar" );
	deepEqual( Stem("séparait"), "sépar" );
	deepEqual( Stem("séparant"), "sépar" );
	deepEqual( Stem("séparation"), "sépar" );
	deepEqual( Stem("sépare"), "sépar" );
	deepEqual( Stem("séparé"), "sépar" );
	deepEqual( Stem("séparée"), "sépar" );
	deepEqual( Stem("séparées"), "sépar" );
	deepEqual( Stem("séparent"), "séparent" );
	deepEqual( Stem("séparer"), "sépar" );
	deepEqual( Stem("séparera"), "sépar" );
	deepEqual( Stem("séparés"), "sépar" );
	deepEqual( Stem("séparons"), "séparon" );
	deepEqual( Stem("sept"), "sept" );
	deepEqual( Stem("septembre"), "septembr" );
	deepEqual( Stem("septentrional"), "septentrional" );
	deepEqual( Stem("septentrionale"), "septentrional" );
	deepEqual( Stem("septentrionales"), "septentrional" );
	deepEqual( Stem("septième"), "septiem" );
	deepEqual( Stem("sequin"), "sequin" );
	deepEqual( Stem("sequins"), "sequin" );
	deepEqual( Stem("sera"), "ser" );
	deepEqual( Stem("serai"), "ser" );
	deepEqual( Stem("seraient"), "ser" );
	deepEqual( Stem("sérail"), "sérail" );
	deepEqual( Stem("serais"), "ser" );
	deepEqual( Stem("serait"), "ser" );
	deepEqual( Stem("seras"), "ser" );
	deepEqual( Stem("sérénade"), "sérénad" );
	deepEqual( Stem("sérénades"), "sérénad" );
	deepEqual( Stem("sérénissime"), "sérénissim" );
	deepEqual( Stem("sérénité"), "séren" );
	deepEqual( Stem("serez"), "ser" );
	deepEqual( Stem("sergent"), "sergent" );
	deepEqual( Stem("série"), "ser" );
	deepEqual( Stem("sérieuse"), "sérieux" );
	deepEqual( Stem("serieusement"), "serieux" );
	deepEqual( Stem("sérieusement"), "sérieux" );
	deepEqual( Stem("sérieuses"), "sérieux" );
	deepEqual( Stem("sérieux"), "sérieux" );
	deepEqual( Stem("seriez"), "ser" );
	deepEqual( Stem("serions"), "serion" );
	deepEqual( Stem("serious"), "serious" );
	deepEqual( Stem("serment"), "serment" );
	deepEqual( Stem("serments"), "serment" );
	deepEqual( Stem("sermon"), "sermon" );
	deepEqual( Stem("sermons"), "sermon" );
	deepEqual( Stem("serons"), "seron" );
	deepEqual( Stem("seront"), "seront" );
	deepEqual( Stem("serpent"), "serpent" );
	deepEqual( Stem("serpentent"), "serpentent" );
	deepEqual( Stem("serpents"), "serpent" );
	deepEqual( Stem("serpolet"), "serpolet" );
	deepEqual( Stem("serra"), "serr" );
	deepEqual( Stem("serraient"), "serr" );
	deepEqual( Stem("serrait"), "serr" );
	deepEqual( Stem("serrant"), "serr" );
	deepEqual( Stem("serre"), "serr" );
	deepEqual( Stem("serré"), "serr" );
	deepEqual( Stem("serrée"), "serr" );
	deepEqual( Stem("serrées"), "serr" );
	deepEqual( Stem("serrements"), "serr" );
	deepEqual( Stem("serrent"), "serrent" );
	deepEqual( Stem("serrer"), "serr" );
	deepEqual( Stem("serrèrent"), "serr" );
	deepEqual( Stem("serres"), "serr" );
	deepEqual( Stem("serrés"), "serr" );
	deepEqual( Stem("serrure"), "serrur" );
	deepEqual( Stem("serrures"), "serrur" );
	deepEqual( Stem("serrurier"), "serruri" );
	deepEqual( Stem("sert"), "sert" );
	deepEqual( Stem("servaient"), "serv" );
	deepEqual( Stem("servais"), "serv" );
	deepEqual( Stem("servait"), "serv" );
	deepEqual( Stem("servant"), "serv" );
	deepEqual( Stem("servante"), "serv" );
	deepEqual( Stem("serve"), "serv" );
	deepEqual( Stem("servent"), "servent" );
	deepEqual( Stem("servi"), "serv" );
	deepEqual( Stem("serviable"), "serviabl" );
	deepEqual( Stem("service"), "servic" );
	deepEqual( Stem("services"), "servic" );
	deepEqual( Stem("servie"), "serv" );
	deepEqual( Stem("serviettes"), "serviet" );
	deepEqual( Stem("servilement"), "servil" );
	deepEqual( Stem("servir"), "serv" );
	deepEqual( Stem("servira"), "serv" );
	deepEqual( Stem("servirai"), "serv" );
	deepEqual( Stem("serviraient"), "serv" );
	deepEqual( Stem("servirait"), "serv" );
	deepEqual( Stem("servirez"), "serv" );
	deepEqual( Stem("servis"), "serv" );
	deepEqual( Stem("servit"), "serv" );
	deepEqual( Stem("serviteur"), "serviteur" );
	deepEqual( Stem("serviteurs"), "serviteur" );
	deepEqual( Stem("ses"), "se" );
	deepEqual( Stem("session"), "session" );
	deepEqual( Stem("seuil"), "seuil" );
	deepEqual( Stem("seul"), "seul" );
	deepEqual( Stem("seule"), "seul" );
	deepEqual( Stem("seulement"), "seul" );
	deepEqual( Stem("seules"), "seul" );
	deepEqual( Stem("seuls"), "seul" );
	deepEqual( Stem("sévère"), "séver" );
	deepEqual( Stem("sévèrement"), "séver" );
	deepEqual( Stem("sévères"), "séver" );
	deepEqual( Stem("sévérité"), "séver" );
	deepEqual( Stem("sévérités"), "séver" );
	deepEqual( Stem("sexagésimales"), "sexagésimal" );
	deepEqual( Stem("sexe"), "sex" );
	deepEqual( Stem("sexes"), "sex" );
	deepEqual( Stem("sfondrata"), "sfondrat" );
	deepEqual( Stem("sforce"), "sforc" );
	deepEqual( Stem("sforze"), "sforz" );
	deepEqual( Stem("shako"), "shako" );
	deepEqual( Stem("shakos"), "shakos" );
	deepEqual( Stem("shakspeare"), "shakspear" );
	deepEqual( Stem("shangaï"), "shangaï" );
	deepEqual( Stem("sheppard"), "sheppard" );
	deepEqual( Stem("sheridan"), "sheridan" );
	deepEqual( Stem("sherry"), "sherry" );
	deepEqual( Stem("shilling"), "shilling" );
	deepEqual( Stem("shillings"), "shilling" );
	deepEqual( Stem("shipping"), "shipping" );
	deepEqual( Stem("shiva"), "shiv" );
	deepEqual( Stem("shows"), "show" );
	deepEqual( Stem("si"), "si" );
	deepEqual( Stem("siamo"), "siamo" );
	deepEqual( Stem("siècle"), "siecl" );
	deepEqual( Stem("siècles"), "siecl" );
	deepEqual( Stem("siège"), "sieg" );
	deepEqual( Stem("sièges"), "sieg" );
	deepEqual( Stem("sien"), "sien" );
	deepEqual( Stem("sienne"), "sien" );
	deepEqual( Stem("siennes"), "sien" );
	deepEqual( Stem("siens"), "sien" );
	deepEqual( Stem("sierra"), "sierr" );
	deepEqual( Stem("sieste"), "siest" );
	deepEqual( Stem("sieur"), "sieur" );
	deepEqual( Stem("sieyès"), "sieyes" );
	deepEqual( Stem("siffla"), "siffl" );
	deepEqual( Stem("sifflaient"), "siffl" );
	deepEqual( Stem("sifflait"), "siffl" );
	deepEqual( Stem("sifflant"), "siffl" );
	deepEqual( Stem("sifflement"), "siffl" );
	deepEqual( Stem("sifflements"), "siffl" );
	deepEqual( Stem("siffler"), "siffl" );
	deepEqual( Stem("sifflet"), "sifflet" );
	deepEqual( Stem("sifflets"), "sifflet" );
	deepEqual( Stem("sighs"), "sigh" );
	deepEqual( Stem("sigisbée"), "sigisb" );
	deepEqual( Stem("sigismond"), "sigismond" );
	deepEqual( Stem("signa"), "sign" );
	deepEqual( Stem("signait"), "sign" );
	deepEqual( Stem("signal"), "signal" );
	deepEqual( Stem("signala"), "signal" );
	deepEqual( Stem("signale"), "signal" );
	deepEqual( Stem("signalé"), "signal" );
	deepEqual( Stem("signalée"), "signal" );
	deepEqual( Stem("signalement"), "signal" );
	deepEqual( Stem("signalements"), "signal" );
	deepEqual( Stem("signaler"), "signal" );
	deepEqual( Stem("signalerait"), "signal" );
	deepEqual( Stem("signant"), "sign" );
	deepEqual( Stem("signature"), "signatur" );
	deepEqual( Stem("signaux"), "signal" );
	deepEqual( Stem("signe"), "sign" );
	deepEqual( Stem("signé"), "sign" );
	deepEqual( Stem("signée"), "sign" );
	deepEqual( Stem("signées"), "sign" );
	deepEqual( Stem("signer"), "sign" );
	deepEqual( Stem("signera"), "sign" );
	deepEqual( Stem("signerai"), "sign" );
	deepEqual( Stem("signes"), "sign" );
	deepEqual( Stem("signets"), "signet" );
	deepEqual( Stem("signez"), "sign" );
	deepEqual( Stem("signifiait"), "signifi" );
	deepEqual( Stem("significatif"), "signif" );
	deepEqual( Stem("signification"), "signif" );
	deepEqual( Stem("significative"), "signif" );
	deepEqual( Stem("significatives"), "signif" );
	deepEqual( Stem("signifie"), "signif" );
	deepEqual( Stem("signifier"), "signifi" );
	deepEqual( Stem("signor"), "signor" );
	deepEqual( Stem("signora"), "signor" );
	deepEqual( Stem("signorino"), "signorino" );
	deepEqual( Stem("silence"), "silenc" );
	deepEqual( Stem("silencieuse"), "silenci" );
	deepEqual( Stem("silencieusement"), "silenci" );
	deepEqual( Stem("silencieux"), "silenci" );
	deepEqual( Stem("silhouette"), "silhouet" );
	deepEqual( Stem("sillonnaient"), "sillon" );
	deepEqual( Stem("sillonne"), "sillon" );
	deepEqual( Stem("sillonné"), "sillon" );
	deepEqual( Stem("sillonnés"), "sillon" );
	deepEqual( Stem("sillons"), "sillon" );
	deepEqual( Stem("simagrées"), "simagr" );
	deepEqual( Stem("simon"), "simon" );
	deepEqual( Stem("simonie"), "simon" );
	deepEqual( Stem("simple"), "simpl" );
	deepEqual( Stem("simplement"), "simpl" );
	deepEqual( Stem("simples"), "simpl" );
	deepEqual( Stem("simplicité"), "simpliqu" );
	deepEqual( Stem("simplifiée"), "simplifi" );
	deepEqual( Stem("simule"), "simul" );
	deepEqual( Stem("sinant"), "sin" );
	deepEqual( Stem("since"), "sinc" );
	deepEqual( Stem("sincère"), "sincer" );
	deepEqual( Stem("sincèrement"), "sincer" );
	deepEqual( Stem("sincères"), "sincer" );
	deepEqual( Stem("sincérité"), "sincer" );
	deepEqual( Stem("sindes"), "sind" );
	deepEqual( Stem("sine"), "sin" );
	deepEqual( Stem("sinécures"), "sinécur" );
	deepEqual( Stem("singapore"), "singapor" );
	deepEqual( Stem("singe"), "sing" );
	deepEqual( Stem("singeries"), "singer" );
	deepEqual( Stem("singes"), "sing" );
	deepEqual( Stem("singularité"), "singular" );
	deepEqual( Stem("singularités"), "singular" );
	deepEqual( Stem("singulier"), "singuli" );
	deepEqual( Stem("singulière"), "singuli" );
	deepEqual( Stem("singulièrement"), "singuli" );
	deepEqual( Stem("singulières"), "singuli" );
	deepEqual( Stem("singuliers"), "singuli" );
	deepEqual( Stem("sinistre"), "sinistr" );
	deepEqual( Stem("sinistres"), "sinistr" );
	deepEqual( Stem("sinon"), "sinon" );
	deepEqual( Stem("sinuosités"), "sinuos" );
	deepEqual( Stem("sioux"), "sioux" );
	deepEqual( Stem("sir"), "sir" );
	deepEqual( Stem("sire"), "sir" );
	deepEqual( Stem("site"), "sit" );
	deepEqual( Stem("sites"), "sit" );
	deepEqual( Stem("sitôt"), "sitôt" );
	deepEqual( Stem("situation"), "situat" );
	deepEqual( Stem("situé"), "situ" );
	deepEqual( Stem("située"), "situ" );
	deepEqual( Stem("situés"), "situ" );
	deepEqual( Stem("six"), "six" );
	deepEqual( Stem("sixième"), "sixiem" );
	deepEqual( Stem("sixte"), "sixt" );
	deepEqual( Stem("sixtine"), "sixtin" );
	deepEqual( Stem("sky"), "sky" );
	deepEqual( Stem("sleeping"), "sleeping" );
	deepEqual( Stem("slight"), "slight" );
	deepEqual( Stem("sloop"), "sloop" );
	deepEqual( Stem("small"), "small" );
	deepEqual( Stem("smith"), "smith" );
	deepEqual( Stem("smollett"), "smollet" );
	deepEqual( Stem("smyth"), "smyth" );
	deepEqual( Stem("so"), "so" );
	deepEqual( Stem("social"), "social" );
	deepEqual( Stem("sociale"), "social" );
	deepEqual( Stem("sociales"), "social" );
	deepEqual( Stem("sociaux"), "social" );
	deepEqual( Stem("société"), "societ" );
	deepEqual( Stem("sociétés"), "societ" );
	deepEqual( Stem("socques"), "socqu" );
	deepEqual( Stem("soeur"), "soeur" );
	deepEqual( Stem("soeurs"), "soeur" );
	deepEqual( Stem("soi"), "soi" );
	deepEqual( Stem("soie"), "soi" );
	deepEqual( Stem("soient"), "soient" );
	deepEqual( Stem("soif"), "soif" );
	deepEqual( Stem("soigna"), "soign" );
	deepEqual( Stem("soignait"), "soign" );
	deepEqual( Stem("soignant"), "soign" );
	deepEqual( Stem("soigne"), "soign" );
	deepEqual( Stem("soigné"), "soign" );
	deepEqual( Stem("soignée"), "soign" );
	deepEqual( Stem("soigner"), "soign" );
	deepEqual( Stem("soignés"), "soign" );
	deepEqual( Stem("soigneusement"), "soigneux" );
	deepEqual( Stem("soigneux"), "soigneux" );
	deepEqual( Stem("soin"), "soin" );
	deepEqual( Stem("soins"), "soin" );
	deepEqual( Stem("soir"), "soir" );
	deepEqual( Stem("soirée"), "soir" );
	deepEqual( Stem("soirées"), "soir" );
	deepEqual( Stem("soirs"), "soir" );
	deepEqual( Stem("sois"), "sois" );
	deepEqual( Stem("soissons"), "soisson" );
	deepEqual( Stem("soit"), "soit" );
	deepEqual( Stem("soixante"), "soix" );
	deepEqual( Stem("soixantième"), "soixantiem" );
	deepEqual( Stem("sol"), "sol" );
	deepEqual( Stem("solaire"), "solair" );
	deepEqual( Stem("soldant"), "sold" );
	deepEqual( Stem("soldat"), "soldat" );
	deepEqual( Stem("soldats"), "soldat" );
	deepEqual( Stem("solde"), "sold" );
	deepEqual( Stem("soldé"), "sold" );
	deepEqual( Stem("soldés"), "sold" );
	deepEqual( Stem("soleil"), "soleil" );
	deepEqual( Stem("solennel"), "solennel" );
	deepEqual( Stem("solennelle"), "solennel" );
	deepEqual( Stem("solennels"), "solennel" );
	deepEqual( Stem("solide"), "solid" );
	deepEqual( Stem("solidement"), "solid" );
	deepEqual( Stem("solides"), "solid" );
	deepEqual( Stem("solidité"), "solid" );
	deepEqual( Stem("solitaire"), "solitair" );
	deepEqual( Stem("solitaires"), "solitair" );
	deepEqual( Stem("solitude"), "solitud" );
	deepEqual( Stem("sollicita"), "sollicit" );
	deepEqual( Stem("sollicitait"), "sollicit" );
	deepEqual( Stem("sollicitations"), "sollicit" );
	deepEqual( Stem("sollicite"), "sollicit" );
	deepEqual( Stem("sollicité"), "solliqu" );
	deepEqual( Stem("solliciter"), "sollicit" );
	deepEqual( Stem("solliciteur"), "solliciteur" );
	deepEqual( Stem("sollicitez"), "sollicit" );
	deepEqual( Stem("sols"), "sol" );
	deepEqual( Stem("solution"), "solut" );
	deepEqual( Stem("somanlis"), "somanl" );
	deepEqual( Stem("sombre"), "sombr" );
	deepEqual( Stem("sombrer"), "sombr" );
	deepEqual( Stem("sombreros"), "sombreros" );
	deepEqual( Stem("sombres"), "sombr" );
	deepEqual( Stem("sommaire"), "sommair" );
	deepEqual( Stem("sommariva"), "sommariv" );
	deepEqual( Stem("sommation"), "sommat" );
	deepEqual( Stem("somme"), "somm" );
	deepEqual( Stem("sommeil"), "sommeil" );
	deepEqual( Stem("sommeillait"), "sommeil" );
	deepEqual( Stem("sommer"), "somm" );
	deepEqual( Stem("sommes"), "somm" );
	deepEqual( Stem("sommet"), "sommet" );
	deepEqual( Stem("sommets"), "sommet" );
	deepEqual( Stem("sommités"), "sommit" );
	deepEqual( Stem("somptueuse"), "somptueux" );
	deepEqual( Stem("somptueusement"), "somptueux" );
	deepEqual( Stem("somptueux"), "somptueux" );
	deepEqual( Stem("somptuosité"), "somptuos" );
	deepEqual( Stem("son"), "son" );
	deepEqual( Stem("sonder"), "sond" );
	deepEqual( Stem("songe"), "song" );
	deepEqual( Stem("songé"), "song" );
	deepEqual( Stem("songea"), "song" );
	deepEqual( Stem("songeaient"), "song" );
	deepEqual( Stem("songeais"), "song" );
	deepEqual( Stem("songeait"), "song" );
	deepEqual( Stem("songeant"), "song" );
	deepEqual( Stem("songeât"), "song" );
	deepEqual( Stem("songent"), "songent" );
	deepEqual( Stem("songeons"), "songeon" );
	deepEqual( Stem("songer"), "song" );
	deepEqual( Stem("songera"), "song" );
	deepEqual( Stem("songerai"), "song" );
	deepEqual( Stem("songerait"), "song" );
	deepEqual( Stem("songèrent"), "song" );
	deepEqual( Stem("songes"), "song" );
	deepEqual( Stem("songez"), "song" );
	deepEqual( Stem("sonna"), "son" );
	deepEqual( Stem("sonnaient"), "son" );
	deepEqual( Stem("sonnait"), "son" );
	deepEqual( Stem("sonnant"), "son" );
	deepEqual( Stem("sonnât"), "son" );
	deepEqual( Stem("sonne"), "son" );
	deepEqual( Stem("sonné"), "son" );
	deepEqual( Stem("sonnée"), "son" );
	deepEqual( Stem("sonnées"), "son" );
	deepEqual( Stem("sonner"), "son" );
	deepEqual( Stem("sonnera"), "son" );
	deepEqual( Stem("sonnèrent"), "son" );
	deepEqual( Stem("sonneries"), "sonner" );
	deepEqual( Stem("sonneront"), "son" );
	deepEqual( Stem("sonnés"), "son" );
	deepEqual( Stem("sonnet"), "sonnet" );
	deepEqual( Stem("sonnets"), "sonnet" );
	deepEqual( Stem("sonnette"), "sonnet" );
	deepEqual( Stem("sonnettes"), "sonnet" );
	deepEqual( Stem("sonneurs"), "sonneur" );
	deepEqual( Stem("sonore"), "sonor" );
	deepEqual( Stem("sonores"), "sonor" );
	deepEqual( Stem("sons"), "son" );
	deepEqual( Stem("sont"), "sont" );
	deepEqual( Stem("sorbonne"), "sorbon" );
	deepEqual( Stem("sorcier"), "sorci" );
	deepEqual( Stem("sordide"), "sordid" );
	deepEqual( Stem("sorel"), "sorel" );
	deepEqual( Stem("sorezana"), "sorezan" );
	deepEqual( Stem("sorgho"), "sorgho" );
	deepEqual( Stem("sors"), "sor" );
	deepEqual( Stem("sort"), "sort" );
	deepEqual( Stem("sortaient"), "sort" );
	deepEqual( Stem("sortais"), "sort" );
	deepEqual( Stem("sortait"), "sort" );
	deepEqual( Stem("sortant"), "sort" );
	deepEqual( Stem("sorte"), "sort" );
	deepEqual( Stem("sortent"), "sortent" );
	deepEqual( Stem("sortes"), "sort" );
	deepEqual( Stem("sortez"), "sort" );
	deepEqual( Stem("sorti"), "sort" );
	deepEqual( Stem("sortie"), "sort" );
	deepEqual( Stem("sortiez"), "sort" );
	deepEqual( Stem("sortir"), "sort" );
	deepEqual( Stem("sortira"), "sort" );
	deepEqual( Stem("sortirai"), "sort" );
	deepEqual( Stem("sortirais"), "sort" );
	deepEqual( Stem("sortirait"), "sort" );
	deepEqual( Stem("sortiras"), "sort" );
	deepEqual( Stem("sortirent"), "sort" );
	deepEqual( Stem("sortirez"), "sort" );
	deepEqual( Stem("sortirions"), "sort" );
	deepEqual( Stem("sortirons"), "sort" );
	deepEqual( Stem("sortis"), "sort" );
	deepEqual( Stem("sortit"), "sort" );
	deepEqual( Stem("sortît"), "sort" );
	deepEqual( Stem("sorts"), "sort" );
	deepEqual( Stem("sot"), "sot" );
	deepEqual( Stem("sots"), "sot" );
	deepEqual( Stem("sotte"), "sott" );
	deepEqual( Stem("sottement"), "sott" );
	deepEqual( Stem("sottes"), "sott" );
	deepEqual( Stem("sottise"), "sottis" );
	deepEqual( Stem("sottises"), "sottis" );
	deepEqual( Stem("sou"), "sou" );
	deepEqual( Stem("soubrette"), "soubret" );
	deepEqual( Stem("souci"), "souc" );
	deepEqual( Stem("soucia"), "souci" );
	deepEqual( Stem("souciait"), "souci" );
	deepEqual( Stem("soucier"), "souci" );
	deepEqual( Stem("soucieuse"), "soucieux" );
	deepEqual( Stem("soucieux"), "soucieux" );
	deepEqual( Stem("soucis"), "souc" );
	deepEqual( Stem("soudain"), "soudain" );
	deepEqual( Stem("soudaine"), "soudain" );
	deepEqual( Stem("soudainement"), "soudain" );
	deepEqual( Stem("souffert"), "souffert" );
	deepEqual( Stem("souffla"), "souffl" );
	deepEqual( Stem("soufflait"), "souffl" );
	deepEqual( Stem("soufflant"), "souffl" );
	deepEqual( Stem("souffle"), "souffl" );
	deepEqual( Stem("soufflent"), "soufflent" );
	deepEqual( Stem("souffler"), "souffl" );
	deepEqual( Stem("soufflet"), "soufflet" );
	deepEqual( Stem("soufflets"), "soufflet" );
	deepEqual( Stem("souffleur"), "souffleur" );
	deepEqual( Stem("souffrais"), "souffr" );
	deepEqual( Stem("souffrait"), "souffr" );
	deepEqual( Stem("souffrance"), "souffranc" );
	deepEqual( Stem("souffrances"), "souffranc" );
	deepEqual( Stem("souffrant"), "souffr" );
	deepEqual( Stem("souffrante"), "souffr" );
	deepEqual( Stem("souffre"), "souffr" );
	deepEqual( Stem("souffrent"), "souffrent" );
	deepEqual( Stem("souffres"), "souffr" );
	deepEqual( Stem("souffrez"), "souffr" );
	deepEqual( Stem("souffrir"), "souffr" );
	deepEqual( Stem("souffrira"), "souffr" );
	deepEqual( Stem("souffrirai"), "souffr" );
	deepEqual( Stem("souffrirais"), "souffr" );
	deepEqual( Stem("souffriras"), "souffr" );
	deepEqual( Stem("souffrissent"), "souffr" );
	deepEqual( Stem("souffrit"), "souffr" );
	deepEqual( Stem("souhait"), "souh" );
	deepEqual( Stem("souhaitant"), "souhait" );
	deepEqual( Stem("souhaite"), "souhait" );
	deepEqual( Stem("souhaité"), "souhait" );
	deepEqual( Stem("souillé"), "souill" );
	deepEqual( Stem("souiller"), "souill" );
	deepEqual( Stem("soulagé"), "soulag" );
	deepEqual( Stem("soulagée"), "soulag" );
	deepEqual( Stem("soulagement"), "soulag" );
	deepEqual( Stem("soulcy"), "soulcy" );
	deepEqual( Stem("souleva"), "soulev" );
	deepEqual( Stem("soulevait"), "soulev" );
	deepEqual( Stem("soulevant"), "soulev" );
	deepEqual( Stem("soulevée"), "soulev" );
	deepEqual( Stem("soulevées"), "soulev" );
	deepEqual( Stem("soulèvent"), "soulèvent" );
	deepEqual( Stem("soulever"), "soulev" );
	deepEqual( Stem("soulèverai"), "soulev" );
	deepEqual( Stem("soulier"), "souli" );
	deepEqual( Stem("souliers"), "souli" );
	deepEqual( Stem("soulte"), "soult" );
	deepEqual( Stem("soumettait"), "soumet" );
	deepEqual( Stem("soumettre"), "soumettr" );
	deepEqual( Stem("soumis"), "soum" );
	deepEqual( Stem("soumise"), "soumis" );
	deepEqual( Stem("soumises"), "soumis" );
	deepEqual( Stem("soumission"), "soumiss" );
	deepEqual( Stem("soumit"), "soum" );
	deepEqual( Stem("soupait"), "soup" );
	deepEqual( Stem("soupapes"), "soupap" );
	deepEqual( Stem("soupçon"), "soupçon" );
	deepEqual( Stem("soupçonna"), "soupçon" );
	deepEqual( Stem("soupçonnaient"), "soupçon" );
	deepEqual( Stem("soupçonnait"), "soupçon" );
	deepEqual( Stem("soupçonne"), "soupçon" );
	deepEqual( Stem("soupçonné"), "soupçon" );
	deepEqual( Stem("soupçonnée"), "soupçon" );
	deepEqual( Stem("soupçonner"), "soupçon" );
	deepEqual( Stem("soupçonnés"), "soupçon" );
	deepEqual( Stem("soupçonneux"), "soupçon" );
	deepEqual( Stem("soupçons"), "soupçon" );
	deepEqual( Stem("soupe"), "soup" );
	deepEqual( Stem("soupé"), "soup" );
	deepEqual( Stem("souper"), "soup" );
	deepEqual( Stem("soupers"), "souper" );
	deepEqual( Stem("soupez"), "soup" );
	deepEqual( Stem("soupir"), "soup" );
	deepEqual( Stem("soupirant"), "soupir" );
	deepEqual( Stem("soupire"), "soupir" );
	deepEqual( Stem("soupirer"), "soupir" );
	deepEqual( Stem("souple"), "soupl" );
	deepEqual( Stem("souplesse"), "soupless" );
	deepEqual( Stem("source"), "sourc" );
	deepEqual( Stem("sources"), "sourc" );
	deepEqual( Stem("sourcil"), "sourcil" );
	deepEqual( Stem("sourciliers"), "sourcili" );
	deepEqual( Stem("sourcilla"), "sourcill" );
	deepEqual( Stem("sourcillé"), "sourcill" );
	deepEqual( Stem("sourciller"), "sourcill" );
	deepEqual( Stem("sourcils"), "sourcil" );
	deepEqual( Stem("sourd"), "sourd" );
	deepEqual( Stem("sourde"), "sourd" );
	deepEqual( Stem("souri"), "sour" );
	deepEqual( Stem("souriait"), "souri" );
	deepEqual( Stem("souriant"), "souri" );
	deepEqual( Stem("souriante"), "souri" );
	deepEqual( Stem("souriantes"), "souri" );
	deepEqual( Stem("sourire"), "sourir" );
	deepEqual( Stem("sourires"), "sourir" );
	deepEqual( Stem("sourit"), "sour" );
	deepEqual( Stem("sournois"), "sournois" );
	deepEqual( Stem("sournoise"), "sournois" );
	deepEqual( Stem("sous"), "sous" );
	deepEqual( Stem("soustrairais"), "soustrair" );
	deepEqual( Stem("soustraire"), "soustrair" );
	deepEqual( Stem("soustrait"), "soustr" );
	deepEqual( Stem("soutane"), "soutan" );
	deepEqual( Stem("soutenaient"), "souten" );
	deepEqual( Stem("soutenait"), "souten" );
	deepEqual( Stem("soutenant"), "souten" );
	deepEqual( Stem("soutènement"), "souten" );
	deepEqual( Stem("soutenir"), "souten" );
	deepEqual( Stem("soutenu"), "soutenu" );
	deepEqual( Stem("soutenue"), "soutenu" );
	deepEqual( Stem("soutenues"), "soutenu" );
	deepEqual( Stem("souterrain"), "souterrain" );
	deepEqual( Stem("souterraines"), "souterrain" );
	deepEqual( Stem("soutes"), "sout" );
	deepEqual( Stem("south"), "south" );
	deepEqual( Stem("southampton"), "southampton" );
	deepEqual( Stem("southey"), "southey" );
	deepEqual( Stem("soutiennent"), "soutiennent" );
	deepEqual( Stem("soutiens"), "soutien" );
	deepEqual( Stem("soutient"), "soutient" );
	deepEqual( Stem("soutint"), "soutint" );
	deepEqual( Stem("souvenaient"), "souven" );
	deepEqual( Stem("souvenait"), "souven" );
	deepEqual( Stem("souvenant"), "souven" );
	deepEqual( Stem("souvenez"), "souven" );
	deepEqual( Stem("souvenir"), "souven" );
	deepEqual( Stem("souvenirs"), "souvenir" );
	deepEqual( Stem("souvent"), "souvent" );
	deepEqual( Stem("souvenus"), "souvenus" );
	deepEqual( Stem("souverain"), "souverain" );
	deepEqual( Stem("souveraine"), "souverain" );
	deepEqual( Stem("souverainement"), "souverain" );
	deepEqual( Stem("souveraineté"), "souverainet" );
	deepEqual( Stem("souverains"), "souverain" );
	deepEqual( Stem("souviendra"), "souviendr" );
	deepEqual( Stem("souviendrez"), "souviendr" );
	deepEqual( Stem("souvienne"), "souvien" );
	deepEqual( Stem("souviennent"), "souviennent" );
	deepEqual( Stem("souviens"), "souvien" );
	deepEqual( Stem("souvient"), "souvient" );
	deepEqual( Stem("souvint"), "souvint" );
	deepEqual( Stem("soyeux"), "soyeux" );
	deepEqual( Stem("soyez"), "soi" );
	deepEqual( Stem("soyons"), "soyon" );
	deepEqual( Stem("spardeck"), "spardeck" );
	deepEqual( Stem("speak"), "speak" );
	deepEqual( Stem("spécial"), "spécial" );
	deepEqual( Stem("spéciale"), "spécial" );
	deepEqual( Stem("spécialement"), "spécial" );
	deepEqual( Stem("spécialité"), "spécial" );
	deepEqual( Stem("spécifier"), "spécifi" );
	deepEqual( Stem("spécifique"), "spécif" );
	deepEqual( Stem("spectacle"), "spectacl" );
	deepEqual( Stem("spectacles"), "spectacl" );
	deepEqual( Stem("spectateur"), "spectateur" );
	deepEqual( Stem("spectateurs"), "spectateur" );
	deepEqual( Stem("spectrale"), "spectral" );
	deepEqual( Stem("spectre"), "spectr" );
	deepEqual( Stem("spéculation"), "spécul" );
	deepEqual( Stem("spéculations"), "spécul" );
	deepEqual( Stem("speedy"), "speedy" );
	deepEqual( Stem("sphère"), "spher" );
	deepEqual( Stem("sphéroïde"), "sphéroïd" );
	deepEqual( Stem("spielberg"), "spielberg" );
	deepEqual( Stem("spirale"), "spiral" );
	deepEqual( Stem("spirales"), "spiral" );
	deepEqual( Stem("spirituel"), "spirituel" );
	deepEqual( Stem("spirituelle"), "spirituel" );
	deepEqual( Stem("spirituelles"), "spirituel" );
	deepEqual( Stem("splendide"), "splendid" );
	deepEqual( Stem("splendides"), "splendid" );
	deepEqual( Stem("spring"), "spring" );
	deepEqual( Stem("squares"), "squar" );
	deepEqual( Stem("squelette"), "squelet" );
	deepEqual( Stem("st"), "st" );
	deepEqual( Stem("staël"), "staël" );
	deepEqual( Stem("stalles"), "stall" );
	deepEqual( Stem("stamp"), "stamp" );
	deepEqual( Stem("standard"), "standard" );
	deepEqual( Stem("stanislas"), "stanisl" );
	deepEqual( Stem("star"), "star" );
	deepEqual( Stem("starke"), "stark" );
	deepEqual( Stem("station"), "station" );
	deepEqual( Stem("stationnera"), "station" );
	deepEqual( Stem("stationnés"), "station" );
	deepEqual( Stem("stations"), "station" );
	deepEqual( Stem("statuaire"), "statuair" );
	deepEqual( Stem("statue"), "statu" );
	deepEqual( Stem("statues"), "statu" );
	deepEqual( Stem("stature"), "statur" );
	deepEqual( Stem("staub"), "staub" );
	deepEqual( Stem("steam"), "steam" );
	deepEqual( Stem("steamboats"), "steamboat" );
	deepEqual( Stem("steamer"), "steam" );
	deepEqual( Stem("steamers"), "steamer" );
	deepEqual( Stem("steccata"), "steccat" );
	deepEqual( Stem("stefano"), "stefano" );
	deepEqual( Stem("stentor"), "stentor" );
	deepEqual( Stem("stephenson"), "stephenson" );
	deepEqual( Stem("sterling"), "sterling" );
	deepEqual( Stem("sterne"), "stern" );
	deepEqual( Stem("steward"), "steward" );
	deepEqual( Stem("stigmates"), "stigmat" );
	deepEqual( Stem("stigmatiser"), "stigmatis" );
	deepEqual( Stem("still"), "still" );
	deepEqual( Stem("stimuler"), "stimul" );
	deepEqual( Stem("stolen"), "stolen" );
	deepEqual( Stem("strabon"), "strabon" );
	deepEqual( Stem("stramonium"), "stramonium" );
	deepEqual( Stem("strand"), "strand" );
	deepEqual( Stem("strasbourg"), "strasbourg" );
	deepEqual( Stem("stratagème"), "stratagem" );
	deepEqual( Stem("straw"), "straw" );
	deepEqual( Stem("street"), "street" );
	deepEqual( Stem("strict"), "strict" );
	deepEqual( Stem("stricte"), "strict" );
	deepEqual( Stem("strictement"), "strict" );
	deepEqual( Stem("strombeck"), "strombeck" );
	deepEqual( Stem("strongest"), "strongest" );
	deepEqual( Stem("strychnine"), "strychnin" );
	deepEqual( Stem("stuart"), "stuart" );
	deepEqual( Stem("studbook"), "studbook" );
	deepEqual( Stem("stupéfaction"), "stupéfact" );
	deepEqual( Stem("stupéfait"), "stupef" );
	deepEqual( Stem("stupéfiante"), "stupéfi" );
	deepEqual( Stem("stupefie"), "stupef" );
	deepEqual( Stem("stupéfie"), "stupef" );
	deepEqual( Stem("stupéfié"), "stupéfi" );
	deepEqual( Stem("stupéfier"), "stupéfi" );
	deepEqual( Stem("stupeur"), "stupeur" );
	deepEqual( Stem("stupide"), "stupid" );
	deepEqual( Stem("stupides"), "stupid" );
	deepEqual( Stem("style"), "styl" );
	deepEqual( Stem("stylé"), "styl" );
	deepEqual( Stem("stylés"), "styl" );
	deepEqual( Stem("su"), "su" );
	deepEqual( Stem("suave"), "suav" );
	deepEqual( Stem("subalterne"), "subaltern" );
	deepEqual( Stem("subalternes"), "subaltern" );
	deepEqual( Stem("subi"), "sub" );
	deepEqual( Stem("subir"), "sub" );
	deepEqual( Stem("subira"), "sub" );
	deepEqual( Stem("subirait"), "sub" );
	deepEqual( Stem("subis"), "sub" );
	deepEqual( Stem("subissant"), "sub" );
	deepEqual( Stem("subit"), "sub" );
	deepEqual( Stem("subite"), "subit" );
	deepEqual( Stem("subitement"), "subit" );
	deepEqual( Stem("subjugue"), "subjugu" );
	deepEqual( Stem("subjugué"), "subjugu" );
	deepEqual( Stem("subjuguer"), "subjugu" );
	deepEqual( Stem("sublime"), "sublim" );
	deepEqual( Stem("sublimes"), "sublim" );
	deepEqual( Stem("sublimité"), "sublim" );
	deepEqual( Stem("submerge"), "submerg" );
	deepEqual( Stem("submergé"), "submerg" );
	deepEqual( Stem("submergèrent"), "submerg" );
	deepEqual( Stem("subordonnés"), "subordon" );
	deepEqual( Stem("suborner"), "suborn" );
	deepEqual( Stem("subsistance"), "subsist" );
	deepEqual( Stem("subsiste"), "subsist" );
	deepEqual( Stem("subsistent"), "subsistent" );
	deepEqual( Stem("substance"), "substanc" );
	deepEqual( Stem("substitué"), "substitu" );
	deepEqual( Stem("substituée"), "substitu" );
	deepEqual( Stem("substituées"), "substitu" );
	deepEqual( Stem("substituer"), "substitu" );
	deepEqual( Stem("substitut"), "substitut" );
	deepEqual( Stem("subtilité"), "subtil" );
	deepEqual( Stem("subvention"), "subvent" );
	deepEqual( Stem("succéda"), "succed" );
	deepEqual( Stem("succédaient"), "succed" );
	deepEqual( Stem("succédait"), "succed" );
	deepEqual( Stem("succède"), "succed" );
	deepEqual( Stem("succédé"), "succed" );
	deepEqual( Stem("succéder"), "succed" );
	deepEqual( Stem("succédèrent"), "succed" );
	deepEqual( Stem("succès"), "succes" );
	deepEqual( Stem("successeur"), "successeur" );
	deepEqual( Stem("successeurs"), "successeur" );
	deepEqual( Stem("successifs"), "success" );
	deepEqual( Stem("succession"), "success" );
	deepEqual( Stem("successive"), "success" );
	deepEqual( Stem("successivement"), "success" );
	deepEqual( Stem("successives"), "success" );
	deepEqual( Stem("successor"), "successor" );
	deepEqual( Stem("succombant"), "succomb" );
	deepEqual( Stem("succombé"), "succomb" );
	deepEqual( Stem("succombent"), "succombent" );
	deepEqual( Stem("succomber"), "succomb" );
	deepEqual( Stem("succulentes"), "succulent" );
	deepEqual( Stem("succulents"), "succulent" );
	deepEqual( Stem("such"), "such" );
	deepEqual( Stem("suchet"), "suchet" );
	deepEqual( Stem("sucre"), "sucr" );
	deepEqual( Stem("sucreries"), "sucrer" );
	deepEqual( Stem("sud"), "sud" );
	deepEqual( Stem("suédois"), "suédois" );
	deepEqual( Stem("sueur"), "sueur" );
	deepEqual( Stem("suez"), "su" );
	deepEqual( Stem("suffers"), "suffer" );
	deepEqual( Stem("suffi"), "suff" );
	deepEqual( Stem("suffira"), "suff" );
	deepEqual( Stem("suffiraient"), "suff" );
	deepEqual( Stem("suffirait"), "suff" );
	deepEqual( Stem("suffire"), "suffir" );
	deepEqual( Stem("suffirent"), "suff" );
	deepEqual( Stem("suffiront"), "suff" );
	deepEqual( Stem("suffisaient"), "suffis" );
	deepEqual( Stem("suffisait"), "suffis" );
	deepEqual( Stem("suffisamment"), "suffis" );
	deepEqual( Stem("suffisance"), "suffis" );
	deepEqual( Stem("suffisant"), "suffis" );
	deepEqual( Stem("suffisante"), "suffis" );
	deepEqual( Stem("suffisantes"), "suffis" );
	deepEqual( Stem("suffisent"), "suffisent" );
	deepEqual( Stem("suffit"), "suff" );
	deepEqual( Stem("suffocations"), "suffoc" );
	deepEqual( Stem("suffoqua"), "suffoqu" );
	deepEqual( Stem("suffoqué"), "suffoqu" );
	deepEqual( Stem("suffoquerait"), "suffoqu" );
	deepEqual( Stem("suggéra"), "sugger" );
	deepEqual( Stem("suggéré"), "sugger" );
	deepEqual( Stem("suggérée"), "sugger" );
	deepEqual( Stem("suggérer"), "sugger" );
	deepEqual( Stem("suicide"), "suicid" );
	deepEqual( Stem("suie"), "sui" );
	deepEqual( Stem("suis"), "suis" );
	deepEqual( Stem("suisse"), "suiss" );
	deepEqual( Stem("suisses"), "suiss" );
	deepEqual( Stem("suit"), "suit" );
	deepEqual( Stem("suite"), "suit" );
	deepEqual( Stem("suites"), "suit" );
	deepEqual( Stem("suivaient"), "suiv" );
	deepEqual( Stem("suivais"), "suiv" );
	deepEqual( Stem("suivait"), "suiv" );
	deepEqual( Stem("suivant"), "suiv" );
	deepEqual( Stem("suivante"), "suiv" );
	deepEqual( Stem("suivantes"), "suiv" );
	deepEqual( Stem("suivants"), "suiv" );
	deepEqual( Stem("suivent"), "suivent" );
	deepEqual( Stem("suivez"), "suiv" );
	deepEqual( Stem("suivi"), "suiv" );
	deepEqual( Stem("suivie"), "suiv" );
	deepEqual( Stem("suivies"), "suiv" );
	deepEqual( Stem("suiviez"), "suiv" );
	deepEqual( Stem("suivirent"), "suiv" );
	deepEqual( Stem("suivis"), "suiv" );
	deepEqual( Stem("suivit"), "suiv" );
	deepEqual( Stem("suivons"), "suivon" );
	deepEqual( Stem("suivra"), "suivr" );
	deepEqual( Stem("suivrai"), "suivr" );
	deepEqual( Stem("suivraient"), "suivr" );
	deepEqual( Stem("suivras"), "suivr" );
	deepEqual( Stem("suivre"), "suivr" );
	deepEqual( Stem("suivront"), "suivront" );
	deepEqual( Stem("sujet"), "sujet" );
	deepEqual( Stem("sujets"), "sujet" );
	deepEqual( Stem("sujette"), "sujet" );
	deepEqual( Stem("sujettes"), "sujet" );
	deepEqual( Stem("sullivan"), "sullivan" );
	deepEqual( Stem("sultan"), "sultan" );
	deepEqual( Stem("sumatra"), "sumatr" );
	deepEqual( Stem("sun"), "sun" );
	deepEqual( Stem("superbe"), "superb" );
	deepEqual( Stem("superbes"), "superb" );
	deepEqual( Stem("superficie"), "superfic" );
	deepEqual( Stem("superficiel"), "superficiel" );
	deepEqual( Stem("superflu"), "superflu" );
	deepEqual( Stem("supérieur"), "supérieur" );
	deepEqual( Stem("supérieure"), "supérieur" );
	deepEqual( Stem("supérieurement"), "supérieur" );
	deepEqual( Stem("supérieures"), "supérieur" );
	deepEqual( Stem("supérieurs"), "supérieur" );
	deepEqual( Stem("supériorité"), "supérior" );
	deepEqual( Stem("suppléé"), "supplé" );
	deepEqual( Stem("supplément"), "suppl" );
	deepEqual( Stem("supplémentaire"), "supplémentair" );
	deepEqual( Stem("supplia"), "suppli" );
	deepEqual( Stem("suppliaient"), "suppli" );
	deepEqual( Stem("suppliait"), "suppli" );
	deepEqual( Stem("suppliant"), "suppli" );
	deepEqual( Stem("suppliante"), "suppli" );
	deepEqual( Stem("supplications"), "suppliqu" );
	deepEqual( Stem("supplice"), "supplic" );
	deepEqual( Stem("supplices"), "supplic" );
	deepEqual( Stem("supplie"), "suppl" );
	deepEqual( Stem("supplier"), "suppli" );
	deepEqual( Stem("suppliez"), "suppl" );
	deepEqual( Stem("supportable"), "support" );
	deepEqual( Stem("supportait"), "support" );
	deepEqual( Stem("supportent"), "supportent" );
	deepEqual( Stem("supporter"), "support" );
	deepEqual( Stem("supporterait"), "support" );
	deepEqual( Stem("supposait"), "suppos" );
	deepEqual( Stem("supposant"), "suppos" );
	deepEqual( Stem("suppose"), "suppos" );
	deepEqual( Stem("supposé"), "suppos" );
	deepEqual( Stem("supposée"), "suppos" );
	deepEqual( Stem("supposer"), "suppos" );
	deepEqual( Stem("supposés"), "suppos" );
	deepEqual( Stem("supposez"), "suppos" );
	deepEqual( Stem("supposition"), "supposit" );
	deepEqual( Stem("suppositions"), "supposit" );
	deepEqual( Stem("supposons"), "supposon" );
	deepEqual( Stem("suppression"), "suppress" );
	deepEqual( Stem("supprimant"), "supprim" );
	deepEqual( Stem("supprime"), "supprim" );
	deepEqual( Stem("supprimé"), "supprim" );
	deepEqual( Stem("supprimée"), "supprim" );
	deepEqual( Stem("supprimer"), "supprim" );
	deepEqual( Stem("supprimons"), "supprimon" );
	deepEqual( Stem("supputait"), "supput" );
	deepEqual( Stem("suprême"), "suprêm" );
	deepEqual( Stem("sur"), "sur" );
	deepEqual( Stem("sûr"), "sûr" );
	deepEqual( Stem("surannée"), "surann" );
	deepEqual( Stem("surate"), "surat" );
	deepEqual( Stem("surchargés"), "surcharg" );
	deepEqual( Stem("surchauffée"), "surchauff" );
	deepEqual( Stem("surcroît"), "surcroît" );
	deepEqual( Stem("sûre"), "sûr" );
	deepEqual( Stem("surélevés"), "surélev" );
	deepEqual( Stem("sûrement"), "sûr" );
	deepEqual( Stem("surenchère"), "surencher" );
	deepEqual( Stem("surent"), "surent" );
	deepEqual( Stem("suresnes"), "suresn" );
	deepEqual( Stem("sûreté"), "sûret" );
	deepEqual( Stem("surexcité"), "surexc" );
	deepEqual( Stem("surface"), "surfac" );
	deepEqual( Stem("surgir"), "surg" );
	deepEqual( Stem("surgirait"), "surg" );
	deepEqual( Stem("surgirent"), "surg" );
	deepEqual( Stem("surhumain"), "surhumain" );
	deepEqual( Stem("surhumaine"), "surhumain" );
	deepEqual( Stem("surlendemain"), "surlendemain" );
	deepEqual( Stem("surmontant"), "surmont" );
	deepEqual( Stem("surmonte"), "surmont" );
	deepEqual( Stem("surmontée"), "surmont" );
	deepEqual( Stem("surmontées"), "surmont" );
	deepEqual( Stem("surmonter"), "surmont" );
	deepEqual( Stem("surnage"), "surnag" );
	deepEqual( Stem("surnagea"), "surnag" );
	deepEqual( Stem("surnageait"), "surnag" );
	deepEqual( Stem("surnaturelle"), "surnaturel" );
	deepEqual( Stem("surnom"), "surnom" );
	deepEqual( Stem("surnommèrent"), "surnomm" );
	deepEqual( Stem("surpassa"), "surpass" );
	deepEqual( Stem("surpasse"), "surp" );
	deepEqual( Stem("surpassé"), "surpass" );
	deepEqual( Stem("surpassent"), "surp" );
	deepEqual( Stem("surplis"), "surpl" );
	deepEqual( Stem("surplus"), "surplus" );
	deepEqual( Stem("surprenait"), "surpren" );
	deepEqual( Stem("surprenant"), "surpren" );
	deepEqual( Stem("surprend"), "surprend" );
	deepEqual( Stem("surprendre"), "surprendr" );
	deepEqual( Stem("surprirent"), "surpr" );
	deepEqual( Stem("surpris"), "surpr" );
	deepEqual( Stem("surprise"), "surpris" );
	deepEqual( Stem("surprises"), "surpris" );
	deepEqual( Stem("surprit"), "surpr" );
	deepEqual( Stem("surrey"), "surrey" );
	deepEqual( Stem("sûrs"), "sûr" );
	deepEqual( Stem("sursaut"), "sursaut" );
	deepEqual( Stem("surtout"), "surtout" );
	deepEqual( Stem("survécut"), "survécut" );
	deepEqual( Stem("surveillait"), "surveil" );
	deepEqual( Stem("surveillance"), "surveil" );
	deepEqual( Stem("surveillants"), "surveil" );
	deepEqual( Stem("surveille"), "surveil" );
	deepEqual( Stem("surveillé"), "surveil" );
	deepEqual( Stem("surveillée"), "surveil" );
	deepEqual( Stem("surveiller"), "surveil" );
	deepEqual( Stem("surveillera"), "surveil" );
	deepEqual( Stem("survenait"), "surven" );
	deepEqual( Stem("survenir"), "surven" );
	deepEqual( Stem("survenue"), "survenu" );
	deepEqual( Stem("survinrent"), "survinrent" );
	deepEqual( Stem("survint"), "survint" );
	deepEqual( Stem("survit"), "surv" );
	deepEqual( Stem("survivant"), "surviv" );
	deepEqual( Stem("survivrai"), "survivr" );
	deepEqual( Stem("survivrais"), "survivr" );
	deepEqual( Stem("survivre"), "survivr" );
	deepEqual( Stem("survivrez"), "survivr" );
	deepEqual( Stem("sus"), "sus" );
	deepEqual( Stem("susceptible"), "susceptibl" );
	deepEqual( Stem("susceptibles"), "susceptibl" );
	deepEqual( Stem("susciter"), "suscit" );
	deepEqual( Stem("suscitèrent"), "suscit" );
	deepEqual( Stem("susdit"), "susd" );
	deepEqual( Stem("suspect"), "suspect" );
	deepEqual( Stem("suspecte"), "suspect" );
	deepEqual( Stem("suspecter"), "suspect" );
	deepEqual( Stem("suspects"), "suspect" );
	deepEqual( Stem("suspendre"), "suspendr" );
	deepEqual( Stem("suspendu"), "suspendu" );
	deepEqual( Stem("suspendue"), "suspendu" );
	deepEqual( Stem("suspendus"), "suspendus" );
	deepEqual( Stem("suspens"), "suspen" );
	deepEqual( Stem("suspicion"), "suspicion" );
	deepEqual( Stem("sut"), "sut" );
	deepEqual( Stem("sût"), "sût" );
	deepEqual( Stem("sutpour"), "sutpour" );
	deepEqual( Stem("sutty"), "sutty" );
	deepEqual( Stem("svelte"), "svelt" );
	deepEqual( Stem("sweeter"), "sweet" );
	deepEqual( Stem("sydenham"), "sydenham" );
	deepEqual( Stem("syénites"), "syénit" );
	deepEqual( Stem("syllabe"), "syllab" );
	deepEqual( Stem("syllabes"), "syllab" );
	deepEqual( Stem("syllogisme"), "syllog" );
	deepEqual( Stem("symbole"), "symbol" );
	deepEqual( Stem("symboles"), "symbol" );
	deepEqual( Stem("symbolisent"), "symbolisent" );
	deepEqual( Stem("symétrie"), "symetr" );
	deepEqual( Stem("symétriques"), "symetr" );
	deepEqual( Stem("sympathie"), "sympath" );
	deepEqual( Stem("sympathisait"), "sympathis" );
	deepEqual( Stem("sympathise"), "sympathis" );
	deepEqual( Stem("symphonie"), "symphon" );
	deepEqual( Stem("symptôme"), "symptôm" );
	deepEqual( Stem("symptômes"), "symptôm" );
	deepEqual( Stem("synagogues"), "synagogu" );
	deepEqual( Stem("synonyme"), "synonym" );
	deepEqual( Stem("synonymes"), "synonym" );
	deepEqual( Stem("système"), "system" );
	deepEqual( Stem("t"), "t" );
	deepEqual( Stem("ta"), "ta" );
	deepEqual( Stem("tabac"), "tabac" );
	deepEqual( Stem("tabagie"), "tabag" );
	deepEqual( Stem("tabagies"), "tabag" );
	deepEqual( Stem("tabatière"), "tabati" );
	deepEqual( Stem("tabernacle"), "tabernacl" );
	deepEqual( Stem("table"), "tabl" );
	deepEqual( Stem("tableau"), "tableau" );
	deepEqual( Stem("tableaux"), "tableau" );
	deepEqual( Stem("tables"), "tabl" );
	deepEqual( Stem("tablette"), "tablet" );
	deepEqual( Stem("tablier"), "tabli" );
	deepEqual( Stem("tabouret"), "tabouret" );
	deepEqual( Stem("tâchait"), "tâch" );
	deepEqual( Stem("tâchant"), "tâch" );
	deepEqual( Stem("tache"), "tach" );
	deepEqual( Stem("tâche"), "tâch" );
	deepEqual( Stem("taché"), "tach" );
	deepEqual( Stem("tachée"), "tach" );
	deepEqual( Stem("tachées"), "tach" );
	deepEqual( Stem("tâcher"), "tâch" );
	deepEqual( Stem("tâcherai"), "tâch" );
	deepEqual( Stem("taches"), "tach" );
	deepEqual( Stem("tachetée"), "tachet" );
	deepEqual( Stem("tâchez"), "tâch" );
	deepEqual( Stem("tâchons"), "tâchon" );
	deepEqual( Stem("tacite"), "tacit" );
	deepEqual( Stem("tacites"), "tacit" );
	deepEqual( Stem("taciti"), "tacit" );
	deepEqual( Stem("taciturnes"), "taciturn" );
	deepEqual( Stem("tact"), "tact" );
	deepEqual( Stem("taffetas"), "taffet" );
	deepEqual( Stem("taïkoun"), "taïkoun" );
	deepEqual( Stem("tailla"), "taill" );
	deepEqual( Stem("taillanderie"), "taillander" );
	deepEqual( Stem("taillant"), "taill" );
	deepEqual( Stem("taille"), "taill" );
	deepEqual( Stem("taillé"), "taill" );
	deepEqual( Stem("taillées"), "taill" );
	deepEqual( Stem("tailler"), "taill" );
	deepEqual( Stem("taillés"), "taill" );
	deepEqual( Stem("tailleur"), "tailleur" );
	deepEqual( Stem("taillis"), "taill" );
	deepEqual( Stem("taire"), "tair" );
	deepEqual( Stem("tais"), "tais" );
	deepEqual( Stem("taisaient"), "tais" );
	deepEqual( Stem("taisait"), "tais" );
	deepEqual( Stem("taisant"), "tais" );
	deepEqual( Stem("taisez"), "tais" );
	deepEqual( Stem("tait"), "tait" );
	deepEqual( Stem("takes"), "tak" );
	deepEqual( Stem("talent"), "talent" );
	deepEqual( Stem("talents"), "talent" );
	deepEqual( Stem("talleyrand"), "talleyrand" );
	deepEqual( Stem("talma"), "talm" );
	deepEqual( Stem("taloches"), "taloch" );
	deepEqual( Stem("talons"), "talon" );
	deepEqual( Stem("talus"), "talus" );
	deepEqual( Stem("tam"), "tam" );
	deepEqual( Stem("tamarins"), "tamarin" );
	deepEqual( Stem("tambour"), "tambour" );
	deepEqual( Stem("tambourins"), "tambourin" );
	deepEqual( Stem("tambours"), "tambour" );
	deepEqual( Stem("tams"), "tam" );
	deepEqual( Stem("tanari"), "tanar" );
	deepEqual( Stem("tanbeau"), "tanbeau" );
	deepEqual( Stem("tancrède"), "tancred" );
	deepEqual( Stem("tandis"), "tand" );
	deepEqual( Stem("tangage"), "tangag" );
	deepEqual( Stem("tangles"), "tangl" );
	deepEqual( Stem("tankadère"), "tankader" );
	deepEqual( Stem("tankardere"), "tankarder" );
	deepEqual( Stem("tankardère"), "tankarder" );
	deepEqual( Stem("tankas"), "tank" );
	deepEqual( Stem("tannah"), "tannah" );
	deepEqual( Stem("tanquam"), "tanquam" );
	deepEqual( Stem("tant"), "tant" );
	deepEqual( Stem("tante"), "tant" );
	deepEqual( Stem("tantes"), "tant" );
	deepEqual( Stem("tantôt"), "tantôt" );
	deepEqual( Stem("tanzi"), "tanz" );
	deepEqual( Stem("tapage"), "tapag" );
	deepEqual( Stem("tapé"), "tap" );
	deepEqual( Stem("tapis"), "tapis" );
	deepEqual( Stem("tapissée"), "tapiss" );
	deepEqual( Stem("tapisserie"), "tapisser" );
	deepEqual( Stem("tapissier"), "tapissi" );
	deepEqual( Stem("tapissiers"), "tapissi" );
	deepEqual( Stem("tapty"), "tapty" );
	deepEqual( Stem("tard"), "tard" );
	deepEqual( Stem("tarda"), "tard" );
	deepEqual( Stem("tardaient"), "tard" );
	deepEqual( Stem("tardait"), "tard" );
	deepEqual( Stem("tarde"), "tard" );
	deepEqual( Stem("tardé"), "tard" );
	deepEqual( Stem("tarder"), "tard" );
	deepEqual( Stem("tarderait"), "tard" );
	deepEqual( Stem("tardèrent"), "tard" );
	deepEqual( Stem("tardive"), "tardiv" );
	deepEqual( Stem("tarés"), "tar" );
	deepEqual( Stem("taries"), "tar" );
	deepEqual( Stem("tarirent"), "tar" );
	deepEqual( Stem("tarissait"), "tar" );
	deepEqual( Stem("tarit"), "tar" );
	deepEqual( Stem("tarots"), "tarot" );
	deepEqual( Stem("tarragone"), "tarragon" );
	deepEqual( Stem("tartines"), "tartin" );
	deepEqual( Stem("tartufe"), "tartuf" );
	deepEqual( Stem("tas"), "tas" );
	deepEqual( Stem("tasse"), "tass" );
	deepEqual( Stem("tasses"), "tass" );
	deepEqual( Stem("tâtonnent"), "tâtonnent" );
	deepEqual( Stem("taudis"), "taud" );
	deepEqual( Stem("taureaux"), "taureau" );
	deepEqual( Stem("taverne"), "tavern" );
	deepEqual( Stem("taxes"), "tax" );
	deepEqual( Stem("taxis"), "tax" );
	deepEqual( Stem("te"), "te" );
	deepEqual( Stem("tea"), "te" );
	deepEqual( Stem("tecks"), "teck" );
	deepEqual( Stem("teindre"), "teindr" );
	deepEqual( Stem("teint"), "teint" );
	deepEqual( Stem("teinte"), "teint" );
	deepEqual( Stem("teintes"), "teint" );
	deepEqual( Stem("tel"), "tel" );
	deepEqual( Stem("telegraph"), "telegraph" );
	deepEqual( Stem("télégraphe"), "télégraph" );
	deepEqual( Stem("télégraphié"), "télégraphi" );
	deepEqual( Stem("télégraphique"), "télégraph" );
	deepEqual( Stem("télégraphiques"), "télégraph" );
	deepEqual( Stem("télémaque"), "télémaqu" );
	deepEqual( Stem("télescope"), "télescop" );
	deepEqual( Stem("télescopes"), "télescop" );
	deepEqual( Stem("telle"), "tel" );
	deepEqual( Stem("tellement"), "tel" );
	deepEqual( Stem("telles"), "tel" );
	deepEqual( Stem("tels"), "tel" );
	deepEqual( Stem("téméraire"), "témérair" );
	deepEqual( Stem("témérité"), "témer" );
	deepEqual( Stem("témoignage"), "témoignag" );
	deepEqual( Stem("témoignaient"), "témoign" );
	deepEqual( Stem("témoignait"), "témoign" );
	deepEqual( Stem("temoigne"), "temoign" );
	deepEqual( Stem("témoigne"), "témoign" );
	deepEqual( Stem("témoigné"), "témoign" );
	deepEqual( Stem("témoigner"), "témoign" );
	deepEqual( Stem("témoigneront"), "témoign" );
	deepEqual( Stem("témoigniez"), "témoign" );
	deepEqual( Stem("témoin"), "témoin" );
	deepEqual( Stem("témoins"), "témoin" );
	deepEqual( Stem("tempe"), "temp" );
	deepEqual( Stem("tempérait"), "temper" );
	deepEqual( Stem("tempérament"), "temper" );
	deepEqual( Stem("température"), "températur" );
	deepEqual( Stem("tempérée"), "temper" );
	deepEqual( Stem("tempes"), "temp" );
	deepEqual( Stem("tempest"), "tempest" );
	deepEqual( Stem("tempête"), "tempêt" );
	deepEqual( Stem("temple"), "templ" );
	deepEqual( Stem("temples"), "templ" );
	deepEqual( Stem("temps"), "temp" );
	deepEqual( Stem("tenable"), "tenabl" );
	deepEqual( Stem("ténacité"), "ténac" );
	deepEqual( Stem("tenaient"), "ten" );
	deepEqual( Stem("tenais"), "ten" );
	deepEqual( Stem("tenait"), "ten" );
	deepEqual( Stem("tenant"), "ten" );
	deepEqual( Stem("tenante"), "ten" );
	deepEqual( Stem("tend"), "tend" );
	deepEqual( Stem("tendaient"), "tend" );
	deepEqual( Stem("tendait"), "tend" );
	deepEqual( Stem("tendance"), "tendanc" );
	deepEqual( Stem("tendent"), "tendent" );
	deepEqual( Stem("tender"), "tend" );
	deepEqual( Stem("tendit"), "tend" );
	deepEqual( Stem("tendre"), "tendr" );
	deepEqual( Stem("tendrement"), "tendr" );
	deepEqual( Stem("tendres"), "tendr" );
	deepEqual( Stem("tendresse"), "tendress" );
	deepEqual( Stem("tendresses"), "tendress" );
	deepEqual( Stem("tendu"), "tendu" );
	deepEqual( Stem("tendue"), "tendu" );
	deepEqual( Stem("tendues"), "tendu" );
	deepEqual( Stem("tendus"), "tendus" );
	deepEqual( Stem("tenerani"), "teneran" );
	deepEqual( Stem("tenere"), "tener" );
	deepEqual( Stem("teneur"), "teneur" );
	deepEqual( Stem("tenez"), "ten" );
	deepEqual( Stem("tenir"), "ten" );
	deepEqual( Stem("tenons"), "tenon" );
	deepEqual( Stem("ténor"), "ténor" );
	deepEqual( Stem("tenta"), "tent" );
	deepEqual( Stem("tentait"), "tent" );
	deepEqual( Stem("tentation"), "tentat" );
	deepEqual( Stem("tentations"), "tentat" );
	deepEqual( Stem("tentative"), "tentat" );
	deepEqual( Stem("tentatives"), "tentat" );
	deepEqual( Stem("tente"), "tent" );
	deepEqual( Stem("tenté"), "tent" );
	deepEqual( Stem("tenter"), "tent" );
	deepEqual( Stem("tenteras"), "tent" );
	deepEqual( Stem("tentez"), "tent" );
	deepEqual( Stem("tentures"), "tentur" );
	deepEqual( Stem("tenu"), "tenu" );
	deepEqual( Stem("tenue"), "tenu" );
	deepEqual( Stem("tenues"), "tenu" );
	deepEqual( Stem("tenus"), "tenus" );
	deepEqual( Stem("terme"), "term" );
	deepEqual( Stem("termes"), "term" );
	deepEqual( Stem("termina"), "termin" );
	deepEqual( Stem("terminaient"), "termin" );
	deepEqual( Stem("terminait"), "termin" );
	deepEqual( Stem("termine"), "termin" );
	deepEqual( Stem("terminé"), "termin" );
	deepEqual( Stem("terminée"), "termin" );
	deepEqual( Stem("terminées"), "termin" );
	deepEqual( Stem("terminer"), "termin" );
	deepEqual( Stem("terminera"), "termin" );
	deepEqual( Stem("terminèrent"), "termin" );
	deepEqual( Stem("ternir"), "tern" );
	deepEqual( Stem("terrain"), "terrain" );
	deepEqual( Stem("terrains"), "terrain" );
	deepEqual( Stem("terrasse"), "terr" );
	deepEqual( Stem("terrassé"), "terrass" );
	deepEqual( Stem("terrasses"), "terr" );
	deepEqual( Stem("terrassiers"), "terrassi" );
	deepEqual( Stem("terre"), "terr" );
	deepEqual( Stem("terres"), "terr" );
	deepEqual( Stem("terrestre"), "terrestr" );
	deepEqual( Stem("terrestres"), "terrestr" );
	deepEqual( Stem("terreur"), "terreur" );
	deepEqual( Stem("terreurs"), "terreur" );
	deepEqual( Stem("terrible"), "terribl" );
	deepEqual( Stem("terriblement"), "terribl" );
	deepEqual( Stem("terribles"), "terribl" );
	deepEqual( Stem("territoire"), "territoir" );
	deepEqual( Stem("tertio"), "tertio" );
	deepEqual( Stem("tertre"), "tertr" );
	deepEqual( Stem("terzo"), "terzo" );
	deepEqual( Stem("tes"), "te" );
	deepEqual( Stem("testa"), "test" );
	deepEqual( Stem("testament"), "test" );
	deepEqual( Stem("tête"), "têt" );
	deepEqual( Stem("têtes"), "têt" );
	deepEqual( Stem("teulier"), "teuli" );
	deepEqual( Stem("texte"), "text" );
	deepEqual( Stem("textuellement"), "textuel" );
	deepEqual( Stem("thaler"), "thal" );
	deepEqual( Stem("that"), "that" );
	deepEqual( Stem("the"), "the" );
	deepEqual( Stem("thé"), "thé" );
	deepEqual( Stem("théâtral"), "théâtral" );
	deepEqual( Stem("théâtre"), "théâtr" );
	deepEqual( Stem("théâtres"), "théâtr" );
	deepEqual( Stem("theft"), "theft" );
	deepEqual( Stem("thème"), "them" );
	deepEqual( Stem("thèmes"), "them" );
	deepEqual( Stem("thémistocle"), "thémistocl" );
	deepEqual( Stem("then"), "then" );
	deepEqual( Stem("théodolinde"), "théodolind" );
	deepEqual( Stem("théologie"), "théolog" );
	deepEqual( Stem("théologien"), "théologien" );
	deepEqual( Stem("théorie"), "théor" );
	deepEqual( Stem("théories"), "théor" );
	deepEqual( Stem("théoriquement"), "théoriqu" );
	deepEqual( Stem("there"), "ther" );
	deepEqual( Stem("thérèse"), "théres" );
	deepEqual( Stem("thermomètre"), "thermometr" );
	deepEqual( Stem("thésée"), "thes" );
	deepEqual( Stem("thing"), "thing" );
	deepEqual( Stem("this"), "this" );
	deepEqual( Stem("thomas"), "thom" );
	deepEqual( Stem("though"), "though" );
	deepEqual( Stem("thousands"), "thousand" );
	deepEqual( Stem("thrilling"), "thrilling" );
	deepEqual( Stem("thugs"), "thug" );
	deepEqual( Stem("tibère"), "tiber" );
	deepEqual( Stem("tibi"), "tib" );
	deepEqual( Stem("tien"), "tien" );
	deepEqual( Stem("tiendra"), "tiendr" );
	deepEqual( Stem("tiendrait"), "tiendr" );
	deepEqual( Stem("tiendras"), "tiendr" );
	deepEqual( Stem("tiendrez"), "tiendr" );
	deepEqual( Stem("tiendront"), "tiendront" );
	deepEqual( Stem("tienne"), "tien" );
	deepEqual( Stem("tiennent"), "tiennent" );
	deepEqual( Stem("tiens"), "tien" );
	deepEqual( Stem("tient"), "tient" );
	deepEqual( Stem("tierce"), "tierc" );
	deepEqual( Stem("tiers"), "tier" );
	deepEqual( Stem("tige"), "tig" );
	deepEqual( Stem("tiges"), "tig" );
	deepEqual( Stem("tigre"), "tigr" );
	deepEqual( Stem("tigres"), "tigr" );
	deepEqual( Stem("tilbury"), "tilbury" );
	deepEqual( Stem("tilburys"), "tilbury" );
	deepEqual( Stem("tilleul"), "tilleul" );
	deepEqual( Stem("tilleuls"), "tilleul" );
	deepEqual( Stem("timbre"), "timbr" );
	deepEqual( Stem("timbrée"), "timbr" );
	deepEqual( Stem("timbrées"), "timbr" );
	deepEqual( Stem("timbres"), "timbr" );
	deepEqual( Stem("time"), "tim" );
	deepEqual( Stem("times"), "tim" );
	deepEqual( Stem("timide"), "timid" );
	deepEqual( Stem("timidement"), "timid" );
	deepEqual( Stem("timides"), "timid" );
	deepEqual( Stem("timidité"), "timid" );
	deepEqual( Stem("timorée"), "timor" );
	deepEqual( Stem("tingou"), "tingou" );
	deepEqual( Stem("tinrent"), "tinrent" );
	deepEqual( Stem("tinssent"), "tinssent" );
	deepEqual( Stem("tint"), "tint" );
	deepEqual( Stem("tînt"), "tînt" );
	deepEqual( Stem("tintamarre"), "tintamarr" );
	deepEqual( Stem("tinte"), "tint" );
	deepEqual( Stem("tira"), "tir" );
	deepEqual( Stem("tirade"), "tirad" );
	deepEqual( Stem("tirades"), "tirad" );
	deepEqual( Stem("tirage"), "tirag" );
	deepEqual( Stem("tiraient"), "tir" );
	deepEqual( Stem("tiraillé"), "tiraill" );
	deepEqual( Stem("tirailler"), "tiraill" );
	deepEqual( Stem("tirait"), "tir" );
	deepEqual( Stem("tirant"), "tir" );
	deepEqual( Stem("tirât"), "tir" );
	deepEqual( Stem("tire"), "tir" );
	deepEqual( Stem("tiré"), "tir" );
	deepEqual( Stem("tirée"), "tir" );
	deepEqual( Stem("tirent"), "tirent" );
	deepEqual( Stem("tirer"), "tir" );
	deepEqual( Stem("tirera"), "tir" );
	deepEqual( Stem("tireraient"), "tir" );
	deepEqual( Stem("tirerais"), "tir" );
	deepEqual( Stem("tirerait"), "tir" );
	deepEqual( Stem("tirèrent"), "tir" );
	deepEqual( Stem("tirerez"), "tir" );
	deepEqual( Stem("tirés"), "tir" );
	deepEqual( Stem("tirez"), "tir" );
	deepEqual( Stem("tiroir"), "tiroir" );
	deepEqual( Stem("tissu"), "tissu" );
	deepEqual( Stem("tissue"), "tissu" );
	deepEqual( Stem("tite"), "tit" );
	deepEqual( Stem("titre"), "titr" );
	deepEqual( Stem("titres"), "titr" );
	deepEqual( Stem("titubant"), "titub" );
	deepEqual( Stem("titulaire"), "titulair" );
	deepEqual( Stem("to"), "to" );
	deepEqual( Stem("together"), "togeth" );
	deepEqual( Stem("toi"), "toi" );
	deepEqual( Stem("toile"), "toil" );
	deepEqual( Stem("toiles"), "toil" );
	deepEqual( Stem("toilette"), "toilet" );
	deepEqual( Stem("toilettes"), "toilet" );
	deepEqual( Stem("toisait"), "tois" );
	deepEqual( Stem("toisant"), "tois" );
	deepEqual( Stem("toises"), "tois" );
	deepEqual( Stem("toison"), "toison" );
	deepEqual( Stem("toit"), "toit" );
	deepEqual( Stem("toits"), "toit" );
	deepEqual( Stem("toiture"), "toitur" );
	deepEqual( Stem("tolède"), "toled" );
	deepEqual( Stem("tolèrent"), "tol" );
	deepEqual( Stem("tolérer"), "toler" );
	deepEqual( Stem("tolly"), "tolly" );
	deepEqual( Stem("tomba"), "tomb" );
	deepEqual( Stem("tombaient"), "tomb" );
	deepEqual( Stem("tombait"), "tomb" );
	deepEqual( Stem("tombant"), "tomb" );
	deepEqual( Stem("tombante"), "tomb" );
	deepEqual( Stem("tombassent"), "tomb" );
	deepEqual( Stem("tombât"), "tomb" );
	deepEqual( Stem("tombe"), "tomb" );
	deepEqual( Stem("tombé"), "tomb" );
	deepEqual( Stem("tombeau"), "tombeau" );
	deepEqual( Stem("tombeaux"), "tombeau" );
	deepEqual( Stem("tombée"), "tomb" );
	deepEqual( Stem("tombent"), "tombent" );
	deepEqual( Stem("tomber"), "tomb" );
	deepEqual( Stem("tomberai"), "tomb" );
	deepEqual( Stem("tomberaient"), "tomb" );
	deepEqual( Stem("tomberais"), "tomb" );
	deepEqual( Stem("tombèrent"), "tomb" );
	deepEqual( Stem("tomberont"), "tomb" );
	deepEqual( Stem("tombés"), "tomb" );
	deepEqual( Stem("tombez"), "tomb" );
	deepEqual( Stem("tombone"), "tombon" );
	deepEqual( Stem("tome"), "tom" );
	deepEqual( Stem("tomes"), "tom" );
	deepEqual( Stem("ton"), "ton" );
	deepEqual( Stem("tonalités"), "tonal" );
	deepEqual( Stem("tondre"), "tondr" );
	deepEqual( Stem("tonnage"), "tonnag" );
	deepEqual( Stem("tonnaient"), "ton" );
	deepEqual( Stem("tonnante"), "ton" );
	deepEqual( Stem("tonne"), "ton" );
	deepEqual( Stem("tonneaux"), "tonneau" );
	deepEqual( Stem("tonnelier"), "tonneli" );
	deepEqual( Stem("tonnerre"), "tonnerr" );
	deepEqual( Stem("tonnerres"), "tonnerr" );
	deepEqual( Stem("tonnes"), "ton" );
	deepEqual( Stem("tonte"), "tont" );
	deepEqual( Stem("too"), "too" );
	deepEqual( Stem("toque"), "toqu" );
	deepEqual( Stem("torche"), "torch" );
	deepEqual( Stem("torches"), "torch" );
	deepEqual( Stem("torchon"), "torchon" );
	deepEqual( Stem("tordait"), "tord" );
	deepEqual( Stem("tordant"), "tord" );
	deepEqual( Stem("tordit"), "tord" );
	deepEqual( Stem("tordre"), "tordr" );
	deepEqual( Stem("tords"), "tord" );
	deepEqual( Stem("torpeur"), "torpeur" );
	deepEqual( Stem("torrent"), "torrent" );
	deepEqual( Stem("torrents"), "torrent" );
	deepEqual( Stem("torsade"), "torsad" );
	deepEqual( Stem("torses"), "tors" );
	deepEqual( Stem("tort"), "tort" );
	deepEqual( Stem("torto"), "torto" );
	deepEqual( Stem("tortoni"), "torton" );
	deepEqual( Stem("torts"), "tort" );
	deepEqual( Stem("tortue"), "tortu" );
	deepEqual( Stem("tortues"), "tortu" );
	deepEqual( Stem("tortura"), "tortur" );
	deepEqual( Stem("torturait"), "tortur" );
	deepEqual( Stem("torture"), "tortur" );
	deepEqual( Stem("torturé"), "tortur" );
	deepEqual( Stem("torturer"), "tortur" );
	deepEqual( Stem("tortures"), "tortur" );
	deepEqual( Stem("toscane"), "toscan" );
	deepEqual( Stem("tôt"), "tôt" );
	deepEqual( Stem("total"), "total" );
	deepEqual( Stem("totale"), "total" );
	deepEqual( Stem("totalement"), "total" );
	deepEqual( Stem("toto"), "toto" );
	deepEqual( Stem("toucha"), "touch" );
	deepEqual( Stem("touchaient"), "touch" );
	deepEqual( Stem("touchais"), "touch" );
	deepEqual( Stem("touchait"), "touch" );
	deepEqual( Stem("touchant"), "touch" );
	deepEqual( Stem("touchante"), "touch" );
	deepEqual( Stem("touchantes"), "touch" );
	deepEqual( Stem("touchants"), "touch" );
	deepEqual( Stem("touchât"), "touch" );
	deepEqual( Stem("touche"), "touch" );
	deepEqual( Stem("touché"), "touch" );
	deepEqual( Stem("touchée"), "touch" );
	deepEqual( Stem("toucher"), "touch" );
	deepEqual( Stem("touchera"), "touch" );
	deepEqual( Stem("toucherez"), "touch" );
	deepEqual( Stem("toucheront"), "touch" );
	deepEqual( Stem("touches"), "touch" );
	deepEqual( Stem("touchés"), "touch" );
	deepEqual( Stem("touffe"), "touff" );
	deepEqual( Stem("touffes"), "touff" );
	deepEqual( Stem("touffu"), "touffu" );
	deepEqual( Stem("touffus"), "touffus" );
	deepEqual( Stem("toujours"), "toujour" );
	deepEqual( Stem("toulouse"), "toulous" );
	deepEqual( Stem("toupie"), "toup" );
	deepEqual( Stem("toupies"), "toup" );
	deepEqual( Stem("tour"), "tour" );
	deepEqual( Stem("tourbillon"), "tourbillon" );
	deepEqual( Stem("tourbillonnait"), "tourbillon" );
	deepEqual( Stem("tourbillons"), "tourbillon" );
	deepEqual( Stem("touriste"), "tourist" );
	deepEqual( Stem("tourment"), "tourment" );
	deepEqual( Stem("tourmentait"), "tourment" );
	deepEqual( Stem("tourmente"), "tourment" );
	deepEqual( Stem("tourmenté"), "tourment" );
	deepEqual( Stem("tourmentée"), "tourment" );
	deepEqual( Stem("tourmentés"), "tourment" );
	deepEqual( Stem("tourmentin"), "tourmentin" );
	deepEqual( Stem("tourments"), "tourment" );
	deepEqual( Stem("tourna"), "tourn" );
	deepEqual( Stem("tournai"), "tourn" );
	deepEqual( Stem("tournaient"), "tourn" );
	deepEqual( Stem("tournait"), "tourn" );
	deepEqual( Stem("tournant"), "tourn" );
	deepEqual( Stem("tournante"), "tourn" );
	deepEqual( Stem("tournantes"), "tourn" );
	deepEqual( Stem("tourne"), "tourn" );
	deepEqual( Stem("tourné"), "tourn" );
	deepEqual( Stem("tournée"), "tourn" );
	deepEqual( Stem("tournées"), "tourn" );
	deepEqual( Stem("tournent"), "tournent" );
	deepEqual( Stem("tourner"), "tourn" );
	deepEqual( Stem("tournera"), "tourn" );
	deepEqual( Stem("tournèrent"), "tourn" );
	deepEqual( Stem("tourniquets"), "tourniquet" );
	deepEqual( Stem("tournoyant"), "tournoi" );
	deepEqual( Stem("tournure"), "tournur" );
	deepEqual( Stem("tournures"), "tournur" );
	deepEqual( Stem("tours"), "tour" );
	deepEqual( Stem("tous"), "tous" );
	deepEqual( Stem("toussa"), "touss" );
	deepEqual( Stem("tousser"), "touss" );
	deepEqual( Stem("tout"), "tout" );
	deepEqual( Stem("toute"), "tout" );
	deepEqual( Stem("toutefois"), "toutefois" );
	deepEqual( Stem("toutes"), "tout" );
	deepEqual( Stem("tr"), "tr" );
	deepEqual( Stem("trac"), "trac" );
	deepEqual( Stem("traçait"), "trac" );
	deepEqual( Stem("tracasse"), "trac" );
	deepEqual( Stem("tracasserie"), "tracasser" );
	deepEqual( Stem("tracasseries"), "tracasser" );
	deepEqual( Stem("trace"), "trac" );
	deepEqual( Stem("tracé"), "trac" );
	deepEqual( Stem("tracée"), "trac" );
	deepEqual( Stem("tracées"), "trac" );
	deepEqual( Stem("tracer"), "trac" );
	deepEqual( Stem("traces"), "trac" );
	deepEqual( Stem("tracés"), "trac" );
	deepEqual( Stem("traction"), "traction" );
	deepEqual( Stem("tradition"), "tradit" );
	deepEqual( Stem("traduction"), "traduct" );
	deepEqual( Stem("traduire"), "traduir" );
	deepEqual( Stem("traduis"), "traduis" );
	deepEqual( Stem("traduit"), "traduit" );
	deepEqual( Stem("traduite"), "traduit" );
	deepEqual( Stem("traduites"), "traduit" );
	deepEqual( Stem("tragédie"), "traged" );
	deepEqual( Stem("tragique"), "tragiqu" );
	deepEqual( Stem("tragiques"), "tragiqu" );
	deepEqual( Stem("trahi"), "trah" );
	deepEqual( Stem("trahie"), "trah" );
	deepEqual( Stem("trahies"), "trah" );
	deepEqual( Stem("trahir"), "trah" );
	deepEqual( Stem("trahira"), "trah" );
	deepEqual( Stem("trahirais"), "trah" );
	deepEqual( Stem("trahirait"), "trah" );
	deepEqual( Stem("trahiriez"), "trah" );
	deepEqual( Stem("trahiront"), "trah" );
	deepEqual( Stem("trahis"), "trah" );
	deepEqual( Stem("trahison"), "trahison" );
	deepEqual( Stem("trahissaient"), "trah" );
	deepEqual( Stem("trahissait"), "trah" );
	deepEqual( Stem("trahissant"), "trah" );
	deepEqual( Stem("trahisse"), "trah" );
	deepEqual( Stem("trahissez"), "trah" );
	deepEqual( Stem("trahit"), "trah" );
	deepEqual( Stem("trahît"), "trah" );
	deepEqual( Stem("train"), "train" );
	deepEqual( Stem("traînaient"), "traîn" );
	deepEqual( Stem("traînait"), "traîn" );
	deepEqual( Stem("traînante"), "traîn" );
	deepEqual( Stem("traînard"), "traînard" );
	deepEqual( Stem("traîné"), "traîn" );
	deepEqual( Stem("traîneau"), "traîneau" );
	deepEqual( Stem("traîneaux"), "traîneau" );
	deepEqual( Stem("traînée"), "traîn" );
	deepEqual( Stem("traînées"), "traîn" );
	deepEqual( Stem("traîner"), "traîn" );
	deepEqual( Stem("trains"), "train" );
	deepEqual( Stem("trait"), "trait" );
	deepEqual( Stem("traita"), "trait" );
	deepEqual( Stem("traitait"), "trait" );
	deepEqual( Stem("traitant"), "trait" );
	deepEqual( Stem("traitât"), "trait" );
	deepEqual( Stem("traite"), "trait" );
	deepEqual( Stem("traité"), "trait" );
	deepEqual( Stem("traitée"), "trait" );
	deepEqual( Stem("traitement"), "trait" );
	deepEqual( Stem("traitent"), "traitent" );
	deepEqual( Stem("traiter"), "trait" );
	deepEqual( Stem("traitera"), "trait" );
	deepEqual( Stem("traitèrent"), "trait" );
	deepEqual( Stem("traités"), "trait" );
	deepEqual( Stem("traitez"), "trait" );
	deepEqual( Stem("traître"), "traîtr" );
	deepEqual( Stem("traîtreusement"), "traîtreux" );
	deepEqual( Stem("traits"), "trait" );
	deepEqual( Stem("trajectoires"), "trajectoir" );
	deepEqual( Stem("trajet"), "trajet" );
	deepEqual( Stem("trame"), "tram" );
	deepEqual( Stem("tramezzina"), "tramezzin" );
	deepEqual( Stem("tramways"), "tramway" );
	deepEqual( Stem("tranchait"), "tranch" );
	deepEqual( Stem("tranchant"), "tranch" );
	deepEqual( Stem("tranchants"), "tranch" );
	deepEqual( Stem("tranche"), "tranch" );
	deepEqual( Stem("tranchée"), "tranch" );
	deepEqual( Stem("tranchées"), "tranch" );
	deepEqual( Stem("tranches"), "tranch" );
	deepEqual( Stem("tranchés"), "tranch" );
	deepEqual( Stem("tranquille"), "tranquill" );
	deepEqual( Stem("tranquillement"), "tranquill" );
	deepEqual( Stem("tranquilles"), "tranquill" );
	deepEqual( Stem("tranquillise"), "tranquillis" );
	deepEqual( Stem("tranquillisée"), "tranquillis" );
	deepEqual( Stem("tranquilliserait"), "tranquillis" );
	deepEqual( Stem("tranquillisez"), "tranquillis" );
	deepEqual( Stem("tranquillité"), "tranquill" );
	deepEqual( Stem("transaction"), "transact" );
	deepEqual( Stem("transactions"), "transact" );
	deepEqual( Stem("transatlantique"), "transatlant" );
	deepEqual( Stem("transatlantiques"), "transatlant" );
	deepEqual( Stem("transcrire"), "transcrir" );
	deepEqual( Stem("transcrit"), "transcr" );
	deepEqual( Stem("transcrivait"), "transcriv" );
	deepEqual( Stem("transcrivant"), "transcriv" );
	deepEqual( Stem("transcrivit"), "transcriv" );
	deepEqual( Stem("transes"), "trans" );
	deepEqual( Stem("transfèrement"), "transfer" );
	deepEqual( Stem("transférer"), "transfer" );
	deepEqual( Stem("transfigure"), "transfigur" );
	deepEqual( Stem("transforma"), "transform" );
	deepEqual( Stem("transformant"), "transform" );
	deepEqual( Stem("transformé"), "transform" );
	deepEqual( Stem("transformée"), "transform" );
	deepEqual( Stem("transforment"), "transforment" );
	deepEqual( Stem("transformer"), "transform" );
	deepEqual( Stem("transformés"), "transform" );
	deepEqual( Stem("transfuge"), "transfug" );
	deepEqual( Stem("transgression"), "transgress" );
	deepEqual( Stem("transie"), "trans" );
	deepEqual( Stem("transiger"), "transig" );
	deepEqual( Stem("transire"), "transir" );
	deepEqual( Stem("transit"), "trans" );
	deepEqual( Stem("transmettre"), "transmettr" );
	deepEqual( Stem("transmise"), "transmis" );
	deepEqual( Stem("transmissible"), "transmissibl" );
	deepEqual( Stem("transmit"), "transm" );
	deepEqual( Stem("transocéanienne"), "transocéanien" );
	deepEqual( Stem("transocéaniennes"), "transocéanien" );
	deepEqual( Stem("transparents"), "transparent" );
	deepEqual( Stem("transport"), "transport" );
	deepEqual( Stem("transporta"), "transport" );
	deepEqual( Stem("transportait"), "transport" );
	deepEqual( Stem("transportât"), "transport" );
	deepEqual( Stem("transporté"), "transport" );
	deepEqual( Stem("transportée"), "transport" );
	deepEqual( Stem("transporter"), "transport" );
	deepEqual( Stem("transports"), "transport" );
	deepEqual( Stem("transversale"), "transversal" );
	deepEqual( Stem("trapp"), "trapp" );
	deepEqual( Stem("trappe"), "trapp" );
	deepEqual( Stem("trappes"), "trapp" );
	deepEqual( Stem("trappiste"), "trappist" );
	deepEqual( Stem("trapues"), "trapu" );
	deepEqual( Stem("traqué"), "traqu" );
	deepEqual( Stem("trattamento"), "trattamento" );
	deepEqual( Stem("trattoria"), "trattori" );
	deepEqual( Stem("travail"), "travail" );
	deepEqual( Stem("travailla"), "travaill" );
	deepEqual( Stem("travaillaient"), "travaill" );
	deepEqual( Stem("travaillait"), "travaill" );
	deepEqual( Stem("travaille"), "travaill" );
	deepEqual( Stem("travaillé"), "travaill" );
	deepEqual( Stem("travailler"), "travaill" );
	deepEqual( Stem("travailleurs"), "travailleur" );
	deepEqual( Stem("travaux"), "traval" );
	deepEqual( Stem("travers"), "traver" );
	deepEqual( Stem("traversa"), "travers" );
	deepEqual( Stem("traversaient"), "travers" );
	deepEqual( Stem("traversait"), "travers" );
	deepEqual( Stem("traversant"), "travers" );
	deepEqual( Stem("traverse"), "travers" );
	deepEqual( Stem("traversé"), "travers" );
	deepEqual( Stem("traversee"), "traverse" );
	deepEqual( Stem("traversée"), "travers" );
	deepEqual( Stem("traversées"), "travers" );
	deepEqual( Stem("traversent"), "traversent" );
	deepEqual( Stem("traverser"), "travers" );
	deepEqual( Stem("traverserai"), "travers" );
	deepEqual( Stem("traversèrent"), "travers" );
	deepEqual( Stem("traversés"), "travers" );
	deepEqual( Stem("traversez"), "travers" );
	deepEqual( Stem("trébuchant"), "trébuch" );
	deepEqual( Stem("tredici"), "tredic" );
	deepEqual( Stem("treize"), "treiz" );
	deepEqual( Stem("treizième"), "treiziem" );
	deepEqual( Stem("trembla"), "trembl" );
	deepEqual( Stem("tremblaient"), "trembl" );
	deepEqual( Stem("tremblais"), "trembl" );
	deepEqual( Stem("tremblait"), "trembl" );
	deepEqual( Stem("tremblant"), "trembl" );
	deepEqual( Stem("tremblante"), "trembl" );
	deepEqual( Stem("tremblantes"), "trembl" );
	deepEqual( Stem("tremble"), "trembl" );
	deepEqual( Stem("tremblé"), "trembl" );
	deepEqual( Stem("tremblement"), "trembl" );
	deepEqual( Stem("trembler"), "trembl" );
	deepEqual( Stem("tremblera"), "trembl" );
	deepEqual( Stem("tremblerai"), "trembl" );
	deepEqual( Stem("trembleront"), "trembl" );
	deepEqual( Stem("tremblez"), "trembl" );
	deepEqual( Stem("trempe"), "tremp" );
	deepEqual( Stem("trempé"), "tremp" );
	deepEqual( Stem("tremper"), "tremp" );
	deepEqual( Stem("tremplin"), "tremplin" );
	deepEqual( Stem("tremulously"), "tremulously" );
	deepEqual( Stem("trentaine"), "trentain" );
	deepEqual( Stem("trente"), "trent" );
	deepEqual( Stem("trépas"), "trep" );
	deepEqual( Stem("tres"), "tre" );
	deepEqual( Stem("très"), "tres" );
	deepEqual( Stem("trésor"), "trésor" );
	deepEqual( Stem("trésors"), "trésor" );
	deepEqual( Stem("tressailli"), "tressaill" );
	deepEqual( Stem("tressaillir"), "tressaill" );
	deepEqual( Stem("tressaillit"), "tressaill" );
	deepEqual( Stem("tresse"), "tress" );
	deepEqual( Stem("tressé"), "tress" );
	deepEqual( Stem("trêve"), "trêv" );
	deepEqual( Stem("trévise"), "trévis" );
	deepEqual( Stem("triangle"), "triangl" );
	deepEqual( Stem("triangulaire"), "triangulair" );
	deepEqual( Stem("tribu"), "tribu" );
	deepEqual( Stem("tribun"), "tribun" );
	deepEqual( Stem("tribunal"), "tribunal" );
	deepEqual( Stem("tribunaux"), "tribunal" );
	deepEqual( Stem("tribune"), "tribun" );
	deepEqual( Stem("tributaires"), "tributair" );
	deepEqual( Stem("tric"), "tric" );
	deepEqual( Stem("tricolore"), "tricolor" );
	deepEqual( Stem("trinquette"), "trinquet" );
	deepEqual( Stem("trio"), "trio" );
	deepEqual( Stem("triompha"), "triomph" );
	deepEqual( Stem("triomphait"), "triomph" );
	deepEqual( Stem("triomphale"), "triomphal" );
	deepEqual( Stem("triomphant"), "triomph" );
	deepEqual( Stem("triomphante"), "triomph" );
	deepEqual( Stem("triomphe"), "triomph" );
	deepEqual( Stem("triomphé"), "triomph" );
	deepEqual( Stem("triomphent"), "triomphent" );
	deepEqual( Stem("triompher"), "triomph" );
	deepEqual( Stem("triomphera"), "triomph" );
	deepEqual( Stem("triompherait"), "triomph" );
	deepEqual( Stem("triompheront"), "triomph" );
	deepEqual( Stem("triomphes"), "triomph" );
	deepEqual( Stem("triple"), "tripl" );
	deepEqual( Stem("triplé"), "tripl" );
	deepEqual( Stem("triste"), "trist" );
	deepEqual( Stem("tristement"), "trist" );
	deepEqual( Stem("tristes"), "trist" );
	deepEqual( Stem("tristesse"), "tristess" );
	deepEqual( Stem("tristesses"), "tristess" );
	deepEqual( Stem("triumvirat"), "triumvirat" );
	deepEqual( Stem("triviale"), "trivial" );
	deepEqual( Stem("trois"), "trois" );
	deepEqual( Stem("troisième"), "troisiem" );
	deepEqual( Stem("troisièmes"), "troisiem" );
	deepEqual( Stem("trombe"), "tromb" );
	deepEqual( Stem("trompa"), "tromp" );
	deepEqual( Stem("trompaient"), "tromp" );
	deepEqual( Stem("trompait"), "tromp" );
	deepEqual( Stem("trompant"), "tromp" );
	deepEqual( Stem("trompe"), "tromp" );
	deepEqual( Stem("trompé"), "tromp" );
	deepEqual( Stem("trompée"), "tromp" );
	deepEqual( Stem("tromper"), "tromp" );
	deepEqual( Stem("tromperai"), "tromp" );
	deepEqual( Stem("tromperais"), "tromp" );
	deepEqual( Stem("trompes"), "tromp" );
	deepEqual( Stem("trompés"), "tromp" );
	deepEqual( Stem("trompez"), "tromp" );
	deepEqual( Stem("tronc"), "tronc" );
	deepEqual( Stem("tronçon"), "tronçon" );
	deepEqual( Stem("troncs"), "tronc" );
	deepEqual( Stem("trône"), "trôn" );
	deepEqual( Stem("trop"), "trop" );
	deepEqual( Stem("trophée"), "troph" );
	deepEqual( Stem("tropicale"), "tropical" );
	deepEqual( Stem("tropicales"), "tropical" );
	deepEqual( Stem("tropique"), "tropiqu" );
	deepEqual( Stem("tropiques"), "tropiqu" );
	deepEqual( Stem("troppo"), "troppo" );
	deepEqual( Stem("trot"), "trot" );
	deepEqual( Stem("trottait"), "trott" );
	deepEqual( Stem("trotter"), "trott" );
	deepEqual( Stem("trottoir"), "trottoir" );
	deepEqual( Stem("trottoirs"), "trottoir" );
	deepEqual( Stem("trou"), "trou" );
	deepEqual( Stem("troubla"), "troubl" );
	deepEqual( Stem("troublaient"), "troubl" );
	deepEqual( Stem("troublait"), "troubl" );
	deepEqual( Stem("troublant"), "troubl" );
	deepEqual( Stem("trouble"), "troubl" );
	deepEqual( Stem("troublé"), "troubl" );
	deepEqual( Stem("troublée"), "troubl" );
	deepEqual( Stem("troublées"), "troubl" );
	deepEqual( Stem("troubler"), "troubl" );
	deepEqual( Stem("troublera"), "troubl" );
	deepEqual( Stem("troublèrent"), "troubl" );
	deepEqual( Stem("troubleront"), "troubl" );
	deepEqual( Stem("troubles"), "troubl" );
	deepEqual( Stem("troublés"), "troubl" );
	deepEqual( Stem("troublez"), "troubl" );
	deepEqual( Stem("troupe"), "troup" );
	deepEqual( Stem("troupeau"), "troupeau" );
	deepEqual( Stem("troupes"), "troup" );
	deepEqual( Stem("troupiers"), "troupi" );
	deepEqual( Stem("trous"), "trous" );
	deepEqual( Stem("trousses"), "trouss" );
	deepEqual( Stem("trouva"), "trouv" );
	deepEqual( Stem("trouvai"), "trouv" );
	deepEqual( Stem("trouvaient"), "trouv" );
	deepEqual( Stem("trouvais"), "trouv" );
	deepEqual( Stem("trouvait"), "trouv" );
	deepEqual( Stem("trouvant"), "trouv" );
	deepEqual( Stem("trouvât"), "trouv" );
	deepEqual( Stem("trouve"), "trouv" );
	deepEqual( Stem("trouvé"), "trouv" );
	deepEqual( Stem("trouvée"), "trouv" );
	deepEqual( Stem("trouvées"), "trouv" );
	deepEqual( Stem("trouvent"), "trouvent" );
	deepEqual( Stem("trouver"), "trouv" );
	deepEqual( Stem("trouvera"), "trouv" );
	deepEqual( Stem("trouverai"), "trouv" );
	deepEqual( Stem("trouveraient"), "trouv" );
	deepEqual( Stem("trouverais"), "trouv" );
	deepEqual( Stem("trouverait"), "trouv" );
	deepEqual( Stem("trouveras"), "trouv" );
	deepEqual( Stem("trouvèrent"), "trouv" );
	deepEqual( Stem("trouverez"), "trouv" );
	deepEqual( Stem("trouveriez"), "trouv" );
	deepEqual( Stem("trouverions"), "trouv" );
	deepEqual( Stem("trouverons"), "trouv" );
	deepEqual( Stem("trouveront"), "trouv" );
	deepEqual( Stem("trouves"), "trouv" );
	deepEqual( Stem("trouvés"), "trouv" );
	deepEqual( Stem("trouvez"), "trouv" );
	deepEqual( Stem("trouvons"), "trouvon" );
	deepEqual( Stem("truites"), "truit" );
	deepEqual( Stem("trunk"), "trunk" );
	deepEqual( Stem("tu"), "tu" );
	deepEqual( Stem("tua"), "tu" );
	deepEqual( Stem("tuais"), "tu" );
	deepEqual( Stem("tuait"), "tu" );
	deepEqual( Stem("tuant"), "tu" );
	deepEqual( Stem("tudieu"), "tudieu" );
	deepEqual( Stem("tue"), "tu" );
	deepEqual( Stem("tué"), "tu" );
	deepEqual( Stem("tuée"), "tu" );
	deepEqual( Stem("tuent"), "tuent" );
	deepEqual( Stem("tuer"), "tu" );
	deepEqual( Stem("tuera"), "tu" );
	deepEqual( Stem("tuerai"), "tu" );
	deepEqual( Stem("tuerais"), "tu" );
	deepEqual( Stem("tuerait"), "tu" );
	deepEqual( Stem("tués"), "tu" );
	deepEqual( Stem("tuez"), "tu" );
	deepEqual( Stem("tuileries"), "tuiler" );
	deepEqual( Stem("tuiles"), "tuil" );
	deepEqual( Stem("tuilla"), "tuill" );
	deepEqual( Stem("tumulte"), "tumult" );
	deepEqual( Stem("tumultueuse"), "tumultu" );
	deepEqual( Stem("tunique"), "tuniqu" );
	deepEqual( Stem("tunnel"), "tunnel" );
	deepEqual( Stem("tunnels"), "tunnel" );
	deepEqual( Stem("turban"), "turban" );
	deepEqual( Stem("turbans"), "turban" );
	deepEqual( Stem("turin"), "turin" );
	deepEqual( Stem("turn"), "turn" );
	deepEqual( Stem("turpitude"), "turpitud" );
	deepEqual( Stem("tussaud"), "tussaud" );
	deepEqual( Stem("tut"), "tut" );
	deepEqual( Stem("tutoie"), "tutoi" );
	deepEqual( Stem("tutoiement"), "tutoi" );
	deepEqual( Stem("tutoyait"), "tutoi" );
	deepEqual( Stem("tutoyer"), "tutoi" );
	deepEqual( Stem("tutti"), "tutt" );
	deepEqual( Stem("tutto"), "tutto" );
	deepEqual( Stem("tuyau"), "tuyau" );
	deepEqual( Stem("tuyaux"), "tuyal" );
	deepEqual( Stem("twelfth"), "twelfth" );
	deepEqual( Stem("two"), "two" );
	deepEqual( Stem("tympaniser"), "tympanis" );
	deepEqual( Stem("type"), "typ" );
	deepEqual( Stem("types"), "typ" );
	deepEqual( Stem("typhon"), "typhon" );
	deepEqual( Stem("tyran"), "tyran" );
	deepEqual( Stem("tyrannie"), "tyrann" );
	deepEqual( Stem("tyrannisait"), "tyrannis" );
	deepEqual( Stem("tyrans"), "tyran" );
	deepEqual( Stem("uçaf"), "uçaf" );
	deepEqual( Stem("uddaul"), "uddaul" );
	deepEqual( Stem("ultimatum"), "ultimatum" );
	deepEqual( Stem("ultra"), "ultra" );
	deepEqual( Stem("ultras"), "ultras" );
	deepEqual( Stem("ulysse"), "ulyss" );
	deepEqual( Stem("un"), "un" );
	deepEqual( Stem("unam"), "unam" );
	deepEqual( Stem("unanime"), "unanim" );
	deepEqual( Stem("unanimement"), "unanim" );
	deepEqual( Stem("uncertain"), "uncertain" );
	deepEqual( Stem("une"), "une" );
	deepEqual( Stem("unes"), "une" );
	deepEqual( Stem("uni"), "uni" );
	deepEqual( Stem("unie"), "uni" );
	deepEqual( Stem("unième"), "uniem" );
	deepEqual( Stem("unies"), "uni" );
	deepEqual( Stem("uniforme"), "uniform" );
	deepEqual( Stem("uniformes"), "uniform" );
	deepEqual( Stem("union"), "union" );
	deepEqual( Stem("unique"), "uniqu" );
	deepEqual( Stem("uniquement"), "uniqu" );
	deepEqual( Stem("unis"), "unis" );
	deepEqual( Stem("unissaient"), "uniss" );
	deepEqual( Stem("unissait"), "uniss" );
	deepEqual( Stem("unissez"), "uniss" );
	deepEqual( Stem("univers"), "univer" );
	deepEqual( Stem("universel"), "universel" );
	deepEqual( Stem("universelle"), "universel" );
	deepEqual( Stem("uns"), "un" );
	deepEqual( Stem("uranus"), "uranus" );
	deepEqual( Stem("urbanité"), "urban" );
	deepEqual( Stem("urne"), "urne" );
	deepEqual( Stem("usa"), "usa" );
	deepEqual( Stem("usage"), "usag" );
	deepEqual( Stem("usages"), "usag" );
	deepEqual( Stem("usant"), "usant" );
	deepEqual( Stem("use"), "use" );
	deepEqual( Stem("usé"), "usé" );
	deepEqual( Stem("user"), "user" );
	deepEqual( Stem("usine"), "usin" );
	deepEqual( Stem("ustensile"), "ustensil" );
	deepEqual( Stem("usure"), "usur" );
	deepEqual( Stem("usuriers"), "usuri" );
	deepEqual( Stem("usurpateur"), "usurp" );
	deepEqual( Stem("usurpations"), "usurp" );
	deepEqual( Stem("usurpe"), "usurp" );
	deepEqual( Stem("usurpé"), "usurp" );
	deepEqual( Stem("usurpées"), "usurp" );
	deepEqual( Stem("usurpés"), "usurp" );
	deepEqual( Stem("utah"), "utah" );
	deepEqual( Stem("utile"), "util" );
	deepEqual( Stem("utiles"), "util" );
	deepEqual( Stem("utilisaient"), "utilis" );
	deepEqual( Stem("utiliser"), "utilis" );
	deepEqual( Stem("utilité"), "util" );
	deepEqual( Stem("uzeri"), "uzer" );
	deepEqual( Stem("uzès"), "uzes" );
	deepEqual( Stem("v"), "v" );
	deepEqual( Stem("va"), "va" );
	deepEqual( Stem("vacances"), "vacanc" );
	deepEqual( Stem("vacant"), "vac" );
	deepEqual( Stem("vacante"), "vac" );
	deepEqual( Stem("vacarme"), "vacarm" );
	deepEqual( Stem("vache"), "vach" );
	deepEqual( Stem("vacillais"), "vacill" );
	deepEqual( Stem("vagabond"), "vagabond" );
	deepEqual( Stem("vagabonde"), "vagabond" );
	deepEqual( Stem("vague"), "vagu" );
	deepEqual( Stem("vaguement"), "vagu" );
	deepEqual( Stem("vagues"), "vagu" );
	deepEqual( Stem("vaille"), "vaill" );
	deepEqual( Stem("vain"), "vain" );
	deepEqual( Stem("vaincre"), "vaincr" );
	deepEqual( Stem("vaincu"), "vaincu" );
	deepEqual( Stem("vaincue"), "vaincu" );
	deepEqual( Stem("vaincus"), "vaincus" );
	deepEqual( Stem("vaine"), "vain" );
	deepEqual( Stem("vainement"), "vain" );
	deepEqual( Stem("vaines"), "vain" );
	deepEqual( Stem("vainqueur"), "vainqueur" );
	deepEqual( Stem("vains"), "vain" );
	deepEqual( Stem("vais"), "vais" );
	deepEqual( Stem("vaisseau"), "vaisseau" );
	deepEqual( Stem("valable"), "valabl" );
	deepEqual( Stem("valables"), "valabl" );
	deepEqual( Stem("valaient"), "val" );
	deepEqual( Stem("valait"), "val" );
	deepEqual( Stem("valant"), "val" );
	deepEqual( Stem("vale"), "val" );
	deepEqual( Stem("valenod"), "valenod" );
	deepEqual( Stem("valent"), "valent" );
	deepEqual( Stem("valère"), "valer" );
	deepEqual( Stem("valet"), "valet" );
	deepEqual( Stem("valets"), "valet" );
	deepEqual( Stem("valeur"), "valeur" );
	deepEqual( Stem("vallee"), "valle" );
	deepEqual( Stem("vallée"), "vall" );
	deepEqual( Stem("vallées"), "vall" );
	deepEqual( Stem("valoir"), "valoir" );
	deepEqual( Stem("valois"), "valois" );
	deepEqual( Stem("valserra"), "valserr" );
	deepEqual( Stem("valu"), "valu" );
	deepEqual( Stem("valurent"), "valurent" );
	deepEqual( Stem("valut"), "valut" );
	deepEqual( Stem("vandalisme"), "vandal" );
	deepEqual( Stem("vane"), "van" );
	deepEqual( Stem("vaneau"), "vaneau" );
	deepEqual( Stem("vanité"), "vanit" );
	deepEqual( Stem("vaniteuse"), "vanit" );
	deepEqual( Stem("vaniteux"), "vanit" );
	deepEqual( Stem("vanta"), "vant" );
	deepEqual( Stem("vantait"), "vant" );
	deepEqual( Stem("vanté"), "vant" );
	deepEqual( Stem("vantent"), "vantent" );
	deepEqual( Stem("vanter"), "vant" );
	deepEqual( Stem("vanvitelli"), "vanvitel" );
	deepEqual( Stem("vapeur"), "vapeur" );
	deepEqual( Stem("vapeurs"), "vapeur" );
	deepEqual( Stem("varèse"), "vares" );
	deepEqual( Stem("variaient"), "vari" );
	deepEqual( Stem("varie"), "var" );
	deepEqual( Stem("varié"), "vari" );
	deepEqual( Stem("variétés"), "variet" );
	deepEqual( Stem("vas"), "vas" );
	deepEqual( Stem("vase"), "vas" );
	deepEqual( Stem("vases"), "vas" );
	deepEqual( Stem("vasi"), "vas" );
	deepEqual( Stem("vasistas"), "vasist" );
	deepEqual( Stem("vaste"), "vast" );
	deepEqual( Stem("vastes"), "vast" );
	deepEqual( Stem("vau"), "vau" );
	deepEqual( Stem("vaudeville"), "vaudevill" );
	deepEqual( Stem("vaudra"), "vaudr" );
	deepEqual( Stem("vaudrait"), "vaudr" );
	deepEqual( Stem("vaudront"), "vaudront" );
	deepEqual( Stem("vaurien"), "vaurien" );
	deepEqual( Stem("vaut"), "vaut" );
	deepEqual( Stem("vaux"), "vaux" );
	deepEqual( Stem("vécu"), "vécu" );
	deepEqual( Stem("vécurent"), "vécurent" );
	deepEqual( Stem("vécut"), "vécut" );
	deepEqual( Stem("vécût"), "vécût" );
	deepEqual( Stem("vedette"), "vedet" );
	deepEqual( Stem("vega"), "veg" );
	deepEqual( Stem("végétaient"), "véget" );
	deepEqual( Stem("végéter"), "véget" );
	deepEqual( Stem("véhémence"), "véhément" );
	deepEqual( Stem("véhément"), "veh" );
	deepEqual( Stem("véhicule"), "véhicul" );
	deepEqual( Stem("véhiculé"), "véhicul" );
	deepEqual( Stem("véhicules"), "véhicul" );
	deepEqual( Stem("veilla"), "veil" );
	deepEqual( Stem("veillaient"), "veil" );
	deepEqual( Stem("veillait"), "veil" );
	deepEqual( Stem("veillât"), "veil" );
	deepEqual( Stem("veille"), "veil" );
	deepEqual( Stem("veillé"), "veil" );
	deepEqual( Stem("veillent"), "veillent" );
	deepEqual( Stem("veiller"), "veil" );
	deepEqual( Stem("veillerons"), "veil" );
	deepEqual( Stem("veilles"), "veil" );
	deepEqual( Stem("veilleuse"), "veilleux" );
	deepEqual( Stem("veine"), "vein" );
	deepEqual( Stem("veines"), "vein" );
	deepEqual( Stem("velléité"), "velléit" );
	deepEqual( Stem("velléités"), "velléit" );
	deepEqual( Stem("velleja"), "vellej" );
	deepEqual( Stem("velours"), "velour" );
	deepEqual( Stem("vély"), "vély" );
	deepEqual( Stem("venaient"), "ven" );
	deepEqual( Stem("venait"), "ven" );
	deepEqual( Stem("vénales"), "vénal" );
	deepEqual( Stem("vénalité"), "vénal" );
	deepEqual( Stem("venant"), "ven" );
	deepEqual( Stem("venceslas"), "vencesl" );
	deepEqual( Stem("vend"), "vend" );
	deepEqual( Stem("vendait"), "vend" );
	deepEqual( Stem("vendant"), "vend" );
	deepEqual( Stem("vendée"), "vend" );
	deepEqual( Stem("vendent"), "vendent" );
	deepEqual( Stem("vendeur"), "vendeur" );
	deepEqual( Stem("vendeurs"), "vendeur" );
	deepEqual( Stem("vendit"), "vend" );
	deepEqual( Stem("vendrai"), "vendr" );
	deepEqual( Stem("vendrais"), "vendr" );
	deepEqual( Stem("vendrait"), "vendr" );
	deepEqual( Stem("vendre"), "vendr" );
	deepEqual( Stem("vendredi"), "vendred" );
	deepEqual( Stem("vendredis"), "vendred" );
	deepEqual( Stem("vendront"), "vendront" );
	deepEqual( Stem("vends"), "vend" );
	deepEqual( Stem("vendu"), "vendu" );
	deepEqual( Stem("vendue"), "vendu" );
	deepEqual( Stem("vendus"), "vendus" );
	deepEqual( Stem("vénérable"), "véner" );
	deepEqual( Stem("vénérables"), "véner" );
	deepEqual( Stem("vénération"), "véner" );
	deepEqual( Stem("vénère"), "véner" );
	deepEqual( Stem("vénérées"), "véner" );
	deepEqual( Stem("vénérer"), "véner" );
	deepEqual( Stem("venette"), "venet" );
	deepEqual( Stem("venez"), "ven" );
	deepEqual( Stem("venge"), "veng" );
	deepEqual( Stem("vengé"), "veng" );
	deepEqual( Stem("vengea"), "veng" );
	deepEqual( Stem("vengeait"), "veng" );
	deepEqual( Stem("vengeance"), "vengeanc" );
	deepEqual( Stem("vengée"), "veng" );
	deepEqual( Stem("vengent"), "vengent" );
	deepEqual( Stem("venger"), "veng" );
	deepEqual( Stem("vengera"), "veng" );
	deepEqual( Stem("vengerai"), "veng" );
	deepEqual( Stem("veniez"), "ven" );
	deepEqual( Stem("venin"), "venin" );
	deepEqual( Stem("venir"), "ven" );
	deepEqual( Stem("venise"), "venis" );
	deepEqual( Stem("vénitien"), "vénitien" );
	deepEqual( Stem("vénitiens"), "vénitien" );
	deepEqual( Stem("venons"), "venon" );
	deepEqual( Stem("vent"), "vent" );
	deepEqual( Stem("vente"), "vent" );
	deepEqual( Stem("ventes"), "vent" );
	deepEqual( Stem("ventre"), "ventr" );
	deepEqual( Stem("vents"), "vent" );
	deepEqual( Stem("venu"), "venu" );
	deepEqual( Stem("venue"), "venu" );
	deepEqual( Stem("venues"), "venu" );
	deepEqual( Stem("venus"), "venus" );
	deepEqual( Stem("vérandas"), "vérand" );
	deepEqual( Stem("verbal"), "verbal" );
	deepEqual( Stem("verbe"), "verb" );
	deepEqual( Stem("verdâtres"), "verdâtr" );
	deepEqual( Stem("verdict"), "verdict" );
	deepEqual( Stem("verdoyantes"), "verdoi" );
	deepEqual( Stem("verdoyants"), "verdoi" );
	deepEqual( Stem("verdure"), "verdur" );
	deepEqual( Stem("verger"), "verg" );
	deepEqual( Stem("vergogne"), "vergogn" );
	deepEqual( Stem("vergues"), "vergu" );
	deepEqual( Stem("vergy"), "vergy" );
	deepEqual( Stem("véridiques"), "vérid" );
	deepEqual( Stem("vérifia"), "vérifi" );
	deepEqual( Stem("vérification"), "vérif" );
	deepEqual( Stem("vérifié"), "vérifi" );
	deepEqual( Stem("vérifier"), "vérifi" );
	deepEqual( Stem("véritable"), "vérit" );
	deepEqual( Stem("véritablement"), "vérit" );
	deepEqual( Stem("véritables"), "vérit" );
	deepEqual( Stem("vérité"), "vérit" );
	deepEqual( Stem("vérités"), "vérit" );
	deepEqual( Stem("vermeilles"), "vermeil" );
	deepEqual( Stem("vermont"), "vermont" );
	deepEqual( Stem("vermoulu"), "vermoulu" );
	deepEqual( Stem("vermoulue"), "vermoulu" );
	deepEqual( Stem("verna"), "vern" );
	deepEqual( Stem("vernaye"), "vernay" );
	deepEqual( Stem("verne"), "vern" );
	deepEqual( Stem("vernes"), "vern" );
	deepEqual( Stem("verni"), "vern" );
	deepEqual( Stem("vernis"), "vern" );
	deepEqual( Stem("vérole"), "vérol" );
	deepEqual( Stem("verona"), "veron" );
	deepEqual( Stem("vérone"), "véron" );
	deepEqual( Stem("verra"), "verr" );
	deepEqual( Stem("verrai"), "verr" );
	deepEqual( Stem("verraient"), "verr" );
	deepEqual( Stem("verrais"), "verr" );
	deepEqual( Stem("verrait"), "verr" );
	deepEqual( Stem("verras"), "verr" );
	deepEqual( Stem("verre"), "verr" );
	deepEqual( Stem("verres"), "verr" );
	deepEqual( Stem("verrez"), "verr" );
	deepEqual( Stem("verrières"), "verri" );
	deepEqual( Stem("verrons"), "verron" );
	deepEqual( Stem("verront"), "verront" );
	deepEqual( Stem("verrou"), "verrou" );
	deepEqual( Stem("verrous"), "verrous" );
	deepEqual( Stem("verruqueux"), "verruqu" );
	deepEqual( Stem("vers"), "ver" );
	deepEqual( Stem("versa"), "vers" );
	deepEqual( Stem("versailles"), "versaill" );
	deepEqual( Stem("versait"), "vers" );
	deepEqual( Stem("versant"), "vers" );
	deepEqual( Stem("versants"), "vers" );
	deepEqual( Stem("verse"), "vers" );
	deepEqual( Stem("verser"), "vers" );
	deepEqual( Stem("versets"), "verset" );
	deepEqual( Stem("vert"), "vert" );
	deepEqual( Stem("verte"), "vert" );
	deepEqual( Stem("vertement"), "vert" );
	deepEqual( Stem("vertes"), "vert" );
	deepEqual( Stem("vertical"), "vertical" );
	deepEqual( Stem("verticale"), "vertical" );
	deepEqual( Stem("verticalement"), "vertical" );
	deepEqual( Stem("verts"), "vert" );
	deepEqual( Stem("vertu"), "vertu" );
	deepEqual( Stem("vertueuse"), "vertueux" );
	deepEqual( Stem("vertueuses"), "vertueux" );
	deepEqual( Stem("vertueux"), "vertueux" );
	deepEqual( Stem("vertus"), "vertus" );
	deepEqual( Stem("verve"), "verv" );
	deepEqual( Stem("very"), "very" );
	deepEqual( Stem("vespasien"), "vespasien" );
	deepEqual( Stem("vesper"), "vesp" );
	deepEqual( Stem("veste"), "vest" );
	deepEqual( Stem("vestes"), "vest" );
	deepEqual( Stem("vestibule"), "vestibul" );
	deepEqual( Stem("vestige"), "vestig" );
	deepEqual( Stem("vésuve"), "vésuv" );
	deepEqual( Stem("vêtement"), "vêt" );
	deepEqual( Stem("vêtements"), "vêt" );
	deepEqual( Stem("vêtent"), "vêtent" );
	deepEqual( Stem("vétille"), "vétill" );
	deepEqual( Stem("vetturini"), "vetturin" );
	deepEqual( Stem("vetturino"), "vetturino" );
	deepEqual( Stem("vêtu"), "vêtu" );
	deepEqual( Stem("vêtue"), "vêtu" );
	deepEqual( Stem("vêtues"), "vêtu" );
	deepEqual( Stem("vêtus"), "vêtus" );
	deepEqual( Stem("veuf"), "veuf" );
	deepEqual( Stem("veuille"), "veuill" );
	deepEqual( Stem("veuillez"), "veuill" );
	deepEqual( Stem("veuilliez"), "veuill" );
	deepEqual( Stem("veulent"), "veulent" );
	deepEqual( Stem("veut"), "veut" );
	deepEqual( Stem("veuvage"), "veuvag" );
	deepEqual( Stem("veuve"), "veuv" );
	deepEqual( Stem("veuves"), "veuv" );
	deepEqual( Stem("veux"), "veux" );
	deepEqual( Stem("vexait"), "vex" );
	deepEqual( Stem("vexantes"), "vex" );
	deepEqual( Stem("vexations"), "vexat" );
	deepEqual( Stem("vexé"), "vex" );
	deepEqual( Stem("vexer"), "vex" );
	deepEqual( Stem("vexés"), "vex" );
	deepEqual( Stem("vi"), "vi" );
	deepEqual( Stem("via"), "vi" );
	deepEqual( Stem("viaducs"), "viaduc" );
	deepEqual( Stem("viagère"), "viager" );
	deepEqual( Stem("viande"), "viand" );
	deepEqual( Stem("viandes"), "viand" );
	deepEqual( Stem("viatique"), "viatiqu" );
	deepEqual( Stem("vibrations"), "vibrat" );
	deepEqual( Stem("vicaire"), "vicair" );
	deepEqual( Stem("vicaires"), "vicair" );
	deepEqual( Stem("vice"), "vic" );
	deepEqual( Stem("vices"), "vic" );
	deepEqual( Stem("vicieux"), "vicieux" );
	deepEqual( Stem("vicissitudes"), "vicissitud" );
	deepEqual( Stem("vico"), "vico" );
	deepEqual( Stem("vicolo"), "vicolo" );
	deepEqual( Stem("vicomte"), "vicomt" );
	deepEqual( Stem("vicomtes"), "vicomt" );
	deepEqual( Stem("victime"), "victim" );
	deepEqual( Stem("victimes"), "victim" );
	deepEqual( Stem("victoire"), "victoir" );
	deepEqual( Stem("victoires"), "victoir" );
	deepEqual( Stem("victor"), "victor" );
	deepEqual( Stem("victoria"), "victori" );
	deepEqual( Stem("victorieuse"), "victori" );
	deepEqual( Stem("vicvacarma"), "vicvacarm" );
	deepEqual( Stem("vida"), "vid" );
	deepEqual( Stem("vidaient"), "vid" );
	deepEqual( Stem("vidant"), "vid" );
	deepEqual( Stem("vide"), "vid" );
	deepEqual( Stem("vidées"), "vid" );
	deepEqual( Stem("vider"), "vid" );
	deepEqual( Stem("vides"), "vid" );
	deepEqual( Stem("videz"), "vid" );
	deepEqual( Stem("vie"), "vi" );
	deepEqual( Stem("vieil"), "vieil" );
	deepEqual( Stem("vieillard"), "vieillard" );
	deepEqual( Stem("vieillards"), "vieillard" );
	deepEqual( Stem("vieille"), "vieil" );
	deepEqual( Stem("vieilles"), "vieil" );
	deepEqual( Stem("vieillesse"), "vieilless" );
	deepEqual( Stem("vieillie"), "vieil" );
	deepEqual( Stem("vieillir"), "vieil" );
	deepEqual( Stem("vieillit"), "vieil" );
	deepEqual( Stem("viendra"), "viendr" );
	deepEqual( Stem("viendrai"), "viendr" );
	deepEqual( Stem("viendraient"), "viendr" );
	deepEqual( Stem("viendrait"), "viendr" );
	deepEqual( Stem("viendras"), "viendr" );
	deepEqual( Stem("vienne"), "vien" );
	deepEqual( Stem("viennent"), "viennent" );
	deepEqual( Stem("viennes"), "vien" );
	deepEqual( Stem("viens"), "vien" );
	deepEqual( Stem("vient"), "vient" );
	deepEqual( Stem("vierge"), "vierg" );
	deepEqual( Stem("vies"), "vi" );
	deepEqual( Stem("vieux"), "vieux" );
	deepEqual( Stem("views"), "view" );
	deepEqual( Stem("vif"), "vif" );
	deepEqual( Stem("vifs"), "vif" );
	deepEqual( Stem("vigano"), "vigano" );
	deepEqual( Stem("vigilante"), "vigil" );
	deepEqual( Stem("vignano"), "vignano" );
	deepEqual( Stem("vigne"), "vign" );
	deepEqual( Stem("vigoureuse"), "vigour" );
	deepEqual( Stem("vigoureusement"), "vigour" );
	deepEqual( Stem("vigoureuses"), "vigour" );
	deepEqual( Stem("vigoureux"), "vigour" );
	deepEqual( Stem("vigueur"), "vigueur" );
	deepEqual( Stem("viharis"), "vihar" );
	deepEqual( Stem("vii"), "vii" );
	deepEqual( Stem("viii"), "vii" );
	deepEqual( Stem("vil"), "vil" );
	deepEqual( Stem("vilain"), "vilain" );
	deepEqual( Stem("vilaine"), "vilain" );
	deepEqual( Stem("vilaines"), "vilain" );
	deepEqual( Stem("vilains"), "vilain" );
	deepEqual( Stem("vile"), "vil" );
	deepEqual( Stem("vilenie"), "vilen" );
	deepEqual( Stem("vilipendé"), "vilipend" );
	deepEqual( Stem("vilipendée"), "vilipend" );
	deepEqual( Stem("villa"), "vill" );
	deepEqual( Stem("village"), "villag" );
	deepEqual( Stem("villages"), "villag" );
	deepEqual( Stem("ville"), "vill" );
	deepEqual( Stem("villequier"), "villequi" );
	deepEqual( Stem("villes"), "vill" );
	deepEqual( Stem("vils"), "vil" );
	deepEqual( Stem("vîmes"), "vîm" );
	deepEqual( Stem("vin"), "vin" );
	deepEqual( Stem("vinci"), "vinc" );
	deepEqual( Stem("vindhias"), "vindhi" );
	deepEqual( Stem("vindicatif"), "vindiqu" );
	deepEqual( Stem("vindicative"), "vindiqu" );
	deepEqual( Stem("vingt"), "vingt" );
	deepEqual( Stem("vingtaine"), "vingtain" );
	deepEqual( Stem("vingtième"), "vingtiem" );
	deepEqual( Stem("vingts"), "vingt" );
	deepEqual( Stem("vinrent"), "vinrent" );
	deepEqual( Stem("vins"), "vin" );
	deepEqual( Stem("vinsse"), "vinss" );
	deepEqual( Stem("vint"), "vint" );
	deepEqual( Stem("vînt"), "vînt" );
	deepEqual( Stem("viole"), "viol" );
	deepEqual( Stem("violé"), "viol" );
	deepEqual( Stem("violemment"), "violent" );
	deepEqual( Stem("violence"), "violenc" );
	deepEqual( Stem("violent"), "violent" );
	deepEqual( Stem("violentant"), "violent" );
	deepEqual( Stem("violente"), "violent" );
	deepEqual( Stem("violenté"), "violent" );
	deepEqual( Stem("violentes"), "violent" );
	deepEqual( Stem("violents"), "violent" );
	deepEqual( Stem("violer"), "viol" );
	deepEqual( Stem("violes"), "viol" );
	deepEqual( Stem("violets"), "violet" );
	deepEqual( Stem("violette"), "violet" );
	deepEqual( Stem("violettes"), "violet" );
	deepEqual( Stem("violiers"), "violi" );
	deepEqual( Stem("violon"), "violon" );
	deepEqual( Stem("vipère"), "viper" );
	deepEqual( Stem("virago"), "virago" );
	deepEqual( Stem("virent"), "virent" );
	deepEqual( Stem("virgile"), "virgil" );
	deepEqual( Stem("virtue"), "virtu" );
	deepEqual( Stem("virtuose"), "virtuos" );
	deepEqual( Stem("vis"), "vis" );
	deepEqual( Stem("visa"), "vis" );
	deepEqual( Stem("visage"), "visag" );
	deepEqual( Stem("visages"), "visag" );
	deepEqual( Stem("visas"), "vis" );
	deepEqual( Stem("visconti"), "viscont" );
	deepEqual( Stem("visé"), "vis" );
	deepEqual( Stem("visent"), "visent" );
	deepEqual( Stem("viser"), "vis" );
	deepEqual( Stem("viserez"), "vis" );
	deepEqual( Stem("visible"), "visibl" );
	deepEqual( Stem("visiblement"), "visibl" );
	deepEqual( Stem("visibles"), "visibl" );
	deepEqual( Stem("vision"), "vision" );
	deepEqual( Stem("visions"), "vision" );
	deepEqual( Stem("visita"), "visit" );
	deepEqual( Stem("visitation"), "visit" );
	deepEqual( Stem("visite"), "visit" );
	deepEqual( Stem("visité"), "visit" );
	deepEqual( Stem("visitées"), "visit" );
	deepEqual( Stem("visiter"), "visit" );
	deepEqual( Stem("visitera"), "visit" );
	deepEqual( Stem("visites"), "visit" );
	deepEqual( Stem("viso"), "viso" );
	deepEqual( Stem("visons"), "vison" );
	deepEqual( Stem("visu"), "visu" );
	deepEqual( Stem("vit"), "vit" );
	deepEqual( Stem("vît"), "vît" );
	deepEqual( Stem("vite"), "vit" );
	deepEqual( Stem("vitesse"), "vitess" );
	deepEqual( Stem("vitesses"), "vitess" );
	deepEqual( Stem("vitraux"), "vitral" );
	deepEqual( Stem("vitre"), "vitr" );
	deepEqual( Stem("vitres"), "vitr" );
	deepEqual( Stem("viva"), "viv" );
	deepEqual( Stem("vivacité"), "vivac" );
	deepEqual( Stem("vivaient"), "viv" );
	deepEqual( Stem("vivais"), "viv" );
	deepEqual( Stem("vivait"), "viv" );
	deepEqual( Stem("vivandière"), "vivandi" );
	deepEqual( Stem("vivandières"), "vivandi" );
	deepEqual( Stem("vivant"), "viv" );
	deepEqual( Stem("vivante"), "viv" );
	deepEqual( Stem("vivants"), "viv" );
	deepEqual( Stem("vive"), "viv" );
	deepEqual( Stem("vivement"), "viv" );
	deepEqual( Stem("vivent"), "vivent" );
	deepEqual( Stem("vives"), "viv" );
	deepEqual( Stem("vivez"), "viv" );
	deepEqual( Stem("vivons"), "vivon" );
	deepEqual( Stem("vivoter"), "vivot" );
	deepEqual( Stem("vivra"), "vivr" );
	deepEqual( Stem("vivrai"), "vivr" );
	deepEqual( Stem("vivrait"), "vivr" );
	deepEqual( Stem("vivre"), "vivr" );
	deepEqual( Stem("vivres"), "vivr" );
	deepEqual( Stem("vivrez"), "vivr" );
	deepEqual( Stem("vivrions"), "vivrion" );
	deepEqual( Stem("vivrons"), "vivron" );
	deepEqual( Stem("vivront"), "vivront" );
	deepEqual( Stem("vocation"), "vocat" );
	deepEqual( Stem("vociférations"), "vocifer" );
	deepEqual( Stem("voeu"), "voeu" );
	deepEqual( Stem("voeux"), "voeux" );
	deepEqual( Stem("voguer"), "vogu" );
	deepEqual( Stem("voi"), "voi" );
	deepEqual( Stem("voici"), "voic" );
	deepEqual( Stem("voie"), "voi" );
	deepEqual( Stem("voient"), "voient" );
	deepEqual( Stem("voies"), "voi" );
	deepEqual( Stem("voilà"), "voilà" );
	deepEqual( Stem("voile"), "voil" );
	deepEqual( Stem("voilé"), "voil" );
	deepEqual( Stem("voilée"), "voil" );
	deepEqual( Stem("voilées"), "voil" );
	deepEqual( Stem("voiles"), "voil" );
	deepEqual( Stem("voilés"), "voil" );
	deepEqual( Stem("voilure"), "voilur" );
	deepEqual( Stem("voir"), "voir" );
	deepEqual( Stem("vois"), "vois" );
	deepEqual( Stem("voisin"), "voisin" );
	deepEqual( Stem("voisinage"), "voisinag" );
	deepEqual( Stem("voisine"), "voisin" );
	deepEqual( Stem("voisines"), "voisin" );
	deepEqual( Stem("voisins"), "voisin" );
	deepEqual( Stem("voit"), "voit" );
	deepEqual( Stem("voiture"), "voitur" );
	deepEqual( Stem("voitures"), "voitur" );
	deepEqual( Stem("voix"), "voix" );
	deepEqual( Stem("vol"), "vol" );
	deepEqual( Stem("volaient"), "vol" );
	deepEqual( Stem("volaille"), "volaill" );
	deepEqual( Stem("volait"), "vol" );
	deepEqual( Stem("volant"), "vol" );
	deepEqual( Stem("volants"), "vol" );
	deepEqual( Stem("volatiles"), "volatil" );
	deepEqual( Stem("volcan"), "volcan" );
	deepEqual( Stem("vole"), "vol" );
	deepEqual( Stem("volé"), "vol" );
	deepEqual( Stem("volée"), "vol" );
	deepEqual( Stem("volées"), "vol" );
	deepEqual( Stem("volent"), "volent" );
	deepEqual( Stem("voler"), "vol" );
	deepEqual( Stem("volera"), "vol" );
	deepEqual( Stem("volerai"), "vol" );
	deepEqual( Stem("volerait"), "vol" );
	deepEqual( Stem("volés"), "vol" );
	deepEqual( Stem("volet"), "volet" );
	deepEqual( Stem("volets"), "volet" );
	deepEqual( Stem("voleur"), "voleur" );
	deepEqual( Stem("voleurs"), "voleur" );
	deepEqual( Stem("volez"), "vol" );
	deepEqual( Stem("volière"), "voli" );
	deepEqual( Stem("volontaire"), "volontair" );
	deepEqual( Stem("volontairement"), "volontair" );
	deepEqual( Stem("volontaires"), "volontair" );
	deepEqual( Stem("volonté"), "volont" );
	deepEqual( Stem("volontés"), "volont" );
	deepEqual( Stem("volontiers"), "volonti" );
	deepEqual( Stem("vols"), "vol" );
	deepEqual( Stem("voltaire"), "voltair" );
	deepEqual( Stem("voltige"), "voltig" );
	deepEqual( Stem("voltigeant"), "voltig" );
	deepEqual( Stem("voltiger"), "voltig" );
	deepEqual( Stem("voltigeur"), "voltigeur" );
	deepEqual( Stem("volubilité"), "volubil" );
	deepEqual( Stem("volume"), "volum" );
	deepEqual( Stem("volumes"), "volum" );
	deepEqual( Stem("volupté"), "volupt" );
	deepEqual( Stem("voluptés"), "volupt" );
	deepEqual( Stem("voluptueuse"), "voluptu" );
	deepEqual( Stem("voluptueusement"), "voluptu" );
	deepEqual( Stem("voluptueuses"), "voluptu" );
	deepEqual( Stem("voluptueux"), "voluptu" );
	deepEqual( Stem("volutes"), "volut" );
	deepEqual( Stem("vomero"), "vomero" );
	deepEqual( Stem("vomir"), "vom" );
	deepEqual( Stem("vomissait"), "vom" );
	deepEqual( Stem("vont"), "vont" );
	deepEqual( Stem("voraces"), "vorac" );
	deepEqual( Stem("vos"), "vos" );
	deepEqual( Stem("votaient"), "vot" );
	deepEqual( Stem("votant"), "vot" );
	deepEqual( Stem("vote"), "vot" );
	deepEqual( Stem("voté"), "vot" );
	deepEqual( Stem("votée"), "vot" );
	deepEqual( Stem("voter"), "vot" );
	deepEqual( Stem("votes"), "vot" );
	deepEqual( Stem("votre"), "votr" );
	deepEqual( Stem("vôtre"), "vôtr" );
	deepEqual( Stem("vôtres"), "vôtr" );
	deepEqual( Stem("voudra"), "voudr" );
	deepEqual( Stem("voudraient"), "voudr" );
	deepEqual( Stem("voudrais"), "voudr" );
	deepEqual( Stem("voudrait"), "voudr" );
	deepEqual( Stem("voudras"), "voudr" );
	deepEqual( Stem("voudrez"), "voudr" );
	deepEqual( Stem("voudriez"), "voudr" );
	deepEqual( Stem("voudrions"), "voudrion" );
	deepEqual( Stem("voudront"), "voudront" );
	deepEqual( Stem("voué"), "vou" );
	deepEqual( Stem("vouent"), "vouent" );
	deepEqual( Stem("vouer"), "vou" );
	deepEqual( Stem("vouèrent"), "vou" );
	deepEqual( Stem("voulaient"), "voul" );
	deepEqual( Stem("voulais"), "voul" );
	deepEqual( Stem("voulait"), "voul" );
	deepEqual( Stem("voulant"), "voul" );
	deepEqual( Stem("voulez"), "voul" );
	deepEqual( Stem("vouliez"), "voul" );
	deepEqual( Stem("vouloir"), "vouloir" );
	deepEqual( Stem("voulons"), "voulon" );
	deepEqual( Stem("voulu"), "voulu" );
	deepEqual( Stem("voulues"), "voulu" );
	deepEqual( Stem("voulurent"), "voulurent" );
	deepEqual( Stem("voulus"), "voulus" );
	deepEqual( Stem("voulussent"), "voulussent" );
	deepEqual( Stem("voulut"), "voulut" );
	deepEqual( Stem("voulût"), "voulût" );
	deepEqual( Stem("vous"), "vous" );
	deepEqual( Stem("voûte"), "voût" );
	deepEqual( Stem("voûtes"), "voût" );
	deepEqual( Stem("voyage"), "voyag" );
	deepEqual( Stem("voyagé"), "voyag" );
	deepEqual( Stem("voyageait"), "voyag" );
	deepEqual( Stem("voyageant"), "voyag" );
	deepEqual( Stem("voyagent"), "voyagent" );
	deepEqual( Stem("voyageons"), "voyageon" );
	deepEqual( Stem("voyager"), "voyag" );
	deepEqual( Stem("voyages"), "voyag" );
	deepEqual( Stem("voyageur"), "voyageur" );
	deepEqual( Stem("voyageurs"), "voyageur" );
	deepEqual( Stem("voyageuse"), "voyag" );
	deepEqual( Stem("voyagez"), "voyag" );
	deepEqual( Stem("voyaient"), "voi" );
	deepEqual( Stem("voyais"), "voi" );
	deepEqual( Stem("voyait"), "voi" );
	deepEqual( Stem("voyant"), "voi" );
	deepEqual( Stem("voyez"), "voi" );
	deepEqual( Stem("voyiez"), "voi" );
	deepEqual( Stem("voyons"), "voyon" );
	deepEqual( Stem("vrai"), "vrai" );
	deepEqual( Stem("vraie"), "vrai" );
	deepEqual( Stem("vraies"), "vrai" );
	deepEqual( Stem("vraiment"), "vrai" );
	deepEqual( Stem("vrais"), "vrais" );
	deepEqual( Stem("vraisemblable"), "vraisembl" );
	deepEqual( Stem("vraisemblablement"), "vraisembl" );
	deepEqual( Stem("vu"), "vu" );
	deepEqual( Stem("vue"), "vu" );
	deepEqual( Stem("vues"), "vu" );
	deepEqual( Stem("vulgaire"), "vulgair" );
	deepEqual( Stem("vulgairement"), "vulgair" );
	deepEqual( Stem("vulgaires"), "vulgair" );
	deepEqual( Stem("vulgarité"), "vulgar" );
	deepEqual( Stem("vus"), "vus" );
	deepEqual( Stem("w"), "w" );
	deepEqual( Stem("wagon"), "wagon" );
	deepEqual( Stem("wagons"), "wagon" );
	deepEqual( Stem("wagram"), "wagram" );
	deepEqual( Stem("wahsatch"), "wahsatch" );
	deepEqual( Stem("walbah"), "walbah" );
	deepEqual( Stem("walter"), "walt" );
	deepEqual( Stem("wandering"), "wandering" );
	deepEqual( Stem("was"), "was" );
	deepEqual( Stem("washington"), "washington" );
	deepEqual( Stem("waterloo"), "waterloo" );
	deepEqual( Stem("wayne"), "wayn" );
	deepEqual( Stem("we"), "we" );
	deepEqual( Stem("weber"), "web" );
	deepEqual( Stem("wellington"), "wellington" );
	deepEqual( Stem("were"), "wer" );
	deepEqual( Stem("west"), "west" );
	deepEqual( Stem("wharf"), "wharf" );
	deepEqual( Stem("wharfs"), "wharf" );
	deepEqual( Stem("which"), "which" );
	deepEqual( Stem("whisky"), "whisky" );
	deepEqual( Stem("whisnou"), "whisnou" );
	deepEqual( Stem("whist"), "whist" );
	deepEqual( Stem("white"), "whit" );
	deepEqual( Stem("will"), "will" );
	deepEqual( Stem("william"), "william" );
	deepEqual( Stem("wilson"), "wilson" );
	deepEqual( Stem("with"), "with" );
	deepEqual( Stem("withdrew"), "withdrew" );
	deepEqual( Stem("word"), "word" );
	deepEqual( Stem("would"), "would" );
	deepEqual( Stem("wyoming"), "wyoming" );
	deepEqual( Stem("x"), "x" );
	deepEqual( Stem("xavier"), "xavi" );
	deepEqual( Stem("xérès"), "xéres" );
	deepEqual( Stem("xi"), "xi" );
	deepEqual( Stem("xii"), "xii" );
	deepEqual( Stem("xiii"), "xii" );
	deepEqual( Stem("xiv"), "xiv" );
	deepEqual( Stem("xix"), "xix" );
	deepEqual( Stem("xv"), "xv" );
	deepEqual( Stem("xvi"), "xvi" );
	deepEqual( Stem("xvii"), "xvii" );
	deepEqual( Stem("xviii"), "xvii" );
	deepEqual( Stem("xx"), "xx" );
	deepEqual( Stem("xxi"), "xxi" );
	deepEqual( Stem("xxii"), "xxii" );
	deepEqual( Stem("xxiii"), "xxii" );
	deepEqual( Stem("xxiv"), "xxiv" );
	deepEqual( Stem("xxix"), "xxix" );
	deepEqual( Stem("xxv"), "xxv" );
	deepEqual( Stem("xxvi"), "xxvi" );
	deepEqual( Stem("xxvii"), "xxvii" );
	deepEqual( Stem("xxviii"), "xxvii" );
	deepEqual( Stem("xxx"), "xxx" );
	deepEqual( Stem("xxxi"), "xxxi" );
	deepEqual( Stem("xxxii"), "xxxii" );
	deepEqual( Stem("xxxiii"), "xxxii" );
	deepEqual( Stem("xxxiv"), "xxxiv" );
	deepEqual( Stem("xxxv"), "xxxv" );
	deepEqual( Stem("xxxvi"), "xxxvi" );
	deepEqual( Stem("xxxvii"), "xxxvii" );
	deepEqual( Stem("y"), "y" );
	deepEqual( Stem("yacht"), "yacht" );
	deepEqual( Stem("yachts"), "yacht" );
	deepEqual( Stem("yakounines"), "yakounin" );
	deepEqual( Stem("yankee"), "yanke" );
	deepEqual( Stem("yeddo"), "yeddo" );
	deepEqual( Stem("yert"), "yert" );
	deepEqual( Stem("yet"), "yet" );
	deepEqual( Stem("yeux"), "yeux" );
	deepEqual( Stem("yokohama"), "yokoham" );
	deepEqual( Stem("york"), "york" );
	deepEqual( Stem("young"), "young" );
	deepEqual( Stem("zambajon"), "zambajon" );
	deepEqual( Stem("zeb"), "zeb" );
	deepEqual( Stem("zébrés"), "zebr" );
	deepEqual( Stem("zébus"), "zébus" );
	deepEqual( Stem("zèle"), "zel" );
	deepEqual( Stem("zélés"), "zel" );
	deepEqual( Stem("zénith"), "zénith" );
	deepEqual( Stem("zigzags"), "zigzag" );
	deepEqual( Stem("zingarelli"), "zingarel" );
	deepEqual( Stem("zonders"), "zonder" );
	deepEqual( Stem("zoroastre"), "zoroastr" );
	deepEqual( Stem("zurla"), "zurl" );
});
