QUnit.test('english', function(){
	var Stem = snowballFactory.newStemmer('english').stem;
	deepEqual( Stem("'"), "'" );
	deepEqual( Stem("''"), "''" );
	deepEqual( Stem("'a"), "'a" );
	deepEqual( Stem("'s"), "'s" );
	deepEqual( Stem("'aa"), "aa" );
	deepEqual( Stem("'as"), "as" );
	deepEqual( Stem("'''"), "'" );
	deepEqual( Stem("'a'"), "a" );
	deepEqual( Stem("'s'"), "s" );
	deepEqual( Stem("'aa'"), "aa" );
	deepEqual( Stem("'as'"), "as" );
	deepEqual( Stem("a"), "a" );
	deepEqual( Stem("a'"), "a'" );
	deepEqual( Stem("a''"), "a'" );
	deepEqual( Stem("aa'"), "aa" );
	deepEqual( Stem("aback"), "aback" );
	deepEqual( Stem("abandon"), "abandon" );
	deepEqual( Stem("abandoned"), "abandon" );
	deepEqual( Stem("abandoning"), "abandon" );
	deepEqual( Stem("abandonment"), "abandon" );
	deepEqual( Stem("abandons"), "abandon" );
	deepEqual( Stem("abasement"), "abas" );
	deepEqual( Stem("abashed"), "abash" );
	deepEqual( Stem("abate"), "abat" );
	deepEqual( Stem("abated"), "abat" );
	deepEqual( Stem("abbey"), "abbey" );
	deepEqual( Stem("abbott"), "abbott" );
	deepEqual( Stem("abbreviation"), "abbrevi" );
	deepEqual( Stem("abdicate"), "abdic" );
	deepEqual( Stem("abdicating"), "abdic" );
	deepEqual( Stem("abdomen"), "abdomen" );
	deepEqual( Stem("abdominal"), "abdomin" );
	deepEqual( Stem("abe"), "abe" );
	deepEqual( Stem("abear"), "abear" );
	deepEqual( Stem("abed"), "abe" );
	deepEqual( Stem("abel"), "abel" );
	deepEqual( Stem("aberration"), "aberr" );
	deepEqual( Stem("abershaw"), "abershaw" );
	deepEqual( Stem("abet"), "abet" );
	deepEqual( Stem("abettor"), "abettor" );
	deepEqual( Stem("abeyance"), "abey" );
	deepEqual( Stem("abhorred"), "abhor" );
	deepEqual( Stem("abhorrence"), "abhorr" );
	deepEqual( Stem("abhorring"), "abhor" );
	deepEqual( Stem("abide"), "abid" );
	deepEqual( Stem("abiding"), "abid" );
	deepEqual( Stem("abilities"), "abil" );
	deepEqual( Stem("ability"), "abil" );
	deepEqual( Stem("abimee"), "abime" );
	deepEqual( Stem("abingdon"), "abingdon" );
	deepEqual( Stem("abipones"), "abipon" );
	deepEqual( Stem("abject"), "abject" );
	deepEqual( Stem("abjectly"), "abject" );
	deepEqual( Stem("abjectness"), "abject" );
	deepEqual( Stem("abjure"), "abjur" );
	deepEqual( Stem("abjured"), "abjur" );
	deepEqual( Stem("abl"), "abl" );
	deepEqual( Stem("able"), "abl" );
	deepEqual( Stem("ablutions"), "ablut" );
	deepEqual( Stem("abnegation"), "abneg" );
	deepEqual( Stem("abnormal"), "abnorm" );
	deepEqual( Stem("abnormality"), "abnorm" );
	deepEqual( Stem("abnormally"), "abnorm" );
	deepEqual( Stem("aboard"), "aboard" );
	deepEqual( Stem("abode"), "abod" );
	deepEqual( Stem("abodes"), "abod" );
	deepEqual( Stem("abolish"), "abolish" );
	deepEqual( Stem("abolished"), "abolish" );
	deepEqual( Stem("abolishing"), "abolish" );
	deepEqual( Stem("abolition"), "abolit" );
	deepEqual( Stem("abominable"), "abomin" );
	deepEqual( Stem("abominably"), "abomin" );
	deepEqual( Stem("abominated"), "abomin" );
	deepEqual( Stem("abomination"), "abomin" );
	deepEqual( Stem("aboot"), "aboot" );
	deepEqual( Stem("aboriginal"), "aborigin" );
	deepEqual( Stem("aboriginally"), "aborigin" );
	deepEqual( Stem("aborigines"), "aborigin" );
	deepEqual( Stem("abortion"), "abort" );
	deepEqual( Stem("abortions"), "abort" );
	deepEqual( Stem("abortive"), "abort" );
	deepEqual( Stem("abound"), "abound" );
	deepEqual( Stem("abounded"), "abound" );
	deepEqual( Stem("abounding"), "abound" );
	deepEqual( Stem("abounds"), "abound" );
	deepEqual( Stem("about"), "about" );
	deepEqual( Stem("above"), "abov" );
	deepEqual( Stem("aboveboard"), "aboveboard" );
	deepEqual( Stem("abraham"), "abraham" );
	deepEqual( Stem("abreast"), "abreast" );
	deepEqual( Stem("abridge"), "abridg" );
	deepEqual( Stem("abridged"), "abridg" );
	deepEqual( Stem("abroad"), "abroad" );
	deepEqual( Stem("abrogated"), "abrog" );
	deepEqual( Stem("abrolhos"), "abrolho" );
	deepEqual( Stem("abrupt"), "abrupt" );
	deepEqual( Stem("abruptly"), "abrupt" );
	deepEqual( Stem("abruptness"), "abrupt" );
	deepEqual( Stem("abscess"), "abscess" );
	deepEqual( Stem("absence"), "absenc" );
	deepEqual( Stem("absent"), "absent" );
	deepEqual( Stem("absenting"), "absent" );
	deepEqual( Stem("absolute"), "absolut" );
	deepEqual( Stem("absolutely"), "absolut" );
	deepEqual( Stem("absolve"), "absolv" );
	deepEqual( Stem("absolved"), "absolv" );
	deepEqual( Stem("absorb"), "absorb" );
	deepEqual( Stem("absorbed"), "absorb" );
	deepEqual( Stem("absorbent"), "absorb" );
	deepEqual( Stem("absorbing"), "absorb" );
	deepEqual( Stem("absorbs"), "absorb" );
	deepEqual( Stem("absorption"), "absorpt" );
	deepEqual( Stem("abstain"), "abstain" );
	deepEqual( Stem("abstained"), "abstain" );
	deepEqual( Stem("abstaining"), "abstain" );
	deepEqual( Stem("abstinence"), "abstin" );
	deepEqual( Stem("abstract"), "abstract" );
	deepEqual( Stem("abstracted"), "abstract" );
	deepEqual( Stem("abstractedly"), "abstract" );
	deepEqual( Stem("abstraction"), "abstract" );
	deepEqual( Stem("abstracts"), "abstract" );
	deepEqual( Stem("abstruse"), "abstrus" );
	deepEqual( Stem("absurd"), "absurd" );
	deepEqual( Stem("absurdities"), "absurd" );
	deepEqual( Stem("absurdity"), "absurd" );
	deepEqual( Stem("absurdly"), "absurd" );
	deepEqual( Stem("abt"), "abt" );
	deepEqual( Stem("abundance"), "abund" );
	deepEqual( Stem("abundant"), "abund" );
	deepEqual( Stem("abundantly"), "abund" );
	deepEqual( Stem("abuse"), "abus" );
	deepEqual( Stem("abused"), "abus" );
	deepEqual( Stem("abuses"), "abus" );
	deepEqual( Stem("abusing"), "abus" );
	deepEqual( Stem("abusive"), "abus" );
	deepEqual( Stem("abut"), "abut" );
	deepEqual( Stem("abuts"), "abut" );
	deepEqual( Stem("abutting"), "abut" );
	deepEqual( Stem("abyss"), "abyss" );
	deepEqual( Stem("abysses"), "abyss" );
	deepEqual( Stem("abyssinia"), "abyssinia" );
	deepEqual( Stem("ac"), "ac" );
	deepEqual( Stem("acacia"), "acacia" );
	deepEqual( Stem("acacias"), "acacia" );
	deepEqual( Stem("academy"), "academi" );
	deepEqual( Stem("acalypha"), "acalypha" );
	deepEqual( Stem("acapulco"), "acapulco" );
	deepEqual( Stem("accede"), "acced" );
	deepEqual( Stem("acceded"), "acced" );
	deepEqual( Stem("accedes"), "acced" );
	deepEqual( Stem("accelerate"), "acceler" );
	deepEqual( Stem("accelerated"), "acceler" );
	deepEqual( Stem("accent"), "accent" );
	deepEqual( Stem("accents"), "accent" );
	deepEqual( Stem("accept"), "accept" );
	deepEqual( Stem("acceptable"), "accept" );
	deepEqual( Stem("acceptance"), "accept" );
	deepEqual( Stem("acceptances"), "accept" );
	deepEqual( Stem("acceptation"), "accept" );
	deepEqual( Stem("accepted"), "accept" );
	deepEqual( Stem("accepting"), "accept" );
	deepEqual( Stem("accepts"), "accept" );
	deepEqual( Stem("access"), "access" );
	deepEqual( Stem("accessible"), "access" );
	deepEqual( Stem("accession"), "access" );
	deepEqual( Stem("accessories"), "accessori" );
	deepEqual( Stem("accessory"), "accessori" );
	deepEqual( Stem("accident"), "accid" );
	deepEqual( Stem("accidental"), "accident" );
	deepEqual( Stem("accidentally"), "accident" );
	deepEqual( Stem("accidents"), "accid" );
	deepEqual( Stem("acclamations"), "acclam" );
	deepEqual( Stem("acclivity"), "accliv" );
	deepEqual( Stem("accommodate"), "accommod" );
	deepEqual( Stem("accommodated"), "accommod" );
	deepEqual( Stem("accommodating"), "accommod" );
	deepEqual( Stem("accommodation"), "accommod" );
	deepEqual( Stem("accommodations"), "accommod" );
	deepEqual( Stem("accompanied"), "accompani" );
	deepEqual( Stem("accompanies"), "accompani" );
	deepEqual( Stem("accompaniment"), "accompani" );
	deepEqual( Stem("accompaniments"), "accompani" );
	deepEqual( Stem("accompany"), "accompani" );
	deepEqual( Stem("accompanying"), "accompani" );
	deepEqual( Stem("accomplice"), "accomplic" );
	deepEqual( Stem("accomplices"), "accomplic" );
	deepEqual( Stem("accomplish"), "accomplish" );
	deepEqual( Stem("accomplished"), "accomplish" );
	deepEqual( Stem("accomplishes"), "accomplish" );
	deepEqual( Stem("accomplishing"), "accomplish" );
	deepEqual( Stem("accomplishment"), "accomplish" );
	deepEqual( Stem("accomplishments"), "accomplish" );
	deepEqual( Stem("accord"), "accord" );
	deepEqual( Stem("accordance"), "accord" );
	deepEqual( Stem("accorded"), "accord" );
	deepEqual( Stem("according"), "accord" );
	deepEqual( Stem("accordingly"), "accord" );
	deepEqual( Stem("accosted"), "accost" );
	deepEqual( Stem("accosting"), "accost" );
	deepEqual( Stem("accoun"), "accoun" );
	deepEqual( Stem("account"), "account" );
	deepEqual( Stem("accountabilities"), "account" );
	deepEqual( Stem("accountability"), "account" );
	deepEqual( Stem("accountable"), "account" );
	deepEqual( Stem("accountant"), "account" );
	deepEqual( Stem("accounted"), "account" );
	deepEqual( Stem("accounting"), "account" );
	deepEqual( Stem("accounts"), "account" );
	deepEqual( Stem("accoutred"), "accoutr" );
	deepEqual( Stem("accoutrements"), "accoutr" );
	deepEqual( Stem("accredited"), "accredit" );
	deepEqual( Stem("accrue"), "accru" );
	deepEqual( Stem("accrued"), "accru" );
	deepEqual( Stem("accruing"), "accru" );
	deepEqual( Stem("accumulate"), "accumul" );
	deepEqual( Stem("accumulated"), "accumul" );
	deepEqual( Stem("accumulating"), "accumul" );
	deepEqual( Stem("accumulation"), "accumul" );
	deepEqual( Stem("accumulations"), "accumul" );
	deepEqual( Stem("accuracy"), "accuraci" );
	deepEqual( Stem("accurate"), "accur" );
	deepEqual( Stem("accurately"), "accur" );
	deepEqual( Stem("accursed"), "accurs" );
	deepEqual( Stem("accusation"), "accus" );
	deepEqual( Stem("accusations"), "accus" );
	deepEqual( Stem("accuse"), "accus" );
	deepEqual( Stem("accused"), "accus" );
	deepEqual( Stem("accuser"), "accus" );
	deepEqual( Stem("accusers"), "accus" );
	deepEqual( Stem("accuses"), "accus" );
	deepEqual( Stem("accusing"), "accus" );
	deepEqual( Stem("accustom"), "accustom" );
	deepEqual( Stem("accustomed"), "accustom" );
	deepEqual( Stem("accustoming"), "accustom" );
	deepEqual( Stem("ace"), "ace" );
	deepEqual( Stem("acerbity"), "acerb" );
	deepEqual( Stem("aces"), "ace" );
	deepEqual( Stem("ach"), "ach" );
	deepEqual( Stem("ache"), "ach" );
	deepEqual( Stem("ached"), "ach" );
	deepEqual( Stem("aches"), "ach" );
	deepEqual( Stem("achieve"), "achiev" );
	deepEqual( Stem("achieved"), "achiev" );
	deepEqual( Stem("achievement"), "achiev" );
	deepEqual( Stem("achievements"), "achiev" );
	deepEqual( Stem("achieves"), "achiev" );
	deepEqual( Stem("achieving"), "achiev" );
	deepEqual( Stem("achilles"), "achill" );
	deepEqual( Stem("aching"), "ach" );
	deepEqual( Stem("acid"), "acid" );
	deepEqual( Stem("acids"), "acid" );
	deepEqual( Stem("ack"), "ack" );
	deepEqual( Stem("ackney"), "ackney" );
	deepEqual( Stem("acknowledge"), "acknowledg" );
	deepEqual( Stem("acknowledged"), "acknowledg" );
	deepEqual( Stem("acknowledgement"), "acknowledg" );
	deepEqual( Stem("acknowledges"), "acknowledg" );
	deepEqual( Stem("acknowledging"), "acknowledg" );
	deepEqual( Stem("acknowledgment"), "acknowledg" );
	deepEqual( Stem("acknowledgments"), "acknowledg" );
	deepEqual( Stem("aconcagua"), "aconcagua" );
	deepEqual( Stem("acorn"), "acorn" );
	deepEqual( Stem("acquaint"), "acquaint" );
	deepEqual( Stem("acquaintance"), "acquaint" );
	deepEqual( Stem("acquaintances"), "acquaint" );
	deepEqual( Stem("acquainted"), "acquaint" );
	deepEqual( Stem("acquainting"), "acquaint" );
	deepEqual( Stem("acquaints"), "acquaint" );
	deepEqual( Stem("acquiesce"), "acquiesc" );
	deepEqual( Stem("acquiesced"), "acquiesc" );
	deepEqual( Stem("acquiescence"), "acquiesc" );
	deepEqual( Stem("acquiescent"), "acquiesc" );
	deepEqual( Stem("acquiesces"), "acquiesc" );
	deepEqual( Stem("acquiescing"), "acquiesc" );
	deepEqual( Stem("acquire"), "acquir" );
	deepEqual( Stem("acquired"), "acquir" );
	deepEqual( Stem("acquirement"), "acquir" );
	deepEqual( Stem("acquirements"), "acquir" );
	deepEqual( Stem("acquires"), "acquir" );
	deepEqual( Stem("acquiring"), "acquir" );
	deepEqual( Stem("acquisition"), "acquisit" );
	deepEqual( Stem("acquit"), "acquit" );
	deepEqual( Stem("acquittal"), "acquitt" );
	deepEqual( Stem("acquitted"), "acquit" );
	deepEqual( Stem("acqulred"), "acqulr" );
	deepEqual( Stem("acre"), "acr" );
	deepEqual( Stem("acres"), "acr" );
	deepEqual( Stem("acrid"), "acrid" );
	deepEqual( Stem("acrimonious"), "acrimoni" );
	deepEqual( Stem("acrimoniously"), "acrimoni" );
	deepEqual( Stem("across"), "across" );
	deepEqual( Stem("acrydium"), "acrydium" );
	deepEqual( Stem("act"), "act" );
	deepEqual( Stem("acted"), "act" );
	deepEqual( Stem("acting"), "act" );
	deepEqual( Stem("actinia"), "actinia" );
	deepEqual( Stem("action"), "action" );
	deepEqual( Stem("actions"), "action" );
	deepEqual( Stem("active"), "activ" );
	deepEqual( Stem("actively"), "activ" );
	deepEqual( Stem("activity"), "activ" );
	deepEqual( Stem("actor"), "actor" );
	deepEqual( Stem("actors"), "actor" );
	deepEqual( Stem("actress"), "actress" );
	deepEqual( Stem("actresses"), "actress" );
	deepEqual( Stem("acts"), "act" );
	deepEqual( Stem("actual"), "actual" );
	deepEqual( Stem("actuality"), "actual" );
	deepEqual( Stem("actually"), "actual" );
	deepEqual( Stem("actuate"), "actuat" );
	deepEqual( Stem("actuated"), "actuat" );
	deepEqual( Stem("actuating"), "actuat" );
	deepEqual( Stem("acumen"), "acumen" );
	deepEqual( Stem("acunha"), "acunha" );
	deepEqual( Stem("acut"), "acut" );
	deepEqual( Stem("acute"), "acut" );
	deepEqual( Stem("acutely"), "acut" );
	deepEqual( Stem("acuteness"), "acut" );
	deepEqual( Stem("acuter"), "acut" );
	deepEqual( Stem("ad"), "ad" );
	deepEqual( Stem("ada"), "ada" );
	deepEqual( Stem("adage"), "adag" );
	deepEqual( Stem("adages"), "adag" );
	deepEqual( Stem("adam"), "adam" );
	deepEqual( Stem("adamant"), "adam" );
	deepEqual( Stem("adams"), "adam" );
	deepEqual( Stem("adapt"), "adapt" );
	deepEqual( Stem("adaptability"), "adapt" );
	deepEqual( Stem("adaptable"), "adapt" );
	deepEqual( Stem("adaptation"), "adapt" );
	deepEqual( Stem("adapted"), "adapt" );
	deepEqual( Stem("adapter"), "adapt" );
	deepEqual( Stem("adapting"), "adapt" );
	deepEqual( Stem("adapts"), "adapt" );
	deepEqual( Stem("adas"), "ada" );
	deepEqual( Stem("add"), "add" );
	deepEqual( Stem("added"), "ad" );
	deepEqual( Stem("adder"), "adder" );
	deepEqual( Stem("addicted"), "addict" );
	deepEqual( Stem("adding"), "ad" );
	deepEqual( Stem("addition"), "addit" );
	deepEqual( Stem("additional"), "addit" );
	deepEqual( Stem("additionally"), "addit" );
	deepEqual( Stem("additions"), "addit" );
	deepEqual( Stem("addled"), "addl" );
	deepEqual( Stem("address"), "address" );
	deepEqual( Stem("addressed"), "address" );
	deepEqual( Stem("addresses"), "address" );
	deepEqual( Stem("addressing"), "address" );
	deepEqual( Stem("adds"), "add" );
	deepEqual( Stem("adduced"), "adduc" );
	deepEqual( Stem("adducing"), "adduc" );
	deepEqual( Stem("adequate"), "adequ" );
	deepEqual( Stem("adhere"), "adher" );
	deepEqual( Stem("adhered"), "adher" );
	deepEqual( Stem("adherence"), "adher" );
	deepEqual( Stem("adherent"), "adher" );
	deepEqual( Stem("adherents"), "adher" );
	deepEqual( Stem("adheres"), "adher" );
	deepEqual( Stem("adhering"), "adher" );
	deepEqual( Stem("adhesive"), "adhes" );
	deepEqual( Stem("adieu"), "adieu" );
	deepEqual( Stem("adieux"), "adieux" );
	deepEqual( Stem("adimonia"), "adimonia" );
	deepEqual( Stem("adios"), "adio" );
	deepEqual( Stem("adjacent"), "adjac" );
	deepEqual( Stem("adjective"), "adject" );
	deepEqual( Stem("adjoined"), "adjoin" );
	deepEqual( Stem("adjoining"), "adjoin" );
	deepEqual( Stem("adjourned"), "adjourn" );
	deepEqual( Stem("adjournment"), "adjourn" );
	deepEqual( Stem("adjuration"), "adjur" );
	deepEqual( Stem("adjurations"), "adjur" );
	deepEqual( Stem("adjured"), "adjur" );
	deepEqual( Stem("adjuring"), "adjur" );
	deepEqual( Stem("adjust"), "adjust" );
	deepEqual( Stem("adjusted"), "adjust" );
	deepEqual( Stem("adjusting"), "adjust" );
	deepEqual( Stem("adjustment"), "adjust" );
	deepEqual( Stem("adjusts"), "adjust" );
	deepEqual( Stem("adjutant"), "adjut" );
	deepEqual( Stem("administer"), "administ" );
	deepEqual( Stem("administered"), "administ" );
	deepEqual( Stem("administering"), "administ" );
	deepEqual( Stem("administration"), "administr" );
	deepEqual( Stem("administrative"), "administr" );
	deepEqual( Stem("administrator"), "administr" );
	deepEqual( Stem("administrators"), "administr" );
	deepEqual( Stem("admirable"), "admir" );
	deepEqual( Stem("admirably"), "admir" );
	deepEqual( Stem("admiral"), "admir" );
	deepEqual( Stem("admiralty"), "admiralti" );
	deepEqual( Stem("admiration"), "admir" );
	deepEqual( Stem("admire"), "admir" );
	deepEqual( Stem("admired"), "admir" );
	deepEqual( Stem("admirer"), "admir" );
	deepEqual( Stem("admirers"), "admir" );
	deepEqual( Stem("admires"), "admir" );
	deepEqual( Stem("admiring"), "admir" );
	deepEqual( Stem("admiringly"), "admir" );
	deepEqual( Stem("admission"), "admiss" );
	deepEqual( Stem("admissions"), "admiss" );
	deepEqual( Stem("admit"), "admit" );
	deepEqual( Stem("admits"), "admit" );
	deepEqual( Stem("admittance"), "admitt" );
	deepEqual( Stem("admitted"), "admit" );
	deepEqual( Stem("admitting"), "admit" );
	deepEqual( Stem("admixture"), "admixtur" );
	deepEqual( Stem("admonished"), "admonish" );
	deepEqual( Stem("admonishes"), "admonish" );
	deepEqual( Stem("admonishing"), "admonish" );
	deepEqual( Stem("admonition"), "admonit" );
	deepEqual( Stem("admonitions"), "admonit" );
	deepEqual( Stem("admonitory"), "admonitori" );
	deepEqual( Stem("adn"), "adn" );
	deepEqual( Stem("ado"), "ado" );
	deepEqual( Stem("adopt"), "adopt" );
	deepEqual( Stem("adopted"), "adopt" );
	deepEqual( Stem("adopting"), "adopt" );
	deepEqual( Stem("adoption"), "adopt" );
	deepEqual( Stem("adoration"), "ador" );
	deepEqual( Stem("adorations"), "ador" );
	deepEqual( Stem("adore"), "ador" );
	deepEqual( Stem("adored"), "ador" );
	deepEqual( Stem("adores"), "ador" );
	deepEqual( Stem("adoring"), "ador" );
	deepEqual( Stem("adorned"), "adorn" );
	deepEqual( Stem("adorning"), "adorn" );
	deepEqual( Stem("adornment"), "adorn" );
	deepEqual( Stem("adornments"), "adorn" );
	deepEqual( Stem("adorns"), "adorn" );
	deepEqual( Stem("adrianople"), "adrianopl" );
	deepEqual( Stem("adrift"), "adrift" );
	deepEqual( Stem("adroit"), "adroit" );
	deepEqual( Stem("adulation"), "adul" );
	deepEqual( Stem("adulatory"), "adulatori" );
	deepEqual( Stem("adult"), "adult" );
	deepEqual( Stem("adultery"), "adulteri" );
	deepEqual( Stem("advance"), "advanc" );
	deepEqual( Stem("advanced"), "advanc" );
	deepEqual( Stem("advancement"), "advanc" );
	deepEqual( Stem("advances"), "advanc" );
	deepEqual( Stem("advancing"), "advanc" );
	deepEqual( Stem("advantage"), "advantag" );
	deepEqual( Stem("advantageous"), "advantag" );
	deepEqual( Stem("advantageously"), "advantag" );
	deepEqual( Stem("advantages"), "advantag" );
	deepEqual( Stem("advent"), "advent" );
	deepEqual( Stem("adventure"), "adventur" );
	deepEqual( Stem("adventurer"), "adventur" );
	deepEqual( Stem("adventurers"), "adventur" );
	deepEqual( Stem("adventures"), "adventur" );
	deepEqual( Stem("adventuresses"), "adventuress" );
	deepEqual( Stem("adventurous"), "adventur" );
	deepEqual( Stem("adventurously"), "adventur" );
	deepEqual( Stem("adversaries"), "adversari" );
	deepEqual( Stem("adversary"), "adversari" );
	deepEqual( Stem("adverse"), "advers" );
	deepEqual( Stem("adversity"), "advers" );
	deepEqual( Stem("advert"), "advert" );
	deepEqual( Stem("adverted"), "advert" );
	deepEqual( Stem("adverting"), "advert" );
	deepEqual( Stem("advertise"), "advertis" );
	deepEqual( Stem("advertised"), "advertis" );
	deepEqual( Stem("advertisement"), "advertis" );
	deepEqual( Stem("advertisements"), "advertis" );
	deepEqual( Stem("advertiser"), "advertis" );
	deepEqual( Stem("advertising"), "advertis" );
	deepEqual( Stem("advice"), "advic" );
	deepEqual( Stem("advisability"), "advis" );
	deepEqual( Stem("advisable"), "advis" );
	deepEqual( Stem("advise"), "advis" );
	deepEqual( Stem("advised"), "advis" );
	deepEqual( Stem("advisedly"), "advis" );
	deepEqual( Stem("adviser"), "advis" );
	deepEqual( Stem("advises"), "advis" );
	deepEqual( Stem("advising"), "advis" );
	deepEqual( Stem("advocacy"), "advocaci" );
	deepEqual( Stem("advocate"), "advoc" );
	deepEqual( Stem("advocated"), "advoc" );
	deepEqual( Stem("advocating"), "advoc" );
	deepEqual( Stem("adwiser"), "adwis" );
	deepEqual( Stem("aeqam"), "aeqam" );
	deepEqual( Stem("aerial"), "aerial" );
	deepEqual( Stem("aeriform"), "aeriform" );
	deepEqual( Stem("aeronaut"), "aeronaut" );
	deepEqual( Stem("aeronautics"), "aeronaut" );
	deepEqual( Stem("aery"), "aeri" );
	deepEqual( Stem("aeschylus"), "aeschylus" );
	deepEqual( Stem("aesop"), "aesop" );
	deepEqual( Stem("aesthetic"), "aesthet" );
	deepEqual( Stem("aesthetically"), "aesthet" );
	deepEqual( Stem("aesthetics"), "aesthet" );
	deepEqual( Stem("aestivation"), "aestiv" );
	deepEqual( Stem("afanasy"), "afanasi" );
	deepEqual( Stem("afanasyvitch"), "afanasyvitch" );
	deepEqual( Stem("afar"), "afar" );
	deepEqual( Stem("afeard"), "afeard" );
	deepEqual( Stem("afeared"), "afear" );
	deepEqual( Stem("afer"), "afer" );
	deepEqual( Stem("affability"), "affabl" );
	deepEqual( Stem("affable"), "affabl" );
	deepEqual( Stem("affably"), "affabl" );
	deepEqual( Stem("affair"), "affair" );
	deepEqual( Stem("affairs"), "affair" );
	deepEqual( Stem("affect"), "affect" );
	deepEqual( Stem("affectation"), "affect" );
	deepEqual( Stem("affected"), "affect" );
	deepEqual( Stem("affectedly"), "affect" );
	deepEqual( Stem("affecting"), "affect" );
	deepEqual( Stem("affection"), "affect" );
	deepEqual( Stem("affectionate"), "affection" );
	deepEqual( Stem("affectionately"), "affection" );
	deepEqual( Stem("affections"), "affect" );
	deepEqual( Stem("affects"), "affect" );
	deepEqual( Stem("afferdavid"), "afferdavid" );
	deepEqual( Stem("affidavit"), "affidavit" );
	deepEqual( Stem("affidavits"), "affidavit" );
	deepEqual( Stem("affinity"), "affin" );
	deepEqual( Stem("affirm"), "affirm" );
	deepEqual( Stem("affirmative"), "affirm" );
	deepEqual( Stem("affirmed"), "affirm" );
	deepEqual( Stem("affirms"), "affirm" );
	deepEqual( Stem("afflict"), "afflict" );
	deepEqual( Stem("afflicted"), "afflict" );
	deepEqual( Stem("afflicting"), "afflict" );
	deepEqual( Stem("affliction"), "afflict" );
	deepEqual( Stem("afflictions"), "afflict" );
	deepEqual( Stem("affluence"), "affluenc" );
	deepEqual( Stem("affluent"), "affluent" );
	deepEqual( Stem("afford"), "afford" );
	deepEqual( Stem("afforded"), "afford" );
	deepEqual( Stem("affording"), "afford" );
	deepEqual( Stem("affords"), "afford" );
	deepEqual( Stem("affright"), "affright" );
	deepEqual( Stem("affrighted"), "affright" );
	deepEqual( Stem("affront"), "affront" );
	deepEqual( Stem("affronted"), "affront" );
	deepEqual( Stem("afield"), "afield" );
	deepEqual( Stem("aflicto"), "aflicto" );
	deepEqual( Stem("afloat"), "afloat" );
	deepEqual( Stem("afoot"), "afoot" );
	deepEqual( Stem("afore"), "afor" );
	deepEqual( Stem("aforementioned"), "aforement" );
	deepEqual( Stem("aforesaid"), "aforesaid" );
	deepEqual( Stem("afraid"), "afraid" );
	deepEqual( Stem("afresh"), "afresh" );
	deepEqual( Stem("africa"), "africa" );
	deepEqual( Stem("african"), "african" );
	deepEqual( Stem("afrique"), "afriqu" );
	deepEqual( Stem("afrosinya"), "afrosinya" );
	deepEqual( Stem("afsd"), "afsd" );
	deepEqual( Stem("aft"), "aft" );
	deepEqual( Stem("after"), "after" );
	deepEqual( Stem("afternoon"), "afternoon" );
	deepEqual( Stem("afternoons"), "afternoon" );
	deepEqual( Stem("afterthought"), "afterthought" );
	deepEqual( Stem("afterwards"), "afterward" );
	deepEqual( Stem("agai"), "agai" );
	deepEqual( Stem("again"), "again" );
	deepEqual( Stem("against"), "against" );
	deepEqual( Stem("agate"), "agat" );
	deepEqual( Stem("agave"), "agav" );
	deepEqual( Stem("agaves"), "agav" );
	deepEqual( Stem("age"), "age" );
	deepEqual( Stem("agean"), "agean" );
	deepEqual( Stem("aged"), "age" );
	deepEqual( Stem("agency"), "agenc" );
	deepEqual( Stem("agent"), "agent" );
	deepEqual( Stem("agents"), "agent" );
	deepEqual( Stem("agers"), "ager" );
	deepEqual( Stem("ages"), "age" );
	deepEqual( Stem("aggeravating"), "aggerav" );
	deepEqual( Stem("agglomeration"), "agglomer" );
	deepEqual( Stem("agglutinated"), "agglutin" );
	deepEqual( Stem("aggrandizement"), "aggrandiz" );
	deepEqual( Stem("aggravate"), "aggrav" );
	deepEqual( Stem("aggravated"), "aggrav" );
	deepEqual( Stem("aggravates"), "aggrav" );
	deepEqual( Stem("aggravating"), "aggrav" );
	deepEqual( Stem("aggravation"), "aggrav" );
	deepEqual( Stem("aggravations"), "aggrav" );
	deepEqual( Stem("aggregate"), "aggreg" );
	deepEqual( Stem("aggregated"), "aggreg" );
	deepEqual( Stem("aggression"), "aggress" );
	deepEqual( Stem("aggressor"), "aggressor" );
	deepEqual( Stem("aggrieved"), "aggriev" );
	deepEqual( Stem("aghast"), "aghast" );
	deepEqual( Stem("agility"), "agil" );
	deepEqual( Stem("agin"), "agin" );
	deepEqual( Stem("agitate"), "agit" );
	deepEqual( Stem("agitated"), "agit" );
	deepEqual( Stem("agitating"), "agit" );
	deepEqual( Stem("agitation"), "agit" );
	deepEqual( Stem("agitators"), "agit" );
	deepEqual( Stem("aglow"), "aglow" );
	deepEqual( Stem("agnes"), "agn" );
	deepEqual( Stem("ago"), "ago" );
	deepEqual( Stem("agonies"), "agoni" );
	deepEqual( Stem("agonised"), "agonis" );
	deepEqual( Stem("agonising"), "agonis" );
	deepEqual( Stem("agonisingly"), "agonis" );
	deepEqual( Stem("agonizing"), "agon" );
	deepEqual( Stem("agony"), "agoni" );
	deepEqual( Stem("agouti"), "agouti" );
	deepEqual( Stem("agoutis"), "agouti" );
	deepEqual( Stem("agrarian"), "agrarian" );
	deepEqual( Stem("agree"), "agre" );
	deepEqual( Stem("agreeable"), "agreeabl" );
	deepEqual( Stem("agreeably"), "agreeabl" );
	deepEqual( Stem("agreed"), "agre" );
	deepEqual( Stem("agreeing"), "agre" );
	deepEqual( Stem("agreement"), "agreement" );
	deepEqual( Stem("agrees"), "agre" );
	deepEqual( Stem("agricult"), "agricult" );
	deepEqual( Stem("agricultural"), "agricultur" );
	deepEqual( Stem("agriculture"), "agricultur" );
	deepEqual( Stem("agriculturists"), "agriculturist" );
	deepEqual( Stem("aground"), "aground" );
	deepEqual( Stem("agua"), "agua" );
	deepEqual( Stem("ague"), "agu" );
	deepEqual( Stem("agueros"), "aguero" );
	deepEqual( Stem("ah"), "ah" );
	deepEqual( Stem("aha"), "aha" );
	deepEqual( Stem("ahead"), "ahead" );
	deepEqual( Stem("ai"), "ai" );
	deepEqual( Stem("aid"), "aid" );
	deepEqual( Stem("aided"), "aid" );
	deepEqual( Stem("aider"), "aider" );
	deepEqual( Stem("aiding"), "aid" );
	deepEqual( Stem("aids"), "aid" );
	deepEqual( Stem("aie"), "aie" );
	deepEqual( Stem("ailing"), "ail" );
	deepEqual( Stem("ailment"), "ailment" );
	deepEqual( Stem("ailments"), "ailment" );
	deepEqual( Stem("ails"), "ail" );
	deepEqual( Stem("aim"), "aim" );
	deepEqual( Stem("aimed"), "aim" );
	deepEqual( Stem("aiming"), "aim" );
	deepEqual( Stem("aimless"), "aimless" );
	deepEqual( Stem("aimlessly"), "aimless" );
	deepEqual( Stem("aims"), "aim" );
	deepEqual( Stem("ain"), "ain" );
	deepEqual( Stem("air"), "air" );
	deepEqual( Stem("aired"), "air" );
	deepEqual( Stem("airily"), "airili" );
	deepEqual( Stem("airing"), "air" );
	deepEqual( Stem("airlessness"), "airless" );
	deepEqual( Stem("airnest"), "airnest" );
	deepEqual( Stem("airs"), "air" );
	deepEqual( Stem("airy"), "airi" );
	deepEqual( Stem("aisle"), "aisl" );
	deepEqual( Stem("aits"), "ait" );
	deepEqual( Stem("ajar"), "ajar" );
	deepEqual( Stem("ajax"), "ajax" );
	deepEqual( Stem("akad"), "akad" );
	deepEqual( Stem("ake"), "ake" );
	deepEqual( Stem("akeady"), "akeadi" );
	deepEqual( Stem("akimbo"), "akimbo" );
	deepEqual( Stem("akin"), "akin" );
	deepEqual( Stem("al"), "al" );
	deepEqual( Stem("alabaster"), "alabast" );
	deepEqual( Stem("alacrity"), "alacr" );
	deepEqual( Stem("alameda"), "alameda" );
	deepEqual( Stem("alarm"), "alarm" );
	deepEqual( Stem("alarmed"), "alarm" );
	deepEqual( Stem("alarming"), "alarm" );
	deepEqual( Stem("alarmingly"), "alarm" );
	deepEqual( Stem("alarms"), "alarm" );
	deepEqual( Stem("alas"), "ala" );
	deepEqual( Stem("alba"), "alba" );
	deepEqual( Stem("albania"), "albania" );
	deepEqual( Stem("albanians"), "albanian" );
	deepEqual( Stem("albans"), "alban" );
	deepEqual( Stem("albatross"), "albatross" );
	deepEqual( Stem("albeit"), "albeit" );
	deepEqual( Stem("albemarle"), "albemarl" );
	deepEqual( Stem("albert"), "albert" );
	deepEqual( Stem("albertine"), "albertin" );
	deepEqual( Stem("albiceps"), "albicep" );
	deepEqual( Stem("albicollis"), "albicolli" );
	deepEqual( Stem("albicores"), "albicor" );
	deepEqual( Stem("albino"), "albino" );
	deepEqual( Stem("albion"), "albion" );
	deepEqual( Stem("album"), "album" );
	deepEqual( Stem("albuminous"), "albumin" );
	deepEqual( Stem("albury"), "alburi" );
	deepEqual( Stem("alcicornis"), "alcicorni" );
	deepEqual( Stem("alcide"), "alcid" );
	deepEqual( Stem("alcohol"), "alcohol" );
	deepEqual( Stem("alder"), "alder" );
	deepEqual( Stem("alderman"), "alderman" );
	deepEqual( Stem("aldershot"), "aldershot" );
	deepEqual( Stem("aldgate"), "aldgat" );
	deepEqual( Stem("ale"), "ale" );
	deepEqual( Stem("alehouse"), "alehous" );
	deepEqual( Stem("alehouses"), "alehous" );
	deepEqual( Stem("aleide"), "aleid" );
	deepEqual( Stem("alerce"), "alerc" );
	deepEqual( Stem("alert"), "alert" );
	deepEqual( Stem("alexander"), "alexand" );
	deepEqual( Stem("alexandr"), "alexandr" );
	deepEqual( Stem("alexandrovna"), "alexandrovna" );
	deepEqual( Stem("alexey"), "alexey" );
	deepEqual( Stem("alfalfa"), "alfalfa" );
	deepEqual( Stem("alfonso"), "alfonso" );
	deepEqual( Stem("alford"), "alford" );
	deepEqual( Stem("alfred"), "alfr" );
	deepEqual( Stem("algarroba"), "algarroba" );
	deepEqual( Stem("algebra"), "algebra" );
	deepEqual( Stem("alice"), "alic" );
	deepEqual( Stem("alienated"), "alien" );
	deepEqual( Stem("alight"), "alight" );
	deepEqual( Stem("alighted"), "alight" );
	deepEqual( Stem("alighting"), "alight" );
	deepEqual( Stem("alights"), "alight" );
	deepEqual( Stem("alike"), "alik" );
	deepEqual( Stem("alive"), "aliv" );
	deepEqual( Stem("all"), "all" );
	deepEqual( Stem("allah"), "allah" );
	deepEqual( Stem("allan"), "allan" );
	deepEqual( Stem("allay"), "allay" );
	deepEqual( Stem("allayed"), "allay" );
	deepEqual( Stem("allays"), "allay" );
	deepEqual( Stem("allegation"), "alleg" );
	deepEqual( Stem("allegations"), "alleg" );
	deepEqual( Stem("alleged"), "alleg" );
	deepEqual( Stem("allegiance"), "allegi" );
	deepEqual( Stem("alleging"), "alleg" );
	deepEqual( Stem("allegorical"), "allegor" );
	deepEqual( Stem("allegories"), "allegori" );
	deepEqual( Stem("allegory"), "allegori" );
	deepEqual( Stem("allenby"), "allenbi" );
	deepEqual( Stem("aller"), "aller" );
	deepEqual( Stem("alleviate"), "allevi" );
	deepEqual( Stem("alleviated"), "allevi" );
	deepEqual( Stem("alley"), "alley" );
	deepEqual( Stem("alleys"), "alley" );
	deepEqual( Stem("alliance"), "allianc" );
	deepEqual( Stem("alliances"), "allianc" );
	deepEqual( Stem("allied"), "alli" );
	deepEqual( Stem("allies"), "alli" );
	deepEqual( Stem("alligators"), "allig" );
	deepEqual( Stem("allotted"), "allot" );
	deepEqual( Stem("allotting"), "allot" );
	deepEqual( Stem("allow"), "allow" );
	deepEqual( Stem("allowable"), "allow" );
	deepEqual( Stem("allowance"), "allow" );
	deepEqual( Stem("allowances"), "allow" );
	deepEqual( Stem("allowed"), "allow" );
	deepEqual( Stem("allowing"), "allow" );
	deepEqual( Stem("allows"), "allow" );
	deepEqual( Stem("alloyed"), "alloy" );
	deepEqual( Stem("allude"), "allud" );
	deepEqual( Stem("alluded"), "allud" );
	deepEqual( Stem("alludes"), "allud" );
	deepEqual( Stem("alluding"), "allud" );
	deepEqual( Stem("allure"), "allur" );
	deepEqual( Stem("allured"), "allur" );
	deepEqual( Stem("allurement"), "allur" );
	deepEqual( Stem("allurements"), "allur" );
	deepEqual( Stem("alluring"), "allur" );
	deepEqual( Stem("allus"), "allus" );
	deepEqual( Stem("allusion"), "allus" );
	deepEqual( Stem("allusions"), "allus" );
	deepEqual( Stem("alluvial"), "alluvi" );
	deepEqual( Stem("alluvium"), "alluvium" );
	deepEqual( Stem("ally"), "alli" );
	deepEqual( Stem("alma"), "alma" );
	deepEqual( Stem("almac"), "almac" );
	deepEqual( Stem("almanac"), "almanac" );
	deepEqual( Stem("almanacs"), "almanac" );
	deepEqual( Stem("almighty"), "almighti" );
	deepEqual( Stem("almos"), "almo" );
	deepEqual( Stem("almost"), "almost" );
	deepEqual( Stem("alms"), "alm" );
	deepEqual( Stem("almshouses"), "almshous" );
	deepEqual( Stem("aloe"), "alo" );
	deepEqual( Stem("aloft"), "aloft" );
	deepEqual( Stem("alone"), "alon" );
	deepEqual( Stem("along"), "along" );
	deepEqual( Stem("alongside"), "alongsid" );
	deepEqual( Stem("aloof"), "aloof" );
	deepEqual( Stem("aloud"), "aloud" );
	deepEqual( Stem("alphabet"), "alphabet" );
	deepEqual( Stem("alphabets"), "alphabet" );
	deepEqual( Stem("alphonse"), "alphons" );
	deepEqual( Stem("alpine"), "alpin" );
	deepEqual( Stem("alps"), "alp" );
	deepEqual( Stem("already"), "alreadi" );
	deepEqual( Stem("also"), "also" );
	deepEqual( Stem("alta"), "alta" );
	deepEqual( Stem("altar"), "altar" );
	deepEqual( Stem("altars"), "altar" );
	deepEqual( Stem("alter"), "alter" );
	deepEqual( Stem("alteration"), "alter" );
	deepEqual( Stem("alterations"), "alter" );
	deepEqual( Stem("altercation"), "alterc" );
	deepEqual( Stem("altered"), "alter" );
	deepEqual( Stem("altering"), "alter" );
	deepEqual( Stem("alternate"), "altern" );
	deepEqual( Stem("alternately"), "altern" );
	deepEqual( Stem("alternating"), "altern" );
	deepEqual( Stem("alternation"), "altern" );
	deepEqual( Stem("alternations"), "altern" );
	deepEqual( Stem("alternative"), "altern" );
	deepEqual( Stem("alternatives"), "altern" );
	deepEqual( Stem("alters"), "alter" );
	deepEqual( Stem("althoug"), "althoug" );
	deepEqual( Stem("although"), "although" );
	deepEqual( Stem("altisidora"), "altisidora" );
	deepEqual( Stem("altitude"), "altitud" );
	deepEqual( Stem("alto"), "alto" );
	deepEqual( Stem("altogether"), "altogeth" );
	deepEqual( Stem("alured"), "alur" );
	deepEqual( Stem("alway"), "alway" );
	deepEqual( Stem("always"), "alway" );
	deepEqual( Stem("alyona"), "alyona" );
	deepEqual( Stem("alyoshka"), "alyoshka" );
	deepEqual( Stem("am"), "am" );
	deepEqual( Stem("ama"), "ama" );
	deepEqual( Stem("amalgamate"), "amalgam" );
	deepEqual( Stem("amalgamated"), "amalgam" );
	deepEqual( Stem("amalgamation"), "amalgam" );
	deepEqual( Stem("amalia"), "amalia" );
	deepEqual( Stem("amancaes"), "amanca" );
	deepEqual( Stem("amang"), "amang" );
	deepEqual( Stem("amanuensis"), "amanuensi" );
	deepEqual( Stem("amarga"), "amarga" );
	deepEqual( Stem("amass"), "amass" );
	deepEqual( Stem("amassed"), "amass" );
	deepEqual( Stem("amassing"), "amass" );
	deepEqual( Stem("amateur"), "amateur" );
	deepEqual( Stem("amaze"), "amaz" );
	deepEqual( Stem("amazed"), "amaz" );
	deepEqual( Stem("amazedly"), "amaz" );
	deepEqual( Stem("amazement"), "amaz" );
	deepEqual( Stem("amazes"), "amaz" );
	deepEqual( Stem("amazing"), "amaz" );
	deepEqual( Stem("amazingly"), "amaz" );
	deepEqual( Stem("ambassadors"), "ambassador" );
	deepEqual( Stem("ambassadress"), "ambassadress" );
	deepEqual( Stem("amber"), "amber" );
	deepEqual( Stem("ambient"), "ambient" );
	deepEqual( Stem("ambiguous"), "ambigu" );
	deepEqual( Stem("ambition"), "ambit" );
	deepEqual( Stem("ambitious"), "ambiti" );
	deepEqual( Stem("amble"), "ambl" );
	deepEqual( Stem("ambling"), "ambl" );
	deepEqual( Stem("amblyrhynchus"), "amblyrhynchus" );
	deepEqual( Stem("ambox"), "ambox" );
	deepEqual( Stem("ambuscade"), "ambuscad" );
	deepEqual( Stem("ambush"), "ambush" );
	deepEqual( Stem("amd"), "amd" );
	deepEqual( Stem("amelioration"), "amelior" );
	deepEqual( Stem("amen"), "amen" );
	deepEqual( Stem("amenable"), "amen" );
	deepEqual( Stem("amend"), "amend" );
	deepEqual( Stem("amended"), "amend" );
	deepEqual( Stem("amendment"), "amend" );
	deepEqual( Stem("amendments"), "amend" );
	deepEqual( Stem("amends"), "amend" );
	deepEqual( Stem("america"), "america" );
	deepEqual( Stem("american"), "american" );
	deepEqual( Stem("americana"), "americana" );
	deepEqual( Stem("americans"), "american" );
	deepEqual( Stem("americas"), "america" );
	deepEqual( Stem("amerique"), "ameriqu" );
	deepEqual( Stem("amethysts"), "amethyst" );
	deepEqual( Stem("ami"), "ami" );
	deepEqual( Stem("amiabilities"), "amiabl" );
	deepEqual( Stem("amiability"), "amiabl" );
	deepEqual( Stem("amiable"), "amiabl" );
	deepEqual( Stem("amiably"), "amiabl" );
	deepEqual( Stem("amicability"), "amic" );
	deepEqual( Stem("amicable"), "amic" );
	deepEqual( Stem("amicably"), "amic" );
	deepEqual( Stem("amid"), "amid" );
	deepEqual( Stem("amidst"), "amidst" );
	deepEqual( Stem("amiss"), "amiss" );
	deepEqual( Stem("amity"), "amiti" );
	deepEqual( Stem("ammunition"), "ammunit" );
	deepEqual( Stem("amn"), "amn" );
	deepEqual( Stem("amoncelees"), "amoncele" );
	deepEqual( Stem("among"), "among" );
	deepEqual( Stem("amongst"), "amongst" );
	deepEqual( Stem("amorites"), "amorit" );
	deepEqual( Stem("amorous"), "amor" );
	deepEqual( Stem("amost"), "amost" );
	deepEqual( Stem("amount"), "amount" );
	deepEqual( Stem("amounted"), "amount" );
	deepEqual( Stem("amounting"), "amount" );
	deepEqual( Stem("amounts"), "amount" );
	deepEqual( Stem("amphibious"), "amphibi" );
	deepEqual( Stem("amphitheatre"), "amphitheatr" );
	deepEqual( Stem("amphitheatrical"), "amphitheatr" );
	deepEqual( Stem("ample"), "ampl" );
	deepEqual( Stem("amply"), "ampli" );
	deepEqual( Stem("ampullariae"), "ampullaria" );
	deepEqual( Stem("amputated"), "amput" );
	deepEqual( Stem("amputation"), "amput" );
	deepEqual( Stem("amuse"), "amus" );
	deepEqual( Stem("amused"), "amus" );
	deepEqual( Stem("amusement"), "amus" );
	deepEqual( Stem("amusements"), "amus" );
	deepEqual( Stem("amuses"), "amus" );
	deepEqual( Stem("amusing"), "amus" );
	deepEqual( Stem("an"), "an" );
	deepEqual( Stem("ana"), "ana" );
	deepEqual( Stem("anadeers"), "anad" );
	deepEqual( Stem("anaemic"), "anaem" );
	deepEqual( Stem("analogies"), "analog" );
	deepEqual( Stem("analogous"), "analog" );
	deepEqual( Stem("analogue"), "analogu" );
	deepEqual( Stem("analogy"), "analog" );
	deepEqual( Stem("analyse"), "analys" );
	deepEqual( Stem("analysed"), "analys" );
	deepEqual( Stem("analysing"), "analys" );
	deepEqual( Stem("analysis"), "analysi" );
	deepEqual( Stem("analyze"), "analyz" );
	deepEqual( Stem("analyzed"), "analyz" );
	deepEqual( Stem("anarchy"), "anarchi" );
	deepEqual( Stem("anas"), "ana" );
	deepEqual( Stem("anastasia"), "anastasia" );
	deepEqual( Stem("anat"), "anat" );
	deepEqual( Stem("anathematising"), "anathematis" );
	deepEqual( Stem("anathematizing"), "anathemat" );
	deepEqual( Stem("anatolia"), "anatolia" );
	deepEqual( Stem("anatomical"), "anatom" );
	deepEqual( Stem("anatomists"), "anatomist" );
	deepEqual( Stem("anatomy"), "anatomi" );
	deepEqual( Stem("ancestor"), "ancestor" );
	deepEqual( Stem("ancestors"), "ancestor" );
	deepEqual( Stem("ancestral"), "ancestr" );
	deepEqual( Stem("ancestress"), "ancestress" );
	deepEqual( Stem("ancestry"), "ancestri" );
	deepEqual( Stem("anchor"), "anchor" );
	deepEqual( Stem("anchorage"), "anchorag" );
	deepEqual( Stem("anchored"), "anchor" );
	deepEqual( Stem("anchoring"), "anchor" );
	deepEqual( Stem("anchors"), "anchor" );
	deepEqual( Stem("anchovies"), "anchovi" );
	deepEqual( Stem("ancient"), "ancient" );
	deepEqual( Stem("anciently"), "ancient" );
	deepEqual( Stem("ancients"), "ancient" );
	deepEqual( Stem("and"), "and" );
	deepEqual( Stem("andalusia"), "andalusia" );
	deepEqual( Stem("ande"), "and" );
	deepEqual( Stem("andes"), "andes" );
	deepEqual( Stem("andle"), "andl" );
	deepEqual( Stem("andled"), "andl" );
	deepEqual( Stem("andrew"), "andrew" );
	deepEqual( Stem("andrews"), "andrew" );
	deepEqual( Stem("andrey"), "andrey" );
	deepEqual( Stem("anecdote"), "anecdot" );
	deepEqual( Stem("anecdotes"), "anecdot" );
	deepEqual( Stem("anemone"), "anemon" );
	deepEqual( Stem("anew"), "anew" );
	deepEqual( Stem("angel"), "angel" );
	deepEqual( Stem("angela"), "angela" );
	deepEqual( Stem("angelic"), "angel" );
	deepEqual( Stem("angelica"), "angelica" );
	deepEqual( Stem("angels"), "angel" );
	deepEqual( Stem("anger"), "anger" );
	deepEqual( Stem("angered"), "anger" );
	deepEqual( Stem("angerless"), "angerless" );
	deepEqual( Stem("angers"), "anger" );
	deepEqual( Stem("angle"), "angl" );
	deepEqual( Stem("angler"), "angler" );
	deepEqual( Stem("angles"), "angl" );
	deepEqual( Stem("anglican"), "anglican" );
	deepEqual( Stem("anglicanism"), "anglican" );
	deepEqual( Stem("anglified"), "anglifi" );
	deepEqual( Stem("angriest"), "angriest" );
	deepEqual( Stem("angrily"), "angrili" );
	deepEqual( Stem("angry"), "angri" );
	deepEqual( Stem("anguish"), "anguish" );
	deepEqual( Stem("angula"), "angula" );
	deepEqual( Stem("angular"), "angular" );
	deepEqual( Stem("anima"), "anima" );
	deepEqual( Stem("animadvert"), "animadvert" );
	deepEqual( Stem("animal"), "anim" );
	deepEqual( Stem("animalcula"), "animalcula" );
	deepEqual( Stem("animalcule"), "animalcul" );
	deepEqual( Stem("animalized"), "anim" );
	deepEqual( Stem("animals"), "anim" );
	deepEqual( Stem("animas"), "anima" );
	deepEqual( Stem("animate"), "anim" );
	deepEqual( Stem("animated"), "anim" );
	deepEqual( Stem("animates"), "anim" );
	deepEqual( Stem("animating"), "anim" );
	deepEqual( Stem("animation"), "anim" );
	deepEqual( Stem("animosity"), "animos" );
	deepEqual( Stem("aniska"), "aniska" );
	deepEqual( Stem("ankle"), "ankl" );
	deepEqual( Stem("ankles"), "ankl" );
	deepEqual( Stem("ann"), "ann" );
	deepEqual( Stem("anna"), "anna" );
	deepEqual( Stem("annal"), "annal" );
	deepEqual( Stem("annales"), "annal" );
	deepEqual( Stem("annals"), "annal" );
	deepEqual( Stem("anne"), "ann" );
	deepEqual( Stem("annelidous"), "annelid" );
	deepEqual( Stem("annette"), "annett" );
	deepEqual( Stem("annewum"), "annewum" );
	deepEqual( Stem("annexed"), "annex" );
	deepEqual( Stem("annie"), "anni" );
	deepEqual( Stem("annihilate"), "annihil" );
	deepEqual( Stem("annihilated"), "annihil" );
	deepEqual( Stem("annihilation"), "annihil" );
	deepEqual( Stem("anniversaries"), "anniversari" );
	deepEqual( Stem("anniversary"), "anniversari" );
	deepEqual( Stem("annoucing"), "annouc" );
	deepEqual( Stem("announce"), "announc" );
	deepEqual( Stem("announced"), "announc" );
	deepEqual( Stem("announcement"), "announc" );
	deepEqual( Stem("announcements"), "announc" );
	deepEqual( Stem("announces"), "announc" );
	deepEqual( Stem("announcing"), "announc" );
	deepEqual( Stem("annoy"), "annoy" );
	deepEqual( Stem("annoyance"), "annoy" );
	deepEqual( Stem("annoyances"), "annoy" );
	deepEqual( Stem("annoyed"), "annoy" );
	deepEqual( Stem("annoying"), "annoy" );
	deepEqual( Stem("annoys"), "annoy" );
	deepEqual( Stem("annual"), "annual" );
	deepEqual( Stem("annually"), "annual" );
	deepEqual( Stem("annuals"), "annual" );
	deepEqual( Stem("annuelle"), "annuell" );
	deepEqual( Stem("annuity"), "annuiti" );
	deepEqual( Stem("annul"), "annul" );
	deepEqual( Stem("annum"), "annum" );
	deepEqual( Stem("anomalies"), "anomali" );
	deepEqual( Stem("anomalous"), "anomal" );
	deepEqual( Stem("anomaly"), "anomali" );
	deepEqual( Stem("anon"), "anon" );
	deepEqual( Stem("anonymous"), "anonym" );
	deepEqual( Stem("anoother"), "anooth" );
	deepEqual( Stem("another"), "anoth" );
	deepEqual( Stem("anson"), "anson" );
	deepEqual( Stem("anstice"), "anstic" );
	deepEqual( Stem("answer"), "answer" );
	deepEqual( Stem("answerable"), "answer" );
	deepEqual( Stem("answered"), "answer" );
	deepEqual( Stem("answering"), "answer" );
	deepEqual( Stem("answers"), "answer" );
	deepEqual( Stem("ant"), "ant" );
	deepEqual( Stem("antagonism"), "antagon" );
	deepEqual( Stem("antagonist"), "antagonist" );
	deepEqual( Stem("antagonistic"), "antagonist" );
	deepEqual( Stem("antarctic"), "antarct" );
	deepEqual( Stem("antarctica"), "antarctica" );
	deepEqual( Stem("antarcticus"), "antarcticus" );
	deepEqual( Stem("anteater"), "anteat" );
	deepEqual( Stem("antecedent"), "anteced" );
	deepEqual( Stem("antecedents"), "anteced" );
	deepEqual( Stem("antechamber"), "antechamb" );
	deepEqual( Stem("antechambers"), "antechamb" );
	deepEqual( Stem("antediluvian"), "antediluvian" );
	deepEqual( Stem("antelope"), "antelop" );
	deepEqual( Stem("antelopes"), "antelop" );
	deepEqual( Stem("antennae"), "antenna" );
	deepEqual( Stem("antennatus"), "antennatus" );
	deepEqual( Stem("anterior"), "anterior" );
	deepEqual( Stem("anthem"), "anthem" );
	deepEqual( Stem("anthony"), "anthoni" );
	deepEqual( Stem("anthus"), "anthus" );
	deepEqual( Stem("anti"), "anti" );
	deepEqual( Stem("anticipate"), "anticip" );
	deepEqual( Stem("anticipated"), "anticip" );
	deepEqual( Stem("anticipates"), "anticip" );
	deepEqual( Stem("anticipating"), "anticip" );
	deepEqual( Stem("anticipation"), "anticip" );
	deepEqual( Stem("anticipations"), "anticip" );
	deepEqual( Stem("anticipative"), "anticip" );
	deepEqual( Stem("antics"), "antic" );
	deepEqual( Stem("antilles"), "antill" );
	deepEqual( Stem("antipodean"), "antipodean" );
	deepEqual( Stem("antipodes"), "antipod" );
	deepEqual( Stem("antiquarian"), "antiquarian" );
	deepEqual( Stem("antiquaries"), "antiquari" );
	deepEqual( Stem("antiquated"), "antiqu" );
	deepEqual( Stem("antiques"), "antiqu" );
	deepEqual( Stem("antiquities"), "antiqu" );
	deepEqual( Stem("antiquity"), "antiqu" );
	deepEqual( Stem("antlers"), "antler" );
	deepEqual( Stem("antonio"), "antonio" );
	deepEqual( Stem("antony"), "antoni" );
	deepEqual( Stem("antrum"), "antrum" );
	deepEqual( Stem("ants"), "ant" );
	deepEqual( Stem("antuco"), "antuco" );
	deepEqual( Stem("anxieties"), "anxieti" );
	deepEqual( Stem("anxiety"), "anxieti" );
	deepEqual( Stem("anxious"), "anxious" );
	deepEqual( Stem("anxiously"), "anxious" );
	deepEqual( Stem("any"), "ani" );
	deepEqual( Stem("anybody"), "anybodi" );
	deepEqual( Stem("anyhow"), "anyhow" );
	deepEqual( Stem("anymore"), "anymor" );
	deepEqual( Stem("anyone"), "anyon" );
	deepEqual( Stem("anything"), "anyth" );
	deepEqual( Stem("anythink"), "anythink" );
	deepEqual( Stem("anyvays"), "anyvay" );
	deepEqual( Stem("anyway"), "anyway" );
	deepEqual( Stem("anyways"), "anyway" );
	deepEqual( Stem("anywhere"), "anywher" );
	deepEqual( Stem("anywheres"), "anywher" );
	deepEqual( Stem("ap"), "ap" );
	deepEqual( Stem("apace"), "apac" );
	deepEqual( Stem("apar"), "apar" );
	deepEqual( Stem("apart"), "apart" );
	deepEqual( Stem("apartment"), "apart" );
	deepEqual( Stem("apartments"), "apart" );
	deepEqual( Stem("apate"), "apat" );
	deepEqual( Stem("apathy"), "apathi" );
	deepEqual( Stem("ape"), "ape" );
	deepEqual( Stem("apennines"), "apennin" );
	deepEqual( Stem("aperient"), "aperi" );
	deepEqual( Stem("aperture"), "apertur" );
	deepEqual( Stem("apertures"), "apertur" );
	deepEqual( Stem("apex"), "apex" );
	deepEqual( Stem("aphodius"), "aphodius" );
	deepEqual( Stem("apiece"), "apiec" );
	deepEqual( Stem("apire"), "apir" );
	deepEqual( Stem("apires"), "apir" );
	deepEqual( Stem("aplysia"), "aplysia" );
	deepEqual( Stem("apollinaris"), "apollinari" );
	deepEqual( Stem("apollo"), "apollo" );
	deepEqual( Stem("apologetic"), "apologet" );
	deepEqual( Stem("apologetically"), "apologet" );
	deepEqual( Stem("apologies"), "apolog" );
	deepEqual( Stem("apologise"), "apologis" );
	deepEqual( Stem("apologised"), "apologis" );
	deepEqual( Stem("apologising"), "apologis" );
	deepEqual( Stem("apologists"), "apologist" );
	deepEqual( Stem("apologize"), "apolog" );
	deepEqual( Stem("apologized"), "apolog" );
	deepEqual( Stem("apologizes"), "apolog" );
	deepEqual( Stem("apologizing"), "apolog" );
	deepEqual( Stem("apology"), "apolog" );
	deepEqual( Stem("apoplectic"), "apoplect" );
	deepEqual( Stem("apoplexy"), "apoplexi" );
	deepEqual( Stem("apostle"), "apostl" );
	deepEqual( Stem("apostles"), "apostl" );
	deepEqual( Stem("apostolica"), "apostolica" );
	deepEqual( Stem("apostrophe"), "apostroph" );
	deepEqual( Stem("apostrophised"), "apostrophis" );
	deepEqual( Stem("apostrophized"), "apostroph" );
	deepEqual( Stem("apostrophizing"), "apostroph" );
	deepEqual( Stem("apothecaries"), "apothecari" );
	deepEqual( Stem("apothecary"), "apothecari" );
	deepEqual( Stem("appalled"), "appal" );
	deepEqual( Stem("appalling"), "appal" );
	deepEqual( Stem("appallingly"), "appal" );
	deepEqual( Stem("appanage"), "appanag" );
	deepEqual( Stem("apparatus"), "apparatus" );
	deepEqual( Stem("apparel"), "apparel" );
	deepEqual( Stem("apparent"), "appar" );
	deepEqual( Stem("apparently"), "appar" );
	deepEqual( Stem("apparition"), "apparit" );
	deepEqual( Stem("apparitions"), "apparit" );
	deepEqual( Stem("appea"), "appea" );
	deepEqual( Stem("appeal"), "appeal" );
	deepEqual( Stem("appealed"), "appeal" );
	deepEqual( Stem("appealing"), "appeal" );
	deepEqual( Stem("appealingly"), "appeal" );
	deepEqual( Stem("appeals"), "appeal" );
	deepEqual( Stem("appear"), "appear" );
	deepEqual( Stem("appearance"), "appear" );
	deepEqual( Stem("appearances"), "appear" );
	deepEqual( Stem("appeared"), "appear" );
	deepEqual( Stem("appearing"), "appear" );
	deepEqual( Stem("appears"), "appear" );
	deepEqual( Stem("appease"), "appeas" );
	deepEqual( Stem("appeased"), "appeas" );
	deepEqual( Stem("appellation"), "appel" );
	deepEqual( Stem("append"), "append" );
	deepEqual( Stem("appendage"), "appendag" );
	deepEqual( Stem("appendages"), "appendag" );
	deepEqual( Stem("appended"), "append" );
	deepEqual( Stem("appendix"), "appendix" );
	deepEqual( Stem("appertained"), "appertain" );
	deepEqual( Stem("appertaining"), "appertain" );
	deepEqual( Stem("apperton"), "apperton" );
	deepEqual( Stem("appetite"), "appetit" );
	deepEqual( Stem("appetites"), "appetit" );
	deepEqual( Stem("appiness"), "appi" );
	deepEqual( Stem("applauded"), "applaud" );
	deepEqual( Stem("applauding"), "applaud" );
	deepEqual( Stem("applause"), "applaus" );
	deepEqual( Stem("apple"), "appl" );
	deepEqual( Stem("apples"), "appl" );
	deepEqual( Stem("appliances"), "applianc" );
	deepEqual( Stem("applicable"), "applic" );
	deepEqual( Stem("applicant"), "applic" );
	deepEqual( Stem("application"), "applic" );
	deepEqual( Stem("applications"), "applic" );
	deepEqual( Stem("applied"), "appli" );
	deepEqual( Stem("applies"), "appli" );
	deepEqual( Stem("apply"), "appli" );
	deepEqual( Stem("applying"), "appli" );
	deepEqual( Stem("appoint"), "appoint" );
	deepEqual( Stem("appointed"), "appoint" );
	deepEqual( Stem("appointment"), "appoint" );
	deepEqual( Stem("appointments"), "appoint" );
	deepEqual( Stem("appoints"), "appoint" );
	deepEqual( Stem("apportioned"), "apport" );
	deepEqual( Stem("appreciable"), "appreci" );
	deepEqual( Stem("appreciate"), "appreci" );
	deepEqual( Stem("appreciated"), "appreci" );
	deepEqual( Stem("appreciates"), "appreci" );
	deepEqual( Stem("appreciating"), "appreci" );
	deepEqual( Stem("appreciation"), "appreci" );
	deepEqual( Stem("apprehend"), "apprehend" );
	deepEqual( Stem("apprehended"), "apprehend" );
	deepEqual( Stem("apprehending"), "apprehend" );
	deepEqual( Stem("apprehension"), "apprehens" );
	deepEqual( Stem("apprehensions"), "apprehens" );
	deepEqual( Stem("apprehensive"), "apprehens" );
	deepEqual( Stem("apprentice"), "apprentic" );
	deepEqual( Stem("apprenticed"), "apprent" );
	deepEqual( Stem("apprentices"), "apprentic" );
	deepEqual( Stem("apprenticeship"), "apprenticeship" );
	deepEqual( Stem("apprise"), "appris" );
	deepEqual( Stem("apprised"), "appris" );
	deepEqual( Stem("apprising"), "appris" );
	deepEqual( Stem("approach"), "approach" );
	deepEqual( Stem("approached"), "approach" );
	deepEqual( Stem("approaches"), "approach" );
	deepEqual( Stem("approachin"), "approachin" );
	deepEqual( Stem("approaching"), "approach" );
	deepEqual( Stem("approbation"), "approb" );
	deepEqual( Stem("appropriate"), "appropri" );
	deepEqual( Stem("appropriated"), "appropri" );
	deepEqual( Stem("appropriately"), "appropri" );
	deepEqual( Stem("appropriateness"), "appropri" );
	deepEqual( Stem("appropriating"), "appropri" );
	deepEqual( Stem("appropriation"), "appropri" );
	deepEqual( Stem("approval"), "approv" );
	deepEqual( Stem("approve"), "approv" );
	deepEqual( Stem("approved"), "approv" );
	deepEqual( Stem("approves"), "approv" );
	deepEqual( Stem("approving"), "approv" );
	deepEqual( Stem("approvingly"), "approv" );
	deepEqual( Stem("approximate"), "approxim" );
	deepEqual( Stem("approximately"), "approxim" );
	deepEqual( Stem("appurtenance"), "appurten" );
	deepEqual( Stem("appurtenances"), "appurten" );
	deepEqual( Stem("apricots"), "apricot" );
	deepEqual( Stem("april"), "april" );
	deepEqual( Stem("apron"), "apron" );
	deepEqual( Stem("aprons"), "apron" );
	deepEqual( Stem("apropos"), "apropo" );
	deepEqual( Stem("apt"), "apt" );
	deepEqual( Stem("aptenodytes"), "aptenodyt" );
	deepEqual( Stem("apteryz"), "apteryz" );
	deepEqual( Stem("aptitude"), "aptitud" );
	deepEqual( Stem("aptly"), "apt" );
	deepEqual( Stem("aptness"), "apt" );
	deepEqual( Stem("aptnesses"), "apt" );
	deepEqual( Stem("aquatic"), "aquat" );
	deepEqual( Stem("aqueous"), "aqueous" );
	deepEqual( Stem("aqui"), "aqui" );
	deepEqual( Stem("aquiline"), "aquilin" );
	deepEqual( Stem("aquilines"), "aquilin" );
	deepEqual( Stem("aquinas"), "aquina" );
	deepEqual( Stem("ar"), "ar" );
	deepEqual( Stem("arab"), "arab" );
	deepEqual( Stem("arabian"), "arabian" );
	deepEqual( Stem("arabic"), "arab" );
	deepEqual( Stem("arachnidae"), "arachnida" );
	deepEqual( Stem("arago"), "arago" );
	deepEqual( Stem("araucanians"), "araucanian" );
	deepEqual( Stem("araucarian"), "araucarian" );
	deepEqual( Stem("arauco"), "arauco" );
	deepEqual( Stem("arbiter"), "arbit" );
	deepEqual( Stem("arbitrarily"), "arbitrarili" );
	deepEqual( Stem("arbitrary"), "arbitrari" );
	deepEqual( Stem("arborescent"), "arboresc" );
	deepEqual( Stem("arbour"), "arbour" );
	deepEqual( Stem("arbours"), "arbour" );
	deepEqual( Stem("arbutus"), "arbutus" );
	deepEqual( Stem("arcade"), "arcad" );
	deepEqual( Stem("arcades"), "arcad" );
	deepEqual( Stem("arcadia"), "arcadia" );
	deepEqual( Stem("arch"), "arch" );
	deepEqual( Stem("archaeologists"), "archaeologist" );
	deepEqual( Stem("archbishop"), "archbishop" );
	deepEqual( Stem("archducal"), "archduc" );
	deepEqual( Stem("arched"), "arch" );
	deepEqual( Stem("archer"), "archer" );
	deepEqual( Stem("archery"), "archeri" );
	deepEqual( Stem("arches"), "arch" );
	deepEqual( Stem("archest"), "archest" );
	deepEqual( Stem("archipelago"), "archipelago" );
	deepEqual( Stem("archipelagoes"), "archipelago" );
	deepEqual( Stem("architect"), "architect" );
	deepEqual( Stem("architects"), "architect" );
	deepEqual( Stem("architectural"), "architectur" );
	deepEqual( Stem("architecture"), "architectur" );
	deepEqual( Stem("archly"), "arch" );
	deepEqual( Stem("archness"), "arch" );
	deepEqual( Stem("archway"), "archway" );
	deepEqual( Stem("archways"), "archway" );
	deepEqual( Stem("arctic"), "arctic" );
	deepEqual( Stem("ard"), "ard" );
	deepEqual( Stem("ardent"), "ardent" );
	deepEqual( Stem("ardently"), "ardent" );
	deepEqual( Stem("ardness"), "ard" );
	deepEqual( Stem("ardour"), "ardour" );
	deepEqual( Stem("ards"), "ard" );
	deepEqual( Stem("arduous"), "arduous" );
	deepEqual( Stem("are"), "are" );
	deepEqual( Stem("area"), "area" );
	deepEqual( Stem("aready"), "areadi" );
	deepEqual( Stem("areas"), "area" );
	deepEqual( Stem("areco"), "areco" );
	deepEqual( Stem("aren"), "aren" );
	deepEqual( Stem("arena"), "arena" );
	deepEqual( Stem("arenales"), "arenal" );
	deepEqual( Stem("arequipa"), "arequipa" );
	deepEqual( Stem("arethusa"), "arethusa" );
	deepEqual( Stem("argillaceo"), "argillaceo" );
	deepEqual( Stem("argillaceous"), "argillac" );
	deepEqual( Stem("argue"), "argu" );
	deepEqual( Stem("argued"), "argu" );
	deepEqual( Stem("argues"), "argu" );
	deepEqual( Stem("arguing"), "argu" );
	deepEqual( Stem("argument"), "argument" );
	deepEqual( Stem("argumentative"), "argument" );
	deepEqual( Stem("arguments"), "argument" );
	deepEqual( Stem("argus"), "argus" );
	deepEqual( Stem("argyroneta"), "argyroneta" );
	deepEqual( Stem("ari"), "ari" );
	deepEqual( Stem("arica"), "arica" );
	deepEqual( Stem("arid"), "arid" );
	deepEqual( Stem("aridity"), "arid" );
	deepEqual( Stem("ariel"), "ariel" );
	deepEqual( Stem("aright"), "aright" );
	deepEqual( Stem("arise"), "aris" );
	deepEqual( Stem("arisen"), "arisen" );
	deepEqual( Stem("arises"), "aris" );
	deepEqual( Stem("arising"), "aris" );
	deepEqual( Stem("aristides"), "aristid" );
	deepEqual( Stem("aristocracy"), "aristocraci" );
	deepEqual( Stem("aristocrat"), "aristocrat" );
	deepEqual( Stem("aristocratic"), "aristocrat" );
	deepEqual( Stem("aristocrats"), "aristocrat" );
	deepEqual( Stem("arithmetic"), "arithmet" );
	deepEqual( Stem("arithmetical"), "arithmet" );
	deepEqual( Stem("arithmeticians"), "arithmetician" );
	deepEqual( Stem("ark"), "ark" );
	deepEqual( Stem("arkady"), "arkadi" );
	deepEqual( Stem("arm"), "arm" );
	deepEqual( Stem("armadillo"), "armadillo" );
	deepEqual( Stem("armadilloes"), "armadillo" );
	deepEqual( Stem("armadillos"), "armadillo" );
	deepEqual( Stem("armado"), "armado" );
	deepEqual( Stem("armaments"), "armament" );
	deepEqual( Stem("armchair"), "armchair" );
	deepEqual( Stem("armchairs"), "armchair" );
	deepEqual( Stem("armed"), "arm" );
	deepEqual( Stem("armful"), "arm" );
	deepEqual( Stem("armhole"), "armhol" );
	deepEqual( Stem("armies"), "armi" );
	deepEqual( Stem("arming"), "arm" );
	deepEqual( Stem("armorial"), "armori" );
	deepEqual( Stem("armour"), "armour" );
	deepEqual( Stem("armourer"), "armour" );
	deepEqual( Stem("arms"), "arm" );
	deepEqual( Stem("armstrong"), "armstrong" );
	deepEqual( Stem("army"), "armi" );
	deepEqual( Stem("arn"), "arn" );
	deepEqual( Stem("arnold"), "arnold" );
	deepEqual( Stem("arnong"), "arnong" );
	deepEqual( Stem("aromatic"), "aromat" );
	deepEqual( Stem("arose"), "aros" );
	deepEqual( Stem("around"), "around" );
	deepEqual( Stem("arouse"), "arous" );
	deepEqual( Stem("aroused"), "arous" );
	deepEqual( Stem("arqueros"), "arquero" );
	deepEqual( Stem("arragonite"), "arragonit" );
	deepEqual( Stem("arrange"), "arrang" );
	deepEqual( Stem("arranged"), "arrang" );
	deepEqual( Stem("arrangement"), "arrang" );
	deepEqual( Stem("arrangements"), "arrang" );
	deepEqual( Stem("arranges"), "arrang" );
	deepEqual( Stem("arranging"), "arrang" );
	deepEqual( Stem("arrant"), "arrant" );
	deepEqual( Stem("array"), "array" );
	deepEqual( Stem("arrayed"), "array" );
	deepEqual( Stem("arraying"), "array" );
	deepEqual( Stem("arrear"), "arrear" );
	deepEqual( Stem("arrears"), "arrear" );
	deepEqual( Stem("arrecife"), "arrecif" );
	deepEqual( Stem("arrest"), "arrest" );
	deepEqual( Stem("arrested"), "arrest" );
	deepEqual( Stem("arresting"), "arrest" );
	deepEqual( Stem("arriero"), "arriero" );
	deepEqual( Stem("arrival"), "arriv" );
	deepEqual( Stem("arrivals"), "arriv" );
	deepEqual( Stem("arrive"), "arriv" );
	deepEqual( Stem("arrived"), "arriv" );
	deepEqual( Stem("arrives"), "arriv" );
	deepEqual( Stem("arriving"), "arriv" );
	deepEqual( Stem("arrngd"), "arrngd" );
	deepEqual( Stem("arrogance"), "arrog" );
	deepEqual( Stem("arrogant"), "arrog" );
	deepEqual( Stem("arrow"), "arrow" );
	deepEqual( Stem("arrowing"), "arrow" );
	deepEqual( Stem("arrows"), "arrow" );
	deepEqual( Stem("arroyo"), "arroyo" );
	deepEqual( Stem("arson"), "arson" );
	deepEqual( Stem("art"), "art" );
	deepEqual( Stem("arter"), "arter" );
	deepEqual( Stem("artevelde"), "arteveld" );
	deepEqual( Stem("artful"), "art" );
	deepEqual( Stem("artfully"), "art" );
	deepEqual( Stem("artfulness"), "art" );
	deepEqual( Stem("arthur"), "arthur" );
	deepEqual( Stem("arthurs"), "arthur" );
	deepEqual( Stem("artichoke"), "artichok" );
	deepEqual( Stem("artichokes"), "artichok" );
	deepEqual( Stem("article"), "articl" );
	deepEqual( Stem("articled"), "articl" );
	deepEqual( Stem("articles"), "articl" );
	deepEqual( Stem("articulate"), "articul" );
	deepEqual( Stem("articulated"), "articul" );
	deepEqual( Stem("articulately"), "articul" );
	deepEqual( Stem("articulating"), "articul" );
	deepEqual( Stem("artifice"), "artific" );
	deepEqual( Stem("artifices"), "artific" );
	deepEqual( Stem("artificial"), "artifici" );
	deepEqual( Stem("artificially"), "artifici" );
	deepEqual( Stem("artillery"), "artilleri" );
	deepEqual( Stem("artilleryman"), "artilleryman" );
	deepEqual( Stem("artisan"), "artisan" );
	deepEqual( Stem("artist"), "artist" );
	deepEqual( Stem("artistic"), "artist" );
	deepEqual( Stem("artistical"), "artist" );
	deepEqual( Stem("artistically"), "artist" );
	deepEqual( Stem("artists"), "artist" );
	deepEqual( Stem("artless"), "artless" );
	deepEqual( Stem("artlessness"), "artless" );
	deepEqual( Stem("arts"), "art" );
	deepEqual( Stem("arum"), "arum" );
	deepEqual( Stem("as"), "as" );
	deepEqual( Stem("ascal"), "ascal" );
	deepEqual( Stem("ascend"), "ascend" );
	deepEqual( Stem("ascendancy"), "ascend" );
	deepEqual( Stem("ascendant"), "ascend" );
	deepEqual( Stem("ascended"), "ascend" );
	deepEqual( Stem("ascendency"), "ascend" );
	deepEqual( Stem("ascending"), "ascend" );
	deepEqual( Stem("ascends"), "ascend" );
	deepEqual( Stem("ascension"), "ascens" );
	deepEqual( Stem("ascent"), "ascent" );
	deepEqual( Stem("ascertain"), "ascertain" );
	deepEqual( Stem("ascertained"), "ascertain" );
	deepEqual( Stem("ascertaining"), "ascertain" );
	deepEqual( Stem("ascetic"), "ascet" );
	deepEqual( Stem("ascidiae"), "ascidia" );
	deepEqual( Stem("ascribable"), "ascrib" );
	deepEqual( Stem("ascribe"), "ascrib" );
	deepEqual( Stem("ascribed"), "ascrib" );
	deepEqual( Stem("ascribes"), "ascrib" );
	deepEqual( Stem("ash"), "ash" );
	deepEqual( Stem("ashamed"), "asham" );
	deepEqual( Stem("asheamed"), "asheam" );
	deepEqual( Stem("ashes"), "ash" );
	deepEqual( Stem("ashore"), "ashor" );
	deepEqual( Stem("ashy"), "ashi" );
	deepEqual( Stem("asia"), "asia" );
	deepEqual( Stem("asiat"), "asiat" );
	deepEqual( Stem("asiatic"), "asiat" );
	deepEqual( Stem("asiatiques"), "asiatiqu" );
	deepEqual( Stem("aside"), "asid" );
	deepEqual( Stem("ask"), "ask" );
	deepEqual( Stem("askance"), "askanc" );
	deepEqual( Stem("askant"), "askant" );
	deepEqual( Stem("asked"), "ask" );
	deepEqual( Stem("askew"), "askew" );
	deepEqual( Stem("asking"), "ask" );
	deepEqual( Stem("askmg"), "askmg" );
	deepEqual( Stem("asks"), "ask" );
	deepEqual( Stem("aslant"), "aslant" );
	deepEqual( Stem("asleep"), "asleep" );
	deepEqual( Stem("asparagus"), "asparagus" );
	deepEqual( Stem("aspect"), "aspect" );
	deepEqual( Stem("aspects"), "aspect" );
	deepEqual( Stem("aspen"), "aspen" );
	deepEqual( Stem("asperity"), "asper" );
	deepEqual( Stem("asphalax"), "asphalax" );
	deepEqual( Stem("aspirant"), "aspir" );
	deepEqual( Stem("aspirants"), "aspir" );
	deepEqual( Stem("aspirate"), "aspir" );
	deepEqual( Stem("aspirated"), "aspir" );
	deepEqual( Stem("aspiration"), "aspir" );
	deepEqual( Stem("aspirations"), "aspir" );
	deepEqual( Stem("aspire"), "aspir" );
	deepEqual( Stem("aspired"), "aspir" );
	deepEqual( Stem("aspires"), "aspir" );
	deepEqual( Stem("aspiring"), "aspir" );
	deepEqual( Stem("ass"), "ass" );
	deepEqual( Stem("assailant"), "assail" );
	deepEqual( Stem("assassin"), "assassin" );
	deepEqual( Stem("assassinating"), "assassin" );
	deepEqual( Stem("assault"), "assault" );
	deepEqual( Stem("assaulted"), "assault" );
	deepEqual( Stem("assaults"), "assault" );
	deepEqual( Stem("assay"), "assay" );
	deepEqual( Stem("assayer"), "assay" );
	deepEqual( Stem("assemblage"), "assemblag" );
	deepEqual( Stem("assemble"), "assembl" );
	deepEqual( Stem("assembled"), "assembl" );
	deepEqual( Stem("assembles"), "assembl" );
	deepEqual( Stem("assemblies"), "assembl" );
	deepEqual( Stem("assembling"), "assembl" );
	deepEqual( Stem("assembly"), "assembl" );
	deepEqual( Stem("assent"), "assent" );
	deepEqual( Stem("assented"), "assent" );
	deepEqual( Stem("assenting"), "assent" );
	deepEqual( Stem("assents"), "assent" );
	deepEqual( Stem("assert"), "assert" );
	deepEqual( Stem("asserted"), "assert" );
	deepEqual( Stem("asserting"), "assert" );
	deepEqual( Stem("assertion"), "assert" );
	deepEqual( Stem("assertions"), "assert" );
	deepEqual( Stem("asserts"), "assert" );
	deepEqual( Stem("asses"), "ass" );
	deepEqual( Stem("assessor"), "assessor" );
	deepEqual( Stem("asset"), "asset" );
	deepEqual( Stem("assets"), "asset" );
	deepEqual( Stem("asseverations"), "assever" );
	deepEqual( Stem("assez"), "assez" );
	deepEqual( Stem("assiduity"), "assidu" );
	deepEqual( Stem("assiduous"), "assidu" );
	deepEqual( Stem("assiduously"), "assidu" );
	deepEqual( Stem("assign"), "assign" );
	deepEqual( Stem("assignable"), "assign" );
	deepEqual( Stem("assigned"), "assign" );
	deepEqual( Stem("assignment"), "assign" );
	deepEqual( Stem("assigns"), "assign" );
	deepEqual( Stem("assimilation"), "assimil" );
	deepEqual( Stem("assist"), "assist" );
	deepEqual( Stem("assistance"), "assist" );
	deepEqual( Stem("assistant"), "assist" );
	deepEqual( Stem("assistants"), "assist" );
	deepEqual( Stem("assisted"), "assist" );
	deepEqual( Stem("assisting"), "assist" );
	deepEqual( Stem("assists"), "assist" );
	deepEqual( Stem("assize"), "assiz" );
	deepEqual( Stem("assizes"), "assiz" );
	deepEqual( Stem("assoc"), "assoc" );
	deepEqual( Stem("associate"), "associ" );
	deepEqual( Stem("associated"), "associ" );
	deepEqual( Stem("associates"), "associ" );
	deepEqual( Stem("associating"), "associ" );
	deepEqual( Stem("association"), "associ" );
	deepEqual( Stem("associations"), "associ" );
	deepEqual( Stem("assoiled"), "assoil" );
	deepEqual( Stem("assort"), "assort" );
	deepEqual( Stem("assorted"), "assort" );
	deepEqual( Stem("assortment"), "assort" );
	deepEqual( Stem("assume"), "assum" );
	deepEqual( Stem("assumed"), "assum" );
	deepEqual( Stem("assumes"), "assum" );
	deepEqual( Stem("assuming"), "assum" );
	deepEqual( Stem("assumption"), "assumpt" );
	deepEqual( Stem("assumptions"), "assumpt" );
	deepEqual( Stem("assurance"), "assur" );
	deepEqual( Stem("assurances"), "assur" );
	deepEqual( Stem("assure"), "assur" );
	deepEqual( Stem("assured"), "assur" );
	deepEqual( Stem("assuredly"), "assur" );
	deepEqual( Stem("assures"), "assur" );
	deepEqual( Stem("assuring"), "assur" );
	deepEqual( Stem("astelia"), "astelia" );
	deepEqual( Stem("astern"), "astern" );
	deepEqual( Stem("asthma"), "asthma" );
	deepEqual( Stem("astir"), "astir" );
	deepEqual( Stem("astley"), "astley" );
	deepEqual( Stem("astonish"), "astonish" );
	deepEqual( Stem("astonished"), "astonish" );
	deepEqual( Stem("astonishes"), "astonish" );
	deepEqual( Stem("astonishinent"), "astonishin" );
	deepEqual( Stem("astonishing"), "astonish" );
	deepEqual( Stem("astonishingly"), "astonish" );
	deepEqual( Stem("astonishment"), "astonish" );
	deepEqual( Stem("astounded"), "astound" );
	deepEqual( Stem("astounding"), "astound" );
	deepEqual( Stem("astray"), "astray" );
	deepEqual( Stem("astride"), "astrid" );
	deepEqual( Stem("astringent"), "astring" );
	deepEqual( Stem("astrolabe"), "astrolab" );
	deepEqual( Stem("astronomical"), "astronom" );
	deepEqual( Stem("astronomy"), "astronomi" );
	deepEqual( Stem("astute"), "astut" );
	deepEqual( Stem("asunder"), "asund" );
	deepEqual( Stem("asylum"), "asylum" );
	deepEqual( Stem("asylums"), "asylum" );
	deepEqual( Stem("at"), "at" );
	deepEqual( Stem("atacama"), "atacama" );
	deepEqual( Stem("ate"), "ate" );
	deepEqual( Stem("ated"), "ate" );
	deepEqual( Stem("atheists"), "atheist" );
	deepEqual( Stem("athenaeum"), "athenaeum" );
	deepEqual( Stem("athene"), "athen" );
	deepEqual( Stem("athenian"), "athenian" );
	deepEqual( Stem("athletic"), "athlet" );
	deepEqual( Stem("athos"), "atho" );
	deepEqual( Stem("athwart"), "athwart" );
	deepEqual( Stem("atlantic"), "atlant" );
	deepEqual( Stem("atmosphere"), "atmospher" );
	deepEqual( Stem("atmospheric"), "atmospher" );
	deepEqual( Stem("atoll"), "atol" );
	deepEqual( Stem("atollons"), "atollon" );
	deepEqual( Stem("atolls"), "atol" );
	deepEqual( Stem("atom"), "atom" );
	deepEqual( Stem("atoms"), "atom" );
	deepEqual( Stem("atone"), "aton" );
	deepEqual( Stem("atonement"), "aton" );
	deepEqual( Stem("atra"), "atra" );
	deepEqual( Stem("atratus"), "atratus" );
	deepEqual( Stem("atrocious"), "atroci" );
	deepEqual( Stem("atrocities"), "atroc" );
	deepEqual( Stem("attach"), "attach" );
	deepEqual( Stem("attache"), "attach" );
	deepEqual( Stem("attached"), "attach" );
	deepEqual( Stem("attaches"), "attach" );
	deepEqual( Stem("attaching"), "attach" );
	deepEqual( Stem("attachment"), "attach" );
	deepEqual( Stem("attachments"), "attach" );
	deepEqual( Stem("attack"), "attack" );
	deepEqual( Stem("attacked"), "attack" );
	deepEqual( Stem("attacking"), "attack" );
	deepEqual( Stem("attacks"), "attack" );
	deepEqual( Stem("attagis"), "attagi" );
	deepEqual( Stem("attain"), "attain" );
	deepEqual( Stem("attainable"), "attain" );
	deepEqual( Stem("attained"), "attain" );
	deepEqual( Stem("attaining"), "attain" );
	deepEqual( Stem("attainment"), "attain" );
	deepEqual( Stem("attainments"), "attain" );
	deepEqual( Stem("attains"), "attain" );
	deepEqual( Stem("attempt"), "attempt" );
	deepEqual( Stem("attempted"), "attempt" );
	deepEqual( Stem("attempting"), "attempt" );
	deepEqual( Stem("attempts"), "attempt" );
	deepEqual( Stem("attend"), "attend" );
	deepEqual( Stem("attendance"), "attend" );
	deepEqual( Stem("attendances"), "attend" );
	deepEqual( Stem("attendant"), "attend" );
	deepEqual( Stem("attendants"), "attend" );
	deepEqual( Stem("attended"), "attend" );
	deepEqual( Stem("attending"), "attend" );
	deepEqual( Stem("attends"), "attend" );
	deepEqual( Stem("attention"), "attent" );
	deepEqual( Stem("attentions"), "attent" );
	deepEqual( Stem("attentive"), "attent" );
	deepEqual( Stem("attentively"), "attent" );
	deepEqual( Stem("attenuated"), "attenu" );
	deepEqual( Stem("attest"), "attest" );
	deepEqual( Stem("attested"), "attest" );
	deepEqual( Stem("attesting"), "attest" );
	deepEqual( Stem("attic"), "attic" );
	deepEqual( Stem("attics"), "attic" );
	deepEqual( Stem("attire"), "attir" );
	deepEqual( Stem("attired"), "attir" );
	deepEqual( Stem("attitude"), "attitud" );
	deepEqual( Stem("attitudes"), "attitud" );
	deepEqual( Stem("attorney"), "attorney" );
	deepEqual( Stem("attorneys"), "attorney" );
	deepEqual( Stem("attract"), "attract" );
	deepEqual( Stem("attracted"), "attract" );
	deepEqual( Stem("attracting"), "attract" );
	deepEqual( Stem("attraction"), "attract" );
	deepEqual( Stem("attractions"), "attract" );
	deepEqual( Stem("attractive"), "attract" );
	deepEqual( Stem("attracts"), "attract" );
	deepEqual( Stem("attrapped"), "attrap" );
	deepEqual( Stem("attributable"), "attribut" );
	deepEqual( Stem("attribute"), "attribut" );
	deepEqual( Stem("attributed"), "attribut" );
	deepEqual( Stem("attributes"), "attribut" );
	deepEqual( Stem("attrition"), "attrit" );
	deepEqual( Stem("atwater"), "atwat" );
	deepEqual( Stem("au"), "au" );
	deepEqual( Stem("auckland"), "auckland" );
	deepEqual( Stem("auction"), "auction" );
	deepEqual( Stem("aud"), "aud" );
	deepEqual( Stem("audacious"), "audaci" );
	deepEqual( Stem("audaciously"), "audaci" );
	deepEqual( Stem("audacity"), "audac" );
	deepEqual( Stem("audible"), "audibl" );
	deepEqual( Stem("audibly"), "audibl" );
	deepEqual( Stem("audience"), "audienc" );
	deepEqual( Stem("audiences"), "audienc" );
	deepEqual( Stem("auditor"), "auditor" );
	deepEqual( Stem("auditors"), "auditor" );
	deepEqual( Stem("audubon"), "audubon" );
	deepEqual( Stem("aug"), "aug" );
	deepEqual( Stem("augean"), "augean" );
	deepEqual( Stem("augen"), "augen" );
	deepEqual( Stem("aught"), "aught" );
	deepEqual( Stem("augment"), "augment" );
	deepEqual( Stem("augmentation"), "augment" );
	deepEqual( Stem("augmented"), "augment" );
	deepEqual( Stem("augmenting"), "augment" );
	deepEqual( Stem("augments"), "augment" );
	deepEqual( Stem("augur"), "augur" );
	deepEqual( Stem("augured"), "augur" );
	deepEqual( Stem("auguries"), "auguri" );
	deepEqual( Stem("augurs"), "augur" );
	deepEqual( Stem("august"), "august" );
	deepEqual( Stem("augusta"), "augusta" );
	deepEqual( Stem("auguste"), "august" );
	deepEqual( Stem("augustus"), "augustus" );
	deepEqual( Stem("auk"), "auk" );
	deepEqual( Stem("auks"), "auk" );
	deepEqual( Stem("auld"), "auld" );
	deepEqual( Stem("aunt"), "aunt" );
	deepEqual( Stem("aunts"), "aunt" );
	deepEqual( Stem("aura"), "aura" );
	deepEqual( Stem("aureole"), "aureol" );
	deepEqual( Stem("auriferous"), "aurifer" );
	deepEqual( Stem("aus"), "aus" );
	deepEqual( Stem("auspices"), "auspic" );
	deepEqual( Stem("auspicious"), "auspici" );
	deepEqual( Stem("austell"), "austel" );
	deepEqual( Stem("austere"), "auster" );
	deepEqual( Stem("austerity"), "auster" );
	deepEqual( Stem("australes"), "austral" );
	deepEqual( Stem("australey"), "australey" );
	deepEqual( Stem("australia"), "australia" );
	deepEqual( Stem("australian"), "australian" );
	deepEqual( Stem("australians"), "australian" );
	deepEqual( Stem("austrian"), "austrian" );
	deepEqual( Stem("authentic"), "authent" );
	deepEqual( Stem("authentically"), "authent" );
	deepEqual( Stem("authenticated"), "authent" );
	deepEqual( Stem("authenticity"), "authent" );
	deepEqual( Stem("author"), "author" );
	deepEqual( Stem("authoress"), "authoress" );
	deepEqual( Stem("authoritative"), "authorit" );
	deepEqual( Stem("authoritatively"), "authorit" );
	deepEqual( Stem("authorities"), "author" );
	deepEqual( Stem("authority"), "author" );
	deepEqual( Stem("authorized"), "author" );
	deepEqual( Stem("authors"), "author" );
	deepEqual( Stem("authorship"), "authorship" );
	deepEqual( Stem("autobiographies"), "autobiographi" );
	deepEqual( Stem("autocratic"), "autocrat" );
	deepEqual( Stem("autograph"), "autograph" );
	deepEqual( Stem("autographs"), "autograph" );
	deepEqual( Stem("automaton"), "automaton" );
	deepEqual( Stem("autour"), "autour" );
	deepEqual( Stem("autre"), "autr" );
	deepEqual( Stem("autres"), "autr" );
	deepEqual( Stem("autumn"), "autumn" );
	deepEqual( Stem("autumnal"), "autumn" );
	deepEqual( Stem("auvergne"), "auvergn" );
	deepEqual( Stem("aux"), "aux" );
	deepEqual( Stem("auxiliaries"), "auxiliari" );
	deepEqual( Stem("auxiliary"), "auxiliari" );
	deepEqual( Stem("ava"), "ava" );
	deepEqual( Stem("avail"), "avail" );
	deepEqual( Stem("available"), "avail" );
	deepEqual( Stem("availed"), "avail" );
	deepEqual( Stem("availing"), "avail" );
	deepEqual( Stem("avails"), "avail" );
	deepEqual( Stem("avarice"), "avaric" );
	deepEqual( Stem("avaricious"), "avarici" );
	deepEqual( Stem("avatar"), "avatar" );
	deepEqual( Stem("avatars"), "avatar" );
	deepEqual( Stem("avaunt"), "avaunt" );
	deepEqual( Stem("avdotya"), "avdotya" );
	deepEqual( Stem("ave"), "ave" );
	deepEqual( Stem("avenge"), "aveng" );
	deepEqual( Stem("avenger"), "aveng" );
	deepEqual( Stem("avenges"), "aveng" );
	deepEqual( Stem("avenging"), "aveng" );
	deepEqual( Stem("avenue"), "avenu" );
	deepEqual( Stem("avenues"), "avenu" );
	deepEqual( Stem("average"), "averag" );
	deepEqual( Stem("averaging"), "averag" );
	deepEqual( Stem("averred"), "aver" );
	deepEqual( Stem("averring"), "aver" );
	deepEqual( Stem("avers"), "aver" );
	deepEqual( Stem("averse"), "avers" );
	deepEqual( Stem("aversion"), "avers" );
	deepEqual( Stem("aversions"), "avers" );
	deepEqual( Stem("avert"), "avert" );
	deepEqual( Stem("averted"), "avert" );
	deepEqual( Stem("averting"), "avert" );
	deepEqual( Stem("avestruz"), "avestruz" );
	deepEqual( Stem("aviary"), "aviari" );
	deepEqual( Stem("avicularia"), "avicularia" );
	deepEqual( Stem("avidity"), "avid" );
	deepEqual( Stem("avignon"), "avignon" );
	deepEqual( Stem("avocations"), "avoc" );
	deepEqual( Stem("avoid"), "avoid" );
	deepEqual( Stem("avoidable"), "avoid" );
	deepEqual( Stem("avoidance"), "avoid" );
	deepEqual( Stem("avoided"), "avoid" );
	deepEqual( Stem("avoiding"), "avoid" );
	deepEqual( Stem("avoids"), "avoid" );
	deepEqual( Stem("avoient"), "avoient" );
	deepEqual( Stem("avons"), "avon" );
	deepEqual( Stem("avow"), "avow" );
	deepEqual( Stem("avowal"), "avow" );
	deepEqual( Stem("avowed"), "avow" );
	deepEqual( Stem("avowedly"), "avow" );
	deepEqual( Stem("avowing"), "avow" );
	deepEqual( Stem("awa"), "awa" );
	deepEqual( Stem("await"), "await" );
	deepEqual( Stem("awaited"), "await" );
	deepEqual( Stem("awaiting"), "await" );
	deepEqual( Stem("awaits"), "await" );
	deepEqual( Stem("awake"), "awak" );
	deepEqual( Stem("awaken"), "awaken" );
	deepEqual( Stem("awakened"), "awaken" );
	deepEqual( Stem("awakening"), "awaken" );
	deepEqual( Stem("awakens"), "awaken" );
	deepEqual( Stem("awakes"), "awak" );
	deepEqual( Stem("awaking"), "awak" );
	deepEqual( Stem("aware"), "awar" );
	deepEqual( Stem("away"), "away" );
	deepEqual( Stem("awe"), "awe" );
	deepEqual( Stem("awed"), "awe" );
	deepEqual( Stem("awful"), "aw" );
	deepEqual( Stem("awfullest"), "awfullest" );
	deepEqual( Stem("awfully"), "aw" );
	deepEqual( Stem("awhile"), "awhil" );
	deepEqual( Stem("awhiles"), "awhil" );
	deepEqual( Stem("awkward"), "awkward" );
	deepEqual( Stem("awkwardly"), "awkward" );
	deepEqual( Stem("awkwardness"), "awkward" );
	deepEqual( Stem("awl"), "awl" );
	deepEqual( Stem("awoided"), "awoid" );
	deepEqual( Stem("awoke"), "awok" );
	deepEqual( Stem("awry"), "awri" );
	deepEqual( Stem("axe"), "axe" );
	deepEqual( Stem("axes"), "axe" );
	deepEqual( Stem("axiom"), "axiom" );
	deepEqual( Stem("axis"), "axi" );
	deepEqual( Stem("axles"), "axl" );
	deepEqual( Stem("ay"), "ay" );
	deepEqual( Stem("ayant"), "ayant" );
	deepEqual( Stem("aye"), "aye" );
	deepEqual( Stem("ayres"), "ayr" );
	deepEqual( Stem("azalea"), "azalea" );
	deepEqual( Stem("azara"), "azara" );
	deepEqual( Stem("azarae"), "azara" );
	deepEqual( Stem("azingly"), "aze" );
	deepEqual( Stem("azores"), "azor" );
	deepEqual( Stem("azucar"), "azucar" );
	deepEqual( Stem("azure"), "azur" );
	deepEqual( Stem("b"), "b" );
	deepEqual( Stem("ba"), "ba" );
	deepEqual( Stem("babble"), "babbl" );
	deepEqual( Stem("babbled"), "babbl" );
	deepEqual( Stem("babbling"), "babbl" );
	deepEqual( Stem("babby"), "babbi" );
	deepEqual( Stem("babe"), "babe" );
	deepEqual( Stem("babel"), "babel" );
	deepEqual( Stem("babes"), "babe" );
	deepEqual( Stem("babies"), "babi" );
	deepEqual( Stem("baboon"), "baboon" );
	deepEqual( Stem("babushkin"), "babushkin" );
	deepEqual( Stem("baby"), "babi" );
	deepEqual( Stem("babylon"), "babylon" );
	deepEqual( Stem("bac"), "bac" );
	deepEqual( Stem("bacchus"), "bacchus" );
	deepEqual( Stem("bachapins"), "bachapin" );
	deepEqual( Stem("bachelor"), "bachelor" );
	deepEqual( Stem("bachelorship"), "bachelorship" );
	deepEqual( Stem("bachman"), "bachman" );
	deepEqual( Stem("back"), "back" );
	deepEqual( Stem("backbone"), "backbon" );
	deepEqual( Stem("backed"), "back" );
	deepEqual( Stem("backer"), "backer" );
	deepEqual( Stem("backers"), "backer" );
	deepEqual( Stem("backgammon"), "backgammon" );
	deepEqual( Stem("background"), "background" );
	deepEqual( Stem("backing"), "back" );
	deepEqual( Stem("backs"), "back" );
	deepEqual( Stem("backsheesh"), "backsheesh" );
	deepEqual( Stem("backslidings"), "backslid" );
	deepEqual( Stem("backward"), "backward" );
	deepEqual( Stem("backwardness"), "backward" );
	deepEqual( Stem("backwards"), "backward" );
	deepEqual( Stem("backyard"), "backyard" );
	deepEqual( Stem("bacon"), "bacon" );
	deepEqual( Stem("bad"), "bad" );
	deepEqual( Stem("bade"), "bade" );
	deepEqual( Stem("baden"), "baden" );
	deepEqual( Stem("badge"), "badg" );
	deepEqual( Stem("badger"), "badger" );
	deepEqual( Stem("badgered"), "badger" );
	deepEqual( Stem("badges"), "badg" );
	deepEqual( Stem("badinage"), "badinag" );
	deepEqual( Stem("badly"), "bad" );
	deepEqual( Stem("badness"), "bad" );
	deepEqual( Stem("baffled"), "baffl" );
	deepEqual( Stem("bag"), "bag" );
	deepEqual( Stem("bagatelle"), "bagatell" );
	deepEqual( Stem("baggage"), "baggag" );
	deepEqual( Stem("bagnet"), "bagnet" );
	deepEqual( Stem("bagnets"), "bagnet" );
	deepEqual( Stem("bags"), "bag" );
	deepEqual( Stem("baguet"), "baguet" );
	deepEqual( Stem("bah"), "bah" );
	deepEqual( Stem("bahama"), "bahama" );
	deepEqual( Stem("bahia"), "bahia" );
	deepEqual( Stem("bail"), "bail" );
	deepEqual( Stem("bailed"), "bail" );
	deepEqual( Stem("bailey"), "bailey" );
	deepEqual( Stem("bailiff"), "bailiff" );
	deepEqual( Stem("baillie"), "bailli" );
	deepEqual( Stem("bairn"), "bairn" );
	deepEqual( Stem("bairns"), "bairn" );
	deepEqual( Stem("bait"), "bait" );
	deepEqual( Stem("baited"), "bait" );
	deepEqual( Stem("baize"), "baiz" );
	deepEqual( Stem("bajada"), "bajada" );
	deepEqual( Stem("bakaleyev"), "bakaleyev" );
	deepEqual( Stem("baked"), "bake" );
	deepEqual( Stem("baker"), "baker" );
	deepEqual( Stem("bakers"), "baker" );
	deepEqual( Stem("baking"), "bake" );
	deepEqual( Stem("balalaika"), "balalaika" );
	deepEqual( Stem("balance"), "balanc" );
	deepEqual( Stem("balanced"), "balanc" );
	deepEqual( Stem("balancing"), "balanc" );
	deepEqual( Stem("balandra"), "balandra" );
	deepEqual( Stem("balbi"), "balbi" );
	deepEqual( Stem("balcarce"), "balcarc" );
	deepEqual( Stem("balci"), "balci" );
	deepEqual( Stem("balconies"), "balconi" );
	deepEqual( Stem("balcony"), "balconi" );
	deepEqual( Stem("bald"), "bald" );
	deepEqual( Stem("bale"), "bale" );
	deepEqual( Stem("baleful"), "bale" );
	deepEqual( Stem("bales"), "bale" );
	deepEqual( Stem("balked"), "balk" );
	deepEqual( Stem("balking"), "balk" );
	deepEqual( Stem("balks"), "balk" );
	deepEqual( Stem("ball"), "ball" );
	deepEqual( Stem("ballad"), "ballad" );
	deepEqual( Stem("ballast"), "ballast" );
	deepEqual( Stem("balled"), "ball" );
	deepEqual( Stem("ballenagh"), "ballenagh" );
	deepEqual( Stem("ballenar"), "ballenar" );
	deepEqual( Stem("ballet"), "ballet" );
	deepEqual( Stem("balloon"), "balloon" );
	deepEqual( Stem("balloons"), "balloon" );
	deepEqual( Stem("ballot"), "ballot" );
	deepEqual( Stem("balls"), "ball" );
	deepEqual( Stem("balm"), "balm" );
	deepEqual( Stem("balmy"), "balmi" );
	deepEqual( Stem("balsam"), "balsam" );
	deepEqual( Stem("balusters"), "balust" );
	deepEqual( Stem("balustrade"), "balustrad" );
	deepEqual( Stem("balustrades"), "balustrad" );
	deepEqual( Stem("bamboo"), "bamboo" );
	deepEqual( Stem("bamboos"), "bamboo" );
	deepEqual( Stem("bamford"), "bamford" );
	deepEqual( Stem("banana"), "banana" );
	deepEqual( Stem("bananas"), "banana" );
	deepEqual( Stem("banc"), "banc" );
	deepEqual( Stem("band"), "band" );
	deepEqual( Stem("banda"), "banda" );
	deepEqual( Stem("bandage"), "bandag" );
	deepEqual( Stem("bandages"), "bandag" );
	deepEqual( Stem("bandbox"), "bandbox" );
	deepEqual( Stem("bandboxes"), "bandbox" );
	deepEqual( Stem("bandied"), "bandi" );
	deepEqual( Stem("bandit"), "bandit" );
	deepEqual( Stem("banditti"), "banditti" );
	deepEqual( Stem("bandmaster"), "bandmast" );
	deepEqual( Stem("bands"), "band" );
	deepEqual( Stem("bandy"), "bandi" );
	deepEqual( Stem("bandying"), "bandi" );
	deepEqual( Stem("bane"), "bane" );
	deepEqual( Stem("baneful"), "bane" );
	deepEqual( Stem("bang"), "bang" );
	deepEqual( Stem("banged"), "bang" );
	deepEqual( Stem("banging"), "bang" );
	deepEqual( Stem("banish"), "banish" );
	deepEqual( Stem("banishe"), "banish" );
	deepEqual( Stem("banished"), "banish" );
	deepEqual( Stem("banishes"), "banish" );
	deepEqual( Stem("banishing"), "banish" );
	deepEqual( Stem("banishment"), "banish" );
	deepEqual( Stem("banisters"), "banist" );
	deepEqual( Stem("bank"), "bank" );
	deepEqual( Stem("banked"), "bank" );
	deepEqual( Stem("banker"), "banker" );
	deepEqual( Stem("bankers"), "banker" );
	deepEqual( Stem("banking"), "bank" );
	deepEqual( Stem("banknotes"), "banknot" );
	deepEqual( Stem("bankrupt"), "bankrupt" );
	deepEqual( Stem("bankruptcies"), "bankruptci" );
	deepEqual( Stem("bankruptcy"), "bankruptci" );
	deepEqual( Stem("bankrupts"), "bankrupt" );
	deepEqual( Stem("banks"), "bank" );
	deepEqual( Stem("banner"), "banner" );
	deepEqual( Stem("banners"), "banner" );
	deepEqual( Stem("banns"), "bann" );
	deepEqual( Stem("banquet"), "banquet" );
	deepEqual( Stem("banqueting"), "banquet" );
	deepEqual( Stem("banquetings"), "banquet" );
	deepEqual( Stem("banquets"), "banquet" );
	deepEqual( Stem("banshee"), "banshe" );
	deepEqual( Stem("bantam"), "bantam" );
	deepEqual( Stem("banter"), "banter" );
	deepEqual( Stem("bantering"), "banter" );
	deepEqual( Stem("banters"), "banter" );
	deepEqual( Stem("baptism"), "baptism" );
	deepEqual( Stem("baptismal"), "baptism" );
	deepEqual( Stem("baptistery"), "baptisteri" );
	deepEqual( Stem("baptized"), "baptiz" );
	deepEqual( Stem("baptizing"), "baptiz" );
	deepEqual( Stem("bar"), "bar" );
	deepEqual( Stem("barbare"), "barbar" );
	deepEqual( Stem("barbarian"), "barbarian" );
	deepEqual( Stem("barbarians"), "barbarian" );
	deepEqual( Stem("barbarism"), "barbar" );
	deepEqual( Stem("barbarous"), "barbar" );
	deepEqual( Stem("barbary"), "barbari" );
	deepEqual( Stem("barbauld"), "barbauld" );
	deepEqual( Stem("barbecued"), "barbecu" );
	deepEqual( Stem("barber"), "barber" );
	deepEqual( Stem("barbs"), "barb" );
	deepEqual( Stem("barbuda"), "barbuda" );
	deepEqual( Stem("barcaroles"), "barcarol" );
	deepEqual( Stem("bard"), "bard" );
	deepEqual( Stem("bare"), "bare" );
	deepEqual( Stem("bared"), "bare" );
	deepEqual( Stem("barefaced"), "barefac" );
	deepEqual( Stem("barefoot"), "barefoot" );
	deepEqual( Stem("barefooted"), "barefoot" );
	deepEqual( Stem("bareheaded"), "barehead" );
	deepEqual( Stem("barely"), "bare" );
	deepEqual( Stem("barest"), "barest" );
	deepEqual( Stem("bargain"), "bargain" );
	deepEqual( Stem("bargained"), "bargain" );
	deepEqual( Stem("bargaining"), "bargain" );
	deepEqual( Stem("bargains"), "bargain" );
	deepEqual( Stem("barge"), "barg" );
	deepEqual( Stem("barges"), "barg" );
	deepEqual( Stem("baring"), "bare" );
	deepEqual( Stem("bark"), "bark" );
	deepEqual( Stem("barker"), "barker" );
	deepEqual( Stem("barking"), "bark" );
	deepEqual( Stem("barks"), "bark" );
	deepEqual( Stem("barley"), "barley" );
	deepEqual( Stem("barmaid"), "barmaid" );
	deepEqual( Stem("barmherzige"), "barmherzig" );
	deepEqual( Stem("barn"), "barn" );
	deepEqual( Stem("barnacles"), "barnacl" );
	deepEqual( Stem("barnard"), "barnard" );
	deepEqual( Stem("barnet"), "barnet" );
	deepEqual( Stem("barnevelts"), "barnevelt" );
	deepEqual( Stem("barnton"), "barnton" );
	deepEqual( Stem("barometer"), "baromet" );
	deepEqual( Stem("baron"), "baron" );
	deepEqual( Stem("baroness"), "baro" );
	deepEqual( Stem("baronesses"), "baro" );
	deepEqual( Stem("baronet"), "baronet" );
	deepEqual( Stem("baronetcy"), "baronetci" );
	deepEqual( Stem("baronets"), "baronet" );
	deepEqual( Stem("baronial"), "baroni" );
	deepEqual( Stem("barons"), "baron" );
	deepEqual( Stem("barouche"), "barouch" );
	deepEqual( Stem("barrack"), "barrack" );
	deepEqual( Stem("barracks"), "barrack" );
	deepEqual( Stem("barre"), "barr" );
	deepEqual( Stem("barred"), "bar" );
	deepEqual( Stem("barrel"), "barrel" );
	deepEqual( Stem("barrels"), "barrel" );
	deepEqual( Stem("barren"), "barren" );
	deepEqual( Stem("barrenness"), "barren" );
	deepEqual( Stem("barrett"), "barrett" );
	deepEqual( Stem("barricade"), "barricad" );
	deepEqual( Stem("barricaded"), "barricad" );
	deepEqual( Stem("barrier"), "barrier" );
	deepEqual( Stem("barriers"), "barrier" );
	deepEqual( Stem("barrington"), "barrington" );
	deepEqual( Stem("barrister"), "barrist" );
	deepEqual( Stem("barristers"), "barrist" );
	deepEqual( Stem("barrows"), "barrow" );
	deepEqual( Stem("bars"), "bar" );
	deepEqual( Stem("bart"), "bart" );
	deepEqual( Stem("barter"), "barter" );
	deepEqual( Stem("bartholomew"), "bartholomew" );
	deepEqual( Stem("barton"), "barton" );
	deepEqual( Stem("bas"), "bas" );
	deepEqual( Stem("basa"), "basa" );
	deepEqual( Stem("basal"), "basal" );
	deepEqual( Stem("basalt"), "basalt" );
	deepEqual( Stem("basalti"), "basalti" );
	deepEqual( Stem("basaltic"), "basalt" );
	deepEqual( Stem("base"), "base" );
	deepEqual( Stem("based"), "base" );
	deepEqual( Stem("basely"), "base" );
	deepEqual( Stem("basement"), "basement" );
	deepEqual( Stem("basements"), "basement" );
	deepEqual( Stem("baseness"), "base" );
	deepEqual( Stem("baser"), "baser" );
	deepEqual( Stem("bases"), "base" );
	deepEqual( Stem("basest"), "basest" );
	deepEqual( Stem("bashful"), "bash" );
	deepEqual( Stem("bashfully"), "bash" );
	deepEqual( Stem("bashfulness"), "bash" );
	deepEqual( Stem("basilisk"), "basilisk" );
	deepEqual( Stem("basin"), "basin" );
	deepEqual( Stem("basins"), "basin" );
	deepEqual( Stem("basis"), "basi" );
	deepEqual( Stem("bask"), "bask" );
	deepEqual( Stem("basked"), "bask" );
	deepEqual( Stem("basket"), "basket" );
	deepEqual( Stem("basketful"), "basket" );
	deepEqual( Stem("baskets"), "basket" );
	deepEqual( Stem("basking"), "bask" );
	deepEqual( Stem("basks"), "bask" );
	deepEqual( Stem("basque"), "basqu" );
	deepEqual( Stem("bass"), "bass" );
	deepEqual( Stem("bassoon"), "bassoon" );
	deepEqual( Stem("bastard"), "bastard" );
	deepEqual( Stem("bat"), "bat" );
	deepEqual( Stem("batch"), "batch" );
	deepEqual( Stem("bate"), "bate" );
	deepEqual( Stem("bath"), "bath" );
	deepEqual( Stem("bathe"), "bath" );
	deepEqual( Stem("bathed"), "bath" );
	deepEqual( Stem("bathers"), "bather" );
	deepEqual( Stem("bathes"), "bath" );
	deepEqual( Stem("bathing"), "bath" );
	deepEqual( Stem("baths"), "bath" );
	deepEqual( Stem("bathurst"), "bathurst" );
	deepEqual( Stem("batrachian"), "batrachian" );
	deepEqual( Stem("bats"), "bat" );
	deepEqual( Stem("battalion"), "battalion" );
	deepEqual( Stem("batter"), "batter" );
	deepEqual( Stem("battered"), "batter" );
	deepEqual( Stem("battering"), "batter" );
	deepEqual( Stem("battery"), "batteri" );
	deepEqual( Stem("battle"), "battl" );
	deepEqual( Stem("battled"), "battl" );
	deepEqual( Stem("battlefield"), "battlefield" );
	deepEqual( Stem("battlements"), "battlement" );
	deepEqual( Stem("battles"), "battl" );
	deepEqual( Stem("bauble"), "baubl" );
	deepEqual( Stem("baubles"), "baubl" );
	deepEqual( Stem("baudi"), "baudi" );
	deepEqual( Stem("bawl"), "bawl" );
	deepEqual( Stem("bawled"), "bawl" );
	deepEqual( Stem("bawling"), "bawl" );
	deepEqual( Stem("bawls"), "bawl" );
	deepEqual( Stem("bay"), "bay" );
	deepEqual( Stem("bayard"), "bayard" );
	deepEqual( Stem("bayham"), "bayham" );
	deepEqual( Stem("baying"), "bay" );
	deepEqual( Stem("baynoe"), "bayno" );
	deepEqual( Stem("bayonet"), "bayonet" );
	deepEqual( Stem("bays"), "bay" );
	deepEqual( Stem("bazaar"), "bazaar" );
	deepEqual( Stem("be"), "be" );
	deepEqual( Stem("bea"), "bea" );
	deepEqual( Stem("beach"), "beach" );
	deepEqual( Stem("beaches"), "beach" );
	deepEqual( Stem("beachheads"), "beachhead" );
	deepEqual( Stem("beacon"), "beacon" );
	deepEqual( Stem("beacons"), "beacon" );
	deepEqual( Stem("bead"), "bead" );
	deepEqual( Stem("beaded"), "bead" );
	deepEqual( Stem("beadle"), "beadl" );
	deepEqual( Stem("beadles"), "beadl" );
	deepEqual( Stem("beads"), "bead" );
	deepEqual( Stem("beagle"), "beagl" );
	deepEqual( Stem("beak"), "beak" );
	deepEqual( Stem("beaks"), "beak" );
	deepEqual( Stem("beam"), "beam" );
	deepEqual( Stem("beamed"), "beam" );
	deepEqual( Stem("beaming"), "beam" );
	deepEqual( Stem("beamingly"), "beam" );
	deepEqual( Stem("beams"), "beam" );
	deepEqual( Stem("bean"), "bean" );
	deepEqual( Stem("beans"), "bean" );
	deepEqual( Stem("bear"), "bear" );
	deepEqual( Stem("beard"), "beard" );
	deepEqual( Stem("bearded"), "beard" );
	deepEqual( Stem("beardless"), "beardless" );
	deepEqual( Stem("beards"), "beard" );
	deepEqual( Stem("bearer"), "bearer" );
	deepEqual( Stem("bearers"), "bearer" );
	deepEqual( Stem("bearing"), "bear" );
	deepEqual( Stem("bearings"), "bear" );
	deepEqual( Stem("bearish"), "bearish" );
	deepEqual( Stem("bears"), "bear" );
	deepEqual( Stem("beast"), "beast" );
	deepEqual( Stem("beastliness"), "beastli" );
	deepEqual( Stem("beastly"), "beast" );
	deepEqual( Stem("beasts"), "beast" );
	deepEqual( Stem("beat"), "beat" );
	deepEqual( Stem("beaten"), "beaten" );
	deepEqual( Stem("beaters"), "beater" );
	deepEqual( Stem("beating"), "beat" );
	deepEqual( Stem("beatings"), "beat" );
	deepEqual( Stem("beats"), "beat" );
	deepEqual( Stem("beatson"), "beatson" );
	deepEqual( Stem("beatten"), "beatten" );
	deepEqual( Stem("beau"), "beau" );
	deepEqual( Stem("beauchamp"), "beauchamp" );
	deepEqual( Stem("beaufort"), "beaufort" );
	deepEqual( Stem("beauteous"), "beauteous" );
	deepEqual( Stem("beauties"), "beauti" );
	deepEqual( Stem("beautiful"), "beauti" );
	deepEqual( Stem("beautifullest"), "beautifullest" );
	deepEqual( Stem("beautifully"), "beauti" );
	deepEqual( Stem("beauty"), "beauti" );
	deepEqual( Stem("beaux"), "beaux" );
	deepEqual( Stem("beaver"), "beaver" );
	deepEqual( Stem("becalmed"), "becalm" );
	deepEqual( Stem("became"), "becam" );
	deepEqual( Stem("because"), "becaus" );
	deepEqual( Stem("beck"), "beck" );
	deepEqual( Stem("beckon"), "beckon" );
	deepEqual( Stem("beckoned"), "beckon" );
	deepEqual( Stem("beckoning"), "beckon" );
	deepEqual( Stem("beckons"), "beckon" );
	deepEqual( Stem("become"), "becom" );
	deepEqual( Stem("becomes"), "becom" );
	deepEqual( Stem("becoming"), "becom" );
	deepEqual( Stem("bed"), "bed" );
	deepEqual( Stem("bedabbled"), "bedabbl" );
	deepEqual( Stem("bedaubed"), "bedaub" );
	deepEqual( Stem("bedchamber"), "bedchamb" );
	deepEqual( Stem("bedchambers"), "bedchamb" );
	deepEqual( Stem("bedclothes"), "bedcloth" );
	deepEqual( Stem("bedding"), "bed" );
	deepEqual( Stem("bedecked"), "bedeck" );
	deepEqual( Stem("bedecks"), "bedeck" );
	deepEqual( Stem("bedevilment"), "bedevil" );
	deepEqual( Stem("bedfellows"), "bedfellow" );
	deepEqual( Stem("bedlam"), "bedlam" );
	deepEqual( Stem("bedridden"), "bedridden" );
	deepEqual( Stem("bedroom"), "bedroom" );
	deepEqual( Stem("bedrooms"), "bedroom" );
	deepEqual( Stem("beds"), "bed" );
	deepEqual( Stem("bedside"), "bedsid" );
	deepEqual( Stem("bedstead"), "bedstead" );
	deepEqual( Stem("bedsteads"), "bedstead" );
	deepEqual( Stem("bedtime"), "bedtim" );
	deepEqual( Stem("bee"), "bee" );
	deepEqual( Stem("beech"), "beech" );
	deepEqual( Stem("beechey"), "beechey" );
	deepEqual( Stem("beef"), "beef" );
	deepEqual( Stem("beefsteak"), "beefsteak" );
	deepEqual( Stem("beehive"), "beehiv" );
	deepEqual( Stem("been"), "been" );
	deepEqual( Stem("beer"), "beer" );
	deepEqual( Stem("bees"), "bee" );
	deepEqual( Stem("beeswax"), "beeswax" );
	deepEqual( Stem("beeswaxes"), "beeswax" );
	deepEqual( Stem("beetle"), "beetl" );
	deepEqual( Stem("beetles"), "beetl" );
	deepEqual( Stem("befall"), "befal" );
	deepEqual( Stem("befallen"), "befallen" );
	deepEqual( Stem("befell"), "befel" );
	deepEqual( Stem("befillaire"), "befillair" );
	deepEqual( Stem("befit"), "befit" );
	deepEqual( Stem("befits"), "befit" );
	deepEqual( Stem("befitting"), "befit" );
	deepEqual( Stem("befogged"), "befog" );
	deepEqual( Stem("before"), "befor" );
	deepEqual( Stem("beforehand"), "beforehand" );
	deepEqual( Stem("befriend"), "befriend" );
	deepEqual( Stem("befriended"), "befriend" );
	deepEqual( Stem("befriending"), "befriend" );
	deepEqual( Stem("beg"), "beg" );
	deepEqual( Stem("bega"), "bega" );
	deepEqual( Stem("began"), "began" );
	deepEqual( Stem("begat"), "begat" );
	deepEqual( Stem("beget"), "beget" );
	deepEqual( Stem("beggar"), "beggar" );
	deepEqual( Stem("beggared"), "beggar" );
	deepEqual( Stem("beggarly"), "beggar" );
	deepEqual( Stem("beggars"), "beggar" );
	deepEqual( Stem("beggary"), "beggari" );
	deepEqual( Stem("begged"), "beg" );
	deepEqual( Stem("begging"), "beg" );
	deepEqual( Stem("begin"), "begin" );
	deepEqual( Stem("beginning"), "begin" );
	deepEqual( Stem("beginnings"), "begin" );
	deepEqual( Stem("begins"), "begin" );
	deepEqual( Stem("begludship"), "begludship" );
	deepEqual( Stem("begone"), "begon" );
	deepEqual( Stem("begotten"), "begotten" );
	deepEqual( Stem("begrimed"), "begrim" );
	deepEqual( Stem("begrimes"), "begrim" );
	deepEqual( Stem("begrudge"), "begrudg" );
	deepEqual( Stem("begrudged"), "begrudg" );
	deepEqual( Stem("begs"), "beg" );
	deepEqual( Stem("beguile"), "beguil" );
	deepEqual( Stem("beguiled"), "beguil" );
	deepEqual( Stem("begun"), "begun" );
	deepEqual( Stem("behalf"), "behalf" );
	deepEqual( Stem("behave"), "behav" );
	deepEqual( Stem("behaved"), "behav" );
	deepEqual( Stem("behaves"), "behav" );
	deepEqual( Stem("behaving"), "behav" );
	deepEqual( Stem("behavior"), "behavior" );
	deepEqual( Stem("behaviour"), "behaviour" );
	deepEqual( Stem("beheaded"), "behead" );
	deepEqual( Stem("beheld"), "beheld" );
	deepEqual( Stem("behest"), "behest" );
	deepEqual( Stem("behests"), "behest" );
	deepEqual( Stem("behind"), "behind" );
	deepEqual( Stem("behindhand"), "behindhand" );
	deepEqual( Stem("behold"), "behold" );
	deepEqual( Stem("beholden"), "beholden" );
	deepEqual( Stem("beholder"), "behold" );
	deepEqual( Stem("beholders"), "behold" );
	deepEqual( Stem("beholding"), "behold" );
	deepEqual( Stem("beholds"), "behold" );
	deepEqual( Stem("behoof"), "behoof" );
	deepEqual( Stem("behoved"), "behov" );
	deepEqual( Stem("behoves"), "behov" );
	deepEqual( Stem("behring"), "behr" );
	deepEqual( Stem("being"), "be" );
	deepEqual( Stem("beings"), "be" );
	deepEqual( Stem("beknown"), "beknown" );
	deepEqual( Stem("belated"), "belat" );
	deepEqual( Stem("belauded"), "belaud" );
	deepEqual( Stem("beldame"), "beldam" );
	deepEqual( Stem("belfry"), "belfri" );
	deepEqual( Stem("belgrave"), "belgrav" );
	deepEqual( Stem("belgravia"), "belgravia" );
	deepEqual( Stem("belgravian"), "belgravian" );
	deepEqual( Stem("belie"), "beli" );
	deepEqual( Stem("belied"), "beli" );
	deepEqual( Stem("belief"), "belief" );
	deepEqual( Stem("beliefs"), "belief" );
	deepEqual( Stem("believe"), "believ" );
	deepEqual( Stem("believed"), "believ" );
	deepEqual( Stem("believer"), "believ" );
	deepEqual( Stem("believers"), "believ" );
	deepEqual( Stem("believes"), "believ" );
	deepEqual( Stem("believest"), "believest" );
	deepEqual( Stem("believeth"), "believeth" );
	deepEqual( Stem("believing"), "believ" );
	deepEqual( Stem("bell"), "bell" );
	deepEqual( Stem("bellavista"), "bellavista" );
	deepEqual( Stem("belle"), "bell" );
	deepEqual( Stem("belled"), "bell" );
	deepEqual( Stem("bellies"), "belli" );
	deepEqual( Stem("belligerents"), "belliger" );
	deepEqual( Stem("belling"), "bell" );
	deepEqual( Stem("bellmen"), "bellmen" );
	deepEqual( Stem("bellow"), "bellow" );
	deepEqual( Stem("bellower"), "bellow" );
	deepEqual( Stem("bellowing"), "bellow" );
	deepEqual( Stem("bellows"), "bellow" );
	deepEqual( Stem("bells"), "bell" );
	deepEqual( Stem("belly"), "belli" );
	deepEqual( Stem("belong"), "belong" );
	deepEqual( Stem("belonged"), "belong" );
	deepEqual( Stem("belonging"), "belong" );
	deepEqual( Stem("belongings"), "belong" );
	deepEqual( Stem("belongs"), "belong" );
	deepEqual( Stem("beloved"), "belov" );
	deepEqual( Stem("below"), "below" );
	deepEqual( Stem("belt"), "belt" );
	deepEqual( Stem("belts"), "belt" );
	deepEqual( Stem("belvawney"), "belvawney" );
	deepEqual( Stem("belvedere"), "belveder" );
	deepEqual( Stem("bemoaned"), "bemoan" );
	deepEqual( Stem("ben"), "ben" );
	deepEqual( Stem("bench"), "bench" );
	deepEqual( Stem("bencher"), "bencher" );
	deepEqual( Stem("benchers"), "bencher" );
	deepEqual( Stem("benches"), "bench" );
	deepEqual( Stem("benchuca"), "benchuca" );
	deepEqual( Stem("bend"), "bend" );
	deepEqual( Stem("bended"), "bend" );
	deepEqual( Stem("bending"), "bend" );
	deepEqual( Stem("bends"), "bend" );
	deepEqual( Stem("beneath"), "beneath" );
	deepEqual( Stem("benedict"), "benedict" );
	deepEqual( Stem("benediction"), "benedict" );
	deepEqual( Stem("benefactor"), "benefactor" );
	deepEqual( Stem("benefactors"), "benefactor" );
	deepEqual( Stem("beneficent"), "benefic" );
	deepEqual( Stem("beneficently"), "benefic" );
	deepEqual( Stem("beneficial"), "benefici" );
	deepEqual( Stem("benefit"), "benefit" );
	deepEqual( Stem("benefited"), "benefit" );
	deepEqual( Stem("benefiting"), "benefit" );
	deepEqual( Stem("benefits"), "benefit" );
	deepEqual( Stem("benet"), "benet" );
	deepEqual( Stem("benevolence"), "benevol" );
	deepEqual( Stem("benevolent"), "benevol" );
	deepEqual( Stem("bengal"), "bengal" );
	deepEqual( Stem("benguela"), "benguela" );
	deepEqual( Stem("benighted"), "benight" );
	deepEqual( Stem("benign"), "benign" );
	deepEqual( Stem("benignant"), "benign" );
	deepEqual( Stem("benignantly"), "benign" );
	deepEqual( Stem("benignity"), "benign" );
	deepEqual( Stem("benignly"), "benign" );
	deepEqual( Stem("benito"), "benito" );
	deepEqual( Stem("bennet"), "bennet" );
	deepEqual( Stem("bennett"), "bennett" );
	deepEqual( Stem("benson"), "benson" );
	deepEqual( Stem("bent"), "bent" );
	deepEqual( Stem("benumbed"), "benumb" );
	deepEqual( Stem("bequeath"), "bequeath" );
	deepEqual( Stem("bequeathed"), "bequeath" );
	deepEqual( Stem("bequeathing"), "bequeath" );
	deepEqual( Stem("bequest"), "bequest" );
	deepEqual( Stem("berardi"), "berardi" );
	deepEqual( Stem("bereaved"), "bereav" );
	deepEqual( Stem("bereft"), "bereft" );
	deepEqual( Stem("berg"), "berg" );
	deepEqual( Stem("berkele"), "berkel" );
	deepEqual( Stem("berkeley"), "berkeley" );
	deepEqual( Stem("berlin"), "berlin" );
	deepEqual( Stem("bermudas"), "bermuda" );
	deepEqual( Stem("bernantio"), "bernantio" );
	deepEqual( Stem("beroe"), "bero" );
	deepEqual( Stem("berquelo"), "berquelo" );
	deepEqual( Stem("berrid"), "berrid" );
	deepEqual( Stem("berried"), "berri" );
	deepEqual( Stem("berries"), "berri" );
	deepEqual( Stem("berrin"), "berrin" );
	deepEqual( Stem("berry"), "berri" );
	deepEqual( Stem("berryin"), "berryin" );
	deepEqual( Stem("berteroii"), "berteroii" );
	deepEqual( Stem("berth"), "berth" );
	deepEqual( Stem("berthelot"), "berthelot" );
	deepEqual( Stem("bertram"), "bertram" );
	deepEqual( Stem("beryl"), "beryl" );
	deepEqual( Stem("berzelius"), "berzelius" );
	deepEqual( Stem("beseech"), "beseech" );
	deepEqual( Stem("beseeches"), "beseech" );
	deepEqual( Stem("beseeching"), "beseech" );
	deepEqual( Stem("beseechingly"), "beseech" );
	deepEqual( Stem("beseeltes"), "beseelt" );
	deepEqual( Stem("beseems"), "beseem" );
	deepEqual( Stem("beset"), "beset" );
	deepEqual( Stem("besetting"), "beset" );
	deepEqual( Stem("beside"), "besid" );
	deepEqual( Stem("besides"), "besid" );
	deepEqual( Stem("besieged"), "besieg" );
	deepEqual( Stem("besmeared"), "besmear" );
	deepEqual( Stem("besought"), "besought" );
	deepEqual( Stem("bespattered"), "bespatt" );
	deepEqual( Stem("bespeak"), "bespeak" );
	deepEqual( Stem("bespeaking"), "bespeak" );
	deepEqual( Stem("bespeaks"), "bespeak" );
	deepEqual( Stem("bespeckled"), "bespeckl" );
	deepEqual( Stem("bespoke"), "bespok" );
	deepEqual( Stem("besprinkled"), "besprinkl" );
	deepEqual( Stem("best"), "best" );
	deepEqual( Stem("bestest"), "bestest" );
	deepEqual( Stem("bestir"), "bestir" );
	deepEqual( Stem("bestow"), "bestow" );
	deepEqual( Stem("bestowal"), "bestow" );
	deepEqual( Stem("bestowed"), "bestow" );
	deepEqual( Stem("bestowing"), "bestow" );
	deepEqual( Stem("bestows"), "bestow" );
	deepEqual( Stem("bet"), "bet" );
	deepEqual( Stem("betake"), "betak" );
	deepEqual( Stem("betaken"), "betaken" );
	deepEqual( Stem("bethany"), "bethani" );
	deepEqual( Stem("bethel"), "bethel" );
	deepEqual( Stem("bethlehem"), "bethlehem" );
	deepEqual( Stem("bethought"), "bethought" );
	deepEqual( Stem("betimes"), "betim" );
	deepEqual( Stem("betokened"), "betoken" );
	deepEqual( Stem("betokening"), "betoken" );
	deepEqual( Stem("betook"), "betook" );
	deepEqual( Stem("betray"), "betray" );
	deepEqual( Stem("betrayal"), "betray" );
	deepEqual( Stem("betrayed"), "betray" );
	deepEqual( Stem("betraying"), "betray" );
	deepEqual( Stem("betrays"), "betray" );
	deepEqual( Stem("betrothed"), "betroth" );
	deepEqual( Stem("bets"), "bet" );
	deepEqual( Stem("better"), "better" );
	deepEqual( Stem("betters"), "better" );
	deepEqual( Stem("betther"), "betther" );
	deepEqual( Stem("betting"), "bet" );
	deepEqual( Stem("betty"), "betti" );
	deepEqual( Stem("betuloides"), "betuloid" );
	deepEqual( Stem("betwee"), "betwe" );
	deepEqual( Stem("between"), "between" );
	deepEqual( Stem("betwixt"), "betwixt" );
	deepEqual( Stem("beudant"), "beudant" );
	deepEqual( Stem("bevan"), "bevan" );
	deepEqual( Stem("beverage"), "beverag" );
	deepEqual( Stem("beverley"), "beverley" );
	deepEqual( Stem("bewail"), "bewail" );
	deepEqual( Stem("bewailed"), "bewail" );
	deepEqual( Stem("bewailing"), "bewail" );
	deepEqual( Stem("beware"), "bewar" );
	deepEqual( Stem("bewilder"), "bewild" );
	deepEqual( Stem("bewildered"), "bewild" );
	deepEqual( Stem("bewildering"), "bewild" );
	deepEqual( Stem("bewilderment"), "bewilder" );
	deepEqual( Stem("bewitched"), "bewitch" );
	deepEqual( Stem("bewitching"), "bewitch" );
	deepEqual( Stem("beyond"), "beyond" );
	deepEqual( Stem("bezants"), "bezant" );
	deepEqual( Stem("bezzemelny"), "bezzemelni" );
	deepEqual( Stem("bianchini"), "bianchini" );
	deepEqual( Stem("bias"), "bias" );
	deepEqual( Stem("bible"), "bibl" );
	deepEqual( Stem("bibo"), "bibo" );
	deepEqual( Stem("bibron"), "bibron" );
	deepEqual( Stem("bid"), "bid" );
	deepEqual( Stem("biddable"), "biddabl" );
	deepEqual( Stem("bidden"), "bidden" );
	deepEqual( Stem("bidder"), "bidder" );
	deepEqual( Stem("bidding"), "bid" );
	deepEqual( Stem("biddy"), "biddi" );
	deepEqual( Stem("bide"), "bide" );
	deepEqual( Stem("biding"), "bide" );
	deepEqual( Stem("bids"), "bid" );
	deepEqual( Stem("bien"), "bien" );
	deepEqual( Stem("biffin"), "biffin" );
	deepEqual( Stem("bifurcating"), "bifurc" );
	deepEqual( Stem("bifurcation"), "bifurc" );
	deepEqual( Stem("big"), "big" );
	deepEqual( Stem("bigamy"), "bigami" );
	deepEqual( Stem("bigger"), "bigger" );
	deepEqual( Stem("biggest"), "biggest" );
	deepEqual( Stem("bigness"), "big" );
	deepEqual( Stem("bigoted"), "bigot" );
	deepEqual( Stem("bigotry"), "bigotri" );
	deepEqual( Stem("bile"), "bile" );
	deepEqual( Stem("bileing"), "bile" );
	deepEqual( Stem("bilious"), "bilious" );
	deepEqual( Stem("bill"), "bill" );
	deepEqual( Stem("billed"), "bill" );
	deepEqual( Stem("billet"), "billet" );
	deepEqual( Stem("billeted"), "billet" );
	deepEqual( Stem("billiard"), "billiard" );
	deepEqual( Stem("billiards"), "billiard" );
	deepEqual( Stem("billing"), "bill" );
	deepEqual( Stem("billows"), "billow" );
	deepEqual( Stem("bills"), "bill" );
	deepEqual( Stem("bin"), "bin" );
	deepEqual( Stem("bind"), "bind" );
	deepEqual( Stem("binding"), "bind" );
	deepEqual( Stem("bindings"), "bind" );
	deepEqual( Stem("bindloes"), "bindlo" );
	deepEqual( Stem("binds"), "bind" );
	deepEqual( Stem("bingley"), "bingley" );
	deepEqual( Stem("binn"), "binn" );
	deepEqual( Stem("biographical"), "biograph" );
	deepEqual( Stem("biography"), "biographi" );
	deepEqual( Stem("bios"), "bio" );
	deepEqual( Stem("biped"), "bipe" );
	deepEqual( Stem("birch"), "birch" );
	deepEqual( Stem("bird"), "bird" );
	deepEqual( Stem("birdcage"), "birdcag" );
	deepEqual( Stem("birds"), "bird" );
	deepEqual( Stem("birgos"), "birgo" );
	deepEqual( Stem("birmingham"), "birmingham" );
	deepEqual( Stem("birth"), "birth" );
	deepEqual( Stem("birthday"), "birthday" );
	deepEqual( Stem("birthdays"), "birthday" );
	deepEqual( Stem("birthplace"), "birthplac" );
	deepEqual( Stem("birthright"), "birthright" );
	deepEqual( Stem("births"), "birth" );
	deepEqual( Stem("biscuit"), "biscuit" );
	deepEqual( Stem("biscuits"), "biscuit" );
	deepEqual( Stem("bisecting"), "bisect" );
	deepEqual( Stem("bisection"), "bisect" );
	deepEqual( Stem("bishop"), "bishop" );
	deepEqual( Stem("bishopgate"), "bishopg" );
	deepEqual( Stem("bishopric"), "bishopr" );
	deepEqual( Stem("bishops"), "bishop" );
	deepEqual( Stem("bishopsgate"), "bishopsg" );
	deepEqual( Stem("bismarcks"), "bismarck" );
	deepEqual( Stem("bisness"), "bis" );
	deepEqual( Stem("bit"), "bit" );
	deepEqual( Stem("bitch"), "bitch" );
	deepEqual( Stem("bite"), "bite" );
	deepEqual( Stem("bites"), "bite" );
	deepEqual( Stem("biting"), "bite" );
	deepEqual( Stem("bits"), "bit" );
	deepEqual( Stem("bitted"), "bit" );
	deepEqual( Stem("bitten"), "bitten" );
	deepEqual( Stem("bitter"), "bitter" );
	deepEqual( Stem("bitterer"), "bitter" );
	deepEqual( Stem("bitterest"), "bitterest" );
	deepEqual( Stem("bitterly"), "bitter" );
	deepEqual( Stem("bitterness"), "bitter" );
	deepEqual( Stem("bivalves"), "bivalv" );
	deepEqual( Stem("bivouac"), "bivouac" );
	deepEqual( Stem("bivouacked"), "bivouack" );
	deepEqual( Stem("bivouacking"), "bivouack" );
	deepEqual( Stem("bizcacha"), "bizcacha" );
	deepEqual( Stem("bizcachas"), "bizcacha" );
	deepEqual( Stem("blab"), "blab" );
	deepEqual( Stem("black"), "black" );
	deepEqual( Stem("blackamoor"), "blackamoor" );
	deepEqual( Stem("blackberries"), "blackberri" );
	deepEqual( Stem("blackberry"), "blackberri" );
	deepEqual( Stem("blackbird"), "blackbird" );
	deepEqual( Stem("blacken"), "blacken" );
	deepEqual( Stem("blackened"), "blacken" );
	deepEqual( Stem("blackens"), "blacken" );
	deepEqual( Stem("blacker"), "blacker" );
	deepEqual( Stem("blackest"), "blackest" );
	deepEqual( Stem("blackfriars"), "blackfriar" );
	deepEqual( Stem("blackguard"), "blackguard" );
	deepEqual( Stem("blackguardly"), "blackguard" );
	deepEqual( Stem("blackguards"), "blackguard" );
	deepEqual( Stem("blackhaired"), "blackhair" );
	deepEqual( Stem("blackheath"), "blackheath" );
	deepEqual( Stem("blacking"), "black" );
	deepEqual( Stem("blackish"), "blackish" );
	deepEqual( Stem("blacklead"), "blacklead" );
	deepEqual( Stem("blackleg"), "blackleg" );
	deepEqual( Stem("blacks"), "black" );
	deepEqual( Stem("blacksmith"), "blacksmith" );
	deepEqual( Stem("blacksmiths"), "blacksmith" );
	deepEqual( Stem("blackstone"), "blackston" );
	deepEqual( Stem("blackwall"), "blackwal" );
	deepEqual( Stem("bladder"), "bladder" );
	deepEqual( Stem("bladders"), "bladder" );
	deepEqual( Stem("blade"), "blade" );
	deepEqual( Stem("bladed"), "blade" );
	deepEqual( Stem("blades"), "blade" );
	deepEqual( Stem("blain"), "blain" );
	deepEqual( Stem("blamable"), "blamabl" );
	deepEqual( Stem("blame"), "blame" );
	deepEqual( Stem("blameable"), "blameabl" );
	deepEqual( Stem("blamed"), "blame" );
	deepEqual( Stem("blameless"), "blameless" );
	deepEqual( Stem("blamelessness"), "blameless" );
	deepEqual( Stem("blames"), "blame" );
	deepEqual( Stem("blaming"), "blame" );
	deepEqual( Stem("blanc"), "blanc" );
	deepEqual( Stem("blanca"), "blanca" );
	deepEqual( Stem("blanche"), "blanch" );
	deepEqual( Stem("blanched"), "blanch" );
	deepEqual( Stem("blanco"), "blanco" );
	deepEqual( Stem("bland"), "bland" );
	deepEqual( Stem("blandest"), "blandest" );
	deepEqual( Stem("blandishments"), "blandish" );
	deepEqual( Stem("blandly"), "bland" );
	deepEqual( Stem("blank"), "blank" );
	deepEqual( Stem("blanket"), "blanket" );
	deepEqual( Stem("blankets"), "blanket" );
	deepEqual( Stem("blankly"), "blank" );
	deepEqual( Stem("blankness"), "blank" );
	deepEqual( Stem("blanks"), "blank" );
	deepEqual( Stem("blas"), "blas" );
	deepEqual( Stem("blasphemer"), "blasphem" );
	deepEqual( Stem("blasphemy"), "blasphemi" );
	deepEqual( Stem("blast"), "blast" );
	deepEqual( Stem("blasted"), "blast" );
	deepEqual( Stem("blasts"), "blast" );
	deepEqual( Stem("blatta"), "blatta" );
	deepEqual( Stem("blaze"), "blaze" );
	deepEqual( Stem("blazing"), "blaze" );
	deepEqual( Stem("blazoned"), "blazon" );
	deepEqual( Stem("bleached"), "bleach" );
	deepEqual( Stem("bleak"), "bleak" );
	deepEqual( Stem("bleakness"), "bleak" );
	deepEqual( Stem("blear"), "blear" );
	deepEqual( Stem("bleared"), "blear" );
	deepEqual( Stem("bled"), "bled" );
	deepEqual( Stem("bleed"), "bleed" );
	deepEqual( Stem("bleeding"), "bleed" );
	deepEqual( Stem("blemish"), "blemish" );
	deepEqual( Stem("blemishes"), "blemish" );
	deepEqual( Stem("blench"), "blench" );
	deepEqual( Stem("blended"), "blend" );
	deepEqual( Stem("blending"), "blend" );
	deepEqual( Stem("blends"), "blend" );
	deepEqual( Stem("bless"), "bless" );
	deepEqual( Stem("blessed"), "bless" );
	deepEqual( Stem("blessedness"), "blessed" );
	deepEqual( Stem("blesses"), "bless" );
	deepEqual( Stem("blessing"), "bless" );
	deepEqual( Stem("blessings"), "bless" );
	deepEqual( Stem("blest"), "blest" );
	deepEqual( Stem("blew"), "blew" );
	deepEqual( Stem("blight"), "blight" );
	deepEqual( Stem("blighted"), "blight" );
	deepEqual( Stem("blighting"), "blight" );
	deepEqual( Stem("blights"), "blight" );
	deepEqual( Stem("blind"), "blind" );
	deepEqual( Stem("blinded"), "blind" );
	deepEqual( Stem("blinder"), "blinder" );
	deepEqual( Stem("blindfolding"), "blindfold" );
	deepEqual( Stem("blinding"), "blind" );
	deepEqual( Stem("blindly"), "blind" );
	deepEqual( Stem("blindness"), "blind" );
	deepEqual( Stem("blindnesses"), "blind" );
	deepEqual( Stem("blinds"), "blind" );
	deepEqual( Stem("blink"), "blink" );
	deepEqual( Stem("blinkers"), "blinker" );
	deepEqual( Stem("blinking"), "blink" );
	deepEqual( Stem("blinks"), "blink" );
	deepEqual( Stem("bliss"), "bliss" );
	deepEqual( Stem("blissful"), "bliss" );
	deepEqual( Stem("blister"), "blister" );
	deepEqual( Stem("blistered"), "blister" );
	deepEqual( Stem("blistering"), "blister" );
	deepEqual( Stem("blithe"), "blith" );
	deepEqual( Stem("blitheness"), "blith" );
	deepEqual( Stem("blo"), "blo" );
	deepEqual( Stem("bloated"), "bloat" );
	deepEqual( Stem("block"), "block" );
	deepEqual( Stem("blockade"), "blockad" );
	deepEqual( Stem("blockaded"), "blockad" );
	deepEqual( Stem("blocked"), "block" );
	deepEqual( Stem("blockhead"), "blockhead" );
	deepEqual( Stem("blockheads"), "blockhead" );
	deepEqual( Stem("blocking"), "block" );
	deepEqual( Stem("blocks"), "block" );
	deepEqual( Stem("blockson"), "blockson" );
	deepEqual( Stem("blood"), "blood" );
	deepEqual( Stem("blooded"), "blood" );
	deepEqual( Stem("bloodhound"), "bloodhound" );
	deepEqual( Stem("bloodless"), "bloodless" );
	deepEqual( Stem("bloodlessness"), "bloodless" );
	deepEqual( Stem("bloods"), "blood" );
	deepEqual( Stem("bloodshed"), "bloodsh" );
	deepEqual( Stem("bloodshot"), "bloodshot" );
	deepEqual( Stem("bloodthirsty"), "bloodthirsti" );
	deepEqual( Stem("bloody"), "bloodi" );
	deepEqual( Stem("bloom"), "bloom" );
	deepEqual( Stem("bloometh"), "bloometh" );
	deepEqual( Stem("blooming"), "bloom" );
	deepEqual( Stem("bloomsbury"), "bloomsburi" );
	deepEqual( Stem("blossom"), "blossom" );
	deepEqual( Stem("blossomed"), "blossom" );
	deepEqual( Stem("blossoming"), "blossom" );
	deepEqual( Stem("blossoms"), "blossom" );
	deepEqual( Stem("blot"), "blot" );
	deepEqual( Stem("blotches"), "blotch" );
	deepEqual( Stem("blotchy"), "blotchi" );
	deepEqual( Stem("blots"), "blot" );
	deepEqual( Stem("blotted"), "blot" );
	deepEqual( Stem("blotting"), "blot" );
	deepEqual( Stem("blow"), "blow" );
	deepEqual( Stem("blowed"), "blow" );
	deepEqual( Stem("blower"), "blower" );
	deepEqual( Stem("blowers"), "blower" );
	deepEqual( Stem("blowing"), "blow" );
	deepEqual( Stem("blown"), "blown" );
	deepEqual( Stem("blowpipe"), "blowpip" );
	deepEqual( Stem("blows"), "blow" );
	deepEqual( Stem("blubber"), "blubber" );
	deepEqual( Stem("blubbered"), "blubber" );
	deepEqual( Stem("bludgeon"), "bludgeon" );
	deepEqual( Stem("bludgeons"), "bludgeon" );
	deepEqual( Stem("blue"), "blue" );
	deepEqual( Stem("bluebells"), "bluebel" );
	deepEqual( Stem("blues"), "blue" );
	deepEqual( Stem("bluff"), "bluff" );
	deepEqual( Stem("bluffy"), "bluffi" );
	deepEqual( Stem("bluid"), "bluid" );
	deepEqual( Stem("bluish"), "bluish" );
	deepEqual( Stem("blulfy"), "blulfi" );
	deepEqual( Stem("blunder"), "blunder" );
	deepEqual( Stem("blunderbore"), "blunderbor" );
	deepEqual( Stem("blunderbus"), "blunderbus" );
	deepEqual( Stem("blunderbuss"), "blunderbuss" );
	deepEqual( Stem("blundered"), "blunder" );
	deepEqual( Stem("blundering"), "blunder" );
	deepEqual( Stem("blunders"), "blunder" );
	deepEqual( Stem("blunt"), "blunt" );
	deepEqual( Stem("blunted"), "blunt" );
	deepEqual( Stem("bluntly"), "blunt" );
	deepEqual( Stem("bluntness"), "blunt" );
	deepEqual( Stem("blur"), "blur" );
	deepEqual( Stem("blurs"), "blur" );
	deepEqual( Stem("blurt"), "blurt" );
	deepEqual( Stem("blurted"), "blurt" );
	deepEqual( Stem("blurting"), "blurt" );
	deepEqual( Stem("blurts"), "blurt" );
	deepEqual( Stem("blush"), "blush" );
	deepEqual( Stem("blushed"), "blush" );
	deepEqual( Stem("blushes"), "blush" );
	deepEqual( Stem("blushing"), "blush" );
	deepEqual( Stem("blushingly"), "blush" );
	deepEqual( Stem("bluster"), "bluster" );
	deepEqual( Stem("blusterers"), "bluster" );
	deepEqual( Stem("blustering"), "bluster" );
	deepEqual( Stem("bo"), "bo" );
	deepEqual( Stem("boa"), "boa" );
	deepEqual( Stem("boan"), "boan" );
	deepEqual( Stem("boans"), "boan" );
	deepEqual( Stem("boar"), "boar" );
	deepEqual( Stem("board"), "board" );
	deepEqual( Stem("boarded"), "board" );
	deepEqual( Stem("boarder"), "boarder" );
	deepEqual( Stem("boarders"), "boarder" );
	deepEqual( Stem("boarding"), "board" );
	deepEqual( Stem("boards"), "board" );
	deepEqual( Stem("boars"), "boar" );
	deepEqual( Stem("boas"), "boa" );
	deepEqual( Stem("boast"), "boast" );
	deepEqual( Stem("boasted"), "boast" );
	deepEqual( Stem("boastful"), "boast" );
	deepEqual( Stem("boastfully"), "boast" );
	deepEqual( Stem("boastfulness"), "boast" );
	deepEqual( Stem("boasting"), "boast" );
	deepEqual( Stem("boasts"), "boast" );
	deepEqual( Stem("boat"), "boat" );
	deepEqual( Stem("boating"), "boat" );
	deepEqual( Stem("boats"), "boat" );
	deepEqual( Stem("bob"), "bob" );
	deepEqual( Stem("bobbed"), "bob" );
	deepEqual( Stem("bobbing"), "bob" );
	deepEqual( Stem("bobbish"), "bobbish" );
	deepEqual( Stem("bobs"), "bob" );
	deepEqual( Stem("bobster"), "bobster" );
	deepEqual( Stem("bod"), "bod" );
	deepEqual( Stem("boddy"), "boddi" );
	deepEqual( Stem("bodice"), "bodic" );
	deepEqual( Stem("bodied"), "bodi" );
	deepEqual( Stem("bodies"), "bodi" );
	deepEqual( Stem("bodilessness"), "bodiless" );
	deepEqual( Stem("bodily"), "bodili" );
	deepEqual( Stem("boding"), "bode" );
	deepEqual( Stem("bodkins"), "bodkin" );
	deepEqual( Stem("body"), "bodi" );
	deepEqual( Stem("boer"), "boer" );
	deepEqual( Stem("boffin"), "boffin" );
	deepEqual( Stem("boffinites"), "boffinit" );
	deepEqual( Stem("bog"), "bog" );
	deepEqual( Stem("bogg"), "bogg" );
	deepEqual( Stem("bogsby"), "bogsbi" );
	deepEqual( Stem("boguey"), "boguey" );
	deepEqual( Stem("bohemianism"), "bohemian" );
	deepEqual( Stem("bohemond"), "bohemond" );
	deepEqual( Stem("boil"), "boil" );
	deepEqual( Stem("boiled"), "boil" );
	deepEqual( Stem("boiler"), "boiler" );
	deepEqual( Stem("boilers"), "boiler" );
	deepEqual( Stem("boiling"), "boil" );
	deepEqual( Stem("boils"), "boil" );
	deepEqual( Stem("bois"), "boi" );
	deepEqual( Stem("boisterous"), "boister" );
	deepEqual( Stem("boisterously"), "boister" );
	deepEqual( Stem("bolabola"), "bolabola" );
	deepEqual( Stem("bolas"), "bola" );
	deepEqual( Stem("bold"), "bold" );
	deepEqual( Stem("bolder"), "bolder" );
	deepEqual( Stem("boldest"), "boldest" );
	deepEqual( Stem("boldly"), "bold" );
	deepEqual( Stem("boldness"), "bold" );
	deepEqual( Stem("bole"), "bole" );
	deepEqual( Stem("boles"), "bole" );
	deepEqual( Stem("bolivia"), "bolivia" );
	deepEqual( Stem("bolivian"), "bolivian" );
	deepEqual( Stem("bolster"), "bolster" );
	deepEqual( Stem("bolt"), "bolt" );
	deepEqual( Stem("bolted"), "bolt" );
	deepEqual( Stem("bolter"), "bolter" );
	deepEqual( Stem("bolting"), "bolt" );
	deepEqual( Stem("bolts"), "bolt" );
	deepEqual( Stem("bomb"), "bomb" );
	deepEqual( Stem("bombarding"), "bombard" );
	deepEqual( Stem("bombs"), "bomb" );
	deepEqual( Stem("bon"), "bon" );
	deepEqual( Stem("bona"), "bona" );
	deepEqual( Stem("bond"), "bond" );
	deepEqual( Stem("bondage"), "bondag" );
	deepEqual( Stem("bonds"), "bond" );
	deepEqual( Stem("bone"), "bone" );
	deepEqual( Stem("boned"), "bone" );
	deepEqual( Stem("bones"), "bone" );
	deepEqual( Stem("bonfires"), "bonfir" );
	deepEqual( Stem("bonitos"), "bonito" );
	deepEqual( Stem("bonjour"), "bonjour" );
	deepEqual( Stem("bonn"), "bonn" );
	deepEqual( Stem("bonne"), "bonn" );
	deepEqual( Stem("bonnet"), "bonnet" );
	deepEqual( Stem("bonnets"), "bonnet" );
	deepEqual( Stem("bonney"), "bonney" );
	deepEqual( Stem("bonny"), "bonni" );
	deepEqual( Stem("bonpland"), "bonpland" );
	deepEqual( Stem("bons"), "bon" );
	deepEqual( Stem("bony"), "boni" );
	deepEqual( Stem("booby"), "boobi" );
	deepEqual( Stem("boodle"), "boodl" );
	deepEqual( Stem("boody"), "boodi" );
	deepEqual( Stem("book"), "book" );
	deepEqual( Stem("bookcase"), "bookcas" );
	deepEqual( Stem("booked"), "book" );
	deepEqual( Stem("booker"), "booker" );
	deepEqual( Stem("booking"), "book" );
	deepEqual( Stem("bookish"), "bookish" );
	deepEqual( Stem("books"), "book" );
	deepEqual( Stem("bookseller"), "booksel" );
	deepEqual( Stem("booksellers"), "booksel" );
	deepEqual( Stem("bookstall"), "bookstal" );
	deepEqual( Stem("bookworms"), "bookworm" );
	deepEqual( Stem("boom"), "boom" );
	deepEqual( Stem("boomerang"), "boomerang" );
	deepEqual( Stem("boon"), "boon" );
	deepEqual( Stem("boorioboola"), "boorioboola" );
	deepEqual( Stem("boorly"), "boor" );
	deepEqual( Stem("boost"), "boost" );
	deepEqual( Stem("boot"), "boot" );
	deepEqual( Stem("booth"), "booth" );
	deepEqual( Stem("booths"), "booth" );
	deepEqual( Stem("boots"), "boot" );
	deepEqual( Stem("bootuns"), "bootun" );
	deepEqual( Stem("booty"), "booti" );
	deepEqual( Stem("boozed"), "booz" );
	deepEqual( Stem("boozums"), "boozum" );
	deepEqual( Stem("bor"), "bor" );
	deepEqual( Stem("bord"), "bord" );
	deepEqual( Stem("border"), "border" );
	deepEqual( Stem("bordered"), "border" );
	deepEqual( Stem("bordering"), "border" );
	deepEqual( Stem("borders"), "border" );
	deepEqual( Stem("bore"), "bore" );
	deepEqual( Stem("boreali"), "boreali" );
	deepEqual( Stem("boreas"), "borea" );
	deepEqual( Stem("bored"), "bore" );
	deepEqual( Stem("boredom"), "boredom" );
	deepEqual( Stem("bores"), "bore" );
	deepEqual( Stem("boring"), "bore" );
	deepEqual( Stem("born"), "born" );
	deepEqual( Stem("borne"), "born" );
	deepEqual( Stem("borneo"), "borneo" );
	deepEqual( Stem("borough"), "borough" );
	deepEqual( Stem("boroughbridge"), "boroughbridg" );
	deepEqual( Stem("boroughmongering"), "boroughmong" );
	deepEqual( Stem("boroughs"), "borough" );
	deepEqual( Stem("borreria"), "borreria" );
	deepEqual( Stem("borrioboola"), "borrioboola" );
	deepEqual( Stem("borrioboolan"), "borrioboolan" );
	deepEqual( Stem("borriohoola"), "borriohoola" );
	deepEqual( Stem("borrow"), "borrow" );
	deepEqual( Stem("borrowed"), "borrow" );
	deepEqual( Stem("borrower"), "borrow" );
	deepEqual( Stem("borrowers"), "borrow" );
	deepEqual( Stem("borrowing"), "borrow" );
	deepEqual( Stem("borrows"), "borrow" );
	deepEqual( Stem("borum"), "borum" );
	deepEqual( Stem("bory"), "bori" );
	deepEqual( Stem("bos"), "bos" );
	deepEqual( Stem("bosh"), "bosh" );
	deepEqual( Stem("bosom"), "bosom" );
	deepEqual( Stem("bosomer"), "bosom" );
	deepEqual( Stem("bosoms"), "bosom" );
	deepEqual( Stem("bosses"), "boss" );
	deepEqual( Stem("boston"), "boston" );
	deepEqual( Stem("bot"), "bot" );
	deepEqual( Stem("botanic"), "botan" );
	deepEqual( Stem("botanical"), "botan" );
	deepEqual( Stem("botanist"), "botanist" );
	deepEqual( Stem("botanists"), "botanist" );
	deepEqual( Stem("botanizing"), "botan" );
	deepEqual( Stem("botany"), "botani" );
	deepEqual( Stem("both"), "both" );
	deepEqual( Stem("bother"), "bother" );
	deepEqual( Stem("botheration"), "bother" );
	deepEqual( Stem("bothered"), "bother" );
	deepEqual( Stem("bothering"), "bother" );
	deepEqual( Stem("botofogo"), "botofogo" );
	deepEqual( Stem("bott"), "bott" );
	deepEqual( Stem("bottin"), "bottin" );
	deepEqual( Stem("bottinney"), "bottinney" );
	deepEqual( Stem("bottle"), "bottl" );
	deepEqual( Stem("bottled"), "bottl" );
	deepEqual( Stem("bottles"), "bottl" );
	deepEqual( Stem("bottom"), "bottom" );
	deepEqual( Stem("bottomed"), "bottom" );
	deepEqual( Stem("bottomless"), "bottomless" );
	deepEqual( Stem("bottoms"), "bottom" );
	deepEqual( Stem("boudoir"), "boudoir" );
	deepEqual( Stem("bougainville"), "bougainvill" );
	deepEqual( Stem("boughs"), "bough" );
	deepEqual( Stem("bought"), "bought" );
	deepEqual( Stem("boulder"), "boulder" );
	deepEqual( Stem("boulders"), "boulder" );
	deepEqual( Stem("boulevard"), "boulevard" );
	deepEqual( Stem("bouleversees"), "bouleverse" );
	deepEqual( Stem("boulogne"), "boulogn" );
	deepEqual( Stem("boulong"), "boulong" );
	deepEqual( Stem("bounced"), "bounc" );
	deepEqual( Stem("bouncing"), "bounc" );
	deepEqual( Stem("bound"), "bound" );
	deepEqual( Stem("boundaries"), "boundari" );
	deepEqual( Stem("boundary"), "boundari" );
	deepEqual( Stem("bounde"), "bound" );
	deepEqual( Stem("bounded"), "bound" );
	deepEqual( Stem("bounden"), "bounden" );
	deepEqual( Stem("bounding"), "bound" );
	deepEqual( Stem("boundless"), "boundless" );
	deepEqual( Stem("bounds"), "bound" );
	deepEqual( Stem("boung"), "boung" );
	deepEqual( Stem("boungites"), "boungit" );
	deepEqual( Stem("bountiful"), "bounti" );
	deepEqual( Stem("bounty"), "bounti" );
	deepEqual( Stem("bouquet"), "bouquet" );
	deepEqual( Stem("bouquets"), "bouquet" );
	deepEqual( Stem("bourbon"), "bourbon" );
	deepEqual( Stem("bourgeois"), "bourgeoi" );
	deepEqual( Stem("bourne"), "bourn" );
	deepEqual( Stem("bout"), "bout" );
	deepEqual( Stem("bow"), "bow" );
	deepEqual( Stem("bowed"), "bow" );
	deepEqual( Stem("bowels"), "bowel" );
	deepEqual( Stem("bower"), "bower" );
	deepEqual( Stem("bowered"), "bower" );
	deepEqual( Stem("bowers"), "bower" );
	deepEqual( Stem("bowery"), "boweri" );
	deepEqual( Stem("bowing"), "bow" );
	deepEqual( Stem("bowl"), "bowl" );
	deepEqual( Stem("bowled"), "bowl" );
	deepEqual( Stem("bowling"), "bowl" );
	deepEqual( Stem("bowls"), "bowl" );
	deepEqual( Stem("bows"), "bow" );
	deepEqual( Stem("box"), "box" );
	deepEqual( Stem("boxed"), "box" );
	deepEqual( Stem("boxes"), "box" );
	deepEqual( Stem("boxing"), "box" );
	deepEqual( Stem("boy"), "boy" );
	deepEqual( Stem("boyhood"), "boyhood" );
	deepEqual( Stem("boyish"), "boyish" );
	deepEqual( Stem("boys"), "boy" );
	deepEqual( Stem("boytborn"), "boytborn" );
	deepEqual( Stem("boythorn"), "boythorn" );
	deepEqual( Stem("brabantio"), "brabantio" );
	deepEqual( Stem("brace"), "brace" );
	deepEqual( Stem("braced"), "brace" );
	deepEqual( Stem("bracelet"), "bracelet" );
	deepEqual( Stem("bracelets"), "bracelet" );
	deepEqual( Stem("braces"), "brace" );
	deepEqual( Stem("brachelytra"), "brachelytra" );
	deepEqual( Stem("brachiotis"), "brachioti" );
	deepEqual( Stem("brachyptera"), "brachyptera" );
	deepEqual( Stem("bracing"), "brace" );
	deepEqual( Stem("brackish"), "brackish" );
	deepEqual( Stem("bradshaw"), "bradshaw" );
	deepEqual( Stem("brag"), "brag" );
	deepEqual( Stem("braggadocio"), "braggadocio" );
	deepEqual( Stem("braggart"), "braggart" );
	deepEqual( Stem("bragging"), "brag" );
	deepEqual( Stem("braid"), "braid" );
	deepEqual( Stem("braided"), "braid" );
	deepEqual( Stem("braids"), "braid" );
	deepEqual( Stem("brain"), "brain" );
	deepEqual( Stem("brained"), "brain" );
	deepEqual( Stem("brainless"), "brainless" );
	deepEqual( Stem("brains"), "brain" );
	deepEqual( Stem("brak"), "brak" );
	deepEqual( Stem("brake"), "brake" );
	deepEqual( Stem("brakes"), "brake" );
	deepEqual( Stem("bramador"), "bramador" );
	deepEqual( Stem("brambles"), "brambl" );
	deepEqual( Stem("bran"), "bran" );
	deepEqual( Stem("branc"), "branc" );
	deepEqual( Stem("branch"), "branch" );
	deepEqual( Stem("branched"), "branch" );
	deepEqual( Stem("branches"), "branch" );
	deepEqual( Stem("branchiae"), "branchia" );
	deepEqual( Stem("branchial"), "branchial" );
	deepEqual( Stem("branching"), "branch" );
	deepEqual( Stem("brand"), "brand" );
	deepEqual( Stem("branded"), "brand" );
	deepEqual( Stem("branding"), "brand" );
	deepEqual( Stem("brandished"), "brandish" );
	deepEqual( Stem("brandishing"), "brandish" );
	deepEqual( Stem("brandon"), "brandon" );
	deepEqual( Stem("brandons"), "brandon" );
	deepEqual( Stem("brandy"), "brandi" );
	deepEqual( Stem("brash"), "brash" );
	deepEqual( Stem("brasiliensis"), "brasiliensi" );
	deepEqual( Stem("brass"), "brass" );
	deepEqual( Stem("brasses"), "brass" );
	deepEqual( Stem("brat"), "brat" );
	deepEqual( Stem("brats"), "brat" );
	deepEqual( Stem("bravado"), "bravado" );
	deepEqual( Stem("bravard"), "bravard" );
	deepEqual( Stem("bravassa"), "bravassa" );
	deepEqual( Stem("brave"), "brave" );
	deepEqual( Stem("braved"), "brave" );
	deepEqual( Stem("bravely"), "brave" );
	deepEqual( Stem("bravery"), "braveri" );
	deepEqual( Stem("bravest"), "bravest" );
	deepEqual( Stem("braving"), "brave" );
	deepEqual( Stem("bravo"), "bravo" );
	deepEqual( Stem("brawl"), "brawl" );
	deepEqual( Stem("brawler"), "brawler" );
	deepEqual( Stem("brawling"), "brawl" );
	deepEqual( Stem("brawny"), "brawni" );
	deepEqual( Stem("braxon"), "braxon" );
	deepEqual( Stem("bray"), "bray" );
	deepEqual( Stem("braying"), "bray" );
	deepEqual( Stem("brazen"), "brazen" );
	deepEqual( Stem("brazened"), "brazen" );
	deepEqual( Stem("brazil"), "brazil" );
	deepEqual( Stem("brazilian"), "brazilian" );
	deepEqual( Stem("brazilians"), "brazilian" );
	deepEqual( Stem("brazils"), "brazil" );
	deepEqual( Stem("breach"), "breach" );
	deepEqual( Stem("breached"), "breach" );
	deepEqual( Stem("breaches"), "breach" );
	deepEqual( Stem("bread"), "bread" );
	deepEqual( Stem("breads"), "bread" );
	deepEqual( Stem("breadth"), "breadth" );
	deepEqual( Stem("break"), "break" );
	deepEqual( Stem("breaker"), "breaker" );
	deepEqual( Stem("breakers"), "breaker" );
	deepEqual( Stem("breakfast"), "breakfast" );
	deepEqual( Stem("breakfasted"), "breakfast" );
	deepEqual( Stem("breakfasting"), "breakfast" );
	deepEqual( Stem("breakfasts"), "breakfast" );
	deepEqual( Stem("breakin"), "breakin" );
	deepEqual( Stem("breaking"), "break" );
	deepEqual( Stem("breaks"), "break" );
	deepEqual( Stem("breakwater"), "breakwat" );
	deepEqual( Stem("breakwaters"), "breakwat" );
	deepEqual( Stem("breast"), "breast" );
	deepEqual( Stem("breasted"), "breast" );
	deepEqual( Stem("breasts"), "breast" );
	deepEqual( Stem("breastwork"), "breastwork" );
	deepEqual( Stem("breath"), "breath" );
	deepEqual( Stem("breathe"), "breath" );
	deepEqual( Stem("breathed"), "breath" );
	deepEqual( Stem("breathes"), "breath" );
	deepEqual( Stem("breathing"), "breath" );
	deepEqual( Stem("breathings"), "breath" );
	deepEqual( Stem("breathless"), "breathless" );
	deepEqual( Stem("breathlessly"), "breathless" );
	deepEqual( Stem("breathlessness"), "breathless" );
	deepEqual( Stem("breaths"), "breath" );
	deepEqual( Stem("breccia"), "breccia" );
	deepEqual( Stem("bred"), "bred" );
	deepEqual( Stem("bree"), "bree" );
	deepEqual( Stem("breeches"), "breech" );
	deepEqual( Stem("breed"), "breed" );
	deepEqual( Stem("breeder"), "breeder" );
	deepEqual( Stem("breeding"), "breed" );
	deepEqual( Stem("breeds"), "breed" );
	deepEqual( Stem("breeze"), "breez" );
	deepEqual( Stem("breezes"), "breez" );
	deepEqual( Stem("breezy"), "breezi" );
	deepEqual( Stem("brethren"), "brethren" );
	deepEqual( Stem("brevity"), "breviti" );
	deepEqual( Stem("brew"), "brew" );
	deepEqual( Stem("brewed"), "brew" );
	deepEqual( Stem("brewer"), "brewer" );
	deepEqual( Stem("brewers"), "brewer" );
	deepEqual( Stem("brewery"), "breweri" );
	deepEqual( Stem("brewing"), "brew" );
	deepEqual( Stem("brewster"), "brewster" );
	deepEqual( Stem("bribe"), "bribe" );
	deepEqual( Stem("bribed"), "bribe" );
	deepEqual( Stem("bribery"), "briberi" );
	deepEqual( Stem("bribes"), "bribe" );
	deepEqual( Stem("bribing"), "bribe" );
	deepEqual( Stem("brick"), "brick" );
	deepEqual( Stem("bricked"), "brick" );
	deepEqual( Stem("bricklayers"), "bricklay" );
	deepEqual( Stem("brickmaker"), "brickmak" );
	deepEqual( Stem("brickmakers"), "brickmak" );
	deepEqual( Stem("bricks"), "brick" );
	deepEqual( Stem("brickwork"), "brickwork" );
	deepEqual( Stem("bridal"), "bridal" );
	deepEqual( Stem("bride"), "bride" );
	deepEqual( Stem("bridegroom"), "bridegroom" );
	deepEqual( Stem("bridesmaid"), "bridesmaid" );
	deepEqual( Stem("bridesmaids"), "bridesmaid" );
	deepEqual( Stem("bridge"), "bridg" );
	deepEqual( Stem("bridged"), "bridg" );
	deepEqual( Stem("bridges"), "bridg" );
	deepEqual( Stem("bridle"), "bridl" );
	deepEqual( Stem("bridling"), "bridl" );
	deepEqual( Stem("brief"), "brief" );
	deepEqual( Stem("briefly"), "briefli" );
	deepEqual( Stem("briefs"), "brief" );
	deepEqual( Stem("brier"), "brier" );
	deepEqual( Stem("briers"), "brier" );
	deepEqual( Stem("brig"), "brig" );
	deepEqual( Stem("brigade"), "brigad" );
	deepEqual( Stem("brigand"), "brigand" );
	deepEqual( Stem("brigands"), "brigand" );
	deepEqual( Stem("bright"), "bright" );
	deepEqual( Stem("brighten"), "brighten" );
	deepEqual( Stem("brightened"), "brighten" );
	deepEqual( Stem("brightening"), "brighten" );
	deepEqual( Stem("brightens"), "brighten" );
	deepEqual( Stem("brighter"), "brighter" );
	deepEqual( Stem("brightest"), "brightest" );
	deepEqual( Stem("brightly"), "bright" );
	deepEqual( Stem("brightness"), "bright" );
	deepEqual( Stem("brighton"), "brighton" );
	deepEqual( Stem("brigs"), "brig" );
	deepEqual( Stem("brilliance"), "brillianc" );
	deepEqual( Stem("brilliancy"), "brillianc" );
	deepEqual( Stem("brilliant"), "brilliant" );
	deepEqual( Stem("brilliantly"), "brilliant" );
	deepEqual( Stem("brim"), "brim" );
	deepEqual( Stem("brimful"), "brim" );
	deepEqual( Stem("brimless"), "brimless" );
	deepEqual( Stem("brimmed"), "brim" );
	deepEqual( Stem("brimming"), "brim" );
	deepEqual( Stem("brimmy"), "brimmi" );
	deepEqual( Stem("brims"), "brim" );
	deepEqual( Stem("brimstone"), "brimston" );
	deepEqual( Stem("brindle"), "brindl" );
	deepEqual( Stem("brine"), "brine" );
	deepEqual( Stem("bring"), "bring" );
	deepEqual( Stem("bringing"), "bring" );
	deepEqual( Stem("brings"), "bring" );
	deepEqual( Stem("brink"), "brink" );
	deepEqual( Stem("briny"), "brini" );
	deepEqual( Stem("brisk"), "brisk" );
	deepEqual( Stem("brisker"), "brisker" );
	deepEqual( Stem("briskly"), "brisk" );
	deepEqual( Stem("briskness"), "brisk" );
	deepEqual( Stem("bristle"), "bristl" );
	deepEqual( Stem("bristled"), "bristl" );
	deepEqual( Stem("bristles"), "bristl" );
	deepEqual( Stem("bristly"), "brist" );
	deepEqual( Stem("bristol"), "bristol" );
	deepEqual( Stem("brit"), "brit" );
	deepEqual( Stem("britain"), "britain" );
	deepEqual( Stem("britannia"), "britannia" );
	deepEqual( Stem("british"), "british" );
	deepEqual( Stem("briton"), "briton" );
	deepEqual( Stem("brittann"), "brittann" );
	deepEqual( Stem("brittle"), "brittl" );
	deepEqual( Stem("broach"), "broach" );
	deepEqual( Stem("broached"), "broach" );
	deepEqual( Stem("broad"), "broad" );
	deepEqual( Stem("broadcast"), "broadcast" );
	deepEqual( Stem("broadened"), "broaden" );
	deepEqual( Stem("broader"), "broader" );
	deepEqual( Stem("broadly"), "broad" );
	deepEqual( Stem("broadside"), "broadsid" );
	deepEqual( Stem("broadsides"), "broadsid" );
	deepEqual( Stem("broadsword"), "broadsword" );
	deepEqual( Stem("broadwise"), "broadwis" );
	deepEqual( Stem("brocade"), "brocad" );
	deepEqual( Stem("brochure"), "brochur" );
	deepEqual( Stem("brock"), "brock" );
	deepEqual( Stem("brogden"), "brogden" );
	deepEqual( Stem("broide"), "broid" );
	deepEqual( Stem("broiled"), "broil" );
	deepEqual( Stem("broiling"), "broil" );
	deepEqual( Stem("broke"), "broke" );
	deepEqual( Stem("broken"), "broken" );
	deepEqual( Stem("brokenly"), "broken" );
	deepEqual( Stem("broker"), "broker" );
	deepEqual( Stem("brokers"), "broker" );
	deepEqual( Stem("brokken"), "brokken" );
	deepEqual( Stem("bromelia"), "bromelia" );
	deepEqual( Stem("bromley"), "bromley" );
	deepEqual( Stem("brompton"), "brompton" );
	deepEqual( Stem("bronchial"), "bronchial" );
	deepEqual( Stem("bronchitis"), "bronchiti" );
	deepEqual( Stem("bronze"), "bronz" );
	deepEqual( Stem("bronzed"), "bronz" );
	deepEqual( Stem("broo"), "broo" );
	deepEqual( Stem("brooch"), "brooch" );
	deepEqual( Stem("brood"), "brood" );
	deepEqual( Stem("brooded"), "brood" );
	deepEqual( Stem("brooding"), "brood" );
	deepEqual( Stem("broodingly"), "brood" );
	deepEqual( Stem("brook"), "brook" );
	deepEqual( Stem("brooker"), "brooker" );
	deepEqual( Stem("brooks"), "brook" );
	deepEqual( Stem("broom"), "broom" );
	deepEqual( Stem("brooms"), "broom" );
	deepEqual( Stem("broomstick"), "broomstick" );
	deepEqual( Stem("brooses"), "broos" );
	deepEqual( Stem("broth"), "broth" );
	deepEqual( Stem("brother"), "brother" );
	deepEqual( Stem("brotherhood"), "brotherhood" );
	deepEqual( Stem("brotherly"), "brother" );
	deepEqual( Stem("brothers"), "brother" );
	deepEqual( Stem("brougham"), "brougham" );
	deepEqual( Stem("brought"), "brought" );
	deepEqual( Stem("broune"), "broun" );
	deepEqual( Stem("brout"), "brout" );
	deepEqual( Stem("brow"), "brow" );
	deepEqual( Stem("browdie"), "browdi" );
	deepEqual( Stem("browdies"), "browdi" );
	deepEqual( Stem("brown"), "brown" );
	deepEqual( Stem("browndock"), "browndock" );
	deepEqual( Stem("browne"), "brown" );
	deepEqual( Stem("browner"), "browner" );
	deepEqual( Stem("browning"), "brown" );
	deepEqual( Stem("brownish"), "brownish" );
	deepEqual( Stem("browns"), "brown" );
	deepEqual( Stem("brows"), "brow" );
	deepEqual( Stem("browsed"), "brows" );
	deepEqual( Stem("browsing"), "brows" );
	deepEqual( Stem("bruce"), "bruce" );
	deepEqual( Stem("bruise"), "bruis" );
	deepEqual( Stem("bruised"), "bruis" );
	deepEqual( Stem("bruises"), "bruis" );
	deepEqual( Stem("bruising"), "bruis" );
	deepEqual( Stem("brun"), "brun" );
	deepEqual( Stem("brunswick"), "brunswick" );
	deepEqual( Stem("brunt"), "brunt" );
	deepEqual( Stem("brush"), "brush" );
	deepEqual( Stem("brushed"), "brush" );
	deepEqual( Stem("brushes"), "brush" );
	deepEqual( Stem("brushing"), "brush" );
	deepEqual( Stem("brushwood"), "brushwood" );
	deepEqual( Stem("brusque"), "brusqu" );
	deepEqual( Stem("brussels"), "brussel" );
	deepEqual( Stem("brutal"), "brutal" );
	deepEqual( Stem("brutality"), "brutal" );
	deepEqual( Stem("brutally"), "brutal" );
	deepEqual( Stem("brute"), "brute" );
	deepEqual( Stem("brutes"), "brute" );
	deepEqual( Stem("brutish"), "brutish" );
	deepEqual( Stem("bryanstone"), "bryanston" );
	deepEqual( Stem("bu"), "bu" );
	deepEqual( Stem("bubble"), "bubbl" );
	deepEqual( Stem("bubbles"), "bubbl" );
	deepEqual( Stem("bubblin"), "bubblin" );
	deepEqual( Stem("bubbling"), "bubbl" );
	deepEqual( Stem("bucaniers"), "bucani" );
	deepEqual( Stem("buccaneering"), "buccan" );
	deepEqual( Stem("buccaneers"), "buccan" );
	deepEqual( Stem("buch"), "buch" );
	deepEqual( Stem("buck"), "buck" );
	deepEqual( Stem("bucket"), "bucket" );
	deepEqual( Stem("bucketful"), "bucket" );
	deepEqual( Stem("buckets"), "bucket" );
	deepEqual( Stem("buckingham"), "buckingham" );
	deepEqual( Stem("buckland"), "buckland" );
	deepEqual( Stem("buckle"), "buckl" );
	deepEqual( Stem("buckler"), "buckler" );
	deepEqual( Stem("buckles"), "buckl" );
	deepEqual( Stem("buckram"), "buckram" );
	deepEqual( Stem("buckskins"), "buckskin" );
	deepEqual( Stem("bud"), "bud" );
	deepEqual( Stem("budded"), "bud" );
	deepEqual( Stem("budding"), "bud" );
	deepEqual( Stem("budge"), "budg" );
	deepEqual( Stem("budget"), "budget" );
	deepEqual( Stem("budgets"), "budget" );
	deepEqual( Stem("buds"), "bud" );
	deepEqual( Stem("buena"), "buena" );
	deepEqual( Stem("buenos"), "bueno" );
	deepEqual( Stem("buey"), "buey" );
	deepEqual( Stem("buff"), "buff" );
	deepEqual( Stem("buffer"), "buffer" );
	deepEqual( Stem("buffet"), "buffet" );
	deepEqual( Stem("buffeting"), "buffet" );
	deepEqual( Stem("buffetings"), "buffet" );
	deepEqual( Stem("buffets"), "buffet" );
	deepEqual( Stem("buffon"), "buffon" );
	deepEqual( Stem("buffoon"), "buffoon" );
	deepEqual( Stem("buffoonery"), "buffooneri" );
	deepEqual( Stem("buffoons"), "buffoon" );
	deepEqual( Stem("buffy"), "buffi" );
	deepEqual( Stem("bug"), "bug" );
	deepEqual( Stem("bugged"), "bug" );
	deepEqual( Stem("bugle"), "bugl" );
	deepEqual( Stem("bugs"), "bug" );
	deepEqual( Stem("buil"), "buil" );
	deepEqual( Stem("build"), "build" );
	deepEqual( Stem("builder"), "builder" );
	deepEqual( Stem("buildin"), "buildin" );
	deepEqual( Stem("building"), "build" );
	deepEqual( Stem("buildings"), "build" );
	deepEqual( Stem("builds"), "build" );
	deepEqual( Stem("built"), "built" );
	deepEqual( Stem("bulbous"), "bulbous" );
	deepEqual( Stem("bulgaria"), "bulgaria" );
	deepEqual( Stem("bulged"), "bulg" );
	deepEqual( Stem("bulimus"), "bulimus" );
	deepEqual( Stem("bulk"), "bulk" );
	deepEqual( Stem("bulkeley"), "bulkeley" );
	deepEqual( Stem("bulky"), "bulki" );
	deepEqual( Stem("bull"), "bull" );
	deepEqual( Stem("bulldog"), "bulldog" );
	deepEqual( Stem("bullen"), "bullen" );
	deepEqual( Stem("bullet"), "bullet" );
	deepEqual( Stem("bulletin"), "bulletin" );
	deepEqual( Stem("bulletins"), "bulletin" );
	deepEqual( Stem("bullets"), "bullet" );
	deepEqual( Stem("bullfinch"), "bullfinch" );
	deepEqual( Stem("bullied"), "bulli" );
	deepEqual( Stem("bullies"), "bulli" );
	deepEqual( Stem("bullion"), "bullion" );
	deepEqual( Stem("bullock"), "bullock" );
	deepEqual( Stem("bullocks"), "bullock" );
	deepEqual( Stem("bulls"), "bull" );
	deepEqual( Stem("bully"), "bulli" );
	deepEqual( Stem("bullying"), "bulli" );
	deepEqual( Stem("bulph"), "bulph" );
	deepEqual( Stem("bulwarks"), "bulwark" );
	deepEqual( Stem("bump"), "bump" );
	deepEqual( Stem("bumped"), "bump" );
	deepEqual( Stem("bumper"), "bumper" );
	deepEqual( Stem("bumpers"), "bumper" );
	deepEqual( Stem("bumping"), "bump" );
	deepEqual( Stem("bun"), "bun" );
	deepEqual( Stem("bunch"), "bunch" );
	deepEqual( Stem("bunches"), "bunch" );
	deepEqual( Stem("buncombe"), "buncomb" );
	deepEqual( Stem("bundle"), "bundl" );
	deepEqual( Stem("bundled"), "bundl" );
	deepEqual( Stem("bundles"), "bundl" );
	deepEqual( Stem("bung"), "bung" );
	deepEqual( Stem("bungay"), "bungay" );
	deepEqual( Stem("bungays"), "bungay" );
	deepEqual( Stem("bungle"), "bungl" );
	deepEqual( Stem("bungling"), "bungl" );
	deepEqual( Stem("buns"), "bun" );
	deepEqual( Stem("bunting"), "bunt" );
	deepEqual( Stem("buoy"), "buoy" );
	deepEqual( Stem("buoyancy"), "buoyanc" );
	deepEqual( Stem("buoyant"), "buoyant" );
	deepEqual( Stem("buoyantly"), "buoyant" );
	deepEqual( Stem("buoyed"), "buoy" );
	deepEqual( Stem("burchell"), "burchel" );
	deepEqual( Stem("burchess"), "burchess" );
	deepEqual( Stem("burden"), "burden" );
	deepEqual( Stem("burdened"), "burden" );
	deepEqual( Stem("burdening"), "burden" );
	deepEqual( Stem("burdens"), "burden" );
	deepEqual( Stem("burdensome"), "burdensom" );
	deepEqual( Stem("bureau"), "bureau" );
	deepEqual( Stem("burglars"), "burglar" );
	deepEqual( Stem("burgomaster"), "burgomast" );
	deepEqual( Stem("burgomeister"), "burgomeist" );
	deepEqual( Stem("burial"), "burial" );
	deepEqual( Stem("buried"), "buri" );
	deepEqual( Stem("buries"), "buri" );
	deepEqual( Stem("burlesque"), "burlesqu" );
	deepEqual( Stem("burlinghammer"), "burlinghamm" );
	deepEqual( Stem("burly"), "bur" );
	deepEqual( Stem("burn"), "burn" );
	deepEqual( Stem("burned"), "burn" );
	deepEqual( Stem("burnet"), "burnet" );
	deepEqual( Stem("burning"), "burn" );
	deepEqual( Stem("burnings"), "burn" );
	deepEqual( Stem("burnished"), "burnish" );
	deepEqual( Stem("burnous"), "burnous" );
	deepEqual( Stem("burns"), "burn" );
	deepEqual( Stem("burnt"), "burnt" );
	deepEqual( Stem("burrow"), "burrow" );
	deepEqual( Stem("burrowed"), "burrow" );
	deepEqual( Stem("burrowing"), "burrow" );
	deepEqual( Stem("burrowings"), "burrow" );
	deepEqual( Stem("burrows"), "burrow" );
	deepEqual( Stem("burst"), "burst" );
	deepEqual( Stem("bursting"), "burst" );
	deepEqual( Stem("bursts"), "burst" );
	deepEqual( Stem("burthen"), "burthen" );
	deepEqual( Stem("burton"), "burton" );
	deepEqual( Stem("bury"), "buri" );
	deepEqual( Stem("burying"), "buri" );
	deepEqual( Stem("bus"), "bus" );
	deepEqual( Stem("bush"), "bush" );
	deepEqual( Stem("bushby"), "bushbi" );
	deepEqual( Stem("bushe"), "bush" );
	deepEqual( Stem("bushel"), "bushel" );
	deepEqual( Stem("bushels"), "bushel" );
	deepEqual( Stem("bushes"), "bush" );
	deepEqual( Stem("bushy"), "bushi" );
	deepEqual( Stem("busied"), "busi" );
	deepEqual( Stem("busier"), "busier" );
	deepEqual( Stem("busies"), "busi" );
	deepEqual( Stem("busily"), "busili" );
	deepEqual( Stem("business"), "busi" );
	deepEqual( Stem("businesslike"), "businesslik" );
	deepEqual( Stem("buskin"), "buskin" );
	deepEqual( Stem("bust"), "bust" );
	deepEqual( Stem("busted"), "bust" );
	deepEqual( Stem("bustle"), "bustl" );
	deepEqual( Stem("bustled"), "bustl" );
	deepEqual( Stem("bustling"), "bustl" );
	deepEqual( Stem("busts"), "bust" );
	deepEqual( Stem("busy"), "busi" );
	deepEqual( Stem("busybody"), "busybodi" );
	deepEqual( Stem("busying"), "busi" );
	deepEqual( Stem("but"), "but" );
	deepEqual( Stem("butcher"), "butcher" );
	deepEqual( Stem("butchered"), "butcher" );
	deepEqual( Stem("butchers"), "butcher" );
	deepEqual( Stem("butler"), "butler" );
	deepEqual( Stem("buts"), "but" );
	deepEqual( Stem("butt"), "butt" );
	deepEqual( Stem("butter"), "butter" );
	deepEqual( Stem("buttered"), "butter" );
	deepEqual( Stem("butterflies"), "butterfli" );
	deepEqual( Stem("butterfly"), "butterfli" );
	deepEqual( Stem("butterman"), "butterman" );
	deepEqual( Stem("butther"), "butther" );
	deepEqual( Stem("butting"), "but" );
	deepEqual( Stem("button"), "button" );
	deepEqual( Stem("buttoned"), "button" );
	deepEqual( Stem("buttonhole"), "buttonhol" );
	deepEqual( Stem("buttoning"), "button" );
	deepEqual( Stem("buttons"), "button" );
	deepEqual( Stem("buttresses"), "buttress" );
	deepEqual( Stem("butts"), "butt" );
	deepEqual( Stem("buxom"), "buxom" );
	deepEqual( Stem("buy"), "buy" );
	deepEqual( Stem("buyers"), "buyer" );
	deepEqual( Stem("buying"), "buy" );
	deepEqual( Stem("buyings"), "buy" );
	deepEqual( Stem("buys"), "buy" );
	deepEqual( Stem("buzz"), "buzz" );
	deepEqual( Stem("buzzard"), "buzzard" );
	deepEqual( Stem("buzzed"), "buzz" );
	deepEqual( Stem("buzzing"), "buzz" );
	deepEqual( Stem("bwoken"), "bwoken" );
	deepEqual( Stem("by"), "by" );
	deepEqual( Stem("bye"), "bye" );
	deepEqual( Stem("byelinsky"), "byelinski" );
	deepEqual( Stem("bygone"), "bygon" );
	deepEqual( Stem("bygones"), "bygon" );
	deepEqual( Stem("bynoe"), "byno" );
	deepEqual( Stem("byron"), "byron" );
	deepEqual( Stem("bystanders"), "bystand" );
	deepEqual( Stem("byways"), "byway" );
	deepEqual( Stem("byzantine"), "byzantin" );
	deepEqual( Stem("c"), "c" );
	deepEqual( Stem("ca"), "ca" );
	deepEqual( Stem("cab"), "cab" );
	deepEqual( Stem("cabalistic"), "cabalist" );
	deepEqual( Stem("caballed"), "cabal" );
	deepEqual( Stem("cabals"), "cabal" );
	deepEqual( Stem("cabbage"), "cabbag" );
	deepEqual( Stem("cabbages"), "cabbag" );
	deepEqual( Stem("cabbery"), "cabberi" );
	deepEqual( Stem("cabeza"), "cabeza" );
	deepEqual( Stem("cabin"), "cabin" );
	deepEqual( Stem("cabinet"), "cabinet" );
	deepEqual( Stem("cabinets"), "cabinet" );
	deepEqual( Stem("cabins"), "cabin" );
	deepEqual( Stem("cable"), "cabl" );
	deepEqual( Stem("cables"), "cabl" );
	deepEqual( Stem("cabman"), "cabman" );
	deepEqual( Stem("cabooses"), "caboos" );
	deepEqual( Stem("cabriolet"), "cabriolet" );
	deepEqual( Stem("cabriolets"), "cabriolet" );
	deepEqual( Stem("cabs"), "cab" );
	deepEqual( Stem("cachapual"), "cachapu" );
	deepEqual( Stem("cacique"), "caciqu" );
	deepEqual( Stem("caciques"), "caciqu" );
	deepEqual( Stem("cackle"), "cackl" );
	deepEqual( Stem("cackled"), "cackl" );
	deepEqual( Stem("cacti"), "cacti" );
	deepEqual( Stem("cactornis"), "cactorni" );
	deepEqual( Stem("cactus"), "cactus" );
	deepEqual( Stem("cactuses"), "cactus" );
	deepEqual( Stem("cad"), "cad" );
	deepEqual( Stem("cadaverous"), "cadaver" );
	deepEqual( Stem("caddy"), "caddi" );
	deepEqual( Stem("cadesses"), "cadess" );
	deepEqual( Stem("cadet"), "cadet" );
	deepEqual( Stem("cadets"), "cadet" );
	deepEqual( Stem("cadogan"), "cadogan" );
	deepEqual( Stem("cads"), "cad" );
	deepEqual( Stem("caesar"), "caesar" );
	deepEqual( Stem("cafe"), "cafe" );
	deepEqual( Stem("caffer"), "caffer" );
	deepEqual( Stem("caffre"), "caffr" );
	deepEqual( Stem("caffres"), "caffr" );
	deepEqual( Stem("cage"), "cage" );
	deepEqual( Stem("caged"), "cage" );
	deepEqual( Stem("cages"), "cage" );
	deepEqual( Stem("cajoled"), "cajol" );
	deepEqual( Stem("cajoling"), "cajol" );
	deepEqual( Stem("cake"), "cake" );
	deepEqual( Stem("cakes"), "cake" );
	deepEqual( Stem("calabria"), "calabria" );
	deepEqual( Stem("calais"), "calai" );
	deepEqual( Stem("calamities"), "calam" );
	deepEqual( Stem("calamitous"), "calamit" );
	deepEqual( Stem("calamity"), "calam" );
	deepEqual( Stem("calandria"), "calandria" );
	deepEqual( Stem("calcareo"), "calcareo" );
	deepEqual( Stem("calcareous"), "calcar" );
	deepEqual( Stem("calculate"), "calcul" );
	deepEqual( Stem("calculated"), "calcul" );
	deepEqual( Stem("calculates"), "calcul" );
	deepEqual( Stem("calculating"), "calcul" );
	deepEqual( Stem("calculation"), "calcul" );
	deepEqual( Stem("calculations"), "calcul" );
	deepEqual( Stem("calculus"), "calculus" );
	deepEqual( Stem("caldcleugh"), "caldcleugh" );
	deepEqual( Stem("caldeleugh"), "caldeleugh" );
	deepEqual( Stem("caldrons"), "caldron" );
	deepEqual( Stem("caledonia"), "caledonia" );
	deepEqual( Stem("caledonian"), "caledonian" );
	deepEqual( Stem("calendar"), "calendar" );
	deepEqual( Stem("calendars"), "calendar" );
	deepEqual( Stem("calf"), "calf" );
	deepEqual( Stem("calibre"), "calibr" );
	deepEqual( Stem("calico"), "calico" );
	deepEqual( Stem("california"), "california" );
	deepEqual( Stem("call"), "call" );
	deepEqual( Stem("callao"), "callao" );
	deepEqual( Stem("calle"), "call" );
	deepEqual( Stem("called"), "call" );
	deepEqual( Stem("callems"), "callem" );
	deepEqual( Stem("calling"), "call" );
	deepEqual( Stem("callings"), "call" );
	deepEqual( Stem("callous"), "callous" );
	deepEqual( Stem("callousness"), "callous" );
	deepEqual( Stem("calls"), "call" );
	deepEqual( Stem("calm"), "calm" );
	deepEqual( Stem("calmed"), "calm" );
	deepEqual( Stem("calmer"), "calmer" );
	deepEqual( Stem("calmest"), "calmest" );
	deepEqual( Stem("calming"), "calm" );
	deepEqual( Stem("calmly"), "calm" );
	deepEqual( Stem("calmness"), "calm" );
	deepEqual( Stem("calms"), "calm" );
	deepEqual( Stem("caln"), "caln" );
	deepEqual( Stem("calodera"), "calodera" );
	deepEqual( Stem("calomel"), "calomel" );
	deepEqual( Stem("calosoma"), "calosoma" );
	deepEqual( Stem("calumniated"), "calumni" );
	deepEqual( Stem("calumnies"), "calumni" );
	deepEqual( Stem("calumniously"), "calumni" );
	deepEqual( Stem("calumny"), "calumni" );
	deepEqual( Stem("calve"), "calv" );
	deepEqual( Stem("calves"), "calv" );
	deepEqual( Stem("camarhynchus"), "camarhynchus" );
	deepEqual( Stem("camberwell"), "camberwel" );
	deepEqual( Stem("cambric"), "cambric" );
	deepEqual( Stem("cambridge"), "cambridg" );
	deepEqual( Stem("cambridgeshire"), "cambridgeshir" );
	deepEqual( Stem("came"), "came" );
	deepEqual( Stem("camel"), "camel" );
	deepEqual( Stem("camels"), "camel" );
	deepEqual( Stem("camlet"), "camlet" );
	deepEqual( Stem("camp"), "camp" );
	deepEqual( Stem("campaign"), "campaign" );
	deepEqual( Stem("campana"), "campana" );
	deepEqual( Stem("campany"), "campani" );
	deepEqual( Stem("campestris"), "campestri" );
	deepEqual( Stem("camphor"), "camphor" );
	deepEqual( Stem("campo"), "campo" );
	deepEqual( Stem("campos"), "campo" );
	deepEqual( Stem("can"), "can" );
	deepEqual( Stem("canada"), "canada" );
	deepEqual( Stem("canal"), "canal" );
	deepEqual( Stem("canals"), "canal" );
	deepEqual( Stem("canaries"), "canari" );
	deepEqual( Stem("canary"), "canari" );
	deepEqual( Stem("cancan"), "cancan" );
	deepEqual( Stem("cancellaria"), "cancellaria" );
	deepEqual( Stem("cancelled"), "cancel" );
	deepEqual( Stem("cancelling"), "cancel" );
	deepEqual( Stem("cancer"), "cancer" );
	deepEqual( Stem("candid"), "candid" );
	deepEqual( Stem("candidate"), "candid" );
	deepEqual( Stem("candidates"), "candid" );
	deepEqual( Stem("candidateship"), "candidateship" );
	deepEqual( Stem("candidature"), "candidatur" );
	deepEqual( Stem("candidly"), "candid" );
	deepEqual( Stem("candle"), "candl" );
	deepEqual( Stem("candlelight"), "candlelight" );
	deepEqual( Stem("candles"), "candl" );
	deepEqual( Stem("candlestick"), "candlestick" );
	deepEqual( Stem("candlesticks"), "candlestick" );
	deepEqual( Stem("candour"), "candour" );
	deepEqual( Stem("cane"), "cane" );
	deepEqual( Stem("caned"), "cane" );
	deepEqual( Stem("canelones"), "canelon" );
	deepEqual( Stem("canes"), "cane" );
	deepEqual( Stem("cangrejales"), "cangrejal" );
	deepEqual( Stem("canis"), "cani" );
	deepEqual( Stem("canister"), "canist" );
	deepEqual( Stem("cannibal"), "cannib" );
	deepEqual( Stem("cannibalism"), "cannib" );
	deepEqual( Stem("cannibals"), "cannib" );
	deepEqual( Stem("canning"), "canning" );
	deepEqual( Stem("canno"), "canno" );
	deepEqual( Stem("cannon"), "cannon" );
	deepEqual( Stem("cannons"), "cannon" );
	deepEqual( Stem("cannot"), "cannot" );
	deepEqual( Stem("canoe"), "cano" );
	deepEqual( Stem("canoes"), "cano" );
	deepEqual( Stem("canons"), "canon" );
	deepEqual( Stem("canopy"), "canopi" );
	deepEqual( Stem("cant"), "cant" );
	deepEqual( Stem("cantal"), "cantal" );
	deepEqual( Stem("canter"), "canter" );
	deepEqual( Stem("canterbury"), "canterburi" );
	deepEqual( Stem("cantered"), "canter" );
	deepEqual( Stem("canting"), "cant" );
	deepEqual( Stem("cantrip"), "cantrip" );
	deepEqual( Stem("cantrips"), "cantrip" );
	deepEqual( Stem("canvas"), "canva" );
	deepEqual( Stem("canvass"), "canvass" );
	deepEqual( Stem("canvassed"), "canvass" );
	deepEqual( Stem("canvassing"), "canvass" );
	deepEqual( Stem("cap"), "cap" );
	deepEqual( Stem("capabilities"), "capabl" );
	deepEqual( Stem("capability"), "capabl" );
	deepEqual( Stem("capable"), "capabl" );
	deepEqual( Stem("capacious"), "capaci" );
	deepEqual( Stem("capacities"), "capac" );
	deepEqual( Stem("capacity"), "capac" );
	deepEqual( Stem("cape"), "cape" );
	deepEqual( Stem("capella"), "capella" );
	deepEqual( Stem("capers"), "caper" );
	deepEqual( Stem("capita"), "capita" );
	deepEqual( Stem("capital"), "capit" );
	deepEqual( Stem("capitalist"), "capitalist" );
	deepEqual( Stem("capitalists"), "capitalist" );
	deepEqual( Stem("capitally"), "capit" );
	deepEqual( Stem("capitals"), "capit" );
	deepEqual( Stem("capitol"), "capitol" );
	deepEqual( Stem("capitulate"), "capitul" );
	deepEqual( Stem("capped"), "cap" );
	deepEqual( Stem("capping"), "cap" );
	deepEqual( Stem("caprice"), "capric" );
	deepEqual( Stem("caprices"), "capric" );
	deepEqual( Stem("capricious"), "caprici" );
	deepEqual( Stem("capriciously"), "caprici" );
	deepEqual( Stem("capricorn"), "capricorn" );
	deepEqual( Stem("caps"), "cap" );
	deepEqual( Stem("capsicum"), "capsicum" );
	deepEqual( Stem("capstans"), "capstan" );
	deepEqual( Stem("capsule"), "capsul" );
	deepEqual( Stem("capt"), "capt" );
	deepEqual( Stem("captain"), "captain" );
	deepEqual( Stem("captains"), "captain" );
	deepEqual( Stem("captious"), "captious" );
	deepEqual( Stem("captivate"), "captiv" );
	deepEqual( Stem("captivated"), "captiv" );
	deepEqual( Stem("captivater"), "captivat" );
	deepEqual( Stem("captivating"), "captiv" );
	deepEqual( Stem("captivator"), "captiv" );
	deepEqual( Stem("captive"), "captiv" );
	deepEqual( Stem("captives"), "captiv" );
	deepEqual( Stem("captivity"), "captiv" );
	deepEqual( Stem("capture"), "captur" );
	deepEqual( Stem("captured"), "captur" );
	deepEqual( Stem("capybara"), "capybara" );
	deepEqual( Stem("capybaras"), "capybara" );
	deepEqual( Stem("carabidae"), "carabida" );
	deepEqual( Stem("caracara"), "caracara" );
	deepEqual( Stem("caracaras"), "caracara" );
	deepEqual( Stem("caracter"), "caract" );
	deepEqual( Stem("caravan"), "caravan" );
	deepEqual( Stem("caravansary"), "caravansari" );
	deepEqual( Stem("caravanserai"), "caravanserai" );
	deepEqual( Stem("caravels"), "caravel" );
	deepEqual( Stem("carbine"), "carbin" );
	deepEqual( Stem("carbonaceous"), "carbonac" );
	deepEqual( Stem("carbonate"), "carbon" );
	deepEqual( Stem("carboniferous"), "carbonifer" );
	deepEqual( Stem("carboy"), "carboy" );
	deepEqual( Stem("carbury"), "carburi" );
	deepEqual( Stem("carcase"), "carcas" );
	deepEqual( Stem("carcass"), "carcass" );
	deepEqual( Stem("carcasses"), "carcass" );
	deepEqual( Stem("card"), "card" );
	deepEqual( Stem("cardinal"), "cardin" );
	deepEqual( Stem("cardoon"), "cardoon" );
	deepEqual( Stem("cards"), "card" );
	deepEqual( Stem("cardui"), "cardui" );
	deepEqual( Stem("cardunculus"), "cardunculus" );
	deepEqual( Stem("care"), "care" );
	deepEqual( Stem("cared"), "care" );
	deepEqual( Stem("career"), "career" );
	deepEqual( Stem("careers"), "career" );
	deepEqual( Stem("careful"), "care" );
	deepEqual( Stem("carefully"), "care" );
	deepEqual( Stem("carefulness"), "care" );
	deepEqual( Stem("careless"), "careless" );
	deepEqual( Stem("carelessly"), "careless" );
	deepEqual( Stem("carelessness"), "careless" );
	deepEqual( Stem("cares"), "care" );
	deepEqual( Stem("caress"), "caress" );
	deepEqual( Stem("caressed"), "caress" );
	deepEqual( Stem("caresses"), "caress" );
	deepEqual( Stem("caressing"), "caress" );
	deepEqual( Stem("caressingly"), "caress" );
	deepEqual( Stem("careworn"), "careworn" );
	deepEqual( Stem("cargo"), "cargo" );
	deepEqual( Stem("cargoes"), "cargo" );
	deepEqual( Stem("caricature"), "caricatur" );
	deepEqual( Stem("caricatures"), "caricatur" );
	deepEqual( Stem("caring"), "care" );
	deepEqual( Stem("carizal"), "cariz" );
	deepEqual( Stem("carking"), "cark" );
	deepEqual( Stem("carlos"), "carlo" );
	deepEqual( Stem("carlton"), "carlton" );
	deepEqual( Stem("carmen"), "carmen" );
	deepEqual( Stem("carmichael"), "carmichael" );
	deepEqual( Stem("carmine"), "carmin" );
	deepEqual( Stem("carnage"), "carnag" );
	deepEqual( Stem("carnation"), "carnat" );
	deepEqual( Stem("carne"), "carn" );
	deepEqual( Stem("carnegie"), "carnegi" );
	deepEqual( Stem("carnivorous"), "carnivor" );
	deepEqual( Stem("caroline"), "carolin" );
	deepEqual( Stem("carolling"), "carol" );
	deepEqual( Stem("carp"), "carp" );
	deepEqual( Stem("carpacho"), "carpacho" );
	deepEqual( Stem("carpenter"), "carpent" );
	deepEqual( Stem("carpenters"), "carpent" );
	deepEqual( Stem("carpet"), "carpet" );
	deepEqual( Stem("carpeted"), "carpet" );
	deepEqual( Stem("carpeting"), "carpet" );
	deepEqual( Stem("carpetless"), "carpetless" );
	deepEqual( Stem("carpets"), "carpet" );
	deepEqual( Stem("carping"), "carp" );
	deepEqual( Stem("carrancha"), "carrancha" );
	deepEqual( Stem("carranchas"), "carrancha" );
	deepEqual( Stem("carriage"), "carriag" );
	deepEqual( Stem("carriages"), "carriag" );
	deepEqual( Stem("carrie"), "carri" );
	deepEqual( Stem("carried"), "carri" );
	deepEqual( Stem("carrier"), "carrier" );
	deepEqual( Stem("carries"), "carri" );
	deepEqual( Stem("carrion"), "carrion" );
	deepEqual( Stem("carrot"), "carrot" );
	deepEqual( Stem("carrots"), "carrot" );
	deepEqual( Stem("carry"), "carri" );
	deepEqual( Stem("carrying"), "carri" );
	deepEqual( Stem("carse"), "cars" );
	deepEqual( Stem("carstone"), "carston" );
	deepEqual( Stem("cart"), "cart" );
	deepEqual( Stem("carte"), "cart" );
	deepEqual( Stem("cartel"), "cartel" );
	deepEqual( Stem("carthagena"), "carthagena" );
	deepEqual( Stem("cartload"), "cartload" );
	deepEqual( Stem("cartloads"), "cartload" );
	deepEqual( Stem("cartridge"), "cartridg" );
	deepEqual( Stem("cartridges"), "cartridg" );
	deepEqual( Stem("carts"), "cart" );
	deepEqual( Stem("carve"), "carv" );
	deepEqual( Stem("carved"), "carv" );
	deepEqual( Stem("carving"), "carv" );
	deepEqual( Stem("carvings"), "carv" );
	deepEqual( Stem("casara"), "casara" );
	deepEqual( Stem("casarita"), "casarita" );
	deepEqual( Stem("cascade"), "cascad" );
	deepEqual( Stem("cascades"), "cascad" );
	deepEqual( Stem("case"), "case" );
	deepEqual( Stem("casement"), "casement" );
	deepEqual( Stem("casements"), "casement" );
	deepEqual( Stem("cases"), "case" );
	deepEqual( Stem("cash"), "cash" );
	deepEqual( Stem("cashmere"), "cashmer" );
	deepEqual( Stem("cashup"), "cashup" );
	deepEqual( Stem("cask"), "cask" );
	deepEqual( Stem("casket"), "casket" );
	deepEqual( Stem("caskets"), "casket" );
	deepEqual( Stem("casks"), "cask" );
	deepEqual( Stem("casma"), "casma" );
	deepEqual( Stem("caspian"), "caspian" );
	deepEqual( Stem("cassada"), "cassada" );
	deepEqual( Stem("cassio"), "cassio" );
	deepEqual( Stem("cast"), "cast" );
	deepEqual( Stem("castanet"), "castanet" );
	deepEqual( Stem("castaway"), "castaway" );
	deepEqual( Stem("caste"), "cast" );
	deepEqual( Stem("castigate"), "castig" );
	deepEqual( Stem("castigation"), "castig" );
	deepEqual( Stem("casting"), "cast" );
	deepEqual( Stem("castle"), "castl" );
	deepEqual( Stem("castles"), "castl" );
	deepEqual( Stem("castor"), "castor" );
	deepEqual( Stem("castrated"), "castrat" );
	deepEqual( Stem("castro"), "castro" );
	deepEqual( Stem("casts"), "cast" );
	deepEqual( Stem("casual"), "casual" );
	deepEqual( Stem("casually"), "casual" );
	deepEqual( Stem("casualties"), "casualti" );
	deepEqual( Stem("casuarina"), "casuarina" );
	deepEqual( Stem("casucha"), "casucha" );
	deepEqual( Stem("casuchas"), "casucha" );
	deepEqual( Stem("casuistry"), "casuistri" );
	deepEqual( Stem("casuists"), "casuist" );
	deepEqual( Stem("cat"), "cat" );
	deepEqual( Stem("catacomb"), "catacomb" );
	deepEqual( Stem("cataleptic"), "catalept" );
	deepEqual( Stem("catalogue"), "catalogu" );
	deepEqual( Stem("catalogued"), "catalogu" );
	deepEqual( Stem("catalonian"), "catalonian" );
	deepEqual( Stem("catamaran"), "catamaran" );
	deepEqual( Stem("cataract"), "cataract" );
	deepEqual( Stem("cataracts"), "cataract" );
	deepEqual( Stem("catastrophe"), "catastroph" );
	deepEqual( Stem("catastrophes"), "catastroph" );
	deepEqual( Stem("catch"), "catch" );
	deepEqual( Stem("catched"), "catch" );
	deepEqual( Stem("catchers"), "catcher" );
	deepEqual( Stem("catches"), "catch" );
	deepEqual( Stem("catching"), "catch" );
	deepEqual( Stem("catchings"), "catch" );
	deepEqual( Stem("catechism"), "catech" );
	deepEqual( Stem("categories"), "categori" );
	deepEqual( Stem("category"), "categori" );
	deepEqual( Stem("caterpillar"), "caterpillar" );
	deepEqual( Stem("caterpillars"), "caterpillar" );
	deepEqual( Stem("catgut"), "catgut" );
	deepEqual( Stem("cathartes"), "cathart" );
	deepEqual( Stem("cathedral"), "cathedr" );
	deepEqual( Stem("cathedrals"), "cathedr" );
	deepEqual( Stem("catherine"), "catherin" );
	deepEqual( Stem("catholic"), "cathol" );
	deepEqual( Stem("catholics"), "cathol" );
	deepEqual( Stem("cats"), "cat" );
	deepEqual( Stem("cattle"), "cattl" );
	deepEqual( Stem("caucahue"), "caucahu" );
	deepEqual( Stem("caught"), "caught" );
	deepEqual( Stem("cauldron"), "cauldron" );
	deepEqual( Stem("cauliflowers"), "cauliflow" );
	deepEqual( Stem("cauquenes"), "cauquen" );
	deepEqual( Stem("caus"), "caus" );
	deepEqual( Stem("cause"), "caus" );
	deepEqual( Stem("caused"), "caus" );
	deepEqual( Stem("causeless"), "causeless" );
	deepEqual( Stem("causes"), "caus" );
	deepEqual( Stem("causing"), "caus" );
	deepEqual( Stem("caustic"), "caustic" );
	deepEqual( Stem("caution"), "caution" );
	deepEqual( Stem("cautioned"), "caution" );
	deepEqual( Stem("cautioning"), "caution" );
	deepEqual( Stem("cautions"), "caution" );
	deepEqual( Stem("cautious"), "cautious" );
	deepEqual( Stem("cautiously"), "cautious" );
	deepEqual( Stem("cavalry"), "cavalri" );
	deepEqual( Stem("cave"), "cave" );
	deepEqual( Stem("caveat"), "caveat" );
	deepEqual( Stem("cavendish"), "cavendish" );
	deepEqual( Stem("cavern"), "cavern" );
	deepEqual( Stem("cavernous"), "cavern" );
	deepEqual( Stem("caverns"), "cavern" );
	deepEqual( Stem("caves"), "cave" );
	deepEqual( Stem("cavia"), "cavia" );
	deepEqual( Stem("cavies"), "cavi" );
	deepEqual( Stem("cavil"), "cavil" );
	deepEqual( Stem("cavillers"), "cavil" );
	deepEqual( Stem("cavities"), "caviti" );
	deepEqual( Stem("cavity"), "caviti" );
	deepEqual( Stem("cavy"), "cavi" );
	deepEqual( Stem("caw"), "caw" );
	deepEqual( Stem("cawa"), "cawa" );
	deepEqual( Stem("cawing"), "caw" );
	deepEqual( Stem("cayanus"), "cayanus" );
	deepEqual( Stem("cayenne"), "cayenn" );
	deepEqual( Stem("caylen"), "caylen" );
	deepEqual( Stem("cease"), "ceas" );
	deepEqual( Stem("ceased"), "ceas" );
	deepEqual( Stem("ceaseless"), "ceaseless" );
	deepEqual( Stem("ceaselessly"), "ceaseless" );
	deepEqual( Stem("ceases"), "ceas" );
	deepEqual( Stem("ceasing"), "ceas" );
	deepEqual( Stem("cebrionidae"), "cebrionida" );
	deepEqual( Stem("cecilia"), "cecilia" );
	deepEqual( Stem("cedar"), "cedar" );
	deepEqual( Stem("cedars"), "cedar" );
	deepEqual( Stem("ceedingly"), "ceed" );
	deepEqual( Stem("ceiling"), "ceil" );
	deepEqual( Stem("ceilings"), "ceil" );
	deepEqual( Stem("ceillhg"), "ceillhg" );
	deepEqual( Stem("cel"), "cel" );
	deepEqual( Stem("celebes"), "celeb" );
	deepEqual( Stem("celebrate"), "celebr" );
	deepEqual( Stem("celebrated"), "celebr" );
	deepEqual( Stem("celebration"), "celebr" );
	deepEqual( Stem("celebrity"), "celebr" );
	deepEqual( Stem("celery"), "celeri" );
	deepEqual( Stem("celestial"), "celesti" );
	deepEqual( Stem("cell"), "cell" );
	deepEqual( Stem("cellar"), "cellar" );
	deepEqual( Stem("cellarage"), "cellarag" );
	deepEqual( Stem("cellaria"), "cellaria" );
	deepEqual( Stem("cellars"), "cellar" );
	deepEqual( Stem("cells"), "cell" );
	deepEqual( Stem("cellular"), "cellular" );
	deepEqual( Stem("cement"), "cement" );
	deepEqual( Stem("cemented"), "cement" );
	deepEqual( Stem("cementing"), "cement" );
	deepEqual( Stem("cemetery"), "cemeteri" );
	deepEqual( Stem("cenotherae"), "cenothera" );
	deepEqual( Stem("censorious"), "censori" );
	deepEqual( Stem("censorship"), "censorship" );
	deepEqual( Stem("censure"), "censur" );
	deepEqual( Stem("censured"), "censur" );
	deepEqual( Stem("censures"), "censur" );
	deepEqual( Stem("censuring"), "censur" );
	deepEqual( Stem("census"), "census" );
	deepEqual( Stem("cent"), "cent" );
	deepEqual( Stem("centaurs"), "centaur" );
	deepEqual( Stem("centered"), "center" );
	deepEqual( Stem("centra"), "centra" );
	deepEqual( Stem("central"), "central" );
	deepEqual( Stem("centre"), "centr" );
	deepEqual( Stem("centred"), "centr" );
	deepEqual( Stem("centres"), "centr" );
	deepEqual( Stem("centrifugal"), "centrifug" );
	deepEqual( Stem("centring"), "centr" );
	deepEqual( Stem("cents"), "cent" );
	deepEqual( Stem("centuries"), "centuri" );
	deepEqual( Stem("century"), "centuri" );
	deepEqual( Stem("cependent"), "cepend" );
	deepEqual( Stem("cephalopoda"), "cephalopoda" );
	deepEqual( Stem("cereal"), "cereal" );
	deepEqual( Stem("ceremonial"), "ceremoni" );
	deepEqual( Stem("ceremonies"), "ceremoni" );
	deepEqual( Stem("ceremonious"), "ceremoni" );
	deepEqual( Stem("ceremoniously"), "ceremoni" );
	deepEqual( Stem("ceremony"), "ceremoni" );
	deepEqual( Stem("cerro"), "cerro" );
	deepEqual( Stem("certain"), "certain" );
	deepEqual( Stem("certainl"), "certainl" );
	deepEqual( Stem("certainly"), "certain" );
	deepEqual( Stem("certainties"), "certainti" );
	deepEqual( Stem("certainty"), "certainti" );
	deepEqual( Stem("certhia"), "certhia" );
	deepEqual( Stem("certhidea"), "certhidea" );
	deepEqual( Stem("certificate"), "certif" );
	deepEqual( Stem("certificates"), "certif" );
	deepEqual( Stem("certified"), "certifi" );
	deepEqual( Stem("certifiket"), "certifiket" );
	deepEqual( Stem("certify"), "certifi" );
	deepEqual( Stem("certifying"), "certifi" );
	deepEqual( Stem("cervicem"), "cervicem" );
	deepEqual( Stem("cervus"), "cervus" );
	deepEqual( Stem("ceryle"), "ceryl" );
	deepEqual( Stem("ces"), "ces" );
	deepEqual( Stem("cesenate"), "cesen" );
	deepEqual( Stem("cessation"), "cessat" );
	deepEqual( Stem("cesspool"), "cesspool" );
	deepEqual( Stem("cesspools"), "cesspool" );
	deepEqual( Stem("cetaceous"), "cetac" );
	deepEqual( Stem("cetera"), "cetera" );
	deepEqual( Stem("ceteras"), "cetera" );
	deepEqual( Stem("cetrer"), "cetrer" );
	deepEqual( Stem("chacao"), "chacao" );
	deepEqual( Stem("chacun"), "chacun" );
	deepEqual( Stem("chadband"), "chadband" );
	deepEqual( Stem("chadbands"), "chadband" );
	deepEqual( Stem("chafe"), "chafe" );
	deepEqual( Stem("chafed"), "chafe" );
	deepEqual( Stem("chafes"), "chafe" );
	deepEqual( Stem("chaff"), "chaff" );
	deepEqual( Stem("chaffers"), "chaffer" );
	deepEqual( Stem("chaffinch"), "chaffinch" );
	deepEqual( Stem("chafing"), "chafe" );
	deepEqual( Stem("chagos"), "chago" );
	deepEqual( Stem("chagrin"), "chagrin" );
	deepEqual( Stem("chai"), "chai" );
	deepEqual( Stem("chain"), "chain" );
	deepEqual( Stem("chained"), "chain" );
	deepEqual( Stem("chains"), "chain" );
	deepEqual( Stem("chair"), "chair" );
	deepEqual( Stem("chairing"), "chair" );
	deepEqual( Stem("chairman"), "chairman" );
	deepEqual( Stem("chairs"), "chair" );
	deepEqual( Stem("chaise"), "chais" );
	deepEqual( Stem("chalk"), "chalk" );
	deepEqual( Stem("chalked"), "chalk" );
	deepEqual( Stem("chalking"), "chalk" );
	deepEqual( Stem("challenge"), "challeng" );
	deepEqual( Stem("challenged"), "challeng" );
	deepEqual( Stem("challenger"), "challeng" );
	deepEqual( Stem("challenging"), "challeng" );
	deepEqual( Stem("chalr"), "chalr" );
	deepEqual( Stem("chama"), "chama" );
	deepEqual( Stem("chamber"), "chamber" );
	deepEqual( Stem("chamberlain"), "chamberlain" );
	deepEqual( Stem("chambers"), "chamber" );
	deepEqual( Stem("chambre"), "chambr" );
	deepEqual( Stem("chameleon"), "chameleon" );
	deepEqual( Stem("chamisso"), "chamisso" );
	deepEqual( Stem("chamois"), "chamoi" );
	deepEqual( Stem("champagne"), "champagn" );
	deepEqual( Stem("champion"), "champion" );
	deepEqual( Stem("champions"), "champion" );
	deepEqual( Stem("chance"), "chanc" );
	deepEqual( Stem("chanced"), "chanc" );
	deepEqual( Stem("chancellor"), "chancellor" );
	deepEqual( Stem("chancellors"), "chancellor" );
	deepEqual( Stem("chancelor"), "chancelor" );
	deepEqual( Stem("chancery"), "chanceri" );
	deepEqual( Stem("chances"), "chanc" );
	deepEqual( Stem("chancing"), "chanc" );
	deepEqual( Stem("chandelier"), "chandeli" );
	deepEqual( Stem("chandeliers"), "chandeli" );
	deepEqual( Stem("chandler"), "chandler" );
	deepEqual( Stem("chaneral"), "chaner" );
	deepEqual( Stem("change"), "chang" );
	deepEqual( Stem("changeable"), "changeabl" );
	deepEqual( Stem("changed"), "chang" );
	deepEqual( Stem("changeling"), "changel" );
	deepEqual( Stem("changes"), "chang" );
	deepEqual( Stem("changing"), "chang" );
	deepEqual( Stem("channel"), "channel" );
	deepEqual( Stem("channels"), "channel" );
	deepEqual( Stem("chantant"), "chantant" );
	deepEqual( Stem("chanted"), "chant" );
	deepEqual( Stem("chanting"), "chant" );
	deepEqual( Stem("chants"), "chant" );
	deepEqual( Stem("chanuncillo"), "chanuncillo" );
	deepEqual( Stem("chaos"), "chao" );
	deepEqual( Stem("chaotic"), "chaotic" );
	deepEqual( Stem("chap"), "chap" );
	deepEqual( Stem("chapel"), "chapel" );
	deepEqual( Stem("chapels"), "chapel" );
	deepEqual( Stem("chaperon"), "chaperon" );
	deepEqual( Stem("chaperone"), "chaperon" );
	deepEqual( Stem("chaperons"), "chaperon" );
	deepEqual( Stem("chaplain"), "chaplain" );
	deepEqual( Stem("chaps"), "chap" );
	deepEqual( Stem("chapter"), "chapter" );
	deepEqual( Stem("chapters"), "chapter" );
	deepEqual( Stem("chaquaio"), "chaquaio" );
	deepEqual( Stem("character"), "charact" );
	deepEqual( Stem("characteristic"), "characterist" );
	deepEqual( Stem("characteristically"), "characterist" );
	deepEqual( Stem("characteristics"), "characterist" );
	deepEqual( Stem("characterize"), "character" );
	deepEqual( Stem("characterized"), "character" );
	deepEqual( Stem("characterizes"), "character" );
	deepEqual( Stem("characterizing"), "character" );
	deepEqual( Stem("characters"), "charact" );
	deepEqual( Stem("charade"), "charad" );
	deepEqual( Stem("charcoal"), "charcoal" );
	deepEqual( Stem("charcoaled"), "charcoal" );
	deepEqual( Stem("charge"), "charg" );
	deepEqual( Stem("chargeable"), "chargeabl" );
	deepEqual( Stem("charged"), "charg" );
	deepEqual( Stem("chargers"), "charger" );
	deepEqual( Stem("charges"), "charg" );
	deepEqual( Stem("charging"), "charg" );
	deepEqual( Stem("chariey"), "chariey" );
	deepEqual( Stem("charing"), "chare" );
	deepEqual( Stem("chariot"), "chariot" );
	deepEqual( Stem("chariots"), "chariot" );
	deepEqual( Stem("charitable"), "charit" );
	deepEqual( Stem("charitably"), "charit" );
	deepEqual( Stem("charities"), "chariti" );
	deepEqual( Stem("charity"), "chariti" );
	deepEqual( Stem("charlatanism"), "charlatan" );
	deepEqual( Stem("charles"), "charl" );
	deepEqual( Stem("charley"), "charley" );
	deepEqual( Stem("charlie"), "charli" );
	deepEqual( Stem("charlotte"), "charlott" );
	deepEqual( Stem("charm"), "charm" );
	deepEqual( Stem("charmed"), "charm" );
	deepEqual( Stem("charmer"), "charmer" );
	deepEqual( Stem("charmers"), "charmer" );
	deepEqual( Stem("charming"), "charm" );
	deepEqual( Stem("charmingly"), "charm" );
	deepEqual( Stem("charms"), "charm" );
	deepEqual( Stem("charnel"), "charnel" );
	deepEqual( Stem("charon"), "charon" );
	deepEqual( Stem("charqui"), "charqui" );
	deepEqual( Stem("charred"), "char" );
	deepEqual( Stem("chart"), "chart" );
	deepEqual( Stem("chartered"), "charter" );
	deepEqual( Stem("chartism"), "chartism" );
	deepEqual( Stem("chartist"), "chartist" );
	deepEqual( Stem("charts"), "chart" );
	deepEqual( Stem("charwoman"), "charwoman" );
	deepEqual( Stem("chary"), "chari" );
	deepEqual( Stem("chase"), "chase" );
	deepEqual( Stem("chased"), "chase" );
	deepEqual( Stem("chases"), "chase" );
	deepEqual( Stem("chasing"), "chase" );
	deepEqual( Stem("chasm"), "chasm" );
	deepEqual( Stem("chasms"), "chasm" );
	deepEqual( Stem("chaste"), "chast" );
	deepEqual( Stem("chastened"), "chasten" );
	deepEqual( Stem("chastening"), "chasten" );
	deepEqual( Stem("chastise"), "chastis" );
	deepEqual( Stem("chastisement"), "chastis" );
	deepEqual( Stem("chastity"), "chastiti" );
	deepEqual( Stem("chat"), "chat" );
	deepEqual( Stem("chateau"), "chateau" );
	deepEqual( Stem("chatham"), "chatham" );
	deepEqual( Stem("chatted"), "chat" );
	deepEqual( Stem("chattels"), "chattel" );
	deepEqual( Stem("chatter"), "chatter" );
	deepEqual( Stem("chatterbox"), "chatterbox" );
	deepEqual( Stem("chattered"), "chatter" );
	deepEqual( Stem("chatterer"), "chatter" );
	deepEqual( Stem("chattering"), "chatter" );
	deepEqual( Stem("chatters"), "chatter" );
	deepEqual( Stem("chatting"), "chat" );
	deepEqual( Stem("chatty"), "chatti" );
	deepEqual( Stem("chaunt"), "chaunt" );
	deepEqual( Stem("cheap"), "cheap" );
	deepEqual( Stem("cheaper"), "cheaper" );
	deepEqual( Stem("cheapest"), "cheapest" );
	deepEqual( Stem("cheaply"), "cheapli" );
	deepEqual( Stem("cheapside"), "cheapsid" );
	deepEqual( Stem("cheat"), "cheat" );
	deepEqual( Stem("cheated"), "cheat" );
	deepEqual( Stem("cheating"), "cheat" );
	deepEqual( Stem("cheats"), "cheat" );
	deepEqual( Stem("chec"), "chec" );
	deepEqual( Stem("check"), "check" );
	deepEqual( Stem("checked"), "check" );
	deepEqual( Stem("checking"), "check" );
	deepEqual( Stem("checks"), "check" );
	deepEqual( Stem("cheek"), "cheek" );
	deepEqual( Stem("cheeked"), "cheek" );
	deepEqual( Stem("cheeks"), "cheek" );
	deepEqual( Stem("cheer"), "cheer" );
	deepEqual( Stem("cheered"), "cheer" );
	deepEqual( Stem("cheerful"), "cheer" );
	deepEqual( Stem("cheerfully"), "cheer" );
	deepEqual( Stem("cheerfulness"), "cheer" );
	deepEqual( Stem("cheerily"), "cheerili" );
	deepEqual( Stem("cheeriness"), "cheeri" );
	deepEqual( Stem("cheering"), "cheer" );
	deepEqual( Stem("cheerless"), "cheerless" );
	deepEqual( Stem("cheers"), "cheer" );
	deepEqual( Stem("cheery"), "cheeri" );
	deepEqual( Stem("cheeryble"), "cheerybl" );
	deepEqual( Stem("cheerybles"), "cheerybl" );
	deepEqual( Stem("cheese"), "chees" );
	deepEqual( Stem("cheeseming"), "cheesem" );
	deepEqual( Stem("chefs"), "chef" );
	deepEqual( Stem("chelsea"), "chelsea" );
	deepEqual( Stem("cheltenham"), "cheltenham" );
	deepEqual( Stem("chem"), "chem" );
	deepEqual( Stem("chemical"), "chemic" );
	deepEqual( Stem("chemins"), "chemin" );
	deepEqual( Stem("chemise"), "chemis" );
	deepEqual( Stem("chemist"), "chemist" );
	deepEqual( Stem("chemistry"), "chemistri" );
	deepEqual( Stem("chemists"), "chemist" );
	deepEqual( Stem("chenille"), "chenill" );
	deepEqual( Stem("chepones"), "chepon" );
	deepEqual( Stem("cheque"), "chequ" );
	deepEqual( Stem("chequered"), "chequer" );
	deepEqual( Stem("cheques"), "chequ" );
	deepEqual( Stem("cher"), "cher" );
	deepEqual( Stem("chere"), "chere" );
	deepEqual( Stem("cherish"), "cherish" );
	deepEqual( Stem("cherished"), "cherish" );
	deepEqual( Stem("cherishes"), "cherish" );
	deepEqual( Stem("cherishing"), "cherish" );
	deepEqual( Stem("cherizette"), "cherizett" );
	deepEqual( Stem("cherries"), "cherri" );
	deepEqual( Stem("cherry"), "cherri" );
	deepEqual( Stem("cherryble"), "cherrybl" );
	deepEqual( Stem("cherrybles"), "cherrybl" );
	deepEqual( Stem("cherty"), "cherti" );
	deepEqual( Stem("cherubim"), "cherubim" );
	deepEqual( Stem("cheshires"), "cheshir" );
	deepEqual( Stem("chesney"), "chesney" );
	deepEqual( Stem("chess"), "chess" );
	deepEqual( Stem("chest"), "chest" );
	deepEqual( Stem("chested"), "chest" );
	deepEqual( Stem("chesterfield"), "chesterfield" );
	deepEqual( Stem("chestnut"), "chestnut" );
	deepEqual( Stem("chestnuts"), "chestnut" );
	deepEqual( Stem("chests"), "chest" );
	deepEqual( Stem("cheucau"), "cheucau" );
	deepEqual( Stem("cheval"), "cheval" );
	deepEqual( Stem("chevaux"), "chevaux" );
	deepEqual( Stem("chevy"), "chevi" );
	deepEqual( Stem("chew"), "chew" );
	deepEqual( Stem("chewed"), "chew" );
	deepEqual( Stem("chewing"), "chew" );
	deepEqual( Stem("chichester"), "chichest" );
	deepEqual( Stem("chichi"), "chichi" );
	deepEqual( Stem("chick"), "chick" );
	deepEqual( Stem("chicken"), "chicken" );
	deepEqual( Stem("chickens"), "chicken" );
	deepEqual( Stem("chiduco"), "chiduco" );
	deepEqual( Stem("chief"), "chief" );
	deepEqual( Stem("chiefest"), "chiefest" );
	deepEqual( Stem("chiefly"), "chiefli" );
	deepEqual( Stem("chiefs"), "chief" );
	deepEqual( Stem("chiel"), "chiel" );
	deepEqual( Stem("chiens"), "chien" );
	deepEqual( Stem("child"), "child" );
	deepEqual( Stem("childhood"), "childhood" );
	deepEqual( Stem("childish"), "childish" );
	deepEqual( Stem("childishly"), "childish" );
	deepEqual( Stem("childishness"), "childish" );
	deepEqual( Stem("childless"), "childless" );
	deepEqual( Stem("childlike"), "childlik" );
	deepEqual( Stem("children"), "children" );
	deepEqual( Stem("chile"), "chile" );
	deepEqual( Stem("chilean"), "chilean" );
	deepEqual( Stem("chileno"), "chileno" );
	deepEqual( Stem("chilenos"), "chileno" );
	deepEqual( Stem("chilian"), "chilian" );
	deepEqual( Stem("chilicauquen"), "chilicauquen" );
	deepEqual( Stem("chilipa"), "chilipa" );
	deepEqual( Stem("chill"), "chill" );
	deepEqual( Stem("chilled"), "chill" );
	deepEqual( Stem("chilling"), "chill" );
	deepEqual( Stem("chills"), "chill" );
	deepEqual( Stem("chilly"), "chilli" );
	deepEqual( Stem("chiloe"), "chilo" );
	deepEqual( Stem("chilotan"), "chilotan" );
	deepEqual( Stem("chilotans"), "chilotan" );
	deepEqual( Stem("chiltern"), "chiltern" );
	deepEqual( Stem("chimango"), "chimango" );
	deepEqual( Stem("chimbley"), "chimbley" );
	deepEqual( Stem("chimborazo"), "chimborazo" );
	deepEqual( Stem("chimes"), "chime" );
	deepEqual( Stem("chimie"), "chimi" );
	deepEqual( Stem("chimney"), "chimney" );
	deepEqual( Stem("chimneypiece"), "chimneypiec" );
	deepEqual( Stem("chimneys"), "chimney" );
	deepEqual( Stem("chin"), "chin" );
	deepEqual( Stem("china"), "china" );
	deepEqual( Stem("chinas"), "china" );
	deepEqual( Stem("chinchilloides"), "chinchilloid" );
	deepEqual( Stem("chinese"), "chines" );
	deepEqual( Stem("chink"), "chink" );
	deepEqual( Stem("chinking"), "chink" );
	deepEqual( Stem("chinks"), "chink" );
	deepEqual( Stem("chins"), "chin" );
	deepEqual( Stem("chintz"), "chintz" );
	deepEqual( Stem("chionis"), "chioni" );
	deepEqual( Stem("chip"), "chip" );
	deepEqual( Stem("chipping"), "chip" );
	deepEqual( Stem("chirp"), "chirp" );
	deepEqual( Stem("chirped"), "chirp" );
	deepEqual( Stem("chirping"), "chirp" );
	deepEqual( Stem("chirps"), "chirp" );
	deepEqual( Stem("chirrup"), "chirrup" );
	deepEqual( Stem("chirruped"), "chirrup" );
	deepEqual( Stem("chirruping"), "chirrup" );
	deepEqual( Stem("chisel"), "chisel" );
	deepEqual( Stem("chiselled"), "chisel" );
	deepEqual( Stem("chit"), "chit" );
	deepEqual( Stem("chitons"), "chiton" );
	deepEqual( Stem("chivalrous"), "chivalr" );
	deepEqual( Stem("chivalrously"), "chivalr" );
	deepEqual( Stem("chivalry"), "chivalri" );
	deepEqual( Stem("chivied"), "chivi" );
	deepEqual( Stem("chivying"), "chivi" );
	deepEqual( Stem("chizzle"), "chizzl" );
	deepEqual( Stem("chlorides"), "chlorid" );
	deepEqual( Stem("chock"), "chock" );
	deepEqual( Stem("chocolate"), "chocol" );
	deepEqual( Stem("choice"), "choic" );
	deepEqual( Stem("choiceness"), "choic" );
	deepEqual( Stem("choicest"), "choicest" );
	deepEqual( Stem("choir"), "choir" );
	deepEqual( Stem("choiseul"), "choiseul" );
	deepEqual( Stem("choke"), "choke" );
	deepEqual( Stem("choked"), "choke" );
	deepEqual( Stem("chokes"), "choke" );
	deepEqual( Stem("choking"), "choke" );
	deepEqual( Stem("cholechel"), "cholechel" );
	deepEqual( Stem("cholera"), "cholera" );
	deepEqual( Stem("chonchi"), "chonchi" );
	deepEqual( Stem("chonos"), "chono" );
	deepEqual( Stem("choose"), "choos" );
	deepEqual( Stem("chooses"), "choos" );
	deepEqual( Stem("choosing"), "choos" );
	deepEqual( Stem("chop"), "chop" );
	deepEqual( Stem("chopkins"), "chopkin" );
	deepEqual( Stem("chopped"), "chop" );
	deepEqual( Stem("chopping"), "chop" );
	deepEqual( Stem("chops"), "chop" );
	deepEqual( Stem("chord"), "chord" );
	deepEqual( Stem("chords"), "chord" );
	deepEqual( Stem("choristers"), "chorist" );
	deepEqual( Stem("chorus"), "chorus" );
	deepEqual( Stem("choruses"), "chorus" );
	deepEqual( Stem("chose"), "chose" );
	deepEqual( Stem("chosen"), "chosen" );
	deepEqual( Stem("chowser"), "chowser" );
	deepEqual( Stem("christ"), "christ" );
	deepEqual( Stem("christabel"), "christabel" );
	deepEqual( Stem("christen"), "christen" );
	deepEqual( Stem("christendom"), "christendom" );
	deepEqual( Stem("christened"), "christen" );
	deepEqual( Stem("christening"), "christen" );
	deepEqual( Stem("christi"), "christi" );
	deepEqual( Stem("christian"), "christian" );
	deepEqual( Stem("christianity"), "christian" );
	deepEqual( Stem("christians"), "christian" );
	deepEqual( Stem("christmas"), "christma" );
	deepEqual( Stem("christopher"), "christoph" );
	deepEqual( Stem("chronic"), "chronic" );
	deepEqual( Stem("chronicle"), "chronicl" );
	deepEqual( Stem("chronicled"), "chronicl" );
	deepEqual( Stem("chroniclers"), "chronicl" );
	deepEqual( Stem("chronicles"), "chronicl" );
	deepEqual( Stem("chronometrical"), "chronometr" );
	deepEqual( Stem("chrysalis"), "chrysali" );
	deepEqual( Stem("chrysomelidae"), "chrysomelida" );
	deepEqual( Stem("chrysopa"), "chrysopa" );
	deepEqual( Stem("chubby"), "chubbi" );
	deepEqual( Stem("chuck"), "chuck" );
	deepEqual( Stem("chucked"), "chuck" );
	deepEqual( Stem("chuckle"), "chuckl" );
	deepEqual( Stem("chuckled"), "chuckl" );
	deepEqual( Stem("chuckling"), "chuckl" );
	deepEqual( Stem("chunk"), "chunk" );
	deepEqual( Stem("chunks"), "chunk" );
	deepEqual( Stem("chupat"), "chupat" );
	deepEqual( Stem("church"), "church" );
	deepEqual( Stem("churches"), "church" );
	deepEqual( Stem("churchgoing"), "churchgo" );
	deepEqual( Stem("churchyard"), "churchyard" );
	deepEqual( Stem("churchyards"), "churchyard" );
	deepEqual( Stem("churlishness"), "churlish" );
	deepEqual( Stem("churls"), "churl" );
	deepEqual( Stem("churned"), "churn" );
	deepEqual( Stem("churning"), "churn" );
	deepEqual( Stem("chut"), "chut" );
	deepEqual( Stem("chuzo"), "chuzo" );
	deepEqual( Stem("chuzos"), "chuzo" );
	deepEqual( Stem("chy"), "chi" );
	deepEqual( Stem("cicadae"), "cicada" );
	deepEqual( Stem("cicadas"), "cicada" );
	deepEqual( Stem("cicidae"), "cicida" );
	deepEqual( Stem("cider"), "cider" );
	deepEqual( Stem("cigar"), "cigar" );
	deepEqual( Stem("cigarette"), "cigarett" );
	deepEqual( Stem("cigarettes"), "cigarett" );
	deepEqual( Stem("cigaritos"), "cigarito" );
	deepEqual( Stem("cigars"), "cigar" );
	deepEqual( Stem("ciliae"), "cilia" );
	deepEqual( Stem("cimabue"), "cimabu" );
	deepEqual( Stem("cincindela"), "cincindela" );
	deepEqual( Stem("cincinnatus"), "cincinnatus" );
	deepEqual( Stem("cincinnatuses"), "cincinnatus" );
	deepEqual( Stem("cinder"), "cinder" );
	deepEqual( Stem("cinderella"), "cinderella" );
	deepEqual( Stem("cinders"), "cinder" );
	deepEqual( Stem("cindery"), "cinderi" );
	deepEqual( Stem("cinereus"), "cinereus" );
	deepEqual( Stem("cinnamon"), "cinnamon" );
	deepEqual( Stem("cinq"), "cinq" );
	deepEqual( Stem("ciphering"), "cipher" );
	deepEqual( Stem("cir"), "cir" );
	deepEqual( Stem("circle"), "circl" );
	deepEqual( Stem("circles"), "circl" );
	deepEqual( Stem("circling"), "circl" );
	deepEqual( Stem("circuit"), "circuit" );
	deepEqual( Stem("circuitous"), "circuit" );
	deepEqual( Stem("circuits"), "circuit" );
	deepEqual( Stem("circular"), "circular" );
	deepEqual( Stem("circulars"), "circular" );
	deepEqual( Stem("circulated"), "circul" );
	deepEqual( Stem("circulates"), "circul" );
	deepEqual( Stem("circulating"), "circul" );
	deepEqual( Stem("circulation"), "circul" );
	deepEqual( Stem("circumambient"), "circumambi" );
	deepEqual( Stem("circumference"), "circumfer" );
	deepEqual( Stem("circumjacent"), "circumjac" );
	deepEqual( Stem("circumlocution"), "circumlocut" );
	deepEqual( Stem("circumnavigate"), "circumnavig" );
	deepEqual( Stem("circumnavigation"), "circumnavig" );
	deepEqual( Stem("circumscribed"), "circumscrib" );
	deepEqual( Stem("circumspect"), "circumspect" );
	deepEqual( Stem("circumstance"), "circumst" );
	deepEqual( Stem("circumstanced"), "circumstanc" );
	deepEqual( Stem("circumstances"), "circumst" );
	deepEqual( Stem("circumstantial"), "circumstanti" );
	deepEqual( Stem("circumstantially"), "circumstanti" );
	deepEqual( Stem("circus"), "circus" );
	deepEqual( Stem("cistern"), "cistern" );
	deepEqual( Stem("cisterns"), "cistern" );
	deepEqual( Stem("citadel"), "citadel" );
	deepEqual( Stem("citation"), "citat" );
	deepEqual( Stem("cite"), "cite" );
	deepEqual( Stem("cited"), "cite" );
	deepEqual( Stem("cities"), "citi" );
	deepEqual( Stem("citigrade"), "citigrad" );
	deepEqual( Stem("citizen"), "citizen" );
	deepEqual( Stem("citizens"), "citizen" );
	deepEqual( Stem("city"), "citi" );
	deepEqual( Stem("cive"), "cive" );
	deepEqual( Stem("civil"), "civil" );
	deepEqual( Stem("civilian"), "civilian" );
	deepEqual( Stem("civilians"), "civilian" );
	deepEqual( Stem("civilised"), "civilis" );
	deepEqual( Stem("civilities"), "civil" );
	deepEqual( Stem("civility"), "civil" );
	deepEqual( Stem("civilization"), "civil" );
	deepEqual( Stem("civilized"), "civil" );
	deepEqual( Stem("civilly"), "civilli" );
	deepEqual( Stem("clad"), "clad" );
	deepEqual( Stem("cladonia"), "cladonia" );
	deepEqual( Stem("claim"), "claim" );
	deepEqual( Stem("claimant"), "claimant" );
	deepEqual( Stem("claimed"), "claim" );
	deepEqual( Stem("claiming"), "claim" );
	deepEqual( Stem("claims"), "claim" );
	deepEqual( Stem("clairvoyante"), "clairvoyant" );
	deepEqual( Stem("clambered"), "clamber" );
	deepEqual( Stem("clamorous"), "clamor" );
	deepEqual( Stem("clamour"), "clamour" );
	deepEqual( Stem("clamouring"), "clamour" );
	deepEqual( Stem("clandestinely"), "clandestin" );
	deepEqual( Stem("clang"), "clang" );
	deepEqual( Stem("clanging"), "clang" );
	deepEqual( Stem("clangour"), "clangour" );
	deepEqual( Stem("clank"), "clank" );
	deepEqual( Stem("clanking"), "clank" );
	deepEqual( Stem("clanks"), "clank" );
	deepEqual( Stem("clap"), "clap" );
	deepEqual( Stem("clapped"), "clap" );
	deepEqual( Stem("clapping"), "clap" );
	deepEqual( Stem("clappings"), "clap" );
	deepEqual( Stem("claps"), "clap" );
	deepEqual( Stem("clara"), "clara" );
	deepEqual( Stem("clare"), "clare" );
	deepEqual( Stem("claret"), "claret" );
	deepEqual( Stem("clarionet"), "clarionet" );
	deepEqual( Stem("clark"), "clark" );
	deepEqual( Stem("clarke"), "clark" );
	deepEqual( Stem("clash"), "clash" );
	deepEqual( Stem("clashed"), "clash" );
	deepEqual( Stem("clashes"), "clash" );
	deepEqual( Stem("clashing"), "clash" );
	deepEqual( Stem("clasp"), "clasp" );
	deepEqual( Stem("clasped"), "clasp" );
	deepEqual( Stem("clasping"), "clasp" );
	deepEqual( Stem("claspknife"), "claspknif" );
	deepEqual( Stem("clasps"), "clasp" );
	deepEqual( Stem("class"), "class" );
	deepEqual( Stem("classed"), "class" );
	deepEqual( Stem("classes"), "class" );
	deepEqual( Stem("classic"), "classic" );
	deepEqual( Stem("classical"), "classic" );
	deepEqual( Stem("classicality"), "classic" );
	deepEqual( Stem("classify"), "classifi" );
	deepEqual( Stem("clatter"), "clatter" );
	deepEqual( Stem("clattered"), "clatter" );
	deepEqual( Stem("clattering"), "clatter" );
	deepEqual( Stem("clause"), "claus" );
	deepEqual( Stem("clausen"), "clausen" );
	deepEqual( Stem("clauses"), "claus" );
	deepEqual( Stem("clavipes"), "clavip" );
	deepEqual( Stem("claw"), "claw" );
	deepEqual( Stem("clawing"), "claw" );
	deepEqual( Stem("claws"), "claw" );
	deepEqual( Stem("clay"), "clay" );
	deepEqual( Stem("clayey"), "clayey" );
	deepEqual( Stem("claying"), "clay" );
	deepEqual( Stem("clayver"), "clayver" );
	deepEqual( Stem("clean"), "clean" );
	deepEqual( Stem("cleaned"), "clean" );
	deepEqual( Stem("cleaner"), "cleaner" );
	deepEqual( Stem("cleanest"), "cleanest" );
	deepEqual( Stem("cleaning"), "clean" );
	deepEqual( Stem("cleanliest"), "cleanliest" );
	deepEqual( Stem("cleanliness"), "cleanli" );
	deepEqual( Stem("cleanly"), "clean" );
	deepEqual( Stem("cleans"), "clean" );
	deepEqual( Stem("cleanse"), "cleans" );
	deepEqual( Stem("cleanses"), "cleans" );
	deepEqual( Stem("cleansing"), "cleans" );
	deepEqual( Stem("clear"), "clear" );
	deepEqual( Stem("clearance"), "clearanc" );
	deepEqual( Stem("cleared"), "clear" );
	deepEqual( Stem("clearer"), "clearer" );
	deepEqual( Stem("clearest"), "clearest" );
	deepEqual( Stem("clearing"), "clear" );
	deepEqual( Stem("clearly"), "clear" );
	deepEqual( Stem("clearness"), "clear" );
	deepEqual( Stem("cleavage"), "cleavag" );
	deepEqual( Stem("cleft"), "cleft" );
	deepEqual( Stem("clefts"), "cleft" );
	deepEqual( Stem("clematis"), "clemati" );
	deepEqual( Stem("clemency"), "clemenc" );
	deepEqual( Stem("clench"), "clench" );
	deepEqual( Stem("clenched"), "clench" );
	deepEqual( Stem("clenches"), "clench" );
	deepEqual( Stem("clenching"), "clench" );
	deepEqual( Stem("cleopatra"), "cleopatra" );
	deepEqual( Stem("clergyman"), "clergyman" );
	deepEqual( Stem("clergymen"), "clergymen" );
	deepEqual( Stem("clerical"), "cleric" );
	deepEqual( Stem("clerk"), "clerk" );
	deepEqual( Stem("clerkenwell"), "clerkenwel" );
	deepEqual( Stem("clerkly"), "clerk" );
	deepEqual( Stem("clerks"), "clerk" );
	deepEqual( Stem("clerkship"), "clerkship" );
	deepEqual( Stem("cleveland"), "cleveland" );
	deepEqual( Stem("clever"), "clever" );
	deepEqual( Stem("cleverer"), "clever" );
	deepEqual( Stem("cleverest"), "cleverest" );
	deepEqual( Stem("cleverly"), "clever" );
	deepEqual( Stem("cleverness"), "clever" );
	deepEqual( Stem("click"), "click" );
	deepEqual( Stem("clicked"), "click" );
	deepEqual( Stem("clicking"), "click" );
	deepEqual( Stem("client"), "client" );
	deepEqual( Stem("clients"), "client" );
	deepEqual( Stem("cliff"), "cliff" );
	deepEqual( Stem("clifford"), "clifford" );
	deepEqual( Stem("cliffs"), "cliff" );
	deepEqual( Stem("clifton"), "clifton" );
	deepEqual( Stem("clima"), "clima" );
	deepEqual( Stem("climate"), "climat" );
	deepEqual( Stem("climates"), "climat" );
	deepEqual( Stem("climax"), "climax" );
	deepEqual( Stem("climb"), "climb" );
	deepEqual( Stem("climbed"), "climb" );
	deepEqual( Stem("climbers"), "climber" );
	deepEqual( Stem("climbing"), "climb" );
	deepEqual( Stem("clime"), "clime" );
	deepEqual( Stem("climes"), "clime" );
	deepEqual( Stem("clinched"), "clinch" );
	deepEqual( Stem("cling"), "cling" );
	deepEqual( Stem("clinging"), "cling" );
	deepEqual( Stem("clings"), "cling" );
	deepEqual( Stem("clink"), "clink" );
	deepEqual( Stem("clinked"), "clink" );
	deepEqual( Stem("clinking"), "clink" );
	deepEqual( Stem("clip"), "clip" );
	deepEqual( Stem("clipped"), "clip" );
	deepEqual( Stem("clippers"), "clipper" );
	deepEqual( Stem("clipping"), "clip" );
	deepEqual( Stem("cliquot"), "cliquot" );
	deepEqual( Stem("clks"), "clks" );
	deepEqual( Stem("cloak"), "cloak" );
	deepEqual( Stem("cloaks"), "cloak" );
	deepEqual( Stem("clock"), "clock" );
	deepEqual( Stem("clocks"), "clock" );
	deepEqual( Stem("clods"), "clod" );
	deepEqual( Stem("cloe"), "cloe" );
	deepEqual( Stem("clogged"), "clog" );
	deepEqual( Stem("cloister"), "cloister" );
	deepEqual( Stem("cloistered"), "cloister" );
	deepEqual( Stem("cloisterly"), "cloister" );
	deepEqual( Stem("cloisters"), "cloister" );
	deepEqual( Stem("close"), "close" );
	deepEqual( Stem("closed"), "close" );
	deepEqual( Stem("closely"), "close" );
	deepEqual( Stem("closeness"), "close" );
	deepEqual( Stem("closer"), "closer" );
	deepEqual( Stem("closes"), "close" );
	deepEqual( Stem("closest"), "closest" );
	deepEqual( Stem("closet"), "closet" );
	deepEqual( Stem("closeted"), "closet" );
	deepEqual( Stem("closets"), "closet" );
	deepEqual( Stem("closing"), "close" );
	deepEqual( Stem("cloth"), "cloth" );
	deepEqual( Stem("clothe"), "cloth" );
	deepEqual( Stem("clothed"), "cloth" );
	deepEqual( Stem("clother"), "clother" );
	deepEqual( Stem("clothes"), "cloth" );
	deepEqual( Stem("clothing"), "cloth" );
	deepEqual( Stem("cloths"), "cloth" );
	deepEqual( Stem("clotted"), "clot" );
	deepEqual( Stem("cloud"), "cloud" );
	deepEqual( Stem("clouded"), "cloud" );
	deepEqual( Stem("cloudily"), "cloudili" );
	deepEqual( Stem("cloudless"), "cloudless" );
	deepEqual( Stem("clouds"), "cloud" );
	deepEqual( Stem("cloudy"), "cloudi" );
	deepEqual( Stem("clout"), "clout" );
	deepEqual( Stem("clove"), "clove" );
	deepEqual( Stem("clover"), "clover" );
	deepEqual( Stem("cloves"), "clove" );
	deepEqual( Stem("clown"), "clown" );
	deepEqual( Stem("clt"), "clt" );
	deepEqual( Stem("club"), "club" );
	deepEqual( Stem("clubs"), "club" );
	deepEqual( Stem("cluck"), "cluck" );
	deepEqual( Stem("clue"), "clue" );
	deepEqual( Stem("clump"), "clump" );
	deepEqual( Stem("clumps"), "clump" );
	deepEqual( Stem("clumsily"), "clumsili" );
	deepEqual( Stem("clumsiness"), "clumsi" );
	deepEqual( Stem("clumsy"), "clumsi" );
	deepEqual( Stem("clung"), "clung" );
	deepEqual( Stem("cluskie"), "cluski" );
	deepEqual( Stem("cluster"), "cluster" );
	deepEqual( Stem("clustered"), "cluster" );
	deepEqual( Stem("clustering"), "cluster" );
	deepEqual( Stem("clusters"), "cluster" );
	deepEqual( Stem("clutch"), "clutch" );
	deepEqual( Stem("clutched"), "clutch" );
	deepEqual( Stem("clutches"), "clutch" );
	deepEqual( Stem("clutching"), "clutch" );
	deepEqual( Stem("clytia"), "clytia" );
	deepEqual( Stem("co"), "co" );
	deepEqual( Stem("coach"), "coach" );
	deepEqual( Stem("coaches"), "coach" );
	deepEqual( Stem("coaching"), "coach" );
	deepEqual( Stem("coachmaker"), "coachmak" );
	deepEqual( Stem("coachman"), "coachman" );
	deepEqual( Stem("coachmen"), "coachmen" );
	deepEqual( Stem("coachyard"), "coachyard" );
	deepEqual( Stem("coadjutor"), "coadjutor" );
	deepEqual( Stem("coal"), "coal" );
	deepEqual( Stem("coalesced"), "coalesc" );
	deepEqual( Stem("coalescing"), "coalesc" );
	deepEqual( Stem("coalition"), "coalit" );
	deepEqual( Stem("coalitions"), "coalit" );
	deepEqual( Stem("coals"), "coal" );
	deepEqual( Stem("coalworth"), "coalworth" );
	deepEqual( Stem("coarse"), "coars" );
	deepEqual( Stem("coarsely"), "coars" );
	deepEqual( Stem("coarsened"), "coarsen" );
	deepEqual( Stem("coarseness"), "coars" );
	deepEqual( Stem("coarser"), "coarser" );
	deepEqual( Stem("coarsest"), "coarsest" );
	deepEqual( Stem("coast"), "coast" );
	deepEqual( Stem("coasts"), "coast" );
	deepEqual( Stem("coat"), "coat" );
	deepEqual( Stem("coated"), "coat" );
	deepEqual( Stem("coating"), "coat" );
	deepEqual( Stem("coatings"), "coat" );
	deepEqual( Stem("coats"), "coat" );
	deepEqual( Stem("coavins"), "coavin" );
	deepEqual( Stem("coavinses"), "coavins" );
	deepEqual( Stem("coaxed"), "coax" );
	deepEqual( Stem("coaxin"), "coaxin" );
	deepEqual( Stem("coaxing"), "coax" );
	deepEqual( Stem("coaxingly"), "coax" );
	deepEqual( Stem("cob"), "cob" );
	deepEqual( Stem("cobbey"), "cobbey" );
	deepEqual( Stem("cobbler"), "cobbler" );
	deepEqual( Stem("cobblesborough"), "cobblesborough" );
	deepEqual( Stem("coburg"), "coburg" );
	deepEqual( Stem("cobweb"), "cobweb" );
	deepEqual( Stem("cobwebs"), "cobweb" );
	deepEqual( Stem("cochlogena"), "cochlogena" );
	deepEqual( Stem("cochrane"), "cochran" );
	deepEqual( Stem("cock"), "cock" );
	deepEqual( Stem("cockaded"), "cockad" );
	deepEqual( Stem("cockades"), "cockad" );
	deepEqual( Stem("cockatoo"), "cockatoo" );
	deepEqual( Stem("cocked"), "cock" );
	deepEqual( Stem("cocking"), "cock" );
	deepEqual( Stem("cockney"), "cockney" );
	deepEqual( Stem("cockroaches"), "cockroach" );
	deepEqual( Stem("coco"), "coco" );
	deepEqual( Stem("cocoa"), "cocoa" );
	deepEqual( Stem("cocoon"), "cocoon" );
	deepEqual( Stem("cocos"), "coco" );
	deepEqual( Stem("cod"), "cod" );
	deepEqual( Stem("coddle"), "coddl" );
	deepEqual( Stem("coddled"), "coddl" );
	deepEqual( Stem("coddling"), "coddl" );
	deepEqual( Stem("code"), "code" );
	deepEqual( Stem("codes"), "code" );
	deepEqual( Stem("codger"), "codger" );
	deepEqual( Stem("codicil"), "codicil" );
	deepEqual( Stem("codified"), "codifi" );
	deepEqual( Stem("codlings"), "codl" );
	deepEqual( Stem("coelum"), "coelum" );
	deepEqual( Stem("coerced"), "coerc" );
	deepEqual( Stem("coercive"), "coerciv" );
	deepEqual( Stem("coeur"), "coeur" );
	deepEqual( Stem("coeval"), "coeval" );
	deepEqual( Stem("coextensive"), "coextens" );
	deepEqual( Stem("coffee"), "coffe" );
	deepEqual( Stem("coffeehouse"), "coffeehous" );
	deepEqual( Stem("coffers"), "coffer" );
	deepEqual( Stem("coffin"), "coffin" );
	deepEqual( Stem("coffins"), "coffin" );
	deepEqual( Stem("cogitated"), "cogit" );
	deepEqual( Stem("cogitating"), "cogit" );
	deepEqual( Stem("cogitation"), "cogit" );
	deepEqual( Stem("cogitations"), "cogit" );
	deepEqual( Stem("cognate"), "cognat" );
	deepEqual( Stem("cognisant"), "cognis" );
	deepEqual( Stem("cognizant"), "cogniz" );
	deepEqual( Stem("cognovits"), "cognovit" );
	deepEqual( Stem("cogs"), "cog" );
	deepEqual( Stem("coherence"), "coher" );
	deepEqual( Stem("coherent"), "coher" );
	deepEqual( Stem("cohesion"), "cohes" );
	deepEqual( Stem("coil"), "coil" );
	deepEqual( Stem("coiled"), "coil" );
	deepEqual( Stem("coils"), "coil" );
	deepEqual( Stem("coin"), "coin" );
	deepEqual( Stem("coinage"), "coinag" );
	deepEqual( Stem("coincide"), "coincid" );
	deepEqual( Stem("coincided"), "coincid" );
	deepEqual( Stem("coincidence"), "coincid" );
	deepEqual( Stem("coincidences"), "coincid" );
	deepEqual( Stem("coincides"), "coincid" );
	deepEqual( Stem("coiner"), "coiner" );
	deepEqual( Stem("coiners"), "coiner" );
	deepEqual( Stem("coining"), "coin" );
	deepEqual( Stem("coins"), "coin" );
	deepEqual( Stem("coinstantaneous"), "coinstantan" );
	deepEqual( Stem("coinstantaneously"), "coinstantan" );
	deepEqual( Stem("coke"), "coke" );
	deepEqual( Stem("cold"), "cold" );
	deepEqual( Stem("colder"), "colder" );
	deepEqual( Stem("coldest"), "coldest" );
	deepEqual( Stem("coldly"), "cold" );
	deepEqual( Stem("coldness"), "cold" );
	deepEqual( Stem("coldnesses"), "cold" );
	deepEqual( Stem("colds"), "cold" );
	deepEqual( Stem("coleman"), "coleman" );
	deepEqual( Stem("coleoptera"), "coleoptera" );
	deepEqual( Stem("coleridge"), "coleridg" );
	deepEqual( Stem("colias"), "colia" );
	deepEqual( Stem("colla"), "colla" );
	deepEqual( Stem("collapse"), "collaps" );
	deepEqual( Stem("collapsed"), "collaps" );
	deepEqual( Stem("collapses"), "collaps" );
	deepEqual( Stem("collar"), "collar" );
	deepEqual( Stem("collars"), "collar" );
	deepEqual( Stem("collateral"), "collater" );
	deepEqual( Stem("collation"), "collat" );
	deepEqual( Stem("colleague"), "colleagu" );
	deepEqual( Stem("colleagues"), "colleagu" );
	deepEqual( Stem("collect"), "collect" );
	deepEqual( Stem("collected"), "collect" );
	deepEqual( Stem("collectedly"), "collect" );
	deepEqual( Stem("collecting"), "collect" );
	deepEqual( Stem("collection"), "collect" );
	deepEqual( Stem("collections"), "collect" );
	deepEqual( Stem("collectively"), "collect" );
	deepEqual( Stem("collector"), "collector" );
	deepEqual( Stem("collectors"), "collector" );
	deepEqual( Stem("collects"), "collect" );
	deepEqual( Stem("college"), "colleg" );
	deepEqual( Stem("collier"), "collier" );
	deepEqual( Stem("collieries"), "collieri" );
	deepEqual( Stem("colliers"), "collier" );
	deepEqual( Stem("colliery"), "collieri" );
	deepEqual( Stem("collision"), "collis" );
	deepEqual( Stem("collnet"), "collnet" );
	deepEqual( Stem("collnett"), "collnett" );
	deepEqual( Stem("colloquial"), "colloqui" );
	deepEqual( Stem("colloquially"), "colloqui" );
	deepEqual( Stem("colloquy"), "colloquy" );
	deepEqual( Stem("colman"), "colman" );
	deepEqual( Stem("colnett"), "colnett" );
	deepEqual( Stem("cologne"), "cologn" );
	deepEqual( Stem("colonel"), "colonel" );
	deepEqual( Stem("colonia"), "colonia" );
	deepEqual( Stem("colonies"), "coloni" );
	deepEqual( Stem("colonist"), "colonist" );
	deepEqual( Stem("colonists"), "colonist" );
	deepEqual( Stem("colonize"), "colon" );
	deepEqual( Stem("colonized"), "colon" );
	deepEqual( Stem("colonnade"), "colonnad" );
	deepEqual( Stem("colonnades"), "colonnad" );
	deepEqual( Stem("colony"), "coloni" );
	deepEqual( Stem("color"), "color" );
	deepEqual( Stem("colorado"), "colorado" );
	deepEqual( Stem("colored"), "color" );
	deepEqual( Stem("colossal"), "coloss" );
	deepEqual( Stem("colour"), "colour" );
	deepEqual( Stem("coloured"), "colour" );
	deepEqual( Stem("colouring"), "colour" );
	deepEqual( Stem("colourless"), "colourless" );
	deepEqual( Stem("colours"), "colour" );
	deepEqual( Stem("colt"), "colt" );
	deepEqual( Stem("colts"), "colt" );
	deepEqual( Stem("columbus"), "columbus" );
	deepEqual( Stem("column"), "column" );
	deepEqual( Stem("columnar"), "columnar" );
	deepEqual( Stem("columns"), "column" );
	deepEqual( Stem("colymbetes"), "colymbet" );
	deepEqual( Stem("com"), "com" );
	deepEqual( Stem("comb"), "comb" );
	deepEqual( Stem("combat"), "combat" );
	deepEqual( Stem("combatants"), "combat" );
	deepEqual( Stem("combative"), "combat" );
	deepEqual( Stem("combativeness"), "combat" );
	deepEqual( Stem("combats"), "combat" );
	deepEqual( Stem("combatted"), "combat" );
	deepEqual( Stem("combed"), "comb" );
	deepEqual( Stem("combination"), "combin" );
	deepEqual( Stem("combinations"), "combin" );
	deepEqual( Stem("combine"), "combin" );
	deepEqual( Stem("combined"), "combin" );
	deepEqual( Stem("combines"), "combin" );
	deepEqual( Stem("combing"), "comb" );
	deepEqual( Stem("combining"), "combin" );
	deepEqual( Stem("combs"), "comb" );
	deepEqual( Stem("combusted"), "combust" );
	deepEqual( Stem("combusting"), "combust" );
	deepEqual( Stem("combustion"), "combust" );
	deepEqual( Stem("come"), "come" );
	deepEqual( Stem("comedies"), "comedi" );
	deepEqual( Stem("comedy"), "comedi" );
	deepEqual( Stem("comeliness"), "comeli" );
	deepEqual( Stem("comely"), "come" );
	deepEqual( Stem("comer"), "comer" );
	deepEqual( Stem("comers"), "comer" );
	deepEqual( Stem("comes"), "come" );
	deepEqual( Stem("comestibles"), "comest" );
	deepEqual( Stem("cometh"), "cometh" );
	deepEqual( Stem("comfort"), "comfort" );
	deepEqual( Stem("comfortable"), "comfort" );
	deepEqual( Stem("comfortabler"), "comfortabl" );
	deepEqual( Stem("comfortablest"), "comfortablest" );
	deepEqual( Stem("comfortably"), "comfort" );
	deepEqual( Stem("comforted"), "comfort" );
	deepEqual( Stem("comforter"), "comfort" );
	deepEqual( Stem("comforters"), "comfort" );
	deepEqual( Stem("comforting"), "comfort" );
	deepEqual( Stem("comfortingly"), "comfort" );
	deepEqual( Stem("comfortless"), "comfortless" );
	deepEqual( Stem("comforts"), "comfort" );
	deepEqual( Stem("comic"), "comic" );
	deepEqual( Stem("comical"), "comic" );
	deepEqual( Stem("comicality"), "comic" );
	deepEqual( Stem("comin"), "comin" );
	deepEqual( Stem("coming"), "come" );
	deepEqual( Stem("comings"), "come" );
	deepEqual( Stem("command"), "command" );
	deepEqual( Stem("commandant"), "command" );
	deepEqual( Stem("commanded"), "command" );
	deepEqual( Stem("commander"), "command" );
	deepEqual( Stem("commanding"), "command" );
	deepEqual( Stem("commands"), "command" );
	deepEqual( Stem("comme"), "comm" );
	deepEqual( Stem("commemorate"), "commemor" );
	deepEqual( Stem("commemorated"), "commemor" );
	deepEqual( Stem("commemoration"), "commemor" );
	deepEqual( Stem("commemorative"), "commemor" );
	deepEqual( Stem("commence"), "commenc" );
	deepEqual( Stem("commenced"), "commenc" );
	deepEqual( Stem("commencement"), "commenc" );
	deepEqual( Stem("commencements"), "commenc" );
	deepEqual( Stem("commences"), "commenc" );
	deepEqual( Stem("commencing"), "commenc" );
	deepEqual( Stem("commend"), "commend" );
	deepEqual( Stem("commendable"), "commend" );
	deepEqual( Stem("commendation"), "commend" );
	deepEqual( Stem("commendations"), "commend" );
	deepEqual( Stem("commended"), "commend" );
	deepEqual( Stem("commending"), "commend" );
	deepEqual( Stem("commendingly"), "commend" );
	deepEqual( Stem("commends"), "commend" );
	deepEqual( Stem("comment"), "comment" );
	deepEqual( Stem("commentary"), "commentari" );
	deepEqual( Stem("commented"), "comment" );
	deepEqual( Stem("commenting"), "comment" );
	deepEqual( Stem("comments"), "comment" );
	deepEqual( Stem("commerce"), "commerc" );
	deepEqual( Stem("commercial"), "commerci" );
	deepEqual( Stem("commiserating"), "commiser" );
	deepEqual( Stem("commiseration"), "commiser" );
	deepEqual( Stem("commissariat"), "commissariat" );
	deepEqual( Stem("commission"), "commiss" );
	deepEqual( Stem("commissioned"), "commiss" );
	deepEqual( Stem("commissioner"), "commission" );
	deepEqual( Stem("commissioners"), "commission" );
	deepEqual( Stem("commissions"), "commiss" );
	deepEqual( Stem("commit"), "commit" );
	deepEqual( Stem("commits"), "commit" );
	deepEqual( Stem("committed"), "commit" );
	deepEqual( Stem("committee"), "committe" );
	deepEqual( Stem("committees"), "committe" );
	deepEqual( Stem("committing"), "commit" );
	deepEqual( Stem("commixta"), "commixta" );
	deepEqual( Stem("commo"), "commo" );
	deepEqual( Stem("commodious"), "commodi" );
	deepEqual( Stem("commodities"), "commod" );
	deepEqual( Stem("commodity"), "commod" );
	deepEqual( Stem("commodore"), "commodor" );
	deepEqual( Stem("common"), "common" );
	deepEqual( Stem("commoner"), "common" );
	deepEqual( Stem("commoners"), "common" );
	deepEqual( Stem("commonest"), "commonest" );
	deepEqual( Stem("commonl"), "commonl" );
	deepEqual( Stem("commonly"), "common" );
	deepEqual( Stem("commonplace"), "commonplac" );
	deepEqual( Stem("commonplaces"), "commonplac" );
	deepEqual( Stem("commons"), "common" );
	deepEqual( Stem("commonwealth"), "commonwealth" );
	deepEqual( Stem("commotion"), "commot" );
	deepEqual( Stem("commotions"), "commot" );
	deepEqual( Stem("commttted"), "commtt" );
	deepEqual( Stem("commune"), "commune" );
	deepEqual( Stem("communicant"), "communic" );
	deepEqual( Stem("communicate"), "communic" );
	deepEqual( Stem("communicated"), "communic" );
	deepEqual( Stem("communicates"), "communic" );
	deepEqual( Stem("communicating"), "communic" );
	deepEqual( Stem("communication"), "communic" );
	deepEqual( Stem("communications"), "communic" );
	deepEqual( Stem("communicative"), "communic" );
	deepEqual( Stem("communing"), "commune" );
	deepEqual( Stem("communion"), "communion" );
	deepEqual( Stem("communism"), "communism" );
	deepEqual( Stem("communities"), "communiti" );
	deepEqual( Stem("community"), "communiti" );
	deepEqual( Stem("commuted"), "commut" );
	deepEqual( Stem("commuuity"), "commuuiti" );
	deepEqual( Stem("como"), "como" );
	deepEqual( Stem("compact"), "compact" );
	deepEqual( Stem("compactness"), "compact" );
	deepEqual( Stem("compacts"), "compact" );
	deepEqual( Stem("companies"), "compani" );
	deepEqual( Stem("companion"), "companion" );
	deepEqual( Stem("companions"), "companion" );
	deepEqual( Stem("companionship"), "companionship" );
	deepEqual( Stem("company"), "compani" );
	deepEqual( Stem("comparable"), "compar" );
	deepEqual( Stem("comparative"), "compar" );
	deepEqual( Stem("comparatively"), "compar" );
	deepEqual( Stem("compare"), "compar" );
	deepEqual( Stem("compared"), "compar" );
	deepEqual( Stem("compares"), "compar" );
	deepEqual( Stem("comparing"), "compar" );
	deepEqual( Stem("comparison"), "comparison" );
	deepEqual( Stem("comparisons"), "comparison" );
	deepEqual( Stem("compartments"), "compart" );
	deepEqual( Stem("compass"), "compass" );
	deepEqual( Stem("compassion"), "compass" );
	deepEqual( Stem("compassionate"), "compassion" );
	deepEqual( Stem("compassionated"), "compassion" );
	deepEqual( Stem("compassionately"), "compassion" );
	deepEqual( Stem("compassionating"), "compassion" );
	deepEqual( Stem("compatible"), "compat" );
	deepEqual( Stem("compatriots"), "compatriot" );
	deepEqual( Stem("compel"), "compel" );
	deepEqual( Stem("compelled"), "compel" );
	deepEqual( Stem("compelling"), "compel" );
	deepEqual( Stem("compels"), "compel" );
	deepEqual( Stem("compensate"), "compens" );
	deepEqual( Stem("compensated"), "compens" );
	deepEqual( Stem("compensating"), "compens" );
	deepEqual( Stem("compensation"), "compens" );
	deepEqual( Stem("compete"), "compet" );
	deepEqual( Stem("competency"), "compet" );
	deepEqual( Stem("competent"), "compet" );
	deepEqual( Stem("competitions"), "competit" );
	deepEqual( Stem("competitor"), "competitor" );
	deepEqual( Stem("compilers"), "compil" );
	deepEqual( Stem("complacency"), "complac" );
	deepEqual( Stem("complacent"), "complac" );
	deepEqual( Stem("complacently"), "complac" );
	deepEqual( Stem("complain"), "complain" );
	deepEqual( Stem("complained"), "complain" );
	deepEqual( Stem("complaining"), "complain" );
	deepEqual( Stem("complainings"), "complain" );
	deepEqual( Stem("complains"), "complain" );
	deepEqual( Stem("complaint"), "complaint" );
	deepEqual( Stem("complaints"), "complaint" );
	deepEqual( Stem("complanata"), "complanata" );
	deepEqual( Stem("complement"), "complement" );
	deepEqual( Stem("complete"), "complet" );
	deepEqual( Stem("completed"), "complet" );
	deepEqual( Stem("completel"), "completel" );
	deepEqual( Stem("completely"), "complet" );
	deepEqual( Stem("completeness"), "complet" );
	deepEqual( Stem("completes"), "complet" );
	deepEqual( Stem("completest"), "completest" );
	deepEqual( Stem("completing"), "complet" );
	deepEqual( Stem("completion"), "complet" );
	deepEqual( Stem("complex"), "complex" );
	deepEqual( Stem("complexion"), "complexion" );
	deepEqual( Stem("complexioned"), "complexion" );
	deepEqual( Stem("complexions"), "complexion" );
	deepEqual( Stem("compliance"), "complianc" );
	deepEqual( Stem("complicated"), "complic" );
	deepEqual( Stem("complication"), "complic" );
	deepEqual( Stem("complications"), "complic" );
	deepEqual( Stem("complied"), "compli" );
	deepEqual( Stem("complies"), "compli" );
	deepEqual( Stem("compliment"), "compliment" );
	deepEqual( Stem("complimentary"), "complimentari" );
	deepEqual( Stem("complimented"), "compliment" );
	deepEqual( Stem("complimenting"), "compliment" );
	deepEqual( Stem("compliments"), "compliment" );
	deepEqual( Stem("comply"), "compli" );
	deepEqual( Stem("complying"), "compli" );
	deepEqual( Stem("compn"), "compn" );
	deepEqual( Stem("component"), "compon" );
	deepEqual( Stem("compose"), "compos" );
	deepEqual( Stem("composed"), "compos" );
	deepEqual( Stem("composedly"), "compos" );
	deepEqual( Stem("composer"), "compos" );
	deepEqual( Stem("composes"), "compos" );
	deepEqual( Stem("composing"), "compos" );
	deepEqual( Stem("compositae"), "composita" );
	deepEqual( Stem("composite"), "composit" );
	deepEqual( Stem("composition"), "composit" );
	deepEqual( Stem("compositions"), "composit" );
	deepEqual( Stem("composure"), "composur" );
	deepEqual( Stem("compound"), "compound" );
	deepEqual( Stem("compounded"), "compound" );
	deepEqual( Stem("comprehen"), "comprehen" );
	deepEqual( Stem("comprehend"), "comprehend" );
	deepEqual( Stem("comprehended"), "comprehend" );
	deepEqual( Stem("comprehending"), "comprehend" );
	deepEqual( Stem("comprehends"), "comprehend" );
	deepEqual( Stem("comprehensible"), "comprehens" );
	deepEqual( Stem("comprehension"), "comprehens" );
	deepEqual( Stem("comprehensive"), "comprehens" );
	deepEqual( Stem("compressed"), "compress" );
	deepEqual( Stem("compressible"), "compress" );
	deepEqual( Stem("compressing"), "compress" );
	deepEqual( Stem("compression"), "compress" );
	deepEqual( Stem("comprise"), "compris" );
	deepEqual( Stem("comprised"), "compris" );
	deepEqual( Stem("comprises"), "compris" );
	deepEqual( Stem("comprising"), "compris" );
	deepEqual( Stem("compromise"), "compromis" );
	deepEqual( Stem("compromised"), "compromis" );
	deepEqual( Stem("compromises"), "compromis" );
	deepEqual( Stem("compromising"), "compromis" );
	deepEqual( Stem("compter"), "compter" );
	deepEqual( Stem("comptes"), "compt" );
	deepEqual( Stem("compulsion"), "compuls" );
	deepEqual( Stem("compulsory"), "compulsori" );
	deepEqual( Stem("compunction"), "compunct" );
	deepEqual( Stem("computation"), "comput" );
	deepEqual( Stem("comrade"), "comrad" );
	deepEqual( Stem("comrades"), "comrad" );
	deepEqual( Stem("con"), "con" );
	deepEqual( Stem("concatenation"), "concaten" );
	deepEqual( Stem("concave"), "concav" );
	deepEqual( Stem("conceal"), "conceal" );
	deepEqual( Stem("concealed"), "conceal" );
	deepEqual( Stem("concealing"), "conceal" );
	deepEqual( Stem("concealment"), "conceal" );
	deepEqual( Stem("concealments"), "conceal" );
	deepEqual( Stem("concebida"), "concebida" );
	deepEqual( Stem("concede"), "conced" );
	deepEqual( Stem("conceded"), "conced" );
	deepEqual( Stem("concedes"), "conced" );
	deepEqual( Stem("conceit"), "conceit" );
	deepEqual( Stem("conceited"), "conceit" );
	deepEqual( Stem("conceivable"), "conceiv" );
	deepEqual( Stem("conceive"), "conceiv" );
	deepEqual( Stem("conceived"), "conceiv" );
	deepEqual( Stem("conceives"), "conceiv" );
	deepEqual( Stem("conceiving"), "conceiv" );
	deepEqual( Stem("concentrate"), "concentr" );
	deepEqual( Stem("concentrated"), "concentr" );
	deepEqual( Stem("concentrating"), "concentr" );
	deepEqual( Stem("concentration"), "concentr" );
	deepEqual( Stem("concepcion"), "concepcion" );
	deepEqual( Stem("conception"), "concept" );
	deepEqual( Stem("conceptions"), "concept" );
	deepEqual( Stem("concern"), "concern" );
	deepEqual( Stem("concerned"), "concern" );
	deepEqual( Stem("concerning"), "concern" );
	deepEqual( Stem("concerns"), "concern" );
	deepEqual( Stem("concert"), "concert" );
	deepEqual( Stem("concerted"), "concert" );
	deepEqual( Stem("concertina"), "concertina" );
	deepEqual( Stem("concerts"), "concert" );
	deepEqual( Stem("concession"), "concess" );
	deepEqual( Stem("concessions"), "concess" );
	deepEqual( Stem("conchalee"), "conchale" );
	deepEqual( Stem("conchas"), "concha" );
	deepEqual( Stem("conchological"), "concholog" );
	deepEqual( Stem("conciliate"), "concili" );
	deepEqual( Stem("conciliated"), "concili" );
	deepEqual( Stem("conciliation"), "concili" );
	deepEqual( Stem("conciliations"), "concili" );
	deepEqual( Stem("conciliatory"), "conciliatori" );
	deepEqual( Stem("concise"), "concis" );
	deepEqual( Stem("conclave"), "conclav" );
	deepEqual( Stem("conclaves"), "conclav" );
	deepEqual( Stem("conclude"), "conclud" );
	deepEqual( Stem("concluded"), "conclud" );
	deepEqual( Stem("concludes"), "conclud" );
	deepEqual( Stem("concluding"), "conclud" );
	deepEqual( Stem("conclusion"), "conclus" );
	deepEqual( Stem("conclusions"), "conclus" );
	deepEqual( Stem("conclusive"), "conclus" );
	deepEqual( Stem("conclusively"), "conclus" );
	deepEqual( Stem("concoct"), "concoct" );
	deepEqual( Stem("concocted"), "concoct" );
	deepEqual( Stem("concord"), "concord" );
	deepEqual( Stem("concourse"), "concours" );
	deepEqual( Stem("concretions"), "concret" );
	deepEqual( Stem("concubine"), "concubin" );
	deepEqual( Stem("concur"), "concur" );
	deepEqual( Stem("concurrence"), "concurr" );
	deepEqual( Stem("concurrent"), "concurr" );
	deepEqual( Stem("concurs"), "concur" );
	deepEqual( Stem("condemn"), "condemn" );
	deepEqual( Stem("condemnation"), "condemn" );
	deepEqual( Stem("condemned"), "condemn" );
	deepEqual( Stem("condemning"), "condemn" );
	deepEqual( Stem("condemns"), "condemn" );
	deepEqual( Stem("condense"), "condens" );
	deepEqual( Stem("condensed"), "condens" );
	deepEqual( Stem("condescend"), "condescend" );
	deepEqual( Stem("condescended"), "condescend" );
	deepEqual( Stem("condescending"), "condescend" );
	deepEqual( Stem("condescendingly"), "condescend" );
	deepEqual( Stem("condescends"), "condescend" );
	deepEqual( Stem("condescension"), "condescens" );
	deepEqual( Stem("condescent"), "condesc" );
	deepEqual( Stem("condeseending"), "condeseend" );
	deepEqual( Stem("condign"), "condign" );
	deepEqual( Stem("condition"), "condit" );
	deepEqual( Stem("conditional"), "condit" );
	deepEqual( Stem("conditioned"), "condit" );
	deepEqual( Stem("conditions"), "condit" );
	deepEqual( Stem("condole"), "condol" );
	deepEqual( Stem("condoled"), "condol" );
	deepEqual( Stem("condolence"), "condol" );
	deepEqual( Stem("condolences"), "condol" );
	deepEqual( Stem("condor"), "condor" );
	deepEqual( Stem("condors"), "condor" );
	deepEqual( Stem("conduce"), "conduc" );
	deepEqual( Stem("conducive"), "conduc" );
	deepEqual( Stem("conduct"), "conduct" );
	deepEqual( Stem("conducted"), "conduct" );
	deepEqual( Stem("conducting"), "conduct" );
	deepEqual( Stem("conductor"), "conductor" );
	deepEqual( Stem("conductors"), "conductor" );
	deepEqual( Stem("conductress"), "conductress" );
	deepEqual( Stem("conducts"), "conduct" );
	deepEqual( Stem("conduits"), "conduit" );
	deepEqual( Stem("cone"), "cone" );
	deepEqual( Stem("conejos"), "conejo" );
	deepEqual( Stem("cones"), "cone" );
	deepEqual( Stem("confabulation"), "confabul" );
	deepEqual( Stem("confabulations"), "confabul" );
	deepEqual( Stem("confectioner"), "confection" );
	deepEqual( Stem("confederate"), "confeder" );
	deepEqual( Stem("confederates"), "confeder" );
	deepEqual( Stem("confer"), "confer" );
	deepEqual( Stem("conference"), "confer" );
	deepEqual( Stem("conferences"), "confer" );
	deepEqual( Stem("conferred"), "confer" );
	deepEqual( Stem("conferring"), "confer" );
	deepEqual( Stem("confers"), "confer" );
	deepEqual( Stem("confervae"), "conferva" );
	deepEqual( Stem("confess"), "confess" );
	deepEqual( Stem("confessed"), "confess" );
	deepEqual( Stem("confessedly"), "confess" );
	deepEqual( Stem("confessing"), "confess" );
	deepEqual( Stem("confession"), "confess" );
	deepEqual( Stem("confessions"), "confess" );
	deepEqual( Stem("confessor"), "confessor" );
	deepEqual( Stem("confidante"), "confidant" );
	deepEqual( Stem("confidantes"), "confidant" );
	deepEqual( Stem("confide"), "confid" );
	deepEqual( Stem("confided"), "confid" );
	deepEqual( Stem("confidence"), "confid" );
	deepEqual( Stem("confidences"), "confid" );
	deepEqual( Stem("confident"), "confid" );
	deepEqual( Stem("confidential"), "confidenti" );
	deepEqual( Stem("confidentially"), "confidenti" );
	deepEqual( Stem("confidently"), "confid" );
	deepEqual( Stem("confides"), "confid" );
	deepEqual( Stem("confiding"), "confid" );
	deepEqual( Stem("confidingly"), "confid" );
	deepEqual( Stem("configuration"), "configur" );
	deepEqual( Stem("confine"), "confin" );
	deepEqual( Stem("confined"), "confin" );
	deepEqual( Stem("confinement"), "confin" );
	deepEqual( Stem("confines"), "confin" );
	deepEqual( Stem("confining"), "confin" );
	deepEqual( Stem("confirm"), "confirm" );
	deepEqual( Stem("confirmation"), "confirm" );
	deepEqual( Stem("confirmatory"), "confirmatori" );
	deepEqual( Stem("confirmed"), "confirm" );
	deepEqual( Stem("confirming"), "confirm" );
	deepEqual( Stem("confirms"), "confirm" );
	deepEqual( Stem("confiscate"), "confisc" );
	deepEqual( Stem("confiscation"), "confisc" );
	deepEqual( Stem("conflagrations"), "conflagr" );
	deepEqual( Stem("conflict"), "conflict" );
	deepEqual( Stem("conflicting"), "conflict" );
	deepEqual( Stem("conform"), "conform" );
	deepEqual( Stem("conforming"), "conform" );
	deepEqual( Stem("conformity"), "conform" );
	deepEqual( Stem("confound"), "confound" );
	deepEqual( Stem("confounded"), "confound" );
	deepEqual( Stem("confoundedly"), "confound" );
	deepEqual( Stem("confounding"), "confound" );
	deepEqual( Stem("confront"), "confront" );
	deepEqual( Stem("confronted"), "confront" );
	deepEqual( Stem("confronting"), "confront" );
	deepEqual( Stem("confronts"), "confront" );
	deepEqual( Stem("confuse"), "confus" );
	deepEqual( Stem("confused"), "confus" );
	deepEqual( Stem("confusedly"), "confus" );
	deepEqual( Stem("confuses"), "confus" );
	deepEqual( Stem("confusing"), "confus" );
	deepEqual( Stem("confusion"), "confus" );
	deepEqual( Stem("confute"), "confut" );
	deepEqual( Stem("confuting"), "confut" );
	deepEqual( Stem("congealed"), "congeal" );
	deepEqual( Stem("congelation"), "congel" );
	deepEqual( Stem("congeners"), "congen" );
	deepEqual( Stem("congenial"), "congeni" );
	deepEqual( Stem("congenially"), "congeni" );
	deepEqual( Stem("conglomerate"), "conglomer" );
	deepEqual( Stem("conglomeration"), "conglomer" );
	deepEqual( Stem("congo"), "congo" );
	deepEqual( Stem("congratulate"), "congratul" );
	deepEqual( Stem("congratulated"), "congratul" );
	deepEqual( Stem("congratulating"), "congratul" );
	deepEqual( Stem("congratulation"), "congratul" );
	deepEqual( Stem("congratulations"), "congratul" );
	deepEqual( Stem("congratulatory"), "congratulatori" );
	deepEqual( Stem("congregate"), "congreg" );
	deepEqual( Stem("congregated"), "congreg" );
	deepEqual( Stem("congregation"), "congreg" );
	deepEqual( Stem("congruous"), "congruous" );
	deepEqual( Stem("conica"), "conica" );
	deepEqual( Stem("conical"), "conic" );
	deepEqual( Stem("conjecture"), "conjectur" );
	deepEqual( Stem("conjectured"), "conjectur" );
	deepEqual( Stem("conjectures"), "conjectur" );
	deepEqual( Stem("conjecturing"), "conjectur" );
	deepEqual( Stem("conjoint"), "conjoint" );
	deepEqual( Stem("conjointly"), "conjoint" );
	deepEqual( Stem("conjugal"), "conjug" );
	deepEqual( Stem("conjunction"), "conjunct" );
	deepEqual( Stem("conjuncture"), "conjunctur" );
	deepEqual( Stem("conjuration"), "conjur" );
	deepEqual( Stem("conjure"), "conjur" );
	deepEqual( Stem("conjured"), "conjur" );
	deepEqual( Stem("conjures"), "conjur" );
	deepEqual( Stem("conjuring"), "conjur" );
	deepEqual( Stem("conjuror"), "conjuror" );
	deepEqual( Stem("connect"), "connect" );
	deepEqual( Stem("connected"), "connect" );
	deepEqual( Stem("connecting"), "connect" );
	deepEqual( Stem("connection"), "connect" );
	deepEqual( Stem("connections"), "connect" );
	deepEqual( Stem("connects"), "connect" );
	deepEqual( Stem("connexion"), "connexion" );
	deepEqual( Stem("connexions"), "connexion" );
	deepEqual( Stem("conning"), "con" );
	deepEqual( Stem("connivance"), "conniv" );
	deepEqual( Stem("connoisseur"), "connoisseur" );
	deepEqual( Stem("connubialities"), "connubi" );
	deepEqual( Stem("conquer"), "conquer" );
	deepEqual( Stem("conquerable"), "conquer" );
	deepEqual( Stem("conquered"), "conquer" );
	deepEqual( Stem("conquering"), "conquer" );
	deepEqual( Stem("conqueror"), "conqueror" );
	deepEqual( Stem("conquerors"), "conqueror" );
	deepEqual( Stem("conquest"), "conquest" );
	deepEqual( Stem("consanguinity"), "consanguin" );
	deepEqual( Stem("consarn"), "consarn" );
	deepEqual( Stem("conscience"), "conscienc" );
	deepEqual( Stem("consciences"), "conscienc" );
	deepEqual( Stem("conscientious"), "conscienti" );
	deepEqual( Stem("conscientiously"), "conscienti" );
	deepEqual( Stem("conscientiousness"), "conscienti" );
	deepEqual( Stem("conscious"), "conscious" );
	deepEqual( Stem("consciously"), "conscious" );
	deepEqual( Stem("consciousness"), "conscious" );
	deepEqual( Stem("consecrated"), "consecr" );
	deepEqual( Stem("consecrating"), "consecr" );
	deepEqual( Stem("consecutive"), "consecut" );
	deepEqual( Stem("consecutively"), "consecut" );
	deepEqual( Stem("consent"), "consent" );
	deepEqual( Stem("consented"), "consent" );
	deepEqual( Stem("consenting"), "consent" );
	deepEqual( Stem("consents"), "consent" );
	deepEqual( Stem("consequence"), "consequ" );
	deepEqual( Stem("consequences"), "consequ" );
	deepEqual( Stem("consequent"), "consequ" );
	deepEqual( Stem("consequential"), "consequenti" );
	deepEqual( Stem("consequently"), "consequ" );
	deepEqual( Stem("conservatism"), "conservat" );
	deepEqual( Stem("conservative"), "conserv" );
	deepEqual( Stem("conservatives"), "conserv" );
	deepEqual( Stem("conservatories"), "conservatori" );
	deepEqual( Stem("conservatory"), "conservatori" );
	deepEqual( Stem("conserved"), "conserv" );
	deepEqual( Stem("consider"), "consid" );
	deepEqual( Stem("considerable"), "consider" );
	deepEqual( Stem("considerably"), "consider" );
	deepEqual( Stem("considerate"), "consider" );
	deepEqual( Stem("considerately"), "consider" );
	deepEqual( Stem("consideration"), "consider" );
	deepEqual( Stem("considerations"), "consider" );
	deepEqual( Stem("considered"), "consid" );
	deepEqual( Stem("considering"), "consid" );
	deepEqual( Stem("considers"), "consid" );
	deepEqual( Stem("consign"), "consign" );
	deepEqual( Stem("consigned"), "consign" );
	deepEqual( Stem("consigning"), "consign" );
	deepEqual( Stem("consignment"), "consign" );
	deepEqual( Stem("consist"), "consist" );
	deepEqual( Stem("consisted"), "consist" );
	deepEqual( Stem("consistency"), "consist" );
	deepEqual( Stem("consistent"), "consist" );
	deepEqual( Stem("consistently"), "consist" );
	deepEqual( Stem("consisting"), "consist" );
	deepEqual( Stem("consists"), "consist" );
	deepEqual( Stem("consolation"), "consol" );
	deepEqual( Stem("consolations"), "consol" );
	deepEqual( Stem("consolatory"), "consolatori" );
	deepEqual( Stem("console"), "consol" );
	deepEqual( Stem("consoled"), "consol" );
	deepEqual( Stem("consoles"), "consol" );
	deepEqual( Stem("consolidate"), "consolid" );
	deepEqual( Stem("consolidated"), "consolid" );
	deepEqual( Stem("consolidating"), "consolid" );
	deepEqual( Stem("consoling"), "consol" );
	deepEqual( Stem("consolingly"), "consol" );
	deepEqual( Stem("consols"), "consol" );
	deepEqual( Stem("consonant"), "conson" );
	deepEqual( Stem("consort"), "consort" );
	deepEqual( Stem("consorted"), "consort" );
	deepEqual( Stem("consorting"), "consort" );
	deepEqual( Stem("conspicuous"), "conspicu" );
	deepEqual( Stem("conspicuously"), "conspicu" );
	deepEqual( Stem("conspiracy"), "conspiraci" );
	deepEqual( Stem("conspirator"), "conspir" );
	deepEqual( Stem("conspirators"), "conspir" );
	deepEqual( Stem("conspire"), "conspir" );
	deepEqual( Stem("conspired"), "conspir" );
	deepEqual( Stem("conspiring"), "conspir" );
	deepEqual( Stem("constable"), "constabl" );
	deepEqual( Stem("constables"), "constabl" );
	deepEqual( Stem("constance"), "constanc" );
	deepEqual( Stem("constancy"), "constanc" );
	deepEqual( Stem("constant"), "constant" );
	deepEqual( Stem("constantinople"), "constantinopl" );
	deepEqual( Stem("constantly"), "constant" );
	deepEqual( Stem("constellations"), "constel" );
	deepEqual( Stem("consternation"), "constern" );
	deepEqual( Stem("constitootion"), "constitoot" );
	deepEqual( Stem("constituencies"), "constitu" );
	deepEqual( Stem("constituency"), "constitu" );
	deepEqual( Stem("constituent"), "constitu" );
	deepEqual( Stem("constituents"), "constitu" );
	deepEqual( Stem("constitute"), "constitut" );
	deepEqual( Stem("constituted"), "constitut" );
	deepEqual( Stem("constitutes"), "constitut" );
	deepEqual( Stem("constituting"), "constitut" );
	deepEqual( Stem("constitution"), "constitut" );
	deepEqual( Stem("constitutional"), "constitut" );
	deepEqual( Stem("constitutionally"), "constitut" );
	deepEqual( Stem("constrain"), "constrain" );
	deepEqual( Stem("constrained"), "constrain" );
	deepEqual( Stem("constraining"), "constrain" );
	deepEqual( Stem("constrains"), "constrain" );
	deepEqual( Stem("constraint"), "constraint" );
	deepEqual( Stem("construct"), "construct" );
	deepEqual( Stem("constructed"), "construct" );
	deepEqual( Stem("constructing"), "construct" );
	deepEqual( Stem("construction"), "construct" );
	deepEqual( Stem("constructions"), "construct" );
	deepEqual( Stem("construe"), "constru" );
	deepEqual( Stem("consul"), "consul" );
	deepEqual( Stem("consult"), "consult" );
	deepEqual( Stem("consultation"), "consult" );
	deepEqual( Stem("consultations"), "consult" );
	deepEqual( Stem("consulted"), "consult" );
	deepEqual( Stem("consulting"), "consult" );
	deepEqual( Stem("consults"), "consult" );
	deepEqual( Stem("consume"), "consum" );
	deepEqual( Stem("consumed"), "consum" );
	deepEqual( Stem("consumedly"), "consum" );
	deepEqual( Stem("consumers"), "consum" );
	deepEqual( Stem("consuming"), "consum" );
	deepEqual( Stem("consummate"), "consumm" );
	deepEqual( Stem("consummation"), "consumm" );
	deepEqual( Stem("consumption"), "consumpt" );
	deepEqual( Stem("consumptive"), "consumpt" );
	deepEqual( Stem("contact"), "contact" );
	deepEqual( Stem("contagion"), "contagion" );
	deepEqual( Stem("contagious"), "contagi" );
	deepEqual( Stem("contain"), "contain" );
	deepEqual( Stem("contained"), "contain" );
	deepEqual( Stem("containing"), "contain" );
	deepEqual( Stem("contains"), "contain" );
	deepEqual( Stem("contaminated"), "contamin" );
	deepEqual( Stem("contaminating"), "contamin" );
	deepEqual( Stem("contamination"), "contamin" );
	deepEqual( Stem("contemned"), "contemn" );
	deepEqual( Stem("contemning"), "contemn" );
	deepEqual( Stem("contemns"), "contemn" );
	deepEqual( Stem("contemplate"), "contempl" );
	deepEqual( Stem("contemplated"), "contempl" );
	deepEqual( Stem("contemplates"), "contempl" );
	deepEqual( Stem("contemplating"), "contempl" );
	deepEqual( Stem("contemplation"), "contempl" );
	deepEqual( Stem("contemplations"), "contempl" );
	deepEqual( Stem("contemplative"), "contempl" );
	deepEqual( Stem("contemporaneous"), "contemporan" );
	deepEqual( Stem("contemporaneously"), "contemporan" );
	deepEqual( Stem("contemporaneousness"), "contemporan" );
	deepEqual( Stem("contemporaries"), "contemporari" );
	deepEqual( Stem("contempt"), "contempt" );
	deepEqual( Stem("contemptible"), "contempt" );
	deepEqual( Stem("contemptuous"), "contemptu" );
	deepEqual( Stem("contemptuously"), "contemptu" );
	deepEqual( Stem("conten"), "conten" );
	deepEqual( Stem("contend"), "contend" );
	deepEqual( Stem("contended"), "contend" );
	deepEqual( Stem("contending"), "contend" );
	deepEqual( Stem("contends"), "contend" );
	deepEqual( Stem("content"), "content" );
	deepEqual( Stem("contented"), "content" );
	deepEqual( Stem("contentedly"), "content" );
	deepEqual( Stem("contenting"), "content" );
	deepEqual( Stem("contention"), "content" );
	deepEqual( Stem("contentions"), "content" );
	deepEqual( Stem("contentious"), "contenti" );
	deepEqual( Stem("contentment"), "content" );
	deepEqual( Stem("contents"), "content" );
	deepEqual( Stem("contest"), "contest" );
	deepEqual( Stem("contested"), "contest" );
	deepEqual( Stem("contests"), "contest" );
	deepEqual( Stem("continent"), "contin" );
	deepEqual( Stem("continental"), "continent" );
	deepEqual( Stem("continents"), "contin" );
	deepEqual( Stem("contingencies"), "conting" );
	deepEqual( Stem("contingency"), "conting" );
	deepEqual( Stem("contingent"), "conting" );
	deepEqual( Stem("continney"), "continney" );
	deepEqual( Stem("continual"), "continu" );
	deepEqual( Stem("continually"), "continu" );
	deepEqual( Stem("continuance"), "continu" );
	deepEqual( Stem("continuation"), "continu" );
	deepEqual( Stem("continue"), "continu" );
	deepEqual( Stem("continued"), "continu" );
	deepEqual( Stem("continues"), "continu" );
	deepEqual( Stem("continuing"), "continu" );
	deepEqual( Stem("continuous"), "continu" );
	deepEqual( Stem("continuously"), "continu" );
	deepEqual( Stem("contorted"), "contort" );
	deepEqual( Stem("contorting"), "contort" );
	deepEqual( Stem("contortions"), "contort" );
	deepEqual( Stem("contra"), "contra" );
	deepEqual( Stem("contract"), "contract" );
	deepEqual( Stem("contracted"), "contract" );
	deepEqual( Stem("contracting"), "contract" );
	deepEqual( Stem("contraction"), "contract" );
	deepEqual( Stem("contractors"), "contractor" );
	deepEqual( Stem("contracts"), "contract" );
	deepEqual( Stem("contradict"), "contradict" );
	deepEqual( Stem("contradicted"), "contradict" );
	deepEqual( Stem("contradicting"), "contradict" );
	deepEqual( Stem("contradiction"), "contradict" );
	deepEqual( Stem("contradictions"), "contradict" );
	deepEqual( Stem("contradictory"), "contradictori" );
	deepEqual( Stem("contradicts"), "contradict" );
	deepEqual( Stem("contradistinction"), "contradistinct" );
	deepEqual( Stem("contrairy"), "contrairi" );
	deepEqual( Stem("contralto"), "contralto" );
	deepEqual( Stem("contrarieties"), "contrarieti" );
	deepEqual( Stem("contrary"), "contrari" );
	deepEqual( Stem("contrast"), "contrast" );
	deepEqual( Stem("contrasted"), "contrast" );
	deepEqual( Stem("contrasting"), "contrast" );
	deepEqual( Stem("contrasts"), "contrast" );
	deepEqual( Stem("contrees"), "contre" );
	deepEqual( Stem("contribute"), "contribut" );
	deepEqual( Stem("contributed"), "contribut" );
	deepEqual( Stem("contributes"), "contribut" );
	deepEqual( Stem("contributing"), "contribut" );
	deepEqual( Stem("contribution"), "contribut" );
	deepEqual( Stem("contributions"), "contribut" );
	deepEqual( Stem("contributors"), "contributor" );
	deepEqual( Stem("contrite"), "contrit" );
	deepEqual( Stem("contrition"), "contrit" );
	deepEqual( Stem("contrivance"), "contriv" );
	deepEqual( Stem("contrivances"), "contriv" );
	deepEqual( Stem("contrive"), "contriv" );
	deepEqual( Stem("contrived"), "contriv" );
	deepEqual( Stem("contriving"), "contriv" );
	deepEqual( Stem("control"), "control" );
	deepEqual( Stem("controlled"), "control" );
	deepEqual( Stem("controlling"), "control" );
	deepEqual( Stem("controls"), "control" );
	deepEqual( Stem("controvert"), "controvert" );
	deepEqual( Stem("controverted"), "controvert" );
	deepEqual( Stem("contumelious"), "contumeli" );
	deepEqual( Stem("contumely"), "contum" );
	deepEqual( Stem("contusion"), "contus" );
	deepEqual( Stem("conundrums"), "conundrum" );
	deepEqual( Stem("conurus"), "conurus" );
	deepEqual( Stem("convalescence"), "convalesc" );
	deepEqual( Stem("convalescent"), "convalesc" );
	deepEqual( Stem("convened"), "conven" );
	deepEqual( Stem("convenience"), "conveni" );
	deepEqual( Stem("convenient"), "conveni" );
	deepEqual( Stem("conveniently"), "conveni" );
	deepEqual( Stem("convent"), "convent" );
	deepEqual( Stem("convention"), "convent" );
	deepEqual( Stem("conventional"), "convent" );
	deepEqual( Stem("conventionalities"), "convent" );
	deepEqual( Stem("conventionality"), "convent" );
	deepEqual( Stem("conventionally"), "convent" );
	deepEqual( Stem("conventions"), "convent" );
	deepEqual( Stem("convents"), "convent" );
	deepEqual( Stem("conventual"), "conventu" );
	deepEqual( Stem("converge"), "converg" );
	deepEqual( Stem("converged"), "converg" );
	deepEqual( Stem("convergent"), "converg" );
	deepEqual( Stem("conversant"), "convers" );
	deepEqual( Stem("conversation"), "convers" );
	deepEqual( Stem("conversational"), "convers" );
	deepEqual( Stem("conversationally"), "convers" );
	deepEqual( Stem("conversations"), "convers" );
	deepEqual( Stem("converse"), "convers" );
	deepEqual( Stem("conversed"), "convers" );
	deepEqual( Stem("converses"), "convers" );
	deepEqual( Stem("conversing"), "convers" );
	deepEqual( Stem("conversion"), "convers" );
	deepEqual( Stem("convert"), "convert" );
	deepEqual( Stem("converted"), "convert" );
	deepEqual( Stem("convertible"), "convert" );
	deepEqual( Stem("converting"), "convert" );
	deepEqual( Stem("convertion"), "convert" );
	deepEqual( Stem("converts"), "convert" );
	deepEqual( Stem("convex"), "convex" );
	deepEqual( Stem("convey"), "convey" );
	deepEqual( Stem("conveyance"), "convey" );
	deepEqual( Stem("conveyancer"), "conveyanc" );
	deepEqual( Stem("conveyances"), "convey" );
	deepEqual( Stem("conveyed"), "convey" );
	deepEqual( Stem("conveying"), "convey" );
	deepEqual( Stem("conveys"), "convey" );
	deepEqual( Stem("convict"), "convict" );
	deepEqual( Stem("convicted"), "convict" );
	deepEqual( Stem("conviction"), "convict" );
	deepEqual( Stem("convictions"), "convict" );
	deepEqual( Stem("convicts"), "convict" );
	deepEqual( Stem("convince"), "convinc" );
	deepEqual( Stem("convinced"), "convinc" );
	deepEqual( Stem("convinces"), "convinc" );
	deepEqual( Stem("convincing"), "convinc" );
	deepEqual( Stem("convivial"), "convivi" );
	deepEqual( Stem("conviviality"), "convivi" );
	deepEqual( Stem("convolvulus"), "convolvulus" );
	deepEqual( Stem("convulsed"), "convuls" );
	deepEqual( Stem("convulsion"), "convuls" );
	deepEqual( Stem("convulsions"), "convuls" );
	deepEqual( Stem("convulsive"), "convuls" );
	deepEqual( Stem("convulsively"), "convuls" );
	deepEqual( Stem("conwenient"), "conweni" );
	deepEqual( Stem("conwulsions"), "conwuls" );
	deepEqual( Stem("coodle"), "coodl" );
	deepEqual( Stem("coodleites"), "coodleit" );
	deepEqual( Stem("cooing"), "coo" );
	deepEqual( Stem("cook"), "cook" );
	deepEqual( Stem("cooked"), "cook" );
	deepEqual( Stem("cookery"), "cookeri" );
	deepEqual( Stem("cooking"), "cook" );
	deepEqual( Stem("cookites"), "cookit" );
	deepEqual( Stem("cooks"), "cook" );
	deepEqual( Stem("cookshop"), "cookshop" );
	deepEqual( Stem("cool"), "cool" );
	deepEqual( Stem("cooled"), "cool" );
	deepEqual( Stem("cooler"), "cooler" );
	deepEqual( Stem("coolest"), "coolest" );
	deepEqual( Stem("cooling"), "cool" );
	deepEqual( Stem("coolly"), "coolli" );
	deepEqual( Stem("coolness"), "cool" );
	deepEqual( Stem("coom"), "coom" );
	deepEqual( Stem("coomin"), "coomin" );
	deepEqual( Stem("cooms"), "coom" );
	deepEqual( Stem("coop"), "coop" );
	deepEqual( Stem("cooped"), "coop" );
	deepEqual( Stem("coorch"), "coorch" );
	deepEqual( Stem("coot"), "coot" );
	deepEqual( Stem("cope"), "cope" );
	deepEqual( Stem("copeck"), "copeck" );
	deepEqual( Stem("copecks"), "copeck" );
	deepEqual( Stem("cophias"), "cophia" );
	deepEqual( Stem("copiapo"), "copiapo" );
	deepEqual( Stem("copied"), "copi" );
	deepEqual( Stem("copies"), "copi" );
	deepEqual( Stem("coping"), "cope" );
	deepEqual( Stem("copious"), "copious" );
	deepEqual( Stem("copiously"), "copious" );
	deepEqual( Stem("copper"), "copper" );
	deepEqual( Stem("coppers"), "copper" );
	deepEqual( Stem("coppery"), "copperi" );
	deepEqual( Stem("coppice"), "coppic" );
	deepEqual( Stem("copse"), "cops" );
	deepEqual( Stem("copy"), "copi" );
	deepEqual( Stem("copying"), "copi" );
	deepEqual( Stem("coquetry"), "coquetri" );
	deepEqual( Stem("coquette"), "coquett" );
	deepEqual( Stem("coquettish"), "coquettish" );
	deepEqual( Stem("coquille"), "coquill" );
	deepEqual( Stem("coquimbo"), "coquimbo" );
	deepEqual( Stem("cora"), "cora" );
	deepEqual( Stem("coral"), "coral" );
	deepEqual( Stem("coralline"), "corallin" );
	deepEqual( Stem("corallines"), "corallin" );
	deepEqual( Stem("corals"), "coral" );
	deepEqual( Stem("corcovado"), "corcovado" );
	deepEqual( Stem("cord"), "cord" );
	deepEqual( Stem("cordage"), "cordag" );
	deepEqual( Stem("corded"), "cord" );
	deepEqual( Stem("cordial"), "cordial" );
	deepEqual( Stem("cordiality"), "cordial" );
	deepEqual( Stem("cordially"), "cordial" );
	deepEqual( Stem("cordials"), "cordial" );
	deepEqual( Stem("cordillera"), "cordillera" );
	deepEqual( Stem("cords"), "cord" );
	deepEqual( Stem("corduroy"), "corduroy" );
	deepEqual( Stem("core"), "core" );
	deepEqual( Stem("corfield"), "corfield" );
	deepEqual( Stem("coriaceous"), "coriac" );
	deepEqual( Stem("coriolanus"), "coriolanus" );
	deepEqual( Stem("cork"), "cork" );
	deepEqual( Stem("corks"), "cork" );
	deepEqual( Stem("corkscrew"), "corkscrew" );
	deepEqual( Stem("corkscrewed"), "corkscrew" );
	deepEqual( Stem("cormoran"), "cormoran" );
	deepEqual( Stem("cormorant"), "cormor" );
	deepEqual( Stem("cormorants"), "cormor" );
	deepEqual( Stem("corn"), "corn" );
	deepEqual( Stem("corned"), "corn" );
	deepEqual( Stem("cornelia"), "cornelia" );
	deepEqual( Stem("cornelian"), "cornelian" );
	deepEqual( Stem("corner"), "corner" );
	deepEqual( Stem("cornered"), "corner" );
	deepEqual( Stem("corners"), "corner" );
	deepEqual( Stem("cornerstone"), "cornerston" );
	deepEqual( Stem("cornfield"), "cornfield" );
	deepEqual( Stem("cornice"), "cornic" );
	deepEqual( Stem("cornish"), "cornish" );
	deepEqual( Stem("corns"), "corn" );
	deepEqual( Stem("cornwall"), "cornwal" );
	deepEqual( Stem("coronal"), "coron" );
	deepEqual( Stem("coroner"), "coron" );
	deepEqual( Stem("coroners"), "coron" );
	deepEqual( Stem("coronet"), "coronet" );
	deepEqual( Stem("coronets"), "coronet" );
	deepEqual( Stem("corporal"), "corpor" );
	deepEqual( Stem("corporation"), "corpor" );
	deepEqual( Stem("corporations"), "corpor" );
	deepEqual( Stem("corporeal"), "corpor" );
	deepEqual( Stem("corps"), "corp" );
	deepEqual( Stem("corpse"), "corps" );
	deepEqual( Stem("corpses"), "corps" );
	deepEqual( Stem("corpulence"), "corpul" );
	deepEqual( Stem("corpulent"), "corpul" );
	deepEqual( Stem("corpus"), "corpus" );
	deepEqual( Stem("corral"), "corral" );
	deepEqual( Stem("corrales"), "corral" );
	deepEqual( Stem("corrals"), "corral" );
	deepEqual( Stem("correct"), "correct" );
	deepEqual( Stem("corrected"), "correct" );
	deepEqual( Stem("correcting"), "correct" );
	deepEqual( Stem("correction"), "correct" );
	deepEqual( Stem("corrective"), "correct" );
	deepEqual( Stem("correctly"), "correct" );
	deepEqual( Stem("correctness"), "correct" );
	deepEqual( Stem("corrects"), "correct" );
	deepEqual( Stem("correndera"), "correndera" );
	deepEqual( Stem("correspond"), "correspond" );
	deepEqual( Stem("corresponded"), "correspond" );
	deepEqual( Stem("correspondence"), "correspond" );
	deepEqual( Stem("correspondent"), "correspond" );
	deepEqual( Stem("correspondents"), "correspond" );
	deepEqual( Stem("corresponding"), "correspond" );
	deepEqual( Stem("correspondingly"), "correspond" );
	deepEqual( Stem("corridor"), "corridor" );
	deepEqual( Stem("corrientes"), "corrient" );
	deepEqual( Stem("corrobery"), "corroberi" );
	deepEqual( Stem("corroborate"), "corrobor" );
	deepEqual( Stem("corroborated"), "corrobor" );
	deepEqual( Stem("corroboration"), "corrobor" );
	deepEqual( Stem("corroborative"), "corrobor" );
	deepEqual( Stem("corroboratory"), "corroboratori" );
	deepEqual( Stem("corroded"), "corrod" );
	deepEqual( Stem("corroding"), "corrod" );
	deepEqual( Stem("corrugated"), "corrug" );
	deepEqual( Stem("corrupt"), "corrupt" );
	deepEqual( Stem("corrupted"), "corrupt" );
	deepEqual( Stem("corrupting"), "corrupt" );
	deepEqual( Stem("corruption"), "corrupt" );
	deepEqual( Stem("corrupts"), "corrupt" );
	deepEqual( Stem("corse"), "cors" );
	deepEqual( Stem("cortez"), "cortez" );
	deepEqual( Stem("corunda"), "corunda" );
	deepEqual( Stem("corynetes"), "corynet" );
	deepEqual( Stem("cos"), "cos" );
	deepEqual( Stem("cosa"), "cosa" );
	deepEqual( Stem("coseguina"), "coseguina" );
	deepEqual( Stem("cosgrave"), "cosgrav" );
	deepEqual( Stem("cosily"), "cosili" );
	deepEqual( Stem("cosmopolitan"), "cosmopolitan" );
	deepEqual( Stem("cost"), "cost" );
	deepEqual( Stem("costal"), "costal" );
	deepEqual( Stem("costermongers"), "costermong" );
	deepEqual( Stem("costlier"), "costlier" );
	deepEqual( Stem("costliest"), "costliest" );
	deepEqual( Stem("costly"), "cost" );
	deepEqual( Stem("costs"), "cost" );
	deepEqual( Stem("costume"), "costum" );
	deepEqual( Stem("costumes"), "costum" );
	deepEqual( Stem("cosy"), "cosi" );
	deepEqual( Stem("cot"), "cot" );
	deepEqual( Stem("cote"), "cote" );
	deepEqual( Stem("cottage"), "cottag" );
	deepEqual( Stem("cottager"), "cottag" );
	deepEqual( Stem("cottagers"), "cottag" );
	deepEqual( Stem("cottages"), "cottag" );
	deepEqual( Stem("cotton"), "cotton" );
	deepEqual( Stem("cottoned"), "cotton" );
	deepEqual( Stem("cottons"), "cotton" );
	deepEqual( Stem("couch"), "couch" );
	deepEqual( Stem("couched"), "couch" );
	deepEqual( Stem("couches"), "couch" );
	deepEqual( Stem("cough"), "cough" );
	deepEqual( Stem("coughed"), "cough" );
	deepEqual( Stem("coughing"), "cough" );
	deepEqual( Stem("coughs"), "cough" );
	deepEqual( Stem("could"), "could" );
	deepEqual( Stem("couldn"), "couldn" );
	deepEqual( Stem("couldst"), "couldst" );
	deepEqual( Stem("council"), "council" );
	deepEqual( Stem("councillor"), "councillor" );
	deepEqual( Stem("councillors"), "councillor" );
	deepEqual( Stem("councils"), "council" );
	deepEqual( Stem("counsel"), "counsel" );
	deepEqual( Stem("counselled"), "counsel" );
	deepEqual( Stem("counsellor"), "counsellor" );
	deepEqual( Stem("counsellors"), "counsellor" );
	deepEqual( Stem("counsels"), "counsel" );
	deepEqual( Stem("count"), "count" );
	deepEqual( Stem("counted"), "count" );
	deepEqual( Stem("countenance"), "counten" );
	deepEqual( Stem("countenanced"), "countenanc" );
	deepEqual( Stem("countenances"), "counten" );
	deepEqual( Stem("counter"), "counter" );
	deepEqual( Stem("counteract"), "counteract" );
	deepEqual( Stem("counteracted"), "counteract" );
	deepEqual( Stem("counterbalance"), "counterbal" );
	deepEqual( Stem("counterbalanced"), "counterbalanc" );
	deepEqual( Stem("counterfeit"), "counterfeit" );
	deepEqual( Stem("counterfeited"), "counterfeit" );
	deepEqual( Stem("counterfeiting"), "counterfeit" );
	deepEqual( Stem("counterfeits"), "counterfeit" );
	deepEqual( Stem("counterpane"), "counterpan" );
	deepEqual( Stem("counterpart"), "counterpart" );
	deepEqual( Stem("counterplot"), "counterplot" );
	deepEqual( Stem("counterpoise"), "counterpois" );
	deepEqual( Stem("counters"), "counter" );
	deepEqual( Stem("countess"), "countess" );
	deepEqual( Stem("countesses"), "countess" );
	deepEqual( Stem("counties"), "counti" );
	deepEqual( Stem("counting"), "count" );
	deepEqual( Stem("countless"), "countless" );
	deepEqual( Stem("countree"), "countre" );
	deepEqual( Stem("countries"), "countri" );
	deepEqual( Stem("countrified"), "countrifi" );
	deepEqual( Stem("country"), "countri" );
	deepEqual( Stem("countryman"), "countryman" );
	deepEqual( Stem("countrymen"), "countrymen" );
	deepEqual( Stem("countryrmen"), "countryrmen" );
	deepEqual( Stem("countrywomen"), "countrywomen" );
	deepEqual( Stem("counts"), "count" );
	deepEqual( Stem("county"), "counti" );
	deepEqual( Stem("coup"), "coup" );
	deepEqual( Stem("couple"), "coupl" );
	deepEqual( Stem("coupled"), "coupl" );
	deepEqual( Stem("couples"), "coupl" );
	deepEqual( Stem("coupling"), "coupl" );
	deepEqual( Stem("courage"), "courag" );
	deepEqual( Stem("courageous"), "courag" );
	deepEqual( Stem("courageously"), "courag" );
	deepEqual( Stem("courcy"), "courci" );
	deepEqual( Stem("courcys"), "courci" );
	deepEqual( Stem("courier"), "courier" );
	deepEqual( Stem("course"), "cours" );
	deepEqual( Stem("coursed"), "cours" );
	deepEqual( Stem("coursers"), "courser" );
	deepEqual( Stem("courses"), "cours" );
	deepEqual( Stem("coursing"), "cours" );
	deepEqual( Stem("court"), "court" );
	deepEqual( Stem("courted"), "court" );
	deepEqual( Stem("courteous"), "courteous" );
	deepEqual( Stem("courteously"), "courteous" );
	deepEqual( Stem("courtesies"), "courtesi" );
	deepEqual( Stem("courtesy"), "courtesi" );
	deepEqual( Stem("courtier"), "courtier" );
	deepEqual( Stem("courtiers"), "courtier" );
	deepEqual( Stem("courting"), "court" );
	deepEqual( Stem("courtly"), "court" );
	deepEqual( Stem("courts"), "court" );
	deepEqual( Stem("courtship"), "courtship" );
	deepEqual( Stem("courtships"), "courtship" );
	deepEqual( Stem("courtyard"), "courtyard" );
	deepEqual( Stem("courtyards"), "courtyard" );
	deepEqual( Stem("cousin"), "cousin" );
	deepEqual( Stem("cousinly"), "cousin" );
	deepEqual( Stem("cousins"), "cousin" );
	deepEqual( Stem("cousinship"), "cousinship" );
	deepEqual( Stem("couthouy"), "couthouy" );
	deepEqual( Stem("cove"), "cove" );
	deepEqual( Stem("covenanted"), "coven" );
	deepEqual( Stem("covent"), "covent" );
	deepEqual( Stem("coventry"), "coventri" );
	deepEqual( Stem("cover"), "cover" );
	deepEqual( Stem("covered"), "cover" );
	deepEqual( Stem("covering"), "cover" );
	deepEqual( Stem("coverings"), "cover" );
	deepEqual( Stem("coverlet"), "coverlet" );
	deepEqual( Stem("coverley"), "coverley" );
	deepEqual( Stem("covers"), "cover" );
	deepEqual( Stem("covert"), "covert" );
	deepEqual( Stem("covertly"), "covert" );
	deepEqual( Stem("coverts"), "covert" );
	deepEqual( Stem("coverture"), "covertur" );
	deepEqual( Stem("coves"), "cove" );
	deepEqual( Stem("covet"), "covet" );
	deepEqual( Stem("coveted"), "covet" );
	deepEqual( Stem("covetous"), "covet" );
	deepEqual( Stem("covetousness"), "covet" );
	deepEqual( Stem("coveys"), "covey" );
	deepEqual( Stem("cow"), "cow" );
	deepEqual( Stem("coward"), "coward" );
	deepEqual( Stem("cowardice"), "cowardic" );
	deepEqual( Stem("cowardly"), "coward" );
	deepEqual( Stem("cowards"), "coward" );
	deepEqual( Stem("cowboy"), "cowboy" );
	deepEqual( Stem("cowcumber"), "cowcumb" );
	deepEqual( Stem("cowed"), "cow" );
	deepEqual( Stem("cower"), "cower" );
	deepEqual( Stem("cowered"), "cower" );
	deepEqual( Stem("cowering"), "cower" );
	deepEqual( Stem("cowers"), "cower" );
	deepEqual( Stem("cowl"), "cowl" );
	deepEqual( Stem("cowley"), "cowley" );
	deepEqual( Stem("cows"), "cow" );
	deepEqual( Stem("cowshed"), "cowsh" );
	deepEqual( Stem("cowslip"), "cowslip" );
	deepEqual( Stem("cowslips"), "cowslip" );
	deepEqual( Stem("cox"), "cox" );
	deepEqual( Stem("coxcomb"), "coxcomb" );
	deepEqual( Stem("coxcombical"), "coxcomb" );
	deepEqual( Stem("coxcombs"), "coxcomb" );
	deepEqual( Stem("coxswain"), "coxswain" );
	deepEqual( Stem("coy"), "coy" );
	deepEqual( Stem("coyness"), "coy" );
	deepEqual( Stem("coypus"), "coypus" );
	deepEqual( Stem("cozened"), "cozen" );
	deepEqual( Stem("cozily"), "cozili" );
	deepEqual( Stem("crab"), "crab" );
	deepEqual( Stem("crabbe"), "crabb" );
	deepEqual( Stem("crabbed"), "crab" );
	deepEqual( Stem("crabberies"), "crabberi" );
	deepEqual( Stem("crabs"), "crab" );
	deepEqual( Stem("crack"), "crack" );
	deepEqual( Stem("cracked"), "crack" );
	deepEqual( Stem("cracking"), "crack" );
	deepEqual( Stem("crackle"), "crackl" );
	deepEqual( Stem("crackled"), "crackl" );
	deepEqual( Stem("crackling"), "crackl" );
	deepEqual( Stem("cracks"), "crack" );
	deepEqual( Stem("cradle"), "cradl" );
	deepEqual( Stem("cradles"), "cradl" );
	deepEqual( Stem("craft"), "craft" );
	deepEqual( Stem("craftier"), "craftier" );
	deepEqual( Stem("craftiest"), "craftiest" );
	deepEqual( Stem("crafts"), "craft" );
	deepEqual( Stem("crafty"), "crafti" );
	deepEqual( Stem("crags"), "crag" );
	deepEqual( Stem("cram"), "cram" );
	deepEqual( Stem("cramble"), "crambl" );
	deepEqual( Stem("crammed"), "cram" );
	deepEqual( Stem("cramming"), "cram" );
	deepEqual( Stem("cramp"), "cramp" );
	deepEqual( Stem("cramped"), "cramp" );
	deepEqual( Stem("cramping"), "cramp" );
	deepEqual( Stem("cranberry"), "cranberri" );
	deepEqual( Stem("crancrivora"), "crancrivora" );
	deepEqual( Stem("cranes"), "crane" );
	deepEqual( Stem("craning"), "crane" );
	deepEqual( Stem("cranks"), "crank" );
	deepEqual( Stem("crannies"), "cranni" );
	deepEqual( Stem("crape"), "crape" );
	deepEqual( Stem("crash"), "crash" );
	deepEqual( Stem("crashed"), "crash" );
	deepEqual( Stem("crashing"), "crash" );
	deepEqual( Stem("crater"), "crater" );
	deepEqual( Stem("crateriform"), "crateriform" );
	deepEqual( Stem("craters"), "crater" );
	deepEqual( Stem("cravat"), "cravat" );
	deepEqual( Stem("cravats"), "cravat" );
	deepEqual( Stem("crave"), "crave" );
	deepEqual( Stem("craved"), "crave" );
	deepEqual( Stem("craven"), "craven" );
	deepEqual( Stem("craving"), "crave" );
	deepEqual( Stem("craw"), "craw" );
	deepEqual( Stem("crawl"), "crawl" );
	deepEqual( Stem("crawled"), "crawl" );
	deepEqual( Stem("crawling"), "crawl" );
	deepEqual( Stem("crawls"), "crawl" );
	deepEqual( Stem("craws"), "craw" );
	deepEqual( Stem("cray"), "cray" );
	deepEqual( Stem("crayons"), "crayon" );
	deepEqual( Stem("craze"), "craze" );
	deepEqual( Stem("crazed"), "craze" );
	deepEqual( Stem("crazy"), "crazi" );
	deepEqual( Stem("creak"), "creak" );
	deepEqual( Stem("creaked"), "creak" );
	deepEqual( Stem("creaking"), "creak" );
	deepEqual( Stem("cream"), "cream" );
	deepEqual( Stem("crease"), "creas" );
	deepEqual( Stem("creases"), "creas" );
	deepEqual( Stem("creasing"), "creas" );
	deepEqual( Stem("create"), "creat" );
	deepEqual( Stem("created"), "creat" );
	deepEqual( Stem("creating"), "creat" );
	deepEqual( Stem("creation"), "creation" );
	deepEqual( Stem("creations"), "creation" );
	deepEqual( Stem("creative"), "creativ" );
	deepEqual( Stem("creator"), "creator" );
	deepEqual( Stem("creature"), "creatur" );
	deepEqual( Stem("creatures"), "creatur" );
	deepEqual( Stem("credence"), "credenc" );
	deepEqual( Stem("credentials"), "credenti" );
	deepEqual( Stem("credibility"), "credibl" );
	deepEqual( Stem("credible"), "credibl" );
	deepEqual( Stem("credibly"), "credibl" );
	deepEqual( Stem("credit"), "credit" );
	deepEqual( Stem("creditable"), "credit" );
	deepEqual( Stem("creditably"), "credit" );
	deepEqual( Stem("credited"), "credit" );
	deepEqual( Stem("crediting"), "credit" );
	deepEqual( Stem("creditor"), "creditor" );
	deepEqual( Stem("creditors"), "creditor" );
	deepEqual( Stem("credulity"), "credul" );
	deepEqual( Stem("credulous"), "credul" );
	deepEqual( Stem("cree"), "cree" );
	deepEqual( Stem("creed"), "creed" );
	deepEqual( Stem("creek"), "creek" );
	deepEqual( Stem("creeks"), "creek" );
	deepEqual( Stem("creep"), "creep" );
	deepEqual( Stem("creeper"), "creeper" );
	deepEqual( Stem("creepers"), "creeper" );
	deepEqual( Stem("creeping"), "creep" );
	deepEqual( Stem("creeps"), "creep" );
	deepEqual( Stem("creetur"), "creetur" );
	deepEqual( Stem("creeturs"), "creetur" );
	deepEqual( Stem("creevy"), "creevi" );
	deepEqual( Stem("crepitans"), "crepitan" );
	deepEqual( Stem("crept"), "crept" );
	deepEqual( Stem("crescent"), "crescent" );
	deepEqual( Stem("crest"), "crest" );
	deepEqual( Stem("crested"), "crest" );
	deepEqual( Stem("crestfallen"), "crestfallen" );
	deepEqual( Stem("crests"), "crest" );
	deepEqual( Stem("crevez"), "crevez" );
	deepEqual( Stem("crevice"), "crevic" );
	deepEqual( Stem("crevices"), "crevic" );
	deepEqual( Stem("crew"), "crew" );
	deepEqual( Stem("crib"), "crib" );
	deepEqual( Stem("cribs"), "crib" );
	deepEqual( Stem("crichton"), "crichton" );
	deepEqual( Stem("cricket"), "cricket" );
	deepEqual( Stem("crickets"), "cricket" );
	deepEqual( Stem("cried"), "cri" );
	deepEqual( Stem("crier"), "crier" );
	deepEqual( Stem("criers"), "crier" );
	deepEqual( Stem("cries"), "cri" );
	deepEqual( Stem("crime"), "crime" );
	deepEqual( Stem("crimes"), "crime" );
	deepEqual( Stem("criminal"), "crimin" );
	deepEqual( Stem("criminality"), "crimin" );
	deepEqual( Stem("criminals"), "crimin" );
	deepEqual( Stem("criminate"), "crimin" );
	deepEqual( Stem("criminations"), "crimin" );
	deepEqual( Stem("crimson"), "crimson" );
	deepEqual( Stem("crimsoned"), "crimson" );
	deepEqual( Stem("cringe"), "cring" );
	deepEqual( Stem("cringing"), "cring" );
	deepEqual( Stem("cringingly"), "cring" );
	deepEqual( Stem("crinoline"), "crinolin" );
	deepEqual( Stem("cripple"), "crippl" );
	deepEqual( Stem("crippled"), "crippl" );
	deepEqual( Stem("crippler"), "crippler" );
	deepEqual( Stem("crisia"), "crisia" );
	deepEqual( Stem("crisis"), "crisi" );
	deepEqual( Stem("crisp"), "crisp" );
	deepEqual( Stem("cristal"), "cristal" );
	deepEqual( Stem("cristatus"), "cristatus" );
	deepEqual( Stem("cristiandad"), "cristiandad" );
	deepEqual( Stem("cristianos"), "cristiano" );
	deepEqual( Stem("criterion"), "criterion" );
	deepEqual( Stem("critic"), "critic" );
	deepEqual( Stem("critical"), "critic" );
	deepEqual( Stem("criticise"), "criticis" );
	deepEqual( Stem("criticised"), "criticis" );
	deepEqual( Stem("criticism"), "critic" );
	deepEqual( Stem("criticisms"), "critic" );
	deepEqual( Stem("criticize"), "critic" );
	deepEqual( Stem("criticizing"), "critic" );
	deepEqual( Stem("critics"), "critic" );
	deepEqual( Stem("critique"), "critiqu" );
	deepEqual( Stem("critturs"), "crittur" );
	deepEqual( Stem("croak"), "croak" );
	deepEqual( Stem("croaked"), "croak" );
	deepEqual( Stem("croaking"), "croak" );
	deepEqual( Stem("croaks"), "croak" );
	deepEqual( Stem("crockery"), "crockeri" );
	deepEqual( Stem("crockford"), "crockford" );
	deepEqual( Stem("crocking"), "crock" );
	deepEqual( Stem("crocodile"), "crocodil" );
	deepEqual( Stem("crocodiles"), "crocodil" );
	deepEqual( Stem("croesus"), "croesus" );
	deepEqual( Stem("crois"), "croi" );
	deepEqual( Stem("crook"), "crook" );
	deepEqual( Stem("crooked"), "crook" );
	deepEqual( Stem("crookedly"), "crook" );
	deepEqual( Stem("crooks"), "crook" );
	deepEqual( Stem("crop"), "crop" );
	deepEqual( Stem("cropley"), "cropley" );
	deepEqual( Stem("crops"), "crop" );
	deepEqual( Stem("cros"), "cros" );
	deepEqual( Stem("cross"), "cross" );
	deepEqual( Stem("crosse"), "cross" );
	deepEqual( Stem("crossed"), "cross" );
	deepEqual( Stem("crosses"), "cross" );
	deepEqual( Stem("crossgrained"), "crossgrain" );
	deepEqual( Stem("crossin"), "crossin" );
	deepEqual( Stem("crossing"), "cross" );
	deepEqual( Stem("crossings"), "cross" );
	deepEqual( Stem("crossly"), "crossli" );
	deepEqual( Stem("crost"), "crost" );
	deepEqual( Stem("crotchet"), "crotchet" );
	deepEqual( Stem("crotchets"), "crotchet" );
	deepEqual( Stem("crouched"), "crouch" );
	deepEqual( Stem("crouches"), "crouch" );
	deepEqual( Stem("crouching"), "crouch" );
	deepEqual( Stem("croup"), "croup" );
	deepEqual( Stem("crow"), "crow" );
	deepEqual( Stem("crowbar"), "crowbar" );
	deepEqual( Stem("crowd"), "crowd" );
	deepEqual( Stem("crowded"), "crowd" );
	deepEqual( Stem("crowding"), "crowd" );
	deepEqual( Stem("crowds"), "crowd" );
	deepEqual( Stem("crowed"), "crow" );
	deepEqual( Stem("crowin"), "crowin" );
	deepEqual( Stem("crowing"), "crow" );
	deepEqual( Stem("crowl"), "crowl" );
	deepEqual( Stem("crown"), "crown" );
	deepEqual( Stem("crowned"), "crown" );
	deepEqual( Stem("crowning"), "crown" );
	deepEqual( Stem("crowns"), "crown" );
	deepEqual( Stem("crowquill"), "crowquil" );
	deepEqual( Stem("crows"), "crow" );
	deepEqual( Stem("crucified"), "crucifi" );
	deepEqual( Stem("crucify"), "crucifi" );
	deepEqual( Stem("crucifying"), "crucifi" );
	deepEqual( Stem("crude"), "crude" );
	deepEqual( Stem("crudely"), "crude" );
	deepEqual( Stem("crudest"), "crudest" );
	deepEqual( Stem("cruel"), "cruel" );
	deepEqual( Stem("cruellest"), "cruellest" );
	deepEqual( Stem("cruelly"), "cruelli" );
	deepEqual( Stem("cruelties"), "cruelti" );
	deepEqual( Stem("cruelty"), "cruelti" );
	deepEqual( Stem("cruenta"), "cruenta" );
	deepEqual( Stem("cruet"), "cruet" );
	deepEqual( Stem("cruise"), "cruis" );
	deepEqual( Stem("cruises"), "cruis" );
	deepEqual( Stem("crumb"), "crumb" );
	deepEqual( Stem("crumber"), "crumber" );
	deepEqual( Stem("crumble"), "crumbl" );
	deepEqual( Stem("crumbled"), "crumbl" );
	deepEqual( Stem("crumbling"), "crumbl" );
	deepEqual( Stem("crumbs"), "crumb" );
	deepEqual( Stem("crumlinwallinwer"), "crumlinwallinw" );
	deepEqual( Stem("crummles"), "crumml" );
	deepEqual( Stem("crummleses"), "crummles" );
	deepEqual( Stem("crumpet"), "crumpet" );
	deepEqual( Stem("crumpets"), "crumpet" );
	deepEqual( Stem("crumpled"), "crumpl" );
	deepEqual( Stem("crumpling"), "crumpl" );
	deepEqual( Stem("crumpy"), "crumpi" );
	deepEqual( Stem("crupper"), "crupper" );
	deepEqual( Stem("crusade"), "crusad" );
	deepEqual( Stem("crusader"), "crusad" );
	deepEqual( Stem("crusaders"), "crusad" );
	deepEqual( Stem("crusades"), "crusad" );
	deepEqual( Stem("crusading"), "crusad" );
	deepEqual( Stem("crush"), "crush" );
	deepEqual( Stem("crushed"), "crush" );
	deepEqual( Stem("crushes"), "crush" );
	deepEqual( Stem("crushing"), "crush" );
	deepEqual( Stem("crusoe"), "cruso" );
	deepEqual( Stem("crust"), "crust" );
	deepEqual( Stem("crustacea"), "crustacea" );
	deepEqual( Stem("crustaceous"), "crustac" );
	deepEqual( Stem("crusts"), "crust" );
	deepEqual( Stem("crusty"), "crusti" );
	deepEqual( Stem("crutches"), "crutch" );
	deepEqual( Stem("cruz"), "cruz" );
	deepEqual( Stem("cry"), "cri" );
	deepEqual( Stem("crying"), "cri" );
	deepEqual( Stem("crypt"), "crypt" );
	deepEqual( Stem("cryptogamic"), "cryptogam" );
	deepEqual( Stem("crystal"), "crystal" );
	deepEqual( Stem("crystalline"), "crystallin" );
	deepEqual( Stem("crystallization"), "crystal" );
	deepEqual( Stem("crystallized"), "crystal" );
	deepEqual( Stem("crystals"), "crystal" );
	deepEqual( Stem("crystial"), "crystial" );
	deepEqual( Stem("ct"), "ct" );
	deepEqual( Stem("ctenomys"), "ctenomi" );
	deepEqual( Stem("cu"), "cu" );
	deepEqual( Stem("cubes"), "cube" );
	deepEqual( Stem("cubic"), "cubic" );
	deepEqual( Stem("cubs"), "cub" );
	deepEqual( Stem("cucao"), "cucao" );
	deepEqual( Stem("cuchilla"), "cuchilla" );
	deepEqual( Stem("cuckoo"), "cuckoo" );
	deepEqual( Stem("cuckoos"), "cuckoo" );
	deepEqual( Stem("cucumber"), "cucumb" );
	deepEqual( Stem("cucumbers"), "cucumb" );
	deepEqual( Stem("cudgel"), "cudgel" );
	deepEqual( Stem("cudgelled"), "cudgel" );
	deepEqual( Stem("cudgels"), "cudgel" );
	deepEqual( Stem("cudico"), "cudico" );
	deepEqual( Stem("cue"), "cue" );
	deepEqual( Stem("cuentas"), "cuenta" );
	deepEqual( Stem("cuero"), "cuero" );
	deepEqual( Stem("cues"), "cue" );
	deepEqual( Stem("cueva"), "cueva" );
	deepEqual( Stem("cuff"), "cuff" );
	deepEqual( Stem("cuffs"), "cuff" );
	deepEqual( Stem("cuffy"), "cuffi" );
	deepEqual( Stem("cufre"), "cufr" );
	deepEqual( Stem("cul"), "cul" );
	deepEqual( Stem("culpability"), "culpabl" );
	deepEqual( Stem("culpeu"), "culpeu" );
	deepEqual( Stem("culprit"), "culprit" );
	deepEqual( Stem("cultivate"), "cultiv" );
	deepEqual( Stem("cultivated"), "cultiv" );
	deepEqual( Stem("cultivating"), "cultiv" );
	deepEqual( Stem("cultivation"), "cultiv" );
	deepEqual( Stem("culture"), "cultur" );
	deepEqual( Stem("culver"), "culver" );
	deepEqual( Stem("cum"), "cum" );
	deepEqual( Stem("cumber"), "cumber" );
	deepEqual( Stem("cumberland"), "cumberland" );
	deepEqual( Stem("cumbre"), "cumbr" );
	deepEqual( Stem("cumbrously"), "cumbrous" );
	deepEqual( Stem("cumfbler"), "cumfbler" );
	deepEqual( Stem("cumin"), "cumin" );
	deepEqual( Stem("cuming"), "cume" );
	deepEqual( Stem("cummin"), "cummin" );
	deepEqual( Stem("cumnor"), "cumnor" );
	deepEqual( Stem("cums"), "cum" );
	deepEqual( Stem("cumuli"), "cumuli" );
	deepEqual( Stem("cunicularia"), "cunicularia" );
	deepEqual( Stem("cunicularius"), "cunicularius" );
	deepEqual( Stem("cunning"), "cun" );
	deepEqual( Stem("cunningest"), "cunningest" );
	deepEqual( Stem("cunningly"), "cun" );
	deepEqual( Stem("cup"), "cup" );
	deepEqual( Stem("cupboard"), "cupboard" );
	deepEqual( Stem("cupboards"), "cupboard" );
	deepEqual( Stem("cupid"), "cupid" );
	deepEqual( Stem("cupidity"), "cupid" );
	deepEqual( Stem("cupids"), "cupid" );
	deepEqual( Stem("cupola"), "cupola" );
	deepEqual( Stem("cups"), "cup" );
	deepEqual( Stem("cur"), "cur" );
	deepEqual( Stem("cura"), "cura" );
	deepEqual( Stem("curacy"), "curaci" );
	deepEqual( Stem("curate"), "curat" );
	deepEqual( Stem("curb"), "curb" );
	deepEqual( Stem("curbed"), "curb" );
	deepEqual( Stem("curdle"), "curdl" );
	deepEqual( Stem("curds"), "curd" );
	deepEqual( Stem("cure"), "cure" );
	deepEqual( Stem("cured"), "cure" );
	deepEqual( Stem("cures"), "cure" );
	deepEqual( Stem("curing"), "cure" );
	deepEqual( Stem("curiosities"), "curios" );
	deepEqual( Stem("curiosity"), "curios" );
	deepEqual( Stem("curious"), "curious" );
	deepEqual( Stem("curiously"), "curious" );
	deepEqual( Stem("curl"), "curl" );
	deepEqual( Stem("curled"), "curl" );
	deepEqual( Stem("curlew"), "curlew" );
	deepEqual( Stem("curling"), "curl" );
	deepEqual( Stem("curlings"), "curl" );
	deepEqual( Stem("curls"), "curl" );
	deepEqual( Stem("curly"), "cur" );
	deepEqual( Stem("curmudgeon"), "curmudgeon" );
	deepEqual( Stem("curragh"), "curragh" );
	deepEqual( Stem("currant"), "currant" );
	deepEqual( Stem("currants"), "currant" );
	deepEqual( Stem("currency"), "currenc" );
	deepEqual( Stem("current"), "current" );
	deepEqual( Stem("currently"), "current" );
	deepEqual( Stem("currents"), "current" );
	deepEqual( Stem("curricle"), "curricl" );
	deepEqual( Stem("curries"), "curri" );
	deepEqual( Stem("curry"), "curri" );
	deepEqual( Stem("curs"), "cur" );
	deepEqual( Stem("curse"), "curs" );
	deepEqual( Stem("cursed"), "curs" );
	deepEqual( Stem("curses"), "curs" );
	deepEqual( Stem("cursing"), "curs" );
	deepEqual( Stem("cursitor"), "cursitor" );
	deepEqual( Stem("cursory"), "cursori" );
	deepEqual( Stem("curt"), "curt" );
	deepEqual( Stem("curtain"), "curtain" );
	deepEqual( Stem("curtained"), "curtain" );
	deepEqual( Stem("curtaining"), "curtain" );
	deepEqual( Stem("curtains"), "curtain" );
	deepEqual( Stem("curtness"), "curt" );
	deepEqual( Stem("curtsey"), "curtsey" );
	deepEqual( Stem("curtseyed"), "curtsey" );
	deepEqual( Stem("curtseying"), "curtsey" );
	deepEqual( Stem("curtseys"), "curtsey" );
	deepEqual( Stem("curtsied"), "curtsi" );
	deepEqual( Stem("curtsy"), "curtsi" );
	deepEqual( Stem("curtsying"), "curtsi" );
	deepEqual( Stem("curtsys"), "curtsi" );
	deepEqual( Stem("curvature"), "curvatur" );
	deepEqual( Stem("curve"), "curv" );
	deepEqual( Stem("curved"), "curv" );
	deepEqual( Stem("curves"), "curv" );
	deepEqual( Stem("curvidens"), "curviden" );
	deepEqual( Stem("curving"), "curv" );
	deepEqual( Stem("cushion"), "cushion" );
	deepEqual( Stem("cushioned"), "cushion" );
	deepEqual( Stem("cushioning"), "cushion" );
	deepEqual( Stem("cushions"), "cushion" );
	deepEqual( Stem("custodian"), "custodian" );
	deepEqual( Stem("custodians"), "custodian" );
	deepEqual( Stem("custody"), "custodi" );
	deepEqual( Stem("custom"), "custom" );
	deepEqual( Stem("customarily"), "customarili" );
	deepEqual( Stem("customary"), "customari" );
	deepEqual( Stem("customer"), "custom" );
	deepEqual( Stem("customers"), "custom" );
	deepEqual( Stem("customs"), "custom" );
	deepEqual( Stem("cut"), "cut" );
	deepEqual( Stem("cutaneous"), "cutan" );
	deepEqual( Stem("cute"), "cute" );
	deepEqual( Stem("cutlass"), "cutlass" );
	deepEqual( Stem("cutler"), "cutler" );
	deepEqual( Stem("cutlery"), "cutleri" );
	deepEqual( Stem("cutlets"), "cutlet" );
	deepEqual( Stem("cuts"), "cut" );
	deepEqual( Stem("cutter"), "cutter" );
	deepEqual( Stem("cutters"), "cutter" );
	deepEqual( Stem("cutthroat"), "cutthroat" );
	deepEqual( Stem("cutting"), "cut" );
	deepEqual( Stem("cuttle"), "cuttl" );
	deepEqual( Stem("cuvier"), "cuvier" );
	deepEqual( Stem("cycle"), "cycl" );
	deepEqual( Stem("cycles"), "cycl" );
	deepEqual( Stem("cyclopean"), "cyclopean" );
	deepEqual( Stem("cylinder"), "cylind" );
	deepEqual( Stem("cylinders"), "cylind" );
	deepEqual( Stem("cylindrical"), "cylindr" );
	deepEqual( Stem("cymbal"), "cymbal" );
	deepEqual( Stem("cymindis"), "cymindi" );
	deepEqual( Stem("cynara"), "cynara" );
	deepEqual( Stem("cynic"), "cynic" );
	deepEqual( Stem("cynical"), "cynic" );
	deepEqual( Stem("cynicism"), "cynic" );
	deepEqual( Stem("cynucus"), "cynucus" );
	deepEqual( Stem("cyperus"), "cyperus" );
	deepEqual( Stem("cypress"), "cypress" );
	deepEqual( Stem("cyprus"), "cyprus" );
	deepEqual( Stem("cyrus"), "cyrus" );
	deepEqual( Stem("cyttaria"), "cyttaria" );
	deepEqual( Stem("d"), "d" );
	deepEqual( Stem("da"), "da" );
	deepEqual( Stem("daark"), "daark" );
	deepEqual( Stem("dab"), "dab" );
	deepEqual( Stem("dabber"), "dabber" );
	deepEqual( Stem("dabbing"), "dab" );
	deepEqual( Stem("dabbled"), "dabbl" );
	deepEqual( Stem("dabblers"), "dabbler" );
	deepEqual( Stem("dabbling"), "dabbl" );
	deepEqual( Stem("dabs"), "dab" );
	deepEqual( Stem("dacelo"), "dacelo" );
	deepEqual( Stem("dacia"), "dacia" );
	deepEqual( Stem("dadass"), "dadass" );
	deepEqual( Stem("daft"), "daft" );
	deepEqual( Stem("dagestan"), "dagestan" );
	deepEqual( Stem("dagger"), "dagger" );
	deepEqual( Stem("daggers"), "dagger" );
	deepEqual( Stem("dail"), "dail" );
	deepEqual( Stem("daily"), "daili" );
	deepEqual( Stem("dainties"), "dainti" );
	deepEqual( Stem("daintily"), "daintili" );
	deepEqual( Stem("dainty"), "dainti" );
	deepEqual( Stem("dairy"), "dairi" );
	deepEqual( Stem("dais"), "dai" );
	deepEqual( Stem("daisy"), "daisi" );
	deepEqual( Stem("dale"), "dale" );
	deepEqual( Stem("dalliance"), "dallianc" );
	deepEqual( Stem("dallied"), "dalli" );
	deepEqual( Stem("dally"), "dalli" );
	deepEqual( Stem("damage"), "damag" );
	deepEqual( Stem("damaged"), "damag" );
	deepEqual( Stem("damages"), "damag" );
	deepEqual( Stem("damaging"), "damag" );
	deepEqual( Stem("damask"), "damask" );
	deepEqual( Stem("dame"), "dame" );
	deepEqual( Stem("dames"), "dame" );
	deepEqual( Stem("damme"), "damm" );
	deepEqual( Stem("dammed"), "dam" );
	deepEqual( Stem("damn"), "damn" );
	deepEqual( Stem("damnable"), "damnabl" );
	deepEqual( Stem("damnably"), "damnabl" );
	deepEqual( Stem("damnation"), "damnat" );
	deepEqual( Stem("damnatory"), "damnatori" );
	deepEqual( Stem("damned"), "damn" );
	deepEqual( Stem("damp"), "damp" );
	deepEqual( Stem("damped"), "damp" );
	deepEqual( Stem("damper"), "damper" );
	deepEqual( Stem("dampest"), "dampest" );
	deepEqual( Stem("dampier"), "dampier" );
	deepEqual( Stem("damping"), "damp" );
	deepEqual( Stem("dampness"), "damp" );
	deepEqual( Stem("damsel"), "damsel" );
	deepEqual( Stem("damsels"), "damsel" );
	deepEqual( Stem("dan"), "dan" );
	deepEqual( Stem("dance"), "danc" );
	deepEqual( Stem("danced"), "danc" );
	deepEqual( Stem("dancer"), "dancer" );
	deepEqual( Stem("dancers"), "dancer" );
	deepEqual( Stem("dances"), "danc" );
	deepEqual( Stem("dancing"), "danc" );
	deepEqual( Stem("dancings"), "danc" );
	deepEqual( Stem("dandified"), "dandifi" );
	deepEqual( Stem("dandling"), "dandl" );
	deepEqual( Stem("dandy"), "dandi" );
	deepEqual( Stem("dandyism"), "dandyism" );
	deepEqual( Stem("dang"), "dang" );
	deepEqual( Stem("danger"), "danger" );
	deepEqual( Stem("dangerous"), "danger" );
	deepEqual( Stem("dangerously"), "danger" );
	deepEqual( Stem("dangers"), "danger" );
	deepEqual( Stem("dangle"), "dangl" );
	deepEqual( Stem("dangling"), "dangl" );
	deepEqual( Stem("daniel"), "daniel" );
	deepEqual( Stem("daniell"), "daniel" );
	deepEqual( Stem("dank"), "dank" );
	deepEqual( Stem("danke"), "dank" );
	deepEqual( Stem("dans"), "dan" );
	deepEqual( Stem("danse"), "dans" );
	deepEqual( Stem("dante"), "dant" );
	deepEqual( Stem("dapibus"), "dapibus" );
	deepEqual( Stem("darby"), "darbi" );
	deepEqual( Stem("dare"), "dare" );
	deepEqual( Stem("dared"), "dare" );
	deepEqual( Stem("daren"), "daren" );
	deepEqual( Stem("dares"), "dare" );
	deepEqual( Stem("daresay"), "daresay" );
	deepEqual( Stem("daring"), "dare" );
	deepEqual( Stem("dark"), "dark" );
	deepEqual( Stem("darken"), "darken" );
	deepEqual( Stem("darkened"), "darken" );
	deepEqual( Stem("darkening"), "darken" );
	deepEqual( Stem("darkens"), "darken" );
	deepEqual( Stem("darker"), "darker" );
	deepEqual( Stem("darkest"), "darkest" );
	deepEqual( Stem("darkly"), "dark" );
	deepEqual( Stem("darkness"), "dark" );
	deepEqual( Stem("darling"), "darl" );
	deepEqual( Stem("darlings"), "darl" );
	deepEqual( Stem("darn"), "darn" );
	deepEqual( Stem("darned"), "darn" );
	deepEqual( Stem("darning"), "darn" );
	deepEqual( Stem("dart"), "dart" );
	deepEqual( Stem("darted"), "dart" );
	deepEqual( Stem("darting"), "dart" );
	deepEqual( Stem("darts"), "dart" );
	deepEqual( Stem("darwin"), "darwin" );
	deepEqual( Stem("darwinian"), "darwinian" );
	deepEqual( Stem("darwinii"), "darwinii" );
	deepEqual( Stem("darya"), "darya" );
	deepEqual( Stem("das"), "das" );
	deepEqual( Stem("dash"), "dash" );
	deepEqual( Stem("dashed"), "dash" );
	deepEqual( Stem("dashes"), "dash" );
	deepEqual( Stem("dashing"), "dash" );
	deepEqual( Stem("dastard"), "dastard" );
	deepEqual( Stem("dastardly"), "dastard" );
	deepEqual( Stem("dasypus"), "dasypus" );
	deepEqual( Stem("data"), "data" );
	deepEqual( Stem("date"), "date" );
	deepEqual( Stem("dated"), "date" );
	deepEqual( Stem("dates"), "date" );
	deepEqual( Stem("dating"), "date" );
	deepEqual( Stem("daubed"), "daub" );
	deepEqual( Stem("daubeny"), "daubeni" );
	deepEqual( Stem("daubney"), "daubney" );
	deepEqual( Stem("daughter"), "daughter" );
	deepEqual( Stem("daughters"), "daughter" );
	deepEqual( Stem("daunt"), "daunt" );
	deepEqual( Stem("daunted"), "daunt" );
	deepEqual( Stem("daverous"), "daver" );
	deepEqual( Stem("david"), "david" );
	deepEqual( Stem("davies"), "davi" );
	deepEqual( Stem("davis"), "davi" );
	deepEqual( Stem("davy"), "davi" );
	deepEqual( Stem("dawdle"), "dawdl" );
	deepEqual( Stem("dawdling"), "dawdl" );
	deepEqual( Stem("dawlish"), "dawlish" );
	deepEqual( Stem("dawn"), "dawn" );
	deepEqual( Stem("dawned"), "dawn" );
	deepEqual( Stem("dawning"), "dawn" );
	deepEqual( Stem("dawns"), "dawn" );
	deepEqual( Stem("day"), "day" );
	deepEqual( Stem("daybreak"), "daybreak" );
	deepEqual( Stem("daylight"), "daylight" );
	deepEqual( Stem("days"), "day" );
	deepEqual( Stem("daytime"), "daytim" );
	deepEqual( Stem("dayvle"), "dayvl" );
	deepEqual( Stem("dazed"), "daze" );
	deepEqual( Stem("dazzle"), "dazzl" );
	deepEqual( Stem("dazzled"), "dazzl" );
	deepEqual( Stem("dazzler"), "dazzler" );
	deepEqual( Stem("dazzling"), "dazzl" );
	deepEqual( Stem("dcar"), "dcar" );
	deepEqual( Stem("de"), "de" );
	deepEqual( Stem("dea"), "dea" );
	deepEqual( Stem("dead"), "dead" );
	deepEqual( Stem("deaden"), "deaden" );
	deepEqual( Stem("deadened"), "deaden" );
	deepEqual( Stem("deadens"), "deaden" );
	deepEqual( Stem("deadliest"), "deadliest" );
	deepEqual( Stem("deadlock"), "deadlock" );
	deepEqual( Stem("deadly"), "dead" );
	deepEqual( Stem("deadwood"), "deadwood" );
	deepEqual( Stem("deaf"), "deaf" );
	deepEqual( Stem("deafen"), "deafen" );
	deepEqual( Stem("deafening"), "deafen" );
	deepEqual( Stem("deafness"), "deaf" );
	deepEqual( Stem("deal"), "deal" );
	deepEqual( Stem("dealer"), "dealer" );
	deepEqual( Stem("dealers"), "dealer" );
	deepEqual( Stem("dealing"), "deal" );
	deepEqual( Stem("dealings"), "deal" );
	deepEqual( Stem("dealt"), "dealt" );
	deepEqual( Stem("dean"), "dean" );
	deepEqual( Stem("deane"), "dean" );
	deepEqual( Stem("deans"), "dean" );
	deepEqual( Stem("dear"), "dear" );
	deepEqual( Stem("dearer"), "dearer" );
	deepEqual( Stem("dearest"), "dearest" );
	deepEqual( Stem("dearly"), "dear" );
	deepEqual( Stem("dears"), "dear" );
	deepEqual( Stem("dearth"), "dearth" );
	deepEqual( Stem("dease"), "deas" );
	deepEqual( Stem("death"), "death" );
	deepEqual( Stem("deathbed"), "deathb" );
	deepEqual( Stem("deathless"), "deathless" );
	deepEqual( Stem("deathlike"), "deathlik" );
	deepEqual( Stem("deathly"), "death" );
	deepEqual( Stem("deaths"), "death" );
	deepEqual( Stem("debacle"), "debacl" );
	deepEqual( Stem("debar"), "debar" );
	deepEqual( Stem("debarred"), "debar" );
	deepEqual( Stem("debase"), "debas" );
	deepEqual( Stem("debased"), "debas" );
	deepEqual( Stem("debasement"), "debas" );
	deepEqual( Stem("debasing"), "debas" );
	deepEqual( Stem("debate"), "debat" );
	deepEqual( Stem("debated"), "debat" );
	deepEqual( Stem("debater"), "debat" );
	deepEqual( Stem("debates"), "debat" );
	deepEqual( Stem("debating"), "debat" );
	deepEqual( Stem("debauch"), "debauch" );
	deepEqual( Stem("debauchery"), "debaucheri" );
	deepEqual( Stem("debilitated"), "debilit" );
	deepEqual( Stem("debility"), "debil" );
	deepEqual( Stem("debris"), "debri" );
	deepEqual( Stem("debt"), "debt" );
	deepEqual( Stem("debtor"), "debtor" );
	deepEqual( Stem("debtors"), "debtor" );
	deepEqual( Stem("debts"), "debt" );
	deepEqual( Stem("dec"), "dec" );
	deepEqual( Stem("decamp"), "decamp" );
	deepEqual( Stem("decamped"), "decamp" );
	deepEqual( Stem("decanter"), "decant" );
	deepEqual( Stem("decanters"), "decant" );
	deepEqual( Stem("decapitated"), "decapit" );
	deepEqual( Stem("decay"), "decay" );
	deepEqual( Stem("decayed"), "decay" );
	deepEqual( Stem("decaying"), "decay" );
	deepEqual( Stem("decease"), "deceas" );
	deepEqual( Stem("deceased"), "deceas" );
	deepEqual( Stem("deceit"), "deceit" );
	deepEqual( Stem("deceitful"), "deceit" );
	deepEqual( Stem("deceitfulness"), "deceit" );
	deepEqual( Stem("deceive"), "deceiv" );
	deepEqual( Stem("deceived"), "deceiv" );
	deepEqual( Stem("deceivers"), "deceiv" );
	deepEqual( Stem("deceives"), "deceiv" );
	deepEqual( Stem("deceiving"), "deceiv" );
	deepEqual( Stem("december"), "decemb" );
	deepEqual( Stem("decencies"), "decenc" );
	deepEqual( Stem("decency"), "decenc" );
	deepEqual( Stem("decent"), "decent" );
	deepEqual( Stem("decently"), "decent" );
	deepEqual( Stem("deception"), "decept" );
	deepEqual( Stem("deceptions"), "decept" );
	deepEqual( Stem("deceptive"), "decept" );
	deepEqual( Stem("decide"), "decid" );
	deepEqual( Stem("decided"), "decid" );
	deepEqual( Stem("decidedly"), "decid" );
	deepEqual( Stem("decides"), "decid" );
	deepEqual( Stem("deciding"), "decid" );
	deepEqual( Stem("deciduous"), "decidu" );
	deepEqual( Stem("decimal"), "decim" );
	deepEqual( Stem("decimals"), "decim" );
	deepEqual( Stem("decipher"), "deciph" );
	deepEqual( Stem("deciphered"), "deciph" );
	deepEqual( Stem("deciphering"), "deciph" );
	deepEqual( Stem("decision"), "decis" );
	deepEqual( Stem("decisions"), "decis" );
	deepEqual( Stem("decisive"), "decis" );
	deepEqual( Stem("decisively"), "decis" );
	deepEqual( Stem("deck"), "deck" );
	deepEqual( Stem("decked"), "deck" );
	deepEqual( Stem("decking"), "deck" );
	deepEqual( Stem("declaim"), "declaim" );
	deepEqual( Stem("declaimed"), "declaim" );
	deepEqual( Stem("declamation"), "declam" );
	deepEqual( Stem("declaration"), "declar" );
	deepEqual( Stem("declarations"), "declar" );
	deepEqual( Stem("declaratory"), "declaratori" );
	deepEqual( Stem("declare"), "declar" );
	deepEqual( Stem("declared"), "declar" );
	deepEqual( Stem("declares"), "declar" );
	deepEqual( Stem("declaring"), "declar" );
	deepEqual( Stem("decline"), "declin" );
	deepEqual( Stem("declined"), "declin" );
	deepEqual( Stem("declines"), "declin" );
	deepEqual( Stem("declining"), "declin" );
	deepEqual( Stem("decompose"), "decompos" );
	deepEqual( Stem("decomposed"), "decompos" );
	deepEqual( Stem("decomposing"), "decompos" );
	deepEqual( Stem("decomposition"), "decomposit" );
	deepEqual( Stem("decorate"), "decor" );
	deepEqual( Stem("decorated"), "decor" );
	deepEqual( Stem("decorates"), "decor" );
	deepEqual( Stem("decoration"), "decor" );
	deepEqual( Stem("decorations"), "decor" );
	deepEqual( Stem("decorative"), "decor" );
	deepEqual( Stem("decorous"), "decor" );
	deepEqual( Stem("decorously"), "decor" );
	deepEqual( Stem("decorum"), "decorum" );
	deepEqual( Stem("decoy"), "decoy" );
	deepEqual( Stem("decrease"), "decreas" );
	deepEqual( Stem("decreased"), "decreas" );
	deepEqual( Stem("decreasing"), "decreas" );
	deepEqual( Stem("decree"), "decre" );
	deepEqual( Stem("decreed"), "decre" );
	deepEqual( Stem("decrees"), "decre" );
	deepEqual( Stem("decrepit"), "decrepit" );
	deepEqual( Stem("decrepitude"), "decrepitud" );
	deepEqual( Stem("dedicated"), "dedic" );
	deepEqual( Stem("dedlock"), "dedlock" );
	deepEqual( Stem("dedlocks"), "dedlock" );
	deepEqual( Stem("deduced"), "deduc" );
	deepEqual( Stem("deducible"), "deduc" );
	deepEqual( Stem("deduct"), "deduct" );
	deepEqual( Stem("deducted"), "deduct" );
	deepEqual( Stem("deducting"), "deduct" );
	deepEqual( Stem("deduction"), "deduct" );
	deepEqual( Stem("deductions"), "deduct" );
	deepEqual( Stem("dee"), "dee" );
	deepEqual( Stem("deead"), "deead" );
	deepEqual( Stem("deed"), "deed" );
	deepEqual( Stem("deedn"), "deedn" );
	deepEqual( Stem("deeds"), "deed" );
	deepEqual( Stem("deein"), "deein" );
	deepEqual( Stem("deem"), "deem" );
	deepEqual( Stem("deemed"), "deem" );
	deepEqual( Stem("deeming"), "deem" );
	deepEqual( Stem("deems"), "deem" );
	deepEqual( Stem("deep"), "deep" );
	deepEqual( Stem("deepen"), "deepen" );
	deepEqual( Stem("deepened"), "deepen" );
	deepEqual( Stem("deepening"), "deepen" );
	deepEqual( Stem("deepens"), "deepen" );
	deepEqual( Stem("deeper"), "deeper" );
	deepEqual( Stem("deepest"), "deepest" );
	deepEqual( Stem("deeply"), "deepli" );
	deepEqual( Stem("deer"), "deer" );
	deepEqual( Stem("deering"), "deer" );
	deepEqual( Stem("defacing"), "defac" );
	deepEqual( Stem("defalcation"), "defalc" );
	deepEqual( Stem("default"), "default" );
	deepEqual( Stem("defeat"), "defeat" );
	deepEqual( Stem("defeated"), "defeat" );
	deepEqual( Stem("defect"), "defect" );
	deepEqual( Stem("defection"), "defect" );
	deepEqual( Stem("defective"), "defect" );
	deepEqual( Stem("defects"), "defect" );
	deepEqual( Stem("defence"), "defenc" );
	deepEqual( Stem("defenceless"), "defenceless" );
	deepEqual( Stem("defend"), "defend" );
	deepEqual( Stem("defendant"), "defend" );
	deepEqual( Stem("defendants"), "defend" );
	deepEqual( Stem("defended"), "defend" );
	deepEqual( Stem("defenders"), "defend" );
	deepEqual( Stem("defending"), "defend" );
	deepEqual( Stem("defer"), "defer" );
	deepEqual( Stem("deference"), "defer" );
	deepEqual( Stem("deferential"), "deferenti" );
	deepEqual( Stem("deferentially"), "deferenti" );
	deepEqual( Stem("deferred"), "defer" );
	deepEqual( Stem("deferring"), "defer" );
	deepEqual( Stem("defers"), "defer" );
	deepEqual( Stem("defiance"), "defianc" );
	deepEqual( Stem("defiances"), "defianc" );
	deepEqual( Stem("defiant"), "defiant" );
	deepEqual( Stem("defiantly"), "defiant" );
	deepEqual( Stem("deficiencies"), "defici" );
	deepEqual( Stem("deficiency"), "defici" );
	deepEqual( Stem("deficient"), "defici" );
	deepEqual( Stem("defied"), "defi" );
	deepEqual( Stem("defies"), "defi" );
	deepEqual( Stem("defile"), "defil" );
	deepEqual( Stem("defiled"), "defil" );
	deepEqual( Stem("defiles"), "defil" );
	deepEqual( Stem("define"), "defin" );
	deepEqual( Stem("defined"), "defin" );
	deepEqual( Stem("defining"), "defin" );
	deepEqual( Stem("definite"), "definit" );
	deepEqual( Stem("definitely"), "definit" );
	deepEqual( Stem("definition"), "definit" );
	deepEqual( Stem("definitions"), "definit" );
	deepEqual( Stem("definitively"), "definit" );
	deepEqual( Stem("deflected"), "deflect" );
	deepEqual( Stem("deflecting"), "deflect" );
	deepEqual( Stem("deformed"), "deform" );
	deepEqual( Stem("deformities"), "deform" );
	deepEqual( Stem("deformity"), "deform" );
	deepEqual( Stem("defrauded"), "defraud" );
	deepEqual( Stem("defrauding"), "defraud" );
	deepEqual( Stem("defray"), "defray" );
	deepEqual( Stem("defrayed"), "defray" );
	deepEqual( Stem("defraying"), "defray" );
	deepEqual( Stem("deftly"), "deft" );
	deepEqual( Stem("defunct"), "defunct" );
	deepEqual( Stem("defy"), "defi" );
	deepEqual( Stem("defying"), "defi" );
	deepEqual( Stem("degage"), "degag" );
	deepEqual( Stem("degenerate"), "degener" );
	deepEqual( Stem("degenerated"), "degener" );
	deepEqual( Stem("degenerating"), "degener" );
	deepEqual( Stem("degeneration"), "degener" );
	deepEqual( Stem("degradation"), "degrad" );
	deepEqual( Stem("degrade"), "degrad" );
	deepEqual( Stem("degraded"), "degrad" );
	deepEqual( Stem("degrading"), "degrad" );
	deepEqual( Stem("degree"), "degre" );
	deepEqual( Stem("degrees"), "degre" );
	deepEqual( Stem("degs"), "deg" );
	deepEqual( Stem("deified"), "deifi" );
	deepEqual( Stem("deigned"), "deign" );
	deepEqual( Stem("deigning"), "deign" );
	deepEqual( Stem("deinornis"), "deinorni" );
	deepEqual( Stem("deity"), "deiti" );
	deepEqual( Stem("dejected"), "deject" );
	deepEqual( Stem("dejectedly"), "deject" );
	deepEqual( Stem("dejection"), "deject" );
	deepEqual( Stem("del"), "del" );
	deepEqual( Stem("delaval"), "delav" );
	deepEqual( Stem("delavals"), "delav" );
	deepEqual( Stem("delay"), "delay" );
	deepEqual( Stem("delayed"), "delay" );
	deepEqual( Stem("delaying"), "delay" );
	deepEqual( Stem("delays"), "delay" );
	deepEqual( Stem("delectable"), "delect" );
	deepEqual( Stem("delegates"), "deleg" );
	deepEqual( Stem("deleterious"), "deleteri" );
	deepEqual( Stem("deliberate"), "deliber" );
	deepEqual( Stem("deliberated"), "deliber" );
	deepEqual( Stem("deliberately"), "deliber" );
	deepEqual( Stem("deliberating"), "deliber" );
	deepEqual( Stem("deliberation"), "deliber" );
	deepEqual( Stem("deliberations"), "deliber" );
	deepEqual( Stem("delicacies"), "delicaci" );
	deepEqual( Stem("delicacy"), "delicaci" );
	deepEqual( Stem("delicate"), "delic" );
	deepEqual( Stem("delicately"), "delic" );
	deepEqual( Stem("delicater"), "delicat" );
	deepEqual( Stem("delicious"), "delici" );
	deepEqual( Stem("deliciously"), "delici" );
	deepEqual( Stem("delight"), "delight" );
	deepEqual( Stem("delighted"), "delight" );
	deepEqual( Stem("delightful"), "delight" );
	deepEqual( Stem("delightfully"), "delight" );
	deepEqual( Stem("delighting"), "delight" );
	deepEqual( Stem("delights"), "delight" );
	deepEqual( Stem("delinquency"), "delinqu" );
	deepEqual( Stem("deliquescent"), "deliquesc" );
	deepEqual( Stem("delirious"), "deliri" );
	deepEqual( Stem("deliriously"), "deliri" );
	deepEqual( Stem("delirium"), "delirium" );
	deepEqual( Stem("deliver"), "deliv" );
	deepEqual( Stem("deliverance"), "deliver" );
	deepEqual( Stem("delivered"), "deliv" );
	deepEqual( Stem("deliverer"), "deliver" );
	deepEqual( Stem("delivering"), "deliv" );
	deepEqual( Stem("delivers"), "deliv" );
	deepEqual( Stem("delivery"), "deliveri" );
	deepEqual( Stem("delude"), "delud" );
	deepEqual( Stem("deluded"), "delud" );
	deepEqual( Stem("deludes"), "delud" );
	deepEqual( Stem("deluding"), "delud" );
	deepEqual( Stem("deluge"), "delug" );
	deepEqual( Stem("deluges"), "delug" );
	deepEqual( Stem("delusion"), "delus" );
	deepEqual( Stem("delusions"), "delus" );
	deepEqual( Stem("delusive"), "delus" );
	deepEqual( Stem("delving"), "delv" );
	deepEqual( Stem("dem"), "dem" );
	deepEqual( Stem("demagogue"), "demagogu" );
	deepEqual( Stem("demand"), "demand" );
	deepEqual( Stem("demanded"), "demand" );
	deepEqual( Stem("demanding"), "demand" );
	deepEqual( Stem("demands"), "demand" );
	deepEqual( Stem("demarlii"), "demarlii" );
	deepEqual( Stem("demd"), "demd" );
	deepEqual( Stem("demder"), "demder" );
	deepEqual( Stem("demdest"), "demdest" );
	deepEqual( Stem("demeaning"), "demean" );
	deepEqual( Stem("demeanour"), "demeanour" );
	deepEqual( Stem("demented"), "dement" );
	deepEqual( Stem("dementyev"), "dementyev" );
	deepEqual( Stem("demerits"), "demerit" );
	deepEqual( Stem("demersa"), "demersa" );
	deepEqual( Stem("demi"), "demi" );
	deepEqual( Stem("demigods"), "demigod" );
	deepEqual( Stem("demmit"), "demmit" );
	deepEqual( Stem("demneble"), "demnebl" );
	deepEqual( Stem("demnebly"), "demnebl" );
	deepEqual( Stem("demnition"), "demnit" );
	deepEqual( Stem("democracy"), "democraci" );
	deepEqual( Stem("democratic"), "democrat" );
	deepEqual( Stem("demolished"), "demolish" );
	deepEqual( Stem("demolition"), "demolit" );
	deepEqual( Stem("demon"), "demon" );
	deepEqual( Stem("demoniacs"), "demoniac" );
	deepEqual( Stem("demons"), "demon" );
	deepEqual( Stem("demonstrate"), "demonstr" );
	deepEqual( Stem("demonstrated"), "demonstr" );
	deepEqual( Stem("demonstrates"), "demonstr" );
	deepEqual( Stem("demonstration"), "demonstr" );
	deepEqual( Stem("demonstrations"), "demonstr" );
	deepEqual( Stem("demonstrative"), "demonstr" );
	deepEqual( Stem("demoralisation"), "demoralis" );
	deepEqual( Stem("demoralize"), "demor" );
	deepEqual( Stem("demoralized"), "demor" );
	deepEqual( Stem("demur"), "demur" );
	deepEqual( Stem("demure"), "demur" );
	deepEqual( Stem("demurely"), "demur" );
	deepEqual( Stem("demurred"), "demur" );
	deepEqual( Stem("den"), "den" );
	deepEqual( Stem("denial"), "denial" );
	deepEqual( Stem("denied"), "deni" );
	deepEqual( Stem("denies"), "deni" );
	deepEqual( Stem("denizens"), "denizen" );
	deepEqual( Stem("denmark"), "denmark" );
	deepEqual( Stem("dennison"), "dennison" );
	deepEqual( Stem("denominated"), "denomin" );
	deepEqual( Stem("denomination"), "denomin" );
	deepEqual( Stem("denominations"), "denomin" );
	deepEqual( Stem("denote"), "denot" );
	deepEqual( Stem("denoted"), "denot" );
	deepEqual( Stem("denotes"), "denot" );
	deepEqual( Stem("denoting"), "denot" );
	deepEqual( Stem("denouement"), "denouement" );
	deepEqual( Stem("denounce"), "denounc" );
	deepEqual( Stem("denounced"), "denounc" );
	deepEqual( Stem("denouncing"), "denounc" );
	deepEqual( Stem("dens"), "den" );
	deepEqual( Stem("dense"), "dens" );
	deepEqual( Stem("densely"), "dens" );
	deepEqual( Stem("denser"), "denser" );
	deepEqual( Stem("densest"), "densest" );
	deepEqual( Stem("density"), "densiti" );
	deepEqual( Stem("dent"), "dent" );
	deepEqual( Stem("dentist"), "dentist" );
	deepEqual( Stem("dentistical"), "dentist" );
	deepEqual( Stem("denudation"), "denud" );
	deepEqual( Stem("denuded"), "denud" );
	deepEqual( Stem("denuding"), "denud" );
	deepEqual( Stem("denunciation"), "denunci" );
	deepEqual( Stem("denunciations"), "denunci" );
	deepEqual( Stem("deny"), "deni" );
	deepEqual( Stem("denying"), "deni" );
	deepEqual( Stem("deodara"), "deodara" );
	deepEqual( Stem("deos"), "deo" );
	deepEqual( Stem("depairture"), "depairtur" );
	deepEqual( Stem("depart"), "depart" );
	deepEqual( Stem("departed"), "depart" );
	deepEqual( Stem("departing"), "depart" );
	deepEqual( Stem("department"), "depart" );
	deepEqual( Stem("departs"), "depart" );
	deepEqual( Stem("departure"), "departur" );
	deepEqual( Stem("departures"), "departur" );
	deepEqual( Stem("depend"), "depend" );
	deepEqual( Stem("dependant"), "depend" );
	deepEqual( Stem("dependants"), "depend" );
	deepEqual( Stem("depended"), "depend" );
	deepEqual( Stem("dependence"), "depend" );
	deepEqual( Stem("dependencies"), "depend" );
	deepEqual( Stem("dependent"), "depend" );
	deepEqual( Stem("dependents"), "depend" );
	deepEqual( Stem("depending"), "depend" );
	deepEqual( Stem("depends"), "depend" );
	deepEqual( Stem("depict"), "depict" );
	deepEqual( Stem("depicted"), "depict" );
	deepEqual( Stem("depicter"), "depict" );
	deepEqual( Stem("depicts"), "depict" );
	deepEqual( Stem("deplorable"), "deplor" );
	deepEqual( Stem("deplorably"), "deplor" );
	deepEqual( Stem("deplore"), "deplor" );
	deepEqual( Stem("deplored"), "deplor" );
	deepEqual( Stem("deploring"), "deplor" );
	deepEqual( Stem("deploy"), "deploy" );
	deepEqual( Stem("deport"), "deport" );
	deepEqual( Stem("deportation"), "deport" );
	deepEqual( Stem("deporting"), "deport" );
	deepEqual( Stem("deportment"), "deport" );
	deepEqual( Stem("depose"), "depos" );
	deepEqual( Stem("deposed"), "depos" );
	deepEqual( Stem("deposer"), "depos" );
	deepEqual( Stem("deposit"), "deposit" );
	deepEqual( Stem("deposited"), "deposit" );
	deepEqual( Stem("depositing"), "deposit" );
	deepEqual( Stem("deposition"), "deposit" );
	deepEqual( Stem("depository"), "depositori" );
	deepEqual( Stem("deposits"), "deposit" );
	deepEqual( Stem("depraved"), "deprav" );
	deepEqual( Stem("depraving"), "deprav" );
	deepEqual( Stem("depravity"), "deprav" );
	deepEqual( Stem("deprecating"), "deprec" );
	deepEqual( Stem("deprecation"), "deprec" );
	deepEqual( Stem("depreciate"), "depreci" );
	deepEqual( Stem("depreciated"), "depreci" );
	deepEqual( Stem("depreciating"), "depreci" );
	deepEqual( Stem("depreciation"), "depreci" );
	deepEqual( Stem("depress"), "depress" );
	deepEqual( Stem("depressed"), "depress" );
	deepEqual( Stem("depresses"), "depress" );
	deepEqual( Stem("depressing"), "depress" );
	deepEqual( Stem("depression"), "depress" );
	deepEqual( Stem("depressions"), "depress" );
	deepEqual( Stem("deprivation"), "depriv" );
	deepEqual( Stem("deprive"), "depriv" );
	deepEqual( Stem("deprived"), "depriv" );
	deepEqual( Stem("deprives"), "depriv" );
	deepEqual( Stem("depriving"), "depriv" );
	deepEqual( Stem("deptford"), "deptford" );
	deepEqual( Stem("depth"), "depth" );
	deepEqual( Stem("depths"), "depth" );
	deepEqual( Stem("deputation"), "deput" );
	deepEqual( Stem("deputations"), "deput" );
	deepEqual( Stem("depute"), "deput" );
	deepEqual( Stem("deputed"), "deput" );
	deepEqual( Stem("deputies"), "deputi" );
	deepEqual( Stem("deputy"), "deputi" );
	deepEqual( Stem("der"), "der" );
	deepEqual( Stem("deranged"), "derang" );
	deepEqual( Stem("derangement"), "derang" );
	deepEqual( Stem("derby"), "derbi" );
	deepEqual( Stem("derided"), "derid" );
	deepEqual( Stem("derision"), "deris" );
	deepEqual( Stem("derisive"), "deris" );
	deepEqual( Stem("derisively"), "deris" );
	deepEqual( Stem("derivable"), "deriv" );
	deepEqual( Stem("derivation"), "deriv" );
	deepEqual( Stem("derive"), "deriv" );
	deepEqual( Stem("derived"), "deriv" );
	deepEqual( Stem("derives"), "deriv" );
	deepEqual( Stem("deriving"), "deriv" );
	deepEqual( Stem("dermestes"), "dermest" );
	deepEqual( Stem("derogatory"), "derogatori" );
	deepEqual( Stem("derwent"), "derwent" );
	deepEqual( Stem("des"), "des" );
	deepEqual( Stem("desc"), "desc" );
	deepEqual( Stem("descanted"), "descant" );
	deepEqual( Stem("descanting"), "descant" );
	deepEqual( Stem("descen"), "descen" );
	deepEqual( Stem("descend"), "descend" );
	deepEqual( Stem("descendant"), "descend" );
	deepEqual( Stem("descendants"), "descend" );
	deepEqual( Stem("descended"), "descend" );
	deepEqual( Stem("descendin"), "descendin" );
	deepEqual( Stem("descending"), "descend" );
	deepEqual( Stem("descends"), "descend" );
	deepEqual( Stem("descent"), "descent" );
	deepEqual( Stem("describe"), "describ" );
	deepEqual( Stem("described"), "describ" );
	deepEqual( Stem("describes"), "describ" );
	deepEqual( Stem("describing"), "describ" );
	deepEqual( Stem("descried"), "descri" );
	deepEqual( Stem("descries"), "descri" );
	deepEqual( Stem("descrip"), "descrip" );
	deepEqual( Stem("description"), "descript" );
	deepEqual( Stem("descriptions"), "descript" );
	deepEqual( Stem("descriptive"), "descript" );
	deepEqual( Stem("descripts"), "descript" );
	deepEqual( Stem("descry"), "descri" );
	deepEqual( Stem("desert"), "desert" );
	deepEqual( Stem("deserted"), "desert" );
	deepEqual( Stem("deserting"), "desert" );
	deepEqual( Stem("desertion"), "desert" );
	deepEqual( Stem("deserts"), "desert" );
	deepEqual( Stem("deserve"), "deserv" );
	deepEqual( Stem("deserved"), "deserv" );
	deepEqual( Stem("deservedly"), "deserv" );
	deepEqual( Stem("deserves"), "deserv" );
	deepEqual( Stem("deserving"), "deserv" );
	deepEqual( Stem("design"), "design" );
	deepEqual( Stem("designates"), "design" );
	deepEqual( Stem("designation"), "design" );
	deepEqual( Stem("designed"), "design" );
	deepEqual( Stem("designer"), "design" );
	deepEqual( Stem("designing"), "design" );
	deepEqual( Stem("designs"), "design" );
	deepEqual( Stem("desirable"), "desir" );
	deepEqual( Stem("desire"), "desir" );
	deepEqual( Stem("desired"), "desir" );
	deepEqual( Stem("desires"), "desir" );
	deepEqual( Stem("desiring"), "desir" );
	deepEqual( Stem("desirous"), "desir" );
	deepEqual( Stem("desist"), "desist" );
	deepEqual( Stem("desisted"), "desist" );
	deepEqual( Stem("desists"), "desist" );
	deepEqual( Stem("desk"), "desk" );
	deepEqual( Stem("desks"), "desk" );
	deepEqual( Stem("desmodus"), "desmodus" );
	deepEqual( Stem("desolate"), "desol" );
	deepEqual( Stem("desolated"), "desol" );
	deepEqual( Stem("desolately"), "desol" );
	deepEqual( Stem("desolateness"), "desol" );
	deepEqual( Stem("desolation"), "desol" );
	deepEqual( Stem("desolee"), "desole" );
	deepEqual( Stem("despair"), "despair" );
	deepEqual( Stem("despaired"), "despair" );
	deepEqual( Stem("despairing"), "despair" );
	deepEqual( Stem("despairingly"), "despair" );
	deepEqual( Stem("despairs"), "despair" );
	deepEqual( Stem("despatch"), "despatch" );
	deepEqual( Stem("despatched"), "despatch" );
	deepEqual( Stem("desperate"), "desper" );
	deepEqual( Stem("desperately"), "desper" );
	deepEqual( Stem("desperation"), "desper" );
	deepEqual( Stem("despicable"), "despic" );
	deepEqual( Stem("despicably"), "despic" );
	deepEqual( Stem("despise"), "despis" );
	deepEqual( Stem("despised"), "despis" );
	deepEqual( Stem("despises"), "despis" );
	deepEqual( Stem("despising"), "despis" );
	deepEqual( Stem("despite"), "despit" );
	deepEqual( Stem("despoblado"), "despoblado" );
	deepEqual( Stem("despoil"), "despoil" );
	deepEqual( Stem("despoiled"), "despoil" );
	deepEqual( Stem("despond"), "despond" );
	deepEqual( Stem("desponded"), "despond" );
	deepEqual( Stem("despondence"), "despond" );
	deepEqual( Stem("despondency"), "despond" );
	deepEqual( Stem("despondent"), "despond" );
	deepEqual( Stem("despondently"), "despond" );
	deepEqual( Stem("desponding"), "despond" );
	deepEqual( Stem("despondingly"), "despond" );
	deepEqual( Stem("despot"), "despot" );
	deepEqual( Stem("despotic"), "despot" );
	deepEqual( Stem("despotism"), "despot" );
	deepEqual( Stem("dessert"), "dessert" );
	deepEqual( Stem("desserts"), "dessert" );
	deepEqual( Stem("destination"), "destin" );
	deepEqual( Stem("destinction"), "destinct" );
	deepEqual( Stem("destined"), "destin" );
	deepEqual( Stem("destinies"), "destini" );
	deepEqual( Stem("destiny"), "destini" );
	deepEqual( Stem("destitute"), "destitut" );
	deepEqual( Stem("destitution"), "destitut" );
	deepEqual( Stem("destro"), "destro" );
	deepEqual( Stem("destroy"), "destroy" );
	deepEqual( Stem("destroyed"), "destroy" );
	deepEqual( Stem("destroyer"), "destroy" );
	deepEqual( Stem("destroyers"), "destroy" );
	deepEqual( Stem("destroying"), "destroy" );
	deepEqual( Stem("destroys"), "destroy" );
	deepEqual( Stem("destruction"), "destruct" );
	deepEqual( Stem("destructive"), "destruct" );
	deepEqual( Stem("desultory"), "desultori" );
	deepEqual( Stem("det"), "det" );
	deepEqual( Stem("detach"), "detach" );
	deepEqual( Stem("detached"), "detach" );
	deepEqual( Stem("detaches"), "detach" );
	deepEqual( Stem("detachment"), "detach" );
	deepEqual( Stem("detail"), "detail" );
	deepEqual( Stem("detailed"), "detail" );
	deepEqual( Stem("details"), "detail" );
	deepEqual( Stem("detain"), "detain" );
	deepEqual( Stem("detained"), "detain" );
	deepEqual( Stem("detainer"), "detain" );
	deepEqual( Stem("detaining"), "detain" );
	deepEqual( Stem("detect"), "detect" );
	deepEqual( Stem("detected"), "detect" );
	deepEqual( Stem("detecting"), "detect" );
	deepEqual( Stem("detection"), "detect" );
	deepEqual( Stem("detective"), "detect" );
	deepEqual( Stem("detects"), "detect" );
	deepEqual( Stem("detenined"), "detenin" );
	deepEqual( Stem("detention"), "detent" );
	deepEqual( Stem("deter"), "deter" );
	deepEqual( Stem("deteriorate"), "deterior" );
	deepEqual( Stem("deteriorated"), "deterior" );
	deepEqual( Stem("deteriorating"), "deterior" );
	deepEqual( Stem("determination"), "determin" );
	deepEqual( Stem("determine"), "determin" );
	deepEqual( Stem("determined"), "determin" );
	deepEqual( Stem("determines"), "determin" );
	deepEqual( Stem("determining"), "determin" );
	deepEqual( Stem("deterred"), "deter" );
	deepEqual( Stem("detest"), "detest" );
	deepEqual( Stem("detestable"), "detest" );
	deepEqual( Stem("detestation"), "detest" );
	deepEqual( Stem("detested"), "detest" );
	deepEqual( Stem("detesting"), "detest" );
	deepEqual( Stem("dethronement"), "dethron" );
	deepEqual( Stem("detour"), "detour" );
	deepEqual( Stem("detract"), "detract" );
	deepEqual( Stem("detriment"), "detriment" );
	deepEqual( Stem("detrimental"), "detriment" );
	deepEqual( Stem("detritus"), "detritus" );
	deepEqual( Stem("deuce"), "deuc" );
	deepEqual( Stem("deuced"), "deuc" );
	deepEqual( Stem("deum"), "deum" );
	deepEqual( Stem("deus"), "deus" );
	deepEqual( Stem("deux"), "deux" );
	deepEqual( Stem("devastate"), "devast" );
	deepEqual( Stem("devastation"), "devast" );
	deepEqual( Stem("develop"), "develop" );
	deepEqual( Stem("developed"), "develop" );
	deepEqual( Stem("developes"), "develop" );
	deepEqual( Stem("developing"), "develop" );
	deepEqual( Stem("development"), "develop" );
	deepEqual( Stem("develops"), "develop" );
	deepEqual( Stem("deviated"), "deviat" );
	deepEqual( Stem("deviation"), "deviat" );
	deepEqual( Stem("device"), "devic" );
	deepEqual( Stem("devices"), "devic" );
	deepEqual( Stem("devil"), "devil" );
	deepEqual( Stem("devilish"), "devilish" );
	deepEqual( Stem("devilry"), "devilri" );
	deepEqual( Stem("devils"), "devil" );
	deepEqual( Stem("devious"), "devious" );
	deepEqual( Stem("devise"), "devis" );
	deepEqual( Stem("devised"), "devis" );
	deepEqual( Stem("deviser"), "devis" );
	deepEqual( Stem("devising"), "devis" );
	deepEqual( Stem("devoid"), "devoid" );
	deepEqual( Stem("devoir"), "devoir" );
	deepEqual( Stem("devolved"), "devolv" );
	deepEqual( Stem("devolves"), "devolv" );
	deepEqual( Stem("devon"), "devon" );
	deepEqual( Stem("devonian"), "devonian" );
	deepEqual( Stem("devonport"), "devonport" );
	deepEqual( Stem("devonshire"), "devonshir" );
	deepEqual( Stem("devote"), "devot" );
	deepEqual( Stem("devoted"), "devot" );
	deepEqual( Stem("devotedly"), "devot" );
	deepEqual( Stem("devotedness"), "devoted" );
	deepEqual( Stem("devotes"), "devot" );
	deepEqual( Stem("devoting"), "devot" );
	deepEqual( Stem("devotion"), "devot" );
	deepEqual( Stem("devotions"), "devot" );
	deepEqual( Stem("devour"), "devour" );
	deepEqual( Stem("devoured"), "devour" );
	deepEqual( Stem("devourers"), "devour" );
	deepEqual( Stem("devouring"), "devour" );
	deepEqual( Stem("devout"), "devout" );
	deepEqual( Stem("devoutly"), "devout" );
	deepEqual( Stem("dew"), "dew" );
	deepEqual( Stem("dewdrop"), "dewdrop" );
	deepEqual( Stem("dewdrops"), "dewdrop" );
	deepEqual( Stem("deweloping"), "dewelop" );
	deepEqual( Stem("dewiness"), "dewi" );
	deepEqual( Stem("dews"), "dew" );
	deepEqual( Stem("dewy"), "dewi" );
	deepEqual( Stem("dexterity"), "dexter" );
	deepEqual( Stem("dexterous"), "dexter" );
	deepEqual( Stem("dexterously"), "dexter" );
	deepEqual( Stem("dey"), "dey" );
	deepEqual( Stem("deyvle"), "deyvl" );
	deepEqual( Stem("deyvlish"), "deyvlish" );
	deepEqual( Stem("di"), "di" );
	deepEqual( Stem("diabolical"), "diabol" );
	deepEqual( Stem("diabolicus"), "diabolicus" );
	deepEqual( Stem("diagnosed"), "diagnos" );
	deepEqual( Stem("diagonal"), "diagon" );
	deepEqual( Stem("dial"), "dial" );
	deepEqual( Stem("dialect"), "dialect" );
	deepEqual( Stem("dialects"), "dialect" );
	deepEqual( Stem("dialogue"), "dialogu" );
	deepEqual( Stem("dialogues"), "dialogu" );
	deepEqual( Stem("dials"), "dial" );
	deepEqual( Stem("diamanten"), "diamanten" );
	deepEqual( Stem("diameter"), "diamet" );
	deepEqual( Stem("diametrically"), "diametr" );
	deepEqual( Stem("diamond"), "diamond" );
	deepEqual( Stem("diamonds"), "diamond" );
	deepEqual( Stem("dianaea"), "dianaea" );
	deepEqual( Stem("diaphragm"), "diaphragm" );
	deepEqual( Stem("diappointments"), "diappoint" );
	deepEqual( Stem("diaries"), "diari" );
	deepEqual( Stem("diary"), "diari" );
	deepEqual( Stem("diatribes"), "diatrib" );
	deepEqual( Stem("dibabs"), "dibab" );
	deepEqual( Stem("dibabses"), "dibabs" );
	deepEqual( Stem("dick"), "dick" );
	deepEqual( Stem("dickens"), "dicken" );
	deepEqual( Stem("dicks"), "dick" );
	deepEqual( Stem("dictate"), "dictat" );
	deepEqual( Stem("dictated"), "dictat" );
	deepEqual( Stem("dictates"), "dictat" );
	deepEqual( Stem("dictating"), "dictat" );
	deepEqual( Stem("dictation"), "dictat" );
	deepEqual( Stem("dictator"), "dictat" );
	deepEqual( Stem("dictatorial"), "dictatori" );
	deepEqual( Stem("dictionary"), "dictionari" );
	deepEqual( Stem("dictum"), "dictum" );
	deepEqual( Stem("did"), "did" );
	deepEqual( Stem("diddler"), "diddler" );
	deepEqual( Stem("didelphis"), "didelphi" );
	deepEqual( Stem("didn"), "didn" );
	deepEqual( Stem("didst"), "didst" );
	deepEqual( Stem("die"), "die" );
	deepEqual( Stem("died"), "die" );
	deepEqual( Stem("dieffenbach"), "dieffenbach" );
	deepEqual( Stem("diego"), "diego" );
	deepEqual( Stem("dieman"), "dieman" );
	deepEqual( Stem("diemen"), "diemen" );
	deepEqual( Stem("diernan"), "diernan" );
	deepEqual( Stem("dies"), "die" );
	deepEqual( Stem("diet"), "diet" );
	deepEqual( Stem("differ"), "differ" );
	deepEqual( Stem("differed"), "differ" );
	deepEqual( Stem("difference"), "differ" );
	deepEqual( Stem("differences"), "differ" );
	deepEqual( Stem("different"), "differ" );
	deepEqual( Stem("differently"), "differ" );
	deepEqual( Stem("differing"), "differ" );
	deepEqual( Stem("differs"), "differ" );
	deepEqual( Stem("difficult"), "difficult" );
	deepEqual( Stem("difficulties"), "difficulti" );
	deepEqual( Stem("difficulty"), "difficulti" );
	deepEqual( Stem("diffidence"), "diffid" );
	deepEqual( Stem("diffident"), "diffid" );
	deepEqual( Stem("diffidently"), "diffid" );
	deepEqual( Stem("diffused"), "diffus" );
	deepEqual( Stem("diffusing"), "diffus" );
	deepEqual( Stem("diffusion"), "diffus" );
	deepEqual( Stem("dig"), "dig" );
	deepEqual( Stem("digby"), "digbi" );
	deepEqual( Stem("diges"), "dige" );
	deepEqual( Stem("digest"), "digest" );
	deepEqual( Stem("digester"), "digest" );
	deepEqual( Stem("digestio"), "digestio" );
	deepEqual( Stem("digestion"), "digest" );
	deepEqual( Stem("digestive"), "digest" );
	deepEqual( Stem("digger"), "digger" );
	deepEqual( Stem("digging"), "dig" );
	deepEqual( Stem("digitated"), "digit" );
	deepEqual( Stem("digitatus"), "digitatus" );
	deepEqual( Stem("dignified"), "dignifi" );
	deepEqual( Stem("dignities"), "digniti" );
	deepEqual( Stem("dignity"), "digniti" );
	deepEqual( Stem("digression"), "digress" );
	deepEqual( Stem("dilapidated"), "dilapid" );
	deepEqual( Stem("dilapidation"), "dilapid" );
	deepEqual( Stem("dilatation"), "dilat" );
	deepEqual( Stem("dilate"), "dilat" );
	deepEqual( Stem("dilated"), "dilat" );
	deepEqual( Stem("dilates"), "dilat" );
	deepEqual( Stem("dilating"), "dilat" );
	deepEqual( Stem("dilatory"), "dilatori" );
	deepEqual( Stem("dilemma"), "dilemma" );
	deepEqual( Stem("dilettanti"), "dilettanti" );
	deepEqual( Stem("diligence"), "dilig" );
	deepEqual( Stem("diligent"), "dilig" );
	deepEqual( Stem("diligently"), "dilig" );
	deepEqual( Stem("diluted"), "dilut" );
	deepEqual( Stem("dim"), "dim" );
	deepEqual( Stem("dimension"), "dimens" );
	deepEqual( Stem("dimensions"), "dimens" );
	deepEqual( Stem("diminish"), "diminish" );
	deepEqual( Stem("diminished"), "diminish" );
	deepEqual( Stem("diminishes"), "diminish" );
	deepEqual( Stem("diminishing"), "diminish" );
	deepEqual( Stem("diminution"), "diminut" );
	deepEqual( Stem("diminutive"), "diminut" );
	deepEqual( Stem("dimity"), "dimiti" );
	deepEqual( Stem("dimly"), "dim" );
	deepEqual( Stem("dimmed"), "dim" );
	deepEqual( Stem("dimple"), "dimpl" );
	deepEqual( Stem("dimpled"), "dimpl" );
	deepEqual( Stem("dimpling"), "dimpl" );
	deepEqual( Stem("din"), "din" );
	deepEqual( Stem("dine"), "dine" );
	deepEqual( Stem("dined"), "dine" );
	deepEqual( Stem("dines"), "dine" );
	deepEqual( Stem("ding"), "ding" );
	deepEqual( Stem("dingey"), "dingey" );
	deepEqual( Stem("dingleby"), "dinglebi" );
	deepEqual( Stem("dingo"), "dingo" );
	deepEqual( Stem("dingy"), "dingi" );
	deepEqual( Stem("dining"), "dine" );
	deepEqual( Stem("dinner"), "dinner" );
	deepEqual( Stem("dinners"), "dinner" );
	deepEqual( Stem("dinnot"), "dinnot" );
	deepEqual( Stem("dint"), "dint" );
	deepEqual( Stem("diocese"), "dioces" );
	deepEqual( Stem("diodon"), "diodon" );
	deepEqual( Stem("diopaea"), "diopaea" );
	deepEqual( Stem("diorgeenes"), "diorgeen" );
	deepEqual( Stem("dios"), "dio" );
	deepEqual( Stem("dip"), "dip" );
	deepEqual( Stem("diplomacy"), "diplomaci" );
	deepEqual( Stem("diplomatic"), "diplomat" );
	deepEqual( Stem("diplomatical"), "diplomat" );
	deepEqual( Stem("diplomats"), "diplomat" );
	deepEqual( Stem("dipped"), "dip" );
	deepEqual( Stem("dipping"), "dip" );
	deepEqual( Stem("dips"), "dip" );
	deepEqual( Stem("diptera"), "diptera" );
	deepEqual( Stem("dire"), "dire" );
	deepEqual( Stem("direcfly"), "direcfli" );
	deepEqual( Stem("direct"), "direct" );
	deepEqual( Stem("directed"), "direct" );
	deepEqual( Stem("directing"), "direct" );
	deepEqual( Stem("direction"), "direct" );
	deepEqual( Stem("directions"), "direct" );
	deepEqual( Stem("directly"), "direct" );
	deepEqual( Stem("director"), "director" );
	deepEqual( Stem("directors"), "director" );
	deepEqual( Stem("directory"), "directori" );
	deepEqual( Stem("directress"), "directress" );
	deepEqual( Stem("directs"), "direct" );
	deepEqual( Stem("direfully"), "dire" );
	deepEqual( Stem("dirt"), "dirt" );
	deepEqual( Stem("dirtied"), "dirti" );
	deepEqual( Stem("dirtier"), "dirtier" );
	deepEqual( Stem("dirtiest"), "dirtiest" );
	deepEqual( Stem("dirty"), "dirti" );
	deepEqual( Stem("disable"), "disabl" );
	deepEqual( Stem("disabled"), "disabl" );
	deepEqual( Stem("disadvantage"), "disadvantag" );
	deepEqual( Stem("disadvantages"), "disadvantag" );
	deepEqual( Stem("disagree"), "disagre" );
	deepEqual( Stem("disagreeable"), "disagre" );
	deepEqual( Stem("disagreeably"), "disagre" );
	deepEqual( Stem("disagreed"), "disagre" );
	deepEqual( Stem("disagreeing"), "disagre" );
	deepEqual( Stem("disagreement"), "disagr" );
	deepEqual( Stem("disappear"), "disappear" );
	deepEqual( Stem("disappearance"), "disappear" );
	deepEqual( Stem("disappeared"), "disappear" );
	deepEqual( Stem("disappearing"), "disappear" );
	deepEqual( Stem("disappears"), "disappear" );
	deepEqual( Stem("disappoint"), "disappoint" );
	deepEqual( Stem("disappointed"), "disappoint" );
	deepEqual( Stem("disappointing"), "disappoint" );
	deepEqual( Stem("disappointment"), "disappoint" );
	deepEqual( Stem("disappointments"), "disappoint" );
	deepEqual( Stem("disappoints"), "disappoint" );
	deepEqual( Stem("disapprobation"), "disapprob" );
	deepEqual( Stem("disapproval"), "disapprov" );
	deepEqual( Stem("disapprove"), "disapprov" );
	deepEqual( Stem("disapproved"), "disapprov" );
	deepEqual( Stem("disapproves"), "disapprov" );
	deepEqual( Stem("disapproving"), "disapprov" );
	deepEqual( Stem("disarm"), "disarm" );
	deepEqual( Stem("disarmed"), "disarm" );
	deepEqual( Stem("disarming"), "disarm" );
	deepEqual( Stem("disarranged"), "disarrang" );
	deepEqual( Stem("disarrangement"), "disarrang" );
	deepEqual( Stem("disarray"), "disarray" );
	deepEqual( Stem("disaster"), "disast" );
	deepEqual( Stem("disastrous"), "disastr" );
	deepEqual( Stem("disavow"), "disavow" );
	deepEqual( Stem("disavowal"), "disavow" );
	deepEqual( Stem("disavowals"), "disavow" );
	deepEqual( Stem("disband"), "disband" );
	deepEqual( Stem("disbelief"), "disbelief" );
	deepEqual( Stem("disbelieve"), "disbeliev" );
	deepEqual( Stem("disbelieved"), "disbeliev" );
	deepEqual( Stem("disbelieving"), "disbeliev" );
	deepEqual( Stem("discard"), "discard" );
	deepEqual( Stem("discarded"), "discard" );
	deepEqual( Stem("discern"), "discern" );
	deepEqual( Stem("discerned"), "discern" );
	deepEqual( Stem("discernible"), "discern" );
	deepEqual( Stem("discerning"), "discern" );
	deepEqual( Stem("discernment"), "discern" );
	deepEqual( Stem("discharge"), "discharg" );
	deepEqual( Stem("discharged"), "discharg" );
	deepEqual( Stem("discharges"), "discharg" );
	deepEqual( Stem("discharging"), "discharg" );
	deepEqual( Stem("disciples"), "discipl" );
	deepEqual( Stem("disciplinary"), "disciplinari" );
	deepEqual( Stem("discipline"), "disciplin" );
	deepEqual( Stem("disciplined"), "disciplin" );
	deepEqual( Stem("disciplining"), "disciplin" );
	deepEqual( Stem("disclaimed"), "disclaim" );
	deepEqual( Stem("disclose"), "disclos" );
	deepEqual( Stem("disclosed"), "disclos" );
	deepEqual( Stem("disclosing"), "disclos" );
	deepEqual( Stem("disclosure"), "disclosur" );
	deepEqual( Stem("disclosures"), "disclosur" );
	deepEqual( Stem("discoloration"), "discolor" );
	deepEqual( Stem("discoloured"), "discolour" );
	deepEqual( Stem("discolouring"), "discolour" );
	deepEqual( Stem("discomfited"), "discomfit" );
	deepEqual( Stem("discomfiture"), "discomfitur" );
	deepEqual( Stem("discomfort"), "discomfort" );
	deepEqual( Stem("discomforts"), "discomfort" );
	deepEqual( Stem("discompose"), "discompos" );
	deepEqual( Stem("discomposed"), "discompos" );
	deepEqual( Stem("discomposure"), "discomposur" );
	deepEqual( Stem("disconcert"), "disconcert" );
	deepEqual( Stem("disconcerted"), "disconcert" );
	deepEqual( Stem("disconnected"), "disconnect" );
	deepEqual( Stem("disconsolate"), "disconsol" );
	deepEqual( Stem("disconsolately"), "disconsol" );
	deepEqual( Stem("discontended"), "discontend" );
	deepEqual( Stem("discontent"), "discont" );
	deepEqual( Stem("discontented"), "discont" );
	deepEqual( Stem("discontentedly"), "discont" );
	deepEqual( Stem("discontinuance"), "discontinu" );
	deepEqual( Stem("discontinue"), "discontinu" );
	deepEqual( Stem("discontinued"), "discontinu" );
	deepEqual( Stem("discord"), "discord" );
	deepEqual( Stem("discordant"), "discord" );
	deepEqual( Stem("discordantly"), "discord" );
	deepEqual( Stem("discords"), "discord" );
	deepEqual( Stem("discount"), "discount" );
	deepEqual( Stem("discountenanced"), "discountenanc" );
	deepEqual( Stem("discounters"), "discount" );
	deepEqual( Stem("discounting"), "discount" );
	deepEqual( Stem("discourage"), "discourag" );
	deepEqual( Stem("discouraged"), "discourag" );
	deepEqual( Stem("discouragement"), "discourag" );
	deepEqual( Stem("discourages"), "discourag" );
	deepEqual( Stem("discouraging"), "discourag" );
	deepEqual( Stem("discourse"), "discours" );
	deepEqual( Stem("discoursed"), "discours" );
	deepEqual( Stem("discourses"), "discours" );
	deepEqual( Stem("discoursing"), "discours" );
	deepEqual( Stem("discourteous"), "discourt" );
	deepEqual( Stem("discourtesy"), "discourtesi" );
	deepEqual( Stem("discover"), "discov" );
	deepEqual( Stem("discoverable"), "discover" );
	deepEqual( Stem("discovered"), "discov" );
	deepEqual( Stem("discoverer"), "discover" );
	deepEqual( Stem("discoverers"), "discover" );
	deepEqual( Stem("discoveries"), "discoveri" );
	deepEqual( Stem("discoverin"), "discoverin" );
	deepEqual( Stem("discovering"), "discov" );
	deepEqual( Stem("discovers"), "discov" );
	deepEqual( Stem("discovery"), "discoveri" );
	deepEqual( Stem("discredit"), "discredit" );
	deepEqual( Stem("discreditable"), "discredit" );
	deepEqual( Stem("discreet"), "discreet" );
	deepEqual( Stem("discreetest"), "discreetest" );
	deepEqual( Stem("discreetly"), "discreet" );
	deepEqual( Stem("discretion"), "discret" );
	deepEqual( Stem("discriminate"), "discrimin" );
	deepEqual( Stem("discrimination"), "discrimin" );
	deepEqual( Stem("discursive"), "discurs" );
	deepEqual( Stem("discuss"), "discuss" );
	deepEqual( Stem("discussed"), "discuss" );
	deepEqual( Stem("discusses"), "discuss" );
	deepEqual( Stem("discussing"), "discuss" );
	deepEqual( Stem("discussion"), "discuss" );
	deepEqual( Stem("discussions"), "discuss" );
	deepEqual( Stem("disdain"), "disdain" );
	deepEqual( Stem("disdained"), "disdain" );
	deepEqual( Stem("disdainful"), "disdain" );
	deepEqual( Stem("disdainfully"), "disdain" );
	deepEqual( Stem("disdaining"), "disdain" );
	deepEqual( Stem("disease"), "diseas" );
	deepEqual( Stem("diseased"), "diseas" );
	deepEqual( Stem("diseases"), "diseas" );
	deepEqual( Stem("disembarrassed"), "disembarrass" );
	deepEqual( Stem("disenchanted"), "disench" );
	deepEqual( Stem("disenchantment"), "disenchant" );
	deepEqual( Stem("disengage"), "disengag" );
	deepEqual( Stem("disengaged"), "disengag" );
	deepEqual( Stem("disengages"), "disengag" );
	deepEqual( Stem("disengaging"), "disengag" );
	deepEqual( Stem("disentangle"), "disentangl" );
	deepEqual( Stem("disentangles"), "disentangl" );
	deepEqual( Stem("disestablished"), "disestablish" );
	deepEqual( Stem("disfavour"), "disfavour" );
	deepEqual( Stem("disfigured"), "disfigur" );
	deepEqual( Stem("disfigurement"), "disfigur" );
	deepEqual( Stem("disfigurements"), "disfigur" );
	deepEqual( Stem("disgorged"), "disgorg" );
	deepEqual( Stem("disgorging"), "disgorg" );
	deepEqual( Stem("disgrace"), "disgrac" );
	deepEqual( Stem("disgraced"), "disgrac" );
	deepEqual( Stem("disgraceful"), "disgrac" );
	deepEqual( Stem("disgraces"), "disgrac" );
	deepEqual( Stem("disgracing"), "disgrac" );
	deepEqual( Stem("disguise"), "disguis" );
	deepEqual( Stem("disguised"), "disguis" );
	deepEqual( Stem("disguises"), "disguis" );
	deepEqual( Stem("disguising"), "disguis" );
	deepEqual( Stem("disgust"), "disgust" );
	deepEqual( Stem("disgusted"), "disgust" );
	deepEqual( Stem("disgusting"), "disgust" );
	deepEqual( Stem("disgustingly"), "disgust" );
	deepEqual( Stem("disgusts"), "disgust" );
	deepEqual( Stem("dish"), "dish" );
	deepEqual( Stem("dishabille"), "dishabill" );
	deepEqual( Stem("disheartened"), "dishearten" );
	deepEqual( Stem("disheartening"), "dishearten" );
	deepEqual( Stem("dished"), "dish" );
	deepEqual( Stem("dishes"), "dish" );
	deepEqual( Stem("dishevelled"), "dishevel" );
	deepEqual( Stem("dishonest"), "dishonest" );
	deepEqual( Stem("dishonestly"), "dishonest" );
	deepEqual( Stem("dishonesty"), "dishonesti" );
	deepEqual( Stem("dishonour"), "dishonour" );
	deepEqual( Stem("dishonourable"), "dishonour" );
	deepEqual( Stem("dishonoured"), "dishonour" );
	deepEqual( Stem("dishonouring"), "dishonour" );
	deepEqual( Stem("disillusion"), "disillus" );
	deepEqual( Stem("disillusioned"), "disillus" );
	deepEqual( Stem("disinclination"), "disinclin" );
	deepEqual( Stem("disinclined"), "disinclin" );
	deepEqual( Stem("disinherit"), "disinherit" );
	deepEqual( Stem("disinherits"), "disinherit" );
	deepEqual( Stem("disintegration"), "disintegr" );
	deepEqual( Stem("disinterested"), "disinterest" );
	deepEqual( Stem("disinterestedly"), "disinterest" );
	deepEqual( Stem("disinterestedness"), "disinterested" );
	deepEqual( Stem("disjoin"), "disjoin" );
	deepEqual( Stem("disjointed"), "disjoint" );
	deepEqual( Stem("disk"), "disk" );
	deepEqual( Stem("dislike"), "dislik" );
	deepEqual( Stem("disliked"), "dislik" );
	deepEqual( Stem("dislikes"), "dislik" );
	deepEqual( Stem("disliking"), "dislik" );
	deepEqual( Stem("dislocated"), "disloc" );
	deepEqual( Stem("dislocation"), "disloc" );
	deepEqual( Stem("dislodge"), "dislodg" );
	deepEqual( Stem("dismal"), "dismal" );
	deepEqual( Stem("dismally"), "dismal" );
	deepEqual( Stem("dismantle"), "dismantl" );
	deepEqual( Stem("dismantled"), "dismantl" );
	deepEqual( Stem("dismay"), "dismay" );
	deepEqual( Stem("dismayed"), "dismay" );
	deepEqual( Stem("dismiss"), "dismiss" );
	deepEqual( Stem("dismissal"), "dismiss" );
	deepEqual( Stem("dismissed"), "dismiss" );
	deepEqual( Stem("dismisses"), "dismiss" );
	deepEqual( Stem("dismissing"), "dismiss" );
	deepEqual( Stem("dismount"), "dismount" );
	deepEqual( Stem("dismounted"), "dismount" );
	deepEqual( Stem("disobedience"), "disobedi" );
	deepEqual( Stem("disobedient"), "disobedi" );
	deepEqual( Stem("disobey"), "disobey" );
	deepEqual( Stem("disobeyed"), "disobey" );
	deepEqual( Stem("disorder"), "disord" );
	deepEqual( Stem("disordered"), "disord" );
	deepEqual( Stem("disorderly"), "disord" );
	deepEqual( Stem("disorders"), "disord" );
	deepEqual( Stem("disorganization"), "disorgan" );
	deepEqual( Stem("disown"), "disown" );
	deepEqual( Stem("disowned"), "disown" );
	deepEqual( Stem("disparage"), "disparag" );
	deepEqual( Stem("disparagement"), "disparag" );
	deepEqual( Stem("disparaging"), "disparag" );
	deepEqual( Stem("dispassionate"), "dispassion" );
	deepEqual( Stem("dispassionately"), "dispassion" );
	deepEqual( Stem("dispatch"), "dispatch" );
	deepEqual( Stem("dispatched"), "dispatch" );
	deepEqual( Stem("dispatching"), "dispatch" );
	deepEqual( Stem("dispel"), "dispel" );
	deepEqual( Stem("dispelled"), "dispel" );
	deepEqual( Stem("dispensation"), "dispens" );
	deepEqual( Stem("dispense"), "dispens" );
	deepEqual( Stem("dispensed"), "dispens" );
	deepEqual( Stem("dispenses"), "dispens" );
	deepEqual( Stem("dispensing"), "dispens" );
	deepEqual( Stem("disperse"), "dispers" );
	deepEqual( Stem("dispersed"), "dispers" );
	deepEqual( Stem("disperses"), "dispers" );
	deepEqual( Stem("dispersing"), "dispers" );
	deepEqual( Stem("dispirited"), "dispirit" );
	deepEqual( Stem("displaced"), "displac" );
	deepEqual( Stem("displacement"), "displac" );
	deepEqual( Stem("displaces"), "displac" );
	deepEqual( Stem("displacing"), "displac" );
	deepEqual( Stem("display"), "display" );
	deepEqual( Stem("displayed"), "display" );
	deepEqual( Stem("displaying"), "display" );
	deepEqual( Stem("displays"), "display" );
	deepEqual( Stem("displease"), "displeas" );
	deepEqual( Stem("displeased"), "displeas" );
	deepEqual( Stem("displeases"), "displeas" );
	deepEqual( Stem("displeasing"), "displeas" );
	deepEqual( Stem("displeasure"), "displeasur" );
	deepEqual( Stem("disposal"), "dispos" );
	deepEqual( Stem("dispose"), "dispos" );
	deepEqual( Stem("disposed"), "dispos" );
	deepEqual( Stem("disposes"), "dispos" );
	deepEqual( Stem("disposing"), "dispos" );
	deepEqual( Stem("disposition"), "disposit" );
	deepEqual( Stem("dispositions"), "disposit" );
	deepEqual( Stem("dispossess"), "dispossess" );
	deepEqual( Stem("dispossessed"), "dispossess" );
	deepEqual( Stem("dispraise"), "disprais" );
	deepEqual( Stem("disproof"), "disproof" );
	deepEqual( Stem("disproportionate"), "disproportion" );
	deepEqual( Stem("disproportionately"), "disproportion" );
	deepEqual( Stem("disproved"), "disprov" );
	deepEqual( Stem("disproving"), "disprov" );
	deepEqual( Stem("disputation"), "disput" );
	deepEqual( Stem("disputations"), "disput" );
	deepEqual( Stem("dispute"), "disput" );
	deepEqual( Stem("disputed"), "disput" );
	deepEqual( Stem("disputes"), "disput" );
	deepEqual( Stem("disputing"), "disput" );
	deepEqual( Stem("disqualification"), "disqualif" );
	deepEqual( Stem("disquiet"), "disquiet" );
	deepEqual( Stem("disquietude"), "disquietud" );
	deepEqual( Stem("disregard"), "disregard" );
	deepEqual( Stem("disregarded"), "disregard" );
	deepEqual( Stem("disregardful"), "disregard" );
	deepEqual( Stem("disregarding"), "disregard" );
	deepEqual( Stem("disregards"), "disregard" );
	deepEqual( Stem("disreputable"), "disreput" );
	deepEqual( Stem("disrespect"), "disrespect" );
	deepEqual( Stem("disrespectful"), "disrespect" );
	deepEqual( Stem("disrespectfully"), "disrespect" );
	deepEqual( Stem("disruption"), "disrupt" );
	deepEqual( Stem("dissatisfaction"), "dissatisfact" );
	deepEqual( Stem("dissatisfied"), "dissatisfi" );
	deepEqual( Stem("dissected"), "dissect" );
	deepEqual( Stem("dissecting"), "dissect" );
	deepEqual( Stem("dissection"), "dissect" );
	deepEqual( Stem("dissemble"), "dissembl" );
	deepEqual( Stem("dissembler"), "dissembl" );
	deepEqual( Stem("disseminated"), "dissemin" );
	deepEqual( Stem("dissemination"), "dissemin" );
	deepEqual( Stem("dissension"), "dissens" );
	deepEqual( Stem("dissensions"), "dissens" );
	deepEqual( Stem("dissent"), "dissent" );
	deepEqual( Stem("dissenter"), "dissent" );
	deepEqual( Stem("dissertation"), "dissert" );
	deepEqual( Stem("dissimilar"), "dissimilar" );
	deepEqual( Stem("dissimulation"), "dissimul" );
	deepEqual( Stem("dissipate"), "dissip" );
	deepEqual( Stem("dissipated"), "dissip" );
	deepEqual( Stem("dissipating"), "dissip" );
	deepEqual( Stem("dissipation"), "dissip" );
	deepEqual( Stem("dissolute"), "dissolut" );
	deepEqual( Stem("dissolution"), "dissolut" );
	deepEqual( Stem("dissolve"), "dissolv" );
	deepEqual( Stem("dissolved"), "dissolv" );
	deepEqual( Stem("dissuade"), "dissuad" );
	deepEqual( Stem("dissuaded"), "dissuad" );
	deepEqual( Stem("dissuasions"), "dissuas" );
	deepEqual( Stem("distanc"), "distanc" );
	deepEqual( Stem("distance"), "distanc" );
	deepEqual( Stem("distanced"), "distanc" );
	deepEqual( Stem("distances"), "distanc" );
	deepEqual( Stem("distant"), "distant" );
	deepEqual( Stem("distantly"), "distant" );
	deepEqual( Stem("distaste"), "distast" );
	deepEqual( Stem("distasteful"), "distast" );
	deepEqual( Stem("distempered"), "distemp" );
	deepEqual( Stem("distended"), "distend" );
	deepEqual( Stem("distending"), "distend" );
	deepEqual( Stem("distilled"), "distil" );
	deepEqual( Stem("distinct"), "distinct" );
	deepEqual( Stem("distinction"), "distinct" );
	deepEqual( Stem("distinctions"), "distinct" );
	deepEqual( Stem("distinctive"), "distinct" );
	deepEqual( Stem("distinctly"), "distinct" );
	deepEqual( Stem("distinctness"), "distinct" );
	deepEqual( Stem("distinguish"), "distinguish" );
	deepEqual( Stem("distinguishable"), "distinguish" );
	deepEqual( Stem("distinguished"), "distinguish" );
	deepEqual( Stem("distinguishes"), "distinguish" );
	deepEqual( Stem("distinguishing"), "distinguish" );
	deepEqual( Stem("distinguons"), "distinguon" );
	deepEqual( Stem("distort"), "distort" );
	deepEqual( Stem("distorted"), "distort" );
	deepEqual( Stem("distortion"), "distort" );
	deepEqual( Stem("distortions"), "distort" );
	deepEqual( Stem("distract"), "distract" );
	deepEqual( Stem("distracted"), "distract" );
	deepEqual( Stem("distractedly"), "distract" );
	deepEqual( Stem("distracting"), "distract" );
	deepEqual( Stem("distraction"), "distract" );
	deepEqual( Stem("distracts"), "distract" );
	deepEqual( Stem("distraught"), "distraught" );
	deepEqual( Stem("distress"), "distress" );
	deepEqual( Stem("distressed"), "distress" );
	deepEqual( Stem("distresses"), "distress" );
	deepEqual( Stem("distressful"), "distress" );
	deepEqual( Stem("distressfully"), "distress" );
	deepEqual( Stem("distressing"), "distress" );
	deepEqual( Stem("distribute"), "distribut" );
	deepEqual( Stem("distributed"), "distribut" );
	deepEqual( Stem("distributing"), "distribut" );
	deepEqual( Stem("distribution"), "distribut" );
	deepEqual( Stem("district"), "district" );
	deepEqual( Stem("districts"), "district" );
	deepEqual( Stem("distrust"), "distrust" );
	deepEqual( Stem("distrusted"), "distrust" );
	deepEqual( Stem("distrustful"), "distrust" );
	deepEqual( Stem("distrustfully"), "distrust" );
	deepEqual( Stem("disturb"), "disturb" );
	deepEqual( Stem("disturbance"), "disturb" );
	deepEqual( Stem("disturbances"), "disturb" );
	deepEqual( Stem("disturbed"), "disturb" );
	deepEqual( Stem("disturbing"), "disturb" );
	deepEqual( Stem("disturbs"), "disturb" );
	deepEqual( Stem("disused"), "disus" );
	deepEqual( Stem("ditch"), "ditch" );
	deepEqual( Stem("ditches"), "ditch" );
	deepEqual( Stem("ditching"), "ditch" );
	deepEqual( Stem("ditties"), "ditti" );
	deepEqual( Stem("ditto"), "ditto" );
	deepEqual( Stem("ditty"), "ditti" );
	deepEqual( Stem("diurnal"), "diurnal" );
	deepEqual( Stem("divan"), "divan" );
	deepEqual( Stem("dive"), "dive" );
	deepEqual( Stem("dived"), "dive" );
	deepEqual( Stem("diver"), "diver" );
	deepEqual( Stem("diverge"), "diverg" );
	deepEqual( Stem("diverged"), "diverg" );
	deepEqual( Stem("divergence"), "diverg" );
	deepEqual( Stem("diverging"), "diverg" );
	deepEqual( Stem("divers"), "diver" );
	deepEqual( Stem("diverse"), "divers" );
	deepEqual( Stem("diversified"), "diversifi" );
	deepEqual( Stem("diversifying"), "diversifi" );
	deepEqual( Stem("diversion"), "divers" );
	deepEqual( Stem("diversions"), "divers" );
	deepEqual( Stem("diversity"), "divers" );
	deepEqual( Stem("divert"), "divert" );
	deepEqual( Stem("diverted"), "divert" );
	deepEqual( Stem("diverting"), "divert" );
	deepEqual( Stem("dives"), "dive" );
	deepEqual( Stem("divest"), "divest" );
	deepEqual( Stem("divested"), "divest" );
	deepEqual( Stem("divesting"), "divest" );
	deepEqual( Stem("divide"), "divid" );
	deepEqual( Stem("divided"), "divid" );
	deepEqual( Stem("dividend"), "dividend" );
	deepEqual( Stem("divides"), "divid" );
	deepEqual( Stem("dividing"), "divid" );
	deepEqual( Stem("divine"), "divin" );
	deepEqual( Stem("divined"), "divin" );
	deepEqual( Stem("diviner"), "divin" );
	deepEqual( Stem("divines"), "divin" );
	deepEqual( Stem("diving"), "dive" );
	deepEqual( Stem("divining"), "divin" );
	deepEqual( Stem("divinities"), "divin" );
	deepEqual( Stem("divinity"), "divin" );
	deepEqual( Stem("divisio"), "divisio" );
	deepEqual( Stem("division"), "divis" );
	deepEqual( Stem("divisions"), "divis" );
	deepEqual( Stem("divn"), "divn" );
	deepEqual( Stem("divorce"), "divorc" );
	deepEqual( Stem("divorced"), "divorc" );
	deepEqual( Stem("divulge"), "divulg" );
	deepEqual( Stem("divulges"), "divulg" );
	deepEqual( Stem("dixon"), "dixon" );
	deepEqual( Stem("dizzier"), "dizzier" );
	deepEqual( Stem("dizziness"), "dizzi" );
	deepEqual( Stem("dizzy"), "dizzi" );
	deepEqual( Stem("dmitri"), "dmitri" );
	deepEqual( Stem("do"), "do" );
	deepEqual( Stem("doant"), "doant" );
	deepEqual( Stem("dobrizhoffen"), "dobrizhoffen" );
	deepEqual( Stem("dobrizhoffer"), "dobrizhoff" );
	deepEqual( Stem("docile"), "docil" );
	deepEqual( Stem("dock"), "dock" );
	deepEqual( Stem("docks"), "dock" );
	deepEqual( Stem("dockyard"), "dockyard" );
	deepEqual( Stem("dockyards"), "dockyard" );
	deepEqual( Stem("doctor"), "doctor" );
	deepEqual( Stem("doctoring"), "doctor" );
	deepEqual( Stem("doctors"), "doctor" );
	deepEqual( Stem("doctrine"), "doctrin" );
	deepEqual( Stem("doctrines"), "doctrin" );
	deepEqual( Stem("document"), "document" );
	deepEqual( Stem("documentary"), "documentari" );
	deepEqual( Stem("documents"), "document" );
	deepEqual( Stem("dod"), "dod" );
	deepEqual( Stem("dodge"), "dodg" );
	deepEqual( Stem("dodged"), "dodg" );
	deepEqual( Stem("dodges"), "dodg" );
	deepEqual( Stem("dodging"), "dodg" );
	deepEqual( Stem("dodo"), "dodo" );
	deepEqual( Stem("doe"), "doe" );
	deepEqual( Stem("doers"), "doer" );
	deepEqual( Stem("does"), "doe" );
	deepEqual( Stem("doesn"), "doesn" );
	deepEqual( Stem("dog"), "dog" );
	deepEqual( Stem("dogged"), "dog" );
	deepEqual( Stem("doggedly"), "dog" );
	deepEqual( Stem("doggedness"), "dogged" );
	deepEqual( Stem("doggies"), "doggi" );
	deepEqual( Stem("dogging"), "dog" );
	deepEqual( Stem("dogs"), "dog" );
	deepEqual( Stem("doin"), "doin" );
	deepEqual( Stem("doing"), "do" );
	deepEqual( Stem("doings"), "do" );
	deepEqual( Stem("dole"), "dole" );
	deepEqual( Stem("doleful"), "dole" );
	deepEqual( Stem("dolefully"), "dole" );
	deepEqual( Stem("dolichonyx"), "dolichonyx" );
	deepEqual( Stem("doll"), "doll" );
	deepEqual( Stem("dollar"), "dollar" );
	deepEqual( Stem("dollars"), "dollar" );
	deepEqual( Stem("dolls"), "doll" );
	deepEqual( Stem("dolly"), "dolli" );
	deepEqual( Stem("dolorous"), "dolor" );
	deepEqual( Stem("dolt"), "dolt" );
	deepEqual( Stem("dom"), "dom" );
	deepEqual( Stem("domain"), "domain" );
	deepEqual( Stem("domains"), "domain" );
	deepEqual( Stem("dome"), "dome" );
	deepEqual( Stem("domestic"), "domest" );
	deepEqual( Stem("domesticated"), "domest" );
	deepEqual( Stem("domestication"), "domest" );
	deepEqual( Stem("domestics"), "domest" );
	deepEqual( Stem("domiciled"), "domicil" );
	deepEqual( Stem("domidor"), "domidor" );
	deepEqual( Stem("domidors"), "domidor" );
	deepEqual( Stem("dominant"), "domin" );
	deepEqual( Stem("domination"), "domin" );
	deepEqual( Stem("domineer"), "domin" );
	deepEqual( Stem("domineered"), "domin" );
	deepEqual( Stem("domineering"), "domin" );
	deepEqual( Stem("domingo"), "domingo" );
	deepEqual( Stem("dominion"), "dominion" );
	deepEqual( Stem("dominions"), "dominion" );
	deepEqual( Stem("domino"), "domino" );
	deepEqual( Stem("domo"), "domo" );
	deepEqual( Stem("don"), "don" );
	deepEqual( Stem("donatia"), "donatia" );
	deepEqual( Stem("donation"), "donat" );
	deepEqual( Stem("done"), "done" );
	deepEqual( Stem("dong"), "dong" );
	deepEqual( Stem("donkey"), "donkey" );
	deepEqual( Stem("donkeys"), "donkey" );
	deepEqual( Stem("donnez"), "donnez" );
	deepEqual( Stem("donny"), "donni" );
	deepEqual( Stem("donnys"), "donni" );
	deepEqual( Stem("dont"), "dont" );
	deepEqual( Stem("dooble"), "doobl" );
	deepEqual( Stem("dooced"), "dooc" );
	deepEqual( Stem("doodle"), "doodl" );
	deepEqual( Stem("doodleites"), "doodleit" );
	deepEqual( Stem("doom"), "doom" );
	deepEqual( Stem("doomed"), "doom" );
	deepEqual( Stem("dooms"), "doom" );
	deepEqual( Stem("doomsday"), "doomsday" );
	deepEqual( Stem("doon"), "doon" );
	deepEqual( Stem("doonstairs"), "doonstair" );
	deepEqual( Stem("door"), "door" );
	deepEqual( Stem("doorkeeper"), "doorkeep" );
	deepEqual( Stem("doors"), "door" );
	deepEqual( Stem("doorway"), "doorway" );
	deepEqual( Stem("doorways"), "doorway" );
	deepEqual( Stem("doos"), "doo" );
	deepEqual( Stem("doozen"), "doozen" );
	deepEqual( Stem("dora"), "dora" );
	deepEqual( Stem("doris"), "dori" );
	deepEqual( Stem("dorker"), "dorker" );
	deepEqual( Stem("dormant"), "dormant" );
	deepEqual( Stem("dormitory"), "dormitori" );
	deepEqual( Stem("dormouse"), "dormous" );
	deepEqual( Stem("dorsal"), "dorsal" );
	deepEqual( Stem("dose"), "dose" );
	deepEqual( Stem("dosed"), "dose" );
	deepEqual( Stem("doses"), "dose" );
	deepEqual( Stem("dost"), "dost" );
	deepEqual( Stem("dostoevsky"), "dostoevski" );
	deepEqual( Stem("dotage"), "dotag" );
	deepEqual( Stem("dotard"), "dotard" );
	deepEqual( Stem("dote"), "dote" );
	deepEqual( Stem("doted"), "dote" );
	deepEqual( Stem("dotes"), "dote" );
	deepEqual( Stem("doth"), "doth" );
	deepEqual( Stem("dotheboys"), "dotheboy" );
	deepEqual( Stem("dothebys"), "dothebi" );
	deepEqual( Stem("doting"), "dote" );
	deepEqual( Stem("dots"), "dot" );
	deepEqual( Stem("dotted"), "dot" );
	deepEqual( Stem("double"), "doubl" );
	deepEqual( Stem("doubled"), "doubl" );
	deepEqual( Stem("doubleday"), "doubleday" );
	deepEqual( Stem("doubles"), "doubl" );
	deepEqual( Stem("doubling"), "doubl" );
	deepEqual( Stem("doubly"), "doubli" );
	deepEqual( Stem("doubt"), "doubt" );
	deepEqual( Stem("doubted"), "doubt" );
	deepEqual( Stem("doubtful"), "doubt" );
	deepEqual( Stem("doubtfully"), "doubt" );
	deepEqual( Stem("doubting"), "doubt" );
	deepEqual( Stem("doubtingly"), "doubt" );
	deepEqual( Stem("doubtless"), "doubtless" );
	deepEqual( Stem("doubts"), "doubt" );
	deepEqual( Stem("douches"), "douch" );
	deepEqual( Stem("douglas"), "dougla" );
	deepEqual( Stem("dounia"), "dounia" );
	deepEqual( Stem("dourov"), "dourov" );
	deepEqual( Stem("dove"), "dove" );
	deepEqual( Stem("dover"), "dover" );
	deepEqual( Stem("dovercourt"), "dovercourt" );
	deepEqual( Stem("doves"), "dove" );
	deepEqual( Stem("dovetailedness"), "dovetailed" );
	deepEqual( Stem("doveton"), "doveton" );
	deepEqual( Stem("dowager"), "dowag" );
	deepEqual( Stem("dowagers"), "dowag" );
	deepEqual( Stem("dowdles"), "dowdl" );
	deepEqual( Stem("dowdy"), "dowdi" );
	deepEqual( Stem("dower"), "dower" );
	deepEqual( Stem("down"), "down" );
	deepEqual( Stem("downcast"), "downcast" );
	deepEqual( Stem("downfall"), "downfal" );
	deepEqual( Stem("downfallings"), "downfal" );
	deepEqual( Stem("downhearted"), "downheart" );
	deepEqual( Stem("downing"), "down" );
	deepEqual( Stem("downright"), "downright" );
	deepEqual( Stem("downs"), "down" );
	deepEqual( Stem("downstairs"), "downstair" );
	deepEqual( Stem("downward"), "downward" );
	deepEqual( Stem("downwards"), "downward" );
	deepEqual( Stem("downy"), "downi" );
	deepEqual( Stem("dowry"), "dowri" );
	deepEqual( Stem("doze"), "doze" );
	deepEqual( Stem("dozed"), "doze" );
	deepEqual( Stem("dozen"), "dozen" );
	deepEqual( Stem("dozens"), "dozen" );
	deepEqual( Stem("dozenth"), "dozenth" );
	deepEqual( Stem("dozes"), "doze" );
	deepEqual( Stem("dozing"), "doze" );
	deepEqual( Stem("dr"), "dr" );
	deepEqual( Stem("dra"), "dra" );
	deepEqual( Stem("drab"), "drab" );
	deepEqual( Stem("drabs"), "drab" );
	deepEqual( Stem("draft"), "draft" );
	deepEqual( Stem("drafts"), "draft" );
	deepEqual( Stem("drag"), "drag" );
	deepEqual( Stem("dragged"), "drag" );
	deepEqual( Stem("dragging"), "drag" );
	deepEqual( Stem("draggled"), "draggl" );
	deepEqual( Stem("draggletails"), "draggletail" );
	deepEqual( Stem("dragon"), "dragon" );
	deepEqual( Stem("dragoon"), "dragoon" );
	deepEqual( Stem("dragooning"), "dragoon" );
	deepEqual( Stem("dragoons"), "dragoon" );
	deepEqual( Stem("drags"), "drag" );
	deepEqual( Stem("drain"), "drain" );
	deepEqual( Stem("drainage"), "drainag" );
	deepEqual( Stem("drained"), "drain" );
	deepEqual( Stem("draining"), "drain" );
	deepEqual( Stem("drains"), "drain" );
	deepEqual( Stem("drake"), "drake" );
	deepEqual( Stem("drakes"), "drake" );
	deepEqual( Stem("dram"), "dram" );
	deepEqual( Stem("drama"), "drama" );
	deepEqual( Stem("dramatic"), "dramat" );
	deepEqual( Stem("dramatically"), "dramat" );
	deepEqual( Stem("dramaticus"), "dramaticus" );
	deepEqual( Stem("dramatise"), "dramatis" );
	deepEqual( Stem("dramatised"), "dramatis" );
	deepEqual( Stem("dramatist"), "dramatist" );
	deepEqual( Stem("dramatists"), "dramatist" );
	deepEqual( Stem("drank"), "drank" );
	deepEqual( Stem("drap"), "drap" );
	deepEqual( Stem("draperies"), "draperi" );
	deepEqual( Stem("drapery"), "draperi" );
	deepEqual( Stem("drat"), "drat" );
	deepEqual( Stem("draught"), "draught" );
	deepEqual( Stem("draughts"), "draught" );
	deepEqual( Stem("draughtsman"), "draughtsman" );
	deepEqual( Stem("draw"), "draw" );
	deepEqual( Stem("drawback"), "drawback" );
	deepEqual( Stem("drawbacks"), "drawback" );
	deepEqual( Stem("drawbridge"), "drawbridg" );
	deepEqual( Stem("drawed"), "draw" );
	deepEqual( Stem("drawer"), "drawer" );
	deepEqual( Stem("drawers"), "drawer" );
	deepEqual( Stem("drawing"), "draw" );
	deepEqual( Stem("drawings"), "draw" );
	deepEqual( Stem("drawl"), "drawl" );
	deepEqual( Stem("drawled"), "drawl" );
	deepEqual( Stem("drawling"), "drawl" );
	deepEqual( Stem("drawls"), "drawl" );
	deepEqual( Stem("drawn"), "drawn" );
	deepEqual( Stem("draws"), "draw" );
	deepEqual( Stem("dray"), "dray" );
	deepEqual( Stem("drays"), "dray" );
	deepEqual( Stem("dread"), "dread" );
	deepEqual( Stem("dreaded"), "dread" );
	deepEqual( Stem("dreadful"), "dread" );
	deepEqual( Stem("dreadfully"), "dread" );
	deepEqual( Stem("dreading"), "dread" );
	deepEqual( Stem("dreadnought"), "dreadnought" );
	deepEqual( Stem("dream"), "dream" );
	deepEqual( Stem("dreamed"), "dream" );
	deepEqual( Stem("dreamer"), "dreamer" );
	deepEqual( Stem("dreamily"), "dreamili" );
	deepEqual( Stem("dreaminess"), "dreami" );
	deepEqual( Stem("dreaming"), "dream" );
	deepEqual( Stem("dreamings"), "dream" );
	deepEqual( Stem("dreams"), "dream" );
	deepEqual( Stem("dreamt"), "dreamt" );
	deepEqual( Stem("dreamy"), "dreami" );
	deepEqual( Stem("drear"), "drear" );
	deepEqual( Stem("dreariness"), "dreari" );
	deepEqual( Stem("dreary"), "dreari" );
	deepEqual( Stem("dregs"), "dreg" );
	deepEqual( Stem("drenched"), "drench" );
	deepEqual( Stem("dresden"), "dresden" );
	deepEqual( Stem("dress"), "dress" );
	deepEqual( Stem("dressed"), "dress" );
	deepEqual( Stem("dresser"), "dresser" );
	deepEqual( Stem("dresses"), "dress" );
	deepEqual( Stem("dressing"), "dress" );
	deepEqual( Stem("dressmaker"), "dressmak" );
	deepEqual( Stem("dressmakers"), "dressmak" );
	deepEqual( Stem("dressmaking"), "dressmak" );
	deepEqual( Stem("drest"), "drest" );
	deepEqual( Stem("drew"), "drew" );
	deepEqual( Stem("driblets"), "driblet" );
	deepEqual( Stem("dried"), "dri" );
	deepEqual( Stem("drier"), "drier" );
	deepEqual( Stem("dries"), "dri" );
	deepEqual( Stem("driest"), "driest" );
	deepEqual( Stem("drift"), "drift" );
	deepEqual( Stem("drifte"), "drift" );
	deepEqual( Stem("drifted"), "drift" );
	deepEqual( Stem("drifting"), "drift" );
	deepEqual( Stem("drifts"), "drift" );
	deepEqual( Stem("drigg"), "drigg" );
	deepEqual( Stem("drilled"), "drill" );
	deepEqual( Stem("drily"), "drili" );
	deepEqual( Stem("drink"), "drink" );
	deepEqual( Stem("drinkable"), "drinkabl" );
	deepEqual( Stem("drinker"), "drinker" );
	deepEqual( Stem("drinkers"), "drinker" );
	deepEqual( Stem("drinking"), "drink" );
	deepEqual( Stem("drinkings"), "drink" );
	deepEqual( Stem("drinks"), "drink" );
	deepEqual( Stem("drip"), "drip" );
	deepEqual( Stem("dripping"), "drip" );
	deepEqual( Stem("drips"), "drip" );
	deepEqual( Stem("drive"), "drive" );
	deepEqual( Stem("drivelling"), "drivel" );
	deepEqual( Stem("driven"), "driven" );
	deepEqual( Stem("driver"), "driver" );
	deepEqual( Stem("drivers"), "driver" );
	deepEqual( Stem("drives"), "drive" );
	deepEqual( Stem("driving"), "drive" );
	deepEqual( Stem("drizzle"), "drizzl" );
	deepEqual( Stem("drizzling"), "drizzl" );
	deepEqual( Stem("drizzly"), "drizzli" );
	deepEqual( Stem("dro"), "dro" );
	deepEqual( Stem("droite"), "droit" );
	deepEqual( Stem("droll"), "droll" );
	deepEqual( Stem("drollery"), "drolleri" );
	deepEqual( Stem("drolly"), "drolli" );
	deepEqual( Stem("drone"), "drone" );
	deepEqual( Stem("drones"), "drone" );
	deepEqual( Stem("droonk"), "droonk" );
	deepEqual( Stem("droop"), "droop" );
	deepEqual( Stem("drooped"), "droop" );
	deepEqual( Stem("drooping"), "droop" );
	deepEqual( Stem("droops"), "droop" );
	deepEqual( Stem("drop"), "drop" );
	deepEqual( Stem("droppe"), "dropp" );
	deepEqual( Stem("dropped"), "drop" );
	deepEqual( Stem("dropping"), "drop" );
	deepEqual( Stem("droppings"), "drop" );
	deepEqual( Stem("drops"), "drop" );
	deepEqual( Stem("dropsy"), "dropsi" );
	deepEqual( Stem("dross"), "dross" );
	deepEqual( Stem("drought"), "drought" );
	deepEqual( Stem("droughts"), "drought" );
	deepEqual( Stem("drove"), "drove" );
	deepEqual( Stem("drover"), "drover" );
	deepEqual( Stem("drovers"), "drover" );
	deepEqual( Stem("droves"), "drove" );
	deepEqual( Stem("drown"), "drown" );
	deepEqual( Stem("drownded"), "drownd" );
	deepEqual( Stem("drowned"), "drown" );
	deepEqual( Stem("drowning"), "drown" );
	deepEqual( Stem("drowsily"), "drowsili" );
	deepEqual( Stem("drowsiness"), "drowsi" );
	deepEqual( Stem("drowsy"), "drowsi" );
	deepEqual( Stem("drubbing"), "drub" );
	deepEqual( Stem("drudge"), "drudg" );
	deepEqual( Stem("drudgery"), "drudgeri" );
	deepEqual( Stem("drudges"), "drudg" );
	deepEqual( Stem("drugs"), "drug" );
	deepEqual( Stem("druidical"), "druidic" );
	deepEqual( Stem("drum"), "drum" );
	deepEqual( Stem("drummer"), "drummer" );
	deepEqual( Stem("drummers"), "drummer" );
	deepEqual( Stem("drummond"), "drummond" );
	deepEqual( Stem("drummonds"), "drummond" );
	deepEqual( Stem("drums"), "drum" );
	deepEqual( Stem("drunk"), "drunk" );
	deepEqual( Stem("drunkard"), "drunkard" );
	deepEqual( Stem("drunkards"), "drunkard" );
	deepEqual( Stem("drunken"), "drunken" );
	deepEqual( Stem("drunkenness"), "drunken" );
	deepEqual( Stem("drury"), "druri" );
	deepEqual( Stem("dry"), "dri" );
	deepEqual( Stem("dryer"), "dryer" );
	deepEqual( Stem("drying"), "dri" );
	deepEqual( Stem("dryly"), "dryli" );
	deepEqual( Stem("dryness"), "dryness" );
	deepEqual( Stem("dst"), "dst" );
	deepEqual( Stem("du"), "du" );
	deepEqual( Stem("dubious"), "dubious" );
	deepEqual( Stem("dublin"), "dublin" );
	deepEqual( Stem("ducal"), "ducal" );
	deepEqual( Stem("duchess"), "duchess" );
	deepEqual( Stem("duchesses"), "duchess" );
	deepEqual( Stem("duchy"), "duchi" );
	deepEqual( Stem("duck"), "duck" );
	deepEqual( Stem("ducking"), "duck" );
	deepEqual( Stem("ducklings"), "duckl" );
	deepEqual( Stem("ducks"), "duck" );
	deepEqual( Stem("duclida"), "duclida" );
	deepEqual( Stem("dudgeon"), "dudgeon" );
	deepEqual( Stem("due"), "due" );
	deepEqual( Stem("duel"), "duel" );
	deepEqual( Stem("duenna"), "duenna" );
	deepEqual( Stem("dues"), "due" );
	deepEqual( Stem("duets"), "duet" );
	deepEqual( Stem("duffer"), "duffer" );
	deepEqual( Stem("duffy"), "duffi" );
	deepEqual( Stem("dug"), "dug" );
	deepEqual( Stem("dugong"), "dugong" );
	deepEqual( Stem("duke"), "duke" );
	deepEqual( Stem("dukedom"), "dukedom" );
	deepEqual( Stem("dukes"), "duke" );
	deepEqual( Stem("dulcet"), "dulcet" );
	deepEqual( Stem("dull"), "dull" );
	deepEqual( Stem("dullards"), "dullard" );
	deepEqual( Stem("duller"), "duller" );
	deepEqual( Stem("dullest"), "dullest" );
	deepEqual( Stem("dullish"), "dullish" );
	deepEqual( Stem("dullness"), "dull" );
	deepEqual( Stem("dully"), "dulli" );
	deepEqual( Stem("dulness"), "dul" );
	deepEqual( Stem("dulwich"), "dulwich" );
	deepEqual( Stem("duly"), "duli" );
	deepEqual( Stem("dumb"), "dumb" );
	deepEqual( Stem("dumbbell"), "dumbbel" );
	deepEqual( Stem("dumbfounded"), "dumbfound" );
	deepEqual( Stem("dumbfoundered"), "dumbfound" );
	deepEqual( Stem("dumbly"), "dumbl" );
	deepEqual( Stem("dummy"), "dummi" );
	deepEqual( Stem("dumpling"), "dumpl" );
	deepEqual( Stem("dun"), "dun" );
	deepEqual( Stem("duncan"), "duncan" );
	deepEqual( Stem("dunes"), "dune" );
	deepEqual( Stem("dung"), "dung" );
	deepEqual( Stem("dungeon"), "dungeon" );
	deepEqual( Stem("dungeons"), "dungeon" );
	deepEqual( Stem("dunghill"), "dunghil" );
	deepEqual( Stem("dunheved"), "dunhev" );
	deepEqual( Stem("dunlops"), "dunlop" );
	deepEqual( Stem("duns"), "dun" );
	deepEqual( Stem("duodecimos"), "duodecimo" );
	deepEqual( Stem("duodenum"), "duodenum" );
	deepEqual( Stem("dupe"), "dupe" );
	deepEqual( Stem("duped"), "dupe" );
	deepEqual( Stem("duping"), "dupe" );
	deepEqual( Stem("duplicate"), "duplic" );
	deepEqual( Stem("duplicates"), "duplic" );
	deepEqual( Stem("duplicity"), "duplic" );
	deepEqual( Stem("durability"), "durabl" );
	deepEqual( Stem("duratio"), "duratio" );
	deepEqual( Stem("duration"), "durat" );
	deepEqual( Stem("durden"), "durden" );
	deepEqual( Stem("durer"), "durer" );
	deepEqual( Stem("durham"), "durham" );
	deepEqual( Stem("during"), "dure" );
	deepEqual( Stem("dursn"), "dursn" );
	deepEqual( Stem("durst"), "durst" );
	deepEqual( Stem("durstn"), "durstn" );
	deepEqual( Stem("dushkin"), "dushkin" );
	deepEqual( Stem("dusk"), "dusk" );
	deepEqual( Stem("duskier"), "duskier" );
	deepEqual( Stem("dusky"), "duski" );
	deepEqual( Stem("dussauts"), "dussaut" );
	deepEqual( Stem("dust"), "dust" );
	deepEqual( Stem("dusted"), "dust" );
	deepEqual( Stem("duster"), "duster" );
	deepEqual( Stem("dustier"), "dustier" );
	deepEqual( Stem("dusting"), "dust" );
	deepEqual( Stem("dustman"), "dustman" );
	deepEqual( Stem("dustn"), "dustn" );
	deepEqual( Stem("dusty"), "dusti" );
	deepEqual( Stem("dutch"), "dutch" );
	deepEqual( Stem("dutchman"), "dutchman" );
	deepEqual( Stem("duties"), "duti" );
	deepEqual( Stem("dutiful"), "duti" );
	deepEqual( Stem("dutifully"), "duti" );
	deepEqual( Stem("duty"), "duti" );
	deepEqual( Stem("dwarf"), "dwarf" );
	deepEqual( Stem("dwell"), "dwell" );
	deepEqual( Stem("dweller"), "dweller" );
	deepEqual( Stem("dwelling"), "dwell" );
	deepEqual( Stem("dwellings"), "dwell" );
	deepEqual( Stem("dwells"), "dwell" );
	deepEqual( Stem("dwelt"), "dwelt" );
	deepEqual( Stem("dwindled"), "dwindl" );
	deepEqual( Stem("dwindling"), "dwindl" );
	deepEqual( Stem("dy"), "dy" );
	deepEqual( Stem("dye"), "dye" );
	deepEqual( Stem("dyed"), "dy" );
	deepEqual( Stem("dyer"), "dyer" );
	deepEqual( Stem("dyes"), "dye" );
	deepEqual( Stem("dying"), "die" );
	deepEqual( Stem("dykes"), "dyke" );
	deepEqual( Stem("dynasty"), "dynasti" );
	deepEqual( Stem("dysentery"), "dysenteri" );
	deepEqual( Stem("e"), "e" );
	deepEqual( Stem("each"), "each" );
	deepEqual( Stem("ead"), "ead" );
	deepEqual( Stem("eager"), "eager" );
	deepEqual( Stem("eagerly"), "eager" );
	deepEqual( Stem("eagerness"), "eager" );
	deepEqual( Stem("eagle"), "eagl" );
	deepEqual( Stem("eagles"), "eagl" );
	deepEqual( Stem("ealthiest"), "ealthiest" );
	deepEqual( Stem("ear"), "ear" );
	deepEqual( Stem("eard"), "eard" );
	deepEqual( Stem("eared"), "ear" );
	deepEqual( Stem("earings"), "ear" );
	deepEqual( Stem("earl"), "earl" );
	deepEqual( Stem("earlier"), "earlier" );
	deepEqual( Stem("earliest"), "earliest" );
	deepEqual( Stem("earls"), "earl" );
	deepEqual( Stem("early"), "earli" );
	deepEqual( Stem("earlybird"), "earlybird" );
	deepEqual( Stem("earn"), "earn" );
	deepEqual( Stem("earned"), "earn" );
	deepEqual( Stem("earnest"), "earnest" );
	deepEqual( Stem("earnestly"), "earnest" );
	deepEqual( Stem("earnestness"), "earnest" );
	deepEqual( Stem("earning"), "earn" );
	deepEqual( Stem("earnings"), "earn" );
	deepEqual( Stem("earring"), "earring" );
	deepEqual( Stem("earrings"), "earring" );
	deepEqual( Stem("ears"), "ear" );
	deepEqual( Stem("eart"), "eart" );
	deepEqual( Stem("earth"), "earth" );
	deepEqual( Stem("earthen"), "earthen" );
	deepEqual( Stem("earthenware"), "earthenwar" );
	deepEqual( Stem("earthly"), "earth" );
	deepEqual( Stem("earthquake"), "earthquak" );
	deepEqual( Stem("earthquakes"), "earthquak" );
	deepEqual( Stem("earths"), "earth" );
	deepEqual( Stem("earthy"), "earthi" );
	deepEqual( Stem("earwigs"), "earwig" );
	deepEqual( Stem("eas"), "ea" );
	deepEqual( Stem("ease"), "eas" );
	deepEqual( Stem("eased"), "eas" );
	deepEqual( Stem("easier"), "easier" );
	deepEqual( Stem("easiest"), "easiest" );
	deepEqual( Stem("easily"), "easili" );
	deepEqual( Stem("easiness"), "easi" );
	deepEqual( Stem("east"), "east" );
	deepEqual( Stem("easter"), "easter" );
	deepEqual( Stem("easterly"), "easter" );
	deepEqual( Stem("eastern"), "eastern" );
	deepEqual( Stem("eastward"), "eastward" );
	deepEqual( Stem("eastwards"), "eastward" );
	deepEqual( Stem("easy"), "easi" );
	deepEqual( Stem("eat"), "eat" );
	deepEqual( Stem("eatable"), "eatabl" );
	deepEqual( Stem("eatables"), "eatabl" );
	deepEqual( Stem("eaten"), "eaten" );
	deepEqual( Stem("eater"), "eater" );
	deepEqual( Stem("eaters"), "eater" );
	deepEqual( Stem("eating"), "eat" );
	deepEqual( Stem("eats"), "eat" );
	deepEqual( Stem("eau"), "eau" );
	deepEqual( Stem("eaves"), "eav" );
	deepEqual( Stem("ebb"), "ebb" );
	deepEqual( Stem("ebbed"), "eb" );
	deepEqual( Stem("ebbing"), "eb" );
	deepEqual( Stem("ebullitions"), "ebullit" );
	deepEqual( Stem("eccentric"), "eccentr" );
	deepEqual( Stem("eccentricities"), "eccentr" );
	deepEqual( Stem("eccentricity"), "eccentr" );
	deepEqual( Stem("ecclesiastical"), "ecclesiast" );
	deepEqual( Stem("ech"), "ech" );
	deepEqual( Stem("echo"), "echo" );
	deepEqual( Stem("echoed"), "echo" );
	deepEqual( Stem("echoes"), "echo" );
	deepEqual( Stem("echoing"), "echo" );
	deepEqual( Stem("echoings"), "echo" );
	deepEqual( Stem("eclipse"), "eclips" );
	deepEqual( Stem("eclipsed"), "eclips" );
	deepEqual( Stem("ecod"), "ecod" );
	deepEqual( Stem("economic"), "econom" );
	deepEqual( Stem("economical"), "econom" );
	deepEqual( Stem("economically"), "econom" );
	deepEqual( Stem("economists"), "economist" );
	deepEqual( Stem("economize"), "econom" );
	deepEqual( Stem("economizing"), "econom" );
	deepEqual( Stem("economy"), "economi" );
	deepEqual( Stem("ecstasies"), "ecstasi" );
	deepEqual( Stem("ecstasy"), "ecstasi" );
	deepEqual( Stem("ecstatic"), "ecstat" );
	deepEqual( Stem("ecstatically"), "ecstat" );
	deepEqual( Stem("ed"), "ed" );
	deepEqual( Stem("eddication"), "eddic" );
	deepEqual( Stem("eddies"), "eddi" );
	deepEqual( Stem("eddying"), "eddi" );
	deepEqual( Stem("eden"), "eden" );
	deepEqual( Stem("edental"), "edent" );
	deepEqual( Stem("edentata"), "edentata" );
	deepEqual( Stem("edge"), "edg" );
	deepEqual( Stem("edged"), "edg" );
	deepEqual( Stem("edgeless"), "edgeless" );
	deepEqual( Stem("edges"), "edg" );
	deepEqual( Stem("edgeware"), "edgewar" );
	deepEqual( Stem("edgeways"), "edgeway" );
	deepEqual( Stem("edging"), "edg" );
	deepEqual( Stem("edible"), "edibl" );
	deepEqual( Stem("edict"), "edict" );
	deepEqual( Stem("edification"), "edif" );
	deepEqual( Stem("edifice"), "edific" );
	deepEqual( Stem("edifices"), "edific" );
	deepEqual( Stem("edified"), "edifi" );
	deepEqual( Stem("edify"), "edifi" );
	deepEqual( Stem("edifying"), "edifi" );
	deepEqual( Stem("edin"), "edin" );
	deepEqual( Stem("edinburgh"), "edinburgh" );
	deepEqual( Stem("edition"), "edit" );
	deepEqual( Stem("editor"), "editor" );
	deepEqual( Stem("editors"), "editor" );
	deepEqual( Stem("educate"), "educ" );
	deepEqual( Stem("educated"), "educ" );
	deepEqual( Stem("educating"), "educ" );
	deepEqual( Stem("education"), "educ" );
	deepEqual( Stem("educational"), "educ" );
	deepEqual( Stem("educator"), "educ" );
	deepEqual( Stem("edusa"), "edusa" );
	deepEqual( Stem("edward"), "edward" );
	deepEqual( Stem("edwards"), "edward" );
	deepEqual( Stem("edwin"), "edwin" );
	deepEqual( Stem("ee"), "ee" );
	deepEqual( Stem("eel"), "eel" );
	deepEqual( Stem("eels"), "eel" );
	deepEqual( Stem("ees"), "ee" );
	deepEqual( Stem("efface"), "effac" );
	deepEqual( Stem("effaceable"), "effac" );
	deepEqual( Stem("effect"), "effect" );
	deepEqual( Stem("effected"), "effect" );
	deepEqual( Stem("effecting"), "effect" );
	deepEqual( Stem("effective"), "effect" );
	deepEqual( Stem("effectiveness"), "effect" );
	deepEqual( Stem("effects"), "effect" );
	deepEqual( Stem("effectual"), "effectu" );
	deepEqual( Stem("effectually"), "effectu" );
	deepEqual( Stem("effeminate"), "effemin" );
	deepEqual( Stem("effervescence"), "effervesc" );
	deepEqual( Stem("effervescent"), "effervesc" );
	deepEqual( Stem("effets"), "effet" );
	deepEqual( Stem("efficacious"), "efficaci" );
	deepEqual( Stem("efficacy"), "efficaci" );
	deepEqual( Stem("efficiency"), "effici" );
	deepEqual( Stem("efficient"), "effici" );
	deepEqual( Stem("effigy"), "effigi" );
	deepEqual( Stem("effloresce"), "effloresc" );
	deepEqual( Stem("efflorescence"), "effloresc" );
	deepEqual( Stem("effluvia"), "effluvia" );
	deepEqual( Stem("effluvium"), "effluvium" );
	deepEqual( Stem("effort"), "effort" );
	deepEqual( Stem("efforts"), "effort" );
	deepEqual( Stem("effrontery"), "effronteri" );
	deepEqual( Stem("effulgence"), "effulg" );
	deepEqual( Stem("effusion"), "effus" );
	deepEqual( Stem("effusions"), "effus" );
	deepEqual( Stem("efther"), "efther" );
	deepEqual( Stem("egad"), "egad" );
	deepEqual( Stem("egbert"), "egbert" );
	deepEqual( Stem("egg"), "egg" );
	deepEqual( Stem("eggs"), "egg" );
	deepEqual( Stem("eggshells"), "eggshel" );
	deepEqual( Stem("eghert"), "eghert" );
	deepEqual( Stem("eglantine"), "eglantin" );
	deepEqual( Stem("egoist"), "egoist" );
	deepEqual( Stem("egotistically"), "egotist" );
	deepEqual( Stem("egregious"), "egregi" );
	deepEqual( Stem("egregiously"), "egregi" );
	deepEqual( Stem("egress"), "egress" );
	deepEqual( Stem("egrets"), "egret" );
	deepEqual( Stem("egypt"), "egypt" );
	deepEqual( Stem("egyptian"), "egyptian" );
	deepEqual( Stem("egyptians"), "egyptian" );
	deepEqual( Stem("eh"), "eh" );
	deepEqual( Stem("ehrenberg"), "ehrenberg" );
	deepEqual( Stem("eight"), "eight" );
	deepEqual( Stem("eighteen"), "eighteen" );
	deepEqual( Stem("eighteenpence"), "eighteenp" );
	deepEqual( Stem("eighteenpences"), "eighteenp" );
	deepEqual( Stem("eighteenpenny"), "eighteenpenni" );
	deepEqual( Stem("eighth"), "eighth" );
	deepEqual( Stem("eighthly"), "eighth" );
	deepEqual( Stem("eighths"), "eighth" );
	deepEqual( Stem("eightpence"), "eightpenc" );
	deepEqual( Stem("eighty"), "eighti" );
	deepEqual( Stem("eimeo"), "eimeo" );
	deepEqual( Stem("eine"), "ein" );
	deepEqual( Stem("either"), "either" );
	deepEqual( Stem("ejaculate"), "ejacul" );
	deepEqual( Stem("ejaculated"), "ejacul" );
	deepEqual( Stem("ejaculates"), "ejacul" );
	deepEqual( Stem("ejaculating"), "ejacul" );
	deepEqual( Stem("ejaculations"), "ejacul" );
	deepEqual( Stem("eject"), "eject" );
	deepEqual( Stem("ejected"), "eject" );
	deepEqual( Stem("ejecting"), "eject" );
	deepEqual( Stem("ekaterininsky"), "ekaterininski" );
	deepEqual( Stem("eke"), "eke" );
	deepEqual( Stem("eked"), "eke" );
	deepEqual( Stem("eking"), "eke" );
	deepEqual( Stem("el"), "el" );
	deepEqual( Stem("elaborate"), "elabor" );
	deepEqual( Stem("elaborated"), "elabor" );
	deepEqual( Stem("elaboration"), "elabor" );
	deepEqual( Stem("elan"), "elan" );
	deepEqual( Stem("elapse"), "elaps" );
	deepEqual( Stem("elapsed"), "elaps" );
	deepEqual( Stem("elapses"), "elaps" );
	deepEqual( Stem("elastic"), "elast" );
	deepEqual( Stem("elasticity"), "elast" );
	deepEqual( Stem("elated"), "elat" );
	deepEqual( Stem("elater"), "elat" );
	deepEqual( Stem("elateridae"), "elaterida" );
	deepEqual( Stem("elaters"), "elat" );
	deepEqual( Stem("elation"), "elat" );
	deepEqual( Stem("elber"), "elber" );
	deepEqual( Stem("elbers"), "elber" );
	deepEqual( Stem("elbow"), "elbow" );
	deepEqual( Stem("elbowed"), "elbow" );
	deepEqual( Stem("elbowing"), "elbow" );
	deepEqual( Stem("elbows"), "elbow" );
	deepEqual( Stem("elder"), "elder" );
	deepEqual( Stem("elderly"), "elder" );
	deepEqual( Stem("elders"), "elder" );
	deepEqual( Stem("eldest"), "eldest" );
	deepEqual( Stem("eldon"), "eldon" );
	deepEqual( Stem("elect"), "elect" );
	deepEqual( Stem("elected"), "elect" );
	deepEqual( Stem("electing"), "elect" );
	deepEqual( Stem("election"), "elect" );
	deepEqual( Stem("electioneering"), "election" );
	deepEqual( Stem("elections"), "elect" );
	deepEqual( Stem("elector"), "elector" );
	deepEqual( Stem("electors"), "elector" );
	deepEqual( Stem("electric"), "electr" );
	deepEqual( Stem("electrical"), "electr" );
	deepEqual( Stem("electricity"), "electr" );
	deepEqual( Stem("elegance"), "eleg" );
	deepEqual( Stem("elegancies"), "eleg" );
	deepEqual( Stem("elegans"), "elegan" );
	deepEqual( Stem("elegant"), "eleg" );
	deepEqual( Stem("elegantly"), "eleg" );
	deepEqual( Stem("element"), "element" );
	deepEqual( Stem("elementary"), "elementari" );
	deepEqual( Stem("elements"), "element" );
	deepEqual( Stem("elephant"), "eleph" );
	deepEqual( Stem("elephantine"), "elephantin" );
	deepEqual( Stem("elephants"), "eleph" );
	deepEqual( Stem("elevate"), "elev" );
	deepEqual( Stem("elevated"), "elev" );
	deepEqual( Stem("elevates"), "elev" );
	deepEqual( Stem("elevating"), "elev" );
	deepEqual( Stem("elevation"), "elev" );
	deepEqual( Stem("elevations"), "elev" );
	deepEqual( Stem("elevatory"), "elevatori" );
	deepEqual( Stem("eleven"), "eleven" );
	deepEqual( Stem("elevens"), "eleven" );
	deepEqual( Stem("eleventh"), "eleventh" );
	deepEqual( Stem("elewated"), "elew" );
	deepEqual( Stem("elf"), "elf" );
	deepEqual( Stem("elfin"), "elfin" );
	deepEqual( Stem("elgble"), "elgbl" );
	deepEqual( Stem("elicit"), "elicit" );
	deepEqual( Stem("elicited"), "elicit" );
	deepEqual( Stem("eliciting"), "elicit" );
	deepEqual( Stem("elicits"), "elicit" );
	deepEqual( Stem("eligible"), "elig" );
	deepEqual( Stem("eliminate"), "elimin" );
	deepEqual( Stem("elite"), "elit" );
	deepEqual( Stem("elizabeth"), "elizabeth" );
	deepEqual( Stem("ell"), "ell" );
	deepEqual( Stem("elle"), "ell" );
	deepEqual( Stem("ellen"), "ellen" );
	deepEqual( Stem("elles"), "ell" );
	deepEqual( Stem("ellesmere"), "ellesmer" );
	deepEqual( Stem("elliptic"), "ellipt" );
	deepEqual( Stem("ellis"), "elli" );
	deepEqual( Stem("ellore"), "ellor" );
	deepEqual( Stem("elm"), "elm" );
	deepEqual( Stem("elmo"), "elmo" );
	deepEqual( Stem("elms"), "elm" );
	deepEqual( Stem("elocution"), "elocut" );
	deepEqual( Stem("elongated"), "elong" );
	deepEqual( Stem("elongation"), "elong" );
	deepEqual( Stem("elope"), "elop" );
	deepEqual( Stem("eloped"), "elop" );
	deepEqual( Stem("elopement"), "elop" );
	deepEqual( Stem("eloquence"), "eloqu" );
	deepEqual( Stem("eloquent"), "eloqu" );
	deepEqual( Stem("eloquently"), "eloqu" );
	deepEqual( Stem("elscholchias"), "elscholchia" );
	deepEqual( Stem("elsdale"), "elsdal" );
	deepEqual( Stem("else"), "els" );
	deepEqual( Stem("elsewhere"), "elsewher" );
	deepEqual( Stem("elucidate"), "elucid" );
	deepEqual( Stem("elucidated"), "elucid" );
	deepEqual( Stem("elude"), "elud" );
	deepEqual( Stem("eluded"), "elud" );
	deepEqual( Stem("eluding"), "elud" );
	deepEqual( Stem("elves"), "elv" );
	deepEqual( Stem("elwes"), "elw" );
	deepEqual( Stem("elysian"), "elysian" );
	deepEqual( Stem("elysium"), "elysium" );
	deepEqual( Stem("em"), "em" );
	deepEqual( Stem("emaciated"), "emaci" );
	deepEqual( Stem("emanated"), "eman" );
	deepEqual( Stem("emanating"), "eman" );
	deepEqual( Stem("emanation"), "eman" );
	deepEqual( Stem("emancipated"), "emancip" );
	deepEqual( Stem("emancipation"), "emancip" );
	deepEqual( Stem("emancipist"), "emancipist" );
	deepEqual( Stem("emasculate"), "emascul" );
	deepEqual( Stem("embankment"), "embank" );
	deepEqual( Stem("embankments"), "embank" );
	deepEqual( Stem("embarassed"), "embarass" );
	deepEqual( Stem("embargo"), "embargo" );
	deepEqual( Stem("embark"), "embark" );
	deepEqual( Stem("embarked"), "embark" );
	deepEqual( Stem("embarking"), "embark" );
	deepEqual( Stem("embarrass"), "embarrass" );
	deepEqual( Stem("embarrassed"), "embarrass" );
	deepEqual( Stem("embarrassing"), "embarrass" );
	deepEqual( Stem("embarrassment"), "embarrass" );
	deepEqual( Stem("embarrassments"), "embarrass" );
	deepEqual( Stem("embassy"), "embassi" );
	deepEqual( Stem("embedded"), "embed" );
	deepEqual( Stem("embellish"), "embellish" );
	deepEqual( Stem("embellished"), "embellish" );
	deepEqual( Stem("embellishes"), "embellish" );
	deepEqual( Stem("embellishing"), "embellish" );
	deepEqual( Stem("embellishment"), "embellish" );
	deepEqual( Stem("embellishments"), "embellish" );
	deepEqual( Stem("ember"), "ember" );
	deepEqual( Stem("embers"), "ember" );
	deepEqual( Stem("embitter"), "embitt" );
	deepEqual( Stem("embittered"), "embitt" );
	deepEqual( Stem("emblazoned"), "emblazon" );
	deepEqual( Stem("emblem"), "emblem" );
	deepEqual( Stem("emblems"), "emblem" );
	deepEqual( Stem("embodied"), "embodi" );
	deepEqual( Stem("embodiment"), "embodi" );
	deepEqual( Stem("emboldened"), "embolden" );
	deepEqual( Stem("emboldening"), "embolden" );
	deepEqual( Stem("emboldens"), "embolden" );
	deepEqual( Stem("embossed"), "emboss" );
	deepEqual( Stem("embowed"), "embow" );
	deepEqual( Stem("embrace"), "embrac" );
	deepEqual( Stem("embraced"), "embrac" );
	deepEqual( Stem("embracer"), "embrac" );
	deepEqual( Stem("embraces"), "embrac" );
	deepEqual( Stem("embracing"), "embrac" );
	deepEqual( Stem("embroidered"), "embroid" );
	deepEqual( Stem("embroidering"), "embroid" );
	deepEqual( Stem("embroiders"), "embroid" );
	deepEqual( Stem("embroidery"), "embroideri" );
	deepEqual( Stem("embroil"), "embroil" );
	deepEqual( Stem("embryo"), "embryo" );
	deepEqual( Stem("emerald"), "emerald" );
	deepEqual( Stem("emerge"), "emerg" );
	deepEqual( Stem("emerged"), "emerg" );
	deepEqual( Stem("emergency"), "emerg" );
	deepEqual( Stem("emerges"), "emerg" );
	deepEqual( Stem("emerging"), "emerg" );
	deepEqual( Stem("emigrate"), "emigr" );
	deepEqual( Stem("emigrated"), "emigr" );
	deepEqual( Stem("emigration"), "emigr" );
	deepEqual( Stem("emilia"), "emilia" );
	deepEqual( Stem("emily"), "emili" );
	deepEqual( Stem("eminence"), "emin" );
	deepEqual( Stem("eminent"), "emin" );
	deepEqual( Stem("eminently"), "emin" );
	deepEqual( Stem("emit"), "emit" );
	deepEqual( Stem("emits"), "emit" );
	deepEqual( Stem("emitted"), "emit" );
	deepEqual( Stem("emitting"), "emit" );
	deepEqual( Stem("emma"), "emma" );
	deepEqual( Stem("emollient"), "emolli" );
	deepEqual( Stem("emoluments"), "emolu" );
	deepEqual( Stem("emotion"), "emot" );
	deepEqual( Stem("emotional"), "emot" );
	deepEqual( Stem("emotions"), "emot" );
	deepEqual( Stem("emperor"), "emperor" );
	deepEqual( Stem("empetrum"), "empetrum" );
	deepEqual( Stem("emphasis"), "emphasi" );
	deepEqual( Stem("emphasise"), "emphasis" );
	deepEqual( Stem("emphasising"), "emphasis" );
	deepEqual( Stem("emphasizing"), "emphas" );
	deepEqual( Stem("emphatic"), "emphat" );
	deepEqual( Stem("emphatically"), "emphat" );
	deepEqual( Stem("empire"), "empir" );
	deepEqual( Stem("employ"), "employ" );
	deepEqual( Stem("employed"), "employ" );
	deepEqual( Stem("employer"), "employ" );
	deepEqual( Stem("employers"), "employ" );
	deepEqual( Stem("employing"), "employ" );
	deepEqual( Stem("employment"), "employ" );
	deepEqual( Stem("employments"), "employ" );
	deepEqual( Stem("employs"), "employ" );
	deepEqual( Stem("emporium"), "emporium" );
	deepEqual( Stem("emporiums"), "emporium" );
	deepEqual( Stem("empower"), "empow" );
	deepEqual( Stem("empowered"), "empow" );
	deepEqual( Stem("empress"), "empress" );
	deepEqual( Stem("emptied"), "empti" );
	deepEqual( Stem("empties"), "empti" );
	deepEqual( Stem("emptiness"), "empti" );
	deepEqual( Stem("emptor"), "emptor" );
	deepEqual( Stem("empty"), "empti" );
	deepEqual( Stem("emptying"), "empti" );
	deepEqual( Stem("emu"), "emu" );
	deepEqual( Stem("emulation"), "emul" );
	deepEqual( Stem("emus"), "emus" );
	deepEqual( Stem("en"), "en" );
	deepEqual( Stem("enable"), "enabl" );
	deepEqual( Stem("enabled"), "enabl" );
	deepEqual( Stem("enables"), "enabl" );
	deepEqual( Stem("enabling"), "enabl" );
	deepEqual( Stem("enact"), "enact" );
	deepEqual( Stem("enacted"), "enact" );
	deepEqual( Stem("enacting"), "enact" );
	deepEqual( Stem("enamel"), "enamel" );
	deepEqual( Stem("enamelled"), "enamel" );
	deepEqual( Stem("enamoured"), "enamour" );
	deepEqual( Stem("encamped"), "encamp" );
	deepEqual( Stem("encampment"), "encamp" );
	deepEqual( Stem("encamps"), "encamp" );
	deepEqual( Stem("encased"), "encas" );
	deepEqual( Stem("encerrado"), "encerrado" );
	deepEqual( Stem("enchanted"), "enchant" );
	deepEqual( Stem("enchanter"), "enchant" );
	deepEqual( Stem("enchanting"), "enchant" );
	deepEqual( Stem("encircle"), "encircl" );
	deepEqual( Stem("encircled"), "encircl" );
	deepEqual( Stem("encircles"), "encircl" );
	deepEqual( Stem("encircling"), "encircl" );
	deepEqual( Stem("enclos"), "enclo" );
	deepEqual( Stem("enclose"), "enclos" );
	deepEqual( Stem("enclosed"), "enclos" );
	deepEqual( Stem("enclosing"), "enclos" );
	deepEqual( Stem("enclosure"), "enclosur" );
	deepEqual( Stem("enclosures"), "enclosur" );
	deepEqual( Stem("encomium"), "encomium" );
	deepEqual( Stem("encomiums"), "encomium" );
	deepEqual( Stem("encompassed"), "encompass" );
	deepEqual( Stem("encompassing"), "encompass" );
	deepEqual( Stem("encore"), "encor" );
	deepEqual( Stem("encounter"), "encount" );
	deepEqual( Stem("encountered"), "encount" );
	deepEqual( Stem("encountering"), "encount" );
	deepEqual( Stem("encounters"), "encount" );
	deepEqual( Stem("encourage"), "encourag" );
	deepEqual( Stem("encouraged"), "encourag" );
	deepEqual( Stem("encouragement"), "encourag" );
	deepEqual( Stem("encouragements"), "encourag" );
	deepEqual( Stem("encourager"), "encourag" );
	deepEqual( Stem("encourages"), "encourag" );
	deepEqual( Stem("encouraging"), "encourag" );
	deepEqual( Stem("encouragingly"), "encourag" );
	deepEqual( Stem("encroach"), "encroach" );
	deepEqual( Stem("encroached"), "encroach" );
	deepEqual( Stem("encroaches"), "encroach" );
	deepEqual( Stem("encroachment"), "encroach" );
	deepEqual( Stem("encroachments"), "encroach" );
	deepEqual( Stem("encrusted"), "encrust" );
	deepEqual( Stem("encumber"), "encumb" );
	deepEqual( Stem("encumbered"), "encumb" );
	deepEqual( Stem("encumbering"), "encumb" );
	deepEqual( Stem("encyclop"), "encyclop" );
	deepEqual( Stem("end"), "end" );
	deepEqual( Stem("endanger"), "endang" );
	deepEqual( Stem("endangered"), "endang" );
	deepEqual( Stem("endear"), "endear" );
	deepEqual( Stem("endeared"), "endear" );
	deepEqual( Stem("endearing"), "endear" );
	deepEqual( Stem("endearment"), "endear" );
	deepEqual( Stem("endearments"), "endear" );
	deepEqual( Stem("endeavour"), "endeavour" );
	deepEqual( Stem("endeavoured"), "endeavour" );
	deepEqual( Stem("endeavouring"), "endeavour" );
	deepEqual( Stem("endeavours"), "endeavour" );
	deepEqual( Stem("ended"), "end" );
	deepEqual( Stem("endemic"), "endem" );
	deepEqual( Stem("enderby"), "enderbi" );
	deepEqual( Stem("enders"), "ender" );
	deepEqual( Stem("ending"), "end" );
	deepEqual( Stem("endless"), "endless" );
	deepEqual( Stem("endlessly"), "endless" );
	deepEqual( Stem("endow"), "endow" );
	deepEqual( Stem("endowed"), "endow" );
	deepEqual( Stem("endowing"), "endow" );
	deepEqual( Stem("endowment"), "endow" );
	deepEqual( Stem("endowments"), "endow" );
	deepEqual( Stem("endroits"), "endroit" );
	deepEqual( Stem("ends"), "end" );
	deepEqual( Stem("endurable"), "endur" );
	deepEqual( Stem("endurance"), "endur" );
	deepEqual( Stem("endure"), "endur" );
	deepEqual( Stem("endured"), "endur" );
	deepEqual( Stem("enduring"), "endur" );
	deepEqual( Stem("eneaf"), "eneaf" );
	deepEqual( Stem("enemies"), "enemi" );
	deepEqual( Stem("enemy"), "enemi" );
	deepEqual( Stem("energetic"), "energet" );
	deepEqual( Stem("energetically"), "energet" );
	deepEqual( Stem("energies"), "energi" );
	deepEqual( Stem("energy"), "energi" );
	deepEqual( Stem("enervated"), "enerv" );
	deepEqual( Stem("enfant"), "enfant" );
	deepEqual( Stem("enfeebled"), "enfeebl" );
	deepEqual( Stem("enfolded"), "enfold" );
	deepEqual( Stem("enfolding"), "enfold" );
	deepEqual( Stem("enforce"), "enforc" );
	deepEqual( Stem("enforced"), "enforc" );
	deepEqual( Stem("enforcing"), "enforc" );
	deepEqual( Stem("engaddi"), "engaddi" );
	deepEqual( Stem("engage"), "engag" );
	deepEqual( Stem("engaged"), "engag" );
	deepEqual( Stem("engagement"), "engag" );
	deepEqual( Stem("engagements"), "engag" );
	deepEqual( Stem("engages"), "engag" );
	deepEqual( Stem("engaging"), "engag" );
	deepEqual( Stem("engagingness"), "engaging" );
	deepEqual( Stem("engagmg"), "engagmg" );
	deepEqual( Stem("engender"), "engend" );
	deepEqual( Stem("engendered"), "engend" );
	deepEqual( Stem("engenhodo"), "engenhodo" );
	deepEqual( Stem("engine"), "engin" );
	deepEqual( Stem("engineer"), "engin" );
	deepEqual( Stem("engineering"), "engin" );
	deepEqual( Stem("engines"), "engin" );
	deepEqual( Stem("england"), "england" );
	deepEqual( Stem("english"), "english" );
	deepEqual( Stem("englishman"), "englishman" );
	deepEqual( Stem("englishmen"), "englishmen" );
	deepEqual( Stem("englishwoman"), "englishwoman" );
	deepEqual( Stem("engraved"), "engrav" );
	deepEqual( Stem("engraven"), "engraven" );
	deepEqual( Stem("engraver"), "engrav" );
	deepEqual( Stem("engraving"), "engrav" );
	deepEqual( Stem("engravings"), "engrav" );
	deepEqual( Stem("engrossed"), "engross" );
	deepEqual( Stem("engrosser"), "engross" );
	deepEqual( Stem("engrossing"), "engross" );
	deepEqual( Stem("enhance"), "enhanc" );
	deepEqual( Stem("enhanced"), "enhanc" );
	deepEqual( Stem("enhancing"), "enhanc" );
	deepEqual( Stem("enigma"), "enigma" );
	deepEqual( Stem("enigmatic"), "enigmat" );
	deepEqual( Stem("enigmatically"), "enigmat" );
	deepEqual( Stem("enjoin"), "enjoin" );
	deepEqual( Stem("enjoined"), "enjoin" );
	deepEqual( Stem("enjoins"), "enjoin" );
	deepEqual( Stem("enjoy"), "enjoy" );
	deepEqual( Stem("enjoyable"), "enjoy" );
	deepEqual( Stem("enjoyed"), "enjoy" );
	deepEqual( Stem("enjoying"), "enjoy" );
	deepEqual( Stem("enjoyingly"), "enjoy" );
	deepEqual( Stem("enjoyment"), "enjoy" );
	deepEqual( Stem("enjoys"), "enjoy" );
	deepEqual( Stem("enlarge"), "enlarg" );
	deepEqual( Stem("enlarged"), "enlarg" );
	deepEqual( Stem("enlarging"), "enlarg" );
	deepEqual( Stem("enlighten"), "enlighten" );
	deepEqual( Stem("enlightened"), "enlighten" );
	deepEqual( Stem("enlightenment"), "enlighten" );
	deepEqual( Stem("enlist"), "enlist" );
	deepEqual( Stem("enlisted"), "enlist" );
	deepEqual( Stem("enlisting"), "enlist" );
	deepEqual( Stem("enlistment"), "enlist" );
	deepEqual( Stem("enliven"), "enliven" );
	deepEqual( Stem("enlivened"), "enliven" );
	deepEqual( Stem("enlivening"), "enliven" );
	deepEqual( Stem("enlivenment"), "enliven" );
	deepEqual( Stem("enmity"), "enmiti" );
	deepEqual( Stem("ennoble"), "ennobl" );
	deepEqual( Stem("ennobled"), "ennobl" );
	deepEqual( Stem("ennobles"), "ennobl" );
	deepEqual( Stem("ennui"), "ennui" );
	deepEqual( Stem("enormity"), "enorm" );
	deepEqual( Stem("enormous"), "enorm" );
	deepEqual( Stem("enormously"), "enorm" );
	deepEqual( Stem("enough"), "enough" );
	deepEqual( Stem("enrage"), "enrag" );
	deepEqual( Stem("enraged"), "enrag" );
	deepEqual( Stem("enraptured"), "enraptur" );
	deepEqual( Stem("enriched"), "enrich" );
	deepEqual( Stem("enriching"), "enrich" );
	deepEqual( Stem("enrichment"), "enrich" );
	deepEqual( Stem("enrobed"), "enrob" );
	deepEqual( Stem("enrol"), "enrol" );
	deepEqual( Stem("enrolled"), "enrol" );
	deepEqual( Stem("enshrined"), "enshrin" );
	deepEqual( Stem("enshrouded"), "enshroud" );
	deepEqual( Stem("ensign"), "ensign" );
	deepEqual( Stem("enslaver"), "enslav" );
	deepEqual( Stem("enslaving"), "enslav" );
	deepEqual( Stem("ensnare"), "ensnar" );
	deepEqual( Stem("ensnared"), "ensnar" );
	deepEqual( Stem("ensue"), "ensu" );
	deepEqual( Stem("ensued"), "ensu" );
	deepEqual( Stem("ensues"), "ensu" );
	deepEqual( Stem("ensuing"), "ensu" );
	deepEqual( Stem("ensure"), "ensur" );
	deepEqual( Stem("entail"), "entail" );
	deepEqual( Stem("entailed"), "entail" );
	deepEqual( Stem("entangle"), "entangl" );
	deepEqual( Stem("entangled"), "entangl" );
	deepEqual( Stem("entanglement"), "entangl" );
	deepEqual( Stem("enter"), "enter" );
	deepEqual( Stem("entered"), "enter" );
	deepEqual( Stem("entering"), "enter" );
	deepEqual( Stem("enterprise"), "enterpris" );
	deepEqual( Stem("enterprising"), "enterpris" );
	deepEqual( Stem("enters"), "enter" );
	deepEqual( Stem("entertain"), "entertain" );
	deepEqual( Stem("entertained"), "entertain" );
	deepEqual( Stem("entertainer"), "entertain" );
	deepEqual( Stem("entertaining"), "entertain" );
	deepEqual( Stem("entertainment"), "entertain" );
	deepEqual( Stem("entertainments"), "entertain" );
	deepEqual( Stem("entertains"), "entertain" );
	deepEqual( Stem("enthralled"), "enthral" );
	deepEqual( Stem("enthusiasm"), "enthusiasm" );
	deepEqual( Stem("enthusiastic"), "enthusiast" );
	deepEqual( Stem("enthusiastically"), "enthusiast" );
	deepEqual( Stem("enticed"), "entic" );
	deepEqual( Stem("enticing"), "entic" );
	deepEqual( Stem("entire"), "entir" );
	deepEqual( Stem("entirely"), "entir" );
	deepEqual( Stem("entirety"), "entireti" );
	deepEqual( Stem("entitle"), "entitl" );
	deepEqual( Stem("entitled"), "entitl" );
	deepEqual( Stem("entitling"), "entitl" );
	deepEqual( Stem("entombed"), "entomb" );
	deepEqual( Stem("entombment"), "entomb" );
	deepEqual( Stem("entomol"), "entomol" );
	deepEqual( Stem("entomological"), "entomolog" );
	deepEqual( Stem("entomologist"), "entomologist" );
	deepEqual( Stem("entomology"), "entomolog" );
	deepEqual( Stem("entomostraca"), "entomostraca" );
	deepEqual( Stem("entomostracous"), "entomostrac" );
	deepEqual( Stem("entrails"), "entrail" );
	deepEqual( Stem("entrance"), "entranc" );
	deepEqual( Stem("entrances"), "entranc" );
	deepEqual( Stem("entrap"), "entrap" );
	deepEqual( Stem("entrapped"), "entrap" );
	deepEqual( Stem("entre"), "entr" );
	deepEqual( Stem("entreat"), "entreat" );
	deepEqual( Stem("entreated"), "entreat" );
	deepEqual( Stem("entreaties"), "entreati" );
	deepEqual( Stem("entreating"), "entreat" );
	deepEqual( Stem("entreats"), "entreat" );
	deepEqual( Stem("entreaty"), "entreati" );
	deepEqual( Stem("entree"), "entre" );
	deepEqual( Stem("entrenched"), "entrench" );
	deepEqual( Stem("entries"), "entri" );
	deepEqual( Stem("entrust"), "entrust" );
	deepEqual( Stem("entrusted"), "entrust" );
	deepEqual( Stem("entry"), "entri" );
	deepEqual( Stem("entwine"), "entwin" );
	deepEqual( Stem("entwined"), "entwin" );
	deepEqual( Stem("entwines"), "entwin" );
	deepEqual( Stem("enumerate"), "enumer" );
	deepEqual( Stem("enumerated"), "enumer" );
	deepEqual( Stem("enunciated"), "enunci" );
	deepEqual( Stem("enunciation"), "enunci" );
	deepEqual( Stem("envelope"), "envelop" );
	deepEqual( Stem("enveloped"), "envelop" );
	deepEqual( Stem("envelopes"), "envelop" );
	deepEqual( Stem("envelops"), "envelop" );
	deepEqual( Stem("envenomed"), "envenom" );
	deepEqual( Stem("enviable"), "enviabl" );
	deepEqual( Stem("envied"), "envi" );
	deepEqual( Stem("envies"), "envi" );
	deepEqual( Stem("envious"), "envious" );
	deepEqual( Stem("environ"), "environ" );
	deepEqual( Stem("environment"), "environ" );
	deepEqual( Stem("environne"), "environn" );
	deepEqual( Stem("envy"), "envi" );
	deepEqual( Stem("epaulets"), "epaulet" );
	deepEqual( Stem("epaulette"), "epaulett" );
	deepEqual( Stem("epeira"), "epeira" );
	deepEqual( Stem("ephemeral"), "ephemer" );
	deepEqual( Stem("epicure"), "epicur" );
	deepEqual( Stem("epicurean"), "epicurean" );
	deepEqual( Stem("epidemics"), "epidem" );
	deepEqual( Stem("epilepsy"), "epilepsi" );
	deepEqual( Stem("epileptic"), "epilept" );
	deepEqual( Stem("epilogue"), "epilogu" );
	deepEqual( Stem("episode"), "episod" );
	deepEqual( Stem("episodes"), "episod" );
	deepEqual( Stem("epistle"), "epistl" );
	deepEqual( Stem("epithet"), "epithet" );
	deepEqual( Stem("epithets"), "epithet" );
	deepEqual( Stem("epitome"), "epitom" );
	deepEqual( Stem("epoch"), "epoch" );
	deepEqual( Stem("epochs"), "epoch" );
	deepEqual( Stem("eprise"), "epris" );
	deepEqual( Stem("epsom"), "epsom" );
	deepEqual( Stem("equable"), "equabl" );
	deepEqual( Stem("equal"), "equal" );
	deepEqual( Stem("equality"), "equal" );
	deepEqual( Stem("equalle"), "equall" );
	deepEqual( Stem("equalled"), "equal" );
	deepEqual( Stem("equalling"), "equal" );
	deepEqual( Stem("equally"), "equal" );
	deepEqual( Stem("equals"), "equal" );
	deepEqual( Stem("equanimity"), "equanim" );
	deepEqual( Stem("equator"), "equat" );
	deepEqual( Stem("equatorial"), "equatori" );
	deepEqual( Stem("equestrian"), "equestrian" );
	deepEqual( Stem("equidistant"), "equidist" );
	deepEqual( Stem("equilibrium"), "equilibrium" );
	deepEqual( Stem("equinox"), "equinox" );
	deepEqual( Stem("equipage"), "equipag" );
	deepEqual( Stem("equipages"), "equipag" );
	deepEqual( Stem("equipment"), "equip" );
	deepEqual( Stem("equipped"), "equip" );
	deepEqual( Stem("equitable"), "equit" );
	deepEqual( Stem("equitably"), "equit" );
	deepEqual( Stem("equitem"), "equitem" );
	deepEqual( Stem("equity"), "equiti" );
	deepEqual( Stem("equivalent"), "equival" );
	deepEqual( Stem("equivocal"), "equivoc" );
	deepEqual( Stem("equivocation"), "equivoc" );
	deepEqual( Stem("equus"), "equus" );
	deepEqual( Stem("er"), "er" );
	deepEqual( Stem("era"), "era" );
	deepEqual( Stem("eradicate"), "erad" );
	deepEqual( Stem("eradicated"), "erad" );
	deepEqual( Stem("eras"), "era" );
	deepEqual( Stem("erased"), "eras" );
	deepEqual( Stem("ercharged"), "ercharg" );
	deepEqual( Stem("ere"), "ere" );
	deepEqual( Stem("erec"), "erec" );
	deepEqual( Stem("erect"), "erect" );
	deepEqual( Stem("erected"), "erect" );
	deepEqual( Stem("erections"), "erect" );
	deepEqual( Stem("erectness"), "erect" );
	deepEqual( Stem("erects"), "erect" );
	deepEqual( Stem("erichson"), "erichson" );
	deepEqual( Stem("erle"), "erl" );
	deepEqual( Stem("erme"), "erm" );
	deepEqual( Stem("ermine"), "ermin" );
	deepEqual( Stem("erosio"), "erosio" );
	deepEqual( Stem("err"), "err" );
	deepEqual( Stem("errand"), "errand" );
	deepEqual( Stem("errands"), "errand" );
	deepEqual( Stem("erratic"), "errat" );
	deepEqual( Stem("erred"), "er" );
	deepEqual( Stem("erring"), "er" );
	deepEqual( Stem("erroneous"), "erron" );
	deepEqual( Stem("error"), "error" );
	deepEqual( Stem("errors"), "error" );
	deepEqual( Stem("erst"), "erst" );
	deepEqual( Stem("erstan"), "erstan" );
	deepEqual( Stem("eructans"), "eructan" );
	deepEqual( Stem("erudite"), "erudit" );
	deepEqual( Stem("erudition"), "erudit" );
	deepEqual( Stem("erupted"), "erupt" );
	deepEqual( Stem("eruption"), "erupt" );
	deepEqual( Stem("eruptions"), "erupt" );
	deepEqual( Stem("eruptive"), "erupt" );
	deepEqual( Stem("eryngium"), "eryngium" );
	deepEqual( Stem("erysipelas"), "erysipela" );
	deepEqual( Stem("erythraeum"), "erythraeum" );
	deepEqual( Stem("es"), "es" );
	deepEqual( Stem("escape"), "escap" );
	deepEqual( Stem("escaped"), "escap" );
	deepEqual( Stem("escapes"), "escap" );
	deepEqual( Stem("escaping"), "escap" );
	deepEqual( Stem("escarpment"), "escarp" );
	deepEqual( Stem("escarpments"), "escarp" );
	deepEqual( Stem("eschara"), "eschara" );
	deepEqual( Stem("escheated"), "escheat" );
	deepEqual( Stem("escort"), "escort" );
	deepEqual( Stem("escorted"), "escort" );
	deepEqual( Stem("escorting"), "escort" );
	deepEqual( Stem("esculentus"), "esculentus" );
	deepEqual( Stem("escutcheons"), "escutcheon" );
	deepEqual( Stem("esk"), "esk" );
	deepEqual( Stem("espagne"), "espagn" );
	deepEqual( Stem("especial"), "especi" );
	deepEqual( Stem("especially"), "especi" );
	deepEqual( Stem("espied"), "espi" );
	deepEqual( Stem("esplanades"), "esplanad" );
	deepEqual( Stem("espouse"), "espous" );
	deepEqual( Stem("espoused"), "espous" );
	deepEqual( Stem("esprit"), "esprit" );
	deepEqual( Stem("esq"), "esq" );
	deepEqual( Stem("esquimau"), "esquimau" );
	deepEqual( Stem("esquire"), "esquir" );
	deepEqual( Stem("essay"), "essay" );
	deepEqual( Stem("essayed"), "essay" );
	deepEqual( Stem("essays"), "essay" );
	deepEqual( Stem("esse"), "ess" );
	deepEqual( Stem("essence"), "essenc" );
	deepEqual( Stem("essential"), "essenti" );
	deepEqual( Stem("essentially"), "essenti" );
	deepEqual( Stem("essentials"), "essenti" );
	deepEqual( Stem("essex"), "essex" );
	deepEqual( Stem("est"), "est" );
	deepEqual( Stem("establish"), "establish" );
	deepEqual( Stem("established"), "establish" );
	deepEqual( Stem("establishes"), "establish" );
	deepEqual( Stem("establishing"), "establish" );
	deepEqual( Stem("establishment"), "establish" );
	deepEqual( Stem("establishments"), "establish" );
	deepEqual( Stem("estacado"), "estacado" );
	deepEqual( Stem("estancia"), "estancia" );
	deepEqual( Stem("estancias"), "estancia" );
	deepEqual( Stem("estanciero"), "estanciero" );
	deepEqual( Stem("estate"), "estat" );
	deepEqual( Stem("estates"), "estat" );
	deepEqual( Stem("esteem"), "esteem" );
	deepEqual( Stem("esteemed"), "esteem" );
	deepEqual( Stem("esteeming"), "esteem" );
	deepEqual( Stem("esteems"), "esteem" );
	deepEqual( Stem("esther"), "esther" );
	deepEqual( Stem("esthers"), "esther" );
	deepEqual( Stem("estimable"), "estim" );
	deepEqual( Stem("estimate"), "estim" );
	deepEqual( Stem("estimated"), "estim" );
	deepEqual( Stem("estimates"), "estim" );
	deepEqual( Stem("estimating"), "estim" );
	deepEqual( Stem("estimation"), "estim" );
	deepEqual( Stem("estrange"), "estrang" );
	deepEqual( Stem("estranged"), "estrang" );
	deepEqual( Stem("estrangement"), "estrang" );
	deepEqual( Stem("estranging"), "estrang" );
	deepEqual( Stem("estuaries"), "estuari" );
	deepEqual( Stem("estuary"), "estuari" );
	deepEqual( Stem("et"), "et" );
	deepEqual( Stem("etage"), "etag" );
	deepEqual( Stem("etc"), "etc" );
	deepEqual( Stem("ete"), "ete" );
	deepEqual( Stem("eternal"), "etern" );
	deepEqual( Stem("eternally"), "etern" );
	deepEqual( Stem("eternelle"), "eternell" );
	deepEqual( Stem("eternity"), "etern" );
	deepEqual( Stem("etes"), "ete" );
	deepEqual( Stem("ethereal"), "ether" );
	deepEqual( Stem("etiquette"), "etiquett" );
	deepEqual( Stem("etiquettes"), "etiquett" );
	deepEqual( Stem("etna"), "etna" );
	deepEqual( Stem("eton"), "eton" );
	deepEqual( Stem("etonnement"), "etonn" );
	deepEqual( Stem("etymology"), "etymolog" );
	deepEqual( Stem("eucalypti"), "eucalypti" );
	deepEqual( Stem("eucalyptus"), "eucalyptus" );
	deepEqual( Stem("eudromia"), "eudromia" );
	deepEqual( Stem("eulogistic"), "eulogist" );
	deepEqual( Stem("eulogium"), "eulogium" );
	deepEqual( Stem("euphorbia"), "euphorbia" );
	deepEqual( Stem("euphorbiaceae"), "euphorbiacea" );
	deepEqual( Stem("europe"), "europ" );
	deepEqual( Stem("european"), "european" );
	deepEqual( Stem("europeans"), "european" );
	deepEqual( Stem("eustace"), "eustac" );
	deepEqual( Stem("euston"), "euston" );
	deepEqual( Stem("ev"), "ev" );
	deepEqual( Stem("evade"), "evad" );
	deepEqual( Stem("evaded"), "evad" );
	deepEqual( Stem("evading"), "evad" );
	deepEqual( Stem("evans"), "evan" );
	deepEqual( Stem("evaporate"), "evapor" );
	deepEqual( Stem("evaporated"), "evapor" );
	deepEqual( Stem("evaporates"), "evapor" );
	deepEqual( Stem("evaporation"), "evapor" );
	deepEqual( Stem("evasion"), "evas" );
	deepEqual( Stem("evasions"), "evas" );
	deepEqual( Stem("evasive"), "evas" );
	deepEqual( Stem("evasively"), "evas" );
	deepEqual( Stem("evasiveness"), "evas" );
	deepEqual( Stem("eve"), "eve" );
	deepEqual( Stem("evelyn"), "evelyn" );
	deepEqual( Stem("evelyns"), "evelyn" );
	deepEqual( Stem("even"), "even" );
	deepEqual( Stem("evening"), "even" );
	deepEqual( Stem("evenings"), "even" );
	deepEqual( Stem("evenlng"), "evenlng" );
	deepEqual( Stem("evenly"), "even" );
	deepEqual( Stem("evenness"), "even" );
	deepEqual( Stem("event"), "event" );
	deepEqual( Stem("eventful"), "event" );
	deepEqual( Stem("events"), "event" );
	deepEqual( Stem("eventually"), "eventu" );
	deepEqual( Stem("ever"), "ever" );
	deepEqual( Stem("everbody"), "everbodi" );
	deepEqual( Stem("everbrowns"), "everbrown" );
	deepEqual( Stem("everett"), "everett" );
	deepEqual( Stem("evergreen"), "evergreen" );
	deepEqual( Stem("evergreens"), "evergreen" );
	deepEqual( Stem("everlasting"), "everlast" );
	deepEqual( Stem("everlastingly"), "everlast" );
	deepEqual( Stem("evermore"), "evermor" );
	deepEqual( Stem("evervwhere"), "evervwher" );
	deepEqual( Stem("every"), "everi" );
	deepEqual( Stem("everybody"), "everybodi" );
	deepEqual( Stem("everybodys"), "everybodi" );
	deepEqual( Stem("everyday"), "everyday" );
	deepEqual( Stem("everyone"), "everyon" );
	deepEqual( Stem("everything"), "everyth" );
	deepEqual( Stem("everythink"), "everythink" );
	deepEqual( Stem("everyways"), "everyway" );
	deepEqual( Stem("everywhere"), "everywher" );
	deepEqual( Stem("everywheres"), "everywher" );
	deepEqual( Stem("evidence"), "evid" );
	deepEqual( Stem("evidences"), "evid" );
	deepEqual( Stem("evidenfly"), "evidenfli" );
	deepEqual( Stem("evident"), "evid" );
	deepEqual( Stem("evidently"), "evid" );
	deepEqual( Stem("evil"), "evil" );
	deepEqual( Stem("evils"), "evil" );
	deepEqual( Stem("evince"), "evinc" );
	deepEqual( Stem("evinced"), "evinc" );
	deepEqual( Stem("evincing"), "evinc" );
	deepEqual( Stem("evins"), "evin" );
	deepEqual( Stem("evoke"), "evok" );
	deepEqual( Stem("evoked"), "evok" );
	deepEqual( Stem("evokes"), "evok" );
	deepEqual( Stem("evolution"), "evolut" );
	deepEqual( Stem("evolutions"), "evolut" );
	deepEqual( Stem("ew"), "ew" );
	deepEqual( Stem("ewe"), "ewe" );
	deepEqual( Stem("ewent"), "ewent" );
	deepEqual( Stem("ex"), "ex" );
	deepEqual( Stem("exact"), "exact" );
	deepEqual( Stem("exacted"), "exact" );
	deepEqual( Stem("exacting"), "exact" );
	deepEqual( Stem("exactions"), "exact" );
	deepEqual( Stem("exactitude"), "exactitud" );
	deepEqual( Stem("exactly"), "exact" );
	deepEqual( Stem("exactness"), "exact" );
	deepEqual( Stem("exaggerate"), "exagger" );
	deepEqual( Stem("exaggerated"), "exagger" );
	deepEqual( Stem("exaggerates"), "exagger" );
	deepEqual( Stem("exaggerating"), "exagger" );
	deepEqual( Stem("exaggeration"), "exagger" );
	deepEqual( Stem("exaggerations"), "exagger" );
	deepEqual( Stem("exalt"), "exalt" );
	deepEqual( Stem("exaltation"), "exalt" );
	deepEqual( Stem("exalted"), "exalt" );
	deepEqual( Stem("exalting"), "exalt" );
	deepEqual( Stem("examination"), "examin" );
	deepEqual( Stem("examinations"), "examin" );
	deepEqual( Stem("examine"), "examin" );
	deepEqual( Stem("examined"), "examin" );
	deepEqual( Stem("examines"), "examin" );
	deepEqual( Stem("examining"), "examin" );
	deepEqual( Stem("example"), "exampl" );
	deepEqual( Stem("examples"), "exampl" );
	deepEqual( Stem("exasperated"), "exasper" );
	deepEqual( Stem("exasperating"), "exasper" );
	deepEqual( Stem("exasperation"), "exasper" );
	deepEqual( Stem("excavated"), "excav" );
	deepEqual( Stem("excavation"), "excav" );
	deepEqual( Stem("excavations"), "excav" );
	deepEqual( Stem("exceed"), "exceed" );
	deepEqual( Stem("exceeded"), "exceed" );
	deepEqual( Stem("exceeding"), "exceed" );
	deepEqual( Stem("exceedingly"), "exceed" );
	deepEqual( Stem("exceeds"), "exceed" );
	deepEqual( Stem("excelled"), "excel" );
	deepEqual( Stem("excellence"), "excel" );
	deepEqual( Stem("excellences"), "excel" );
	deepEqual( Stem("excellencies"), "excel" );
	deepEqual( Stem("excellency"), "excel" );
	deepEqual( Stem("excellent"), "excel" );
	deepEqual( Stem("excellently"), "excel" );
	deepEqual( Stem("except"), "except" );
	deepEqual( Stem("excepted"), "except" );
	deepEqual( Stem("excepting"), "except" );
	deepEqual( Stem("exception"), "except" );
	deepEqual( Stem("exceptional"), "except" );
	deepEqual( Stem("exceptionally"), "except" );
	deepEqual( Stem("exceptionalness"), "exception" );
	deepEqual( Stem("exceptions"), "except" );
	deepEqual( Stem("excess"), "excess" );
	deepEqual( Stem("excesses"), "excess" );
	deepEqual( Stem("excessive"), "excess" );
	deepEqual( Stem("excessively"), "excess" );
	deepEqual( Stem("exchange"), "exchang" );
	deepEqual( Stem("exchanged"), "exchang" );
	deepEqual( Stem("exchanges"), "exchang" );
	deepEqual( Stem("exchanging"), "exchang" );
	deepEqual( Stem("exchequer"), "exchequ" );
	deepEqual( Stem("excitable"), "excit" );
	deepEqual( Stem("excitableness"), "excit" );
	deepEqual( Stem("excite"), "excit" );
	deepEqual( Stem("excited"), "excit" );
	deepEqual( Stem("excitedly"), "excit" );
	deepEqual( Stem("excitement"), "excit" );
	deepEqual( Stem("excitements"), "excit" );
	deepEqual( Stem("excites"), "excit" );
	deepEqual( Stem("exciting"), "excit" );
	deepEqual( Stem("exclaim"), "exclaim" );
	deepEqual( Stem("exclaimed"), "exclaim" );
	deepEqual( Stem("exclaiming"), "exclaim" );
	deepEqual( Stem("exclaims"), "exclaim" );
	deepEqual( Stem("exclamation"), "exclam" );
	deepEqual( Stem("exclamations"), "exclam" );
	deepEqual( Stem("exclude"), "exclud" );
	deepEqual( Stem("excluded"), "exclud" );
	deepEqual( Stem("excluding"), "exclud" );
	deepEqual( Stem("exclusion"), "exclus" );
	deepEqual( Stem("exclusions"), "exclus" );
	deepEqual( Stem("exclusive"), "exclus" );
	deepEqual( Stem("exclusively"), "exclus" );
	deepEqual( Stem("exclusiveness"), "exclus" );
	deepEqual( Stem("excoriate"), "excori" );
	deepEqual( Stem("excremens"), "excremen" );
	deepEqual( Stem("excrescence"), "excresc" );
	deepEqual( Stem("excruciatingly"), "excruci" );
	deepEqual( Stem("excursion"), "excurs" );
	deepEqual( Stem("excursions"), "excurs" );
	deepEqual( Stem("excusable"), "excus" );
	deepEqual( Stem("excuse"), "excus" );
	deepEqual( Stem("excused"), "excus" );
	deepEqual( Stem("excuses"), "excus" );
	deepEqual( Stem("excusing"), "excus" );
	deepEqual( Stem("execrable"), "execr" );
	deepEqual( Stem("execrate"), "execr" );
	deepEqual( Stem("execrating"), "execr" );
	deepEqual( Stem("execute"), "execut" );
	deepEqual( Stem("executed"), "execut" );
	deepEqual( Stem("executing"), "execut" );
	deepEqual( Stem("execution"), "execut" );
	deepEqual( Stem("executioner"), "execution" );
	deepEqual( Stem("executions"), "execut" );
	deepEqual( Stem("executive"), "execut" );
	deepEqual( Stem("executor"), "executor" );
	deepEqual( Stem("executors"), "executor" );
	deepEqual( Stem("exemplary"), "exemplari" );
	deepEqual( Stem("exemplified"), "exemplifi" );
	deepEqual( Stem("exemplifies"), "exemplifi" );
	deepEqual( Stem("exemplify"), "exemplifi" );
	deepEqual( Stem("exempt"), "exempt" );
	deepEqual( Stem("exempted"), "exempt" );
	deepEqual( Stem("exemption"), "exempt" );
	deepEqual( Stem("exercise"), "exercis" );
	deepEqual( Stem("exercised"), "exercis" );
	deepEqual( Stem("exercises"), "exercis" );
	deepEqual( Stem("exercising"), "exercis" );
	deepEqual( Stem("exert"), "exert" );
	deepEqual( Stem("exerted"), "exert" );
	deepEqual( Stem("exerting"), "exert" );
	deepEqual( Stem("exertion"), "exert" );
	deepEqual( Stem("exertions"), "exert" );
	deepEqual( Stem("exerts"), "exert" );
	deepEqual( Stem("exeter"), "exet" );
	deepEqual( Stem("exhalations"), "exhal" );
	deepEqual( Stem("exhale"), "exhal" );
	deepEqual( Stem("exhaled"), "exhal" );
	deepEqual( Stem("exhaust"), "exhaust" );
	deepEqual( Stem("exhausted"), "exhaust" );
	deepEqual( Stem("exhausting"), "exhaust" );
	deepEqual( Stem("exhaustion"), "exhaust" );
	deepEqual( Stem("exhaustless"), "exhaustless" );
	deepEqual( Stem("exhausts"), "exhaust" );
	deepEqual( Stem("exhibit"), "exhibit" );
	deepEqual( Stem("exhibited"), "exhibit" );
	deepEqual( Stem("exhibiting"), "exhibit" );
	deepEqual( Stem("exhibition"), "exhibit" );
	deepEqual( Stem("exhibitions"), "exhibit" );
	deepEqual( Stem("exhibits"), "exhibit" );
	deepEqual( Stem("exhilarated"), "exhilar" );
	deepEqual( Stem("exhilarating"), "exhilar" );
	deepEqual( Stem("exhilaration"), "exhilar" );
	deepEqual( Stem("exhort"), "exhort" );
	deepEqual( Stem("exhortation"), "exhort" );
	deepEqual( Stem("exhortations"), "exhort" );
	deepEqual( Stem("exhorted"), "exhort" );
	deepEqual( Stem("exhorting"), "exhort" );
	deepEqual( Stem("exhorts"), "exhort" );
	deepEqual( Stem("exigencies"), "exig" );
	deepEqual( Stem("exile"), "exil" );
	deepEqual( Stem("exiled"), "exil" );
	deepEqual( Stem("exiles"), "exil" );
	deepEqual( Stem("exist"), "exist" );
	deepEqual( Stem("existe"), "exist" );
	deepEqual( Stem("existed"), "exist" );
	deepEqual( Stem("existence"), "exist" );
	deepEqual( Stem("existent"), "exist" );
	deepEqual( Stem("existing"), "exist" );
	deepEqual( Stem("exists"), "exist" );
	deepEqual( Stem("exit"), "exit" );
	deepEqual( Stem("exorbitant"), "exorbit" );
	deepEqual( Stem("exordium"), "exordium" );
	deepEqual( Stem("exotic"), "exot" );
	deepEqual( Stem("exotically"), "exot" );
	deepEqual( Stem("exotics"), "exot" );
	deepEqual( Stem("expand"), "expand" );
	deepEqual( Stem("expande"), "expand" );
	deepEqual( Stem("expanded"), "expand" );
	deepEqual( Stem("expanding"), "expand" );
	deepEqual( Stem("expands"), "expand" );
	deepEqual( Stem("expanse"), "expans" );
	deepEqual( Stem("expanses"), "expans" );
	deepEqual( Stem("expansion"), "expans" );
	deepEqual( Stem("expansions"), "expans" );
	deepEqual( Stem("expansive"), "expans" );
	deepEqual( Stem("expatiate"), "expati" );
	deepEqual( Stem("expatiated"), "expati" );
	deepEqual( Stem("expatiating"), "expati" );
	deepEqual( Stem("expatriated"), "expatri" );
	deepEqual( Stem("expatriation"), "expatri" );
	deepEqual( Stem("expect"), "expect" );
	deepEqual( Stem("expectancy"), "expect" );
	deepEqual( Stem("expectant"), "expect" );
	deepEqual( Stem("expectants"), "expect" );
	deepEqual( Stem("expectation"), "expect" );
	deepEqual( Stem("expectations"), "expect" );
	deepEqual( Stem("expected"), "expect" );
	deepEqual( Stem("expecting"), "expect" );
	deepEqual( Stem("expects"), "expect" );
	deepEqual( Stem("exped"), "exp" );
	deepEqual( Stem("expedience"), "expedi" );
	deepEqual( Stem("expediency"), "expedi" );
	deepEqual( Stem("expedient"), "expedi" );
	deepEqual( Stem("expedients"), "expedi" );
	deepEqual( Stem("expedite"), "expedit" );
	deepEqual( Stem("expedition"), "expedit" );
	deepEqual( Stem("expeditions"), "expedit" );
	deepEqual( Stem("expeditious"), "expediti" );
	deepEqual( Stem("expeditiously"), "expediti" );
	deepEqual( Stem("expel"), "expel" );
	deepEqual( Stem("expelled"), "expel" );
	deepEqual( Stem("expelling"), "expel" );
	deepEqual( Stem("expend"), "expend" );
	deepEqual( Stem("expended"), "expend" );
	deepEqual( Stem("expenditure"), "expenditur" );
	deepEqual( Stem("expense"), "expens" );
	deepEqual( Stem("expenses"), "expens" );
	deepEqual( Stem("expensive"), "expens" );
	deepEqual( Stem("expensively"), "expens" );
	deepEqual( Stem("experience"), "experi" );
	deepEqual( Stem("experienced"), "experienc" );
	deepEqual( Stem("experiences"), "experi" );
	deepEqual( Stem("experiment"), "experi" );
	deepEqual( Stem("experimental"), "experiment" );
	deepEqual( Stem("experimented"), "experi" );
	deepEqual( Stem("experiments"), "experi" );
	deepEqual( Stem("expert"), "expert" );
	deepEqual( Stem("expiate"), "expiat" );
	deepEqual( Stem("expiating"), "expiat" );
	deepEqual( Stem("expiation"), "expiat" );
	deepEqual( Stem("expiration"), "expir" );
	deepEqual( Stem("expire"), "expir" );
	deepEqual( Stem("expired"), "expir" );
	deepEqual( Stem("expiring"), "expir" );
	deepEqual( Stem("explain"), "explain" );
	deepEqual( Stem("explained"), "explain" );
	deepEqual( Stem("explaining"), "explain" );
	deepEqual( Stem("explains"), "explain" );
	deepEqual( Stem("explanation"), "explan" );
	deepEqual( Stem("explanations"), "explan" );
	deepEqual( Stem("explanatory"), "explanatori" );
	deepEqual( Stem("expletive"), "explet" );
	deepEqual( Stem("expletives"), "explet" );
	deepEqual( Stem("expletus"), "expletus" );
	deepEqual( Stem("explicit"), "explicit" );
	deepEqual( Stem("explode"), "explod" );
	deepEqual( Stem("explodes"), "explod" );
	deepEqual( Stem("exploding"), "explod" );
	deepEqual( Stem("exploit"), "exploit" );
	deepEqual( Stem("exploits"), "exploit" );
	deepEqual( Stem("explore"), "explor" );
	deepEqual( Stem("explored"), "explor" );
	deepEqual( Stem("explorer"), "explor" );
	deepEqual( Stem("exploring"), "explor" );
	deepEqual( Stem("explosion"), "explos" );
	deepEqual( Stem("explosions"), "explos" );
	deepEqual( Stem("explosive"), "explos" );
	deepEqual( Stem("exponent"), "expon" );
	deepEqual( Stem("export"), "export" );
	deepEqual( Stem("exportation"), "export" );
	deepEqual( Stem("exported"), "export" );
	deepEqual( Stem("exports"), "export" );
	deepEqual( Stem("expose"), "expos" );
	deepEqual( Stem("exposed"), "expos" );
	deepEqual( Stem("exposes"), "expos" );
	deepEqual( Stem("exposing"), "expos" );
	deepEqual( Stem("exposition"), "exposit" );
	deepEqual( Stem("expostulate"), "expostul" );
	deepEqual( Stem("expostulated"), "expostul" );
	deepEqual( Stem("expostulating"), "expostul" );
	deepEqual( Stem("expostulation"), "expostul" );
	deepEqual( Stem("exposure"), "exposur" );
	deepEqual( Stem("expound"), "expound" );
	deepEqual( Stem("expounding"), "expound" );
	deepEqual( Stem("express"), "express" );
	deepEqual( Stem("expressed"), "express" );
	deepEqual( Stem("expresses"), "express" );
	deepEqual( Stem("expressing"), "express" );
	deepEqual( Stem("expression"), "express" );
	deepEqual( Stem("expressionless"), "expressionless" );
	deepEqual( Stem("expressions"), "express" );
	deepEqual( Stem("expressive"), "express" );
	deepEqual( Stem("expressively"), "express" );
	deepEqual( Stem("expressly"), "expressli" );
	deepEqual( Stem("expulsion"), "expuls" );
	deepEqual( Stem("exquisite"), "exquisit" );
	deepEqual( Stem("exquisitely"), "exquisit" );
	deepEqual( Stem("exquisites"), "exquisit" );
	deepEqual( Stem("exserted"), "exsert" );
	deepEqual( Stem("extant"), "extant" );
	deepEqual( Stem("extemporaneously"), "extemporan" );
	deepEqual( Stem("extemporary"), "extemporari" );
	deepEqual( Stem("extemporized"), "extempor" );
	deepEqual( Stem("extend"), "extend" );
	deepEqual( Stem("extended"), "extend" );
	deepEqual( Stem("extending"), "extend" );
	deepEqual( Stem("extends"), "extend" );
	deepEqual( Stem("extensile"), "extensil" );
	deepEqual( Stem("extension"), "extens" );
	deepEqual( Stem("extensive"), "extens" );
	deepEqual( Stem("extensively"), "extens" );
	deepEqual( Stem("extent"), "extent" );
	deepEqual( Stem("extenuating"), "extenu" );
	deepEqual( Stem("extenuation"), "extenu" );
	deepEqual( Stem("exterior"), "exterior" );
	deepEqual( Stem("exterminated"), "extermin" );
	deepEqual( Stem("exterminating"), "extermin" );
	deepEqual( Stem("extermination"), "extermin" );
	deepEqual( Stem("exterminations"), "extermin" );
	deepEqual( Stem("external"), "extern" );
	deepEqual( Stem("externally"), "extern" );
	deepEqual( Stem("extinct"), "extinct" );
	deepEqual( Stem("extinction"), "extinct" );
	deepEqual( Stem("extinguish"), "extinguish" );
	deepEqual( Stem("extinguished"), "extinguish" );
	deepEqual( Stem("extinguisher"), "extinguish" );
	deepEqual( Stem("extinguishers"), "extinguish" );
	deepEqual( Stem("extinguishes"), "extinguish" );
	deepEqual( Stem("extinguishing"), "extinguish" );
	deepEqual( Stem("extirpating"), "extirp" );
	deepEqual( Stem("extol"), "extol" );
	deepEqual( Stem("extolled"), "extol" );
	deepEqual( Stem("extolling"), "extol" );
	deepEqual( Stem("extort"), "extort" );
	deepEqual( Stem("extorted"), "extort" );
	deepEqual( Stem("extorting"), "extort" );
	deepEqual( Stem("extortion"), "extort" );
	deepEqual( Stem("extortions"), "extort" );
	deepEqual( Stem("extra"), "extra" );
	deepEqual( Stem("extract"), "extract" );
	deepEqual( Stem("extracted"), "extract" );
	deepEqual( Stem("extracting"), "extract" );
	deepEqual( Stem("extraction"), "extract" );
	deepEqual( Stem("extracts"), "extract" );
	deepEqual( Stem("extraneous"), "extran" );
	deepEqual( Stem("extraordinarily"), "extraordinarili" );
	deepEqual( Stem("extraordinary"), "extraordinari" );
	deepEqual( Stem("extras"), "extra" );
	deepEqual( Stem("extravagance"), "extravag" );
	deepEqual( Stem("extravagances"), "extravag" );
	deepEqual( Stem("extravagant"), "extravag" );
	deepEqual( Stem("extreme"), "extrem" );
	deepEqual( Stem("extremely"), "extrem" );
	deepEqual( Stem("extremes"), "extrem" );
	deepEqual( Stem("extremest"), "extremest" );
	deepEqual( Stem("extremities"), "extrem" );
	deepEqual( Stem("extremity"), "extrem" );
	deepEqual( Stem("extremum"), "extremum" );
	deepEqual( Stem("extricate"), "extric" );
	deepEqual( Stem("extricated"), "extric" );
	deepEqual( Stem("extricating"), "extric" );
	deepEqual( Stem("extrication"), "extric" );
	deepEqual( Stem("exuberant"), "exuber" );
	deepEqual( Stem("exudations"), "exud" );
	deepEqual( Stem("exuded"), "exud" );
	deepEqual( Stem("exultation"), "exult" );
	deepEqual( Stem("exulted"), "exult" );
	deepEqual( Stem("exulting"), "exult" );
	deepEqual( Stem("exultingly"), "exult" );
	deepEqual( Stem("exults"), "exult" );
	deepEqual( Stem("ey"), "ey" );
	deepEqual( Stem("eye"), "eye" );
	deepEqual( Stem("eyeball"), "eyebal" );
	deepEqual( Stem("eyebrow"), "eyebrow" );
	deepEqual( Stem("eyebrows"), "eyebrow" );
	deepEqual( Stem("eyed"), "eye" );
	deepEqual( Stem("eyeglass"), "eyeglass" );
	deepEqual( Stem("eyeing"), "eye" );
	deepEqual( Stem("eyelash"), "eyelash" );
	deepEqual( Stem("eyelashes"), "eyelash" );
	deepEqual( Stem("eyelid"), "eyelid" );
	deepEqual( Stem("eyelids"), "eyelid" );
	deepEqual( Stem("eyes"), "eye" );
	deepEqual( Stem("eyesight"), "eyesight" );
	deepEqual( Stem("eyesore"), "eyesor" );
	deepEqual( Stem("eyre"), "eyr" );
	deepEqual( Stem("ezactly"), "ezact" );
	deepEqual( Stem("f"), "f" );
	deepEqual( Stem("fa"), "fa" );
	deepEqual( Stem("fable"), "fabl" );
	deepEqual( Stem("fabled"), "fabl" );
	deepEqual( Stem("fables"), "fabl" );
	deepEqual( Stem("fabric"), "fabric" );
	deepEqual( Stem("fabricated"), "fabric" );
	deepEqual( Stem("fabricius"), "fabricius" );
	deepEqual( Stem("fabulous"), "fabul" );
	deepEqual( Stem("fabulously"), "fabul" );
	deepEqual( Stem("facade"), "facad" );
	deepEqual( Stem("face"), "face" );
	deepEqual( Stem("faced"), "face" );
	deepEqual( Stem("faces"), "face" );
	deepEqual( Stem("facetious"), "faceti" );
	deepEqual( Stem("facetiously"), "faceti" );
	deepEqual( Stem("facetiousness"), "faceti" );
	deepEqual( Stem("facial"), "facial" );
	deepEqual( Stem("facile"), "facil" );
	deepEqual( Stem("facilitate"), "facilit" );
	deepEqual( Stem("facilitates"), "facilit" );
	deepEqual( Stem("facilitating"), "facilit" );
	deepEqual( Stem("facilities"), "facil" );
	deepEqual( Stem("facility"), "facil" );
	deepEqual( Stem("facing"), "face" );
	deepEqual( Stem("facings"), "face" );
	deepEqual( Stem("fact"), "fact" );
	deepEqual( Stem("faction"), "faction" );
	deepEqual( Stem("factor"), "factor" );
	deepEqual( Stem("factors"), "factor" );
	deepEqual( Stem("factory"), "factori" );
	deepEqual( Stem("facts"), "fact" );
	deepEqual( Stem("faculties"), "faculti" );
	deepEqual( Stem("faculty"), "faculti" );
	deepEqual( Stem("fade"), "fade" );
	deepEqual( Stem("faded"), "fade" );
	deepEqual( Stem("fadedly"), "fade" );
	deepEqual( Stem("fades"), "fade" );
	deepEqual( Stem("fading"), "fade" );
	deepEqual( Stem("fag"), "fag" );
	deepEqual( Stem("fagged"), "fag" );
	deepEqual( Stem("faggot"), "faggot" );
	deepEqual( Stem("fagus"), "fagus" );
	deepEqual( Stem("fah"), "fah" );
	deepEqual( Stem("fail"), "fail" );
	deepEqual( Stem("failed"), "fail" );
	deepEqual( Stem("failing"), "fail" );
	deepEqual( Stem("failings"), "fail" );
	deepEqual( Stem("fails"), "fail" );
	deepEqual( Stem("failure"), "failur" );
	deepEqual( Stem("failures"), "failur" );
	deepEqual( Stem("fain"), "fain" );
	deepEqual( Stem("faineant"), "faineant" );
	deepEqual( Stem("faineants"), "faineant" );
	deepEqual( Stem("faint"), "faint" );
	deepEqual( Stem("fainted"), "faint" );
	deepEqual( Stem("fainter"), "fainter" );
	deepEqual( Stem("faintest"), "faintest" );
	deepEqual( Stem("fainting"), "faint" );
	deepEqual( Stem("faintings"), "faint" );
	deepEqual( Stem("faintly"), "faint" );
	deepEqual( Stem("faintness"), "faint" );
	deepEqual( Stem("faints"), "faint" );
	deepEqual( Stem("fair"), "fair" );
	deepEqual( Stem("faire"), "fair" );
	deepEqual( Stem("fairer"), "fairer" );
	deepEqual( Stem("fairest"), "fairest" );
	deepEqual( Stem("fairies"), "fairi" );
	deepEqual( Stem("fairish"), "fairish" );
	deepEqual( Stem("fairly"), "fair" );
	deepEqual( Stem("fairness"), "fair" );
	deepEqual( Stem("fairy"), "fairi" );
	deepEqual( Stem("fait"), "fait" );
	deepEqual( Stem("faith"), "faith" );
	deepEqual( Stem("faithful"), "faith" );
	deepEqual( Stem("faithfuller"), "faithful" );
	deepEqual( Stem("faithfully"), "faith" );
	deepEqual( Stem("faithfulness"), "faith" );
	deepEqual( Stem("falconer"), "falcon" );
	deepEqual( Stem("falkland"), "falkland" );
	deepEqual( Stem("falklands"), "falkland" );
	deepEqual( Stem("fall"), "fall" );
	deepEqual( Stem("fallacy"), "fallaci" );
	deepEqual( Stem("fallen"), "fallen" );
	deepEqual( Stem("fallible"), "fallibl" );
	deepEqual( Stem("fallin"), "fallin" );
	deepEqual( Stem("falling"), "fall" );
	deepEqual( Stem("falls"), "fall" );
	deepEqual( Stem("falmouth"), "falmouth" );
	deepEqual( Stem("false"), "fals" );
	deepEqual( Stem("falsehood"), "falsehood" );
	deepEqual( Stem("falsehoods"), "falsehood" );
	deepEqual( Stem("falsely"), "fals" );
	deepEqual( Stem("falseness"), "fals" );
	deepEqual( Stem("falser"), "falser" );
	deepEqual( Stem("falsetto"), "falsetto" );
	deepEqual( Stem("falsify"), "falsifi" );
	deepEqual( Stem("falsity"), "falsiti" );
	deepEqual( Stem("falter"), "falter" );
	deepEqual( Stem("faltered"), "falter" );
	deepEqual( Stem("faltering"), "falter" );
	deepEqual( Stem("falteringly"), "falter" );
	deepEqual( Stem("falters"), "falter" );
	deepEqual( Stem("fame"), "fame" );
	deepEqual( Stem("famed"), "fame" );
	deepEqual( Stem("familiar"), "familiar" );
	deepEqual( Stem("familiaris"), "familiari" );
	deepEqual( Stem("familiarised"), "familiaris" );
	deepEqual( Stem("familiarities"), "familiar" );
	deepEqual( Stem("familiarity"), "familiar" );
	deepEqual( Stem("familiarized"), "familiar" );
	deepEqual( Stem("familiarly"), "familiar" );
	deepEqual( Stem("familiars"), "familiar" );
	deepEqual( Stem("families"), "famili" );
	deepEqual( Stem("family"), "famili" );
	deepEqual( Stem("famine"), "famin" );
	deepEqual( Stem("famines"), "famin" );
	deepEqual( Stem("famished"), "famish" );
	deepEqual( Stem("famoso"), "famoso" );
	deepEqual( Stem("famous"), "famous" );
	deepEqual( Stem("famously"), "famous" );
	deepEqual( Stem("fan"), "fan" );
	deepEqual( Stem("fanaticism"), "fanatic" );
	deepEqual( Stem("fancied"), "fanci" );
	deepEqual( Stem("fancier"), "fancier" );
	deepEqual( Stem("fancies"), "fanci" );
	deepEqual( Stem("fanciful"), "fanci" );
	deepEqual( Stem("fancy"), "fanci" );
	deepEqual( Stem("fancying"), "fanci" );
	deepEqual( Stem("faneant"), "faneant" );
	deepEqual( Stem("fangs"), "fang" );
	deepEqual( Stem("fanlight"), "fanlight" );
	deepEqual( Stem("fanned"), "fan" );
	deepEqual( Stem("fanny"), "fanni" );
	deepEqual( Stem("fans"), "fan" );
	deepEqual( Stem("fanshawe"), "fanshaw" );
	deepEqual( Stem("fantastic"), "fantast" );
	deepEqual( Stem("fantastical"), "fantast" );
	deepEqual( Stem("fantastically"), "fantast" );
	deepEqual( Stem("fantasy"), "fantasi" );
	deepEqual( Stem("far"), "far" );
	deepEqual( Stem("farce"), "farc" );
	deepEqual( Stem("fare"), "fare" );
	deepEqual( Stem("fared"), "fare" );
	deepEqual( Stem("fares"), "fare" );
	deepEqual( Stem("farewell"), "farewel" );
	deepEqual( Stem("farewells"), "farewel" );
	deepEqual( Stem("farinha"), "farinha" );
	deepEqual( Stem("farm"), "farm" );
	deepEqual( Stem("farmed"), "farm" );
	deepEqual( Stem("farmer"), "farmer" );
	deepEqual( Stem("farmers"), "farmer" );
	deepEqual( Stem("farmhouse"), "farmhous" );
	deepEqual( Stem("farmhouses"), "farmhous" );
	deepEqual( Stem("farming"), "farm" );
	deepEqual( Stem("farms"), "farm" );
	deepEqual( Stem("farrago"), "farrago" );
	deepEqual( Stem("farther"), "farther" );
	deepEqual( Stem("farthest"), "farthest" );
	deepEqual( Stem("farthing"), "farth" );
	deepEqual( Stem("farthings"), "farth" );
	deepEqual( Stem("fascinate"), "fascin" );
	deepEqual( Stem("fascinated"), "fascin" );
	deepEqual( Stem("fascinating"), "fascin" );
	deepEqual( Stem("fascination"), "fascin" );
	deepEqual( Stem("fascinations"), "fascin" );
	deepEqual( Stem("fascinator"), "fascin" );
	deepEqual( Stem("fash"), "fash" );
	deepEqual( Stem("fashion"), "fashion" );
	deepEqual( Stem("fashionable"), "fashion" );
	deepEqual( Stem("fashionably"), "fashion" );
	deepEqual( Stem("fashionahle"), "fashionahl" );
	deepEqual( Stem("fashioned"), "fashion" );
	deepEqual( Stem("fashions"), "fashion" );
	deepEqual( Stem("fast"), "fast" );
	deepEqual( Stem("fasten"), "fasten" );
	deepEqual( Stem("fastened"), "fasten" );
	deepEqual( Stem("fastening"), "fasten" );
	deepEqual( Stem("fastenings"), "fasten" );
	deepEqual( Stem("fastens"), "fasten" );
	deepEqual( Stem("faster"), "faster" );
	deepEqual( Stem("fastest"), "fastest" );
	deepEqual( Stem("fastidious"), "fastidi" );
	deepEqual( Stem("fastidiousness"), "fastidi" );
	deepEqual( Stem("fasting"), "fast" );
	deepEqual( Stem("fastness"), "fast" );
	deepEqual( Stem("fat"), "fat" );
	deepEqual( Stem("fatal"), "fatal" );
	deepEqual( Stem("fate"), "fate" );
	deepEqual( Stem("fated"), "fate" );
	deepEqual( Stem("fateful"), "fate" );
	deepEqual( Stem("fates"), "fate" );
	deepEqual( Stem("father"), "father" );
	deepEqual( Stem("fatherland"), "fatherland" );
	deepEqual( Stem("fatherless"), "fatherless" );
	deepEqual( Stem("fatherly"), "father" );
	deepEqual( Stem("fathers"), "father" );
	deepEqual( Stem("fathom"), "fathom" );
	deepEqual( Stem("fathomless"), "fathomless" );
	deepEqual( Stem("fathoms"), "fathom" );
	deepEqual( Stem("fatigue"), "fatigu" );
	deepEqual( Stem("fatigued"), "fatigu" );
	deepEqual( Stem("fatigues"), "fatigu" );
	deepEqual( Stem("fatiguing"), "fatigu" );
	deepEqual( Stem("fatima"), "fatima" );
	deepEqual( Stem("fatly"), "fat" );
	deepEqual( Stem("fatness"), "fat" );
	deepEqual( Stem("fatten"), "fatten" );
	deepEqual( Stem("fattened"), "fatten" );
	deepEqual( Stem("fattening"), "fatten" );
	deepEqual( Stem("fatter"), "fatter" );
	deepEqual( Stem("fattish"), "fattish" );
	deepEqual( Stem("fatuity"), "fatuiti" );
	deepEqual( Stem("faugh"), "faugh" );
	deepEqual( Stem("fault"), "fault" );
	deepEqual( Stem("faultless"), "faultless" );
	deepEqual( Stem("faults"), "fault" );
	deepEqual( Stem("fauna"), "fauna" );
	deepEqual( Stem("faux"), "faux" );
	deepEqual( Stem("favour"), "favour" );
	deepEqual( Stem("favourable"), "favour" );
	deepEqual( Stem("favourably"), "favour" );
	deepEqual( Stem("favoured"), "favour" );
	deepEqual( Stem("favouring"), "favour" );
	deepEqual( Stem("favourite"), "favourit" );
	deepEqual( Stem("favourites"), "favourit" );
	deepEqual( Stem("favours"), "favour" );
	deepEqual( Stem("fawn"), "fawn" );
	deepEqual( Stem("fawned"), "fawn" );
	deepEqual( Stem("fawning"), "fawn" );
	deepEqual( Stem("fawns"), "fawn" );
	deepEqual( Stem("fazenda"), "fazenda" );
	deepEqual( Stem("fazendas"), "fazenda" );
	deepEqual( Stem("fe"), "fe" );
	deepEqual( Stem("feace"), "feac" );
	deepEqual( Stem("feaced"), "feac" );
	deepEqual( Stem("fealty"), "fealti" );
	deepEqual( Stem("fear"), "fear" );
	deepEqual( Stem("feared"), "fear" );
	deepEqual( Stem("feareth"), "feareth" );
	deepEqual( Stem("fearful"), "fear" );
	deepEqual( Stem("fearfully"), "fear" );
	deepEqual( Stem("fearfulty"), "fearfulti" );
	deepEqual( Stem("fearing"), "fear" );
	deepEqual( Stem("feariocious"), "fearioci" );
	deepEqual( Stem("fearless"), "fearless" );
	deepEqual( Stem("fearlessly"), "fearless" );
	deepEqual( Stem("fears"), "fear" );
	deepEqual( Stem("feasible"), "feasibl" );
	deepEqual( Stem("feast"), "feast" );
	deepEqual( Stem("feasted"), "feast" );
	deepEqual( Stem("feasting"), "feast" );
	deepEqual( Stem("feasts"), "feast" );
	deepEqual( Stem("feat"), "feat" );
	deepEqual( Stem("feather"), "feather" );
	deepEqual( Stem("featherbed"), "featherb" );
	deepEqual( Stem("feathered"), "feather" );
	deepEqual( Stem("feathers"), "feather" );
	deepEqual( Stem("feathery"), "featheri" );
	deepEqual( Stem("feats"), "feat" );
	deepEqual( Stem("feature"), "featur" );
	deepEqual( Stem("featured"), "featur" );
	deepEqual( Stem("features"), "featur" );
	deepEqual( Stem("feb"), "feb" );
	deepEqual( Stem("februa"), "februa" );
	deepEqual( Stem("february"), "februari" );
	deepEqual( Stem("fed"), "fed" );
	deepEqual( Stem("fedosya"), "fedosya" );
	deepEqual( Stem("fedyaev"), "fedyaev" );
	deepEqual( Stem("fee"), "fee" );
	deepEqual( Stem("feeble"), "feebl" );
	deepEqual( Stem("feebleness"), "feebl" );
	deepEqual( Stem("feebler"), "feebler" );
	deepEqual( Stem("feebly"), "feebli" );
	deepEqual( Stem("feeckle"), "feeckl" );
	deepEqual( Stem("feed"), "feed" );
	deepEqual( Stem("feeder"), "feeder" );
	deepEqual( Stem("feeders"), "feeder" );
	deepEqual( Stem("feeding"), "feed" );
	deepEqual( Stem("feeds"), "feed" );
	deepEqual( Stem("feel"), "feel" );
	deepEqual( Stem("feeling"), "feel" );
	deepEqual( Stem("feelingly"), "feel" );
	deepEqual( Stem("feelings"), "feel" );
	deepEqual( Stem("feels"), "feel" );
	deepEqual( Stem("fees"), "fee" );
	deepEqual( Stem("feet"), "feet" );
	deepEqual( Stem("feign"), "feign" );
	deepEqual( Stem("feigned"), "feign" );
	deepEqual( Stem("feigning"), "feign" );
	deepEqual( Stem("feigns"), "feign" );
	deepEqual( Stem("feijao"), "feijao" );
	deepEqual( Stem("feint"), "feint" );
	deepEqual( Stem("feints"), "feint" );
	deepEqual( Stem("fel"), "fel" );
	deepEqual( Stem("feldspathic"), "feldspath" );
	deepEqual( Stem("felicitations"), "felicit" );
	deepEqual( Stem("felicitous"), "felicit" );
	deepEqual( Stem("felicitously"), "felicit" );
	deepEqual( Stem("felicity"), "felic" );
	deepEqual( Stem("feline"), "felin" );
	deepEqual( Stem("felipe"), "felip" );
	deepEqual( Stem("felix"), "felix" );
	deepEqual( Stem("fell"), "fell" );
	deepEqual( Stem("felled"), "fell" );
	deepEqual( Stem("feller"), "feller" );
	deepEqual( Stem("fellow"), "fellow" );
	deepEqual( Stem("fellows"), "fellow" );
	deepEqual( Stem("fellowship"), "fellowship" );
	deepEqual( Stem("felo"), "felo" );
	deepEqual( Stem("felon"), "felon" );
	deepEqual( Stem("feloniously"), "feloni" );
	deepEqual( Stem("felons"), "felon" );
	deepEqual( Stem("felony"), "feloni" );
	deepEqual( Stem("felspar"), "felspar" );
	deepEqual( Stem("felspathic"), "felspath" );
	deepEqual( Stem("felt"), "felt" );
	deepEqual( Stem("female"), "femal" );
	deepEqual( Stem("females"), "femal" );
	deepEqual( Stem("feminine"), "feminin" );
	deepEqual( Stem("fen"), "fen" );
	deepEqual( Stem("fence"), "fenc" );
	deepEqual( Stem("fenced"), "fenc" );
	deepEqual( Stem("fences"), "fenc" );
	deepEqual( Stem("fencing"), "fenc" );
	deepEqual( Stem("fender"), "fender" );
	deepEqual( Stem("fennel"), "fennel" );
	deepEqual( Stem("fens"), "fen" );
	deepEqual( Stem("ferdinand"), "ferdinand" );
	deepEqual( Stem("ferdy"), "ferdi" );
	deepEqual( Stem("ferguson"), "ferguson" );
	deepEqual( Stem("ferment"), "ferment" );
	deepEqual( Stem("fermentable"), "ferment" );
	deepEqual( Stem("fermenting"), "ferment" );
	deepEqual( Stem("fern"), "fern" );
	deepEqual( Stem("fernal"), "fernal" );
	deepEqual( Stem("fernandez"), "fernandez" );
	deepEqual( Stem("fernando"), "fernando" );
	deepEqual( Stem("fernery"), "ferneri" );
	deepEqual( Stem("ferns"), "fern" );
	deepEqual( Stem("ferocious"), "feroci" );
	deepEqual( Stem("ferociously"), "feroci" );
	deepEqual( Stem("ferocity"), "feroc" );
	deepEqual( Stem("feronia"), "feronia" );
	deepEqual( Stem("ferret"), "ferret" );
	deepEqual( Stem("ferreted"), "ferret" );
	deepEqual( Stem("ferried"), "ferri" );
	deepEqual( Stem("ferruginous"), "ferrugin" );
	deepEqual( Stem("ferrule"), "ferrul" );
	deepEqual( Stem("ferry"), "ferri" );
	deepEqual( Stem("fertile"), "fertil" );
	deepEqual( Stem("fertility"), "fertil" );
	deepEqual( Stem("fertilizing"), "fertil" );
	deepEqual( Stem("ferule"), "ferul" );
	deepEqual( Stem("fervency"), "fervenc" );
	deepEqual( Stem("fervent"), "fervent" );
	deepEqual( Stem("fervently"), "fervent" );
	deepEqual( Stem("fervid"), "fervid" );
	deepEqual( Stem("fervour"), "fervour" );
	deepEqual( Stem("fester"), "fester" );
	deepEqual( Stem("festering"), "fester" );
	deepEqual( Stem("festival"), "festiv" );
	deepEqual( Stem("festivals"), "festiv" );
	deepEqual( Stem("festive"), "festiv" );
	deepEqual( Stem("festivities"), "festiv" );
	deepEqual( Stem("festivity"), "festiv" );
	deepEqual( Stem("festoon"), "festoon" );
	deepEqual( Stem("festoons"), "festoon" );
	deepEqual( Stem("fetch"), "fetch" );
	deepEqual( Stem("fetched"), "fetch" );
	deepEqual( Stem("fetches"), "fetch" );
	deepEqual( Stem("fetching"), "fetch" );
	deepEqual( Stem("feted"), "fete" );
	deepEqual( Stem("fetid"), "fetid" );
	deepEqual( Stem("fetlock"), "fetlock" );
	deepEqual( Stem("fetlocks"), "fetlock" );
	deepEqual( Stem("fetters"), "fetter" );
	deepEqual( Stem("feud"), "feud" );
	deepEqual( Stem("feudal"), "feudal" );
	deepEqual( Stem("feury"), "feuri" );
	deepEqual( Stem("fever"), "fever" );
	deepEqual( Stem("fevered"), "fever" );
	deepEqual( Stem("feverish"), "feverish" );
	deepEqual( Stem("feverishly"), "feverish" );
	deepEqual( Stem("feverishness"), "feverish" );
	deepEqual( Stem("fevers"), "fever" );
	deepEqual( Stem("few"), "few" );
	deepEqual( Stem("fewer"), "fewer" );
	deepEqual( Stem("fewest"), "fewest" );
	deepEqual( Stem("fewness"), "few" );
	deepEqual( Stem("feyther"), "feyther" );
	deepEqual( Stem("feythers"), "feyther" );
	deepEqual( Stem("fiance"), "fianc" );
	deepEqual( Stem("fiancee"), "fiance" );
	deepEqual( Stem("fiat"), "fiat" );
	deepEqual( Stem("fib"), "fib" );
	deepEqual( Stem("fibbing"), "fib" );
	deepEqual( Stem("fibre"), "fibr" );
	deepEqual( Stem("fibres"), "fibr" );
	deepEqual( Stem("fibrous"), "fibrous" );
	deepEqual( Stem("fibs"), "fib" );
	deepEqual( Stem("fichy"), "fichi" );
	deepEqual( Stem("fickle"), "fickl" );
	deepEqual( Stem("fickleness"), "fickl" );
	deepEqual( Stem("fico"), "fico" );
	deepEqual( Stem("fiction"), "fiction" );
	deepEqual( Stem("fictions"), "fiction" );
	deepEqual( Stem("fictitious"), "fictiti" );
	deepEqual( Stem("fiddle"), "fiddl" );
	deepEqual( Stem("fiddles"), "fiddl" );
	deepEqual( Stem("fiddlesticks"), "fiddlestick" );
	deepEqual( Stem("fide"), "fide" );
	deepEqual( Stem("fidelity"), "fidel" );
	deepEqual( Stem("fidget"), "fidget" );
	deepEqual( Stem("fidgeted"), "fidget" );
	deepEqual( Stem("fidgeting"), "fidget" );
	deepEqual( Stem("fidgett"), "fidgett" );
	deepEqual( Stem("fidgetts"), "fidgett" );
	deepEqual( Stem("fidgety"), "fidgeti" );
	deepEqual( Stem("fie"), "fie" );
	deepEqual( Stem("field"), "field" );
	deepEqual( Stem("fieldfare"), "fieldfar" );
	deepEqual( Stem("fieldingsby"), "fieldingsbi" );
	deepEqual( Stem("fields"), "field" );
	deepEqual( Stem("fiend"), "fiend" );
	deepEqual( Stem("fiendish"), "fiendish" );
	deepEqual( Stem("fierce"), "fierc" );
	deepEqual( Stem("fiercely"), "fierc" );
	deepEqual( Stem("fierceness"), "fierc" );
	deepEqual( Stem("fiercer"), "fiercer" );
	deepEqual( Stem("fiercest"), "fiercest" );
	deepEqual( Stem("fiery"), "fieri" );
	deepEqual( Stem("fife"), "fife" );
	deepEqual( Stem("fifer"), "fifer" );
	deepEqual( Stem("fifteen"), "fifteen" );
	deepEqual( Stem("fifteenth"), "fifteenth" );
	deepEqual( Stem("fifth"), "fifth" );
	deepEqual( Stem("fifthly"), "fifth" );
	deepEqual( Stem("fifths"), "fifth" );
	deepEqual( Stem("fifty"), "fifti" );
	deepEqual( Stem("fig"), "fig" );
	deepEqual( Stem("fight"), "fight" );
	deepEqual( Stem("fighter"), "fighter" );
	deepEqual( Stem("fighting"), "fight" );
	deepEqual( Stem("fights"), "fight" );
	deepEqual( Stem("figment"), "figment" );
	deepEqual( Stem("figs"), "fig" );
	deepEqual( Stem("figuireda"), "figuireda" );
	deepEqual( Stem("figurative"), "figur" );
	deepEqual( Stem("figure"), "figur" );
	deepEqual( Stem("figured"), "figur" );
	deepEqual( Stem("figures"), "figur" );
	deepEqual( Stem("figuring"), "figur" );
	deepEqual( Stem("filamentous"), "filament" );
	deepEqual( Stem("filched"), "filch" );
	deepEqual( Stem("file"), "file" );
	deepEqual( Stem("filed"), "file" );
	deepEqual( Stem("files"), "file" );
	deepEqual( Stem("filial"), "filial" );
	deepEqual( Stem("filigree"), "filigre" );
	deepEqual( Stem("filing"), "file" );
	deepEqual( Stem("filka"), "filka" );
	deepEqual( Stem("fill"), "fill" );
	deepEqual( Stem("fille"), "fill" );
	deepEqual( Stem("filled"), "fill" );
	deepEqual( Stem("fillet"), "fillet" );
	deepEqual( Stem("filling"), "fill" );
	deepEqual( Stem("fillip"), "fillip" );
	deepEqual( Stem("fills"), "fill" );
	deepEqual( Stem("film"), "film" );
	deepEqual( Stem("films"), "film" );
	deepEqual( Stem("filtered"), "filter" );
	deepEqual( Stem("filtering"), "filter" );
	deepEqual( Stem("filth"), "filth" );
	deepEqual( Stem("filthily"), "filthili" );
	deepEqual( Stem("filthiness"), "filthi" );
	deepEqual( Stem("filthy"), "filthi" );
	deepEqual( Stem("fin"), "fin" );
	deepEqual( Stem("final"), "final" );
	deepEqual( Stem("finally"), "final" );
	deepEqual( Stem("finance"), "financ" );
	deepEqual( Stem("finances"), "financ" );
	deepEqual( Stem("financial"), "financi" );
	deepEqual( Stem("finch"), "finch" );
	deepEqual( Stem("finches"), "finch" );
	deepEqual( Stem("find"), "find" );
	deepEqual( Stem("finding"), "find" );
	deepEqual( Stem("finds"), "find" );
	deepEqual( Stem("fine"), "fine" );
	deepEqual( Stem("finely"), "fine" );
	deepEqual( Stem("finer"), "finer" );
	deepEqual( Stem("finery"), "fineri" );
	deepEqual( Stem("finest"), "finest" );
	deepEqual( Stem("finger"), "finger" );
	deepEqual( Stem("fingered"), "finger" );
	deepEqual( Stem("fingerends"), "fingerend" );
	deepEqual( Stem("fingerless"), "fingerless" );
	deepEqual( Stem("fingers"), "finger" );
	deepEqual( Stem("finis"), "fini" );
	deepEqual( Stem("finish"), "finish" );
	deepEqual( Stem("finished"), "finish" );
	deepEqual( Stem("finishes"), "finish" );
	deepEqual( Stem("finishing"), "finish" );
	deepEqual( Stem("finlshed"), "finlsh" );
	deepEqual( Stem("finn"), "finn" );
	deepEqual( Stem("finnish"), "finnish" );
	deepEqual( Stem("fins"), "fin" );
	deepEqual( Stem("finsbury"), "finsburi" );
	deepEqual( Stem("fiord"), "fiord" );
	deepEqual( Stem("fir"), "fir" );
	deepEqual( Stem("fire"), "fire" );
	deepEqual( Stem("firearms"), "firearm" );
	deepEqual( Stem("firebrand"), "firebrand" );
	deepEqual( Stem("fired"), "fire" );
	deepEqual( Stem("fireflies"), "firefli" );
	deepEqual( Stem("firelight"), "firelight" );
	deepEqual( Stem("fireman"), "fireman" );
	deepEqual( Stem("fireplace"), "fireplac" );
	deepEqual( Stem("fires"), "fire" );
	deepEqual( Stem("fireside"), "firesid" );
	deepEqual( Stem("firesides"), "firesid" );
	deepEqual( Stem("firewood"), "firewood" );
	deepEqual( Stem("firework"), "firework" );
	deepEqual( Stem("fireworks"), "firework" );
	deepEqual( Stem("firing"), "fire" );
	deepEqual( Stem("firm"), "firm" );
	deepEqual( Stem("firma"), "firma" );
	deepEqual( Stem("firmament"), "firmament" );
	deepEqual( Stem("firmaments"), "firmament" );
	deepEqual( Stem("firmer"), "firmer" );
	deepEqual( Stem("firmest"), "firmest" );
	deepEqual( Stem("firmly"), "firm" );
	deepEqual( Stem("firmness"), "firm" );
	deepEqual( Stem("firs"), "fir" );
	deepEqual( Stem("first"), "first" );
	deepEqual( Stem("firstborn"), "firstborn" );
	deepEqual( Stem("firstly"), "first" );
	deepEqual( Stem("fis"), "fis" );
	deepEqual( Stem("fiscal"), "fiscal" );
	deepEqual( Stem("fish"), "fish" );
	deepEqual( Stem("fished"), "fish" );
	deepEqual( Stem("fisherman"), "fisherman" );
	deepEqual( Stem("fishermen"), "fishermen" );
	deepEqual( Stem("fishes"), "fish" );
	deepEqual( Stem("fishing"), "fish" );
	deepEqual( Stem("fishmonger"), "fishmong" );
	deepEqual( Stem("fissure"), "fissur" );
	deepEqual( Stem("fissured"), "fissur" );
	deepEqual( Stem("fissurella"), "fissurella" );
	deepEqual( Stem("fissurellae"), "fissurella" );
	deepEqual( Stem("fissures"), "fissur" );
	deepEqual( Stem("fist"), "fist" );
	deepEqual( Stem("fisted"), "fist" );
	deepEqual( Stem("fists"), "fist" );
	deepEqual( Stem("fit"), "fit" );
	deepEqual( Stem("fitful"), "fit" );
	deepEqual( Stem("fitfully"), "fit" );
	deepEqual( Stem("fitly"), "fit" );
	deepEqual( Stem("fitness"), "fit" );
	deepEqual( Stem("fitnesses"), "fit" );
	deepEqual( Stem("fits"), "fit" );
	deepEqual( Stem("fitted"), "fit" );
	deepEqual( Stem("fitter"), "fitter" );
	deepEqual( Stem("fittest"), "fittest" );
	deepEqual( Stem("fitting"), "fit" );
	deepEqual( Stem("fittings"), "fit" );
	deepEqual( Stem("fitz"), "fitz" );
	deepEqual( Stem("fitzgibbon"), "fitzgibbon" );
	deepEqual( Stem("fitzgibbons"), "fitzgibbon" );
	deepEqual( Stem("fitzhugh"), "fitzhugh" );
	deepEqual( Stem("fitzroy"), "fitzroy" );
	deepEqual( Stem("five"), "five" );
	deepEqual( Stem("fiver"), "fiver" );
	deepEqual( Stem("fives"), "five" );
	deepEqual( Stem("fix"), "fix" );
	deepEqual( Stem("fixed"), "fix" );
	deepEqual( Stem("fixedly"), "fix" );
	deepEqual( Stem("fixes"), "fix" );
	deepEqual( Stem("fixing"), "fix" );
	deepEqual( Stem("fixity"), "fixiti" );
	deepEqual( Stem("fixture"), "fixtur" );
	deepEqual( Stem("fixtures"), "fixtur" );
	deepEqual( Stem("flabbily"), "flabbili" );
	deepEqual( Stem("flabby"), "flabbi" );
	deepEqual( Stem("flabella"), "flabella" );
	deepEqual( Stem("flaco"), "flaco" );
	deepEqual( Stem("flag"), "flag" );
	deepEqual( Stem("flagellation"), "flagel" );
	deepEqual( Stem("flagellator"), "flagel" );
	deepEqual( Stem("flagged"), "flag" );
	deepEqual( Stem("flagging"), "flag" );
	deepEqual( Stem("flagrant"), "flagrant" );
	deepEqual( Stem("flagrantly"), "flagrant" );
	deepEqual( Stem("flags"), "flag" );
	deepEqual( Stem("flagstaff"), "flagstaff" );
	deepEqual( Stem("flake"), "flake" );
	deepEqual( Stem("flakes"), "flake" );
	deepEqual( Stem("flambeaux"), "flambeaux" );
	deepEqual( Stem("flame"), "flame" );
	deepEqual( Stem("flames"), "flame" );
	deepEqual( Stem("flaming"), "flame" );
	deepEqual( Stem("flamingoes"), "flamingo" );
	deepEqual( Stem("flank"), "flank" );
	deepEqual( Stem("flanked"), "flank" );
	deepEqual( Stem("flanks"), "flank" );
	deepEqual( Stem("flannel"), "flannel" );
	deepEqual( Stem("flap"), "flap" );
	deepEqual( Stem("flapped"), "flap" );
	deepEqual( Stem("flapping"), "flap" );
	deepEqual( Stem("flaps"), "flap" );
	deepEqual( Stem("flare"), "flare" );
	deepEqual( Stem("flares"), "flare" );
	deepEqual( Stem("flaring"), "flare" );
	deepEqual( Stem("flash"), "flash" );
	deepEqual( Stem("flashed"), "flash" );
	deepEqual( Stem("flashes"), "flash" );
	deepEqual( Stem("flashing"), "flash" );
	deepEqual( Stem("flashy"), "flashi" );
	deepEqual( Stem("flask"), "flask" );
	deepEqual( Stem("flat"), "flat" );
	deepEqual( Stem("flatly"), "flat" );
	deepEqual( Stem("flatness"), "flat" );
	deepEqual( Stem("flats"), "flat" );
	deepEqual( Stem("flattened"), "flatten" );
	deepEqual( Stem("flattening"), "flatten" );
	deepEqual( Stem("flatter"), "flatter" );
	deepEqual( Stem("flattered"), "flatter" );
	deepEqual( Stem("flatterer"), "flatter" );
	deepEqual( Stem("flatterers"), "flatter" );
	deepEqual( Stem("flattering"), "flatter" );
	deepEqual( Stem("flatters"), "flatter" );
	deepEqual( Stem("flattery"), "flatteri" );
	deepEqual( Stem("flattest"), "flattest" );
	deepEqual( Stem("flattish"), "flattish" );
	deepEqual( Stem("flavor"), "flavor" );
	deepEqual( Stem("flavour"), "flavour" );
	deepEqual( Stem("flavoured"), "flavour" );
	deepEqual( Stem("flaw"), "flaw" );
	deepEqual( Stem("flawed"), "flaw" );
	deepEqual( Stem("flaws"), "flaw" );
	deepEqual( Stem("flax"), "flax" );
	deepEqual( Stem("flaxen"), "flaxen" );
	deepEqual( Stem("flaying"), "flay" );
	deepEqual( Stem("flea"), "flea" );
	deepEqual( Stem("fleas"), "flea" );
	deepEqual( Stem("fleck"), "fleck" );
	deepEqual( Stem("flecked"), "fleck" );
	deepEqual( Stem("fled"), "fled" );
	deepEqual( Stem("fledged"), "fledg" );
	deepEqual( Stem("fledgling"), "fledgl" );
	deepEqual( Stem("fledglings"), "fledgl" );
	deepEqual( Stem("flee"), "flee" );
	deepEqual( Stem("fleece"), "fleec" );
	deepEqual( Stem("fleecy"), "fleeci" );
	deepEqual( Stem("fleet"), "fleet" );
	deepEqual( Stem("fleeting"), "fleet" );
	deepEqual( Stem("fleetingly"), "fleet" );
	deepEqual( Stem("flemish"), "flemish" );
	deepEqual( Stem("fler"), "fler" );
	deepEqual( Stem("flesh"), "flesh" );
	deepEqual( Stem("fleshing"), "flesh" );
	deepEqual( Stem("fleshly"), "flesh" );
	deepEqual( Stem("fleshy"), "fleshi" );
	deepEqual( Stem("fletcher"), "fletcher" );
	deepEqual( Stem("fletcherites"), "fletcherit" );
	deepEqual( Stem("fletchers"), "fletcher" );
	deepEqual( Stem("flew"), "flew" );
	deepEqual( Stem("flexibility"), "flexibl" );
	deepEqual( Stem("flexible"), "flexibl" );
	deepEqual( Stem("flexure"), "flexur" );
	deepEqual( Stem("flickering"), "flicker" );
	deepEqual( Stem("flickers"), "flicker" );
	deepEqual( Stem("flicking"), "flick" );
	deepEqual( Stem("flier"), "flier" );
	deepEqual( Stem("flies"), "fli" );
	deepEqual( Stem("flight"), "flight" );
	deepEqual( Stem("flights"), "flight" );
	deepEqual( Stem("flighty"), "flighti" );
	deepEqual( Stem("flinch"), "flinch" );
	deepEqual( Stem("flinching"), "flinch" );
	deepEqual( Stem("flinder"), "flinder" );
	deepEqual( Stem("flinders"), "flinder" );
	deepEqual( Stem("fling"), "fling" );
	deepEqual( Stem("flinging"), "fling" );
	deepEqual( Stem("flings"), "fling" );
	deepEqual( Stem("flint"), "flint" );
	deepEqual( Stem("flinty"), "flinti" );
	deepEqual( Stem("flippant"), "flippant" );
	deepEqual( Stem("flipping"), "flip" );
	deepEqual( Stem("flirt"), "flirt" );
	deepEqual( Stem("flirtation"), "flirtat" );
	deepEqual( Stem("flirtations"), "flirtat" );
	deepEqual( Stem("flirted"), "flirt" );
	deepEqual( Stem("flirting"), "flirt" );
	deepEqual( Stem("flirts"), "flirt" );
	deepEqual( Stem("flit"), "flit" );
	deepEqual( Stem("flite"), "flite" );
	deepEqual( Stem("flits"), "flit" );
	deepEqual( Stem("flitted"), "flit" );
	deepEqual( Stem("flitting"), "flit" );
	deepEqual( Stem("float"), "float" );
	deepEqual( Stem("floated"), "float" );
	deepEqual( Stem("floating"), "float" );
	deepEqual( Stem("floats"), "float" );
	deepEqual( Stem("flocculent"), "floccul" );
	deepEqual( Stem("flock"), "flock" );
	deepEqual( Stem("flocked"), "flock" );
	deepEqual( Stem("flocking"), "flock" );
	deepEqual( Stem("flocks"), "flock" );
	deepEqual( Stem("flog"), "flog" );
	deepEqual( Stem("flogged"), "flog" );
	deepEqual( Stem("flogging"), "flog" );
	deepEqual( Stem("flood"), "flood" );
	deepEqual( Stem("flooded"), "flood" );
	deepEqual( Stem("floodgates"), "floodgat" );
	deepEqual( Stem("flooding"), "flood" );
	deepEqual( Stem("floods"), "flood" );
	deepEqual( Stem("floor"), "floor" );
	deepEqual( Stem("floored"), "floor" );
	deepEqual( Stem("flooring"), "floor" );
	deepEqual( Stem("floors"), "floor" );
	deepEqual( Stem("flop"), "flop" );
	deepEqual( Stem("flora"), "flora" );
	deepEqual( Stem("floral"), "floral" );
	deepEqual( Stem("florence"), "florenc" );
	deepEqual( Stem("florian"), "florian" );
	deepEqual( Stem("floriated"), "floriat" );
	deepEqual( Stem("florid"), "florid" );
	deepEqual( Stem("florist"), "florist" );
	deepEqual( Stem("florula"), "florula" );
	deepEqual( Stem("flotilla"), "flotilla" );
	deepEqual( Stem("flounce"), "flounc" );
	deepEqual( Stem("flounced"), "flounc" );
	deepEqual( Stem("flounces"), "flounc" );
	deepEqual( Stem("flouncing"), "flounc" );
	deepEqual( Stem("floundered"), "flounder" );
	deepEqual( Stem("floundering"), "flounder" );
	deepEqual( Stem("flour"), "flour" );
	deepEqual( Stem("floured"), "flour" );
	deepEqual( Stem("flourish"), "flourish" );
	deepEqual( Stem("flourished"), "flourish" );
	deepEqual( Stem("flourishes"), "flourish" );
	deepEqual( Stem("flourishing"), "flourish" );
	deepEqual( Stem("flow"), "flow" );
	deepEqual( Stem("flowed"), "flow" );
	deepEqual( Stem("flower"), "flower" );
	deepEqual( Stem("flowering"), "flower" );
	deepEqual( Stem("flowers"), "flower" );
	deepEqual( Stem("flowing"), "flow" );
	deepEqual( Stem("flown"), "flown" );
	deepEqual( Stem("flows"), "flow" );
	deepEqual( Stem("flrst"), "flrst" );
	deepEqual( Stem("flu"), "flu" );
	deepEqual( Stem("fluctuate"), "fluctuat" );
	deepEqual( Stem("fluctuated"), "fluctuat" );
	deepEqual( Stem("fluctuating"), "fluctuat" );
	deepEqual( Stem("flue"), "flue" );
	deepEqual( Stem("fluent"), "fluent" );
	deepEqual( Stem("fluently"), "fluentli" );
	deepEqual( Stem("fluffles"), "fluffl" );
	deepEqual( Stem("fluggers"), "flugger" );
	deepEqual( Stem("fluid"), "fluid" );
	deepEqual( Stem("fluidified"), "fluidifi" );
	deepEqual( Stem("fluids"), "fluid" );
	deepEqual( Stem("flung"), "flung" );
	deepEqual( Stem("flunkey"), "flunkey" );
	deepEqual( Stem("flurried"), "flurri" );
	deepEqual( Stem("flurries"), "flurri" );
	deepEqual( Stem("flurry"), "flurri" );
	deepEqual( Stem("flush"), "flush" );
	deepEqual( Stem("flushed"), "flush" );
	deepEqual( Stem("flushes"), "flush" );
	deepEqual( Stem("flushing"), "flush" );
	deepEqual( Stem("flustered"), "fluster" );
	deepEqual( Stem("flustra"), "flustra" );
	deepEqual( Stem("flustraceae"), "flustracea" );
	deepEqual( Stem("flute"), "flute" );
	deepEqual( Stem("flutes"), "flute" );
	deepEqual( Stem("flutings"), "flute" );
	deepEqual( Stem("flutter"), "flutter" );
	deepEqual( Stem("fluttered"), "flutter" );
	deepEqual( Stem("flutterers"), "flutter" );
	deepEqual( Stem("fluttering"), "flutter" );
	deepEqual( Stem("flutteringiy"), "flutteringiy" );
	deepEqual( Stem("flutters"), "flutter" );
	deepEqual( Stem("fly"), "fli" );
	deepEqual( Stem("flycatcher"), "flycatch" );
	deepEqual( Stem("flycatchers"), "flycatch" );
	deepEqual( Stem("flying"), "fli" );
	deepEqual( Stem("flys"), "flys" );
	deepEqual( Stem("fo"), "fo" );
	deepEqual( Stem("foal"), "foal" );
	deepEqual( Stem("foals"), "foal" );
	deepEqual( Stem("foam"), "foam" );
	deepEqual( Stem("foaming"), "foam" );
	deepEqual( Stem("fob"), "fob" );
	deepEqual( Stem("focus"), "focus" );
	deepEqual( Stem("fodere"), "foder" );
	deepEqual( Stem("foe"), "foe" );
	deepEqual( Stem("foes"), "foe" );
	deepEqual( Stem("foetid"), "foetid" );
	deepEqual( Stem("fog"), "fog" );
	deepEqual( Stem("fogeys"), "fogey" );
	deepEqual( Stem("foggy"), "foggi" );
	deepEqual( Stem("fogies"), "fogi" );
	deepEqual( Stem("fogs"), "fog" );
	deepEqual( Stem("fogy"), "fogi" );
	deepEqual( Stem("foh"), "foh" );
	deepEqual( Stem("foibles"), "foibl" );
	deepEqual( Stem("foil"), "foil" );
	deepEqual( Stem("foiled"), "foil" );
	deepEqual( Stem("foind"), "foind" );
	deepEqual( Stem("foinds"), "foind" );
	deepEqual( Stem("folair"), "folair" );
	deepEqual( Stem("fold"), "fold" );
	deepEqual( Stem("folded"), "fold" );
	deepEqual( Stem("folding"), "fold" );
	deepEqual( Stem("folds"), "fold" );
	deepEqual( Stem("foliaceous"), "foliac" );
	deepEqual( Stem("foliage"), "foliag" );
	deepEqual( Stem("folio"), "folio" );
	deepEqual( Stem("folk"), "folk" );
	deepEqual( Stem("folkestone"), "folkeston" );
	deepEqual( Stem("folks"), "folk" );
	deepEqual( Stem("foller"), "foller" );
	deepEqual( Stem("follerer"), "foller" );
	deepEqual( Stem("follerers"), "foller" );
	deepEqual( Stem("follering"), "foller" );
	deepEqual( Stem("follies"), "folli" );
	deepEqual( Stem("follow"), "follow" );
	deepEqual( Stem("followed"), "follow" );
	deepEqual( Stem("follower"), "follow" );
	deepEqual( Stem("followers"), "follow" );
	deepEqual( Stem("following"), "follow" );
	deepEqual( Stem("follows"), "follow" );
	deepEqual( Stem("folly"), "folli" );
	deepEqual( Stem("fomentation"), "foment" );
	deepEqual( Stem("fomitch"), "fomitch" );
	deepEqual( Stem("fond"), "fond" );
	deepEqual( Stem("fonder"), "fonder" );
	deepEqual( Stem("fondest"), "fondest" );
	deepEqual( Stem("fondle"), "fondl" );
	deepEqual( Stem("fondles"), "fondl" );
	deepEqual( Stem("fondling"), "fondl" );
	deepEqual( Stem("fondly"), "fond" );
	deepEqual( Stem("fondness"), "fond" );
	deepEqual( Stem("font"), "font" );
	deepEqual( Stem("foo"), "foo" );
	deepEqual( Stem("food"), "food" );
	deepEqual( Stem("foodle"), "foodl" );
	deepEqual( Stem("fool"), "fool" );
	deepEqual( Stem("fooled"), "fool" );
	deepEqual( Stem("fooleries"), "fooleri" );
	deepEqual( Stem("foolery"), "fooleri" );
	deepEqual( Stem("fooling"), "fool" );
	deepEqual( Stem("foolish"), "foolish" );
	deepEqual( Stem("foolishly"), "foolish" );
	deepEqual( Stem("foolishness"), "foolish" );
	deepEqual( Stem("fools"), "fool" );
	deepEqual( Stem("foolscap"), "foolscap" );
	deepEqual( Stem("foot"), "foot" );
	deepEqual( Stem("football"), "footbal" );
	deepEqual( Stem("footboy"), "footboy" );
	deepEqual( Stem("footed"), "foot" );
	deepEqual( Stem("footer"), "footer" );
	deepEqual( Stem("footfall"), "footfal" );
	deepEqual( Stem("footguards"), "footguard" );
	deepEqual( Stem("foothold"), "foothold" );
	deepEqual( Stem("footing"), "foot" );
	deepEqual( Stem("footlights"), "footlight" );
	deepEqual( Stem("footman"), "footman" );
	deepEqual( Stem("footmen"), "footmen" );
	deepEqual( Stem("footpad"), "footpad" );
	deepEqual( Stem("footpath"), "footpath" );
	deepEqual( Stem("footprint"), "footprint" );
	deepEqual( Stem("footprints"), "footprint" );
	deepEqual( Stem("footsore"), "footsor" );
	deepEqual( Stem("footstep"), "footstep" );
	deepEqual( Stem("footsteps"), "footstep" );
	deepEqual( Stem("footstool"), "footstool" );
	deepEqual( Stem("footstools"), "footstool" );
	deepEqual( Stem("footway"), "footway" );
	deepEqual( Stem("footways"), "footway" );
	deepEqual( Stem("foppish"), "foppish" );
	deepEqual( Stem("for"), "for" );
	deepEqual( Stem("foragers"), "forag" );
	deepEqual( Stem("forard"), "forard" );
	deepEqual( Stem("forards"), "forard" );
	deepEqual( Stem("forasmuch"), "forasmuch" );
	deepEqual( Stem("forbade"), "forbad" );
	deepEqual( Stem("forbear"), "forbear" );
	deepEqual( Stem("forbearance"), "forbear" );
	deepEqual( Stem("forbearing"), "forbear" );
	deepEqual( Stem("forbearingly"), "forbear" );
	deepEqual( Stem("forbears"), "forbear" );
	deepEqual( Stem("forbes"), "forb" );
	deepEqual( Stem("forbid"), "forbid" );
	deepEqual( Stem("forbidden"), "forbidden" );
	deepEqual( Stem("forbidding"), "forbid" );
	deepEqual( Stem("forbids"), "forbid" );
	deepEqual( Stem("forbore"), "forbor" );
	deepEqual( Stem("force"), "forc" );
	deepEqual( Stem("forced"), "forc" );
	deepEqual( Stem("forceps"), "forcep" );
	deepEqual( Stem("forces"), "forc" );
	deepEqual( Stem("forcible"), "forcibl" );
	deepEqual( Stem("forcibly"), "forcibl" );
	deepEqual( Stem("forcing"), "forc" );
	deepEqual( Stem("ford"), "ford" );
	deepEqual( Stem("forded"), "ford" );
	deepEqual( Stem("fore"), "fore" );
	deepEqual( Stem("foreboded"), "forebod" );
	deepEqual( Stem("foreboding"), "forebod" );
	deepEqual( Stem("forebodings"), "forebod" );
	deepEqual( Stem("forecast"), "forecast" );
	deepEqual( Stem("forecoming"), "forecom" );
	deepEqual( Stem("forefathers"), "forefath" );
	deepEqual( Stem("forefinger"), "forefing" );
	deepEqual( Stem("forefingers"), "forefing" );
	deepEqual( Stem("foregathered"), "foregath" );
	deepEqual( Stem("forego"), "forego" );
	deepEqual( Stem("foregoing"), "forego" );
	deepEqual( Stem("foregone"), "foregon" );
	deepEqual( Stem("foreground"), "foreground" );
	deepEqual( Stem("forehead"), "forehead" );
	deepEqual( Stem("foreheads"), "forehead" );
	deepEqual( Stem("foreign"), "foreign" );
	deepEqual( Stem("foreigner"), "foreign" );
	deepEqual( Stem("foreigners"), "foreign" );
	deepEqual( Stem("forelock"), "forelock" );
	deepEqual( Stem("foreman"), "foreman" );
	deepEqual( Stem("foremost"), "foremost" );
	deepEqual( Stem("forenoon"), "forenoon" );
	deepEqual( Stem("forensic"), "forens" );
	deepEqual( Stem("forerunner"), "forerunn" );
	deepEqual( Stem("foresaw"), "foresaw" );
	deepEqual( Stem("foresee"), "forese" );
	deepEqual( Stem("foreseeing"), "forese" );
	deepEqual( Stem("foreseen"), "foreseen" );
	deepEqual( Stem("foresees"), "forese" );
	deepEqual( Stem("foreshadow"), "foreshadow" );
	deepEqual( Stem("foreshadowing"), "foreshadow" );
	deepEqual( Stem("foreshortened"), "foreshorten" );
	deepEqual( Stem("foresight"), "foresight" );
	deepEqual( Stem("forest"), "forest" );
	deepEqual( Stem("forests"), "forest" );
	deepEqual( Stem("foretaste"), "foretast" );
	deepEqual( Stem("foretell"), "foretel" );
	deepEqual( Stem("foretelling"), "foretel" );
	deepEqual( Stem("forethought"), "forethought" );
	deepEqual( Stem("foretold"), "foretold" );
	deepEqual( Stem("forever"), "forev" );
	deepEqual( Stem("forewarned"), "forewarn" );
	deepEqual( Stem("forewarning"), "forewarn" );
	deepEqual( Stem("forewarnings"), "forewarn" );
	deepEqual( Stem("forewoman"), "forewoman" );
	deepEqual( Stem("forfeit"), "forfeit" );
	deepEqual( Stem("forfeited"), "forfeit" );
	deepEqual( Stem("forfeiting"), "forfeit" );
	deepEqual( Stem("forfeits"), "forfeit" );
	deepEqual( Stem("forficatus"), "forficatus" );
	deepEqual( Stem("forgave"), "forgav" );
	deepEqual( Stem("forge"), "forg" );
	deepEqual( Stem("forged"), "forg" );
	deepEqual( Stem("forgeries"), "forgeri" );
	deepEqual( Stem("forgery"), "forgeri" );
	deepEqual( Stem("forget"), "forget" );
	deepEqual( Stem("forgetful"), "forget" );
	deepEqual( Stem("forgetfulness"), "forget" );
	deepEqual( Stem("forgets"), "forget" );
	deepEqual( Stem("forgetting"), "forget" );
	deepEqual( Stem("forgi"), "forgi" );
	deepEqual( Stem("forging"), "forg" );
	deepEqual( Stem("forgive"), "forgiv" );
	deepEqual( Stem("forgiven"), "forgiven" );
	deepEqual( Stem("forgiveness"), "forgiv" );
	deepEqual( Stem("forgives"), "forgiv" );
	deepEqual( Stem("forgiving"), "forgiv" );
	deepEqual( Stem("forgivingly"), "forgiv" );
	deepEqual( Stem("forgot"), "forgot" );
	deepEqual( Stem("forgotten"), "forgotten" );
	deepEqual( Stem("fork"), "fork" );
	deepEqual( Stem("forked"), "fork" );
	deepEqual( Stem("forks"), "fork" );
	deepEqual( Stem("forlorn"), "forlorn" );
	deepEqual( Stem("forlornest"), "forlornest" );
	deepEqual( Stem("forlornly"), "forlorn" );
	deepEqual( Stem("form"), "form" );
	deepEqual( Stem("formal"), "formal" );
	deepEqual( Stem("formalities"), "formal" );
	deepEqual( Stem("formality"), "formal" );
	deepEqual( Stem("formally"), "formal" );
	deepEqual( Stem("formation"), "format" );
	deepEqual( Stem("formations"), "format" );
	deepEqual( Stem("formed"), "form" );
	deepEqual( Stem("former"), "former" );
	deepEqual( Stem("formerly"), "former" );
	deepEqual( Stem("formidable"), "formid" );
	deepEqual( Stem("forming"), "form" );
	deepEqual( Stem("forms"), "form" );
	deepEqual( Stem("forrard"), "forrard" );
	deepEqual( Stem("forrenner"), "forrenn" );
	deepEqual( Stem("forres"), "forr" );
	deepEqual( Stem("forsake"), "forsak" );
	deepEqual( Stem("forsaken"), "forsaken" );
	deepEqual( Stem("forsaking"), "forsak" );
	deepEqual( Stem("forsook"), "forsook" );
	deepEqual( Stem("forster"), "forster" );
	deepEqual( Stem("forsworn"), "forsworn" );
	deepEqual( Stem("fort"), "fort" );
	deepEqual( Stem("forte"), "fort" );
	deepEqual( Stem("forth"), "forth" );
	deepEqual( Stem("forthcoming"), "forthcom" );
	deepEqual( Stem("forthwith"), "forthwith" );
	deepEqual( Stem("fortification"), "fortif" );
	deepEqual( Stem("fortifications"), "fortif" );
	deepEqual( Stem("fortified"), "fortifi" );
	deepEqual( Stem("fortifying"), "fortifi" );
	deepEqual( Stem("fortis"), "forti" );
	deepEqual( Stem("fortitude"), "fortitud" );
	deepEqual( Stem("fortnight"), "fortnight" );
	deepEqual( Stem("fortress"), "fortress" );
	deepEqual( Stem("forts"), "fort" );
	deepEqual( Stem("fortuitous"), "fortuit" );
	deepEqual( Stem("fortunate"), "fortun" );
	deepEqual( Stem("fortunately"), "fortun" );
	deepEqual( Stem("fortunatus"), "fortunatus" );
	deepEqual( Stem("fortune"), "fortun" );
	deepEqual( Stem("fortunes"), "fortun" );
	deepEqual( Stem("forty"), "forti" );
	deepEqual( Stem("forward"), "forward" );
	deepEqual( Stem("forwarded"), "forward" );
	deepEqual( Stem("forwarding"), "forward" );
	deepEqual( Stem("forwardness"), "forward" );
	deepEqual( Stem("forwards"), "forward" );
	deepEqual( Stem("fossil"), "fossil" );
	deepEqual( Stem("fossiles"), "fossil" );
	deepEqual( Stem("fossiliferous"), "fossilifer" );
	deepEqual( Stem("fossils"), "fossil" );
	deepEqual( Stem("foster"), "foster" );
	deepEqual( Stem("fostered"), "foster" );
	deepEqual( Stem("fostering"), "foster" );
	deepEqual( Stem("fothergill"), "fothergil" );
	deepEqual( Stem("fotheringham"), "fotheringham" );
	deepEqual( Stem("fotheringhams"), "fotheringham" );
	deepEqual( Stem("fou"), "fou" );
	deepEqual( Stem("fought"), "fought" );
	deepEqual( Stem("foul"), "foul" );
	deepEqual( Stem("fouled"), "foul" );
	deepEqual( Stem("foulest"), "foulest" );
	deepEqual( Stem("foun"), "foun" );
	deepEqual( Stem("found"), "found" );
	deepEqual( Stem("foundation"), "foundat" );
	deepEqual( Stem("foundations"), "foundat" );
	deepEqual( Stem("founded"), "found" );
	deepEqual( Stem("founding"), "found" );
	deepEqual( Stem("foundling"), "foundl" );
	deepEqual( Stem("foundries"), "foundri" );
	deepEqual( Stem("founds"), "found" );
	deepEqual( Stem("fount"), "fount" );
	deepEqual( Stem("fountain"), "fountain" );
	deepEqual( Stem("fountains"), "fountain" );
	deepEqual( Stem("fouque"), "fouqu" );
	deepEqual( Stem("four"), "four" );
	deepEqual( Stem("fourier"), "fourier" );
	deepEqual( Stem("fourpence"), "fourpenc" );
	deepEqual( Stem("fours"), "four" );
	deepEqual( Stem("fourteen"), "fourteen" );
	deepEqual( Stem("fourteenpenny"), "fourteenpenni" );
	deepEqual( Stem("fourteenth"), "fourteenth" );
	deepEqual( Stem("fourth"), "fourth" );
	deepEqual( Stem("fourthly"), "fourth" );
	deepEqual( Stem("fourths"), "fourth" );
	deepEqual( Stem("fower"), "fower" );
	deepEqual( Stem("fowl"), "fowl" );
	deepEqual( Stem("fowler"), "fowler" );
	deepEqual( Stem("fowls"), "fowl" );
	deepEqual( Stem("fox"), "fox" );
	deepEqual( Stem("foxes"), "fox" );
	deepEqual( Stem("foxgloves"), "foxglov" );
	deepEqual( Stem("fra"), "fra" );
	deepEqual( Stem("fraction"), "fraction" );
	deepEqual( Stem("fractious"), "fractious" );
	deepEqual( Stem("fracture"), "fractur" );
	deepEqual( Stem("fractured"), "fractur" );
	deepEqual( Stem("fractures"), "fractur" );
	deepEqual( Stem("fragile"), "fragil" );
	deepEqual( Stem("fragility"), "fragil" );
	deepEqual( Stem("fragm"), "fragm" );
	deepEqual( Stem("fragment"), "fragment" );
	deepEqual( Stem("fragmentary"), "fragmentari" );
	deepEqual( Stem("fragments"), "fragment" );
	deepEqual( Stem("fragrance"), "fragranc" );
	deepEqual( Stem("fragrant"), "fragrant" );
	deepEqual( Stem("frail"), "frail" );
	deepEqual( Stem("frame"), "frame" );
	deepEqual( Stem("framed"), "frame" );
	deepEqual( Stem("frames"), "frame" );
	deepEqual( Stem("framework"), "framework" );
	deepEqual( Stem("framing"), "frame" );
	deepEqual( Stem("francais"), "francai" );
	deepEqual( Stem("france"), "franc" );
	deepEqual( Stem("franchise"), "franchis" );
	deepEqual( Stem("franchises"), "franchis" );
	deepEqual( Stem("francia"), "francia" );
	deepEqual( Stem("francis"), "franci" );
	deepEqual( Stem("francisco"), "francisco" );
	deepEqual( Stem("frank"), "frank" );
	deepEqual( Stem("frankest"), "frankest" );
	deepEqual( Stem("frankfort"), "frankfort" );
	deepEqual( Stem("frankly"), "frank" );
	deepEqual( Stem("frankness"), "frank" );
	deepEqual( Stem("franks"), "frank" );
	deepEqual( Stem("frantic"), "frantic" );
	deepEqual( Stem("frantically"), "frantic" );
	deepEqual( Stem("frantsovna"), "frantsovna" );
	deepEqual( Stem("frantsovnas"), "frantsovna" );
	deepEqual( Stem("fraternal"), "fratern" );
	deepEqual( Stem("fraternity"), "fratern" );
	deepEqual( Stem("fraud"), "fraud" );
	deepEqual( Stem("fraudulent"), "fraudul" );
	deepEqual( Stem("fraudulently"), "fraudul" );
	deepEqual( Stem("fraught"), "fraught" );
	deepEqual( Stem("fray"), "fray" );
	deepEqual( Stem("frayed"), "fray" );
	deepEqual( Stem("freak"), "freak" );
	deepEqual( Stem("freaks"), "freak" );
	deepEqual( Stem("freckled"), "freckl" );
	deepEqual( Stem("frederick"), "frederick" );
	deepEqual( Stem("free"), "free" );
	deepEqual( Stem("freed"), "freed" );
	deepEqual( Stem("freedom"), "freedom" );
	deepEqual( Stem("freeholders"), "freehold" );
	deepEqual( Stem("freeing"), "free" );
	deepEqual( Stem("freely"), "freeli" );
	deepEqual( Stem("freemason"), "freemason" );
	deepEqual( Stem("freemasonry"), "freemasonri" );
	deepEqual( Stem("freer"), "freer" );
	deepEqual( Stem("frees"), "free" );
	deepEqual( Stem("freestone"), "freeston" );
	deepEqual( Stem("freeze"), "freez" );
	deepEqual( Stem("freezes"), "freez" );
	deepEqual( Stem("freezing"), "freez" );
	deepEqual( Stem("freight"), "freight" );
	deepEqual( Stem("freischutz"), "freischutz" );
	deepEqual( Stem("french"), "french" );
	deepEqual( Stem("frenchman"), "frenchman" );
	deepEqual( Stem("frenchmen"), "frenchmen" );
	deepEqual( Stem("frenchwoman"), "frenchwoman" );
	deepEqual( Stem("frenchwomen"), "frenchwomen" );
	deepEqual( Stem("frenzied"), "frenzi" );
	deepEqual( Stem("frenzy"), "frenzi" );
	deepEqual( Stem("frequency"), "frequenc" );
	deepEqual( Stem("frequenfly"), "frequenfli" );
	deepEqual( Stem("frequent"), "frequent" );
	deepEqual( Stem("frequented"), "frequent" );
	deepEqual( Stem("frequenters"), "frequent" );
	deepEqual( Stem("frequenting"), "frequent" );
	deepEqual( Stem("frequentl"), "frequentl" );
	deepEqual( Stem("frequently"), "frequent" );
	deepEqual( Stem("frequents"), "frequent" );
	deepEqual( Stem("fres"), "fres" );
	deepEqual( Stem("fresco"), "fresco" );
	deepEqual( Stem("fresh"), "fresh" );
	deepEqual( Stem("freshen"), "freshen" );
	deepEqual( Stem("freshened"), "freshen" );
	deepEqual( Stem("freshening"), "freshen" );
	deepEqual( Stem("fresher"), "fresher" );
	deepEqual( Stem("freshest"), "freshest" );
	deepEqual( Stem("freshly"), "fresh" );
	deepEqual( Stem("freshness"), "fresh" );
	deepEqual( Stem("freshwater"), "freshwat" );
	deepEqual( Stem("fret"), "fret" );
	deepEqual( Stem("fretful"), "fret" );
	deepEqual( Stem("fretfully"), "fret" );
	deepEqual( Stem("fretfulness"), "fret" );
	deepEqual( Stem("fretted"), "fret" );
	deepEqual( Stem("fretting"), "fret" );
	deepEqual( Stem("frever"), "frever" );
	deepEqual( Stem("freyrina"), "freyrina" );
	deepEqual( Stem("friable"), "friabl" );
	deepEqual( Stem("friar"), "friar" );
	deepEqual( Stem("fricassee"), "fricasse" );
	deepEqual( Stem("friction"), "friction" );
	deepEqual( Stem("friday"), "friday" );
	deepEqual( Stem("fridays"), "friday" );
	deepEqual( Stem("fridolin"), "fridolin" );
	deepEqual( Stem("fried"), "fri" );
	deepEqual( Stem("friend"), "friend" );
	deepEqual( Stem("friendless"), "friendless" );
	deepEqual( Stem("friendliest"), "friendliest" );
	deepEqual( Stem("friendliness"), "friendli" );
	deepEqual( Stem("friendly"), "friend" );
	deepEqual( Stem("friends"), "friend" );
	deepEqual( Stem("friendship"), "friendship" );
	deepEqual( Stem("friendships"), "friendship" );
	deepEqual( Stem("frigate"), "frigat" );
	deepEqual( Stem("fright"), "fright" );
	deepEqual( Stem("frighten"), "frighten" );
	deepEqual( Stem("frightened"), "frighten" );
	deepEqual( Stem("frightening"), "frighten" );
	deepEqual( Stem("frightens"), "frighten" );
	deepEqual( Stem("frightful"), "fright" );
	deepEqual( Stem("frightfully"), "fright" );
	deepEqual( Stem("frights"), "fright" );
	deepEqual( Stem("frigid"), "frigid" );
	deepEqual( Stem("frigidity"), "frigid" );
	deepEqual( Stem("frill"), "frill" );
	deepEqual( Stem("frilled"), "frill" );
	deepEqual( Stem("frills"), "frill" );
	deepEqual( Stem("fringe"), "fring" );
	deepEqual( Stem("fringed"), "fring" );
	deepEqual( Stem("fringes"), "fring" );
	deepEqual( Stem("fringing"), "fring" );
	deepEqual( Stem("frio"), "frio" );
	deepEqual( Stem("frippery"), "fripperi" );
	deepEqual( Stem("frisk"), "frisk" );
	deepEqual( Stem("frisking"), "frisk" );
	deepEqual( Stem("friths"), "frith" );
	deepEqual( Stem("fritter"), "fritter" );
	deepEqual( Stem("frittered"), "fritter" );
	deepEqual( Stem("frivolities"), "frivol" );
	deepEqual( Stem("frivolity"), "frivol" );
	deepEqual( Stem("frivolous"), "frivol" );
	deepEqual( Stem("frizzling"), "frizzl" );
	deepEqual( Stem("fro"), "fro" );
	deepEqual( Stem("frock"), "frock" );
	deepEqual( Stem("frocks"), "frock" );
	deepEqual( Stem("frog"), "frog" );
	deepEqual( Stem("frogs"), "frog" );
	deepEqual( Stem("frolic"), "frolic" );
	deepEqual( Stem("frolics"), "frolic" );
	deepEqual( Stem("frolicsome"), "frolicsom" );
	deepEqual( Stem("from"), "from" );
	deepEqual( Stem("frond"), "frond" );
	deepEqual( Stem("fronds"), "frond" );
	deepEqual( Stem("front"), "front" );
	deepEqual( Stem("fronte"), "front" );
	deepEqual( Stem("fronted"), "front" );
	deepEqual( Stem("frontier"), "frontier" );
	deepEqual( Stem("fronting"), "front" );
	deepEqual( Stem("frontispiece"), "frontispiec" );
	deepEqual( Stem("fronts"), "front" );
	deepEqual( Stem("frost"), "frost" );
	deepEqual( Stem("frosted"), "frost" );
	deepEqual( Stem("frosts"), "frost" );
	deepEqual( Stem("frosty"), "frosti" );
	deepEqual( Stem("froth"), "froth" );
	deepEqual( Stem("frothed"), "froth" );
	deepEqual( Stem("frothy"), "frothi" );
	deepEqual( Stem("frouzy"), "frouzi" );
	deepEqual( Stem("frown"), "frown" );
	deepEqual( Stem("frowned"), "frown" );
	deepEqual( Stem("frowning"), "frown" );
	deepEqual( Stem("frowns"), "frown" );
	deepEqual( Stem("frowsy"), "frowsi" );
	deepEqual( Stem("froze"), "froze" );
	deepEqual( Stem("frozen"), "frozen" );
	deepEqual( Stem("fructifying"), "fructifi" );
	deepEqual( Stem("frugal"), "frugal" );
	deepEqual( Stem("frugality"), "frugal" );
	deepEqual( Stem("fruit"), "fruit" );
	deepEqual( Stem("fruitful"), "fruit" );
	deepEqual( Stem("fruitless"), "fruitless" );
	deepEqual( Stem("fruitlessly"), "fruitless" );
	deepEqual( Stem("fruits"), "fruit" );
	deepEqual( Stem("frusta"), "frusta" );
	deepEqual( Stem("fry"), "fri" );
	deepEqual( Stem("frying"), "fri" );
	deepEqual( Stem("fuchsia"), "fuchsia" );
	deepEqual( Stem("fucus"), "fucus" );
	deepEqual( Stem("fuddled"), "fuddl" );
	deepEqual( Stem("fuega"), "fuega" );
	deepEqual( Stem("fuegia"), "fuegia" );
	deepEqual( Stem("fuegian"), "fuegian" );
	deepEqual( Stem("fuegians"), "fuegian" );
	deepEqual( Stem("fuego"), "fuego" );
	deepEqual( Stem("fuel"), "fuel" );
	deepEqual( Stem("fuentes"), "fuent" );
	deepEqual( Stem("fuffy"), "fuffi" );
	deepEqual( Stem("fugitive"), "fugit" );
	deepEqual( Stem("fugitives"), "fugit" );
	deepEqual( Stem("fulcrum"), "fulcrum" );
	deepEqual( Stem("fule"), "fule" );
	deepEqual( Stem("fulfil"), "fulfil" );
	deepEqual( Stem("fulfilled"), "fulfil" );
	deepEqual( Stem("fulfilling"), "fulfil" );
	deepEqual( Stem("fulfilment"), "fulfil" );
	deepEqual( Stem("fulgurites"), "fulgurit" );
	deepEqual( Stem("fulils"), "fulil" );
	deepEqual( Stem("full"), "full" );
	deepEqual( Stem("fuller"), "fuller" );
	deepEqual( Stem("fullest"), "fullest" );
	deepEqual( Stem("fullness"), "full" );
	deepEqual( Stem("fully"), "fulli" );
	deepEqual( Stem("fulness"), "ful" );
	deepEqual( Stem("fulvipes"), "fulvip" );
	deepEqual( Stem("fumbled"), "fumbl" );
	deepEqual( Stem("fumbling"), "fumbl" );
	deepEqual( Stem("fume"), "fume" );
	deepEqual( Stem("fumed"), "fume" );
	deepEqual( Stem("fumes"), "fume" );
	deepEqual( Stem("fumigation"), "fumig" );
	deepEqual( Stem("fuming"), "fume" );
	deepEqual( Stem("fun"), "fun" );
	deepEqual( Stem("function"), "function" );
	deepEqual( Stem("functionary"), "functionari" );
	deepEqual( Stem("functions"), "function" );
	deepEqual( Stem("fund"), "fund" );
	deepEqual( Stem("fundamental"), "fundament" );
	deepEqual( Stem("fundamentally"), "fundament" );
	deepEqual( Stem("funds"), "fund" );
	deepEqual( Stem("funebre"), "funebr" );
	deepEqual( Stem("funeral"), "funer" );
	deepEqual( Stem("funerals"), "funer" );
	deepEqual( Stem("funereal"), "funer" );
	deepEqual( Stem("fungi"), "fungi" );
	deepEqual( Stem("fungus"), "fungus" );
	deepEqual( Stem("funk"), "funk" );
	deepEqual( Stem("funnel"), "funnel" );
	deepEqual( Stem("funniest"), "funniest" );
	deepEqual( Stem("funny"), "funni" );
	deepEqual( Stem("fur"), "fur" );
	deepEqual( Stem("furbished"), "furbish" );
	deepEqual( Stem("furder"), "furder" );
	deepEqual( Stem("furies"), "furi" );
	deepEqual( Stem("furious"), "furious" );
	deepEqual( Stem("furiously"), "furious" );
	deepEqual( Stem("furlongs"), "furlong" );
	deepEqual( Stem("furnace"), "furnac" );
	deepEqual( Stem("furnaces"), "furnac" );
	deepEqual( Stem("furnarius"), "furnarius" );
	deepEqual( Stem("furnish"), "furnish" );
	deepEqual( Stem("furnished"), "furnish" );
	deepEqual( Stem("furnishes"), "furnish" );
	deepEqual( Stem("furnishing"), "furnish" );
	deepEqual( Stem("furniter"), "furnit" );
	deepEqual( Stem("furniture"), "furnitur" );
	deepEqual( Stem("furrowed"), "furrow" );
	deepEqual( Stem("furrows"), "furrow" );
	deepEqual( Stem("furry"), "furri" );
	deepEqual( Stem("furs"), "fur" );
	deepEqual( Stem("further"), "further" );
	deepEqual( Stem("furtherance"), "further" );
	deepEqual( Stem("furthermore"), "furthermor" );
	deepEqual( Stem("furthest"), "furthest" );
	deepEqual( Stem("furtive"), "furtiv" );
	deepEqual( Stem("furtively"), "furtiv" );
	deepEqual( Stem("fury"), "furi" );
	deepEqual( Stem("furze"), "furz" );
	deepEqual( Stem("fuse"), "fuse" );
	deepEqual( Stem("fused"), "fuse" );
	deepEqual( Stem("fusibility"), "fusibl" );
	deepEqual( Stem("fuss"), "fuss" );
	deepEqual( Stem("fussily"), "fussili" );
	deepEqual( Stem("fussy"), "fussi" );
	deepEqual( Stem("fust"), "fust" );
	deepEqual( Stem("fustian"), "fustian" );
	deepEqual( Stem("futile"), "futil" );
	deepEqual( Stem("futur"), "futur" );
	deepEqual( Stem("future"), "futur" );
	deepEqual( Stem("futures"), "futur" );
	deepEqual( Stem("fyodor"), "fyodor" );
	deepEqual( Stem("fyodorovna"), "fyodorovna" );
	deepEqual( Stem("fypunnote"), "fypunnot" );
	deepEqual( Stem("g"), "g" );
	deepEqual( Stem("ga"), "ga" );
	deepEqual( Stem("gab"), "gab" );
	deepEqual( Stem("gabble"), "gabbl" );
	deepEqual( Stem("gabbled"), "gabbl" );
	deepEqual( Stem("gable"), "gabl" );
	deepEqual( Stem("gables"), "gabl" );
	deepEqual( Stem("gad"), "gad" );
	deepEqual( Stem("gadfly"), "gadfli" );
	deepEqual( Stem("gadzooks"), "gadzook" );
	deepEqual( Stem("gags"), "gag" );
	deepEqual( Stem("gaieties"), "gaieti" );
	deepEqual( Stem("gaiety"), "gaieti" );
	deepEqual( Stem("gaily"), "gaili" );
	deepEqual( Stem("gaimard"), "gaimard" );
	deepEqual( Stem("gain"), "gain" );
	deepEqual( Stem("gained"), "gain" );
	deepEqual( Stem("gainer"), "gainer" );
	deepEqual( Stem("gaining"), "gain" );
	deepEqual( Stem("gains"), "gain" );
	deepEqual( Stem("gainsaid"), "gainsaid" );
	deepEqual( Stem("gainsay"), "gainsay" );
	deepEqual( Stem("gainsaying"), "gainsay" );
	deepEqual( Stem("gait"), "gait" );
	deepEqual( Stem("gaiters"), "gaiter" );
	deepEqual( Stem("gal"), "gal" );
	deepEqual( Stem("gala"), "gala" );
	deepEqual( Stem("galapageian"), "galapageian" );
	deepEqual( Stem("galapagoensis"), "galapagoensi" );
	deepEqual( Stem("galapagos"), "galapago" );
	deepEqual( Stem("galaxy"), "galaxi" );
	deepEqual( Stem("gale"), "gale" );
	deepEqual( Stem("gales"), "gale" );
	deepEqual( Stem("gall"), "gall" );
	deepEqual( Stem("gallanbile"), "gallanbil" );
	deepEqual( Stem("gallant"), "gallant" );
	deepEqual( Stem("gallantly"), "gallant" );
	deepEqual( Stem("gallantries"), "gallantri" );
	deepEqual( Stem("gallantry"), "gallantri" );
	deepEqual( Stem("gallants"), "gallant" );
	deepEqual( Stem("galled"), "gall" );
	deepEqual( Stem("gallegos"), "gallego" );
	deepEqual( Stem("galleries"), "galleri" );
	deepEqual( Stem("gallery"), "galleri" );
	deepEqual( Stem("galley"), "galley" );
	deepEqual( Stem("galleys"), "galley" );
	deepEqual( Stem("gallinaceous"), "gallinac" );
	deepEqual( Stem("gallinazo"), "gallinazo" );
	deepEqual( Stem("gallinazos"), "gallinazo" );
	deepEqual( Stem("galling"), "gall" );
	deepEqual( Stem("gallivanting"), "galliv" );
	deepEqual( Stem("gallon"), "gallon" );
	deepEqual( Stem("gallons"), "gallon" );
	deepEqual( Stem("gallop"), "gallop" );
	deepEqual( Stem("galloped"), "gallop" );
	deepEqual( Stem("galloping"), "gallop" );
	deepEqual( Stem("gallops"), "gallop" );
	deepEqual( Stem("gallows"), "gallow" );
	deepEqual( Stem("gals"), "gal" );
	deepEqual( Stem("galvanism"), "galvan" );
	deepEqual( Stem("gambier"), "gambier" );
	deepEqual( Stem("gamble"), "gambl" );
	deepEqual( Stem("gambled"), "gambl" );
	deepEqual( Stem("gambler"), "gambler" );
	deepEqual( Stem("gamblers"), "gambler" );
	deepEqual( Stem("gambles"), "gambl" );
	deepEqual( Stem("gambling"), "gambl" );
	deepEqual( Stem("gambolling"), "gambol" );
	deepEqual( Stem("gambrinus"), "gambrinus" );
	deepEqual( Stem("game"), "game" );
	deepEqual( Stem("gamekeepers"), "gamekeep" );
	deepEqual( Stem("games"), "game" );
	deepEqual( Stem("gamester"), "gamest" );
	deepEqual( Stem("gamesters"), "gamest" );
	deepEqual( Stem("gaming"), "game" );
	deepEqual( Stem("gammon"), "gammon" );
	deepEqual( Stem("gammoning"), "gammon" );
	deepEqual( Stem("gamut"), "gamut" );
	deepEqual( Stem("gander"), "gander" );
	deepEqual( Stem("gane"), "gane" );
	deepEqual( Stem("gang"), "gang" );
	deepEqual( Stem("ganges"), "gang" );
	deepEqual( Stem("ganging"), "gang" );
	deepEqual( Stem("ganglion"), "ganglion" );
	deepEqual( Stem("gangs"), "gang" );
	deepEqual( Stem("gangway"), "gangway" );
	deepEqual( Stem("gannet"), "gannet" );
	deepEqual( Stem("gannets"), "gannet" );
	deepEqual( Stem("ganz"), "ganz" );
	deepEqual( Stem("gap"), "gap" );
	deepEqual( Stem("gape"), "gape" );
	deepEqual( Stem("gaped"), "gape" );
	deepEqual( Stem("gapes"), "gape" );
	deepEqual( Stem("gaping"), "gape" );
	deepEqual( Stem("gaps"), "gap" );
	deepEqual( Stem("gar"), "gar" );
	deepEqual( Stem("garb"), "garb" );
	deepEqual( Stem("garbled"), "garbl" );
	deepEqual( Stem("garbs"), "garb" );
	deepEqual( Stem("garde"), "gard" );
	deepEqual( Stem("garden"), "garden" );
	deepEqual( Stem("gardener"), "garden" );
	deepEqual( Stem("gardeners"), "garden" );
	deepEqual( Stem("gardening"), "garden" );
	deepEqual( Stem("gardens"), "garden" );
	deepEqual( Stem("gardner"), "gardner" );
	deepEqual( Stem("gardners"), "gardner" );
	deepEqual( Stem("garish"), "garish" );
	deepEqual( Stem("garland"), "garland" );
	deepEqual( Stem("garlanded"), "garland" );
	deepEqual( Stem("garlands"), "garland" );
	deepEqual( Stem("garment"), "garment" );
	deepEqual( Stem("garments"), "garment" );
	deepEqual( Stem("garnet"), "garnet" );
	deepEqual( Stem("garnett"), "garnett" );
	deepEqual( Stem("garnish"), "garnish" );
	deepEqual( Stem("garnished"), "garnish" );
	deepEqual( Stem("garnishing"), "garnish" );
	deepEqual( Stem("garniture"), "garnitur" );
	deepEqual( Stem("garran"), "garran" );
	deepEqual( Stem("garret"), "garret" );
	deepEqual( Stem("garrets"), "garret" );
	deepEqual( Stem("garrison"), "garrison" );
	deepEqual( Stem("garter"), "garter" );
	deepEqual( Stem("gartered"), "garter" );
	deepEqual( Stem("garters"), "garter" );
	deepEqual( Stem("garth"), "garth" );
	deepEqual( Stem("garthers"), "garther" );
	deepEqual( Stem("gas"), "gas" );
	deepEqual( Stem("gases"), "gase" );
	deepEqual( Stem("gash"), "gash" );
	deepEqual( Stem("gashed"), "gash" );
	deepEqual( Stem("gaslights"), "gaslight" );
	deepEqual( Stem("gasp"), "gasp" );
	deepEqual( Stem("gasped"), "gasp" );
	deepEqual( Stem("gasping"), "gasp" );
	deepEqual( Stem("gaspingly"), "gasp" );
	deepEqual( Stem("gasps"), "gasp" );
	deepEqual( Stem("gate"), "gate" );
	deepEqual( Stem("gates"), "gate" );
	deepEqual( Stem("gateway"), "gateway" );
	deepEqual( Stem("gateways"), "gateway" );
	deepEqual( Stem("gather"), "gather" );
	deepEqual( Stem("gathered"), "gather" );
	deepEqual( Stem("gatherer"), "gather" );
	deepEqual( Stem("gatherers"), "gather" );
	deepEqual( Stem("gathering"), "gather" );
	deepEqual( Stem("gatherings"), "gather" );
	deepEqual( Stem("gatherlng"), "gatherlng" );
	deepEqual( Stem("gathers"), "gather" );
	deepEqual( Stem("gatherum"), "gatherum" );
	deepEqual( Stem("gato"), "gato" );
	deepEqual( Stem("gauch"), "gauch" );
	deepEqual( Stem("gaucho"), "gaucho" );
	deepEqual( Stem("gauchos"), "gaucho" );
	deepEqual( Stem("gaudiest"), "gaudiest" );
	deepEqual( Stem("gaudy"), "gaudi" );
	deepEqual( Stem("gaul"), "gaul" );
	deepEqual( Stem("gaunt"), "gaunt" );
	deepEqual( Stem("gauntlet"), "gauntlet" );
	deepEqual( Stem("gauntlets"), "gauntlet" );
	deepEqual( Stem("gauntly"), "gaunt" );
	deepEqual( Stem("gauze"), "gauz" );
	deepEqual( Stem("gauzy"), "gauzi" );
	deepEqual( Stem("gave"), "gave" );
	deepEqual( Stem("gavia"), "gavia" );
	deepEqual( Stem("gawky"), "gawki" );
	deepEqual( Stem("gay"), "gay" );
	deepEqual( Stem("gayest"), "gayest" );
	deepEqual( Stem("gaze"), "gaze" );
	deepEqual( Stem("gazed"), "gaze" );
	deepEqual( Stem("gazelle"), "gazell" );
	deepEqual( Stem("gazelles"), "gazell" );
	deepEqual( Stem("gazes"), "gaze" );
	deepEqual( Stem("gazette"), "gazett" );
	deepEqual( Stem("gazing"), "gaze" );
	deepEqual( Stem("gazingi"), "gazingi" );
	deepEqual( Stem("gear"), "gear" );
	deepEqual( Stem("geese"), "gees" );
	deepEqual( Stem("geist"), "geist" );
	deepEqual( Stem("gelatinous"), "gelatin" );
	deepEqual( Stem("gem"), "gem" );
	deepEqual( Stem("gemmules"), "gemmul" );
	deepEqual( Stem("gen"), "gen" );
	deepEqual( Stem("gender"), "gender" );
	deepEqual( Stem("genealogical"), "genealog" );
	deepEqual( Stem("genealogist"), "genealogist" );
	deepEqual( Stem("genelman"), "genelman" );
	deepEqual( Stem("genelmen"), "genelmen" );
	deepEqual( Stem("genera"), "genera" );
	deepEqual( Stem("general"), "general" );
	deepEqual( Stem("generalities"), "general" );
	deepEqual( Stem("generality"), "general" );
	deepEqual( Stem("generalization"), "general" );
	deepEqual( Stem("generally"), "general" );
	deepEqual( Stem("generals"), "general" );
	deepEqual( Stem("generalship"), "generalship" );
	deepEqual( Stem("generate"), "generat" );
	deepEqual( Stem("generated"), "generat" );
	deepEqual( Stem("generation"), "generat" );
	deepEqual( Stem("generations"), "generat" );
	deepEqual( Stem("generic"), "generic" );
	deepEqual( Stem("generosity"), "generos" );
	deepEqual( Stem("generous"), "generous" );
	deepEqual( Stem("generously"), "generous" );
	deepEqual( Stem("genesis"), "genesi" );
	deepEqual( Stem("geneva"), "geneva" );
	deepEqual( Stem("genfleman"), "genfleman" );
	deepEqual( Stem("genial"), "genial" );
	deepEqual( Stem("genially"), "genial" );
	deepEqual( Stem("genie"), "geni" );
	deepEqual( Stem("genius"), "genius" );
	deepEqual( Stem("geniuses"), "genius" );
	deepEqual( Stem("genlmen"), "genlmen" );
	deepEqual( Stem("genlmn"), "genlmn" );
	deepEqual( Stem("genteel"), "genteel" );
	deepEqual( Stem("genteelest"), "genteelest" );
	deepEqual( Stem("genteelly"), "genteelli" );
	deepEqual( Stem("gentile"), "gentil" );
	deepEqual( Stem("gentility"), "gentil" );
	deepEqual( Stem("gentle"), "gentl" );
	deepEqual( Stem("gentlefolk"), "gentlefolk" );
	deepEqual( Stem("gentlefolks"), "gentlefolk" );
	deepEqual( Stem("gentlema"), "gentlema" );
	deepEqual( Stem("gentleman"), "gentleman" );
	deepEqual( Stem("gentlemanlike"), "gentlemanlik" );
	deepEqual( Stem("gentlemanly"), "gentleman" );
	deepEqual( Stem("gentlemen"), "gentlemen" );
	deepEqual( Stem("gentleness"), "gentl" );
	deepEqual( Stem("gentler"), "gentler" );
	deepEqual( Stem("gentlest"), "gentlest" );
	deepEqual( Stem("gentlewoman"), "gentlewoman" );
	deepEqual( Stem("gently"), "gentl" );
	deepEqual( Stem("gentry"), "gentri" );
	deepEqual( Stem("genuine"), "genuin" );
	deepEqual( Stem("genuinely"), "genuin" );
	deepEqual( Stem("genus"), "genus" );
	deepEqual( Stem("geoffroi"), "geoffroi" );
	deepEqual( Stem("geoffroy"), "geoffroy" );
	deepEqual( Stem("geograph"), "geograph" );
	deepEqual( Stem("geographer"), "geograph" );
	deepEqual( Stem("geographica"), "geographica" );
	deepEqual( Stem("geographical"), "geograph" );
	deepEqual( Stem("geography"), "geographi" );
	deepEqual( Stem("geolog"), "geolog" );
	deepEqual( Stem("geological"), "geolog" );
	deepEqual( Stem("geologically"), "geolog" );
	deepEqual( Stem("geologicas"), "geologica" );
	deepEqual( Stem("geologist"), "geologist" );
	deepEqual( Stem("geologists"), "geologist" );
	deepEqual( Stem("geologize"), "geolog" );
	deepEqual( Stem("geologizing"), "geolog" );
	deepEqual( Stem("geology"), "geolog" );
	deepEqual( Stem("geometrical"), "geometr" );
	deepEqual( Stem("geometry"), "geometri" );
	deepEqual( Stem("george"), "georg" );
	deepEqual( Stem("georges"), "georg" );
	deepEqual( Stem("georgia"), "georgia" );
	deepEqual( Stem("georgina"), "georgina" );
	deepEqual( Stem("geospiza"), "geospiza" );
	deepEqual( Stem("geously"), "geousli" );
	deepEqual( Stem("geraldine"), "geraldin" );
	deepEqual( Stem("geranium"), "geranium" );
	deepEqual( Stem("geraniums"), "geranium" );
	deepEqual( Stem("germ"), "germ" );
	deepEqual( Stem("german"), "german" );
	deepEqual( Stem("germans"), "german" );
	deepEqual( Stem("germany"), "germani" );
	deepEqual( Stem("germinating"), "germin" );
	deepEqual( Stem("germs"), "germ" );
	deepEqual( Stem("gerous"), "gerous" );
	deepEqual( Stem("gervais"), "gervai" );
	deepEqual( Stem("geschichte"), "geschicht" );
	deepEqual( Stem("gesticulating"), "gesticul" );
	deepEqual( Stem("gesticulations"), "gesticul" );
	deepEqual( Stem("gesture"), "gestur" );
	deepEqual( Stem("gestures"), "gestur" );
	deepEqual( Stem("get"), "get" );
	deepEqual( Stem("gets"), "get" );
	deepEqual( Stem("getting"), "get" );
	deepEqual( Stem("gettings"), "get" );
	deepEqual( Stem("gewgaws"), "gewgaw" );
	deepEqual( Stem("gha"), "gha" );
	deepEqual( Stem("ghastlier"), "ghastlier" );
	deepEqual( Stem("ghastly"), "ghast" );
	deepEqual( Stem("ghirlandajo"), "ghirlandajo" );
	deepEqual( Stem("ghost"), "ghost" );
	deepEqual( Stem("ghostly"), "ghost" );
	deepEqual( Stem("ghosts"), "ghost" );
	deepEqual( Stem("ght"), "ght" );
	deepEqual( Stem("gi"), "gi" );
	deepEqual( Stem("giant"), "giant" );
	deepEqual( Stem("giants"), "giant" );
	deepEqual( Stem("gibing"), "gibe" );
	deepEqual( Stem("gibraltar"), "gibraltar" );
	deepEqual( Stem("giddily"), "giddili" );
	deepEqual( Stem("giddiness"), "giddi" );
	deepEqual( Stem("giddy"), "giddi" );
	deepEqual( Stem("gift"), "gift" );
	deepEqual( Stem("gifted"), "gift" );
	deepEqual( Stem("gifts"), "gift" );
	deepEqual( Stem("gig"), "gig" );
	deepEqual( Stem("gigantea"), "gigantea" );
	deepEqual( Stem("gigantic"), "gigant" );
	deepEqual( Stem("gigas"), "giga" );
	deepEqual( Stem("giggle"), "giggl" );
	deepEqual( Stem("giggled"), "giggl" );
	deepEqual( Stem("giggles"), "giggl" );
	deepEqual( Stem("giggling"), "giggl" );
	deepEqual( Stem("gild"), "gild" );
	deepEqual( Stem("gilded"), "gild" );
	deepEqual( Stem("gilding"), "gild" );
	deepEqual( Stem("gilds"), "gild" );
	deepEqual( Stem("giles"), "gile" );
	deepEqual( Stem("gill"), "gill" );
	deepEqual( Stem("gillies"), "gilli" );
	deepEqual( Stem("gillingwater"), "gillingwat" );
	deepEqual( Stem("gilt"), "gilt" );
	deepEqual( Stem("gimlet"), "gimlet" );
	deepEqual( Stem("gimlets"), "gimlet" );
	deepEqual( Stem("gin"), "gin" );
	deepEqual( Stem("ginger"), "ginger" );
	deepEqual( Stem("gingerbread"), "gingerbread" );
	deepEqual( Stem("gingery"), "gingeri" );
	deepEqual( Stem("gipsy"), "gipsi" );
	deepEqual( Stem("giraffe"), "giraff" );
	deepEqual( Stem("giraffes"), "giraff" );
	deepEqual( Stem("gird"), "gird" );
	deepEqual( Stem("girdle"), "girdl" );
	deepEqual( Stem("girdled"), "girdl" );
	deepEqual( Stem("girl"), "girl" );
	deepEqual( Stem("girlhood"), "girlhood" );
	deepEqual( Stem("girlish"), "girlish" );
	deepEqual( Stem("girlishly"), "girlish" );
	deepEqual( Stem("girls"), "girl" );
	deepEqual( Stem("girt"), "girt" );
	deepEqual( Stem("girth"), "girth" );
	deepEqual( Stem("girths"), "girth" );
	deepEqual( Stem("gist"), "gist" );
	deepEqual( Stem("git"), "git" );
	deepEqual( Stem("giuseppe"), "giusepp" );
	deepEqual( Stem("giv"), "giv" );
	deepEqual( Stem("give"), "give" );
	deepEqual( Stem("given"), "given" );
	deepEqual( Stem("giver"), "giver" );
	deepEqual( Stem("gives"), "give" );
	deepEqual( Stem("giving"), "give" );
	deepEqual( Stem("gizzard"), "gizzard" );
	deepEqual( Stem("gl"), "gl" );
	deepEqual( Stem("glacier"), "glacier" );
	deepEqual( Stem("glaciers"), "glacier" );
	deepEqual( Stem("glad"), "glad" );
	deepEqual( Stem("gladden"), "gladden" );
	deepEqual( Stem("gladdened"), "gladden" );
	deepEqual( Stem("glades"), "glade" );
	deepEqual( Stem("gladiator"), "gladiat" );
	deepEqual( Stem("gladly"), "glad" );
	deepEqual( Stem("gladness"), "glad" );
	deepEqual( Stem("gladsome"), "gladsom" );
	deepEqual( Stem("gladsomeness"), "gladsom" );
	deepEqual( Stem("glance"), "glanc" );
	deepEqual( Stem("glanced"), "glanc" );
	deepEqual( Stem("glances"), "glanc" );
	deepEqual( Stem("glancing"), "glanc" );
	deepEqual( Stem("glare"), "glare" );
	deepEqual( Stem("glared"), "glare" );
	deepEqual( Stem("glares"), "glare" );
	deepEqual( Stem("glaring"), "glare" );
	deepEqual( Stem("glaringly"), "glare" );
	deepEqual( Stem("glass"), "glass" );
	deepEqual( Stem("glasses"), "glass" );
	deepEqual( Stem("glassful"), "glass" );
	deepEqual( Stem("glassy"), "glassi" );
	deepEqual( Stem("glavormelly"), "glavormelli" );
	deepEqual( Stem("glaze"), "glaze" );
	deepEqual( Stem("glazed"), "glaze" );
	deepEqual( Stem("gleam"), "gleam" );
	deepEqual( Stem("gleamed"), "gleam" );
	deepEqual( Stem("gleaming"), "gleam" );
	deepEqual( Stem("gleams"), "gleam" );
	deepEqual( Stem("glean"), "glean" );
	deepEqual( Stem("gleaned"), "glean" );
	deepEqual( Stem("glee"), "glee" );
	deepEqual( Stem("gleefully"), "gleefulli" );
	deepEqual( Stem("gleesome"), "gleesom" );
	deepEqual( Stem("glen"), "glen" );
	deepEqual( Stem("glencora"), "glencora" );
	deepEqual( Stem("glib"), "glib" );
	deepEqual( Stem("glide"), "glide" );
	deepEqual( Stem("glided"), "glide" );
	deepEqual( Stem("glides"), "glide" );
	deepEqual( Stem("gliding"), "glide" );
	deepEqual( Stem("glimmer"), "glimmer" );
	deepEqual( Stem("glimmered"), "glimmer" );
	deepEqual( Stem("glimmering"), "glimmer" );
	deepEqual( Stem("glimmerings"), "glimmer" );
	deepEqual( Stem("glimpse"), "glimps" );
	deepEqual( Stem("glimpses"), "glimps" );
	deepEqual( Stem("glissez"), "glissez" );
	deepEqual( Stem("glisten"), "glisten" );
	deepEqual( Stem("glistened"), "glisten" );
	deepEqual( Stem("glistening"), "glisten" );
	deepEqual( Stem("glistens"), "glisten" );
	deepEqual( Stem("glitter"), "glitter" );
	deepEqual( Stem("glittered"), "glitter" );
	deepEqual( Stem("glittering"), "glitter" );
	deepEqual( Stem("gloated"), "gloat" );
	deepEqual( Stem("gloating"), "gloat" );
	deepEqual( Stem("globe"), "globe" );
	deepEqual( Stem("globes"), "globe" );
	deepEqual( Stem("globular"), "globular" );
	deepEqual( Stem("globules"), "globul" );
	deepEqual( Stem("glod"), "glod" );
	deepEqual( Stem("gloom"), "gloom" );
	deepEqual( Stem("gloomier"), "gloomier" );
	deepEqual( Stem("gloomily"), "gloomili" );
	deepEqual( Stem("gloominess"), "gloomi" );
	deepEqual( Stem("gloomy"), "gloomi" );
	deepEqual( Stem("gloried"), "glori" );
	deepEqual( Stem("glories"), "glori" );
	deepEqual( Stem("glorious"), "glorious" );
	deepEqual( Stem("glory"), "glori" );
	deepEqual( Stem("glorying"), "glori" );
	deepEqual( Stem("gloss"), "gloss" );
	deepEqual( Stem("glossary"), "glossari" );
	deepEqual( Stem("glossy"), "glossi" );
	deepEqual( Stem("gloucester"), "gloucest" );
	deepEqual( Stem("glove"), "glove" );
	deepEqual( Stem("gloved"), "glove" );
	deepEqual( Stem("gloves"), "glove" );
	deepEqual( Stem("glow"), "glow" );
	deepEqual( Stem("glowed"), "glow" );
	deepEqual( Stem("glowered"), "glower" );
	deepEqual( Stem("glowing"), "glow" );
	deepEqual( Stem("glows"), "glow" );
	deepEqual( Stem("glowworm"), "glowworm" );
	deepEqual( Stem("glowworms"), "glowworm" );
	deepEqual( Stem("glue"), "glue" );
	deepEqual( Stem("glum"), "glum" );
	deepEqual( Stem("glutinous"), "glutin" );
	deepEqual( Stem("glutton"), "glutton" );
	deepEqual( Stem("gluttons"), "glutton" );
	deepEqual( Stem("gnarled"), "gnarl" );
	deepEqual( Stem("gnashed"), "gnash" );
	deepEqual( Stem("gnashing"), "gnash" );
	deepEqual( Stem("gnats"), "gnat" );
	deepEqual( Stem("gnaw"), "gnaw" );
	deepEqual( Stem("gnawed"), "gnaw" );
	deepEqual( Stem("gnawer"), "gnawer" );
	deepEqual( Stem("gnawers"), "gnawer" );
	deepEqual( Stem("gnawing"), "gnaw" );
	deepEqual( Stem("gneiss"), "gneiss" );
	deepEqual( Stem("gnus"), "gnus" );
	deepEqual( Stem("go"), "go" );
	deepEqual( Stem("goa"), "goa" );
	deepEqual( Stem("goad"), "goad" );
	deepEqual( Stem("goaded"), "goad" );
	deepEqual( Stem("goads"), "goad" );
	deepEqual( Stem("goal"), "goal" );
	deepEqual( Stem("goar"), "goar" );
	deepEqual( Stem("goat"), "goat" );
	deepEqual( Stem("goatherd"), "goatherd" );
	deepEqual( Stem("goats"), "goat" );
	deepEqual( Stem("goatskin"), "goatskin" );
	deepEqual( Stem("goatsucker"), "goatsuck" );
	deepEqual( Stem("goblet"), "goblet" );
	deepEqual( Stem("goblets"), "goblet" );
	deepEqual( Stem("goblin"), "goblin" );
	deepEqual( Stem("god"), "god" );
	deepEqual( Stem("godalming"), "godalm" );
	deepEqual( Stem("godchild"), "godchild" );
	deepEqual( Stem("goddess"), "goddess" );
	deepEqual( Stem("godfather"), "godfath" );
	deepEqual( Stem("godfeyther"), "godfeyth" );
	deepEqual( Stem("godfrey"), "godfrey" );
	deepEqual( Stem("godless"), "godless" );
	deepEqual( Stem("godlike"), "godlik" );
	deepEqual( Stem("godly"), "god" );
	deepEqual( Stem("godmother"), "godmoth" );
	deepEqual( Stem("gods"), "god" );
	deepEqual( Stem("godsend"), "godsend" );
	deepEqual( Stem("godson"), "godson" );
	deepEqual( Stem("goeree"), "goere" );
	deepEqual( Stem("goes"), "goe" );
	deepEqual( Stem("goesler"), "goesler" );
	deepEqual( Stem("goeth"), "goeth" );
	deepEqual( Stem("goethe"), "goeth" );
	deepEqual( Stem("gog"), "gog" );
	deepEqual( Stem("goggle"), "goggl" );
	deepEqual( Stem("gogol"), "gogol" );
	deepEqual( Stem("going"), "go" );
	deepEqual( Stem("goings"), "go" );
	deepEqual( Stem("goitre"), "goitr" );
	deepEqual( Stem("gold"), "gold" );
	deepEqual( Stem("golden"), "golden" );
	deepEqual( Stem("goldfinch"), "goldfinch" );
	deepEqual( Stem("goldfinches"), "goldfinch" );
	deepEqual( Stem("goldfish"), "goldfish" );
	deepEqual( Stem("goldingsby"), "goldingsbi" );
	deepEqual( Stem("goldsmith"), "goldsmith" );
	deepEqual( Stem("golgotha"), "golgotha" );
	deepEqual( Stem("goloshes"), "golosh" );
	deepEqual( Stem("gomez"), "gomez" );
	deepEqual( Stem("gondola"), "gondola" );
	deepEqual( Stem("gone"), "gone" );
	deepEqual( Stem("gong"), "gong" );
	deepEqual( Stem("gonoph"), "gonoph" );
	deepEqual( Stem("gonzales"), "gonzal" );
	deepEqual( Stem("goo"), "goo" );
	deepEqual( Stem("good"), "good" );
	deepEqual( Stem("goodbye"), "goodby" );
	deepEqual( Stem("goodle"), "goodl" );
	deepEqual( Stem("goodly"), "good" );
	deepEqual( Stem("goodnaturedly"), "goodnatur" );
	deepEqual( Stem("goodness"), "good" );
	deepEqual( Stem("goods"), "good" );
	deepEqual( Stem("goodwill"), "goodwil" );
	deepEqual( Stem("goodwood"), "goodwood" );
	deepEqual( Stem("goose"), "goos" );
	deepEqual( Stem("gooseberries"), "gooseberri" );
	deepEqual( Stem("gooseberry"), "gooseberri" );
	deepEqual( Stem("gootther"), "gootther" );
	deepEqual( Stem("gorda"), "gorda" );
	deepEqual( Stem("gore"), "gore" );
	deepEqual( Stem("gorge"), "gorg" );
	deepEqual( Stem("gorged"), "gorg" );
	deepEqual( Stem("gorgeous"), "gorgeous" );
	deepEqual( Stem("gorgeously"), "gorgeous" );
	deepEqual( Stem("gorgeousness"), "gorgeous" );
	deepEqual( Stem("gorges"), "gorg" );
	deepEqual( Stem("gorging"), "gorg" );
	deepEqual( Stem("gormandize"), "gormand" );
	deepEqual( Stem("gorse"), "gors" );
	deepEqual( Stem("gory"), "gori" );
	deepEqual( Stem("gospel"), "gospel" );
	deepEqual( Stem("gossamer"), "gossam" );
	deepEqual( Stem("gossip"), "gossip" );
	deepEqual( Stem("gossiper"), "gossip" );
	deepEqual( Stem("gossiping"), "gossip" );
	deepEqual( Stem("gossips"), "gossip" );
	deepEqual( Stem("got"), "got" );
	deepEqual( Stem("gothic"), "gothic" );
	deepEqual( Stem("gothlands"), "gothland" );
	deepEqual( Stem("gott"), "gott" );
	deepEqual( Stem("gotten"), "gotten" );
	deepEqual( Stem("gould"), "gould" );
	deepEqual( Stem("gourmand"), "gourmand" );
	deepEqual( Stem("gourmands"), "gourmand" );
	deepEqual( Stem("gout"), "gout" );
	deepEqual( Stem("gouty"), "gouti" );
	deepEqual( Stem("gov"), "gov" );
	deepEqual( Stem("gove"), "gove" );
	deepEqual( Stem("govemment"), "govem" );
	deepEqual( Stem("govern"), "govern" );
	deepEqual( Stem("governed"), "govern" );
	deepEqual( Stem("governess"), "gover" );
	deepEqual( Stem("governesses"), "gover" );
	deepEqual( Stem("governessing"), "gover" );
	deepEqual( Stem("governing"), "govern" );
	deepEqual( Stem("government"), "govern" );
	deepEqual( Stem("governments"), "govern" );
	deepEqual( Stem("governor"), "governor" );
	deepEqual( Stem("governors"), "governor" );
	deepEqual( Stem("governorship"), "governorship" );
	deepEqual( Stem("governs"), "govern" );
	deepEqual( Stem("govett"), "govett" );
	deepEqual( Stem("govvernor"), "govvernor" );
	deepEqual( Stem("gower"), "gower" );
	deepEqual( Stem("gown"), "gown" );
	deepEqual( Stem("gownd"), "gownd" );
	deepEqual( Stem("gowns"), "gown" );
	deepEqual( Stem("gra"), "gra" );
	deepEqual( Stem("grace"), "grace" );
	deepEqual( Stem("gracechurch"), "gracechurch" );
	deepEqual( Stem("graced"), "grace" );
	deepEqual( Stem("graceful"), "grace" );
	deepEqual( Stem("gracefully"), "grace" );
	deepEqual( Stem("graceless"), "graceless" );
	deepEqual( Stem("graces"), "grace" );
	deepEqual( Stem("gracing"), "grace" );
	deepEqual( Stem("gracious"), "gracious" );
	deepEqual( Stem("graciously"), "gracious" );
	deepEqual( Stem("graciousness"), "gracious" );
	deepEqual( Stem("gradation"), "gradat" );
	deepEqual( Stem("gradations"), "gradat" );
	deepEqual( Stem("grade"), "grade" );
	deepEqual( Stem("grades"), "grade" );
	deepEqual( Stem("gradual"), "gradual" );
	deepEqual( Stem("gradually"), "gradual" );
	deepEqual( Stem("graduate"), "graduat" );
	deepEqual( Stem("graduated"), "graduat" );
	deepEqual( Stem("grafted"), "graft" );
	deepEqual( Stem("grafts"), "graft" );
	deepEqual( Stem("grain"), "grain" );
	deepEqual( Stem("grained"), "grain" );
	deepEqual( Stem("grains"), "grain" );
	deepEqual( Stem("grammar"), "grammar" );
	deepEqual( Stem("grammarian"), "grammarian" );
	deepEqual( Stem("grammars"), "grammar" );
	deepEqual( Stem("grammatical"), "grammat" );
	deepEqual( Stem("gran"), "gran" );
	deepEqual( Stem("granaries"), "granari" );
	deepEqual( Stem("grand"), "grand" );
	deepEqual( Stem("grandchild"), "grandchild" );
	deepEqual( Stem("grandchildren"), "grandchildren" );
	deepEqual( Stem("granddaughter"), "granddaught" );
	deepEqual( Stem("grande"), "grand" );
	deepEqual( Stem("grandee"), "grande" );
	deepEqual( Stem("grandees"), "grande" );
	deepEqual( Stem("grander"), "grander" );
	deepEqual( Stem("grandest"), "grandest" );
	deepEqual( Stem("grandeur"), "grandeur" );
	deepEqual( Stem("grandeurs"), "grandeur" );
	deepEqual( Stem("grandfather"), "grandfath" );
	deepEqual( Stem("grandfathers"), "grandfath" );
	deepEqual( Stem("grandiflorus"), "grandiflorus" );
	deepEqual( Stem("grandiloquent"), "grandiloqu" );
	deepEqual( Stem("grandiloquently"), "grandiloqu" );
	deepEqual( Stem("grandly"), "grand" );
	deepEqual( Stem("grandmama"), "grandmama" );
	deepEqual( Stem("grandmamma"), "grandmamma" );
	deepEqual( Stem("grandmother"), "grandmoth" );
	deepEqual( Stem("grandmothers"), "grandmoth" );
	deepEqual( Stem("grandpapa"), "grandpapa" );
	deepEqual( Stem("grandsire"), "grandsir" );
	deepEqual( Stem("grandson"), "grandson" );
	deepEqual( Stem("granite"), "granit" );
	deepEqual( Stem("granitic"), "granit" );
	deepEqual( Stem("granny"), "granni" );
	deepEqual( Stem("grant"), "grant" );
	deepEqual( Stem("granted"), "grant" );
	deepEqual( Stem("grantham"), "grantham" );
	deepEqual( Stem("granting"), "grant" );
	deepEqual( Stem("granular"), "granular" );
	deepEqual( Stem("granulo"), "granulo" );
	deepEqual( Stem("grape"), "grape" );
	deepEqual( Stem("grapes"), "grape" );
	deepEqual( Stem("grapevine"), "grapevin" );
	deepEqual( Stem("grapple"), "grappl" );
	deepEqual( Stem("grappled"), "grappl" );
	deepEqual( Stem("grappling"), "grappl" );
	deepEqual( Stem("grasp"), "grasp" );
	deepEqual( Stem("grasped"), "grasp" );
	deepEqual( Stem("grasping"), "grasp" );
	deepEqual( Stem("grasps"), "grasp" );
	deepEqual( Stem("graspus"), "graspus" );
	deepEqual( Stem("grass"), "grass" );
	deepEqual( Stem("grasses"), "grass" );
	deepEqual( Stem("grasshopper"), "grasshopp" );
	deepEqual( Stem("grasshoppers"), "grasshopp" );
	deepEqual( Stem("grassy"), "grassi" );
	deepEqual( Stem("grate"), "grate" );
	deepEqual( Stem("grated"), "grate" );
	deepEqual( Stem("grateful"), "grate" );
	deepEqual( Stem("gratefully"), "grate" );
	deepEqual( Stem("grater"), "grater" );
	deepEqual( Stem("grates"), "grate" );
	deepEqual( Stem("gratful"), "grat" );
	deepEqual( Stem("gratification"), "gratif" );
	deepEqual( Stem("gratified"), "gratifi" );
	deepEqual( Stem("gratifies"), "gratifi" );
	deepEqual( Stem("gratify"), "gratifi" );
	deepEqual( Stem("gratifying"), "gratifi" );
	deepEqual( Stem("grating"), "grate" );
	deepEqual( Stem("gratitude"), "gratitud" );
	deepEqual( Stem("gratuitous"), "gratuit" );
	deepEqual( Stem("gratuitously"), "gratuit" );
	deepEqual( Stem("gratulation"), "gratul" );
	deepEqual( Stem("gravamen"), "gravamen" );
	deepEqual( Stem("grave"), "grave" );
	deepEqual( Stem("graveclothes"), "gravecloth" );
	deepEqual( Stem("gravel"), "gravel" );
	deepEqual( Stem("gravelled"), "gravel" );
	deepEqual( Stem("gravelly"), "gravelli" );
	deepEqual( Stem("gravely"), "grave" );
	deepEqual( Stem("graver"), "graver" );
	deepEqual( Stem("graves"), "grave" );
	deepEqual( Stem("gravesend"), "gravesend" );
	deepEqual( Stem("gravest"), "gravest" );
	deepEqual( Stem("gravestone"), "graveston" );
	deepEqual( Stem("gravestones"), "graveston" );
	deepEqual( Stem("graveyard"), "graveyard" );
	deepEqual( Stem("gravies"), "gravi" );
	deepEqual( Stem("gravity"), "graviti" );
	deepEqual( Stem("gravy"), "gravi" );
	deepEqual( Stem("gray"), "gray" );
	deepEqual( Stem("graymarsh"), "graymarsh" );
	deepEqual( Stem("graze"), "graze" );
	deepEqual( Stem("grazed"), "graze" );
	deepEqual( Stem("grazes"), "graze" );
	deepEqual( Stem("grazier"), "grazier" );
	deepEqual( Stem("grazing"), "graze" );
	deepEqual( Stem("grea"), "grea" );
	deepEqual( Stem("grease"), "greas" );
	deepEqual( Stem("greased"), "greas" );
	deepEqual( Stem("greasily"), "greasili" );
	deepEqual( Stem("greasy"), "greasi" );
	deepEqual( Stem("great"), "great" );
	deepEqual( Stem("greatcoat"), "greatcoat" );
	deepEqual( Stem("greateful"), "great" );
	deepEqual( Stem("greater"), "greater" );
	deepEqual( Stem("greatest"), "greatest" );
	deepEqual( Stem("greatl"), "greatl" );
	deepEqual( Stem("greatly"), "great" );
	deepEqual( Stem("greatness"), "great" );
	deepEqual( Stem("grecian"), "grecian" );
	deepEqual( Stem("grecians"), "grecian" );
	deepEqual( Stem("greece"), "greec" );
	deepEqual( Stem("greed"), "greed" );
	deepEqual( Stem("greedily"), "greedili" );
	deepEqual( Stem("greediness"), "greedi" );
	deepEqual( Stem("greedy"), "greedi" );
	deepEqual( Stem("greek"), "greek" );
	deepEqual( Stem("green"), "green" );
	deepEqual( Stem("greener"), "greener" );
	deepEqual( Stem("greengrocer"), "greengroc" );
	deepEqual( Stem("greengrocery"), "greengroceri" );
	deepEqual( Stem("greenhorn"), "greenhorn" );
	deepEqual( Stem("greenish"), "greenish" );
	deepEqual( Stem("greenland"), "greenland" );
	deepEqual( Stem("greenleaf"), "greenleaf" );
	deepEqual( Stem("greenly"), "green" );
	deepEqual( Stem("greenness"), "green" );
	deepEqual( Stem("greens"), "green" );
	deepEqual( Stem("greenstone"), "greenston" );
	deepEqual( Stem("greensward"), "greensward" );
	deepEqual( Stem("greenwich"), "greenwich" );
	deepEqual( Stem("greet"), "greet" );
	deepEqual( Stem("greeted"), "greet" );
	deepEqual( Stem("greeting"), "greet" );
	deepEqual( Stem("greetings"), "greet" );
	deepEqual( Stem("greets"), "greet" );
	deepEqual( Stem("gregarious"), "gregari" );
	deepEqual( Stem("gregory"), "gregori" );
	deepEqual( Stem("gregsbury"), "gregsburi" );
	deepEqual( Stem("grenadier"), "grenadi" );
	deepEqual( Stem("grenadiers"), "grenadi" );
	deepEqual( Stem("gresham"), "gresham" );
	deepEqual( Stem("greshambury"), "greshamburi" );
	deepEqual( Stem("greta"), "greta" );
	deepEqual( Stem("grew"), "grew" );
	deepEqual( Stem("grey"), "grey" );
	deepEqual( Stem("greyhound"), "greyhound" );
	deepEqual( Stem("greyhounds"), "greyhound" );
	deepEqual( Stem("greyish"), "greyish" );
	deepEqual( Stem("gride"), "gride" );
	deepEqual( Stem("gridiron"), "gridiron" );
	deepEqual( Stem("gridley"), "gridley" );
	deepEqual( Stem("grief"), "grief" );
	deepEqual( Stem("griefs"), "grief" );
	deepEqual( Stem("grievance"), "grievanc" );
	deepEqual( Stem("grievances"), "grievanc" );
	deepEqual( Stem("grieve"), "griev" );
	deepEqual( Stem("grieved"), "griev" );
	deepEqual( Stem("grieves"), "griev" );
	deepEqual( Stem("grieving"), "griev" );
	deepEqual( Stem("grievous"), "grievous" );
	deepEqual( Stem("grievously"), "grievous" );
	deepEqual( Stem("griffin"), "griffin" );
	deepEqual( Stem("griffith"), "griffith" );
	deepEqual( Stem("griffiths"), "griffith" );
	deepEqual( Stem("grig"), "grig" );
	deepEqual( Stem("grigorievitch"), "grigorievitch" );
	deepEqual( Stem("grigoryev"), "grigoryev" );
	deepEqual( Stem("grim"), "grim" );
	deepEqual( Stem("grimace"), "grimac" );
	deepEqual( Stem("grimaces"), "grimac" );
	deepEqual( Stem("grimacing"), "grimac" );
	deepEqual( Stem("grimalkin"), "grimalkin" );
	deepEqual( Stem("grimble"), "grimbl" );
	deepEqual( Stem("grimbles"), "grimbl" );
	deepEqual( Stem("grime"), "grime" );
	deepEqual( Stem("grimed"), "grime" );
	deepEqual( Stem("grimes"), "grime" );
	deepEqual( Stem("grimly"), "grim" );
	deepEqual( Stem("grimy"), "grimi" );
	deepEqual( Stem("grin"), "grin" );
	deepEqual( Stem("grind"), "grind" );
	deepEqual( Stem("grinder"), "grinder" );
	deepEqual( Stem("grinders"), "grinder" );
	deepEqual( Stem("grinding"), "grind" );
	deepEqual( Stem("grinned"), "grin" );
	deepEqual( Stem("grinning"), "grin" );
	deepEqual( Stem("grins"), "grin" );
	deepEqual( Stem("grip"), "grip" );
	deepEqual( Stem("griping"), "gripe" );
	deepEqual( Stem("gripped"), "grip" );
	deepEqual( Stem("gripping"), "grip" );
	deepEqual( Stem("grips"), "grip" );
	deepEqual( Stem("grisly"), "grisli" );
	deepEqual( Stem("grist"), "grist" );
	deepEqual( Stem("gritting"), "grit" );
	deepEqual( Stem("grizzled"), "grizzl" );
	deepEqual( Stem("groan"), "groan" );
	deepEqual( Stem("groaned"), "groan" );
	deepEqual( Stem("groaning"), "groan" );
	deepEqual( Stem("groans"), "groan" );
	deepEqual( Stem("grocer"), "grocer" );
	deepEqual( Stem("grogram"), "grogram" );
	deepEqual( Stem("grogzwig"), "grogzwig" );
	deepEqual( Stem("groom"), "groom" );
	deepEqual( Stem("groomed"), "groom" );
	deepEqual( Stem("grooms"), "groom" );
	deepEqual( Stem("groove"), "groov" );
	deepEqual( Stem("grooves"), "groov" );
	deepEqual( Stem("grooving"), "groov" );
	deepEqual( Stem("grope"), "grope" );
	deepEqual( Stem("groped"), "grope" );
	deepEqual( Stem("gropes"), "grope" );
	deepEqual( Stem("gropin"), "gropin" );
	deepEqual( Stem("groping"), "grope" );
	deepEqual( Stem("grose"), "grose" );
	deepEqual( Stem("gross"), "gross" );
	deepEqual( Stem("grosser"), "grosser" );
	deepEqual( Stem("grossest"), "grossest" );
	deepEqual( Stem("grossly"), "grossli" );
	deepEqual( Stem("grossness"), "gross" );
	deepEqual( Stem("grosvenor"), "grosvenor" );
	deepEqual( Stem("grotesque"), "grotesqu" );
	deepEqual( Stem("grotesquely"), "grotesqu" );
	deepEqual( Stem("grottoes"), "grotto" );
	deepEqual( Stem("ground"), "ground" );
	deepEqual( Stem("grounded"), "ground" );
	deepEqual( Stem("groundless"), "groundless" );
	deepEqual( Stem("groundlessness"), "groundless" );
	deepEqual( Stem("grounds"), "ground" );
	deepEqual( Stem("groundwork"), "groundwork" );
	deepEqual( Stem("group"), "group" );
	deepEqual( Stem("grouped"), "group" );
	deepEqual( Stem("grouping"), "group" );
	deepEqual( Stem("groups"), "group" );
	deepEqual( Stem("grouse"), "grous" );
	deepEqual( Stem("grove"), "grove" );
	deepEqual( Stem("grovel"), "grovel" );
	deepEqual( Stem("grovelling"), "grovel" );
	deepEqual( Stem("groves"), "grove" );
	deepEqual( Stem("grow"), "grow" );
	deepEqual( Stem("groweth"), "groweth" );
	deepEqual( Stem("growin"), "growin" );
	deepEqual( Stem("growing"), "grow" );
	deepEqual( Stem("growl"), "growl" );
	deepEqual( Stem("growled"), "growl" );
	deepEqual( Stem("growlery"), "growleri" );
	deepEqual( Stem("growling"), "growl" );
	deepEqual( Stem("growlings"), "growl" );
	deepEqual( Stem("growls"), "growl" );
	deepEqual( Stem("grown"), "grown" );
	deepEqual( Stem("grows"), "grow" );
	deepEqual( Stem("growth"), "growth" );
	deepEqual( Stem("grub"), "grub" );
	deepEqual( Stem("grubbed"), "grub" );
	deepEqual( Stem("grubbing"), "grub" );
	deepEqual( Stem("grubble"), "grubbl" );
	deepEqual( Stem("grudden"), "grudden" );
	deepEqual( Stem("grudge"), "grudg" );
	deepEqual( Stem("grudged"), "grudg" );
	deepEqual( Stem("grudges"), "grudg" );
	deepEqual( Stem("grudgingly"), "grudg" );
	deepEqual( Stem("gruff"), "gruff" );
	deepEqual( Stem("gruffly"), "gruffli" );
	deepEqual( Stem("grumble"), "grumbl" );
	deepEqual( Stem("grumbled"), "grumbl" );
	deepEqual( Stem("grumbler"), "grumbler" );
	deepEqual( Stem("grumblers"), "grumbler" );
	deepEqual( Stem("grumbling"), "grumbl" );
	deepEqual( Stem("grumblings"), "grumbl" );
	deepEqual( Stem("grund"), "grund" );
	deepEqual( Stem("grunt"), "grunt" );
	deepEqual( Stem("grunted"), "grunt" );
	deepEqual( Stem("grunts"), "grunt" );
	deepEqual( Stem("gryllus"), "gryllus" );
	deepEqual( Stem("guanaco"), "guanaco" );
	deepEqual( Stem("guanacos"), "guanaco" );
	deepEqual( Stem("guano"), "guano" );
	deepEqual( Stem("guantajaya"), "guantajaya" );
	deepEqual( Stem("guarantee"), "guarante" );
	deepEqual( Stem("guaranteed"), "guarante" );
	deepEqual( Stem("guard"), "guard" );
	deepEqual( Stem("guardage"), "guardag" );
	deepEqual( Stem("guarded"), "guard" );
	deepEqual( Stem("guardedness"), "guarded" );
	deepEqual( Stem("guardhouse"), "guardhous" );
	deepEqual( Stem("guardia"), "guardia" );
	deepEqual( Stem("guardian"), "guardian" );
	deepEqual( Stem("guardians"), "guardian" );
	deepEqual( Stem("guardianship"), "guardianship" );
	deepEqual( Stem("guarding"), "guard" );
	deepEqual( Stem("guards"), "guard" );
	deepEqual( Stem("guardsman"), "guardsman" );
	deepEqual( Stem("guardsmen"), "guardsmen" );
	deepEqual( Stem("guasco"), "guasco" );
	deepEqual( Stem("guascos"), "guasco" );
	deepEqual( Stem("guaso"), "guaso" );
	deepEqual( Stem("guasos"), "guaso" );
	deepEqual( Stem("guatemala"), "guatemala" );
	deepEqual( Stem("guava"), "guava" );
	deepEqual( Stem("guayaquil"), "guayaquil" );
	deepEqual( Stem("guayatecas"), "guayateca" );
	deepEqual( Stem("guayavita"), "guayavita" );
	deepEqual( Stem("gucho"), "gucho" );
	deepEqual( Stem("gude"), "gude" );
	deepEqual( Stem("guerre"), "guerr" );
	deepEqual( Stem("guess"), "guess" );
	deepEqual( Stem("guessed"), "guess" );
	deepEqual( Stem("guesses"), "guess" );
	deepEqual( Stem("guessing"), "guess" );
	deepEqual( Stem("guest"), "guest" );
	deepEqual( Stem("guests"), "guest" );
	deepEqual( Stem("guffaw"), "guffaw" );
	deepEqual( Stem("guffawed"), "guffaw" );
	deepEqual( Stem("guffawing"), "guffaw" );
	deepEqual( Stem("guffy"), "guffi" );
	deepEqual( Stem("guid"), "guid" );
	deepEqual( Stem("guidance"), "guidanc" );
	deepEqual( Stem("guide"), "guid" );
	deepEqual( Stem("guided"), "guid" );
	deepEqual( Stem("guides"), "guid" );
	deepEqual( Stem("guiding"), "guid" );
	deepEqual( Stem("guilandina"), "guilandina" );
	deepEqual( Stem("guildford"), "guildford" );
	deepEqual( Stem("guile"), "guil" );
	deepEqual( Stem("guileless"), "guileless" );
	deepEqual( Stem("guilt"), "guilt" );
	deepEqual( Stem("guiltily"), "guiltili" );
	deepEqual( Stem("guiltiness"), "guilti" );
	deepEqual( Stem("guiltless"), "guiltless" );
	deepEqual( Stem("guilty"), "guilti" );
	deepEqual( Stem("guinea"), "guinea" );
	deepEqual( Stem("guineas"), "guinea" );
	deepEqual( Stem("guise"), "guis" );
	deepEqual( Stem("guitar"), "guitar" );
	deepEqual( Stem("guitron"), "guitron" );
	deepEqual( Stem("gulf"), "gulf" );
	deepEqual( Stem("gulfs"), "gulf" );
	deepEqual( Stem("gull"), "gull" );
	deepEqual( Stem("gulled"), "gull" );
	deepEqual( Stem("gullet"), "gullet" );
	deepEqual( Stem("gulleys"), "gulley" );
	deepEqual( Stem("gullies"), "gulli" );
	deepEqual( Stem("gulliver"), "gulliv" );
	deepEqual( Stem("gulls"), "gull" );
	deepEqual( Stem("gully"), "gulli" );
	deepEqual( Stem("gulp"), "gulp" );
	deepEqual( Stem("gulped"), "gulp" );
	deepEqual( Stem("gulping"), "gulp" );
	deepEqual( Stem("gulps"), "gulp" );
	deepEqual( Stem("gum"), "gum" );
	deepEqual( Stem("gums"), "gum" );
	deepEqual( Stem("gumwood"), "gumwood" );
	deepEqual( Stem("gun"), "gun" );
	deepEqual( Stem("gunless"), "gunless" );
	deepEqual( Stem("gunner"), "gunner" );
	deepEqual( Stem("gunnera"), "gunnera" );
	deepEqual( Stem("gunners"), "gunner" );
	deepEqual( Stem("gunnners"), "gunnner" );
	deepEqual( Stem("gunpowder"), "gunpowd" );
	deepEqual( Stem("guns"), "gun" );
	deepEqual( Stem("gunsmith"), "gunsmith" );
	deepEqual( Stem("gunther"), "gunther" );
	deepEqual( Stem("gunwale"), "gunwal" );
	deepEqual( Stem("gunwales"), "gunwal" );
	deepEqual( Stem("gup"), "gup" );
	deepEqual( Stem("guppy"), "guppi" );
	deepEqual( Stem("gurgled"), "gurgl" );
	deepEqual( Stem("gurgling"), "gurgl" );
	deepEqual( Stem("gush"), "gush" );
	deepEqual( Stem("gushed"), "gush" );
	deepEqual( Stem("gusher"), "gusher" );
	deepEqual( Stem("gushing"), "gush" );
	deepEqual( Stem("gust"), "gust" );
	deepEqual( Stem("guster"), "guster" );
	deepEqual( Stem("gusts"), "gust" );
	deepEqual( Stem("gusty"), "gusti" );
	deepEqual( Stem("gutta"), "gutta" );
	deepEqual( Stem("gutter"), "gutter" );
	deepEqual( Stem("guttered"), "gutter" );
	deepEqual( Stem("guttering"), "gutter" );
	deepEqual( Stem("gutters"), "gutter" );
	deepEqual( Stem("guttural"), "guttur" );
	deepEqual( Stem("guv"), "guv" );
	deepEqual( Stem("guy"), "guy" );
	deepEqual( Stem("guyaquil"), "guyaquil" );
	deepEqual( Stem("guzzling"), "guzzl" );
	deepEqual( Stem("gwyneth"), "gwyneth" );
	deepEqual( Stem("gymnasium"), "gymnasium" );
	deepEqual( Stem("gymnastic"), "gymnast" );
	deepEqual( Stem("gypsies"), "gypsi" );
	deepEqual( Stem("gypsum"), "gypsum" );
	deepEqual( Stem("gypsy"), "gypsi" );
	deepEqual( Stem("gyrations"), "gyrat" );
	deepEqual( Stem("h"), "h" );
	deepEqual( Stem("ha"), "ha" );
	deepEqual( Stem("habeas"), "habea" );
	deepEqual( Stem("haberdasher"), "haberdash" );
	deepEqual( Stem("habiliments"), "habili" );
	deepEqual( Stem("habit"), "habit" );
	deepEqual( Stem("habitable"), "habit" );
	deepEqual( Stem("habitation"), "habit" );
	deepEqual( Stem("habitations"), "habit" );
	deepEqual( Stem("habited"), "habit" );
	deepEqual( Stem("habits"), "habit" );
	deepEqual( Stem("habitual"), "habitu" );
	deepEqual( Stem("habitually"), "habitu" );
	deepEqual( Stem("habituated"), "habitu" );
	deepEqual( Stem("hachette"), "hachett" );
	deepEqual( Stem("hacienda"), "hacienda" );
	deepEqual( Stem("haciendero"), "haciendero" );
	deepEqual( Stem("hack"), "hack" );
	deepEqual( Stem("hackney"), "hackney" );
	deepEqual( Stem("hacks"), "hack" );
	deepEqual( Stem("had"), "had" );
	deepEqual( Stem("hadn"), "hadn" );
	deepEqual( Stem("hadst"), "hadst" );
	deepEqual( Stem("hag"), "hag" );
	deepEqual( Stem("haggard"), "haggard" );
	deepEqual( Stem("haggardly"), "haggard" );
	deepEqual( Stem("haggardness"), "haggard" );
	deepEqual( Stem("haggle"), "haggl" );
	deepEqual( Stem("hah"), "hah" );
	deepEqual( Stem("hail"), "hail" );
	deepEqual( Stem("hailed"), "hail" );
	deepEqual( Stem("hailing"), "hail" );
	deepEqual( Stem("hailstones"), "hailston" );
	deepEqual( Stem("hair"), "hair" );
	deepEqual( Stem("hairbrush"), "hairbrush" );
	deepEqual( Stem("hairdresser"), "hairdress" );
	deepEqual( Stem("haired"), "hair" );
	deepEqual( Stem("hairless"), "hairless" );
	deepEqual( Stem("hairs"), "hair" );
	deepEqual( Stem("hairy"), "hairi" );
	deepEqual( Stem("halcyon"), "halcyon" );
	deepEqual( Stem("hale"), "hale" );
	deepEqual( Stem("half"), "half" );
	deepEqual( Stem("halfpence"), "halfpenc" );
	deepEqual( Stem("halfpenny"), "halfpenni" );
	deepEqual( Stem("halfpennyworth"), "halfpennyworth" );
	deepEqual( Stem("halfway"), "halfway" );
	deepEqual( Stem("hall"), "hall" );
	deepEqual( Stem("hallo"), "hallo" );
	deepEqual( Stem("halloa"), "halloa" );
	deepEqual( Stem("halloo"), "halloo" );
	deepEqual( Stem("hallooing"), "halloo" );
	deepEqual( Stem("hallowed"), "hallow" );
	deepEqual( Stem("halls"), "hall" );
	deepEqual( Stem("hallucination"), "hallucin" );
	deepEqual( Stem("halo"), "halo" );
	deepEqual( Stem("halt"), "halt" );
	deepEqual( Stem("halted"), "halt" );
	deepEqual( Stem("halter"), "halter" );
	deepEqual( Stem("haltica"), "haltica" );
	deepEqual( Stem("halting"), "halt" );
	deepEqual( Stem("halts"), "halt" );
	deepEqual( Stem("halves"), "halv" );
	deepEqual( Stem("ham"), "ham" );
	deepEqual( Stem("hamilton"), "hamilton" );
	deepEqual( Stem("hamlet"), "hamlet" );
	deepEqual( Stem("hamlets"), "hamlet" );
	deepEqual( Stem("hammer"), "hammer" );
	deepEqual( Stem("hammercloths"), "hammercloth" );
	deepEqual( Stem("hammered"), "hammer" );
	deepEqual( Stem("hammering"), "hammer" );
	deepEqual( Stem("hammers"), "hammer" );
	deepEqual( Stem("hammersmith"), "hammersmith" );
	deepEqual( Stem("hammond"), "hammond" );
	deepEqual( Stem("hampdens"), "hampden" );
	deepEqual( Stem("hamper"), "hamper" );
	deepEqual( Stem("hampered"), "hamper" );
	deepEqual( Stem("hampering"), "hamper" );
	deepEqual( Stem("hampers"), "hamper" );
	deepEqual( Stem("hampshire"), "hampshir" );
	deepEqual( Stem("hampstead"), "hampstead" );
	deepEqual( Stem("hampton"), "hampton" );
	deepEqual( Stem("hams"), "ham" );
	deepEqual( Stem("hamstrings"), "hamstr" );
	deepEqual( Stem("hand"), "hand" );
	deepEqual( Stem("handcuff"), "handcuff" );
	deepEqual( Stem("handcuffed"), "handcuf" );
	deepEqual( Stem("handcuffs"), "handcuff" );
	deepEqual( Stem("hande"), "hand" );
	deepEqual( Stem("handed"), "hand" );
	deepEqual( Stem("handeder"), "handed" );
	deepEqual( Stem("handel"), "handel" );
	deepEqual( Stem("handful"), "hand" );
	deepEqual( Stem("handfuls"), "hand" );
	deepEqual( Stem("handing"), "hand" );
	deepEqual( Stem("handkercher"), "handkerch" );
	deepEqual( Stem("handkerchief"), "handkerchief" );
	deepEqual( Stem("handkerchiefs"), "handkerchief" );
	deepEqual( Stem("handle"), "handl" );
	deepEqual( Stem("handled"), "handl" );
	deepEqual( Stem("handles"), "handl" );
	deepEqual( Stem("handling"), "handl" );
	deepEqual( Stem("handmaid"), "handmaid" );
	deepEqual( Stem("handmaiden"), "handmaiden" );
	deepEqual( Stem("handrail"), "handrail" );
	deepEqual( Stem("hands"), "hand" );
	deepEqual( Stem("handsome"), "handsom" );
	deepEqual( Stem("handsomely"), "handsom" );
	deepEqual( Stem("handsomer"), "handsom" );
	deepEqual( Stem("handsomest"), "handsomest" );
	deepEqual( Stem("handwriting"), "handwrit" );
	deepEqual( Stem("handy"), "handi" );
	deepEqual( Stem("hang"), "hang" );
	deepEqual( Stem("hangdog"), "hangdog" );
	deepEqual( Stem("hanged"), "hang" );
	deepEqual( Stem("hanger"), "hanger" );
	deepEqual( Stem("hangers"), "hanger" );
	deepEqual( Stem("hanging"), "hang" );
	deepEqual( Stem("hangings"), "hang" );
	deepEqual( Stem("hangman"), "hangman" );
	deepEqual( Stem("hangs"), "hang" );
	deepEqual( Stem("hankering"), "hanker" );
	deepEqual( Stem("hankers"), "hanker" );
	deepEqual( Stem("hannah"), "hannah" );
	deepEqual( Stem("hanover"), "hanov" );
	deepEqual( Stem("hansome"), "hansom" );
	deepEqual( Stem("hap"), "hap" );
	deepEqual( Stem("haphazard"), "haphazard" );
	deepEqual( Stem("hapless"), "hapless" );
	deepEqual( Stem("haply"), "hapli" );
	deepEqual( Stem("happen"), "happen" );
	deepEqual( Stem("happened"), "happen" );
	deepEqual( Stem("happening"), "happen" );
	deepEqual( Stem("happens"), "happen" );
	deepEqual( Stem("happerton"), "happerton" );
	deepEqual( Stem("happertons"), "happerton" );
	deepEqual( Stem("happier"), "happier" );
	deepEqual( Stem("happiest"), "happiest" );
	deepEqual( Stem("happily"), "happili" );
	deepEqual( Stem("happiness"), "happi" );
	deepEqual( Stem("happy"), "happi" );
	deepEqual( Stem("harangue"), "harangu" );
	deepEqual( Stem("harangued"), "harangu" );
	deepEqual( Stem("harass"), "harass" );
	deepEqual( Stem("harassed"), "harass" );
	deepEqual( Stem("harassing"), "harass" );
	deepEqual( Stem("harbinger"), "harbing" );
	deepEqual( Stem("harbour"), "harbour" );
	deepEqual( Stem("harboured"), "harbour" );
	deepEqual( Stem("harbouring"), "harbour" );
	deepEqual( Stem("harbours"), "harbour" );
	deepEqual( Stem("hard"), "hard" );
	deepEqual( Stem("harden"), "harden" );
	deepEqual( Stem("hardened"), "harden" );
	deepEqual( Stem("hardening"), "harden" );
	deepEqual( Stem("harder"), "harder" );
	deepEqual( Stem("hardest"), "hardest" );
	deepEqual( Stem("hardihood"), "hardihood" );
	deepEqual( Stem("harding"), "hard" );
	deepEqual( Stem("hardly"), "hard" );
	deepEqual( Stem("hardness"), "hard" );
	deepEqual( Stem("hardship"), "hardship" );
	deepEqual( Stem("hardships"), "hardship" );
	deepEqual( Stem("hardworking"), "hardwork" );
	deepEqual( Stem("hardy"), "hardi" );
	deepEqual( Stem("hare"), "hare" );
	deepEqual( Stem("hares"), "hare" );
	deepEqual( Stem("hareskin"), "hareskin" );
	deepEqual( Stem("hark"), "hark" );
	deepEqual( Stem("harkee"), "harke" );
	deepEqual( Stem("harkov"), "harkov" );
	deepEqual( Stem("harkye"), "harky" );
	deepEqual( Stem("harlamov"), "harlamov" );
	deepEqual( Stem("harlequin"), "harlequin" );
	deepEqual( Stem("harlot"), "harlot" );
	deepEqual( Stem("harm"), "harm" );
	deepEqual( Stem("harmattan"), "harmattan" );
	deepEqual( Stem("harmful"), "harm" );
	deepEqual( Stem("harmless"), "harmless" );
	deepEqual( Stem("harmlessly"), "harmless" );
	deepEqual( Stem("harmonic"), "harmon" );
	deepEqual( Stem("harmonious"), "harmoni" );
	deepEqual( Stem("harmoniously"), "harmoni" );
	deepEqual( Stem("harmonised"), "harmonis" );
	deepEqual( Stem("harmony"), "harmoni" );
	deepEqual( Stem("harn"), "harn" );
	deepEqual( Stem("harness"), "har" );
	deepEqual( Stem("harnessed"), "har" );
	deepEqual( Stem("harnessing"), "har" );
	deepEqual( Stem("harold"), "harold" );
	deepEqual( Stem("harp"), "harp" );
	deepEqual( Stem("harpalidae"), "harpalida" );
	deepEqual( Stem("harpalus"), "harpalus" );
	deepEqual( Stem("harpies"), "harpi" );
	deepEqual( Stem("harping"), "harp" );
	deepEqual( Stem("harps"), "harp" );
	deepEqual( Stem("harpy"), "harpi" );
	deepEqual( Stem("harriet"), "harriet" );
	deepEqual( Stem("harriett"), "harriett" );
	deepEqual( Stem("harrington"), "harrington" );
	deepEqual( Stem("harris"), "harri" );
	deepEqual( Stem("harrison"), "harrison" );
	deepEqual( Stem("harrow"), "harrow" );
	deepEqual( Stem("harrowgate"), "harrowg" );
	deepEqual( Stem("harrowing"), "harrow" );
	deepEqual( Stem("harrows"), "harrow" );
	deepEqual( Stem("harse"), "hars" );
	deepEqual( Stem("harsh"), "harsh" );
	deepEqual( Stem("harsher"), "harsher" );
	deepEqual( Stem("harshest"), "harshest" );
	deepEqual( Stem("harshly"), "harsh" );
	deepEqual( Stem("harshness"), "harsh" );
	deepEqual( Stem("hart"), "hart" );
	deepEqual( Stem("hartlepod"), "hartlepod" );
	deepEqual( Stem("hartlepool"), "hartlepool" );
	deepEqual( Stem("hartshorn"), "hartshorn" );
	deepEqual( Stem("harum"), "harum" );
	deepEqual( Stem("harurn"), "harurn" );
	deepEqual( Stem("harvest"), "harvest" );
	deepEqual( Stem("has"), "has" );
	deepEqual( Stem("hash"), "hash" );
	deepEqual( Stem("hashed"), "hash" );
	deepEqual( Stem("hasn"), "hasn" );
	deepEqual( Stem("hasp"), "hasp" );
	deepEqual( Stem("hassan"), "hassan" );
	deepEqual( Stem("hast"), "hast" );
	deepEqual( Stem("haste"), "hast" );
	deepEqual( Stem("hasten"), "hasten" );
	deepEqual( Stem("hastened"), "hasten" );
	deepEqual( Stem("hastening"), "hasten" );
	deepEqual( Stem("hastens"), "hasten" );
	deepEqual( Stem("hastily"), "hastili" );
	deepEqual( Stem("hasty"), "hasti" );
	deepEqual( Stem("hat"), "hat" );
	deepEqual( Stem("hatch"), "hatch" );
	deepEqual( Stem("hatched"), "hatch" );
	deepEqual( Stem("hatches"), "hatch" );
	deepEqual( Stem("hatchet"), "hatchet" );
	deepEqual( Stem("hatching"), "hatch" );
	deepEqual( Stem("hatchings"), "hatch" );
	deepEqual( Stem("hatchment"), "hatchment" );
	deepEqual( Stem("hate"), "hate" );
	deepEqual( Stem("hated"), "hate" );
	deepEqual( Stem("hateful"), "hate" );
	deepEqual( Stem("hater"), "hater" );
	deepEqual( Stem("hates"), "hate" );
	deepEqual( Stem("hath"), "hath" );
	deepEqual( Stem("hating"), "hate" );
	deepEqual( Stem("hatless"), "hatless" );
	deepEqual( Stem("hatred"), "hatr" );
	deepEqual( Stem("hatreds"), "hatr" );
	deepEqual( Stem("hats"), "hat" );
	deepEqual( Stem("hatter"), "hatter" );
	deepEqual( Stem("hatton"), "hatton" );
	deepEqual( Stem("haughtiest"), "haughtiest" );
	deepEqual( Stem("haughtily"), "haughtili" );
	deepEqual( Stem("haughtiness"), "haughti" );
	deepEqual( Stem("haughtinesses"), "haughti" );
	deepEqual( Stem("haughty"), "haughti" );
	deepEqual( Stem("haul"), "haul" );
	deepEqual( Stem("hauled"), "haul" );
	deepEqual( Stem("hauling"), "haul" );
	deepEqual( Stem("haunches"), "haunch" );
	deepEqual( Stem("haunt"), "haunt" );
	deepEqual( Stem("haunted"), "haunt" );
	deepEqual( Stem("haunting"), "haunt" );
	deepEqual( Stem("haunts"), "haunt" );
	deepEqual( Stem("hav"), "hav" );
	deepEqual( Stem("have"), "have" );
	deepEqual( Stem("haven"), "haven" );
	deepEqual( Stem("having"), "have" );
	deepEqual( Stem("havoc"), "havoc" );
	deepEqual( Stem("hawdon"), "hawdon" );
	deepEqual( Stem("hawed"), "haw" );
	deepEqual( Stem("hawfinch"), "hawfinch" );
	deepEqual( Stem("hawk"), "hawk" );
	deepEqual( Stem("hawkinses"), "hawkins" );
	deepEqual( Stem("hawks"), "hawk" );
	deepEqual( Stem("hawthorns"), "hawthorn" );
	deepEqual( Stem("hay"), "hay" );
	deepEqual( Stem("haycock"), "haycock" );
	deepEqual( Stem("hayes"), "hay" );
	deepEqual( Stem("haymakers"), "haymak" );
	deepEqual( Stem("haymaking"), "haymak" );
	deepEqual( Stem("haymarket"), "haymarket" );
	deepEqual( Stem("haystacks"), "haystack" );
	deepEqual( Stem("hazard"), "hazard" );
	deepEqual( Stem("hazarded"), "hazard" );
	deepEqual( Stem("hazarding"), "hazard" );
	deepEqual( Stem("hazardous"), "hazard" );
	deepEqual( Stem("hazards"), "hazard" );
	deepEqual( Stem("haze"), "haze" );
	deepEqual( Stem("hazel"), "hazel" );
	deepEqual( Stem("hazy"), "hazi" );
	deepEqual( Stem("hd"), "hd" );
	deepEqual( Stem("he"), "he" );
	deepEqual( Stem("hea"), "hea" );
	deepEqual( Stem("head"), "head" );
	deepEqual( Stem("headache"), "headach" );
	deepEqual( Stem("headaches"), "headach" );
	deepEqual( Stem("headdress"), "headdress" );
	deepEqual( Stem("headed"), "head" );
	deepEqual( Stem("headgear"), "headgear" );
	deepEqual( Stem("heading"), "head" );
	deepEqual( Stem("headland"), "headland" );
	deepEqual( Stem("headlands"), "headland" );
	deepEqual( Stem("headless"), "headless" );
	deepEqual( Stem("headlong"), "headlong" );
	deepEqual( Stem("headmost"), "headmost" );
	deepEqual( Stem("headquarters"), "headquart" );
	deepEqual( Stem("heads"), "head" );
	deepEqual( Stem("headstrong"), "headstrong" );
	deepEqual( Stem("heal"), "heal" );
	deepEqual( Stem("healed"), "heal" );
	deepEqual( Stem("healing"), "heal" );
	deepEqual( Stem("health"), "health" );
	deepEqual( Stem("healthful"), "health" );
	deepEqual( Stem("healthier"), "healthier" );
	deepEqual( Stem("healthiness"), "healthi" );
	deepEqual( Stem("healths"), "health" );
	deepEqual( Stem("healthy"), "healthi" );
	deepEqual( Stem("heap"), "heap" );
	deepEqual( Stem("heaped"), "heap" );
	deepEqual( Stem("heaping"), "heap" );
	deepEqual( Stem("heaps"), "heap" );
	deepEqual( Stem("hear"), "hear" );
	deepEqual( Stem("heard"), "heard" );
	deepEqual( Stem("hearer"), "hearer" );
	deepEqual( Stem("hearers"), "hearer" );
	deepEqual( Stem("hearest"), "hearest" );
	deepEqual( Stem("hearing"), "hear" );
	deepEqual( Stem("hearken"), "hearken" );
	deepEqual( Stem("hearne"), "hearn" );
	deepEqual( Stem("hears"), "hear" );
	deepEqual( Stem("hearse"), "hears" );
	deepEqual( Stem("heart"), "heart" );
	deepEqual( Stem("heartache"), "heartach" );
	deepEqual( Stem("heartbroken"), "heartbroken" );
	deepEqual( Stem("heartburns"), "heartburn" );
	deepEqual( Stem("hearted"), "heart" );
	deepEqual( Stem("heartedest"), "heartedest" );
	deepEqual( Stem("heartedness"), "hearted" );
	deepEqual( Stem("heartfelt"), "heartfelt" );
	deepEqual( Stem("hearth"), "hearth" );
	deepEqual( Stem("hearths"), "hearth" );
	deepEqual( Stem("hearthstone"), "hearthston" );
	deepEqual( Stem("heartiest"), "heartiest" );
	deepEqual( Stem("heartily"), "heartili" );
	deepEqual( Stem("heartiness"), "hearti" );
	deepEqual( Stem("heartless"), "heartless" );
	deepEqual( Stem("heartlessly"), "heartless" );
	deepEqual( Stem("heartlessness"), "heartless" );
	deepEqual( Stem("heartrending"), "heartrend" );
	deepEqual( Stem("hearts"), "heart" );
	deepEqual( Stem("heartsease"), "heartseas" );
	deepEqual( Stem("heartsore"), "heartsor" );
	deepEqual( Stem("heartstrings"), "heartstr" );
	deepEqual( Stem("hearty"), "hearti" );
	deepEqual( Stem("heat"), "heat" );
	deepEqual( Stem("heated"), "heat" );
	deepEqual( Stem("heater"), "heater" );
	deepEqual( Stem("heath"), "heath" );
	deepEqual( Stem("heathen"), "heathen" );
	deepEqual( Stem("heather"), "heather" );
	deepEqual( Stem("heaths"), "heath" );
	deepEqual( Stem("heav"), "heav" );
	deepEqual( Stem("heave"), "heav" );
	deepEqual( Stem("heaved"), "heav" );
	deepEqual( Stem("heaven"), "heaven" );
	deepEqual( Stem("heavenly"), "heaven" );
	deepEqual( Stem("heavens"), "heaven" );
	deepEqual( Stem("heaver"), "heaver" );
	deepEqual( Stem("heaves"), "heav" );
	deepEqual( Stem("heavier"), "heavier" );
	deepEqual( Stem("heaviest"), "heaviest" );
	deepEqual( Stem("heavily"), "heavili" );
	deepEqual( Stem("heaviness"), "heavi" );
	deepEqual( Stem("heaving"), "heav" );
	deepEqual( Stem("heavings"), "heav" );
	deepEqual( Stem("heavv"), "heavv" );
	deepEqual( Stem("heavy"), "heavi" );
	deepEqual( Stem("hebrew"), "hebrew" );
	deepEqual( Stem("hecla"), "hecla" );
	deepEqual( Stem("hectic"), "hectic" );
	deepEqual( Stem("hectoring"), "hector" );
	deepEqual( Stem("hedge"), "hedg" );
	deepEqual( Stem("hedgehog"), "hedgehog" );
	deepEqual( Stem("hedgerows"), "hedgerow" );
	deepEqual( Stem("hedges"), "hedg" );
	deepEqual( Stem("hedging"), "hedg" );
	deepEqual( Stem("heed"), "heed" );
	deepEqual( Stem("heeded"), "heed" );
	deepEqual( Stem("heeding"), "heed" );
	deepEqual( Stem("heedless"), "heedless" );
	deepEqual( Stem("heedlessly"), "heedless" );
	deepEqual( Stem("heedlessness"), "heedless" );
	deepEqual( Stem("heeds"), "heed" );
	deepEqual( Stem("heel"), "heel" );
	deepEqual( Stem("heeled"), "heel" );
	deepEqual( Stem("heels"), "heel" );
	deepEqual( Stem("heerd"), "heerd" );
	deepEqual( Stem("heern"), "heern" );
	deepEqual( Stem("heigh"), "heigh" );
	deepEqual( Stem("heigho"), "heigho" );
	deepEqual( Stem("height"), "height" );
	deepEqual( Stem("heighten"), "heighten" );
	deepEqual( Stem("heightened"), "heighten" );
	deepEqual( Stem("heightening"), "heighten" );
	deepEqual( Stem("heightens"), "heighten" );
	deepEqual( Stem("heighth"), "heighth" );
	deepEqual( Stem("heights"), "height" );
	deepEqual( Stem("heinous"), "heinous" );
	deepEqual( Stem("heir"), "heir" );
	deepEqual( Stem("heiress"), "heiress" );
	deepEqual( Stem("heiresses"), "heiress" );
	deepEqual( Stem("heirlooms"), "heirloom" );
	deepEqual( Stem("heirs"), "heir" );
	deepEqual( Stem("heirship"), "heirship" );
	deepEqual( Stem("held"), "held" );
	deepEqual( Stem("helden"), "helden" );
	deepEqual( Stem("helen"), "helen" );
	deepEqual( Stem("helena"), "helena" );
	deepEqual( Stem("heliotrope"), "heliotrop" );
	deepEqual( Stem("helix"), "helix" );
	deepEqual( Stem("hell"), "hell" );
	deepEqual( Stem("helm"), "helm" );
	deepEqual( Stem("helmet"), "helmet" );
	deepEqual( Stem("helmets"), "helmet" );
	deepEqual( Stem("help"), "help" );
	deepEqual( Stem("helped"), "help" );
	deepEqual( Stem("helper"), "helper" );
	deepEqual( Stem("helpers"), "helper" );
	deepEqual( Stem("helpful"), "help" );
	deepEqual( Stem("helping"), "help" );
	deepEqual( Stem("helpless"), "helpless" );
	deepEqual( Stem("helplessly"), "helpless" );
	deepEqual( Stem("helplessness"), "helpless" );
	deepEqual( Stem("helpmate"), "helpmat" );
	deepEqual( Stem("helps"), "help" );
	deepEqual( Stem("helvellyn"), "helvellyn" );
	deepEqual( Stem("hem"), "hem" );
	deepEqual( Stem("hemiptera"), "hemiptera" );
	deepEqual( Stem("hemisphere"), "hemispher" );
	deepEqual( Stem("hemispheres"), "hemispher" );
	deepEqual( Stem("hemmed"), "hem" );
	deepEqual( Stem("hemming"), "hem" );
	deepEqual( Stem("hempen"), "hempen" );
	deepEqual( Stem("hen"), "hen" );
	deepEqual( Stem("hence"), "henc" );
	deepEqual( Stem("henceforth"), "henceforth" );
	deepEqual( Stem("henceforward"), "henceforward" );
	deepEqual( Stem("hend"), "hend" );
	deepEqual( Stem("henemies"), "henemi" );
	deepEqual( Stem("henrietta"), "henrietta" );
	deepEqual( Stem("henriette"), "henriett" );
	deepEqual( Stem("henry"), "henri" );
	deepEqual( Stem("hens"), "hen" );
	deepEqual( Stem("henslow"), "henslow" );
	deepEqual( Stem("heptarchy"), "heptarchi" );
	deepEqual( Stem("her"), "her" );
	deepEqual( Stem("herald"), "herald" );
	deepEqual( Stem("heralded"), "herald" );
	deepEqual( Stem("heraldic"), "herald" );
	deepEqual( Stem("herb"), "herb" );
	deepEqual( Stem("herbaceous"), "herbac" );
	deepEqual( Stem("herbage"), "herbag" );
	deepEqual( Stem("herbarium"), "herbarium" );
	deepEqual( Stem("herbert"), "herbert" );
	deepEqual( Stem("herbivorous"), "herbivor" );
	deepEqual( Stem("herbs"), "herb" );
	deepEqual( Stem("herculean"), "herculean" );
	deepEqual( Stem("hercules"), "hercul" );
	deepEqual( Stem("herd"), "herd" );
	deepEqual( Stem("herds"), "herd" );
	deepEqual( Stem("here"), "here" );
	deepEqual( Stem("hereabouts"), "hereabout" );
	deepEqual( Stem("hereafter"), "hereaft" );
	deepEqual( Stem("hereby"), "herebi" );
	deepEqual( Stem("hereditary"), "hereditari" );
	deepEqual( Stem("hereford"), "hereford" );
	deepEqual( Stem("herein"), "herein" );
	deepEqual( Stem("hereof"), "hereof" );
	deepEqual( Stem("heresy"), "heresi" );
	deepEqual( Stem("heretic"), "heret" );
	deepEqual( Stem("heretick"), "heretick" );
	deepEqual( Stem("hereticks"), "heretick" );
	deepEqual( Stem("heretics"), "heret" );
	deepEqual( Stem("heretofore"), "heretofor" );
	deepEqual( Stem("hereupon"), "hereupon" );
	deepEqual( Stem("herewith"), "herewith" );
	deepEqual( Stem("heritage"), "heritag" );
	deepEqual( Stem("hermit"), "hermit" );
	deepEqual( Stem("hermitage"), "hermitag" );
	deepEqual( Stem("hero"), "hero" );
	deepEqual( Stem("herod"), "herod" );
	deepEqual( Stem("heroded"), "herod" );
	deepEqual( Stem("heroes"), "hero" );
	deepEqual( Stem("heroic"), "heroic" );
	deepEqual( Stem("heroine"), "heroin" );
	deepEqual( Stem("heroism"), "heroism" );
	deepEqual( Stem("herons"), "heron" );
	deepEqual( Stem("herries"), "herri" );
	deepEqual( Stem("herrings"), "herring" );
	deepEqual( Stem("hers"), "her" );
	deepEqual( Stem("herschel"), "herschel" );
	deepEqual( Stem("herself"), "herself" );
	deepEqual( Stem("hertfordshire"), "hertfordshir" );
	deepEqual( Stem("heruvimov"), "heruvimov" );
	deepEqual( Stem("hesitate"), "hesit" );
	deepEqual( Stem("hesitated"), "hesit" );
	deepEqual( Stem("hesitates"), "hesit" );
	deepEqual( Stem("hesitating"), "hesit" );
	deepEqual( Stem("hesitatingly"), "hesit" );
	deepEqual( Stem("hesitation"), "hesit" );
	deepEqual( Stem("hesitations"), "hesit" );
	deepEqual( Stem("heterogeneous"), "heterogen" );
	deepEqual( Stem("heteromera"), "heteromera" );
	deepEqual( Stem("heteromerous"), "heteromer" );
	deepEqual( Stem("heteromidae"), "heteromida" );
	deepEqual( Stem("hever"), "hever" );
	deepEqual( Stem("hew"), "hew" );
	deepEqual( Stem("hewer"), "hewer" );
	deepEqual( Stem("hewers"), "hewer" );
	deepEqual( Stem("hewing"), "hew" );
	deepEqual( Stem("hey"), "hey" );
	deepEqual( Stem("heyday"), "heyday" );
	deepEqual( Stem("hi"), "hi" );
	deepEqual( Stem("hiatus"), "hiatus" );
	deepEqual( Stem("hibiscus"), "hibiscus" );
	deepEqual( Stem("hiccup"), "hiccup" );
	deepEqual( Stem("hiccuped"), "hiccup" );
	deepEqual( Stem("hid"), "hid" );
	deepEqual( Stem("hidden"), "hidden" );
	deepEqual( Stem("hide"), "hide" );
	deepEqual( Stem("hideous"), "hideous" );
	deepEqual( Stem("hideously"), "hideous" );
	deepEqual( Stem("hideousness"), "hideous" );
	deepEqual( Stem("hides"), "hide" );
	deepEqual( Stem("hiding"), "hide" );
	deepEqual( Stem("hierarchy"), "hierarchi" );
	deepEqual( Stem("hieroglyphics"), "hieroglyph" );
	deepEqual( Stem("higgenbottom"), "higgenbottom" );
	deepEqual( Stem("higgins"), "higgin" );
	deepEqual( Stem("high"), "high" );
	deepEqual( Stem("higher"), "higher" );
	deepEqual( Stem("highest"), "highest" );
	deepEqual( Stem("highfaluting"), "highfalut" );
	deepEqual( Stem("highgate"), "highgat" );
	deepEqual( Stem("highl"), "highl" );
	deepEqual( Stem("highland"), "highland" );
	deepEqual( Stem("highlanders"), "highland" );
	deepEqual( Stem("highlands"), "highland" );
	deepEqual( Stem("highly"), "high" );
	deepEqual( Stem("highness"), "high" );
	deepEqual( Stem("highroad"), "highroad" );
	deepEqual( Stem("highway"), "highway" );
	deepEqual( Stem("highwayman"), "highwayman" );
	deepEqual( Stem("highways"), "highway" );
	deepEqual( Stem("hignominiousness"), "hignomini" );
	deepEqual( Stem("hilaire"), "hilair" );
	deepEqual( Stem("hilarious"), "hilari" );
	deepEqual( Stem("hilariously"), "hilari" );
	deepEqual( Stem("hilarity"), "hilar" );
	deepEqual( Stem("hilda"), "hilda" );
	deepEqual( Stem("hill"), "hill" );
	deepEqual( Stem("hillock"), "hillock" );
	deepEqual( Stem("hillocks"), "hillock" );
	deepEqual( Stem("hills"), "hill" );
	deepEqual( Stem("hillsides"), "hillsid" );
	deepEqual( Stem("hilltops"), "hilltop" );
	deepEqual( Stem("hilly"), "hilli" );
	deepEqual( Stem("hilt"), "hilt" );
	deepEqual( Stem("hilts"), "hilt" );
	deepEqual( Stem("him"), "him" );
	deepEqual( Stem("himalaya"), "himalaya" );
	deepEqual( Stem("himantopus"), "himantopus" );
	deepEqual( Stem("himsel"), "himsel" );
	deepEqual( Stem("himself"), "himself" );
	deepEqual( Stem("hind"), "hind" );
	deepEqual( Stem("hinder"), "hinder" );
	deepEqual( Stem("hindered"), "hinder" );
	deepEqual( Stem("hindering"), "hinder" );
	deepEqual( Stem("hindoos"), "hindoo" );
	deepEqual( Stem("hindrance"), "hindranc" );
	deepEqual( Stem("hinds"), "hind" );
	deepEqual( Stem("hindu"), "hindu" );
	deepEqual( Stem("hing"), "hing" );
	deepEqual( Stem("hinges"), "hing" );
	deepEqual( Stem("hint"), "hint" );
	deepEqual( Stem("hinted"), "hint" );
	deepEqual( Stem("hinting"), "hint" );
	deepEqual( Stem("hints"), "hint" );
	deepEqual( Stem("hip"), "hip" );
	deepEqual( Stem("hippah"), "hippah" );
	deepEqual( Stem("hippahs"), "hippah" );
	deepEqual( Stem("hipped"), "hip" );
	deepEqual( Stem("hippish"), "hippish" );
	deepEqual( Stem("hippopotamus"), "hippopotamus" );
	deepEqual( Stem("hippopotamuses"), "hippopotamus" );
	deepEqual( Stem("hips"), "hip" );
	deepEqual( Stem("hire"), "hire" );
	deepEqual( Stem("hired"), "hire" );
	deepEqual( Stem("hiring"), "hire" );
	deepEqual( Stem("hirrold"), "hirrold" );
	deepEqual( Stem("his"), "his" );
	deepEqual( Stem("hiss"), "hiss" );
	deepEqual( Stem("hisself"), "hisself" );
	deepEqual( Stem("hisses"), "hiss" );
	deepEqual( Stem("hissing"), "hiss" );
	deepEqual( Stem("hist"), "hist" );
	deepEqual( Stem("histoire"), "histoir" );
	deepEqual( Stem("historian"), "historian" );
	deepEqual( Stem("historical"), "histor" );
	deepEqual( Stem("historically"), "histor" );
	deepEqual( Stem("histories"), "histori" );
	deepEqual( Stem("history"), "histori" );
	deepEqual( Stem("histrionic"), "histrion" );
	deepEqual( Stem("hit"), "hit" );
	deepEqual( Stem("hitch"), "hitch" );
	deepEqual( Stem("hitchcock"), "hitchcock" );
	deepEqual( Stem("hitched"), "hitch" );
	deepEqual( Stem("hitches"), "hitch" );
	deepEqual( Stem("hitching"), "hitch" );
	deepEqual( Stem("hither"), "hither" );
	deepEqual( Stem("hitherto"), "hitherto" );
	deepEqual( Stem("hitherward"), "hitherward" );
	deepEqual( Stem("hits"), "hit" );
	deepEqual( Stem("hitting"), "hit" );
	deepEqual( Stem("hittites"), "hittit" );
	deepEqual( Stem("hive"), "hive" );
	deepEqual( Stem("hl"), "hl" );
	deepEqual( Stem("hm"), "hm" );
	deepEqual( Stem("ho"), "ho" );
	deepEqual( Stem("hoar"), "hoar" );
	deepEqual( Stem("hoard"), "hoard" );
	deepEqual( Stem("hoarded"), "hoard" );
	deepEqual( Stem("hoarding"), "hoard" );
	deepEqual( Stem("hoardings"), "hoard" );
	deepEqual( Stem("hoards"), "hoard" );
	deepEqual( Stem("hoarse"), "hoars" );
	deepEqual( Stem("hoarsely"), "hoars" );
	deepEqual( Stem("hoarser"), "hoarser" );
	deepEqual( Stem("hoary"), "hoari" );
	deepEqual( Stem("hob"), "hob" );
	deepEqual( Stem("hobart"), "hobart" );
	deepEqual( Stem("hobbled"), "hobbl" );
	deepEqual( Stem("hobbledehoy"), "hobbledehoy" );
	deepEqual( Stem("hobbles"), "hobbl" );
	deepEqual( Stem("hobbling"), "hobbl" );
	deepEqual( Stem("hobby"), "hobbi" );
	deepEqual( Stem("hobgoblin"), "hobgoblin" );
	deepEqual( Stem("hoch"), "hoch" );
	deepEqual( Stem("hochbeseeltes"), "hochbeseelt" );
	deepEqual( Stem("hock"), "hock" );
	deepEqual( Stem("hod"), "hod" );
	deepEqual( Stem("hof"), "hof" );
	deepEqual( Stem("hoffmanseggi"), "hoffmanseggi" );
	deepEqual( Stem("hog"), "hog" );
	deepEqual( Stem("hogoleu"), "hogoleu" );
	deepEqual( Stem("hogs"), "hog" );
	deepEqual( Stem("hoist"), "hoist" );
	deepEqual( Stem("hoisted"), "hoist" );
	deepEqual( Stem("hoity"), "hoiti" );
	deepEqual( Stem("holborn"), "holborn" );
	deepEqual( Stem("hold"), "hold" );
	deepEqual( Stem("holden"), "holden" );
	deepEqual( Stem("holder"), "holder" );
	deepEqual( Stem("holders"), "holder" );
	deepEqual( Stem("holding"), "hold" );
	deepEqual( Stem("holds"), "hold" );
	deepEqual( Stem("hole"), "hole" );
	deepEqual( Stem("holes"), "hole" );
	deepEqual( Stem("holiday"), "holiday" );
	deepEqual( Stem("holidays"), "holiday" );
	deepEqual( Stem("holies"), "holi" );
	deepEqual( Stem("holily"), "holili" );
	deepEqual( Stem("holiness"), "holi" );
	deepEqual( Stem("holland"), "holland" );
	deepEqual( Stem("hollies"), "holli" );
	deepEqual( Stem("hollo"), "hollo" );
	deepEqual( Stem("holloa"), "holloa" );
	deepEqual( Stem("hollow"), "hollow" );
	deepEqual( Stem("holloway"), "holloway" );
	deepEqual( Stem("hollowed"), "hollow" );
	deepEqual( Stem("hollower"), "hollow" );
	deepEqual( Stem("hollowness"), "hollow" );
	deepEqual( Stem("hollows"), "hollow" );
	deepEqual( Stem("holly"), "holli" );
	deepEqual( Stem("holman"), "holman" );
	deepEqual( Stem("holstein"), "holstein" );
	deepEqual( Stem("holuthuriae"), "holuthuria" );
	deepEqual( Stem("holy"), "holi" );
	deepEqual( Stem("holyhead"), "holyhead" );
	deepEqual( Stem("homage"), "homag" );
	deepEqual( Stem("hombre"), "hombr" );
	deepEqual( Stem("home"), "home" );
	deepEqual( Stem("homeless"), "homeless" );
	deepEqual( Stem("homelessness"), "homeless" );
	deepEqual( Stem("homelike"), "homelik" );
	deepEqual( Stem("homely"), "home" );
	deepEqual( Stem("homes"), "home" );
	deepEqual( Stem("homeward"), "homeward" );
	deepEqual( Stem("homewards"), "homeward" );
	deepEqual( Stem("homicidal"), "homicid" );
	deepEqual( Stem("homily"), "homili" );
	deepEqual( Stem("homoptera"), "homoptera" );
	deepEqual( Stem("hon"), "hon" );
	deepEqual( Stem("hond"), "hond" );
	deepEqual( Stem("honds"), "hond" );
	deepEqual( Stem("honest"), "honest" );
	deepEqual( Stem("honester"), "honest" );
	deepEqual( Stem("honestest"), "honestest" );
	deepEqual( Stem("honestly"), "honest" );
	deepEqual( Stem("honesty"), "honesti" );
	deepEqual( Stem("honey"), "honey" );
	deepEqual( Stem("honeymoon"), "honeymoon" );
	deepEqual( Stem("honeysuckle"), "honeysuckl" );
	deepEqual( Stem("hong"), "hong" );
	deepEqual( Stem("honoria"), "honoria" );
	deepEqual( Stem("honour"), "honour" );
	deepEqual( Stem("honourable"), "honour" );
	deepEqual( Stem("honourably"), "honour" );
	deepEqual( Stem("honourahle"), "honourahl" );
	deepEqual( Stem("honoured"), "honour" );
	deepEqual( Stem("honouring"), "honour" );
	deepEqual( Stem("honourmg"), "honourmg" );
	deepEqual( Stem("honours"), "honour" );
	deepEqual( Stem("honysuckles"), "honysuckl" );
	deepEqual( Stem("hoo"), "hoo" );
	deepEqual( Stem("hood"), "hood" );
	deepEqual( Stem("hooded"), "hood" );
	deepEqual( Stem("hoodle"), "hoodl" );
	deepEqual( Stem("hoodwinked"), "hoodwink" );
	deepEqual( Stem("hoof"), "hoof" );
	deepEqual( Stem("hoofs"), "hoof" );
	deepEqual( Stem("hook"), "hook" );
	deepEqual( Stem("hooked"), "hook" );
	deepEqual( Stem("hooker"), "hooker" );
	deepEqual( Stem("hooking"), "hook" );
	deepEqual( Stem("hookites"), "hookit" );
	deepEqual( Stem("hooks"), "hook" );
	deepEqual( Stem("hoold"), "hoold" );
	deepEqual( Stem("hoonger"), "hoonger" );
	deepEqual( Stem("hoongry"), "hoongri" );
	deepEqual( Stem("hoop"), "hoop" );
	deepEqual( Stem("hooping"), "hoop" );
	deepEqual( Stem("hoops"), "hoop" );
	deepEqual( Stem("hoor"), "hoor" );
	deepEqual( Stem("hooray"), "hooray" );
	deepEqual( Stem("hoorly"), "hoor" );
	deepEqual( Stem("hooted"), "hoot" );
	deepEqual( Stem("hooting"), "hoot" );
	deepEqual( Stem("hootings"), "hoot" );
	deepEqual( Stem("hoots"), "hoot" );
	deepEqual( Stem("hop"), "hop" );
	deepEqual( Stem("hope"), "hope" );
	deepEqual( Stem("hoped"), "hope" );
	deepEqual( Stem("hopeful"), "hope" );
	deepEqual( Stem("hopefully"), "hope" );
	deepEqual( Stem("hopefulness"), "hope" );
	deepEqual( Stem("hopeless"), "hopeless" );
	deepEqual( Stem("hopelessly"), "hopeless" );
	deepEqual( Stem("hopelessness"), "hopeless" );
	deepEqual( Stem("hopes"), "hope" );
	deepEqual( Stem("hoping"), "hope" );
	deepEqual( Stem("hopped"), "hop" );
	deepEqual( Stem("hopping"), "hop" );
	deepEqual( Stem("hops"), "hop" );
	deepEqual( Stem("horatio"), "horatio" );
	deepEqual( Stem("horders"), "horder" );
	deepEqual( Stem("horizon"), "horizon" );
	deepEqual( Stem("horizonta"), "horizonta" );
	deepEqual( Stem("horizontal"), "horizont" );
	deepEqual( Stem("horizontally"), "horizont" );
	deepEqual( Stem("horn"), "horn" );
	deepEqual( Stem("horned"), "horn" );
	deepEqual( Stem("horner"), "horner" );
	deepEqual( Stem("hornet"), "hornet" );
	deepEqual( Stem("hornos"), "horno" );
	deepEqual( Stem("hornpipe"), "hornpip" );
	deepEqual( Stem("hornpipes"), "hornpip" );
	deepEqual( Stem("horns"), "horn" );
	deepEqual( Stem("hornsey"), "hornsey" );
	deepEqual( Stem("horny"), "horni" );
	deepEqual( Stem("horrible"), "horribl" );
	deepEqual( Stem("horribly"), "horribl" );
	deepEqual( Stem("horrid"), "horrid" );
	deepEqual( Stem("horridly"), "horrid" );
	deepEqual( Stem("horrified"), "horrifi" );
	deepEqual( Stem("horror"), "horror" );
	deepEqual( Stem("horrors"), "horror" );
	deepEqual( Stem("horse"), "hors" );
	deepEqual( Stem("horseback"), "horseback" );
	deepEqual( Stem("horsecloths"), "horsecloth" );
	deepEqual( Stem("horseflesh"), "horseflesh" );
	deepEqual( Stem("horsefly"), "horsefli" );
	deepEqual( Stem("horsehair"), "horsehair" );
	deepEqual( Stem("horseman"), "horseman" );
	deepEqual( Stem("horsemanship"), "horsemanship" );
	deepEqual( Stem("horsemen"), "horsemen" );
	deepEqual( Stem("horsepittle"), "horsepittl" );
	deepEqual( Stem("horses"), "hors" );
	deepEqual( Stem("horsewhip"), "horsewhip" );
	deepEqual( Stem("horsewhipped"), "horsewhip" );
	deepEqual( Stem("horsewhipping"), "horsewhip" );
	deepEqual( Stem("hortense"), "hortens" );
	deepEqual( Stem("hortensio"), "hortensio" );
	deepEqual( Stem("horticultural"), "horticultur" );
	deepEqual( Stem("horticulture"), "horticultur" );
	deepEqual( Stem("hose"), "hose" );
	deepEqual( Stem("hospitable"), "hospit" );
	deepEqual( Stem("hospitably"), "hospit" );
	deepEqual( Stem("hospital"), "hospit" );
	deepEqual( Stem("hospitalities"), "hospit" );
	deepEqual( Stem("hospitality"), "hospit" );
	deepEqual( Stem("hospitals"), "hospit" );
	deepEqual( Stem("hospitility"), "hospitil" );
	deepEqual( Stem("host"), "host" );
	deepEqual( Stem("hostages"), "hostag" );
	deepEqual( Stem("hoste"), "host" );
	deepEqual( Stem("hostelry"), "hostelri" );
	deepEqual( Stem("hostess"), "hostess" );
	deepEqual( Stem("hostesses"), "hostess" );
	deepEqual( Stem("hostile"), "hostil" );
	deepEqual( Stem("hostilities"), "hostil" );
	deepEqual( Stem("hostility"), "hostil" );
	deepEqual( Stem("hostlers"), "hostler" );
	deepEqual( Stem("hosts"), "host" );
	deepEqual( Stem("hot"), "hot" );
	deepEqual( Stem("hotel"), "hotel" );
	deepEqual( Stem("hotels"), "hotel" );
	deepEqual( Stem("hothouse"), "hothous" );
	deepEqual( Stem("hotly"), "hot" );
	deepEqual( Stem("hottentot"), "hottentot" );
	deepEqual( Stem("hottentots"), "hottentot" );
	deepEqual( Stem("hotter"), "hotter" );
	deepEqual( Stem("hottest"), "hottest" );
	deepEqual( Stem("hou"), "hou" );
	deepEqual( Stem("hound"), "hound" );
	deepEqual( Stem("hounded"), "hound" );
	deepEqual( Stem("hounding"), "hound" );
	deepEqual( Stem("hounds"), "hound" );
	deepEqual( Stem("hour"), "hour" );
	deepEqual( Stem("houri"), "houri" );
	deepEqual( Stem("hourly"), "hour" );
	deepEqual( Stem("hours"), "hour" );
	deepEqual( Stem("house"), "hous" );
	deepEqual( Stem("housebreaker"), "housebreak" );
	deepEqual( Stem("housebuilder"), "housebuild" );
	deepEqual( Stem("housed"), "hous" );
	deepEqual( Stem("household"), "household" );
	deepEqual( Stem("housekeeper"), "housekeep" );
	deepEqual( Stem("housekeepers"), "housekeep" );
	deepEqual( Stem("housekeeping"), "housekeep" );
	deepEqual( Stem("housemaid"), "housemaid" );
	deepEqual( Stem("housemaids"), "housemaid" );
	deepEqual( Stem("housemaker"), "housemak" );
	deepEqual( Stem("houses"), "hous" );
	deepEqual( Stem("housetops"), "housetop" );
	deepEqual( Stem("housewife"), "housewif" );
	deepEqual( Stem("housewifery"), "housewiferi" );
	deepEqual( Stem("hove"), "hove" );
	deepEqual( Stem("hovel"), "hovel" );
	deepEqual( Stem("hovels"), "hovel" );
	deepEqual( Stem("hover"), "hover" );
	deepEqual( Stem("hovered"), "hover" );
	deepEqual( Stem("hovering"), "hover" );
	deepEqual( Stem("hovers"), "hover" );
	deepEqual( Stem("how"), "how" );
	deepEqual( Stem("howard"), "howard" );
	deepEqual( Stem("howbeit"), "howbeit" );
	deepEqual( Stem("howell"), "howel" );
	deepEqual( Stem("howeve"), "howev" );
	deepEqual( Stem("however"), "howev" );
	deepEqual( Stem("howitt"), "howitt" );
	deepEqual( Stem("howl"), "howl" );
	deepEqual( Stem("howled"), "howl" );
	deepEqual( Stem("howling"), "howl" );
	deepEqual( Stem("howls"), "howl" );
	deepEqual( Stem("howsoever"), "howsoev" );
	deepEqual( Stem("huacas"), "huaca" );
	deepEqual( Stem("huachos"), "huacho" );
	deepEqual( Stem("huantamo"), "huantamo" );
	deepEqual( Stem("huapi"), "huapi" );
	deepEqual( Stem("huaraz"), "huaraz" );
	deepEqual( Stem("hubbard"), "hubbard" );
	deepEqual( Stem("hubbub"), "hubbub" );
	deepEqual( Stem("huckster"), "huckster" );
	deepEqual( Stem("huddled"), "huddl" );
	deepEqual( Stem("hue"), "hue" );
	deepEqual( Stem("huechucucuy"), "huechucucuy" );
	deepEqual( Stem("hues"), "hue" );
	deepEqual( Stem("huff"), "huff" );
	deepEqual( Stem("huffily"), "huffili" );
	deepEqual( Stem("huffy"), "huffi" );
	deepEqual( Stem("hug"), "hug" );
	deepEqual( Stem("huge"), "huge" );
	deepEqual( Stem("hugged"), "hug" );
	deepEqual( Stem("hugging"), "hug" );
	deepEqual( Stem("huggins"), "huggin" );
	deepEqual( Stem("hugh"), "hugh" );
	deepEqual( Stem("hugs"), "hug" );
	deepEqual( Stem("huitreu"), "huitreu" );
	deepEqual( Stem("hulk"), "hulk" );
	deepEqual( Stem("hullo"), "hullo" );
	deepEqual( Stem("hulloa"), "hulloa" );
	deepEqual( Stem("hum"), "hum" );
	deepEqual( Stem("humain"), "humain" );
	deepEqual( Stem("humaine"), "humain" );
	deepEqual( Stem("human"), "human" );
	deepEqual( Stem("humane"), "human" );
	deepEqual( Stem("humanely"), "human" );
	deepEqual( Stem("humanising"), "humanis" );
	deepEqual( Stem("humanity"), "human" );
	deepEqual( Stem("humanizing"), "human" );
	deepEqual( Stem("humanly"), "human" );
	deepEqual( Stem("humanum"), "humanum" );
	deepEqual( Stem("humble"), "humbl" );
	deepEqual( Stem("humbled"), "humbl" );
	deepEqual( Stem("humbleness"), "humbl" );
	deepEqual( Stem("humbler"), "humbler" );
	deepEqual( Stem("humblest"), "humblest" );
	deepEqual( Stem("humbling"), "humbl" );
	deepEqual( Stem("humbly"), "humbl" );
	deepEqual( Stem("humboldt"), "humboldt" );
	deepEqual( Stem("humbug"), "humbug" );
	deepEqual( Stem("humbugging"), "humbug" );
	deepEqual( Stem("humdrum"), "humdrum" );
	deepEqual( Stem("humid"), "humid" );
	deepEqual( Stem("humidity"), "humid" );
	deepEqual( Stem("humiliate"), "humili" );
	deepEqual( Stem("humiliated"), "humili" );
	deepEqual( Stem("humiliating"), "humili" );
	deepEqual( Stem("humiliation"), "humili" );
	deepEqual( Stem("humility"), "humil" );
	deepEqual( Stem("hummed"), "hum" );
	deepEqual( Stem("humming"), "hum" );
	deepEqual( Stem("hummingbirds"), "hummingbird" );
	deepEqual( Stem("hummocks"), "hummock" );
	deepEqual( Stem("humorous"), "humor" );
	deepEqual( Stem("humorously"), "humor" );
	deepEqual( Stem("humour"), "humour" );
	deepEqual( Stem("humoured"), "humour" );
	deepEqual( Stem("humouredly"), "humour" );
	deepEqual( Stem("humouring"), "humour" );
	deepEqual( Stem("humours"), "humour" );
	deepEqual( Stem("hump"), "hump" );
	deepEqual( Stem("humph"), "humph" );
	deepEqual( Stem("hums"), "hum" );
	deepEqual( Stem("hunchback"), "hunchback" );
	deepEqual( Stem("hundred"), "hundr" );
	deepEqual( Stem("hundreds"), "hundr" );
	deepEqual( Stem("hundredth"), "hundredth" );
	deepEqual( Stem("hundredweight"), "hundredweight" );
	deepEqual( Stem("hung"), "hung" );
	deepEqual( Stem("hunger"), "hunger" );
	deepEqual( Stem("hungering"), "hunger" );
	deepEqual( Stem("hungry"), "hungri" );
	deepEqual( Stem("hunks"), "hunk" );
	deepEqual( Stem("hunky"), "hunki" );
	deepEqual( Stem("hunt"), "hunt" );
	deepEqual( Stem("hunted"), "hunt" );
	deepEqual( Stem("hunter"), "hunter" );
	deepEqual( Stem("hunters"), "hunter" );
	deepEqual( Stem("hunting"), "hunt" );
	deepEqual( Stem("hunts"), "hunt" );
	deepEqual( Stem("huntsman"), "huntsman" );
	deepEqual( Stem("huntsmen"), "huntsmen" );
	deepEqual( Stem("hurled"), "hurl" );
	deepEqual( Stem("hurly"), "hur" );
	deepEqual( Stem("hurrah"), "hurrah" );
	deepEqual( Stem("hurrahed"), "hurrah" );
	deepEqual( Stem("hurrahs"), "hurrah" );
	deepEqual( Stem("hurricane"), "hurrican" );
	deepEqual( Stem("hurried"), "hurri" );
	deepEqual( Stem("hurriedly"), "hurri" );
	deepEqual( Stem("hurries"), "hurri" );
	deepEqual( Stem("hurry"), "hurri" );
	deepEqual( Stem("hurrying"), "hurri" );
	deepEqual( Stem("hurt"), "hurt" );
	deepEqual( Stem("hurtado"), "hurtado" );
	deepEqual( Stem("hurting"), "hurt" );
	deepEqual( Stem("hurts"), "hurt" );
	deepEqual( Stem("husband"), "husband" );
	deepEqual( Stem("husbanded"), "husband" );
	deepEqual( Stem("husbandman"), "husbandman" );
	deepEqual( Stem("husbands"), "husband" );
	deepEqual( Stem("hush"), "hush" );
	deepEqual( Stem("hushed"), "hush" );
	deepEqual( Stem("hushing"), "hush" );
	deepEqual( Stem("husk"), "husk" );
	deepEqual( Stem("huskily"), "huskili" );
	deepEqual( Stem("huskiness"), "huski" );
	deepEqual( Stem("husky"), "huski" );
	deepEqual( Stem("hussar"), "hussar" );
	deepEqual( Stem("hussy"), "hussi" );
	deepEqual( Stem("hustings"), "hust" );
	deepEqual( Stem("hustle"), "hustl" );
	deepEqual( Stem("hustled"), "hustl" );
	deepEqual( Stem("hustling"), "hustl" );
	deepEqual( Stem("hut"), "hut" );
	deepEqual( Stem("hutch"), "hutch" );
	deepEqual( Stem("huts"), "hut" );
	deepEqual( Stem("hutton"), "hutton" );
	deepEqual( Stem("hy"), "hy" );
	deepEqual( Stem("hyacinth"), "hyacinth" );
	deepEqual( Stem("hyacinths"), "hyacinth" );
	deepEqual( Stem("hyaena"), "hyaena" );
	deepEqual( Stem("hybernate"), "hybern" );
	deepEqual( Stem("hybernating"), "hybern" );
	deepEqual( Stem("hybernation"), "hybern" );
	deepEqual( Stem("hybrid"), "hybrid" );
	deepEqual( Stem("hybrida"), "hybrida" );
	deepEqual( Stem("hyde"), "hyde" );
	deepEqual( Stem("hydra"), "hydra" );
	deepEqual( Stem("hydraulic"), "hydraul" );
	deepEqual( Stem("hydrobius"), "hydrobius" );
	deepEqual( Stem("hydrochaerus"), "hydrochaerus" );
	deepEqual( Stem("hydrogen"), "hydrogen" );
	deepEqual( Stem("hydrographer"), "hydrograph" );
	deepEqual( Stem("hydrophilidae"), "hydrophilida" );
	deepEqual( Stem("hydrophilus"), "hydrophilus" );
	deepEqual( Stem("hydrophobia"), "hydrophobia" );
	deepEqual( Stem("hydroporus"), "hydroporus" );
	deepEqual( Stem("hygrometer"), "hygromet" );
	deepEqual( Stem("hyla"), "hyla" );
	deepEqual( Stem("hymenophallus"), "hymenophallus" );
	deepEqual( Stem("hymenoptera"), "hymenoptera" );
	deepEqual( Stem("hymenopterous"), "hymenopter" );
	deepEqual( Stem("hymn"), "hymn" );
	deepEqual( Stem("hymns"), "hymn" );
	deepEqual( Stem("hyperbolical"), "hyperbol" );
	deepEqual( Stem("hyperion"), "hyperion" );
	deepEqual( Stem("hypochondria"), "hypochondria" );
	deepEqual( Stem("hypochondriac"), "hypochondriac" );
	deepEqual( Stem("hypochondriacal"), "hypochondriac" );
	deepEqual( Stem("hypocrisy"), "hypocrisi" );
	deepEqual( Stem("hypocrite"), "hypocrit" );
	deepEqual( Stem("hypocritical"), "hypocrit" );
	deepEqual( Stem("hypocritically"), "hypocrit" );
	deepEqual( Stem("hypotheses"), "hypothes" );
	deepEqual( Stem("hypothesis"), "hypothesi" );
	deepEqual( Stem("hypothetical"), "hypothet" );
	deepEqual( Stem("hyseters"), "hyset" );
	deepEqual( Stem("hysteric"), "hyster" );
	deepEqual( Stem("hysterical"), "hyster" );
	deepEqual( Stem("hysterically"), "hyster" );
	deepEqual( Stem("hysterics"), "hyster" );
	deepEqual( Stem("i"), "i" );
	deepEqual( Stem("iagoensis"), "iagoensi" );
	deepEqual( Stem("ibis"), "ibi" );
	deepEqual( Stem("ica"), "ica" );
	deepEqual( Stem("ice"), "ice" );
	deepEqual( Stem("iceberg"), "iceberg" );
	deepEqual( Stem("icebergs"), "iceberg" );
	deepEqual( Stem("iced"), "ice" );
	deepEqual( Stem("iceland"), "iceland" );
	deepEqual( Stem("ices"), "ice" );
	deepEqual( Stem("ich"), "ich" );
	deepEqual( Stem("icterus"), "icterus" );
	deepEqual( Stem("icy"), "ici" );
	deepEqual( Stem("ide"), "ide" );
	deepEqual( Stem("idea"), "idea" );
	deepEqual( Stem("ideal"), "ideal" );
	deepEqual( Stem("idealism"), "ideal" );
	deepEqual( Stem("idealist"), "idealist" );
	deepEqual( Stem("ideality"), "ideal" );
	deepEqual( Stem("ideals"), "ideal" );
	deepEqual( Stem("ideas"), "idea" );
	deepEqual( Stem("identical"), "ident" );
	deepEqual( Stem("identically"), "ident" );
	deepEqual( Stem("identification"), "identif" );
	deepEqual( Stem("identified"), "identifi" );
	deepEqual( Stem("identifles"), "identifl" );
	deepEqual( Stem("identifying"), "identifi" );
	deepEqual( Stem("identity"), "ident" );
	deepEqual( Stem("idiocy"), "idioci" );
	deepEqual( Stem("idiosyncrasies"), "idiosyncrasi" );
	deepEqual( Stem("idiosyncrasy"), "idiosyncrasi" );
	deepEqual( Stem("idiot"), "idiot" );
	deepEqual( Stem("idiotcy"), "idiotci" );
	deepEqual( Stem("idiotic"), "idiot" );
	deepEqual( Stem("idiotically"), "idiot" );
	deepEqual( Stem("idiots"), "idiot" );
	deepEqual( Stem("idle"), "idl" );
	deepEqual( Stem("idleness"), "idl" );
	deepEqual( Stem("idlers"), "idler" );
	deepEqual( Stem("idlest"), "idlest" );
	deepEqual( Stem("idling"), "idl" );
	deepEqual( Stem("idly"), "idl" );
	deepEqual( Stem("idol"), "idol" );
	deepEqual( Stem("idolatrous"), "idolatr" );
	deepEqual( Stem("idolatry"), "idolatri" );
	deepEqual( Stem("idolized"), "idol" );
	deepEqual( Stem("ie"), "ie" );
	deepEqual( Stem("ied"), "ie" );
	deepEqual( Stem("if"), "if" );
	deepEqual( Stem("ies"), "ie" );
	deepEqual( Stem("ight"), "ight" );
	deepEqual( Stem("ighway"), "ighway" );
	deepEqual( Stem("igneous"), "igneous" );
	deepEqual( Stem("ignited"), "ignit" );
	deepEqual( Stem("igniting"), "ignit" );
	deepEqual( Stem("ignoble"), "ignobl" );
	deepEqual( Stem("ignominious"), "ignomini" );
	deepEqual( Stem("ignominy"), "ignomini" );
	deepEqual( Stem("ignoramuses"), "ignoramus" );
	deepEqual( Stem("ignorance"), "ignor" );
	deepEqual( Stem("ignorant"), "ignor" );
	deepEqual( Stem("ignorantly"), "ignor" );
	deepEqual( Stem("ignore"), "ignor" );
	deepEqual( Stem("ignored"), "ignor" );
	deepEqual( Stem("ignoring"), "ignor" );
	deepEqual( Stem("iguana"), "iguana" );
	deepEqual( Stem("ii"), "ii" );
	deepEqual( Stem("iii"), "iii" );
	deepEqual( Stem("ikon"), "ikon" );
	deepEqual( Stem("ikons"), "ikon" );
	deepEqual( Stem("il"), "il" );
	deepEqual( Stem("iles"), "ile" );
	deepEqual( Stem("ill"), "ill" );
	deepEqual( Stem("illapel"), "illapel" );
	deepEqual( Stem("illegible"), "illeg" );
	deepEqual( Stem("illegitimate"), "illegitim" );
	deepEqual( Stem("illiberal"), "illiber" );
	deepEqual( Stem("illig"), "illig" );
	deepEqual( Stem("illimitable"), "illimit" );
	deepEqual( Stem("illiterate"), "illiter" );
	deepEqual( Stem("illness"), "ill" );
	deepEqual( Stem("illnesses"), "ill" );
	deepEqual( Stem("illuminate"), "illumin" );
	deepEqual( Stem("illuminated"), "illumin" );
	deepEqual( Stem("illuminating"), "illumin" );
	deepEqual( Stem("illumined"), "illumin" );
	deepEqual( Stem("illusion"), "illus" );
	deepEqual( Stem("illusions"), "illus" );
	deepEqual( Stem("illustrated"), "illustr" );
	deepEqual( Stem("illustrates"), "illustr" );
	deepEqual( Stem("illustrating"), "illustr" );
	deepEqual( Stem("illustration"), "illustr" );
	deepEqual( Stem("illustrations"), "illustr" );
	deepEqual( Stem("illustrative"), "illustr" );
	deepEqual( Stem("illustrious"), "illustri" );
	deepEqual( Stem("ils"), "il" );
	deepEqual( Stem("ilya"), "ilya" );
	deepEqual( Stem("image"), "imag" );
	deepEqual( Stem("images"), "imag" );
	deepEqual( Stem("imaginable"), "imagin" );
	deepEqual( Stem("imaginary"), "imaginari" );
	deepEqual( Stem("imagination"), "imagin" );
	deepEqual( Stem("imaginative"), "imagin" );
	deepEqual( Stem("imagine"), "imagin" );
	deepEqual( Stem("imagined"), "imagin" );
	deepEqual( Stem("imagines"), "imagin" );
	deepEqual( Stem("imagining"), "imagin" );
	deepEqual( Stem("imaginings"), "imagin" );
	deepEqual( Stem("imbecile"), "imbecil" );
	deepEqual( Stem("imbecility"), "imbecil" );
	deepEqual( Stem("imbedded"), "imbed" );
	deepEqual( Stem("imbibed"), "imbib" );
	deepEqual( Stem("imbue"), "imbu" );
	deepEqual( Stem("imbued"), "imbu" );
	deepEqual( Stem("imeantersay"), "imeantersay" );
	deepEqual( Stem("imitate"), "imit" );
	deepEqual( Stem("imitated"), "imit" );
	deepEqual( Stem("imitating"), "imit" );
	deepEqual( Stem("imitation"), "imit" );
	deepEqual( Stem("imitations"), "imit" );
	deepEqual( Stem("imitative"), "imit" );
	deepEqual( Stem("imitator"), "imit" );
	deepEqual( Stem("immaculate"), "immacul" );
	deepEqual( Stem("immaterial"), "immateri" );
	deepEqual( Stem("immature"), "immatur" );
	deepEqual( Stem("immeasurable"), "immeasur" );
	deepEqual( Stem("immeasurably"), "immeasur" );
	deepEqual( Stem("immediate"), "immedi" );
	deepEqual( Stem("immediately"), "immedi" );
	deepEqual( Stem("immemorial"), "immemori" );
	deepEqual( Stem("immense"), "immens" );
	deepEqual( Stem("immensely"), "immens" );
	deepEqual( Stem("immensity"), "immens" );
	deepEqual( Stem("immensus"), "immensus" );
	deepEqual( Stem("immersed"), "immers" );
	deepEqual( Stem("immersion"), "immers" );
	deepEqual( Stem("immigrants"), "immigr" );
	deepEqual( Stem("imminent"), "immin" );
	deepEqual( Stem("immoderate"), "immoder" );
	deepEqual( Stem("immolate"), "immol" );
	deepEqual( Stem("immolation"), "immol" );
	deepEqual( Stem("immoral"), "immor" );
	deepEqual( Stem("immorality"), "immor" );
	deepEqual( Stem("immortal"), "immort" );
	deepEqual( Stem("immortality"), "immort" );
	deepEqual( Stem("immovability"), "immov" );
	deepEqual( Stem("immovable"), "immov" );
	deepEqual( Stem("immovably"), "immov" );
	deepEqual( Stem("immoveable"), "immov" );
	deepEqual( Stem("immured"), "immur" );
	deepEqual( Stem("immutability"), "immut" );
	deepEqual( Stem("immutable"), "immut" );
	deepEqual( Stem("imp"), "imp" );
	deepEqual( Stem("impair"), "impair" );
	deepEqual( Stem("impaired"), "impair" );
	deepEqual( Stem("impairing"), "impair" );
	deepEqual( Stem("impaling"), "impal" );
	deepEqual( Stem("impalpable"), "impalp" );
	deepEqual( Stem("impalpably"), "impalp" );
	deepEqual( Stem("impanelled"), "impanel" );
	deepEqual( Stem("impart"), "impart" );
	deepEqual( Stem("imparted"), "impart" );
	deepEqual( Stem("impartial"), "imparti" );
	deepEqual( Stem("impartiality"), "imparti" );
	deepEqual( Stem("impartially"), "imparti" );
	deepEqual( Stem("imparting"), "impart" );
	deepEqual( Stem("imparts"), "impart" );
	deepEqual( Stem("impassable"), "impass" );
	deepEqual( Stem("impassibility"), "impass" );
	deepEqual( Stem("impassible"), "impass" );
	deepEqual( Stem("impassioned"), "impass" );
	deepEqual( Stem("impassive"), "impass" );
	deepEqual( Stem("impassiveness"), "impass" );
	deepEqual( Stem("impatience"), "impati" );
	deepEqual( Stem("impatient"), "impati" );
	deepEqual( Stem("impatiently"), "impati" );
	deepEqual( Stem("impeach"), "impeach" );
	deepEqual( Stem("impeachment"), "impeach" );
	deepEqual( Stem("impecuniosity"), "impecunios" );
	deepEqual( Stem("impecunious"), "impecuni" );
	deepEqual( Stem("impede"), "imped" );
	deepEqual( Stem("impeded"), "imped" );
	deepEqual( Stem("impediment"), "impedi" );
	deepEqual( Stem("impediments"), "impedi" );
	deepEqual( Stem("impel"), "impel" );
	deepEqual( Stem("impelled"), "impel" );
	deepEqual( Stem("impels"), "impel" );
	deepEqual( Stem("impend"), "impend" );
	deepEqual( Stem("impending"), "impend" );
	deepEqual( Stem("impenetrabilities"), "impenetr" );
	deepEqual( Stem("impenetrable"), "impenetr" );
	deepEqual( Stem("imperative"), "imper" );
	deepEqual( Stem("imperatively"), "imper" );
	deepEqual( Stem("imperceptibly"), "impercept" );
	deepEqual( Stem("imperfect"), "imperfect" );
	deepEqual( Stem("imperfection"), "imperfect" );
	deepEqual( Stem("imperfectly"), "imperfect" );
	deepEqual( Stem("imperial"), "imperi" );
	deepEqual( Stem("imperilled"), "imperil" );
	deepEqual( Stem("imperils"), "imperil" );
	deepEqual( Stem("imperious"), "imperi" );
	deepEqual( Stem("imperiously"), "imperi" );
	deepEqual( Stem("impersonal"), "imperson" );
	deepEqual( Stem("impertinence"), "impertin" );
	deepEqual( Stem("impertinent"), "impertin" );
	deepEqual( Stem("impertinently"), "impertin" );
	deepEqual( Stem("imperturbability"), "imperturb" );
	deepEqual( Stem("imperturbable"), "imperturb" );
	deepEqual( Stem("imperturbably"), "imperturb" );
	deepEqual( Stem("impervious"), "impervi" );
	deepEqual( Stem("impetuosity"), "impetuos" );
	deepEqual( Stem("impetuous"), "impetu" );
	deepEqual( Stem("impetuously"), "impetu" );
	deepEqual( Stem("impiety"), "impieti" );
	deepEqual( Stem("impious"), "impious" );
	deepEqual( Stem("implacable"), "implac" );
	deepEqual( Stem("implacably"), "implac" );
	deepEqual( Stem("implanted"), "implant" );
	deepEqual( Stem("implement"), "implement" );
	deepEqual( Stem("implements"), "implement" );
	deepEqual( Stem("implicate"), "implic" );
	deepEqual( Stem("implicated"), "implic" );
	deepEqual( Stem("implication"), "implic" );
	deepEqual( Stem("implicit"), "implicit" );
	deepEqual( Stem("implicitly"), "implicit" );
	deepEqual( Stem("implied"), "impli" );
	deepEqual( Stem("implies"), "impli" );
	deepEqual( Stem("implore"), "implor" );
	deepEqual( Stem("implored"), "implor" );
	deepEqual( Stem("imploring"), "implor" );
	deepEqual( Stem("imploringly"), "implor" );
	deepEqual( Stem("imply"), "impli" );
	deepEqual( Stem("implying"), "impli" );
	deepEqual( Stem("impolitic"), "impolit" );
	deepEqual( Stem("import"), "import" );
	deepEqual( Stem("importance"), "import" );
	deepEqual( Stem("important"), "import" );
	deepEqual( Stem("importation"), "import" );
	deepEqual( Stem("imported"), "import" );
	deepEqual( Stem("importer"), "import" );
	deepEqual( Stem("importing"), "import" );
	deepEqual( Stem("importunate"), "importun" );
	deepEqual( Stem("importunity"), "importun" );
	deepEqual( Stem("impose"), "impos" );
	deepEqual( Stem("imposed"), "impos" );
	deepEqual( Stem("imposing"), "impos" );
	deepEqual( Stem("imposition"), "imposit" );
	deepEqual( Stem("impossibilities"), "imposs" );
	deepEqual( Stem("impossibility"), "imposs" );
	deepEqual( Stem("impossible"), "imposs" );
	deepEqual( Stem("imposter"), "impost" );
	deepEqual( Stem("impostors"), "impostor" );
	deepEqual( Stem("imposture"), "impostur" );
	deepEqual( Stem("impostures"), "impostur" );
	deepEqual( Stem("impotence"), "impot" );
	deepEqual( Stem("impotent"), "impot" );
	deepEqual( Stem("impoverished"), "impoverish" );
	deepEqual( Stem("impracticability"), "impractic" );
	deepEqual( Stem("impracticable"), "impractic" );
	deepEqual( Stem("impracticality"), "impract" );
	deepEqual( Stem("imprecation"), "imprec" );
	deepEqual( Stem("imprecations"), "imprec" );
	deepEqual( Stem("impregnability"), "impregn" );
	deepEqual( Stem("impregnable"), "impregn" );
	deepEqual( Stem("impregnated"), "impregn" );
	deepEqual( Stem("impress"), "impress" );
	deepEqual( Stem("impressed"), "impress" );
	deepEqual( Stem("impresses"), "impress" );
	deepEqual( Stem("impressible"), "impress" );
	deepEqual( Stem("impressing"), "impress" );
	deepEqual( Stem("impression"), "impress" );
	deepEqual( Stem("impressionable"), "impression" );
	deepEqual( Stem("impressions"), "impress" );
	deepEqual( Stem("impressive"), "impress" );
	deepEqual( Stem("impressively"), "impress" );
	deepEqual( Stem("imprinted"), "imprint" );
	deepEqual( Stem("imprinting"), "imprint" );
	deepEqual( Stem("imprisoned"), "imprison" );
	deepEqual( Stem("imprisonment"), "imprison" );
	deepEqual( Stem("improbability"), "improb" );
	deepEqual( Stem("improbable"), "improb" );
	deepEqual( Stem("improbably"), "improb" );
	deepEqual( Stem("impromptu"), "impromptu" );
	deepEqual( Stem("improper"), "improp" );
	deepEqual( Stem("improperly"), "improp" );
	deepEqual( Stem("impropriety"), "improprieti" );
	deepEqual( Stem("improve"), "improv" );
	deepEqual( Stem("improved"), "improv" );
	deepEqual( Stem("improvement"), "improv" );
	deepEqual( Stem("improvements"), "improv" );
	deepEqual( Stem("improves"), "improv" );
	deepEqual( Stem("improvident"), "improvid" );
	deepEqual( Stem("improving"), "improv" );
	deepEqual( Stem("improvisatrice"), "improvisatric" );
	deepEqual( Stem("imprudence"), "imprud" );
	deepEqual( Stem("imprudent"), "imprud" );
	deepEqual( Stem("imprudently"), "imprud" );
	deepEqual( Stem("imps"), "imp" );
	deepEqual( Stem("impudence"), "impud" );
	deepEqual( Stem("impudent"), "impud" );
	deepEqual( Stem("impudently"), "impud" );
	deepEqual( Stem("impugned"), "impugn" );
	deepEqual( Stem("impulse"), "impuls" );
	deepEqual( Stem("impulses"), "impuls" );
	deepEqual( Stem("impulsive"), "impuls" );
	deepEqual( Stem("impulsively"), "impuls" );
	deepEqual( Stem("impulsiveness"), "impuls" );
	deepEqual( Stem("impunity"), "impun" );
	deepEqual( Stem("impure"), "impur" );
	deepEqual( Stem("impurity"), "impur" );
	deepEqual( Stem("imputation"), "imput" );
	deepEqual( Stem("impute"), "imput" );
	deepEqual( Stem("imputed"), "imput" );
	deepEqual( Stem("imputing"), "imput" );
	deepEqual( Stem("imself"), "imself" );
	deepEqual( Stem("in"), "in" );
	deepEqual( Stem("inability"), "inabl" );
	deepEqual( Stem("inaccessible"), "inaccess" );
	deepEqual( Stem("inaccurate"), "inaccur" );
	deepEqual( Stem("inaccurately"), "inaccur" );
	deepEqual( Stem("inaction"), "inact" );
	deepEqual( Stem("inactive"), "inact" );
	deepEqual( Stem("inactivity"), "inact" );
	deepEqual( Stem("inadequate"), "inadequ" );
	deepEqual( Stem("inadmissible"), "inadmiss" );
	deepEqual( Stem("inadvertently"), "inadvert" );
	deepEqual( Stem("inanimate"), "inanim" );
	deepEqual( Stem("inanities"), "inan" );
	deepEqual( Stem("inanity"), "inan" );
	deepEqual( Stem("inappeasable"), "inappeas" );
	deepEqual( Stem("inapplicable"), "inapplic" );
	deepEqual( Stem("inappreciable"), "inappreci" );
	deepEqual( Stem("inappropriate"), "inappropri" );
	deepEqual( Stem("inappropriately"), "inappropri" );
	deepEqual( Stem("inaptitude"), "inaptitud" );
	deepEqual( Stem("inaptly"), "inapt" );
	deepEqual( Stem("inarticulate"), "inarticul" );
	deepEqual( Stem("inarticulately"), "inarticul" );
	deepEqual( Stem("inartistic"), "inartist" );
	deepEqual( Stem("inasmuch"), "inasmuch" );
	deepEqual( Stem("inattention"), "inattent" );
	deepEqual( Stem("inattentive"), "inattent" );
	deepEqual( Stem("inaudible"), "inaud" );
	deepEqual( Stem("inaudibly"), "inaud" );
	deepEqual( Stem("inaugurate"), "inaugur" );
	deepEqual( Stem("inaugurated"), "inaugur" );
	deepEqual( Stem("inaugurates"), "inaugur" );
	deepEqual( Stem("inauspicious"), "inauspici" );
	deepEqual( Stem("inborn"), "inborn" );
	deepEqual( Stem("inbred"), "inbr" );
	deepEqual( Stem("incalculable"), "incalcul" );
	deepEqual( Stem("incalculably"), "incalcul" );
	deepEqual( Stem("incapable"), "incap" );
	deepEqual( Stem("incapacitated"), "incapacit" );
	deepEqual( Stem("incapacity"), "incapac" );
	deepEqual( Stem("incarnation"), "incarn" );
	deepEqual( Stem("incas"), "inca" );
	deepEqual( Stem("incased"), "incas" );
	deepEqual( Stem("incautious"), "incauti" );
	deepEqual( Stem("incautiously"), "incauti" );
	deepEqual( Stem("incense"), "incens" );
	deepEqual( Stem("incensed"), "incens" );
	deepEqual( Stem("incentive"), "incent" );
	deepEqual( Stem("incessant"), "incess" );
	deepEqual( Stem("incessantly"), "incess" );
	deepEqual( Stem("inch"), "inch" );
	deepEqual( Stem("inches"), "inch" );
	deepEqual( Stem("incident"), "incid" );
	deepEqual( Stem("incidental"), "incident" );
	deepEqual( Stem("incidentally"), "incident" );
	deepEqual( Stem("incidents"), "incid" );
	deepEqual( Stem("incipient"), "incipi" );
	deepEqual( Stem("incisions"), "incis" );
	deepEqual( Stem("incisive"), "incis" );
	deepEqual( Stem("incited"), "incit" );
	deepEqual( Stem("incitement"), "incit" );
	deepEqual( Stem("incivility"), "incivil" );
	deepEqual( Stem("inclemency"), "inclem" );
	deepEqual( Stem("inclement"), "inclement" );
	deepEqual( Stem("inclination"), "inclin" );
	deepEqual( Stem("inclinations"), "inclin" );
	deepEqual( Stem("incline"), "inclin" );
	deepEqual( Stem("inclined"), "inclin" );
	deepEqual( Stem("inclines"), "inclin" );
	deepEqual( Stem("inclining"), "inclin" );
	deepEqual( Stem("inclosure"), "inclosur" );
	deepEqual( Stem("include"), "includ" );
	deepEqual( Stem("included"), "includ" );
	deepEqual( Stem("includes"), "includ" );
	deepEqual( Stem("including"), "includ" );
	deepEqual( Stem("inclusive"), "inclus" );
	deepEqual( Stem("incog"), "incog" );
	deepEqual( Stem("incognita"), "incognita" );
	deepEqual( Stem("incognito"), "incognito" );
	deepEqual( Stem("incoherence"), "incoher" );
	deepEqual( Stem("incoherent"), "incoher" );
	deepEqual( Stem("incoherently"), "incoher" );
	deepEqual( Stem("income"), "incom" );
	deepEqual( Stem("incoming"), "incom" );
	deepEqual( Stem("incommoded"), "incommod" );
	deepEqual( Stem("incomparably"), "incompar" );
	deepEqual( Stem("incompatibility"), "incompat" );
	deepEqual( Stem("incompatible"), "incompat" );
	deepEqual( Stem("incomplete"), "incomplet" );
	deepEqual( Stem("incomprehensible"), "incomprehens" );
	deepEqual( Stem("inconceivable"), "inconceiv" );
	deepEqual( Stem("incongruity"), "incongru" );
	deepEqual( Stem("incongruous"), "incongru" );
	deepEqual( Stem("inconsiderable"), "inconsider" );
	deepEqual( Stem("inconsiderate"), "inconsider" );
	deepEqual( Stem("inconsiderately"), "inconsider" );
	deepEqual( Stem("inconsiderateness"), "inconsider" );
	deepEqual( Stem("inconsistencies"), "inconsist" );
	deepEqual( Stem("inconsistency"), "inconsist" );
	deepEqual( Stem("inconsistent"), "inconsist" );
	deepEqual( Stem("inconsistently"), "inconsist" );
	deepEqual( Stem("inconsolable"), "inconsol" );
	deepEqual( Stem("inconstancy"), "inconst" );
	deepEqual( Stem("inconstant"), "inconst" );
	deepEqual( Stem("incontestable"), "incontest" );
	deepEqual( Stem("incontestably"), "incontest" );
	deepEqual( Stem("inconvenience"), "inconveni" );
	deepEqual( Stem("inconvenienced"), "inconvenienc" );
	deepEqual( Stem("inconveniences"), "inconveni" );
	deepEqual( Stem("inconveniency"), "inconveni" );
	deepEqual( Stem("inconvenient"), "inconveni" );
	deepEqual( Stem("inconveniently"), "inconveni" );
	deepEqual( Stem("incorrect"), "incorrect" );
	deepEqual( Stem("incorrectly"), "incorrect" );
	deepEqual( Stem("incorrigible"), "incorrig" );
	deepEqual( Stem("incorruptible"), "incorrupt" );
	deepEqual( Stem("increase"), "increas" );
	deepEqual( Stem("increased"), "increas" );
	deepEqual( Stem("increases"), "increas" );
	deepEqual( Stem("increasing"), "increas" );
	deepEqual( Stem("increasingly"), "increas" );
	deepEqual( Stem("incredible"), "incred" );
	deepEqual( Stem("incredibly"), "incred" );
	deepEqual( Stem("incredulity"), "incredul" );
	deepEqual( Stem("incredulous"), "incredul" );
	deepEqual( Stem("incredulously"), "incredul" );
	deepEqual( Stem("incrustation"), "incrust" );
	deepEqual( Stem("incrustations"), "incrust" );
	deepEqual( Stem("incrusted"), "incrust" );
	deepEqual( Stem("incubation"), "incub" );
	deepEqual( Stem("incubus"), "incubus" );
	deepEqual( Stem("inculcate"), "inculc" );
	deepEqual( Stem("inculcates"), "inculc" );
	deepEqual( Stem("inculcating"), "inculc" );
	deepEqual( Stem("incumbent"), "incumb" );
	deepEqual( Stem("incumbrance"), "incumbr" );
	deepEqual( Stem("incumbrances"), "incumbr" );
	deepEqual( Stem("incur"), "incur" );
	deepEqual( Stem("incurious"), "incuri" );
	deepEqual( Stem("incurred"), "incur" );
	deepEqual( Stem("incursion"), "incurs" );
	deepEqual( Stem("indebted"), "indebt" );
	deepEqual( Stem("indecency"), "indec" );
	deepEqual( Stem("indecent"), "indec" );
	deepEqual( Stem("indecently"), "indec" );
	deepEqual( Stem("indecision"), "indecis" );
	deepEqual( Stem("indecorous"), "indecor" );
	deepEqual( Stem("indecorously"), "indecor" );
	deepEqual( Stem("indeed"), "inde" );
	deepEqual( Stem("indefatigable"), "indefatig" );
	deepEqual( Stem("indefatigably"), "indefatig" );
	deepEqual( Stem("indefinable"), "indefin" );
	deepEqual( Stem("indefinably"), "indefin" );
	deepEqual( Stem("indefinite"), "indefinit" );
	deepEqual( Stem("indefinitely"), "indefinit" );
	deepEqual( Stem("indelible"), "indel" );
	deepEqual( Stem("indelibly"), "indel" );
	deepEqual( Stem("indelicate"), "indel" );
	deepEqual( Stem("indented"), "indent" );
	deepEqual( Stem("indenting"), "indent" );
	deepEqual( Stem("indenture"), "indentur" );
	deepEqual( Stem("independence"), "independ" );
	deepEqual( Stem("independent"), "independ" );
	deepEqual( Stem("independently"), "independ" );
	deepEqual( Stem("independeuce"), "independeuc" );
	deepEqual( Stem("inder"), "inder" );
	deepEqual( Stem("indescribable"), "indescrib" );
	deepEqual( Stem("indescribably"), "indescrib" );
	deepEqual( Stem("indestructible"), "indestruct" );
	deepEqual( Stem("india"), "india" );
	deepEqual( Stem("indiaman"), "indiaman" );
	deepEqual( Stem("indian"), "indian" );
	deepEqual( Stem("indians"), "indian" );
	deepEqual( Stem("indica"), "indica" );
	deepEqual( Stem("indicate"), "indic" );
	deepEqual( Stem("indicated"), "indic" );
	deepEqual( Stem("indicates"), "indic" );
	deepEqual( Stem("indicating"), "indic" );
	deepEqual( Stem("indication"), "indic" );
	deepEqual( Stem("indications"), "indic" );
	deepEqual( Stem("indicative"), "indic" );
	deepEqual( Stem("indies"), "indi" );
	deepEqual( Stem("indifference"), "indiffer" );
	deepEqual( Stem("indifferent"), "indiffer" );
	deepEqual( Stem("indifferently"), "indiffer" );
	deepEqual( Stem("indigenous"), "indigen" );
	deepEqual( Stem("indigent"), "indig" );
	deepEqual( Stem("indigestion"), "indigest" );
	deepEqual( Stem("indignant"), "indign" );
	deepEqual( Stem("indignantly"), "indign" );
	deepEqual( Stem("indignation"), "indign" );
	deepEqual( Stem("indignities"), "indign" );
	deepEqual( Stem("indignity"), "indign" );
	deepEqual( Stem("indigo"), "indigo" );
	deepEqual( Stem("indios"), "indio" );
	deepEqual( Stem("indirect"), "indirect" );
	deepEqual( Stem("indirectly"), "indirect" );
	deepEqual( Stem("indiscreet"), "indiscreet" );
	deepEqual( Stem("indiscreetness"), "indiscreet" );
	deepEqual( Stem("indiscretion"), "indiscret" );
	deepEqual( Stem("indiscretions"), "indiscret" );
	deepEqual( Stem("indiscriminate"), "indiscrimin" );
	deepEqual( Stem("indiscriminately"), "indiscrimin" );
	deepEqual( Stem("indiscriminating"), "indiscrimin" );
	deepEqual( Stem("indispensable"), "indispens" );
	deepEqual( Stem("indispensably"), "indispens" );
	deepEqual( Stem("indisposed"), "indispos" );
	deepEqual( Stem("indisposition"), "indisposit" );
	deepEqual( Stem("indisputably"), "indisput" );
	deepEqual( Stem("indistinct"), "indistinct" );
	deepEqual( Stem("indistinctly"), "indistinct" );
	deepEqual( Stem("indistinctness"), "indistinct" );
	deepEqual( Stem("indistinguishable"), "indistinguish" );
	deepEqual( Stem("indited"), "indit" );
	deepEqual( Stem("individua"), "individua" );
	deepEqual( Stem("individual"), "individu" );
	deepEqual( Stem("individualism"), "individu" );
	deepEqual( Stem("individuality"), "individu" );
	deepEqual( Stem("individually"), "individu" );
	deepEqual( Stem("individuals"), "individu" );
	deepEqual( Stem("indo"), "indo" );
	deepEqual( Stem("indolence"), "indol" );
	deepEqual( Stem("indolent"), "indol" );
	deepEqual( Stem("indolently"), "indol" );
	deepEqual( Stem("indomitable"), "indomit" );
	deepEqual( Stem("indoor"), "indoor" );
	deepEqual( Stem("indoors"), "indoor" );
	deepEqual( Stem("indubitable"), "indubit" );
	deepEqual( Stem("indubitably"), "indubit" );
	deepEqual( Stem("induce"), "induc" );
	deepEqual( Stem("induced"), "induc" );
	deepEqual( Stem("inducement"), "induc" );
	deepEqual( Stem("inducements"), "induc" );
	deepEqual( Stem("induces"), "induc" );
	deepEqual( Stem("inducing"), "induc" );
	deepEqual( Stem("inducted"), "induct" );
	deepEqual( Stem("inducts"), "induct" );
	deepEqual( Stem("indulge"), "indulg" );
	deepEqual( Stem("indulged"), "indulg" );
	deepEqual( Stem("indulgence"), "indulg" );
	deepEqual( Stem("indulgences"), "indulg" );
	deepEqual( Stem("indulgent"), "indulg" );
	deepEqual( Stem("indulging"), "indulg" );
	deepEqual( Stem("indurated"), "indur" );
	deepEqual( Stem("industrie"), "industri" );
	deepEqual( Stem("industrious"), "industri" );
	deepEqual( Stem("industriously"), "industri" );
	deepEqual( Stem("industry"), "industri" );
	deepEqual( Stem("inebriated"), "inebri" );
	deepEqual( Stem("inebriety"), "inebrieti" );
	deepEqual( Stem("ineffable"), "ineff" );
	deepEqual( Stem("ineffective"), "ineffect" );
	deepEqual( Stem("ineffectiveness"), "ineffect" );
	deepEqual( Stem("ineffectual"), "ineffectu" );
	deepEqual( Stem("ineffectually"), "ineffectu" );
	deepEqual( Stem("inefficacious"), "inefficaci" );
	deepEqual( Stem("inefficacy"), "inefficaci" );
	deepEqual( Stem("inefficiency"), "ineffici" );
	deepEqual( Stem("inefficient"), "ineffici" );
	deepEqual( Stem("inelegance"), "ineleg" );
	deepEqual( Stem("ineptitude"), "ineptitud" );
	deepEqual( Stem("inequalities"), "inequ" );
	deepEqual( Stem("inequality"), "inequ" );
	deepEqual( Stem("ineradicable"), "ineradic" );
	deepEqual( Stem("inermis"), "inermi" );
	deepEqual( Stem("inert"), "inert" );
	deepEqual( Stem("inertia"), "inertia" );
	deepEqual( Stem("inertness"), "inert" );
	deepEqual( Stem("inestimable"), "inestim" );
	deepEqual( Stem("inestimably"), "inestim" );
	deepEqual( Stem("inevitable"), "inevit" );
	deepEqual( Stem("inevitably"), "inevit" );
	deepEqual( Stem("inexcusable"), "inexcus" );
	deepEqual( Stem("inexhaustible"), "inexhaust" );
	deepEqual( Stem("inexorable"), "inexor" );
	deepEqual( Stem("inexpedient"), "inexpedi" );
	deepEqual( Stem("inexperience"), "inexperi" );
	deepEqual( Stem("inexperienced"), "inexperienc" );
	deepEqual( Stem("inexpiable"), "inexpi" );
	deepEqual( Stem("inexplicable"), "inexplic" );
	deepEqual( Stem("inexpressible"), "inexpress" );
	deepEqual( Stem("inexpressibles"), "inexpress" );
	deepEqual( Stem("inexpressibly"), "inexpress" );
	deepEqual( Stem("inexpressive"), "inexpress" );
	deepEqual( Stem("inexpressively"), "inexpress" );
	deepEqual( Stem("inextinguishable"), "inextinguish" );
	deepEqual( Stem("infallibility"), "infal" );
	deepEqual( Stem("infallible"), "infal" );
	deepEqual( Stem("infallibly"), "infal" );
	deepEqual( Stem("infame"), "infam" );
	deepEqual( Stem("infamies"), "infami" );
	deepEqual( Stem("infamous"), "infam" );
	deepEqual( Stem("infamy"), "infami" );
	deepEqual( Stem("infancy"), "infanc" );
	deepEqual( Stem("infant"), "infant" );
	deepEqual( Stem("infanticide"), "infanticid" );
	deepEqual( Stem("infantine"), "infantin" );
	deepEqual( Stem("infantry"), "infantri" );
	deepEqual( Stem("infants"), "infant" );
	deepEqual( Stem("infatuated"), "infatu" );
	deepEqual( Stem("infatuation"), "infatu" );
	deepEqual( Stem("infect"), "infect" );
	deepEqual( Stem("infected"), "infect" );
	deepEqual( Stem("infection"), "infect" );
	deepEqual( Stem("infectious"), "infecti" );
	deepEqual( Stem("infer"), "infer" );
	deepEqual( Stem("inference"), "infer" );
	deepEqual( Stem("inferior"), "inferior" );
	deepEqual( Stem("inferiorities"), "inferior" );
	deepEqual( Stem("inferiority"), "inferior" );
	deepEqual( Stem("inferiors"), "inferior" );
	deepEqual( Stem("infernal"), "infern" );
	deepEqual( Stem("inferred"), "infer" );
	deepEqual( Stem("inferring"), "infer" );
	deepEqual( Stem("infested"), "infest" );
	deepEqual( Stem("infidel"), "infidel" );
	deepEqual( Stem("infidelities"), "infidel" );
	deepEqual( Stem("infidelity"), "infidel" );
	deepEqual( Stem("infidels"), "infidel" );
	deepEqual( Stem("infinite"), "infinit" );
	deepEqual( Stem("infinitely"), "infinit" );
	deepEqual( Stem("infinitesimal"), "infinitesim" );
	deepEqual( Stem("infinitum"), "infinitum" );
	deepEqual( Stem("infinity"), "infin" );
	deepEqual( Stem("infirm"), "infirm" );
	deepEqual( Stem("infirmities"), "infirm" );
	deepEqual( Stem("infirmity"), "infirm" );
	deepEqual( Stem("inflamed"), "inflam" );
	deepEqual( Stem("inflammable"), "inflamm" );
	deepEqual( Stem("inflammation"), "inflamm" );
	deepEqual( Stem("inflated"), "inflat" );
	deepEqual( Stem("inflates"), "inflat" );
	deepEqual( Stem("inflation"), "inflat" );
	deepEqual( Stem("inflexam"), "inflexam" );
	deepEqual( Stem("inflexibility"), "inflex" );
	deepEqual( Stem("inflexible"), "inflex" );
	deepEqual( Stem("inflict"), "inflict" );
	deepEqual( Stem("inflicted"), "inflict" );
	deepEqual( Stem("inflicting"), "inflict" );
	deepEqual( Stem("infliction"), "inflict" );
	deepEqual( Stem("inflicts"), "inflict" );
	deepEqual( Stem("influence"), "influenc" );
	deepEqual( Stem("influenced"), "influenc" );
	deepEqual( Stem("influences"), "influenc" );
	deepEqual( Stem("influencing"), "influenc" );
	deepEqual( Stem("influential"), "influenti" );
	deepEqual( Stem("influx"), "influx" );
	deepEqual( Stem("inform"), "inform" );
	deepEqual( Stem("informant"), "inform" );
	deepEqual( Stem("information"), "inform" );
	deepEqual( Stem("informed"), "inform" );
	deepEqual( Stem("informer"), "inform" );
	deepEqual( Stem("informing"), "inform" );
	deepEqual( Stem("informs"), "inform" );
	deepEqual( Stem("infra"), "infra" );
	deepEqual( Stem("infrequency"), "infrequ" );
	deepEqual( Stem("infrequent"), "infrequ" );
	deepEqual( Stem("infrequently"), "infrequ" );
	deepEqual( Stem("infuriated"), "infuri" );
	deepEqual( Stem("infuse"), "infus" );
	deepEqual( Stem("infused"), "infus" );
	deepEqual( Stem("infusing"), "infus" );
	deepEqual( Stem("infusoria"), "infusoria" );
	deepEqual( Stem("infusorial"), "infusori" );
	deepEqual( Stem("ing"), "ing" );
	deepEqual( Stem("ingenio"), "ingenio" );
	deepEqual( Stem("ingenious"), "ingeni" );
	deepEqual( Stem("ingeniously"), "ingeni" );
	deepEqual( Stem("ingenuity"), "ingenu" );
	deepEqual( Stem("ingenuous"), "ingenu" );
	deepEqual( Stem("ingenuously"), "ingenu" );
	deepEqual( Stem("ingleses"), "ingles" );
	deepEqual( Stem("ingrained"), "ingrain" );
	deepEqual( Stem("ingratiate"), "ingrati" );
	deepEqual( Stem("ingratiated"), "ingrati" );
	deepEqual( Stem("ingratiating"), "ingrati" );
	deepEqual( Stem("ingratitude"), "ingratitud" );
	deepEqual( Stem("ingredient"), "ingredi" );
	deepEqual( Stem("ingredients"), "ingredi" );
	deepEqual( Stem("inhabit"), "inhabit" );
	deepEqual( Stem("inhabitant"), "inhabit" );
	deepEqual( Stem("inhabitants"), "inhabit" );
	deepEqual( Stem("inhabited"), "inhabit" );
	deepEqual( Stem("inhabiting"), "inhabit" );
	deepEqual( Stem("inhabits"), "inhabit" );
	deepEqual( Stem("inhaled"), "inhal" );
	deepEqual( Stem("inhaling"), "inhal" );
	deepEqual( Stem("inharmonious"), "inharmoni" );
	deepEqual( Stem("inherent"), "inher" );
	deepEqual( Stem("inherit"), "inherit" );
	deepEqual( Stem("inheritance"), "inherit" );
	deepEqual( Stem("inherited"), "inherit" );
	deepEqual( Stem("inheriting"), "inherit" );
	deepEqual( Stem("inhospitable"), "inhospit" );
	deepEqual( Stem("inhospitality"), "inhospit" );
	deepEqual( Stem("inhuman"), "inhuman" );
	deepEqual( Stem("inhumanity"), "inhuman" );
	deepEqual( Stem("inhumanly"), "inhuman" );
	deepEqual( Stem("inimical"), "inim" );
	deepEqual( Stem("iniquities"), "iniqu" );
	deepEqual( Stem("iniquity"), "iniqu" );
	deepEqual( Stem("init"), "init" );
	deepEqual( Stem("initial"), "initi" );
	deepEqual( Stem("initiated"), "initi" );
	deepEqual( Stem("initiation"), "initi" );
	deepEqual( Stem("initiative"), "initi" );
	deepEqual( Stem("initiatory"), "initiatori" );
	deepEqual( Stem("injected"), "inject" );
	deepEqual( Stem("injection"), "inject" );
	deepEqual( Stem("injections"), "inject" );
	deepEqual( Stem("injudicious"), "injudici" );
	deepEqual( Stem("injudiciously"), "injudici" );
	deepEqual( Stem("injunction"), "injunct" );
	deepEqual( Stem("injunctions"), "injunct" );
	deepEqual( Stem("injure"), "injur" );
	deepEqual( Stem("injured"), "injur" );
	deepEqual( Stem("injures"), "injur" );
	deepEqual( Stem("injuries"), "injuri" );
	deepEqual( Stem("injuring"), "injur" );
	deepEqual( Stem("injurious"), "injuri" );
	deepEqual( Stem("injury"), "injuri" );
	deepEqual( Stem("injustice"), "injustic" );
	deepEqual( Stem("ink"), "ink" );
	deepEqual( Stem("inked"), "ink" );
	deepEqual( Stem("inkling"), "inkl" );
	deepEqual( Stem("inkpot"), "inkpot" );
	deepEqual( Stem("inkstand"), "inkstand" );
	deepEqual( Stem("inkstands"), "inkstand" );
	deepEqual( Stem("inkwhich"), "inkwhich" );
	deepEqual( Stem("inkwhiched"), "inkwhich" );
	deepEqual( Stem("inky"), "inki" );
	deepEqual( Stem("inlaid"), "inlaid" );
	deepEqual( Stem("inland"), "inland" );
	deepEqual( Stem("inlet"), "inlet" );
	deepEqual( Stem("inlets"), "inlet" );
	deepEqual( Stem("inmate"), "inmat" );
	deepEqual( Stem("inmates"), "inmat" );
	deepEqual( Stem("inmost"), "inmost" );
	deepEqual( Stem("inn"), "inn" );
	deepEqual( Stem("innate"), "innat" );
	deepEqual( Stem("inner"), "inner" );
	deepEqual( Stem("innings"), "inning" );
	deepEqual( Stem("innkeeper"), "innkeep" );
	deepEqual( Stem("innkeepers"), "innkeep" );
	deepEqual( Stem("innocence"), "innoc" );
	deepEqual( Stem("innocent"), "innoc" );
	deepEqual( Stem("innocently"), "innoc" );
	deepEqual( Stem("innocents"), "innoc" );
	deepEqual( Stem("innocuous"), "innocu" );
	deepEqual( Stem("innombrable"), "innombr" );
	deepEqual( Stem("inns"), "inn" );
	deepEqual( Stem("innuendo"), "innuendo" );
	deepEqual( Stem("innuendoes"), "innuendo" );
	deepEqual( Stem("innumerable"), "innumer" );
	deepEqual( Stem("inoffensive"), "inoffens" );
	deepEqual( Stem("inopportune"), "inopportun" );
	deepEqual( Stem("inopportunely"), "inopportun" );
	deepEqual( Stem("inorganic"), "inorgan" );
	deepEqual( Stem("inquest"), "inquest" );
	deepEqual( Stem("inquests"), "inquest" );
	deepEqual( Stem("inquire"), "inquir" );
	deepEqual( Stem("inquired"), "inquir" );
	deepEqual( Stem("inquirer"), "inquir" );
	deepEqual( Stem("inquirers"), "inquir" );
	deepEqual( Stem("inquires"), "inquir" );
	deepEqual( Stem("inquiries"), "inquiri" );
	deepEqual( Stem("inquiring"), "inquir" );
	deepEqual( Stem("inquiringly"), "inquir" );
	deepEqual( Stem("inquiry"), "inquiri" );
	deepEqual( Stem("inquisition"), "inquisit" );
	deepEqual( Stem("inquisitive"), "inquisit" );
	deepEqual( Stem("inquisitively"), "inquisit" );
	deepEqual( Stem("inquisitiveness"), "inquisit" );
	deepEqual( Stem("inroad"), "inroad" );
	deepEqual( Stem("inroads"), "inroad" );
	deepEqual( Stem("ins"), "in" );
	deepEqual( Stem("insane"), "insan" );
	deepEqual( Stem("insanity"), "insan" );
	deepEqual( Stem("insatiable"), "insati" );
	deepEqual( Stem("insatiate"), "insati" );
	deepEqual( Stem("inscribed"), "inscrib" );
	deepEqual( Stem("inscription"), "inscript" );
	deepEqual( Stem("inscriptions"), "inscript" );
	deepEqual( Stem("inscrutable"), "inscrut" );
	deepEqual( Stem("insect"), "insect" );
	deepEqual( Stem("insects"), "insect" );
	deepEqual( Stem("insecure"), "insecur" );
	deepEqual( Stem("insecurity"), "insecur" );
	deepEqual( Stem("insense"), "insens" );
	deepEqual( Stem("insensibility"), "insens" );
	deepEqual( Stem("insensible"), "insens" );
	deepEqual( Stem("insensibly"), "insens" );
	deepEqual( Stem("inseparable"), "insepar" );
	deepEqual( Stem("inserted"), "insert" );
	deepEqual( Stem("inserting"), "insert" );
	deepEqual( Stem("insertion"), "insert" );
	deepEqual( Stem("inserts"), "insert" );
	deepEqual( Stem("inside"), "insid" );
	deepEqual( Stem("insides"), "insid" );
	deepEqual( Stem("insight"), "insight" );
	deepEqual( Stem("insignificance"), "insignific" );
	deepEqual( Stem("insignificant"), "insignific" );
	deepEqual( Stem("insinuate"), "insinu" );
	deepEqual( Stem("insinuated"), "insinu" );
	deepEqual( Stem("insinuating"), "insinu" );
	deepEqual( Stem("insinuation"), "insinu" );
	deepEqual( Stem("insinuations"), "insinu" );
	deepEqual( Stem("insipid"), "insipid" );
	deepEqual( Stem("insipidity"), "insipid" );
	deepEqual( Stem("insist"), "insist" );
	deepEqual( Stem("insisted"), "insist" );
	deepEqual( Stem("insistence"), "insist" );
	deepEqual( Stem("insistent"), "insist" );
	deepEqual( Stem("insistently"), "insist" );
	deepEqual( Stem("insistes"), "insist" );
	deepEqual( Stem("insisting"), "insist" );
	deepEqual( Stem("insists"), "insist" );
	deepEqual( Stem("insolence"), "insol" );
	deepEqual( Stem("insolent"), "insol" );
	deepEqual( Stem("insolently"), "insol" );
	deepEqual( Stem("insolvent"), "insolv" );
	deepEqual( Stem("insomuch"), "insomuch" );
	deepEqual( Stem("inspect"), "inspect" );
	deepEqual( Stem("inspected"), "inspect" );
	deepEqual( Stem("inspecting"), "inspect" );
	deepEqual( Stem("inspection"), "inspect" );
	deepEqual( Stem("inspector"), "inspector" );
	deepEqual( Stem("inspects"), "inspect" );
	deepEqual( Stem("inspiration"), "inspir" );
	deepEqual( Stem("inspire"), "inspir" );
	deepEqual( Stem("inspired"), "inspir" );
	deepEqual( Stem("inspires"), "inspir" );
	deepEqual( Stem("inspiring"), "inspir" );
	deepEqual( Stem("inspirit"), "inspirit" );
	deepEqual( Stem("inspiriting"), "inspirit" );
	deepEqual( Stem("instability"), "instabl" );
	deepEqual( Stem("installed"), "instal" );
	deepEqual( Stem("instalment"), "instal" );
	deepEqual( Stem("instance"), "instanc" );
	deepEqual( Stem("instanced"), "instanc" );
	deepEqual( Stem("instances"), "instanc" );
	deepEqual( Stem("instant"), "instant" );
	deepEqual( Stem("instantaneous"), "instantan" );
	deepEqual( Stem("instantaneously"), "instantan" );
	deepEqual( Stem("instantly"), "instant" );
	deepEqual( Stem("instea"), "instea" );
	deepEqual( Stem("instead"), "instead" );
	deepEqual( Stem("instigated"), "instig" );
	deepEqual( Stem("instigation"), "instig" );
	deepEqual( Stem("instigator"), "instig" );
	deepEqual( Stem("instil"), "instil" );
	deepEqual( Stem("instinct"), "instinct" );
	deepEqual( Stem("instinctive"), "instinct" );
	deepEqual( Stem("instinctively"), "instinct" );
	deepEqual( Stem("instincts"), "instinct" );
	deepEqual( Stem("institut"), "institut" );
	deepEqual( Stem("institute"), "institut" );
	deepEqual( Stem("instituted"), "institut" );
	deepEqual( Stem("institution"), "institut" );
	deepEqual( Stem("institutions"), "institut" );
	deepEqual( Stem("instruct"), "instruct" );
	deepEqual( Stem("instructed"), "instruct" );
	deepEqual( Stem("instructing"), "instruct" );
	deepEqual( Stem("instruction"), "instruct" );
	deepEqual( Stem("instructions"), "instruct" );
	deepEqual( Stem("instructive"), "instruct" );
	deepEqual( Stem("instructor"), "instructor" );
	deepEqual( Stem("instructs"), "instruct" );
	deepEqual( Stem("instrument"), "instrument" );
	deepEqual( Stem("instrumental"), "instrument" );
	deepEqual( Stem("instrumentality"), "instrument" );
	deepEqual( Stem("instruments"), "instrument" );
	deepEqual( Stem("insubordinate"), "insubordin" );
	deepEqual( Stem("insubordination"), "insubordin" );
	deepEqual( Stem("insufferable"), "insuffer" );
	deepEqual( Stem("insufferably"), "insuffer" );
	deepEqual( Stem("insufficient"), "insuffici" );
	deepEqual( Stem("insufficiently"), "insuffici" );
	deepEqual( Stem("insular"), "insular" );
	deepEqual( Stem("insulated"), "insul" );
	deepEqual( Stem("insult"), "insult" );
	deepEqual( Stem("insulted"), "insult" );
	deepEqual( Stem("insulting"), "insult" );
	deepEqual( Stem("insults"), "insult" );
	deepEqual( Stem("insuperable"), "insuper" );
	deepEqual( Stem("insupportable"), "insupport" );
	deepEqual( Stem("insure"), "insur" );
	deepEqual( Stem("insured"), "insur" );
	deepEqual( Stem("insuring"), "insur" );
	deepEqual( Stem("insurmountable"), "insurmount" );
	deepEqual( Stem("intact"), "intact" );
	deepEqual( Stem("integral"), "integr" );
	deepEqual( Stem("integrity"), "integr" );
	deepEqual( Stem("intellect"), "intellect" );
	deepEqual( Stem("intellects"), "intellect" );
	deepEqual( Stem("intellectual"), "intellectu" );
	deepEqual( Stem("intellectuality"), "intellectu" );
	deepEqual( Stem("intellectually"), "intellectu" );
	deepEqual( Stem("intelligence"), "intellig" );
	deepEqual( Stem("intelligent"), "intellig" );
	deepEqual( Stem("intelligently"), "intellig" );
	deepEqual( Stem("intelligible"), "intellig" );
	deepEqual( Stem("intelligibly"), "intellig" );
	deepEqual( Stem("intemperance"), "intemper" );
	deepEqual( Stem("intemperate"), "intemper" );
	deepEqual( Stem("intend"), "intend" );
	deepEqual( Stem("intended"), "intend" );
	deepEqual( Stem("intendeds"), "intend" );
	deepEqual( Stem("intending"), "intend" );
	deepEqual( Stem("intends"), "intend" );
	deepEqual( Stem("intense"), "intens" );
	deepEqual( Stem("intensely"), "intens" );
	deepEqual( Stem("intensest"), "intensest" );
	deepEqual( Stem("intensifies"), "intensifi" );
	deepEqual( Stem("intensifying"), "intensifi" );
	deepEqual( Stem("intensity"), "intens" );
	deepEqual( Stem("intent"), "intent" );
	deepEqual( Stem("intention"), "intent" );
	deepEqual( Stem("intentional"), "intent" );
	deepEqual( Stem("intentionally"), "intent" );
	deepEqual( Stem("intentioned"), "intent" );
	deepEqual( Stem("intentions"), "intent" );
	deepEqual( Stem("intently"), "intent" );
	deepEqual( Stem("intents"), "intent" );
	deepEqual( Stem("inter"), "inter" );
	deepEqual( Stem("intercalated"), "intercal" );
	deepEqual( Stem("intercede"), "interced" );
	deepEqual( Stem("intercept"), "intercept" );
	deepEqual( Stem("intercepted"), "intercept" );
	deepEqual( Stem("intercepting"), "intercept" );
	deepEqual( Stem("intercepts"), "intercept" );
	deepEqual( Stem("intercession"), "intercess" );
	deepEqual( Stem("interchange"), "interchang" );
	deepEqual( Stem("interchangeable"), "interchang" );
	deepEqual( Stem("interchanged"), "interchang" );
	deepEqual( Stem("interchanging"), "interchang" );
	deepEqual( Stem("intercourse"), "intercours" );
	deepEqual( Stem("interest"), "interest" );
	deepEqual( Stem("interested"), "interest" );
	deepEqual( Stem("interestin"), "interestin" );
	deepEqual( Stem("interesting"), "interest" );
	deepEqual( Stem("interests"), "interest" );
	deepEqual( Stem("interfere"), "interfer" );
	deepEqual( Stem("interfered"), "interf" );
	deepEqual( Stem("interference"), "interfer" );
	deepEqual( Stem("interferes"), "interfer" );
	deepEqual( Stem("interfering"), "interf" );
	deepEqual( Stem("interior"), "interior" );
	deepEqual( Stem("interjection"), "interject" );
	deepEqual( Stem("interlacings"), "interlac" );
	deepEqual( Stem("interleaved"), "interleav" );
	deepEqual( Stem("interloper"), "interlop" );
	deepEqual( Stem("interlopers"), "interlop" );
	deepEqual( Stem("interlude"), "interlud" );
	deepEqual( Stem("intermarriages"), "intermarriag" );
	deepEqual( Stem("intermeddling"), "intermeddl" );
	deepEqual( Stem("intermediate"), "intermedi" );
	deepEqual( Stem("interminable"), "intermin" );
	deepEqual( Stem("intermingling"), "intermingl" );
	deepEqual( Stem("intermission"), "intermiss" );
	deepEqual( Stem("intermittent"), "intermitt" );
	deepEqual( Stem("internal"), "intern" );
	deepEqual( Stem("internally"), "intern" );
	deepEqual( Stem("international"), "intern" );
	deepEqual( Stem("interpose"), "interpos" );
	deepEqual( Stem("interposed"), "interpos" );
	deepEqual( Stem("interposes"), "interpos" );
	deepEqual( Stem("interposing"), "interpos" );
	deepEqual( Stem("interposition"), "interposit" );
	deepEqual( Stem("interpret"), "interpret" );
	deepEqual( Stem("interpretation"), "interpret" );
	deepEqual( Stem("interpretations"), "interpret" );
	deepEqual( Stem("interpreted"), "interpret" );
	deepEqual( Stem("interpreter"), "interpret" );
	deepEqual( Stem("interrogate"), "interrog" );
	deepEqual( Stem("interrogated"), "interrog" );
	deepEqual( Stem("interrogating"), "interrog" );
	deepEqual( Stem("interrogations"), "interrog" );
	deepEqual( Stem("interrogator"), "interrog" );
	deepEqual( Stem("interrogatories"), "interrogatori" );
	deepEqual( Stem("interrogatory"), "interrogatori" );
	deepEqual( Stem("interrupt"), "interrupt" );
	deepEqual( Stem("interrupted"), "interrupt" );
	deepEqual( Stem("interrupting"), "interrupt" );
	deepEqual( Stem("interruption"), "interrupt" );
	deepEqual( Stem("interruptions"), "interrupt" );
	deepEqual( Stem("interrupts"), "interrupt" );
	deepEqual( Stem("intersect"), "intersect" );
	deepEqual( Stem("intersected"), "intersect" );
	deepEqual( Stem("intersecting"), "intersect" );
	deepEqual( Stem("intersection"), "intersect" );
	deepEqual( Stem("interspersed"), "interspers" );
	deepEqual( Stem("interspersing"), "interspers" );
	deepEqual( Stem("interstices"), "interstic" );
	deepEqual( Stem("interstratified"), "interstratifi" );
	deepEqual( Stem("intertropical"), "intertrop" );
	deepEqual( Stem("intertwined"), "intertwin" );
	deepEqual( Stem("interval"), "interv" );
	deepEqual( Stem("intervals"), "interv" );
	deepEqual( Stem("intervened"), "interven" );
	deepEqual( Stem("intervening"), "interven" );
	deepEqual( Stem("interview"), "interview" );
	deepEqual( Stem("interviews"), "interview" );
	deepEqual( Stem("interwoven"), "interwoven" );
	deepEqual( Stem("intestate"), "intest" );
	deepEqual( Stem("intestinal"), "intestin" );
	deepEqual( Stem("intestines"), "intestin" );
	deepEqual( Stem("intimacy"), "intimaci" );
	deepEqual( Stem("intimate"), "intim" );
	deepEqual( Stem("intimated"), "intim" );
	deepEqual( Stem("intimately"), "intim" );
	deepEqual( Stem("intimates"), "intim" );
	deepEqual( Stem("intimating"), "intim" );
	deepEqual( Stem("intimation"), "intim" );
	deepEqual( Stem("intimidated"), "intimid" );
	deepEqual( Stem("intimidation"), "intimid" );
	deepEqual( Stem("intiv"), "intiv" );
	deepEqual( Stem("into"), "into" );
	deepEqual( Stem("intolerable"), "intoler" );
	deepEqual( Stem("intolerably"), "intoler" );
	deepEqual( Stem("intombed"), "intomb" );
	deepEqual( Stem("intonation"), "inton" );
	deepEqual( Stem("intonations"), "inton" );
	deepEqual( Stem("intoning"), "inton" );
	deepEqual( Stem("intoxicated"), "intox" );
	deepEqual( Stem("intoxicating"), "intox" );
	deepEqual( Stem("intoxication"), "intox" );
	deepEqual( Stem("intractable"), "intract" );
	deepEqual( Stem("intreat"), "intreat" );
	deepEqual( Stem("intrepid"), "intrepid" );
	deepEqual( Stem("intrepidity"), "intrepid" );
	deepEqual( Stem("intricacies"), "intricaci" );
	deepEqual( Stem("intricate"), "intric" );
	deepEqual( Stem("intrigue"), "intrigu" );
	deepEqual( Stem("intrigued"), "intrigu" );
	deepEqual( Stem("intrigues"), "intrigu" );
	deepEqual( Stem("intriguing"), "intrigu" );
	deepEqual( Stem("intrinsic"), "intrins" );
	deepEqual( Stem("introduce"), "introduc" );
	deepEqual( Stem("introduced"), "introduc" );
	deepEqual( Stem("introduces"), "introduc" );
	deepEqual( Stem("introducing"), "introduc" );
	deepEqual( Stem("introduction"), "introduct" );
	deepEqual( Stem("introductions"), "introduct" );
	deepEqual( Stem("introductory"), "introductori" );
	deepEqual( Stem("intrude"), "intrud" );
	deepEqual( Stem("intruded"), "intrud" );
	deepEqual( Stem("intruder"), "intrud" );
	deepEqual( Stem("intrudes"), "intrud" );
	deepEqual( Stem("intruding"), "intrud" );
	deepEqual( Stem("intrusion"), "intrus" );
	deepEqual( Stem("intrusive"), "intrus" );
	deepEqual( Stem("intrust"), "intrust" );
	deepEqual( Stem("intrusted"), "intrust" );
	deepEqual( Stem("intuition"), "intuit" );
	deepEqual( Stem("intuitive"), "intuit" );
	deepEqual( Stem("intwined"), "intwin" );
	deepEqual( Stem("intwining"), "intwin" );
	deepEqual( Stem("inundated"), "inund" );
	deepEqual( Stem("inundations"), "inund" );
	deepEqual( Stem("inured"), "inur" );
	deepEqual( Stem("inutility"), "inutil" );
	deepEqual( Stem("invade"), "invad" );
	deepEqual( Stem("invaded"), "invad" );
	deepEqual( Stem("invaders"), "invad" );
	deepEqual( Stem("invading"), "invad" );
	deepEqual( Stem("invalid"), "invalid" );
	deepEqual( Stem("invalidate"), "invalid" );
	deepEqual( Stem("invalided"), "invalid" );
	deepEqual( Stem("invalids"), "invalid" );
	deepEqual( Stem("invaluable"), "invalu" );
	deepEqual( Stem("invariable"), "invari" );
	deepEqual( Stem("invariably"), "invari" );
	deepEqual( Stem("invasion"), "invas" );
	deepEqual( Stem("invective"), "invect" );
	deepEqual( Stem("invectives"), "invect" );
	deepEqual( Stem("inveighed"), "inveigh" );
	deepEqual( Stem("inveigle"), "inveigl" );
	deepEqual( Stem("inveigled"), "inveigl" );
	deepEqual( Stem("invencion"), "invencion" );
	deepEqual( Stem("invent"), "invent" );
	deepEqual( Stem("invented"), "invent" );
	deepEqual( Stem("inventing"), "invent" );
	deepEqual( Stem("invention"), "invent" );
	deepEqual( Stem("inventions"), "invent" );
	deepEqual( Stem("inventory"), "inventori" );
	deepEqual( Stem("invents"), "invent" );
	deepEqual( Stem("inverness"), "inver" );
	deepEqual( Stem("invertebrate"), "invertebr" );
	deepEqual( Stem("inverted"), "invert" );
	deepEqual( Stem("invest"), "invest" );
	deepEqual( Stem("invested"), "invest" );
	deepEqual( Stem("investigate"), "investig" );
	deepEqual( Stem("investigated"), "investig" );
	deepEqual( Stem("investigating"), "investig" );
	deepEqual( Stem("investigation"), "investig" );
	deepEqual( Stem("investigations"), "investig" );
	deepEqual( Stem("investigators"), "investig" );
	deepEqual( Stem("investment"), "invest" );
	deepEqual( Stem("invests"), "invest" );
	deepEqual( Stem("inveterate"), "inveter" );
	deepEqual( Stem("invigorate"), "invigor" );
	deepEqual( Stem("invigorated"), "invigor" );
	deepEqual( Stem("invigorating"), "invigor" );
	deepEqual( Stem("invigoration"), "invigor" );
	deepEqual( Stem("invincible"), "invinc" );
	deepEqual( Stem("invisible"), "invis" );
	deepEqual( Stem("invisibly"), "invis" );
	deepEqual( Stem("invitation"), "invit" );
	deepEqual( Stem("invitations"), "invit" );
	deepEqual( Stem("invite"), "invit" );
	deepEqual( Stem("invited"), "invit" );
	deepEqual( Stem("invites"), "invit" );
	deepEqual( Stem("inviting"), "invit" );
	deepEqual( Stem("invitingly"), "invit" );
	deepEqual( Stem("invoking"), "invok" );
	deepEqual( Stem("involuntarily"), "involuntarili" );
	deepEqual( Stem("involuntary"), "involuntari" );
	deepEqual( Stem("involutions"), "involut" );
	deepEqual( Stem("involve"), "involv" );
	deepEqual( Stem("involved"), "involv" );
	deepEqual( Stem("involvement"), "involv" );
	deepEqual( Stem("involves"), "involv" );
	deepEqual( Stem("involving"), "involv" );
	deepEqual( Stem("inward"), "inward" );
	deepEqual( Stem("inwardly"), "inward" );
	deepEqual( Stem("inwards"), "inward" );
	deepEqual( Stem("inwentory"), "inwentori" );
	deepEqual( Stem("iodic"), "iodic" );
	deepEqual( Stem("ionic"), "ionic" );
	deepEqual( Stem("iota"), "iota" );
	deepEqual( Stem("iou"), "iou" );
	deepEqual( Stem("iquique"), "iquiqu" );
	deepEqual( Stem("irascibility"), "irasc" );
	deepEqual( Stem("irascible"), "irasc" );
	deepEqual( Stem("irascibly"), "irasc" );
	deepEqual( Stem("irate"), "irat" );
	deepEqual( Stem("ire"), "ire" );
	deepEqual( Stem("ireland"), "ireland" );
	deepEqual( Stem("iridescent"), "iridesc" );
	deepEqual( Stem("iris"), "iri" );
	deepEqual( Stem("irish"), "irish" );
	deepEqual( Stem("irishman"), "irishman" );
	deepEqual( Stem("irishmen"), "irishmen" );
	deepEqual( Stem("irishwoman"), "irishwoman" );
	deepEqual( Stem("irksome"), "irksom" );
	deepEqual( Stem("irksomeness"), "irksom" );
	deepEqual( Stem("iron"), "iron" );
	deepEqual( Stem("ironed"), "iron" );
	deepEqual( Stem("ironical"), "iron" );
	deepEqual( Stem("ironically"), "iron" );
	deepEqual( Stem("ironing"), "iron" );
	deepEqual( Stem("ironmaster"), "ironmast" );
	deepEqual( Stem("ironmasters"), "ironmast" );
	deepEqual( Stem("ironmonger"), "ironmong" );
	deepEqual( Stem("irons"), "iron" );
	deepEqual( Stem("irony"), "ironi" );
	deepEqual( Stem("irradiated"), "irradi" );
	deepEqual( Stem("irrational"), "irrat" );
	deepEqual( Stem("irreclaimable"), "irreclaim" );
	deepEqual( Stem("irreconcilable"), "irreconcil" );
	deepEqual( Stem("irrecoverable"), "irrecover" );
	deepEqual( Stem("irredeemable"), "irredeem" );
	deepEqual( Stem("irrefutable"), "irrefut" );
	deepEqual( Stem("irregular"), "irregular" );
	deepEqual( Stem("irregularities"), "irregular" );
	deepEqual( Stem("irregularity"), "irregular" );
	deepEqual( Stem("irregularly"), "irregular" );
	deepEqual( Stem("irrelevant"), "irrelev" );
	deepEqual( Stem("irrepressible"), "irrepress" );
	deepEqual( Stem("irreproachable"), "irreproach" );
	deepEqual( Stem("irresistible"), "irresist" );
	deepEqual( Stem("irresistibly"), "irresist" );
	deepEqual( Stem("irresolute"), "irresolut" );
	deepEqual( Stem("irresolutely"), "irresolut" );
	deepEqual( Stem("irresolution"), "irresolut" );
	deepEqual( Stem("irrespective"), "irrespect" );
	deepEqual( Stem("irresponsible"), "irrespons" );
	deepEqual( Stem("irresponsive"), "irrespons" );
	deepEqual( Stem("irretrievable"), "irretriev" );
	deepEqual( Stem("irretrievably"), "irretriev" );
	deepEqual( Stem("irreverent"), "irrever" );
	deepEqual( Stem("irreverently"), "irrever" );
	deepEqual( Stem("irrevocable"), "irrevoc" );
	deepEqual( Stem("irrevocably"), "irrevoc" );
	deepEqual( Stem("irrigate"), "irrig" );
	deepEqual( Stem("irrigated"), "irrig" );
	deepEqual( Stem("irrigating"), "irrig" );
	deepEqual( Stem("irrigation"), "irrig" );
	deepEqual( Stem("irritability"), "irrit" );
	deepEqual( Stem("irritable"), "irrit" );
	deepEqual( Stem("irritably"), "irrit" );
	deepEqual( Stem("irritate"), "irrit" );
	deepEqual( Stem("irritated"), "irrit" );
	deepEqual( Stem("irritating"), "irrit" );
	deepEqual( Stem("irritation"), "irrit" );
	deepEqual( Stem("irruption"), "irrupt" );
	deepEqual( Stem("irtish"), "irtish" );
	deepEqual( Stem("is"), "is" );
	deepEqual( Stem("isabel"), "isabel" );
	deepEqual( Stem("isaiah"), "isaiah" );
	deepEqual( Stem("isid"), "isid" );
	deepEqual( Stem("isidro"), "isidro" );
	deepEqual( Stem("island"), "island" );
	deepEqual( Stem("islanders"), "island" );
	deepEqual( Stem("islands"), "island" );
	deepEqual( Stem("isle"), "isl" );
	deepEqual( Stem("isles"), "isl" );
	deepEqual( Stem("islet"), "islet" );
	deepEqual( Stem("islets"), "islet" );
	deepEqual( Stem("islington"), "islington" );
	deepEqual( Stem("isn"), "isn" );
	deepEqual( Stem("isobel"), "isobel" );
	deepEqual( Stem("isolated"), "isol" );
	deepEqual( Stem("isolation"), "isol" );
	deepEqual( Stem("israelites"), "israelit" );
	deepEqual( Stem("issue"), "issu" );
	deepEqual( Stem("issued"), "issu" );
	deepEqual( Stem("issues"), "issu" );
	deepEqual( Stem("issuing"), "issu" );
	deepEqual( Stem("ist"), "ist" );
	deepEqual( Stem("isthmus"), "isthmus" );
	deepEqual( Stem("it"), "it" );
	deepEqual( Stem("italian"), "italian" );
	deepEqual( Stem("italy"), "itali" );
	deepEqual( Stem("itch"), "itch" );
	deepEqual( Stem("itchen"), "itchen" );
	deepEqual( Stem("itching"), "itch" );
	deepEqual( Stem("item"), "item" );
	deepEqual( Stem("items"), "item" );
	deepEqual( Stem("ithacaia"), "ithacaia" );
	deepEqual( Stem("itinerant"), "itiner" );
	deepEqual( Stem("its"), "it" );
	deepEqual( Stem("itself"), "itself" );
	deepEqual( Stem("iv"), "iv" );
	deepEqual( Stem("ivan"), "ivan" );
	deepEqual( Stem("ivanitch"), "ivanitch" );
	deepEqual( Stem("ivanovitch"), "ivanovitch" );
	deepEqual( Stem("ivanovna"), "ivanovna" );
	deepEqual( Stem("ivory"), "ivori" );
	deepEqual( Stem("ivy"), "ivi" );
	deepEqual( Stem("ix"), "ix" );
	deepEqual( Stem("ixion"), "ixion" );
	deepEqual( Stem("j"), "j" );
	deepEqual( Stem("ja"), "ja" );
	deepEqual( Stem("jabbers"), "jabber" );
	deepEqual( Stem("jaca"), "jaca" );
	deepEqual( Stem("jack"), "jack" );
	deepEqual( Stem("jackals"), "jackal" );
	deepEqual( Stem("jackanapes"), "jackanap" );
	deepEqual( Stem("jackas"), "jacka" );
	deepEqual( Stem("jackdaw"), "jackdaw" );
	deepEqual( Stem("jackdaws"), "jackdaw" );
	deepEqual( Stem("jacket"), "jacket" );
	deepEqual( Stem("jackets"), "jacket" );
	deepEqual( Stem("jacks"), "jack" );
	deepEqual( Stem("jackson"), "jackson" );
	deepEqual( Stem("jacob"), "jacob" );
	deepEqual( Stem("jacuitque"), "jacuitqu" );
	deepEqual( Stem("jaculation"), "jacul" );
	deepEqual( Stem("jade"), "jade" );
	deepEqual( Stem("jaded"), "jade" );
	deepEqual( Stem("jading"), "jade" );
	deepEqual( Stem("jag"), "jag" );
	deepEqual( Stem("jagged"), "jag" );
	deepEqual( Stem("jago"), "jago" );
	deepEqual( Stem("jaguar"), "jaguar" );
	deepEqual( Stem("jaguars"), "jaguar" );
	deepEqual( Stem("jail"), "jail" );
	deepEqual( Stem("jailer"), "jailer" );
	deepEqual( Stem("jajuel"), "jajuel" );
	deepEqual( Stem("jam"), "jam" );
	deepEqual( Stem("jamaica"), "jamaica" );
	deepEqual( Stem("james"), "jame" );
	deepEqual( Stem("jammed"), "jam" );
	deepEqual( Stem("jams"), "jam" );
	deepEqual( Stem("jan"), "jan" );
	deepEqual( Stem("jane"), "jane" );
	deepEqual( Stem("janeiro"), "janeiro" );
	deepEqual( Stem("janes"), "jane" );
	deepEqual( Stem("jangled"), "jangl" );
	deepEqual( Stem("jangling"), "jangl" );
	deepEqual( Stem("january"), "januari" );
	deepEqual( Stem("japan"), "japan" );
	deepEqual( Stem("jar"), "jar" );
	deepEqual( Stem("jargon"), "jargon" );
	deepEqual( Stem("jargonelle"), "jargonell" );
	deepEqual( Stem("jarnders"), "jarnder" );
	deepEqual( Stem("jarndyce"), "jarndyc" );
	deepEqual( Stem("jarndyces"), "jarndyc" );
	deepEqual( Stem("jarodyce"), "jarodyc" );
	deepEqual( Stem("jarring"), "jar" );
	deepEqual( Stem("jasmine"), "jasmin" );
	deepEqual( Stem("jaundice"), "jaundic" );
	deepEqual( Stem("jaundiced"), "jaundic" );
	deepEqual( Stem("jaunt"), "jaunt" );
	deepEqual( Stem("jauntily"), "jauntili" );
	deepEqual( Stem("jauntiness"), "jaunti" );
	deepEqual( Stem("jaunty"), "jaunti" );
	deepEqual( Stem("java"), "java" );
	deepEqual( Stem("javelin"), "javelin" );
	deepEqual( Stem("jaw"), "jaw" );
	deepEqual( Stem("jawed"), "jaw" );
	deepEqual( Stem("jawlly"), "jawlli" );
	deepEqual( Stem("jaws"), "jaw" );
	deepEqual( Stem("je"), "je" );
	deepEqual( Stem("jea"), "jea" );
	deepEqual( Stem("jealous"), "jealous" );
	deepEqual( Stem("jealousies"), "jealousi" );
	deepEqual( Stem("jealously"), "jealous" );
	deepEqual( Stem("jealousy"), "jealousi" );
	deepEqual( Stem("jean"), "jean" );
	deepEqual( Stem("jeanie"), "jeani" );
	deepEqual( Stem("jeer"), "jeer" );
	deepEqual( Stem("jeered"), "jeer" );
	deepEqual( Stem("jeering"), "jeer" );
	deepEqual( Stem("jeeringly"), "jeer" );
	deepEqual( Stem("jeers"), "jeer" );
	deepEqual( Stem("jell"), "jell" );
	deepEqual( Stem("jelly"), "jelli" );
	deepEqual( Stem("jellyby"), "jellybi" );
	deepEqual( Stem("jellybys"), "jellybi" );
	deepEqual( Stem("jemmy"), "jemmi" );
	deepEqual( Stem("jenkins"), "jenkin" );
	deepEqual( Stem("jennings"), "jen" );
	deepEqual( Stem("jenny"), "jenni" );
	deepEqual( Stem("jennys"), "jenni" );
	deepEqual( Stem("jenyns"), "jenyn" );
	deepEqual( Stem("jeopardy"), "jeopardi" );
	deepEqual( Stem("jeremy"), "jeremi" );
	deepEqual( Stem("jericho"), "jericho" );
	deepEqual( Stem("jerk"), "jerk" );
	deepEqual( Stem("jerked"), "jerk" );
	deepEqual( Stem("jerkily"), "jerkili" );
	deepEqual( Stem("jerking"), "jerk" );
	deepEqual( Stem("jerks"), "jerk" );
	deepEqual( Stem("jerky"), "jerki" );
	deepEqual( Stem("jerry"), "jerri" );
	deepEqual( Stem("jerusalem"), "jerusalem" );
	deepEqual( Stem("jest"), "jest" );
	deepEqual( Stem("jesting"), "jest" );
	deepEqual( Stem("jestingly"), "jest" );
	deepEqual( Stem("jests"), "jest" );
	deepEqual( Stem("jesuit"), "jesuit" );
	deepEqual( Stem("jesuitical"), "jesuit" );
	deepEqual( Stem("jesus"), "jesus" );
	deepEqual( Stem("jet"), "jet" );
	deepEqual( Stem("jets"), "jet" );
	deepEqual( Stem("jew"), "jew" );
	deepEqual( Stem("jewby"), "jewbi" );
	deepEqual( Stem("jewel"), "jewel" );
	deepEqual( Stem("jeweler"), "jewel" );
	deepEqual( Stem("jewelled"), "jewel" );
	deepEqual( Stem("jeweller"), "jewel" );
	deepEqual( Stem("jewellers"), "jewel" );
	deepEqual( Stem("jewellery"), "jewelleri" );
	deepEqual( Stem("jewels"), "jewel" );
	deepEqual( Stem("jewess"), "jewess" );
	deepEqual( Stem("jewish"), "jewish" );
	deepEqual( Stem("jews"), "jew" );
	deepEqual( Stem("jezebel"), "jezebel" );
	deepEqual( Stem("jilted"), "jilt" );
	deepEqual( Stem("jingle"), "jingl" );
	deepEqual( Stem("jingled"), "jingl" );
	deepEqual( Stem("jingles"), "jingl" );
	deepEqual( Stem("jingling"), "jingl" );
	deepEqual( Stem("jist"), "jist" );
	deepEqual( Stem("jo"), "jo" );
	deepEqual( Stem("joan"), "joan" );
	deepEqual( Stem("joanna"), "joanna" );
	deepEqual( Stem("job"), "job" );
	deepEqual( Stem("jobbed"), "job" );
	deepEqual( Stem("jobling"), "jobl" );
	deepEqual( Stem("jobs"), "job" );
	deepEqual( Stem("jockey"), "jockey" );
	deepEqual( Stem("jocose"), "jocos" );
	deepEqual( Stem("jocosely"), "jocos" );
	deepEqual( Stem("jocoseness"), "jocos" );
	deepEqual( Stem("jocular"), "jocular" );
	deepEqual( Stem("jocularity"), "jocular" );
	deepEqual( Stem("jocularly"), "jocular" );
	deepEqual( Stem("jocundity"), "jocund" );
	deepEqual( Stem("joe"), "joe" );
	deepEqual( Stem("joful"), "joful" );
	deepEqual( Stem("jog"), "jog" );
	deepEqual( Stem("jogg"), "jogg" );
	deepEqual( Stem("jogged"), "jog" );
	deepEqual( Stem("jogging"), "jog" );
	deepEqual( Stem("johann"), "johann" );
	deepEqual( Stem("john"), "john" );
	deepEqual( Stem("johnnie"), "johnni" );
	deepEqual( Stem("johnny"), "johnni" );
	deepEqual( Stem("johnson"), "johnson" );
	deepEqual( Stem("join"), "join" );
	deepEqual( Stem("joined"), "join" );
	deepEqual( Stem("joinin"), "joinin" );
	deepEqual( Stem("joining"), "join" );
	deepEqual( Stem("joins"), "join" );
	deepEqual( Stem("joint"), "joint" );
	deepEqual( Stem("jointly"), "joint" );
	deepEqual( Stem("joints"), "joint" );
	deepEqual( Stem("joke"), "joke" );
	deepEqual( Stem("joked"), "joke" );
	deepEqual( Stem("joker"), "joker" );
	deepEqual( Stem("jokers"), "joker" );
	deepEqual( Stem("jokes"), "joke" );
	deepEqual( Stem("joking"), "joke" );
	deepEqual( Stem("jolliest"), "jolliest" );
	deepEqual( Stem("jollity"), "jolliti" );
	deepEqual( Stem("jolly"), "jolli" );
	deepEqual( Stem("jolquera"), "jolquera" );
	deepEqual( Stem("jolt"), "jolt" );
	deepEqual( Stem("jolted"), "jolt" );
	deepEqual( Stem("jolter"), "jolter" );
	deepEqual( Stem("jolting"), "jolt" );
	deepEqual( Stem("jolts"), "jolt" );
	deepEqual( Stem("jones"), "jone" );
	deepEqual( Stem("joneses"), "jones" );
	deepEqual( Stem("joodle"), "joodl" );
	deepEqual( Stem("jordan"), "jordan" );
	deepEqual( Stem("jorullo"), "jorullo" );
	deepEqual( Stem("jose"), "jose" );
	deepEqual( Stem("joseph"), "joseph" );
	deepEqual( Stem("joshua"), "joshua" );
	deepEqual( Stem("jostle"), "jostl" );
	deepEqual( Stem("jostled"), "jostl" );
	deepEqual( Stem("jostling"), "jostl" );
	deepEqual( Stem("jot"), "jot" );
	deepEqual( Stem("jour"), "jour" );
	deepEqual( Stem("journ"), "journ" );
	deepEqual( Stem("journal"), "journal" );
	deepEqual( Stem("journalist"), "journalist" );
	deepEqual( Stem("journalistic"), "journalist" );
	deepEqual( Stem("journals"), "journal" );
	deepEqual( Stem("journey"), "journey" );
	deepEqual( Stem("journeyed"), "journey" );
	deepEqual( Stem("journeying"), "journey" );
	deepEqual( Stem("journeyings"), "journey" );
	deepEqual( Stem("journeyman"), "journeyman" );
	deepEqual( Stem("journeys"), "journey" );
	deepEqual( Stem("jove"), "jove" );
	deepEqual( Stem("jovial"), "jovial" );
	deepEqual( Stem("joviality"), "jovial" );
	deepEqual( Stem("jowl"), "jowl" );
	deepEqual( Stem("joy"), "joy" );
	deepEqual( Stem("joyed"), "joy" );
	deepEqual( Stem("joyful"), "joy" );
	deepEqual( Stem("joyfully"), "joy" );
	deepEqual( Stem("joyous"), "joyous" );
	deepEqual( Stem("joyously"), "joyous" );
	deepEqual( Stem("joyousness"), "joyous" );
	deepEqual( Stem("joys"), "joy" );
	deepEqual( Stem("juan"), "juan" );
	deepEqual( Stem("judah"), "judah" );
	deepEqual( Stem("judge"), "judg" );
	deepEqual( Stem("judged"), "judg" );
	deepEqual( Stem("judgement"), "judgement" );
	deepEqual( Stem("judges"), "judg" );
	deepEqual( Stem("judging"), "judg" );
	deepEqual( Stem("judgment"), "judgment" );
	deepEqual( Stem("judgments"), "judgment" );
	deepEqual( Stem("judicial"), "judici" );
	deepEqual( Stem("judicious"), "judici" );
	deepEqual( Stem("judiciously"), "judici" );
	deepEqual( Stem("judith"), "judith" );
	deepEqual( Stem("judy"), "judi" );
	deepEqual( Stem("juffy"), "juffi" );
	deepEqual( Stem("jug"), "jug" );
	deepEqual( Stem("juggle"), "juggl" );
	deepEqual( Stem("juggled"), "juggl" );
	deepEqual( Stem("juggler"), "juggler" );
	deepEqual( Stem("jugglery"), "juggleri" );
	deepEqual( Stem("jugs"), "jug" );
	deepEqual( Stem("jugular"), "jugular" );
	deepEqual( Stem("juice"), "juic" );
	deepEqual( Stem("juices"), "juic" );
	deepEqual( Stem("juicy"), "juici" );
	deepEqual( Stem("juillet"), "juillet" );
	deepEqual( Stem("julia"), "julia" );
	deepEqual( Stem("julian"), "julian" );
	deepEqual( Stem("juliet"), "juliet" );
	deepEqual( Stem("julius"), "julius" );
	deepEqual( Stem("july"), "juli" );
	deepEqual( Stem("jumble"), "jumbl" );
	deepEqual( Stem("jumbled"), "jumbl" );
	deepEqual( Stem("jumbling"), "jumbl" );
	deepEqual( Stem("jump"), "jump" );
	deepEqual( Stem("jumped"), "jump" );
	deepEqual( Stem("jumping"), "jump" );
	deepEqual( Stem("jumps"), "jump" );
	deepEqual( Stem("junction"), "junction" );
	deepEqual( Stem("juncture"), "junctur" );
	deepEqual( Stem("juncus"), "juncus" );
	deepEqual( Stem("june"), "june" );
	deepEqual( Stem("jungle"), "jungl" );
	deepEqual( Stem("jungles"), "jungl" );
	deepEqual( Stem("junior"), "junior" );
	deepEqual( Stem("juniorest"), "juniorest" );
	deepEqual( Stem("juniors"), "junior" );
	deepEqual( Stem("junk"), "junk" );
	deepEqual( Stem("jupiter"), "jupit" );
	deepEqual( Stem("jura"), "jura" );
	deepEqual( Stem("juries"), "juri" );
	deepEqual( Stem("jurisprudence"), "jurisprud" );
	deepEqual( Stem("juror"), "juror" );
	deepEqual( Stem("jurors"), "juror" );
	deepEqual( Stem("jury"), "juri" );
	deepEqual( Stem("juryman"), "juryman" );
	deepEqual( Stem("jurymen"), "jurymen" );
	deepEqual( Stem("just"), "just" );
	deepEqual( Stem("juster"), "juster" );
	deepEqual( Stem("justest"), "justest" );
	deepEqual( Stem("justice"), "justic" );
	deepEqual( Stem("justifiable"), "justifi" );
	deepEqual( Stem("justification"), "justif" );
	deepEqual( Stem("justifications"), "justif" );
	deepEqual( Stem("justified"), "justifi" );
	deepEqual( Stem("justifies"), "justifi" );
	deepEqual( Stem("justify"), "justifi" );
	deepEqual( Stem("justifying"), "justifi" );
	deepEqual( Stem("justitia"), "justitia" );
	deepEqual( Stem("justly"), "just" );
	deepEqual( Stem("jute"), "jute" );
	deepEqual( Stem("juvenile"), "juvenil" );
	deepEqual( Stem("juxtaposition"), "juxtaposit" );
	deepEqual( Stem("k"), "k" );
	deepEqual( Stem("kalydor"), "kalydor" );
	deepEqual( Stem("kammerjunker"), "kammerjunk" );
	deepEqual( Stem("kampfes"), "kampf" );
	deepEqual( Stem("kamtschatka"), "kamtschatka" );
	deepEqual( Stem("kangaroo"), "kangaroo" );
	deepEqual( Stem("kapernaumov"), "kapernaumov" );
	deepEqual( Stem("kapernaumovs"), "kapernaumov" );
	deepEqual( Stem("karl"), "karl" );
	deepEqual( Stem("karros"), "karro" );
	deepEqual( Stem("kate"), "kate" );
	deepEqual( Stem("kater"), "kater" );
	deepEqual( Stem("katerina"), "katerina" );
	deepEqual( Stem("katharina"), "katharina" );
	deepEqual( Stem("katia"), "katia" );
	deepEqual( Stem("kattymaly"), "kattymali" );
	deepEqual( Stem("kauri"), "kauri" );
	deepEqual( Stem("kazan"), "kazan" );
	deepEqual( Stem("keane"), "kean" );
	deepEqual( Stem("keating"), "keat" );
	deepEqual( Stem("keeling"), "keel" );
	deepEqual( Stem("keen"), "keen" );
	deepEqual( Stem("keener"), "keener" );
	deepEqual( Stem("keenest"), "keenest" );
	deepEqual( Stem("keenly"), "keen" );
	deepEqual( Stem("keenness"), "keen" );
	deepEqual( Stem("keep"), "keep" );
	deepEqual( Stem("keeper"), "keeper" );
	deepEqual( Stem("keepers"), "keeper" );
	deepEqual( Stem("keeping"), "keep" );
	deepEqual( Stem("keeps"), "keep" );
	deepEqual( Stem("keepsake"), "keepsak" );
	deepEqual( Stem("keepsakes"), "keepsak" );
	deepEqual( Stem("keine"), "kein" );
	deepEqual( Stem("kelp"), "kelp" );
	deepEqual( Stem("ken"), "ken" );
	deepEqual( Stem("kendall"), "kendal" );
	deepEqual( Stem("kenge"), "keng" );
	deepEqual( Stem("kennel"), "kennel" );
	deepEqual( Stem("kennels"), "kennel" );
	deepEqual( Stem("kennington"), "kennington" );
	deepEqual( Stem("kensington"), "kensington" );
	deepEqual( Stem("kent"), "kent" );
	deepEqual( Stem("kentish"), "kentish" );
	deepEqual( Stem("kenwigs"), "kenwig" );
	deepEqual( Stem("kenwigses"), "kenwigs" );
	deepEqual( Stem("kepler"), "kepler" );
	deepEqual( Stem("kept"), "kept" );
	deepEqual( Stem("kerchief"), "kerchief" );
	deepEqual( Stem("kerguelen"), "kerguelen" );
	deepEqual( Stem("kernel"), "kernel" );
	deepEqual( Stem("kerr"), "kerr" );
	deepEqual( Stem("kerrig"), "kerrig" );
	deepEqual( Stem("kettle"), "kettl" );
	deepEqual( Stem("kettles"), "kettl" );
	deepEqual( Stem("key"), "key" );
	deepEqual( Stem("keyhole"), "keyhol" );
	deepEqual( Stem("keyholes"), "keyhol" );
	deepEqual( Stem("keyne"), "keyn" );
	deepEqual( Stem("keys"), "key" );
	deepEqual( Stem("khan"), "khan" );
	deepEqual( Stem("kick"), "kick" );
	deepEqual( Stem("kicked"), "kick" );
	deepEqual( Stem("kicking"), "kick" );
	deepEqual( Stem("kicks"), "kick" );
	deepEqual( Stem("kid"), "kid" );
	deepEqual( Stem("kidnapped"), "kidnap" );
	deepEqual( Stem("kidnapper"), "kidnapp" );
	deepEqual( Stem("kidnapping"), "kidnap" );
	deepEqual( Stem("kidney"), "kidney" );
	deepEqual( Stem("kilda"), "kilda" );
	deepEqual( Stem("kill"), "kill" );
	deepEqual( Stem("killed"), "kill" );
	deepEqual( Stem("killer"), "killer" );
	deepEqual( Stem("killing"), "kill" );
	deepEqual( Stem("kills"), "kill" );
	deepEqual( Stem("kiln"), "kiln" );
	deepEqual( Stem("kilns"), "kiln" );
	deepEqual( Stem("kilt"), "kilt" );
	deepEqual( Stem("kimbo"), "kimbo" );
	deepEqual( Stem("kimiri"), "kimiri" );
	deepEqual( Stem("kimpelled"), "kimpel" );
	deepEqual( Stem("kin"), "kin" );
	deepEqual( Stem("kind"), "kind" );
	deepEqual( Stem("kinder"), "kinder" );
	deepEqual( Stem("kindest"), "kindest" );
	deepEqual( Stem("kindhearted"), "kindheart" );
	deepEqual( Stem("kindle"), "kindl" );
	deepEqual( Stem("kindled"), "kindl" );
	deepEqual( Stem("kindles"), "kindl" );
	deepEqual( Stem("kindlier"), "kindlier" );
	deepEqual( Stem("kindliest"), "kindliest" );
	deepEqual( Stem("kindliness"), "kindli" );
	deepEqual( Stem("kindling"), "kindl" );
	deepEqual( Stem("kindly"), "kind" );
	deepEqual( Stem("kindness"), "kind" );
	deepEqual( Stem("kindnesses"), "kind" );
	deepEqual( Stem("kindred"), "kindr" );
	deepEqual( Stem("kinds"), "kind" );
	deepEqual( Stem("king"), "king" );
	deepEqual( Stem("kingdom"), "kingdom" );
	deepEqual( Stem("kingdoms"), "kingdom" );
	deepEqual( Stem("kingfisher"), "kingfish" );
	deepEqual( Stem("kingly"), "king" );
	deepEqual( Stem("kings"), "king" );
	deepEqual( Stem("kingston"), "kingston" );
	deepEqual( Stem("kinkajou"), "kinkajou" );
	deepEqual( Stem("kinsman"), "kinsman" );
	deepEqual( Stem("kirby"), "kirbi" );
	deepEqual( Stem("kiss"), "kiss" );
	deepEqual( Stem("kissed"), "kiss" );
	deepEqual( Stem("kisses"), "kiss" );
	deepEqual( Stem("kissing"), "kiss" );
	deepEqual( Stem("kit"), "kit" );
	deepEqual( Stem("kitchen"), "kitchen" );
	deepEqual( Stem("kitchens"), "kitchen" );
	deepEqual( Stem("kitchin"), "kitchin" );
	deepEqual( Stem("kite"), "kite" );
	deepEqual( Stem("kitten"), "kitten" );
	deepEqual( Stem("kittlitz"), "kittlitz" );
	deepEqual( Stem("kitty"), "kitti" );
	deepEqual( Stem("klopstock"), "klopstock" );
	deepEqual( Stem("knack"), "knack" );
	deepEqual( Stem("knackeries"), "knackeri" );
	deepEqual( Stem("knacks"), "knack" );
	deepEqual( Stem("knag"), "knag" );
	deepEqual( Stem("knave"), "knave" );
	deepEqual( Stem("knaves"), "knave" );
	deepEqual( Stem("knavish"), "knavish" );
	deepEqual( Stem("kneaded"), "knead" );
	deepEqual( Stem("kneading"), "knead" );
	deepEqual( Stem("knee"), "knee" );
	deepEqual( Stem("kneel"), "kneel" );
	deepEqual( Stem("kneeled"), "kneel" );
	deepEqual( Stem("kneeling"), "kneel" );
	deepEqual( Stem("kneels"), "kneel" );
	deepEqual( Stem("knees"), "knee" );
	deepEqual( Stem("knell"), "knell" );
	deepEqual( Stem("knelt"), "knelt" );
	deepEqual( Stem("knew"), "knew" );
	deepEqual( Stem("knick"), "knick" );
	deepEqual( Stem("knif"), "knif" );
	deepEqual( Stem("knife"), "knife" );
	deepEqual( Stem("knight"), "knight" );
	deepEqual( Stem("knightly"), "knight" );
	deepEqual( Stem("knights"), "knight" );
	deepEqual( Stem("knit"), "knit" );
	deepEqual( Stem("knits"), "knit" );
	deepEqual( Stem("knitted"), "knit" );
	deepEqual( Stem("knitting"), "knit" );
	deepEqual( Stem("knives"), "knive" );
	deepEqual( Stem("knob"), "knob" );
	deepEqual( Stem("knobs"), "knob" );
	deepEqual( Stem("knock"), "knock" );
	deepEqual( Stem("knocked"), "knock" );
	deepEqual( Stem("knocker"), "knocker" );
	deepEqual( Stem("knockers"), "knocker" );
	deepEqual( Stem("knocking"), "knock" );
	deepEqual( Stem("knocks"), "knock" );
	deepEqual( Stem("knopp"), "knopp" );
	deepEqual( Stem("knot"), "knot" );
	deepEqual( Stem("knots"), "knot" );
	deepEqual( Stem("knotted"), "knot" );
	deepEqual( Stem("knotty"), "knotti" );
	deepEqual( Stem("know"), "know" );
	deepEqual( Stem("knowa"), "knowa" );
	deepEqual( Stem("knowd"), "knowd" );
	deepEqual( Stem("knowed"), "know" );
	deepEqual( Stem("knowest"), "knowest" );
	deepEqual( Stem("knoweth"), "knoweth" );
	deepEqual( Stem("knowin"), "knowin" );
	deepEqual( Stem("knowing"), "know" );
	deepEqual( Stem("knowledg"), "knowledg" );
	deepEqual( Stem("knowledge"), "knowledg" );
	deepEqual( Stem("known"), "known" );
	deepEqual( Stem("knows"), "know" );
	deepEqual( Stem("knuckle"), "knuckl" );
	deepEqual( Stem("knuckleboy"), "knuckleboy" );
	deepEqual( Stem("knuckles"), "knuckl" );
	deepEqual( Stem("kobelev"), "kobelev" );
	deepEqual( Stem("kobilatnikov"), "kobilatnikov" );
	deepEqual( Stem("koch"), "koch" );
	deepEqual( Stem("koeldwethout"), "koeldwethout" );
	deepEqual( Stem("kolomensky"), "kolomenski" );
	deepEqual( Stem("kolya"), "kolya" );
	deepEqual( Stem("kong"), "kong" );
	deepEqual( Stem("konig"), "konig" );
	deepEqual( Stem("koodle"), "koodl" );
	deepEqual( Stem("kororadika"), "kororadika" );
	deepEqual( Stem("kotzebue"), "kotzebu" );
	deepEqual( Stem("kozel"), "kozel" );
	deepEqual( Stem("krestovsky"), "krestovski" );
	deepEqual( Stem("kriegsrath"), "kriegsrath" );
	deepEqual( Stem("krook"), "krook" );
	deepEqual( Stem("kryukov"), "kryukov" );
	deepEqual( Stem("kuffy"), "kuffi" );
	deepEqual( Stem("l"), "l" );
	deepEqual( Stem("la"), "la" );
	deepEqual( Stem("label"), "label" );
	deepEqual( Stem("labelled"), "label" );
	deepEqual( Stem("labillardiere"), "labillardier" );
	deepEqual( Stem("laborious"), "labori" );
	deepEqual( Stem("laboriously"), "labori" );
	deepEqual( Stem("labour"), "labour" );
	deepEqual( Stem("laboured"), "labour" );
	deepEqual( Stem("labourer"), "labour" );
	deepEqual( Stem("labourers"), "labour" );
	deepEqual( Stem("labouring"), "labour" );
	deepEqual( Stem("labourious"), "labouri" );
	deepEqual( Stem("labours"), "labour" );
	deepEqual( Stem("laburnum"), "laburnum" );
	deepEqual( Stem("labyrinth"), "labyrinth" );
	deepEqual( Stem("labyrinths"), "labyrinth" );
	deepEqual( Stem("lace"), "lace" );
	deepEqual( Stem("laced"), "lace" );
	deepEqual( Stem("lacerate"), "lacer" );
	deepEqual( Stem("lacerta"), "lacerta" );
	deepEqual( Stem("laches"), "lach" );
	deepEqual( Stem("lachrymatories"), "lachrymatori" );
	deepEqual( Stem("lachrymose"), "lachrymos" );
	deepEqual( Stem("lacing"), "lace" );
	deepEqual( Stem("lack"), "lack" );
	deepEqual( Stem("lackadaisical"), "lackadais" );
	deepEqual( Stem("lacked"), "lack" );
	deepEqual( Stem("lacking"), "lack" );
	deepEqual( Stem("lacks"), "lack" );
	deepEqual( Stem("laconic"), "lacon" );
	deepEqual( Stem("lacquered"), "lacquer" );
	deepEqual( Stem("lad"), "lad" );
	deepEqual( Stem("ladder"), "ladder" );
	deepEqual( Stem("ladders"), "ladder" );
	deepEqual( Stem("lade"), "lade" );
	deepEqual( Stem("laden"), "laden" );
	deepEqual( Stem("laderas"), "ladera" );
	deepEqual( Stem("ladies"), "ladi" );
	deepEqual( Stem("ladle"), "ladl" );
	deepEqual( Stem("lads"), "lad" );
	deepEqual( Stem("lady"), "ladi" );
	deepEqual( Stem("ladyhood"), "ladyhood" );
	deepEqual( Stem("ladylike"), "ladylik" );
	deepEqual( Stem("ladyship"), "ladyship" );
	deepEqual( Stem("lag"), "lag" );
	deepEqual( Stem("laggard"), "laggard" );
	deepEqual( Stem("lagged"), "lag" );
	deepEqual( Stem("lagging"), "lag" );
	deepEqual( Stem("lagoa"), "lagoa" );
	deepEqual( Stem("lagoon"), "lagoon" );
	deepEqual( Stem("lagoons"), "lagoon" );
	deepEqual( Stem("lagostomus"), "lagostomus" );
	deepEqual( Stem("lags"), "lag" );
	deepEqual( Stem("laguna"), "laguna" );
	deepEqual( Stem("laid"), "laid" );
	deepEqual( Stem("lain"), "lain" );
	deepEqual( Stem("lair"), "lair" );
	deepEqual( Stem("laissez"), "laissez" );
	deepEqual( Stem("laity"), "laiti" );
	deepEqual( Stem("lajdak"), "lajdak" );
	deepEqual( Stem("lake"), "lake" );
	deepEqual( Stem("lakes"), "lake" );
	deepEqual( Stem("lalegraicavalca"), "lalegraicavalca" );
	deepEqual( Stem("lall"), "lall" );
	deepEqual( Stem("lalla"), "lalla" );
	deepEqual( Stem("lama"), "lama" );
	deepEqual( Stem("lamarck"), "lamarck" );
	deepEqual( Stem("lamb"), "lamb" );
	deepEqual( Stem("lambert"), "lambert" );
	deepEqual( Stem("lambeth"), "lambeth" );
	deepEqual( Stem("lambs"), "lamb" );
	deepEqual( Stem("lame"), "lame" );
	deepEqual( Stem("lamed"), "lame" );
	deepEqual( Stem("lamellicorn"), "lamellicorn" );
	deepEqual( Stem("lameness"), "lame" );
	deepEqual( Stem("lament"), "lament" );
	deepEqual( Stem("lamentable"), "lament" );
	deepEqual( Stem("lamentably"), "lament" );
	deepEqual( Stem("lamentation"), "lament" );
	deepEqual( Stem("lamentations"), "lament" );
	deepEqual( Stem("lamented"), "lament" );
	deepEqual( Stem("lamenting"), "lament" );
	deepEqual( Stem("laments"), "lament" );
	deepEqual( Stem("laminae"), "lamina" );
	deepEqual( Stem("lamp"), "lamp" );
	deepEqual( Stem("lamplight"), "lamplight" );
	deepEqual( Stem("lamplighter"), "lamplight" );
	deepEqual( Stem("lamps"), "lamp" );
	deepEqual( Stem("lampyridae"), "lampyrida" );
	deepEqual( Stem("lampyris"), "lampyri" );
	deepEqual( Stem("lancashire"), "lancashir" );
	deepEqual( Stem("lancaster"), "lancast" );
	deepEqual( Stem("lance"), "lanc" );
	deepEqual( Stem("lancerated"), "lancer" );
	deepEqual( Stem("land"), "land" );
	deepEqual( Stem("landed"), "land" );
	deepEqual( Stem("landing"), "land" );
	deepEqual( Stem("landings"), "land" );
	deepEqual( Stem("landlady"), "landladi" );
	deepEqual( Stem("landlord"), "landlord" );
	deepEqual( Stem("landmark"), "landmark" );
	deepEqual( Stem("landmarks"), "landmark" );
	deepEqual( Stem("landowner"), "landown" );
	deepEqual( Stem("landowners"), "landown" );
	deepEqual( Stem("lands"), "land" );
	deepEqual( Stem("landscape"), "landscap" );
	deepEqual( Stem("landseer"), "landseer" );
	deepEqual( Stem("landsman"), "landsman" );
	deepEqual( Stem("lane"), "lane" );
	deepEqual( Stem("lanes"), "lane" );
	deepEqual( Stem("langsdorff"), "langsdorff" );
	deepEqual( Stem("language"), "languag" );
	deepEqual( Stem("languages"), "languag" );
	deepEqual( Stem("languid"), "languid" );
	deepEqual( Stem("languidly"), "languid" );
	deepEqual( Stem("languish"), "languish" );
	deepEqual( Stem("languished"), "languish" );
	deepEqual( Stem("languishing"), "languish" );
	deepEqual( Stem("languor"), "languor" );
	deepEqual( Stem("langwedge"), "langwedg" );
	deepEqual( Stem("lank"), "lank" );
	deepEqual( Stem("lanky"), "lanki" );
	deepEqual( Stem("lantern"), "lantern" );
	deepEqual( Stem("lanterns"), "lantern" );
	deepEqual( Stem("lap"), "lap" );
	deepEqual( Stem("lapel"), "lapel" );
	deepEqual( Stem("lappel"), "lappel" );
	deepEqual( Stem("laps"), "lap" );
	deepEqual( Stem("lapse"), "laps" );
	deepEqual( Stem("lapsed"), "laps" );
	deepEqual( Stem("lapses"), "laps" );
	deepEqual( Stem("lapsing"), "laps" );
	deepEqual( Stem("lar"), "lar" );
	deepEqual( Stem("larcenerer"), "larcener" );
	deepEqual( Stem("larch"), "larch" );
	deepEqual( Stem("larg"), "larg" );
	deepEqual( Stem("large"), "larg" );
	deepEqual( Stem("largely"), "larg" );
	deepEqual( Stem("largeness"), "larg" );
	deepEqual( Stem("larger"), "larger" );
	deepEqual( Stem("largest"), "largest" );
	deepEqual( Stem("lark"), "lark" );
	deepEqual( Stem("larking"), "lark" );
	deepEqual( Stem("larks"), "lark" );
	deepEqual( Stem("larming"), "larm" );
	deepEqual( Stem("larry"), "larri" );
	deepEqual( Stem("larvae"), "larva" );
	deepEqual( Stem("las"), "las" );
	deepEqual( Stem("lash"), "lash" );
	deepEqual( Stem("lashed"), "lash" );
	deepEqual( Stem("lashes"), "lash" );
	deepEqual( Stem("lashing"), "lash" );
	deepEqual( Stem("lass"), "lass" );
	deepEqual( Stem("lassie"), "lassi" );
	deepEqual( Stem("lassitude"), "lassitud" );
	deepEqual( Stem("lassoit"), "lassoit" );
	deepEqual( Stem("lassonthwaite"), "lassonthwait" );
	deepEqual( Stem("lassonthwayte"), "lassonthwayt" );
	deepEqual( Stem("last"), "last" );
	deepEqual( Stem("lasted"), "last" );
	deepEqual( Stem("lasting"), "last" );
	deepEqual( Stem("lastly"), "last" );
	deepEqual( Stem("lasts"), "last" );
	deepEqual( Stem("lat"), "lat" );
	deepEqual( Stem("latch"), "latch" );
	deepEqual( Stem("latched"), "latch" );
	deepEqual( Stem("late"), "late" );
	deepEqual( Stem("latel"), "latel" );
	deepEqual( Stem("lately"), "late" );
	deepEqual( Stem("lateness"), "late" );
	deepEqual( Stem("latent"), "latent" );
	deepEqual( Stem("later"), "later" );
	deepEqual( Stem("lateral"), "later" );
	deepEqual( Stem("laterally"), "later" );
	deepEqual( Stem("latest"), "latest" );
	deepEqual( Stem("lath"), "lath" );
	deepEqual( Stem("lathered"), "lather" );
	deepEqual( Stem("latin"), "latin" );
	deepEqual( Stem("latinity"), "latin" );
	deepEqual( Stem("latitude"), "latitud" );
	deepEqual( Stem("latitudes"), "latitud" );
	deepEqual( Stem("latreille"), "latreill" );
	deepEqual( Stem("latro"), "latro" );
	deepEqual( Stem("latte"), "latt" );
	deepEqual( Stem("latter"), "latter" );
	deepEqual( Stem("latterly"), "latter" );
	deepEqual( Stem("latther"), "latther" );
	deepEqual( Stem("latthers"), "latther" );
	deepEqual( Stem("lattice"), "lattic" );
	deepEqual( Stem("latticed"), "lattic" );
	deepEqual( Stem("lattle"), "lattl" );
	deepEqual( Stem("laud"), "laud" );
	deepEqual( Stem("laudable"), "laudabl" );
	deepEqual( Stem("laudamus"), "laudamus" );
	deepEqual( Stem("laudation"), "laudat" );
	deepEqual( Stem("laudatory"), "laudatori" );
	deepEqual( Stem("lauded"), "laud" );
	deepEqual( Stem("laugh"), "laugh" );
	deepEqual( Stem("laughable"), "laughabl" );
	deepEqual( Stem("laughed"), "laugh" );
	deepEqual( Stem("laughing"), "laugh" );
	deepEqual( Stem("laughingly"), "laugh" );
	deepEqual( Stem("laughs"), "laugh" );
	deepEqual( Stem("laughter"), "laughter" );
	deepEqual( Stem("launch"), "launch" );
	deepEqual( Stem("launched"), "launch" );
	deepEqual( Stem("launching"), "launch" );
	deepEqual( Stem("laundry"), "laundri" );
	deepEqual( Stem("laura"), "laura" );
	deepEqual( Stem("laurance"), "lauranc" );
	deepEqual( Stem("laurel"), "laurel" );
	deepEqual( Stem("laurels"), "laurel" );
	deepEqual( Stem("laurence"), "laurenc" );
	deepEqual( Stem("lauzun"), "lauzun" );
	deepEqual( Stem("lav"), "lav" );
	deepEqual( Stem("lava"), "lava" );
	deepEqual( Stem("laval"), "laval" );
	deepEqual( Stem("lavas"), "lava" );
	deepEqual( Stem("lavender"), "lavend" );
	deepEqual( Stem("lavish"), "lavish" );
	deepEqual( Stem("lavished"), "lavish" );
	deepEqual( Stem("lavishly"), "lavish" );
	deepEqual( Stem("law"), "law" );
	deepEqual( Stem("lawful"), "law" );
	deepEqual( Stem("lawgiver"), "lawgiv" );
	deepEqual( Stem("lawk"), "lawk" );
	deepEqual( Stem("lawn"), "lawn" );
	deepEqual( Stem("lawns"), "lawn" );
	deepEqual( Stem("lawrence"), "lawrenc" );
	deepEqual( Stem("laws"), "law" );
	deepEqual( Stem("lawson"), "lawson" );
	deepEqual( Stem("lawstationers"), "lawstation" );
	deepEqual( Stem("lawsuit"), "lawsuit" );
	deepEqual( Stem("lawver"), "lawver" );
	deepEqual( Stem("lawyer"), "lawyer" );
	deepEqual( Stem("lawyers"), "lawyer" );
	deepEqual( Stem("lax"), "lax" );
	deepEqual( Stem("laxity"), "laxiti" );
	deepEqual( Stem("lay"), "lay" );
	deepEqual( Stem("layer"), "layer" );
	deepEqual( Stem("layers"), "layer" );
	deepEqual( Stem("layin"), "layin" );
	deepEqual( Stem("laying"), "lay" );
	deepEqual( Stem("laylec"), "laylec" );
	deepEqual( Stem("lays"), "lay" );
	deepEqual( Stem("layton"), "layton" );
	deepEqual( Stem("laz"), "laz" );
	deepEqual( Stem("lazarus"), "lazarus" );
	deepEqual( Stem("lazily"), "lazili" );
	deepEqual( Stem("laziness"), "lazi" );
	deepEqual( Stem("lazo"), "lazo" );
	deepEqual( Stem("lazoed"), "lazo" );
	deepEqual( Stem("lazos"), "lazo" );
	deepEqual( Stem("lazy"), "lazi" );
	deepEqual( Stem("lazzeretto"), "lazzeretto" );
	deepEqual( Stem("le"), "le" );
	deepEqual( Stem("lead"), "lead" );
	deepEqual( Stem("leaden"), "leaden" );
	deepEqual( Stem("leadenhall"), "leadenhal" );
	deepEqual( Stem("leader"), "leader" );
	deepEqual( Stem("leaders"), "leader" );
	deepEqual( Stem("leadership"), "leadership" );
	deepEqual( Stem("leading"), "lead" );
	deepEqual( Stem("leads"), "lead" );
	deepEqual( Stem("leaf"), "leaf" );
	deepEqual( Stem("leafed"), "leaf" );
	deepEqual( Stem("leafless"), "leafless" );
	deepEqual( Stem("leafy"), "leafi" );
	deepEqual( Stem("league"), "leagu" );
	deepEqual( Stem("leagued"), "leagu" );
	deepEqual( Stem("leagues"), "leagu" );
	deepEqual( Stem("leaked"), "leak" );
	deepEqual( Stem("lean"), "lean" );
	deepEqual( Stem("leaned"), "lean" );
	deepEqual( Stem("leaning"), "lean" );
	deepEqual( Stem("leanness"), "lean" );
	deepEqual( Stem("leans"), "lean" );
	deepEqual( Stem("leant"), "leant" );
	deepEqual( Stem("leap"), "leap" );
	deepEqual( Stem("leaped"), "leap" );
	deepEqual( Stem("leaper"), "leaper" );
	deepEqual( Stem("leaping"), "leap" );
	deepEqual( Stem("leapings"), "leap" );
	deepEqual( Stem("leapt"), "leapt" );
	deepEqual( Stem("lear"), "lear" );
	deepEqual( Stem("learn"), "learn" );
	deepEqual( Stem("learned"), "learn" );
	deepEqual( Stem("learners"), "learner" );
	deepEqual( Stem("learning"), "learn" );
	deepEqual( Stem("learns"), "learn" );
	deepEqual( Stem("learnt"), "learnt" );
	deepEqual( Stem("lease"), "leas" );
	deepEqual( Stem("leases"), "leas" );
	deepEqual( Stem("least"), "least" );
	deepEqual( Stem("leastways"), "leastway" );
	deepEqual( Stem("leather"), "leather" );
	deepEqual( Stem("leathern"), "leathern" );
	deepEqual( Stem("leave"), "leav" );
	deepEqual( Stem("leaves"), "leav" );
	deepEqual( Stem("leaving"), "leav" );
	deepEqual( Stem("lebanon"), "lebanon" );
	deepEqual( Stem("leben"), "leben" );
	deepEqual( Stem("lebeziatnikov"), "lebeziatnikov" );
	deepEqual( Stem("lecherousness"), "lecher" );
	deepEqual( Stem("lecture"), "lectur" );
	deepEqual( Stem("lectured"), "lectur" );
	deepEqual( Stem("lecturer"), "lectur" );
	deepEqual( Stem("lectures"), "lectur" );
	deepEqual( Stem("lecturing"), "lectur" );
	deepEqual( Stem("led"), "led" );
	deepEqual( Stem("ledge"), "ledg" );
	deepEqual( Stem("ledger"), "ledger" );
	deepEqual( Stem("ledgers"), "ledger" );
	deepEqual( Stem("ledges"), "ledg" );
	deepEqual( Stem("ledrook"), "ledrook" );
	deepEqual( Stem("leech"), "leech" );
	deepEqual( Stem("leek"), "leek" );
	deepEqual( Stem("leer"), "leer" );
	deepEqual( Stem("leered"), "leer" );
	deepEqual( Stem("leering"), "leer" );
	deepEqual( Stem("leetle"), "leetl" );
	deepEqual( Stem("leeuwin"), "leeuwin" );
	deepEqual( Stem("leeward"), "leeward" );
	deepEqual( Stem("left"), "left" );
	deepEqual( Stem("leg"), "leg" );
	deepEqual( Stem("legacy"), "legaci" );
	deepEqual( Stem("legal"), "legal" );
	deepEqual( Stem("legality"), "legal" );
	deepEqual( Stem("legally"), "legal" );
	deepEqual( Stem("legatee"), "legate" );
	deepEqual( Stem("legatees"), "legate" );
	deepEqual( Stem("legend"), "legend" );
	deepEqual( Stem("legendary"), "legendari" );
	deepEqual( Stem("legends"), "legend" );
	deepEqual( Stem("legged"), "leg" );
	deepEqual( Stem("leggings"), "leg" );
	deepEqual( Stem("legh"), "legh" );
	deepEqual( Stem("legibility"), "legibl" );
	deepEqual( Stem("legible"), "legibl" );
	deepEqual( Stem("legibly"), "legibl" );
	deepEqual( Stem("legion"), "legion" );
	deepEqual( Stem("legislation"), "legisl" );
	deepEqual( Stem("legislative"), "legisl" );
	deepEqual( Stem("legislator"), "legisl" );
	deepEqual( Stem("legislators"), "legisl" );
	deepEqual( Stem("legislature"), "legislatur" );
	deepEqual( Stem("legitimacy"), "legitimaci" );
	deepEqual( Stem("legitimate"), "legitim" );
	deepEqual( Stem("legs"), "leg" );
	deepEqual( Stem("leguminosae"), "leguminosa" );
	deepEqual( Stem("leicester"), "leicest" );
	deepEqual( Stem("leicestershire"), "leicestershir" );
	deepEqual( Stem("leighton"), "leighton" );
	deepEqual( Stem("leisure"), "leisur" );
	deepEqual( Stem("leisurely"), "leisur" );
	deepEqual( Stem("lemen"), "lemen" );
	deepEqual( Stem("lemon"), "lemon" );
	deepEqual( Stem("lemonade"), "lemonad" );
	deepEqual( Stem("lemons"), "lemon" );
	deepEqual( Stem("lemuel"), "lemuel" );
	deepEqual( Stem("lemuy"), "lemuy" );
	deepEqual( Stem("len"), "len" );
	deepEqual( Stem("lend"), "lend" );
	deepEqual( Stem("lender"), "lender" );
	deepEqual( Stem("lenders"), "lender" );
	deepEqual( Stem("lending"), "lend" );
	deepEqual( Stem("lends"), "lend" );
	deepEqual( Stem("length"), "length" );
	deepEqual( Stem("lengthen"), "lengthen" );
	deepEqual( Stem("lengthened"), "lengthen" );
	deepEqual( Stem("lengths"), "length" );
	deepEqual( Stem("lengthy"), "lengthi" );
	deepEqual( Stem("lenient"), "lenient" );
	deepEqual( Stem("leniently"), "lenient" );
	deepEqual( Stem("lenning"), "len" );
	deepEqual( Stem("lenou"), "lenou" );
	deepEqual( Stem("lens"), "len" );
	deepEqual( Stem("lent"), "lent" );
	deepEqual( Stem("lentils"), "lentil" );
	deepEqual( Stem("lenville"), "lenvill" );
	deepEqual( Stem("leone"), "leon" );
	deepEqual( Stem("leoneros"), "leonero" );
	deepEqual( Stem("leoville"), "leovill" );
	deepEqual( Stem("lepidoptera"), "lepidoptera" );
	deepEqual( Stem("lepus"), "lepus" );
	deepEqual( Stem("les"), "les" );
	deepEqual( Stem("leslie"), "lesli" );
	deepEqual( Stem("less"), "less" );
	deepEqual( Stem("lessen"), "lessen" );
	deepEqual( Stem("lessened"), "lessen" );
	deepEqual( Stem("lessening"), "lessen" );
	deepEqual( Stem("lesser"), "lesser" );
	deepEqual( Stem("lesson"), "lesson" );
	deepEqual( Stem("lessons"), "lesson" );
	deepEqual( Stem("lest"), "lest" );
	deepEqual( Stem("let"), "let" );
	deepEqual( Stem("lethargic"), "letharg" );
	deepEqual( Stem("lethargy"), "lethargi" );
	deepEqual( Stem("lethe"), "leth" );
	deepEqual( Stem("lets"), "let" );
	deepEqual( Stem("lett"), "lett" );
	deepEqual( Stem("letter"), "letter" );
	deepEqual( Stem("letters"), "letter" );
	deepEqual( Stem("letting"), "let" );
	deepEqual( Stem("lettres"), "lettr" );
	deepEqual( Stem("lettuce"), "lettuc" );
	deepEqual( Stem("lettuces"), "lettuc" );
	deepEqual( Stem("leurs"), "leur" );
	deepEqual( Stem("levanted"), "levant" );
	deepEqual( Stem("leve"), "leve" );
	deepEqual( Stem("levees"), "leve" );
	deepEqual( Stem("level"), "level" );
	deepEqual( Stem("levelle"), "levell" );
	deepEqual( Stem("levelled"), "level" );
	deepEqual( Stem("levelling"), "level" );
	deepEqual( Stem("levels"), "level" );
	deepEqual( Stem("levers"), "lever" );
	deepEqual( Stem("levities"), "leviti" );
	deepEqual( Stem("levity"), "leviti" );
	deepEqual( Stem("lewes"), "lew" );
	deepEqual( Stem("lewis"), "lewi" );
	deepEqual( Stem("li"), "li" );
	deepEqual( Stem("liabilities"), "liabil" );
	deepEqual( Stem("liability"), "liabil" );
	deepEqual( Stem("liable"), "liabl" );
	deepEqual( Stem("liana"), "liana" );
	deepEqual( Stem("liar"), "liar" );
	deepEqual( Stem("libation"), "libat" );
	deepEqual( Stem("libel"), "libel" );
	deepEqual( Stem("liberal"), "liber" );
	deepEqual( Stem("liberalism"), "liber" );
	deepEqual( Stem("liberality"), "liber" );
	deepEqual( Stem("liberally"), "liber" );
	deepEqual( Stem("liberals"), "liber" );
	deepEqual( Stem("liberate"), "liber" );
	deepEqual( Stem("liberated"), "liber" );
	deepEqual( Stem("liberates"), "liber" );
	deepEqual( Stem("liberties"), "liberti" );
	deepEqual( Stem("libertine"), "libertin" );
	deepEqual( Stem("libertines"), "libertin" );
	deepEqual( Stem("liberty"), "liberti" );
	deepEqual( Stem("librarian"), "librarian" );
	deepEqual( Stem("libraries"), "librari" );
	deepEqual( Stem("library"), "librari" );
	deepEqual( Stem("lice"), "lice" );
	deepEqual( Stem("licence"), "licenc" );
	deepEqual( Stem("licences"), "licenc" );
	deepEqual( Stem("license"), "licens" );
	deepEqual( Stem("licensed"), "licens" );
	deepEqual( Stem("licenses"), "licens" );
	deepEqual( Stem("licentious"), "licenti" );
	deepEqual( Stem("licentiousness"), "licenti" );
	deepEqual( Stem("lichen"), "lichen" );
	deepEqual( Stem("lichens"), "lichen" );
	deepEqual( Stem("lichtenstein"), "lichtenstein" );
	deepEqual( Stem("licked"), "lick" );
	deepEqual( Stem("licking"), "lick" );
	deepEqual( Stem("lid"), "lid" );
	deepEqual( Stem("lida"), "lida" );
	deepEqual( Stem("lids"), "lid" );
	deepEqual( Stem("lie"), "lie" );
	deepEqual( Stem("liebig"), "liebig" );
	deepEqual( Stem("lied"), "lie" );
	deepEqual( Stem("lies"), "lie" );
	deepEqual( Stem("liesk"), "liesk" );
	deepEqual( Stem("lieu"), "lieu" );
	deepEqual( Stem("lieut"), "lieut" );
	deepEqual( Stem("lieutenancies"), "lieuten" );
	deepEqual( Stem("lieutenant"), "lieuten" );
	deepEqual( Stem("lieutenants"), "lieuten" );
	deepEqual( Stem("life"), "life" );
	deepEqual( Stem("lifeless"), "lifeless" );
	deepEqual( Stem("lifetime"), "lifetim" );
	deepEqual( Stem("lift"), "lift" );
	deepEqual( Stem("lifted"), "lift" );
	deepEqual( Stem("lifting"), "lift" );
	deepEqual( Stem("lifts"), "lift" );
	deepEqual( Stem("ligament"), "ligament" );
	deepEqual( Stem("ligaments"), "ligament" );
	deepEqual( Stem("ligh"), "ligh" );
	deepEqual( Stem("light"), "light" );
	deepEqual( Stem("lighted"), "light" );
	deepEqual( Stem("lighten"), "lighten" );
	deepEqual( Stem("lightened"), "lighten" );
	deepEqual( Stem("lightening"), "lighten" );
	deepEqual( Stem("lightens"), "lighten" );
	deepEqual( Stem("lighter"), "lighter" );
	deepEqual( Stem("lightest"), "lightest" );
	deepEqual( Stem("lightheaded"), "lighthead" );
	deepEqual( Stem("lighthearted"), "lightheart" );
	deepEqual( Stem("lighthouse"), "lighthous" );
	deepEqual( Stem("lighthouses"), "lighthous" );
	deepEqual( Stem("lighting"), "light" );
	deepEqual( Stem("lightly"), "light" );
	deepEqual( Stem("lightness"), "light" );
	deepEqual( Stem("lightning"), "lightn" );
	deepEqual( Stem("lights"), "light" );
	deepEqual( Stem("lightsome"), "lightsom" );
	deepEqual( Stem("lignite"), "lignit" );
	deepEqual( Stem("lignum"), "lignum" );
	deepEqual( Stem("lii"), "lii" );
	deepEqual( Stem("liii"), "liii" );
	deepEqual( Stem("lik"), "lik" );
	deepEqual( Stem("like"), "like" );
	deepEqual( Stem("liked"), "like" );
	deepEqual( Stem("likelier"), "likeli" );
	deepEqual( Stem("likelihood"), "likelihood" );
	deepEqual( Stem("likely"), "like" );
	deepEqual( Stem("likened"), "liken" );
	deepEqual( Stem("likeness"), "like" );
	deepEqual( Stem("likenesses"), "like" );
	deepEqual( Stem("likes"), "like" );
	deepEqual( Stem("likewise"), "likewis" );
	deepEqual( Stem("liking"), "like" );
	deepEqual( Stem("likings"), "like" );
	deepEqual( Stem("lilac"), "lilac" );
	deepEqual( Stem("lilaceous"), "lilac" );
	deepEqual( Stem("lilacs"), "lilac" );
	deepEqual( Stem("liliaceous"), "liliac" );
	deepEqual( Stem("lilies"), "lili" );
	deepEqual( Stem("lilliput"), "lilliput" );
	deepEqual( Stem("lillyvick"), "lillyvick" );
	deepEqual( Stem("lillyvicks"), "lillyvick" );
	deepEqual( Stem("lily"), "lili" );
	deepEqual( Stem("lima"), "lima" );
	deepEqual( Stem("limache"), "limach" );
	deepEqual( Stem("limb"), "limb" );
	deepEqual( Stem("limbs"), "limb" );
	deepEqual( Stem("lime"), "lime" );
	deepEqual( Stem("limes"), "lime" );
	deepEqual( Stem("limestone"), "limeston" );
	deepEqual( Stem("limit"), "limit" );
	deepEqual( Stem("limited"), "limit" );
	deepEqual( Stem("limiting"), "limit" );
	deepEqual( Stem("limits"), "limit" );
	deepEqual( Stem("limnaea"), "limnaea" );
	deepEqual( Stem("limp"), "limp" );
	deepEqual( Stem("limped"), "limp" );
	deepEqual( Stem("limpet"), "limpet" );
	deepEqual( Stem("limpid"), "limpid" );
	deepEqual( Stem("limping"), "limp" );
	deepEqual( Stem("lin"), "lin" );
	deepEqual( Stem("lincoln"), "lincoln" );
	deepEqual( Stem("lincolnshire"), "lincolnshir" );
	deepEqual( Stem("line"), "line" );
	deepEqual( Stem("linea"), "linea" );
	deepEqual( Stem("lineage"), "lineag" );
	deepEqual( Stem("lineament"), "lineament" );
	deepEqual( Stem("lineaments"), "lineament" );
	deepEqual( Stem("linear"), "linear" );
	deepEqual( Stem("lined"), "line" );
	deepEqual( Stem("linen"), "linen" );
	deepEqual( Stem("linendraper"), "linendrap" );
	deepEqual( Stem("lines"), "line" );
	deepEqual( Stem("linger"), "linger" );
	deepEqual( Stem("lingered"), "linger" );
	deepEqual( Stem("lingering"), "linger" );
	deepEqual( Stem("lingerings"), "linger" );
	deepEqual( Stem("lingers"), "linger" );
	deepEqual( Stem("linguist"), "linguist" );
	deepEqual( Stem("lining"), "line" );
	deepEqual( Stem("linings"), "line" );
	deepEqual( Stem("link"), "link" );
	deepEqual( Stem("linked"), "link" );
	deepEqual( Stem("linking"), "link" );
	deepEqual( Stem("linkinwater"), "linkinwat" );
	deepEqual( Stem("links"), "link" );
	deepEqual( Stem("linn"), "linn" );
	deepEqual( Stem("linnaean"), "linnaean" );
	deepEqual( Stem("linnean"), "linnean" );
	deepEqual( Stem("linnets"), "linnet" );
	deepEqual( Stem("lintels"), "lintel" );
	deepEqual( Stem("lion"), "lion" );
	deepEqual( Stem("lioness"), "lioness" );
	deepEqual( Stem("lions"), "lion" );
	deepEqual( Stem("lip"), "lip" );
	deepEqual( Stem("lippevechsel"), "lippevechsel" );
	deepEqual( Stem("lipping"), "lip" );
	deepEqual( Stem("lips"), "lip" );
	deepEqual( Stem("liquid"), "liquid" );
	deepEqual( Stem("liquidating"), "liquid" );
	deepEqual( Stem("liquor"), "liquor" );
	deepEqual( Stem("liquorish"), "liquorish" );
	deepEqual( Stem("liquors"), "liquor" );
	deepEqual( Stem("lisbon"), "lisbon" );
	deepEqual( Stem("lisp"), "lisp" );
	deepEqual( Stem("list"), "list" );
	deepEqual( Stem("listed"), "list" );
	deepEqual( Stem("listen"), "listen" );
	deepEqual( Stem("listened"), "listen" );
	deepEqual( Stem("listener"), "listen" );
	deepEqual( Stem("listeners"), "listen" );
	deepEqual( Stem("listening"), "listen" );
	deepEqual( Stem("listenings"), "listen" );
	deepEqual( Stem("listens"), "listen" );
	deepEqual( Stem("listless"), "listless" );
	deepEqual( Stem("listlessly"), "listless" );
	deepEqual( Stem("listlessness"), "listless" );
	deepEqual( Stem("lists"), "list" );
	deepEqual( Stem("lit"), "lit" );
	deepEqual( Stem("litany"), "litani" );
	deepEqual( Stem("literal"), "liter" );
	deepEqual( Stem("literally"), "liter" );
	deepEqual( Stem("literary"), "literari" );
	deepEqual( Stem("literature"), "literatur" );
	deepEqual( Stem("lithe"), "lith" );
	deepEqual( Stem("lithographic"), "lithograph" );
	deepEqual( Stem("litigation"), "litig" );
	deepEqual( Stem("litigious"), "litigi" );
	deepEqual( Stem("litter"), "litter" );
	deepEqual( Stem("littered"), "litter" );
	deepEqual( Stem("littering"), "litter" );
	deepEqual( Stem("littl"), "littl" );
	deepEqual( Stem("little"), "littl" );
	deepEqual( Stem("littleness"), "littl" );
	deepEqual( Stem("littlenesses"), "littl" );
	deepEqual( Stem("littlest"), "littlest" );
	deepEqual( Stem("littoral"), "littor" );
	deepEqual( Stem("liv"), "liv" );
	deepEqual( Stem("live"), "live" );
	deepEqual( Stem("lived"), "live" );
	deepEqual( Stem("livelier"), "liveli" );
	deepEqual( Stem("liveliest"), "liveliest" );
	deepEqual( Stem("livelihood"), "livelihood" );
	deepEqual( Stem("liveliness"), "liveli" );
	deepEqual( Stem("livelong"), "livelong" );
	deepEqual( Stem("lively"), "live" );
	deepEqual( Stem("liver"), "liver" );
	deepEqual( Stem("liveried"), "liveri" );
	deepEqual( Stem("liveries"), "liveri" );
	deepEqual( Stem("liverpool"), "liverpool" );
	deepEqual( Stem("livers"), "liver" );
	deepEqual( Stem("livery"), "liveri" );
	deepEqual( Stem("lives"), "live" );
	deepEqual( Stem("livest"), "livest" );
	deepEqual( Stem("liveth"), "liveth" );
	deepEqual( Stem("livid"), "livid" );
	deepEqual( Stem("living"), "live" );
	deepEqual( Stem("livingstone"), "livingston" );
	deepEqual( Stem("lix"), "lix" );
	deepEqual( Stem("liz"), "liz" );
	deepEqual( Stem("lizard"), "lizard" );
	deepEqual( Stem("lizards"), "lizard" );
	deepEqual( Stem("lizaveta"), "lizaveta" );
	deepEqual( Stem("lizzie"), "lizzi" );
	deepEqual( Stem("lizzy"), "lizzi" );
	deepEqual( Stem("ll"), "ll" );
	deepEqual( Stem("llama"), "llama" );
	deepEqual( Stem("llandaff"), "llandaff" );
	deepEqual( Stem("llanos"), "llano" );
	deepEqual( Stem("lloyd"), "lloyd" );
	deepEqual( Stem("llth"), "llth" );
	deepEqual( Stem("lmmediately"), "lmmediat" );
	deepEqual( Stem("lo"), "lo" );
	deepEqual( Stem("load"), "load" );
	deepEqual( Stem("loaded"), "load" );
	deepEqual( Stem("loading"), "load" );
	deepEqual( Stem("loads"), "load" );
	deepEqual( Stem("loaf"), "loaf" );
	deepEqual( Stem("loam"), "loam" );
	deepEqual( Stem("loan"), "loan" );
	deepEqual( Stem("loans"), "loan" );
	deepEqual( Stem("loath"), "loath" );
	deepEqual( Stem("loathe"), "loath" );
	deepEqual( Stem("loathed"), "loath" );
	deepEqual( Stem("loathing"), "loath" );
	deepEqual( Stem("loathsome"), "loathsom" );
	deepEqual( Stem("loathsomeness"), "loathsom" );
	deepEqual( Stem("loaves"), "loav" );
	deepEqual( Stem("lobbies"), "lobbi" );
	deepEqual( Stem("lobby"), "lobbi" );
	deepEqual( Stem("lobster"), "lobster" );
	deepEqual( Stem("lobsters"), "lobster" );
	deepEqual( Stem("local"), "local" );
	deepEqual( Stem("locality"), "local" );
	deepEqual( Stem("locations"), "locat" );
	deepEqual( Stem("lochness"), "loch" );
	deepEqual( Stem("lock"), "lock" );
	deepEqual( Stem("locked"), "lock" );
	deepEqual( Stem("locket"), "locket" );
	deepEqual( Stem("locking"), "lock" );
	deepEqual( Stem("lockouts"), "lockout" );
	deepEqual( Stem("locks"), "lock" );
	deepEqual( Stem("locksmiths"), "locksmith" );
	deepEqual( Stem("lockyer"), "lockyer" );
	deepEqual( Stem("locock"), "locock" );
	deepEqual( Stem("lococks"), "locock" );
	deepEqual( Stem("locomotion"), "locomot" );
	deepEqual( Stem("locomotive"), "locomot" );
	deepEqual( Stem("locomotives"), "locomot" );
	deepEqual( Stem("locust"), "locust" );
	deepEqual( Stem("locusts"), "locust" );
	deepEqual( Stem("lod"), "lod" );
	deepEqual( Stem("lodge"), "lodg" );
	deepEqual( Stem("lodged"), "lodg" );
	deepEqual( Stem("lodger"), "lodger" );
	deepEqual( Stem("lodgers"), "lodger" );
	deepEqual( Stem("lodges"), "lodg" );
	deepEqual( Stem("lodging"), "lodg" );
	deepEqual( Stem("lodgings"), "lodg" );
	deepEqual( Stem("loft"), "loft" );
	deepEqual( Stem("loftiest"), "loftiest" );
	deepEqual( Stem("loftily"), "loftili" );
	deepEqual( Stem("loftiness"), "lofti" );
	deepEqual( Stem("lofty"), "lofti" );
	deepEqual( Stem("log"), "log" );
	deepEqual( Stem("loggerheaded"), "loggerhead" );
	deepEqual( Stem("loggerheads"), "loggerhead" );
	deepEqual( Stem("logic"), "logic" );
	deepEqual( Stem("logical"), "logic" );
	deepEqual( Stem("logically"), "logic" );
	deepEqual( Stem("logs"), "log" );
	deepEqual( Stem("loight"), "loight" );
	deepEqual( Stem("loike"), "loik" );
	deepEqual( Stem("loikewise"), "loikewis" );
	deepEqual( Stem("loins"), "loin" );
	deepEqual( Stem("loiter"), "loiter" );
	deepEqual( Stem("loitered"), "loiter" );
	deepEqual( Stem("loiterer"), "loiter" );
	deepEqual( Stem("loiterers"), "loiter" );
	deepEqual( Stem("loitering"), "loiter" );
	deepEqual( Stem("loix"), "loix" );
	deepEqual( Stem("loll"), "loll" );
	deepEqual( Stem("lolling"), "loll" );
	deepEqual( Stem("lombard"), "lombard" );
	deepEqual( Stem("lombardic"), "lombard" );
	deepEqual( Stem("lon"), "lon" );
	deepEqual( Stem("lond"), "lond" );
	deepEqual( Stem("london"), "london" );
	deepEqual( Stem("lone"), "lone" );
	deepEqual( Stem("lonelier"), "loneli" );
	deepEqual( Stem("loneliness"), "loneli" );
	deepEqual( Stem("lonely"), "lone" );
	deepEqual( Stem("lonesome"), "lonesom" );
	deepEqual( Stem("long"), "long" );
	deepEqual( Stem("longbarns"), "longbarn" );
	deepEqual( Stem("longed"), "long" );
	deepEqual( Stem("longer"), "longer" );
	deepEqual( Stem("longest"), "longest" );
	deepEqual( Stem("longevity"), "longev" );
	deepEqual( Stem("longing"), "long" );
	deepEqual( Stem("longings"), "long" );
	deepEqual( Stem("longitude"), "longitud" );
	deepEqual( Stem("longitudinal"), "longitudin" );
	deepEqual( Stem("longitudinally"), "longitudin" );
	deepEqual( Stem("longs"), "long" );
	deepEqual( Stem("longwood"), "longwood" );
	deepEqual( Stem("loo"), "loo" );
	deepEqual( Stem("looder"), "looder" );
	deepEqual( Stem("loodgin"), "loodgin" );
	deepEqual( Stem("loodle"), "loodl" );
	deepEqual( Stem("look"), "look" );
	deepEqual( Stem("looked"), "look" );
	deepEqual( Stem("lookee"), "looke" );
	deepEqual( Stem("looker"), "looker" );
	deepEqual( Stem("lookers"), "looker" );
	deepEqual( Stem("looking"), "look" );
	deepEqual( Stem("looks"), "look" );
	deepEqual( Stem("lookye"), "looky" );
	deepEqual( Stem("loom"), "loom" );
	deepEqual( Stem("loomed"), "loom" );
	deepEqual( Stem("looming"), "loom" );
	deepEqual( Stem("looms"), "loom" );
	deepEqual( Stem("loonching"), "loonch" );
	deepEqual( Stem("loone"), "loon" );
	deepEqual( Stem("loop"), "loop" );
	deepEqual( Stem("loopholes"), "loophol" );
	deepEqual( Stem("loose"), "loos" );
	deepEqual( Stem("loosed"), "loos" );
	deepEqual( Stem("loosely"), "loos" );
	deepEqual( Stem("loosen"), "loosen" );
	deepEqual( Stem("loosened"), "loosen" );
	deepEqual( Stem("looseness"), "loos" );
	deepEqual( Stem("loosening"), "loosen" );
	deepEqual( Stem("looser"), "looser" );
	deepEqual( Stem("loosing"), "loos" );
	deepEqual( Stem("loov"), "loov" );
	deepEqual( Stem("lop"), "lop" );
	deepEqual( Stem("lopez"), "lopez" );
	deepEqual( Stem("lopezes"), "lopez" );
	deepEqual( Stem("lopezites"), "lopezit" );
	deepEqual( Stem("lopped"), "lop" );
	deepEqual( Stem("loppings"), "lop" );
	deepEqual( Stem("loquacious"), "loquaci" );
	deepEqual( Stem("lor"), "lor" );
	deepEqual( Stem("lord"), "lord" );
	deepEqual( Stem("lordlings"), "lordl" );
	deepEqual( Stem("lordly"), "lord" );
	deepEqual( Stem("lords"), "lord" );
	deepEqual( Stem("lordship"), "lordship" );
	deepEqual( Stem("lordships"), "lordship" );
	deepEqual( Stem("lorenzo"), "lorenzo" );
	deepEqual( Stem("los"), "los" );
	deepEqual( Stem("lose"), "lose" );
	deepEqual( Stem("loser"), "loser" );
	deepEqual( Stem("losers"), "loser" );
	deepEqual( Stem("loses"), "lose" );
	deepEqual( Stem("losing"), "lose" );
	deepEqual( Stem("loss"), "loss" );
	deepEqual( Stem("losses"), "loss" );
	deepEqual( Stem("lost"), "lost" );
	deepEqual( Stem("lot"), "lot" );
	deepEqual( Stem("lothbury"), "lothburi" );
	deepEqual( Stem("lots"), "lot" );
	deepEqual( Stem("lottery"), "lotteri" );
	deepEqual( Stem("loud"), "loud" );
	deepEqual( Stem("louder"), "louder" );
	deepEqual( Stem("loudest"), "loudest" );
	deepEqual( Stem("loudly"), "loud" );
	deepEqual( Stem("loudness"), "loud" );
	deepEqual( Stem("louis"), "loui" );
	deepEqual( Stem("louisa"), "louisa" );
	deepEqual( Stem("lounge"), "loung" );
	deepEqual( Stem("lounged"), "loung" );
	deepEqual( Stem("lounger"), "lounger" );
	deepEqual( Stem("loungers"), "lounger" );
	deepEqual( Stem("lounges"), "loung" );
	deepEqual( Stem("lounging"), "loung" );
	deepEqual( Stem("lous"), "lous" );
	deepEqual( Stem("louse"), "lous" );
	deepEqual( Stem("louvain"), "louvain" );
	deepEqual( Stem("lovable"), "lovabl" );
	deepEqual( Stem("love"), "love" );
	deepEqual( Stem("loveable"), "loveabl" );
	deepEqual( Stem("loved"), "love" );
	deepEqual( Stem("lovelier"), "loveli" );
	deepEqual( Stem("loveliest"), "loveliest" );
	deepEqual( Stem("loveliness"), "loveli" );
	deepEqual( Stem("lovely"), "love" );
	deepEqual( Stem("lover"), "lover" );
	deepEqual( Stem("lovers"), "lover" );
	deepEqual( Stem("loves"), "love" );
	deepEqual( Stem("loving"), "love" );
	deepEqual( Stem("lovingly"), "love" );
	deepEqual( Stem("lovingness"), "loving" );
	deepEqual( Stem("low"), "low" );
	deepEqual( Stem("lower"), "lower" );
	deepEqual( Stem("lowered"), "lower" );
	deepEqual( Stem("lowering"), "lower" );
	deepEqual( Stem("lowers"), "lower" );
	deepEqual( Stem("lowest"), "lowest" );
	deepEqual( Stem("lowland"), "lowland" );
	deepEqual( Stem("lowliest"), "lowliest" );
	deepEqual( Stem("lowliness"), "lowli" );
	deepEqual( Stem("lowly"), "lowli" );
	deepEqual( Stem("lowness"), "low" );
	deepEqual( Stem("loyal"), "loyal" );
	deepEqual( Stem("loyalty"), "loyalti" );
	deepEqual( Stem("lozenge"), "lozeng" );
	deepEqual( Stem("lozenges"), "lozeng" );
	deepEqual( Stem("lt"), "lt" );
	deepEqual( Stem("lubricates"), "lubric" );
	deepEqual( Stem("lucanee"), "lucane" );
	deepEqual( Stem("lucia"), "lucia" );
	deepEqual( Stem("luciano"), "luciano" );
	deepEqual( Stem("lucid"), "lucid" );
	deepEqual( Stem("lucidly"), "lucid" );
	deepEqual( Stem("lucifer"), "lucif" );
	deepEqual( Stem("lucifers"), "lucif" );
	deepEqual( Stem("luck"), "luck" );
	deepEqual( Stem("luckiest"), "luckiest" );
	deepEqual( Stem("luckily"), "luckili" );
	deepEqual( Stem("luckless"), "luckless" );
	deepEqual( Stem("lucky"), "lucki" );
	deepEqual( Stem("lucrative"), "lucrat" );
	deepEqual( Stem("lucre"), "lucr" );
	deepEqual( Stem("lucy"), "luci" );
	deepEqual( Stem("lud"), "lud" );
	deepEqual( Stem("ludgate"), "ludgat" );
	deepEqual( Stem("ludicrous"), "ludicr" );
	deepEqual( Stem("ludicrously"), "ludicr" );
	deepEqual( Stem("ludship"), "ludship" );
	deepEqual( Stem("ludwigovna"), "ludwigovna" );
	deepEqual( Stem("luffy"), "luffi" );
	deepEqual( Stem("luggage"), "luggag" );
	deepEqual( Stem("lugged"), "lug" );
	deepEqual( Stem("lui"), "lui" );
	deepEqual( Stem("luis"), "lui" );
	deepEqual( Stem("luise"), "luis" );
	deepEqual( Stem("lukewarm"), "lukewarm" );
	deepEqual( Stem("lukin"), "lukin" );
	deepEqual( Stem("lull"), "lull" );
	deepEqual( Stem("lullaby"), "lullabi" );
	deepEqual( Stem("lulled"), "lull" );
	deepEqual( Stem("lulling"), "lull" );
	deepEqual( Stem("lulls"), "lull" );
	deepEqual( Stem("lumb"), "lumb" );
	deepEqual( Stem("lumbagers"), "lumbag" );
	deepEqual( Stem("lumber"), "lumber" );
	deepEqual( Stem("lumbering"), "lumber" );
	deepEqual( Stem("lumbey"), "lumbey" );
	deepEqual( Stem("luminary"), "luminari" );
	deepEqual( Stem("luminosus"), "luminosus" );
	deepEqual( Stem("luminous"), "lumin" );
	deepEqual( Stem("lumley"), "lumley" );
	deepEqual( Stem("lump"), "lump" );
	deepEqual( Stem("lumpkin"), "lumpkin" );
	deepEqual( Stem("lumps"), "lump" );
	deepEqual( Stem("lumpy"), "lumpi" );
	deepEqual( Stem("lunacy"), "lunaci" );
	deepEqual( Stem("lunatic"), "lunat" );
	deepEqual( Stem("lunch"), "lunch" );
	deepEqual( Stem("luncheon"), "luncheon" );
	deepEqual( Stem("lunches"), "lunch" );
	deepEqual( Stem("lund"), "lund" );
	deepEqual( Stem("lunge"), "lung" );
	deepEqual( Stem("lungs"), "lung" );
	deepEqual( Stem("lunnun"), "lunnun" );
	deepEqual( Stem("lupton"), "lupton" );
	deepEqual( Stem("lurch"), "lurch" );
	deepEqual( Stem("lurched"), "lurch" );
	deepEqual( Stem("lure"), "lure" );
	deepEqual( Stem("lured"), "lure" );
	deepEqual( Stem("lures"), "lure" );
	deepEqual( Stem("lurid"), "lurid" );
	deepEqual( Stem("luring"), "lure" );
	deepEqual( Stem("lurk"), "lurk" );
	deepEqual( Stem("lurked"), "lurk" );
	deepEqual( Stem("lurking"), "lurk" );
	deepEqual( Stem("luscious"), "luscious" );
	deepEqual( Stem("lustfahrt"), "lustfahrt" );
	deepEqual( Stem("lustier"), "lustier" );
	deepEqual( Stem("lustily"), "lustili" );
	deepEqual( Stem("lustre"), "lustr" );
	deepEqual( Stem("lustreless"), "lustreless" );
	deepEqual( Stem("lustrous"), "lustrous" );
	deepEqual( Stem("lusts"), "lust" );
	deepEqual( Stem("lusty"), "lusti" );
	deepEqual( Stem("lute"), "lute" );
	deepEqual( Stem("luxan"), "luxan" );
	deepEqual( Stem("luxuriance"), "luxuri" );
	deepEqual( Stem("luxuriant"), "luxuri" );
	deepEqual( Stem("luxuriantly"), "luxuri" );
	deepEqual( Stem("luxuriate"), "luxuri" );
	deepEqual( Stem("luxuriating"), "luxuri" );
	deepEqual( Stem("luxuries"), "luxuri" );
	deepEqual( Stem("luxurious"), "luxuri" );
	deepEqual( Stem("luxuriously"), "luxuri" );
	deepEqual( Stem("luxury"), "luxuri" );
	deepEqual( Stem("luzhin"), "luzhin" );
	deepEqual( Stem("lv"), "lv" );
	deepEqual( Stem("lvi"), "lvi" );
	deepEqual( Stem("lvii"), "lvii" );
	deepEqual( Stem("lviii"), "lviii" );
	deepEqual( Stem("lx"), "lx" );
	deepEqual( Stem("lxi"), "lxi" );
	deepEqual( Stem("lxii"), "lxii" );
	deepEqual( Stem("lxiii"), "lxiii" );
	deepEqual( Stem("lxiv"), "lxiv" );
	deepEqual( Stem("lxv"), "lxv" );
	deepEqual( Stem("lxvi"), "lxvi" );
	deepEqual( Stem("lxvii"), "lxvii" );
	deepEqual( Stem("ly"), "ly" );
	deepEqual( Stem("lycosa"), "lycosa" );
	deepEqual( Stem("lycurgus"), "lycurgus" );
	deepEqual( Stem("lyell"), "lyell" );
	deepEqual( Stem("lying"), "lie" );
	deepEqual( Stem("lymington"), "lymington" );
	deepEqual( Stem("lymph"), "lymph" );
	deepEqual( Stem("lynne"), "lynn" );
	deepEqual( Stem("lynx"), "lynx" );
	deepEqual( Stem("lyra"), "lyra" );
	deepEqual( Stem("lyre"), "lyre" );
	deepEqual( Stem("lyres"), "lyre" );
	deepEqual( Stem("m"), "m" );
	deepEqual( Stem("ma"), "ma" );
	deepEqual( Stem("macadam"), "macadam" );
	deepEqual( Stem("macae"), "maca" );
	deepEqual( Stem("macbeth"), "macbeth" );
	deepEqual( Stem("maccoort"), "maccoort" );
	deepEqual( Stem("maccoorts"), "maccoort" );
	deepEqual( Stem("macculloch"), "macculloch" );
	deepEqual( Stem("mace"), "mace" );
	deepEqual( Stem("maces"), "mace" );
	deepEqual( Stem("macfuzlem"), "macfuzlem" );
	deepEqual( Stem("macgregor"), "macgregor" );
	deepEqual( Stem("machina"), "machina" );
	deepEqual( Stem("machine"), "machin" );
	deepEqual( Stem("machinery"), "machineri" );
	deepEqual( Stem("mack"), "mack" );
	deepEqual( Stem("mackenzie"), "mackenzi" );
	deepEqual( Stem("maclaren"), "maclaren" );
	deepEqual( Stem("macpherson"), "macpherson" );
	deepEqual( Stem("macphersons"), "macpherson" );
	deepEqual( Stem("macquarie"), "macquari" );
	deepEqual( Stem("macquarrie"), "macquarri" );
	deepEqual( Stem("macrauchenia"), "macrauchenia" );
	deepEqual( Stem("macrocystis"), "macrocysti" );
	deepEqual( Stem("mactrae"), "mactra" );
	deepEqual( Stem("maculata"), "maculata" );
	deepEqual( Stem("mad"), "mad" );
	deepEqual( Stem("madagascar"), "madagascar" );
	deepEqual( Stem("madam"), "madam" );
	deepEqual( Stem("madame"), "madam" );
	deepEqual( Stem("madcaps"), "madcap" );
	deepEqual( Stem("madchen"), "madchen" );
	deepEqual( Stem("madden"), "madden" );
	deepEqual( Stem("maddened"), "madden" );
	deepEqual( Stem("maddening"), "madden" );
	deepEqual( Stem("madder"), "madder" );
	deepEqual( Stem("maddest"), "maddest" );
	deepEqual( Stem("made"), "made" );
	deepEqual( Stem("madeira"), "madeira" );
	deepEqual( Stem("madeline"), "madelin" );
	deepEqual( Stem("mademoiselle"), "mademoisell" );
	deepEqual( Stem("madhouse"), "madhous" );
	deepEqual( Stem("madly"), "mad" );
	deepEqual( Stem("madman"), "madman" );
	deepEqual( Stem("madmen"), "madmen" );
	deepEqual( Stem("madness"), "mad" );
	deepEqual( Stem("madonna"), "madonna" );
	deepEqual( Stem("madras"), "madra" );
	deepEqual( Stem("madre"), "madr" );
	deepEqual( Stem("madrid"), "madrid" );
	deepEqual( Stem("madrina"), "madrina" );
	deepEqual( Stem("madrinas"), "madrina" );
	deepEqual( Stem("madwoman"), "madwoman" );
	deepEqual( Stem("mag"), "mag" );
	deepEqual( Stem("magalonyx"), "magalonyx" );
	deepEqual( Stem("magazine"), "magazin" );
	deepEqual( Stem("magazines"), "magazin" );
	deepEqual( Stem("magdalen"), "magdalen" );
	deepEqual( Stem("magellan"), "magellan" );
	deepEqual( Stem("magellanica"), "magellanica" );
	deepEqual( Stem("magellanicus"), "magellanicus" );
	deepEqual( Stem("maggot"), "maggot" );
	deepEqual( Stem("maggots"), "maggot" );
	deepEqual( Stem("magic"), "magic" );
	deepEqual( Stem("magical"), "magic" );
	deepEqual( Stem("magically"), "magic" );
	deepEqual( Stem("magician"), "magician" );
	deepEqual( Stem("magistrate"), "magistr" );
	deepEqual( Stem("magistrates"), "magistr" );
	deepEqual( Stem("magnanimity"), "magnanim" );
	deepEqual( Stem("magnanimous"), "magnanim" );
	deepEqual( Stem("magnanimously"), "magnanim" );
	deepEqual( Stem("magnate"), "magnat" );
	deepEqual( Stem("magnates"), "magnat" );
	deepEqual( Stem("magnesium"), "magnesium" );
	deepEqual( Stem("magnetic"), "magnet" );
	deepEqual( Stem("magnetized"), "magnet" );
	deepEqual( Stem("magnificence"), "magnific" );
	deepEqual( Stem("magnificent"), "magnific" );
	deepEqual( Stem("magnificently"), "magnific" );
	deepEqual( Stem("magnified"), "magnifi" );
	deepEqual( Stem("magnifies"), "magnifi" );
	deepEqual( Stem("magnify"), "magnifi" );
	deepEqual( Stem("magnifying"), "magnifi" );
	deepEqual( Stem("magnirostris"), "magnirostri" );
	deepEqual( Stem("magnitude"), "magnitud" );
	deepEqual( Stem("magnum"), "magnum" );
	deepEqual( Stem("magog"), "magog" );
	deepEqual( Stem("magpie"), "magpi" );
	deepEqual( Stem("magpies"), "magpi" );
	deepEqual( Stem("mahdoo"), "mahdoo" );
	deepEqual( Stem("mahlos"), "mahlo" );
	deepEqual( Stem("mahogany"), "mahogani" );
	deepEqual( Stem("mahomedan"), "mahomedan" );
	deepEqual( Stem("mahomet"), "mahomet" );
	deepEqual( Stem("mahony"), "mahoni" );
	deepEqual( Stem("mai"), "mai" );
	deepEqual( Stem("maid"), "maid" );
	deepEqual( Stem("maiden"), "maiden" );
	deepEqual( Stem("maidenly"), "maiden" );
	deepEqual( Stem("maidens"), "maiden" );
	deepEqual( Stem("maidish"), "maidish" );
	deepEqual( Stem("maids"), "maid" );
	deepEqual( Stem("maidservants"), "maidserv" );
	deepEqual( Stem("mail"), "mail" );
	deepEqual( Stem("maim"), "maim" );
	deepEqual( Stem("maimed"), "maim" );
	deepEqual( Stem("main"), "main" );
	deepEqual( Stem("mainland"), "mainland" );
	deepEqual( Stem("mainly"), "main" );
	deepEqual( Stem("mainspring"), "mainspr" );
	deepEqual( Stem("mainstay"), "mainstay" );
	deepEqual( Stem("maintain"), "maintain" );
	deepEqual( Stem("maintained"), "maintain" );
	deepEqual( Stem("maintaining"), "maintain" );
	deepEqual( Stem("maintenance"), "mainten" );
	deepEqual( Stem("maire"), "mair" );
	deepEqual( Stem("maitre"), "maitr" );
	deepEqual( Stem("majestic"), "majest" );
	deepEqual( Stem("majestically"), "majest" );
	deepEqual( Stem("majesty"), "majesti" );
	deepEqual( Stem("major"), "major" );
	deepEqual( Stem("majorities"), "major" );
	deepEqual( Stem("majority"), "major" );
	deepEqual( Stem("mak"), "mak" );
	deepEqual( Stem("make"), "make" );
	deepEqual( Stem("maker"), "maker" );
	deepEqual( Stem("makers"), "maker" );
	deepEqual( Stem("makes"), "make" );
	deepEqual( Stem("making"), "make" );
	deepEqual( Stem("maktng"), "maktng" );
	deepEqual( Stem("mal"), "mal" );
	deepEqual( Stem("malacca"), "malacca" );
	deepEqual( Stem("malady"), "maladi" );
	deepEqual( Stem("malaria"), "malaria" );
	deepEqual( Stem("malay"), "malay" );
	deepEqual( Stem("malaya"), "malaya" );
	deepEqual( Stem("malays"), "malay" );
	deepEqual( Stem("malcolmson"), "malcolmson" );
	deepEqual( Stem("malcontents"), "malcont" );
	deepEqual( Stem("maldiva"), "maldiva" );
	deepEqual( Stem("maldonado"), "maldonado" );
	deepEqual( Stem("male"), "male" );
	deepEqual( Stem("malediction"), "maledict" );
	deepEqual( Stem("maledictions"), "maledict" );
	deepEqual( Stem("malefactors"), "malefactor" );
	deepEqual( Stem("males"), "male" );
	deepEqual( Stem("malevolent"), "malevol" );
	deepEqual( Stem("malgre"), "malgr" );
	deepEqual( Stem("malice"), "malic" );
	deepEqual( Stem("malicious"), "malici" );
	deepEqual( Stem("maliciously"), "malici" );
	deepEqual( Stem("malignance"), "malign" );
	deepEqual( Stem("malignant"), "malign" );
	deepEqual( Stem("malignantly"), "malign" );
	deepEqual( Stem("maligned"), "malign" );
	deepEqual( Stem("malignity"), "malign" );
	deepEqual( Stem("mall"), "mall" );
	deepEqual( Stem("malleable"), "malleabl" );
	deepEqual( Stem("mallowford"), "mallowford" );
	deepEqual( Stem("malouines"), "malouin" );
	deepEqual( Stem("malt"), "malt" );
	deepEqual( Stem("malta"), "malta" );
	deepEqual( Stem("malte"), "malt" );
	deepEqual( Stem("maltreatment"), "maltreat" );
	deepEqual( Stem("malty"), "malti" );
	deepEqual( Stem("mama"), "mama" );
	deepEqual( Stem("mamas"), "mama" );
	deepEqual( Stem("mameluke"), "mameluk" );
	deepEqual( Stem("mamma"), "mamma" );
	deepEqual( Stem("mammalia"), "mammalia" );
	deepEqual( Stem("mammals"), "mammal" );
	deepEqual( Stem("mammiferous"), "mammifer" );
	deepEqual( Stem("mammifers"), "mammif" );
	deepEqual( Stem("mammillated"), "mammil" );
	deepEqual( Stem("mammon"), "mammon" );
	deepEqual( Stem("mammy"), "mammi" );
	deepEqual( Stem("man"), "man" );
	deepEqual( Stem("manage"), "manag" );
	deepEqual( Stem("manageable"), "manag" );
	deepEqual( Stem("managed"), "manag" );
	deepEqual( Stem("management"), "manag" );
	deepEqual( Stem("manager"), "manag" );
	deepEqual( Stem("manageress"), "manageress" );
	deepEqual( Stem("managers"), "manag" );
	deepEqual( Stem("manages"), "manag" );
	deepEqual( Stem("managing"), "manag" );
	deepEqual( Stem("manatee"), "manate" );
	deepEqual( Stem("manchester"), "manchest" );
	deepEqual( Stem("mandate"), "mandat" );
	deepEqual( Stem("mandetiba"), "mandetiba" );
	deepEqual( Stem("mandibl"), "mandibl" );
	deepEqual( Stem("mandible"), "mandibl" );
	deepEqual( Stem("mandioca"), "mandioca" );
	deepEqual( Stem("mane"), "mane" );
	deepEqual( Stem("manes"), "mane" );
	deepEqual( Stem("manful"), "man" );
	deepEqual( Stem("manfully"), "man" );
	deepEqual( Stem("manganese"), "manganes" );
	deepEqual( Stem("manger"), "manger" );
	deepEqual( Stem("mangering"), "manger" );
	deepEqual( Stem("mangle"), "mangl" );
	deepEqual( Stem("mangles"), "mangl" );
	deepEqual( Stem("mangling"), "mangl" );
	deepEqual( Stem("mango"), "mango" );
	deepEqual( Stem("mangostin"), "mangostin" );
	deepEqual( Stem("mangot"), "mangot" );
	deepEqual( Stem("mangroves"), "mangrov" );
	deepEqual( Stem("mangy"), "mangi" );
	deepEqual( Stem("manhood"), "manhood" );
	deepEqual( Stem("mania"), "mania" );
	deepEqual( Stem("maniac"), "maniac" );
	deepEqual( Stem("maniacs"), "maniac" );
	deepEqual( Stem("manie"), "mani" );
	deepEqual( Stem("manifest"), "manifest" );
	deepEqual( Stem("manifestation"), "manifest" );
	deepEqual( Stem("manifestations"), "manifest" );
	deepEqual( Stem("manifested"), "manifest" );
	deepEqual( Stem("manifesting"), "manifest" );
	deepEqual( Stem("manifestly"), "manifest" );
	deepEqual( Stem("manifests"), "manifest" );
	deepEqual( Stem("manifold"), "manifold" );
	deepEqual( Stem("manipulated"), "manipul" );
	deepEqual( Stem("manipulation"), "manipul" );
	deepEqual( Stem("mankind"), "mankind" );
	deepEqual( Stem("manliness"), "manli" );
	deepEqual( Stem("manly"), "man" );
	deepEqual( Stem("manne"), "mann" );
	deepEqual( Stem("manned"), "man" );
	deepEqual( Stem("manner"), "manner" );
	deepEqual( Stem("mannered"), "manner" );
	deepEqual( Stem("manners"), "manner" );
	deepEqual( Stem("mannish"), "mannish" );
	deepEqual( Stem("manoeuvre"), "manoeuvr" );
	deepEqual( Stem("manoeuvred"), "manoeuvr" );
	deepEqual( Stem("manoeuvres"), "manoeuvr" );
	deepEqual( Stem("manoeuvring"), "manoeuvr" );
	deepEqual( Stem("manor"), "manor" );
	deepEqual( Stem("mansion"), "mansion" );
	deepEqual( Stem("mansions"), "mansion" );
	deepEqual( Stem("manslaughtering"), "manslaught" );
	deepEqual( Stem("mansos"), "manso" );
	deepEqual( Stem("mantalini"), "mantalini" );
	deepEqual( Stem("mantel"), "mantel" );
	deepEqual( Stem("mantelpiece"), "mantelpiec" );
	deepEqual( Stem("mantelshelf"), "mantelshelf" );
	deepEqual( Stem("mantie"), "manti" );
	deepEqual( Stem("mantle"), "mantl" );
	deepEqual( Stem("mantled"), "mantl" );
	deepEqual( Stem("mantles"), "mantl" );
	deepEqual( Stem("mantling"), "mantl" );
	deepEqual( Stem("manual"), "manual" );
	deepEqual( Stem("manuals"), "manual" );
	deepEqual( Stem("manuel"), "manuel" );
	deepEqual( Stem("manufactories"), "manufactori" );
	deepEqual( Stem("manufactory"), "manufactori" );
	deepEqual( Stem("manufacture"), "manufactur" );
	deepEqual( Stem("manufactured"), "manufactur" );
	deepEqual( Stem("manufacturers"), "manufactur" );
	deepEqual( Stem("manufacturing"), "manufactur" );
	deepEqual( Stem("manure"), "manur" );
	deepEqual( Stem("manured"), "manur" );
	deepEqual( Stem("manuring"), "manur" );
	deepEqual( Stem("manuscript"), "manuscript" );
	deepEqual( Stem("manuscripts"), "manuscript" );
	deepEqual( Stem("many"), "mani" );
	deepEqual( Stem("map"), "map" );
	deepEqual( Stem("mapped"), "map" );
	deepEqual( Stem("maps"), "map" );
	deepEqual( Stem("mar"), "mar" );
	deepEqual( Stem("marbl"), "marbl" );
	deepEqual( Stem("marble"), "marbl" );
	deepEqual( Stem("marbles"), "marbl" );
	deepEqual( Stem("march"), "march" );
	deepEqual( Stem("marchantiae"), "marchantia" );
	deepEqual( Stem("marched"), "march" );
	deepEqual( Stem("marches"), "march" );
	deepEqual( Stem("marching"), "march" );
	deepEqual( Stem("mare"), "mare" );
	deepEqual( Stem("mares"), "mare" );
	deepEqual( Stem("marfa"), "marfa" );
	deepEqual( Stem("margate"), "margat" );
	deepEqual( Stem("marge"), "marg" );
	deepEqual( Stem("margin"), "margin" );
	deepEqual( Stem("marginal"), "margin" );
	deepEqual( Stem("margins"), "margin" );
	deepEqual( Stem("mari"), "mari" );
	deepEqual( Stem("maria"), "maria" );
	deepEqual( Stem("mariano"), "mariano" );
	deepEqual( Stem("marica"), "marica" );
	deepEqual( Stem("marie"), "mari" );
	deepEqual( Stem("marine"), "marin" );
	deepEqual( Stem("mariners"), "marin" );
	deepEqual( Stem("marines"), "marin" );
	deepEqual( Stem("marital"), "marit" );
	deepEqual( Stem("maritime"), "maritim" );
	deepEqual( Stem("mark"), "mark" );
	deepEqual( Stem("marked"), "mark" );
	deepEqual( Stem("marker"), "marker" );
	deepEqual( Stem("market"), "market" );
	deepEqual( Stem("marketing"), "market" );
	deepEqual( Stem("marketplace"), "marketplac" );
	deepEqual( Stem("markets"), "market" );
	deepEqual( Stem("marking"), "mark" );
	deepEqual( Stem("marks"), "mark" );
	deepEqual( Stem("marl"), "marl" );
	deepEqual( Stem("marlborough"), "marlborough" );
	deepEqual( Stem("marly"), "mar" );
	deepEqual( Stem("marmalade"), "marmalad" );
	deepEqual( Stem("marmeladov"), "marmeladov" );
	deepEqual( Stem("marmeladovs"), "marmeladov" );
	deepEqual( Stem("marquess"), "marquess" );
	deepEqual( Stem("marquis"), "marqui" );
	deepEqual( Stem("marquises"), "marquis" );
	deepEqual( Stem("marred"), "mar" );
	deepEqual( Stem("marriage"), "marriag" );
	deepEqual( Stem("marriages"), "marriag" );
	deepEqual( Stem("married"), "marri" );
	deepEqual( Stem("marries"), "marri" );
	deepEqual( Stem("marring"), "mar" );
	deepEqual( Stem("marrow"), "marrow" );
	deepEqual( Stem("marrows"), "marrow" );
	deepEqual( Stem("marry"), "marri" );
	deepEqual( Stem("marrying"), "marri" );
	deepEqual( Stem("mars"), "mar" );
	deepEqual( Stem("marsden"), "marsden" );
	deepEqual( Stem("marseilles"), "marseill" );
	deepEqual( Stem("marsh"), "marsh" );
	deepEqual( Stem("marshal"), "marshal" );
	deepEqual( Stem("marshalled"), "marshal" );
	deepEqual( Stem("marshes"), "marsh" );
	deepEqual( Stem("marshy"), "marshi" );
	deepEqual( Stem("marstone"), "marston" );
	deepEqual( Stem("marstones"), "marston" );
	deepEqual( Stem("marsupial"), "marsupi" );
	deepEqual( Stem("mart"), "mart" );
	deepEqual( Stem("martens"), "marten" );
	deepEqual( Stem("martha"), "martha" );
	deepEqual( Stem("martial"), "martial" );
	deepEqual( Stem("martin"), "martin" );
	deepEqual( Stem("martindale"), "martindal" );
	deepEqual( Stem("martindales"), "martindal" );
	deepEqual( Stem("martins"), "martin" );
	deepEqual( Stem("martlets"), "martlet" );
	deepEqual( Stem("martyr"), "martyr" );
	deepEqual( Stem("martyrdom"), "martyrdom" );
	deepEqual( Stem("marvel"), "marvel" );
	deepEqual( Stem("marvelled"), "marvel" );
	deepEqual( Stem("marvelling"), "marvel" );
	deepEqual( Stem("marvellous"), "marvel" );
	deepEqual( Stem("marvellously"), "marvel" );
	deepEqual( Stem("marvels"), "marvel" );
	deepEqual( Stem("mary"), "mari" );
	deepEqual( Stem("marylebone"), "marylebon" );
	deepEqual( Stem("marys"), "mari" );
	deepEqual( Stem("mascariensis"), "mascariensi" );
	deepEqual( Stem("masculine"), "masculin" );
	deepEqual( Stem("mashes"), "mash" );
	deepEqual( Stem("mask"), "mask" );
	deepEqual( Stem("masonry"), "masonri" );
	deepEqual( Stem("masquerading"), "masquerad" );
	deepEqual( Stem("mass"), "mass" );
	deepEqual( Stem("massacre"), "massacr" );
	deepEqual( Stem("massacred"), "massacr" );
	deepEqual( Stem("massacres"), "massacr" );
	deepEqual( Stem("masse"), "mass" );
	deepEqual( Stem("masses"), "mass" );
	deepEqual( Stem("massive"), "massiv" );
	deepEqual( Stem("massively"), "massiv" );
	deepEqual( Stem("mast"), "mast" );
	deepEqual( Stem("mastadon"), "mastadon" );
	deepEqual( Stem("masted"), "mast" );
	deepEqual( Stem("master"), "master" );
	deepEqual( Stem("mastered"), "master" );
	deepEqual( Stem("masterful"), "master" );
	deepEqual( Stem("mastering"), "master" );
	deepEqual( Stem("masterly"), "master" );
	deepEqual( Stem("masterpieces"), "masterpiec" );
	deepEqual( Stem("masters"), "master" );
	deepEqual( Stem("mastery"), "masteri" );
	deepEqual( Stem("masthead"), "masthead" );
	deepEqual( Stem("mastiff"), "mastiff" );
	deepEqual( Stem("mastodon"), "mastodon" );
	deepEqual( Stem("mastodons"), "mastodon" );
	deepEqual( Stem("masts"), "mast" );
	deepEqual( Stem("mat"), "mat" );
	deepEqual( Stem("mata"), "mata" );
	deepEqual( Stem("mataco"), "mataco" );
	deepEqual( Stem("matador"), "matador" );
	deepEqual( Stem("matavai"), "matavai" );
	deepEqual( Stem("match"), "match" );
	deepEqual( Stem("matched"), "match" );
	deepEqual( Stem("matches"), "match" );
	deepEqual( Stem("matching"), "match" );
	deepEqual( Stem("mate"), "mate" );
	deepEqual( Stem("material"), "materi" );
	deepEqual( Stem("materially"), "materi" );
	deepEqual( Stem("materials"), "materi" );
	deepEqual( Stem("maternal"), "matern" );
	deepEqual( Stem("mates"), "mate" );
	deepEqual( Stem("mathematical"), "mathemat" );
	deepEqual( Stem("mathematically"), "mathemat" );
	deepEqual( Stem("mathematics"), "mathemat" );
	deepEqual( Stem("matilda"), "matilda" );
	deepEqual( Stem("matins"), "matin" );
	deepEqual( Stem("matlock"), "matlock" );
	deepEqual( Stem("matricide"), "matricid" );
	deepEqual( Stem("matrimonial"), "matrimoni" );
	deepEqual( Stem("matrimonially"), "matrimoni" );
	deepEqual( Stem("matrimony"), "matrimoni" );
	deepEqual( Stem("matrix"), "matrix" );
	deepEqual( Stem("matron"), "matron" );
	deepEqual( Stem("matronly"), "matron" );
	deepEqual( Stem("matrons"), "matron" );
	deepEqual( Stem("mats"), "mat" );
	deepEqual( Stem("matted"), "mat" );
	deepEqual( Stem("matter"), "matter" );
	deepEqual( Stem("mattered"), "matter" );
	deepEqual( Stem("matters"), "matter" );
	deepEqual( Stem("matther"), "matther" );
	deepEqual( Stem("matthew"), "matthew" );
	deepEqual( Stem("matthews"), "matthew" );
	deepEqual( Stem("matting"), "mat" );
	deepEqual( Stem("mattress"), "mattress" );
	deepEqual( Stem("mattresses"), "mattress" );
	deepEqual( Stem("mature"), "matur" );
	deepEqual( Stem("matured"), "matur" );
	deepEqual( Stem("maturely"), "matur" );
	deepEqual( Stem("maturer"), "matur" );
	deepEqual( Stem("maturity"), "matur" );
	deepEqual( Stem("matutina"), "matutina" );
	deepEqual( Stem("matvey"), "matvey" );
	deepEqual( Stem("maun"), "maun" );
	deepEqual( Stem("maunder"), "maunder" );
	deepEqual( Stem("maurice"), "mauric" );
	deepEqual( Stem("mauritius"), "mauritius" );
	deepEqual( Stem("maurua"), "maurua" );
	deepEqual( Stem("mausoleum"), "mausoleum" );
	deepEqual( Stem("mausoleums"), "mausoleum" );
	deepEqual( Stem("mauvais"), "mauvai" );
	deepEqual( Stem("mawkish"), "mawkish" );
	deepEqual( Stem("maxillae"), "maxilla" );
	deepEqual( Stem("maxim"), "maxim" );
	deepEqual( Stem("may"), "may" );
	deepEqual( Stem("maybe"), "mayb" );
	deepEqual( Stem("maydickle"), "maydickl" );
	deepEqual( Stem("mayfair"), "mayfair" );
	deepEqual( Stem("mayhap"), "mayhap" );
	deepEqual( Stem("mayn"), "mayn" );
	deepEqual( Stem("mayo"), "mayo" );
	deepEqual( Stem("mayor"), "mayor" );
	deepEqual( Stem("maypu"), "maypu" );
	deepEqual( Stem("mayst"), "mayst" );
	deepEqual( Stem("maze"), "maze" );
	deepEqual( Stem("mazeppa"), "mazeppa" );
	deepEqual( Stem("mazes"), "maze" );
	deepEqual( Stem("mazurka"), "mazurka" );
	deepEqual( Stem("mazy"), "mazi" );
	deepEqual( Stem("me"), "me" );
	deepEqual( Stem("meadow"), "meadow" );
	deepEqual( Stem("meadows"), "meadow" );
	deepEqual( Stem("meads"), "mead" );
	deepEqual( Stem("meagre"), "meagr" );
	deepEqual( Stem("meal"), "meal" );
	deepEqual( Stem("meals"), "meal" );
	deepEqual( Stem("mean"), "mean" );
	deepEqual( Stem("meandering"), "meander" );
	deepEqual( Stem("meanest"), "meanest" );
	deepEqual( Stem("meaning"), "mean" );
	deepEqual( Stem("meaningless"), "meaningless" );
	deepEqual( Stem("meanings"), "mean" );
	deepEqual( Stem("meanly"), "mean" );
	deepEqual( Stem("meanness"), "mean" );
	deepEqual( Stem("means"), "mean" );
	deepEqual( Stem("meant"), "meant" );
	deepEqual( Stem("meantime"), "meantim" );
	deepEqual( Stem("meanwhile"), "meanwhil" );
	deepEqual( Stem("measles"), "measl" );
	deepEqual( Stem("measther"), "measther" );
	deepEqual( Stem("measthers"), "measther" );
	deepEqual( Stem("measure"), "measur" );
	deepEqual( Stem("measured"), "measur" );
	deepEqual( Stem("measurement"), "measur" );
	deepEqual( Stem("measurements"), "measur" );
	deepEqual( Stem("measurer"), "measur" );
	deepEqual( Stem("measures"), "measur" );
	deepEqual( Stem("measuring"), "measur" );
	deepEqual( Stem("meat"), "meat" );
	deepEqual( Stem("meats"), "meat" );
	deepEqual( Stem("mechanic"), "mechan" );
	deepEqual( Stem("mechanical"), "mechan" );
	deepEqual( Stem("mechanically"), "mechan" );
	deepEqual( Stem("mechanics"), "mechan" );
	deepEqual( Stem("mechanism"), "mechan" );
	deepEqual( Stem("mecum"), "mecum" );
	deepEqual( Stem("medal"), "medal" );
	deepEqual( Stem("medallions"), "medallion" );
	deepEqual( Stem("meddle"), "meddl" );
	deepEqual( Stem("meddled"), "meddl" );
	deepEqual( Stem("meddlers"), "meddler" );
	deepEqual( Stem("meddlesome"), "meddlesom" );
	deepEqual( Stem("meddling"), "meddl" );
	deepEqual( Stem("mediaeval"), "mediaev" );
	deepEqual( Stem("mediate"), "mediat" );
	deepEqual( Stem("mediation"), "mediat" );
	deepEqual( Stem("mediator"), "mediat" );
	deepEqual( Stem("medical"), "medic" );
	deepEqual( Stem("medicinal"), "medicin" );
	deepEqual( Stem("medicine"), "medicin" );
	deepEqual( Stem("medicines"), "medicin" );
	deepEqual( Stem("mediocrity"), "mediocr" );
	deepEqual( Stem("meditate"), "medit" );
	deepEqual( Stem("meditated"), "medit" );
	deepEqual( Stem("meditates"), "medit" );
	deepEqual( Stem("meditating"), "medit" );
	deepEqual( Stem("meditation"), "medit" );
	deepEqual( Stem("meditations"), "medit" );
	deepEqual( Stem("meditative"), "medit" );
	deepEqual( Stem("meditatively"), "medit" );
	deepEqual( Stem("mediterranean"), "mediterranean" );
	deepEqual( Stem("medium"), "medium" );
	deepEqual( Stem("medley"), "medley" );
	deepEqual( Stem("medusae"), "medusa" );
	deepEqual( Stem("meek"), "meek" );
	deepEqual( Stem("meekest"), "meekest" );
	deepEqual( Stem("meekly"), "meek" );
	deepEqual( Stem("meekness"), "meek" );
	deepEqual( Stem("meet"), "meet" );
	deepEqual( Stem("meeting"), "meet" );
	deepEqual( Stem("meetings"), "meet" );
	deepEqual( Stem("meets"), "meet" );
	deepEqual( Stem("megalonyx"), "megalonyx" );
	deepEqual( Stem("megalosaurus"), "megalosaurus" );
	deepEqual( Stem("megapodius"), "megapodius" );
	deepEqual( Stem("megatherium"), "megatherium" );
	deepEqual( Stem("megatheroid"), "megatheroid" );
	deepEqual( Stem("mehr"), "mehr" );
	deepEqual( Stem("melancholy"), "melancholi" );
	deepEqual( Stem("melanops"), "melanop" );
	deepEqual( Stem("melanotis"), "melanoti" );
	deepEqual( Stem("melasoma"), "melasoma" );
	deepEqual( Stem("melchisedech"), "melchisedech" );
	deepEqual( Stem("melindres"), "melindr" );
	deepEqual( Stem("mell"), "mell" );
	deepEqual( Stem("mellifluousness"), "melliflu" );
	deepEqual( Stem("mellow"), "mellow" );
	deepEqual( Stem("mellowed"), "mellow" );
	deepEqual( Stem("mellows"), "mellow" );
	deepEqual( Stem("melodious"), "melodi" );
	deepEqual( Stem("melodiously"), "melodi" );
	deepEqual( Stem("melodrama"), "melodrama" );
	deepEqual( Stem("melodramatic"), "melodramat" );
	deepEqual( Stem("melody"), "melodi" );
	deepEqual( Stem("melolonthidae"), "melolonthida" );
	deepEqual( Stem("melons"), "melon" );
	deepEqual( Stem("melt"), "melt" );
	deepEqual( Stem("melted"), "melt" );
	deepEqual( Stem("melteth"), "melteth" );
	deepEqual( Stem("melting"), "melt" );
	deepEqual( Stem("melts"), "melt" );
	deepEqual( Stem("melvilleson"), "melvilleson" );
	deepEqual( Stem("mem"), "mem" );
	deepEqual( Stem("member"), "member" );
	deepEqual( Stem("members"), "member" );
	deepEqual( Stem("membrane"), "membran" );
	deepEqual( Stem("membranous"), "membran" );
	deepEqual( Stem("mememto"), "mememto" );
	deepEqual( Stem("memoir"), "memoir" );
	deepEqual( Stem("memoirs"), "memoir" );
	deepEqual( Stem("memorable"), "memor" );
	deepEqual( Stem("memoranda"), "memoranda" );
	deepEqual( Stem("memorandum"), "memorandum" );
	deepEqual( Stem("memorial"), "memori" );
	deepEqual( Stem("memorials"), "memori" );
	deepEqual( Stem("memories"), "memori" );
	deepEqual( Stem("memory"), "memori" );
	deepEqual( Stem("men"), "men" );
	deepEqual( Stem("menace"), "menac" );
	deepEqual( Stem("menacing"), "menac" );
	deepEqual( Stem("menage"), "menag" );
	deepEqual( Stem("menchicoff"), "menchicoff" );
	deepEqual( Stem("mend"), "mend" );
	deepEqual( Stem("mended"), "mend" );
	deepEqual( Stem("mending"), "mend" );
	deepEqual( Stem("mendoza"), "mendoza" );
	deepEqual( Stem("mendozinos"), "mendozino" );
	deepEqual( Stem("mends"), "mend" );
	deepEqual( Stem("menfion"), "menfion" );
	deepEqual( Stem("menfioning"), "menfion" );
	deepEqual( Stem("mental"), "mental" );
	deepEqual( Stem("mentally"), "mental" );
	deepEqual( Stem("mention"), "mention" );
	deepEqual( Stem("mentioned"), "mention" );
	deepEqual( Stem("mentioning"), "mention" );
	deepEqual( Stem("mentions"), "mention" );
	deepEqual( Stem("mentor"), "mentor" );
	deepEqual( Stem("mercantile"), "mercantil" );
	deepEqual( Stem("mercedes"), "merced" );
	deepEqual( Stem("mercenary"), "mercenari" );
	deepEqual( Stem("mercers"), "mercer" );
	deepEqual( Stem("merchandise"), "merchandis" );
	deepEqual( Stem("merchant"), "merchant" );
	deepEqual( Stem("merchants"), "merchant" );
	deepEqual( Stem("mercie"), "merci" );
	deepEqual( Stem("mercies"), "merci" );
	deepEqual( Stem("merciful"), "merci" );
	deepEqual( Stem("mercifully"), "merci" );
	deepEqual( Stem("merciless"), "merciless" );
	deepEqual( Stem("mercilessly"), "merciless" );
	deepEqual( Stem("mercuries"), "mercuri" );
	deepEqual( Stem("mercury"), "mercuri" );
	deepEqual( Stem("mercy"), "merci" );
	deepEqual( Stem("mere"), "mere" );
	deepEqual( Stem("merely"), "mere" );
	deepEqual( Stem("merest"), "merest" );
	deepEqual( Stem("merged"), "merg" );
	deepEqual( Stem("merging"), "merg" );
	deepEqual( Stem("merid"), "merid" );
	deepEqual( Stem("meridian"), "meridian" );
	deepEqual( Stem("merit"), "merit" );
	deepEqual( Stem("merited"), "merit" );
	deepEqual( Stem("meritorious"), "meritori" );
	deepEqual( Stem("meritoriously"), "meritori" );
	deepEqual( Stem("merits"), "merit" );
	deepEqual( Stem("mermaid"), "mermaid" );
	deepEqual( Stem("mero"), "mero" );
	deepEqual( Stem("merrier"), "merrier" );
	deepEqual( Stem("merriest"), "merriest" );
	deepEqual( Stem("merrily"), "merrili" );
	deepEqual( Stem("merriment"), "merriment" );
	deepEqual( Stem("merry"), "merri" );
	deepEqual( Stem("merveille"), "merveill" );
	deepEqual( Stem("mervyn"), "mervyn" );
	deepEqual( Stem("mesalliance"), "mesalli" );
	deepEqual( Stem("mesh"), "mesh" );
	deepEqual( Stem("meshes"), "mesh" );
	deepEqual( Stem("mesmerism"), "mesmer" );
	deepEqual( Stem("mess"), "mess" );
	deepEqual( Stem("message"), "messag" );
	deepEqual( Stem("messages"), "messag" );
	deepEqual( Stem("messenger"), "messeng" );
	deepEqual( Stem("messengers"), "messeng" );
	deepEqual( Stem("messes"), "mess" );
	deepEqual( Stem("messiah"), "messiah" );
	deepEqual( Stem("messrs"), "messr" );
	deepEqual( Stem("met"), "met" );
	deepEqual( Stem("metal"), "metal" );
	deepEqual( Stem("metallic"), "metal" );
	deepEqual( Stem("metalliferous"), "metallifer" );
	deepEqual( Stem("metals"), "metal" );
	deepEqual( Stem("metamorphic"), "metamorph" );
	deepEqual( Stem("metamorphosed"), "metamorphos" );
	deepEqual( Stem("metaphorically"), "metaphor" );
	deepEqual( Stem("metaphysical"), "metaphys" );
	deepEqual( Stem("metaphysics"), "metaphys" );
	deepEqual( Stem("meteor"), "meteor" );
	deepEqual( Stem("meteorological"), "meteorolog" );
	deepEqual( Stem("meteors"), "meteor" );
	deepEqual( Stem("method"), "method" );
	deepEqual( Stem("methodical"), "method" );
	deepEqual( Stem("methodically"), "method" );
	deepEqual( Stem("methodist"), "methodist" );
	deepEqual( Stem("methods"), "method" );
	deepEqual( Stem("methoozellers"), "methoozel" );
	deepEqual( Stem("methuselah"), "methuselah" );
	deepEqual( Stem("metropolis"), "metropoli" );
	deepEqual( Stem("metropolitan"), "metropolitan" );
	deepEqual( Stem("mettle"), "mettl" );
	deepEqual( Stem("mew"), "mew" );
	deepEqual( Stem("mewlinn"), "mewlinn" );
	deepEqual( Stem("mewlinnwillinwodd"), "mewlinnwillinwodd" );
	deepEqual( Stem("mews"), "mew" );
	deepEqual( Stem("mexican"), "mexican" );
	deepEqual( Stem("mexico"), "mexico" );
	deepEqual( Stem("mezzotinto"), "mezzotinto" );
	deepEqual( Stem("miasma"), "miasma" );
	deepEqual( Stem("mica"), "mica" );
	deepEqual( Stem("micaceous"), "micac" );
	deepEqual( Stem("mice"), "mice" );
	deepEqual( Stem("michael"), "michael" );
	deepEqual( Stem("michaelmas"), "michaelma" );
	deepEqual( Stem("michell"), "michel" );
	deepEqual( Stem("mickle"), "mickl" );
	deepEqual( Stem("microbes"), "microb" );
	deepEqual( Stem("microscope"), "microscop" );
	deepEqual( Stem("microscopic"), "microscop" );
	deepEqual( Stem("microscopical"), "microscop" );
	deepEqual( Stem("mid"), "mid" );
	deepEqual( Stem("midday"), "midday" );
	deepEqual( Stem("middl"), "middl" );
	deepEqual( Stem("middle"), "middl" );
	deepEqual( Stem("middlesex"), "middlesex" );
	deepEqual( Stem("middleton"), "middleton" );
	deepEqual( Stem("middling"), "middl" );
	deepEqual( Stem("midnight"), "midnight" );
	deepEqual( Stem("midshipmen"), "midshipmen" );
	deepEqual( Stem("midst"), "midst" );
	deepEqual( Stem("midsummer"), "midsumm" );
	deepEqual( Stem("midway"), "midway" );
	deepEqual( Stem("midwives"), "midwiv" );
	deepEqual( Stem("mien"), "mien" );
	deepEqual( Stem("miers"), "mier" );
	deepEqual( Stem("might"), "might" );
	deepEqual( Stem("mightier"), "mightier" );
	deepEqual( Stem("mightily"), "mightili" );
	deepEqual( Stem("mightn"), "mightn" );
	deepEqual( Stem("mighty"), "mighti" );
	deepEqual( Stem("mignonette"), "mignonett" );
	deepEqual( Stem("migrate"), "migrat" );
	deepEqual( Stem("migrated"), "migrat" );
	deepEqual( Stem("migrates"), "migrat" );
	deepEqual( Stem("migrating"), "migrat" );
	deepEqual( Stem("migration"), "migrat" );
	deepEqual( Stem("migrations"), "migrat" );
	deepEqual( Stem("migratorius"), "migratorius" );
	deepEqual( Stem("migratory"), "migratori" );
	deepEqual( Stem("mihail"), "mihail" );
	deepEqual( Stem("mihailovitch"), "mihailovitch" );
	deepEqual( Stem("mihailovsky"), "mihailovski" );
	deepEqual( Stem("mikolka"), "mikolka" );
	deepEqual( Stem("milch"), "milch" );
	deepEqual( Stem("mild"), "mild" );
	deepEqual( Stem("milder"), "milder" );
	deepEqual( Stem("mildest"), "mildest" );
	deepEqual( Stem("mildewed"), "mildew" );
	deepEqual( Stem("mildly"), "mild" );
	deepEqual( Stem("mildmay"), "mildmay" );
	deepEqual( Stem("mildness"), "mild" );
	deepEqual( Stem("mile"), "mile" );
	deepEqual( Stem("miles"), "mile" );
	deepEqual( Stem("milestone"), "mileston" );
	deepEqual( Stem("milestones"), "mileston" );
	deepEqual( Stem("military"), "militari" );
	deepEqual( Stem("militia"), "militia" );
	deepEqual( Stem("milk"), "milk" );
	deepEqual( Stem("milked"), "milk" );
	deepEqual( Stem("milking"), "milk" );
	deepEqual( Stem("milkmaid"), "milkmaid" );
	deepEqual( Stem("milkman"), "milkman" );
	deepEqual( Stem("milkpot"), "milkpot" );
	deepEqual( Stem("milksop"), "milksop" );
	deepEqual( Stem("milky"), "milki" );
	deepEqual( Stem("mill"), "mill" );
	deepEqual( Stem("millennium"), "millennium" );
	deepEqual( Stem("millenniums"), "millennium" );
	deepEqual( Stem("millepois"), "millepoi" );
	deepEqual( Stem("millepora"), "millepora" );
	deepEqual( Stem("miller"), "miller" );
	deepEqual( Stem("milleypoise"), "milleypois" );
	deepEqual( Stem("milliner"), "millin" );
	deepEqual( Stem("milliners"), "millin" );
	deepEqual( Stem("millinery"), "millineri" );
	deepEqual( Stem("milling"), "mill" );
	deepEqual( Stem("million"), "million" );
	deepEqual( Stem("millionaire"), "millionair" );
	deepEqual( Stem("millions"), "million" );
	deepEqual( Stem("millionth"), "millionth" );
	deepEqual( Stem("mills"), "mill" );
	deepEqual( Stem("millstone"), "millston" );
	deepEqual( Stem("milton"), "milton" );
	deepEqual( Stem("mimicking"), "mimick" );
	deepEqual( Stem("mimicry"), "mimicri" );
	deepEqual( Stem("mimics"), "mimic" );
	deepEqual( Stem("mimosa"), "mimosa" );
	deepEqual( Stem("mimosae"), "mimosa" );
	deepEqual( Stem("mimosas"), "mimosa" );
	deepEqual( Stem("mimus"), "mimus" );
	deepEqual( Stem("minaret"), "minaret" );
	deepEqual( Stem("minas"), "mina" );
	deepEqual( Stem("mince"), "minc" );
	deepEqual( Stem("minced"), "minc" );
	deepEqual( Stem("mincefenille"), "mincefenill" );
	deepEqual( Stem("mincing"), "minc" );
	deepEqual( Stem("mincingly"), "minc" );
	deepEqual( Stem("mind"), "mind" );
	deepEqual( Stem("minded"), "mind" );
	deepEqual( Stem("mindedly"), "mind" );
	deepEqual( Stem("mindedness"), "minded" );
	deepEqual( Stem("mindful"), "mind" );
	deepEqual( Stem("minding"), "mind" );
	deepEqual( Stem("minds"), "mind" );
	deepEqual( Stem("mine"), "mine" );
	deepEqual( Stem("miner"), "miner" );
	deepEqual( Stem("mineral"), "miner" );
	deepEqual( Stem("mineralogical"), "mineralog" );
	deepEqual( Stem("miners"), "miner" );
	deepEqual( Stem("minerva"), "minerva" );
	deepEqual( Stem("mines"), "mine" );
	deepEqual( Stem("mingle"), "mingl" );
	deepEqual( Stem("mingled"), "mingl" );
	deepEqual( Stem("mingles"), "mingl" );
	deepEqual( Stem("mingling"), "mingl" );
	deepEqual( Stem("miniature"), "miniatur" );
	deepEqual( Stem("miniatures"), "miniatur" );
	deepEqual( Stem("minimum"), "minimum" );
	deepEqual( Stem("mining"), "mine" );
	deepEqual( Stem("minions"), "minion" );
	deepEqual( Stem("minister"), "minist" );
	deepEqual( Stem("ministered"), "minist" );
	deepEqual( Stem("ministerial"), "ministeri" );
	deepEqual( Stem("ministerialist"), "ministerialist" );
	deepEqual( Stem("ministers"), "minist" );
	deepEqual( Stem("ministership"), "ministership" );
	deepEqual( Stem("ministration"), "ministr" );
	deepEqual( Stem("ministrations"), "ministr" );
	deepEqual( Stem("ministress"), "ministress" );
	deepEqual( Stem("ministries"), "ministri" );
	deepEqual( Stem("ministry"), "ministri" );
	deepEqual( Stem("minnit"), "minnit" );
	deepEqual( Stem("minor"), "minor" );
	deepEqual( Stem("minorities"), "minor" );
	deepEqual( Stem("minority"), "minor" );
	deepEqual( Stem("minster"), "minster" );
	deepEqual( Stem("minstrel"), "minstrel" );
	deepEqual( Stem("mint"), "mint" );
	deepEqual( Stem("minute"), "minut" );
	deepEqual( Stem("minutely"), "minut" );
	deepEqual( Stem("minuteness"), "minut" );
	deepEqual( Stem("minutes"), "minut" );
	deepEqual( Stem("minutest"), "minutest" );
	deepEqual( Stem("minutus"), "minutus" );
	deepEqual( Stem("minx"), "minx" );
	deepEqual( Stem("miracle"), "miracl" );
	deepEqual( Stem("miraculous"), "miracul" );
	deepEqual( Stem("mirage"), "mirag" );
	deepEqual( Stem("miranda"), "miranda" );
	deepEqual( Stem("mire"), "mire" );
	deepEqual( Stem("mirror"), "mirror" );
	deepEqual( Stem("mirrored"), "mirror" );
	deepEqual( Stem("mirrors"), "mirror" );
	deepEqual( Stem("mirth"), "mirth" );
	deepEqual( Stem("mirthful"), "mirth" );
	deepEqual( Stem("mirthfulness"), "mirth" );
	deepEqual( Stem("miry"), "miri" );
	deepEqual( Stem("misanthrope"), "misanthrop" );
	deepEqual( Stem("misanthropical"), "misanthrop" );
	deepEqual( Stem("misapprehend"), "misapprehend" );
	deepEqual( Stem("misapprehended"), "misapprehend" );
	deepEqual( Stem("misbehave"), "misbehav" );
	deepEqual( Stem("misbehaved"), "misbehav" );
	deepEqual( Stem("misbehaving"), "misbehav" );
	deepEqual( Stem("misbestowed"), "misbestow" );
	deepEqual( Stem("miscalculated"), "miscalcul" );
	deepEqual( Stem("miscalculation"), "miscalcul" );
	deepEqual( Stem("miscalled"), "miscal" );
	deepEqual( Stem("miscarried"), "miscarri" );
	deepEqual( Stem("miscellaneous"), "miscellan" );
	deepEqual( Stem("mischance"), "mischanc" );
	deepEqual( Stem("mischances"), "mischanc" );
	deepEqual( Stem("mischeevious"), "mischeevi" );
	deepEqual( Stem("mischief"), "mischief" );
	deepEqual( Stem("mischievous"), "mischiev" );
	deepEqual( Stem("misconception"), "misconcept" );
	deepEqual( Stem("misconduct"), "misconduct" );
	deepEqual( Stem("misconstruction"), "misconstruct" );
	deepEqual( Stem("misconstructions"), "misconstruct" );
	deepEqual( Stem("misconstrued"), "misconstru" );
	deepEqual( Stem("misconstruing"), "misconstru" );
	deepEqual( Stem("miscreant"), "miscreant" );
	deepEqual( Stem("misdeed"), "misde" );
	deepEqual( Stem("misdeeds"), "misde" );
	deepEqual( Stem("misdemeanor"), "misdemeanor" );
	deepEqual( Stem("misdemeanour"), "misdemeanour" );
	deepEqual( Stem("misdemeanours"), "misdemeanour" );
	deepEqual( Stem("misdirected"), "misdirect" );
	deepEqual( Stem("misdirecting"), "misdirect" );
	deepEqual( Stem("misdirections"), "misdirect" );
	deepEqual( Stem("miser"), "miser" );
	deepEqual( Stem("miserable"), "miser" );
	deepEqual( Stem("miserably"), "miser" );
	deepEqual( Stem("misericordia"), "misericordia" );
	deepEqual( Stem("miseries"), "miseri" );
	deepEqual( Stem("miserly"), "miser" );
	deepEqual( Stem("misers"), "miser" );
	deepEqual( Stem("misery"), "miseri" );
	deepEqual( Stem("misfortune"), "misfortun" );
	deepEqual( Stem("misfortunes"), "misfortun" );
	deepEqual( Stem("misgave"), "misgav" );
	deepEqual( Stem("misgiving"), "misgiv" );
	deepEqual( Stem("misgivings"), "misgiv" );
	deepEqual( Stem("mishap"), "mishap" );
	deepEqual( Stem("misinformed"), "misinform" );
	deepEqual( Stem("misinterpreted"), "misinterpret" );
	deepEqual( Stem("misjudged"), "misjudg" );
	deepEqual( Stem("misjudges"), "misjudg" );
	deepEqual( Stem("mislaid"), "mislaid" );
	deepEqual( Stem("mislead"), "mislead" );
	deepEqual( Stem("misled"), "misl" );
	deepEqual( Stem("mismanaged"), "mismanag" );
	deepEqual( Stem("mismanagement"), "mismanag" );
	deepEqual( Stem("misplaced"), "misplac" );
	deepEqual( Stem("misrepresent"), "misrepres" );
	deepEqual( Stem("misrepresentations"), "misrepresent" );
	deepEqual( Stem("misrepresenting"), "misrepres" );
	deepEqual( Stem("miss"), "miss" );
	deepEqual( Stem("missed"), "miss" );
	deepEqual( Stem("misses"), "miss" );
	deepEqual( Stem("missile"), "missil" );
	deepEqual( Stem("missing"), "miss" );
	deepEqual( Stem("mission"), "mission" );
	deepEqual( Stem("missionaries"), "missionari" );
	deepEqual( Stem("missionary"), "missionari" );
	deepEqual( Stem("missiones"), "mission" );
	deepEqual( Stem("missions"), "mission" );
	deepEqual( Stem("missis"), "missi" );
	deepEqual( Stem("missive"), "missiv" );
	deepEqual( Stem("misspent"), "misspent" );
	deepEqual( Stem("missus"), "missus" );
	deepEqual( Stem("missy"), "missi" );
	deepEqual( Stem("mist"), "mist" );
	deepEqual( Stem("mistake"), "mistak" );
	deepEqual( Stem("mistaken"), "mistaken" );
	deepEqual( Stem("mistakenly"), "mistaken" );
	deepEqual( Stem("mistakes"), "mistak" );
	deepEqual( Stem("mistaking"), "mistak" );
	deepEqual( Stem("miste"), "mist" );
	deepEqual( Stem("mister"), "mister" );
	deepEqual( Stem("misther"), "misther" );
	deepEqual( Stem("mistily"), "mistili" );
	deepEqual( Stem("mistiness"), "misti" );
	deepEqual( Stem("mistoo"), "mistoo" );
	deepEqual( Stem("mistook"), "mistook" );
	deepEqual( Stem("mistress"), "mistress" );
	deepEqual( Stem("mistresses"), "mistress" );
	deepEqual( Stem("mistrust"), "mistrust" );
	deepEqual( Stem("mistrusted"), "mistrust" );
	deepEqual( Stem("mistrustful"), "mistrust" );
	deepEqual( Stem("mistrustfully"), "mistrust" );
	deepEqual( Stem("mistrusting"), "mistrust" );
	deepEqual( Stem("mistrusts"), "mistrust" );
	deepEqual( Stem("mists"), "mist" );
	deepEqual( Stem("misty"), "misti" );
	deepEqual( Stem("misunderstand"), "misunderstand" );
	deepEqual( Stem("misunderstanding"), "misunderstand" );
	deepEqual( Stem("misunderstood"), "misunderstood" );
	deepEqual( Stem("misused"), "misus" );
	deepEqual( Stem("misuses"), "misus" );
	deepEqual( Stem("mitchell"), "mitchel" );
	deepEqual( Stem("mite"), "mite" );
	deepEqual( Stem("mites"), "mite" );
	deepEqual( Stem("mitigation"), "mitig" );
	deepEqual( Stem("mitka"), "mitka" );
	deepEqual( Stem("mitrofanievsky"), "mitrofanievski" );
	deepEqual( Stem("mitten"), "mitten" );
	deepEqual( Stem("mix"), "mix" );
	deepEqual( Stem("mixed"), "mix" );
	deepEqual( Stem("mixer"), "mixer" );
	deepEqual( Stem("mixes"), "mix" );
	deepEqual( Stem("mixing"), "mix" );
	deepEqual( Stem("mixtur"), "mixtur" );
	deepEqual( Stem("mixture"), "mixtur" );
	deepEqual( Stem("mizzle"), "mizzl" );
	deepEqual( Stem("mlud"), "mlud" );
	deepEqual( Stem("mm"), "mm" );
	deepEqual( Stem("mmd"), "mmd" );
	deepEqual( Stem("mo"), "mo" );
	deepEqual( Stem("moan"), "moan" );
	deepEqual( Stem("moaned"), "moan" );
	deepEqual( Stem("moaning"), "moan" );
	deepEqual( Stem("moanings"), "moan" );
	deepEqual( Stem("moans"), "moan" );
	deepEqual( Stem("moat"), "moat" );
	deepEqual( Stem("mob"), "mob" );
	deepEqual( Stem("mobbed"), "mob" );
	deepEqual( Stem("mobbs"), "mobb" );
	deepEqual( Stem("mobile"), "mobil" );
	deepEqual( Stem("mock"), "mock" );
	deepEqual( Stem("mocked"), "mock" );
	deepEqual( Stem("mockeries"), "mockeri" );
	deepEqual( Stem("mockery"), "mockeri" );
	deepEqual( Stem("mocking"), "mock" );
	deepEqual( Stem("mockingly"), "mock" );
	deepEqual( Stem("mode"), "mode" );
	deepEqual( Stem("model"), "model" );
	deepEqual( Stem("modelled"), "model" );
	deepEqual( Stem("modelling"), "model" );
	deepEqual( Stem("models"), "model" );
	deepEqual( Stem("moderate"), "moder" );
	deepEqual( Stem("moderated"), "moder" );
	deepEqual( Stem("moderately"), "moder" );
	deepEqual( Stem("moderation"), "moder" );
	deepEqual( Stem("modern"), "modern" );
	deepEqual( Stem("modes"), "mode" );
	deepEqual( Stem("modest"), "modest" );
	deepEqual( Stem("modestly"), "modest" );
	deepEqual( Stem("modesty"), "modesti" );
	deepEqual( Stem("modifications"), "modif" );
	deepEqual( Stem("modified"), "modifi" );
	deepEqual( Stem("modify"), "modifi" );
	deepEqual( Stem("mogley"), "mogley" );
	deepEqual( Stem("mogul"), "mogul" );
	deepEqual( Stem("mohair"), "mohair" );
	deepEqual( Stem("moi"), "moi" );
	deepEqual( Stem("moiler"), "moiler" );
	deepEqual( Stem("moind"), "moind" );
	deepEqual( Stem("moins"), "moin" );
	deepEqual( Stem("moist"), "moist" );
	deepEqual( Stem("moisten"), "moisten" );
	deepEqual( Stem("moistened"), "moisten" );
	deepEqual( Stem("moistening"), "moisten" );
	deepEqual( Stem("moisture"), "moistur" );
	deepEqual( Stem("molar"), "molar" );
	deepEqual( Stem("molasses"), "molass" );
	deepEqual( Stem("moldavia"), "moldavia" );
	deepEqual( Stem("mole"), "mole" );
	deepEqual( Stem("molest"), "molest" );
	deepEqual( Stem("molestation"), "molest" );
	deepEqual( Stem("molested"), "molest" );
	deepEqual( Stem("molesting"), "molest" );
	deepEqual( Stem("moliere"), "molier" );
	deepEqual( Stem("molina"), "molina" );
	deepEqual( Stem("mollified"), "mollifi" );
	deepEqual( Stem("mollify"), "mollifi" );
	deepEqual( Stem("mollifying"), "mollifi" );
	deepEqual( Stem("mollusca"), "mollusca" );
	deepEqual( Stem("molluscous"), "mollusc" );
	deepEqual( Stem("molluscs"), "mollusc" );
	deepEqual( Stem("molothrus"), "molothrus" );
	deepEqual( Stem("molten"), "molten" );
	deepEqual( Stem("momen"), "momen" );
	deepEqual( Stem("moment"), "moment" );
	deepEqual( Stem("momentarily"), "momentarili" );
	deepEqual( Stem("momentary"), "momentari" );
	deepEqual( Stem("momentous"), "moment" );
	deepEqual( Stem("moments"), "moment" );
	deepEqual( Stem("momentum"), "momentum" );
	deepEqual( Stem("mon"), "mon" );
	deepEqual( Stem("monarch"), "monarch" );
	deepEqual( Stem("monarchs"), "monarch" );
	deepEqual( Stem("monastery"), "monasteri" );
	deepEqual( Stem("monats"), "monat" );
	deepEqual( Stem("monceaux"), "monceaux" );
	deepEqual( Stem("mond"), "mond" );
	deepEqual( Stem("monday"), "monday" );
	deepEqual( Stem("mondays"), "monday" );
	deepEqual( Stem("monde"), "mond" );
	deepEqual( Stem("monetary"), "monetari" );
	deepEqual( Stem("money"), "money" );
	deepEqual( Stem("moneyed"), "money" );
	deepEqual( Stem("moneys"), "money" );
	deepEqual( Stem("monge"), "mong" );
	deepEqual( Stem("mongering"), "monger" );
	deepEqual( Stem("mongrel"), "mongrel" );
	deepEqual( Stem("mongrels"), "mongrel" );
	deepEqual( Stem("mongrober"), "mongrob" );
	deepEqual( Stem("monied"), "moni" );
	deepEqual( Stem("monitions"), "monit" );
	deepEqual( Stem("monk"), "monk" );
	deepEqual( Stem("monkey"), "monkey" );
	deepEqual( Stem("monkeyish"), "monkeyish" );
	deepEqual( Stem("monkeys"), "monkey" );
	deepEqual( Stem("monks"), "monk" );
	deepEqual( Stem("monneyment"), "monney" );
	deepEqual( Stem("monoceros"), "monocero" );
	deepEqual( Stem("monocotyledonous"), "monocotyledon" );
	deepEqual( Stem("monodonta"), "monodonta" );
	deepEqual( Stem("monogram"), "monogram" );
	deepEqual( Stem("monologues"), "monologu" );
	deepEqual( Stem("monomania"), "monomania" );
	deepEqual( Stem("monomaniac"), "monomaniac" );
	deepEqual( Stem("monomaniacs"), "monomaniac" );
	deepEqual( Stem("monopolising"), "monopolis" );
	deepEqual( Stem("monopolist"), "monopolist" );
	deepEqual( Stem("monopolize"), "monopol" );
	deepEqual( Stem("monopoly"), "monopoli" );
	deepEqual( Stem("monosyllabic"), "monosyllab" );
	deepEqual( Stem("monosyllable"), "monosyl" );
	deepEqual( Stem("monosyllables"), "monosyl" );
	deepEqual( Stem("monotonous"), "monoton" );
	deepEqual( Stem("monotonously"), "monoton" );
	deepEqual( Stem("monotony"), "monotoni" );
	deepEqual( Stem("monsieur"), "monsieur" );
	deepEqual( Stem("monsoon"), "monsoon" );
	deepEqual( Stem("monster"), "monster" );
	deepEqual( Stem("monsters"), "monster" );
	deepEqual( Stem("monsther"), "monsther" );
	deepEqual( Stem("monstrous"), "monstrous" );
	deepEqual( Stem("monstrously"), "monstrous" );
	deepEqual( Stem("mont"), "mont" );
	deepEqual( Stem("montagne"), "montagn" );
	deepEqual( Stem("monte"), "mont" );
	deepEqual( Stem("monter"), "monter" );
	deepEqual( Stem("montes"), "mont" );
	deepEqual( Stem("month"), "month" );
	deepEqual( Stem("monthly"), "month" );
	deepEqual( Stem("months"), "month" );
	deepEqual( Stem("monument"), "monument" );
	deepEqual( Stem("monumental"), "monument" );
	deepEqual( Stem("monuments"), "monument" );
	deepEqual( Stem("mood"), "mood" );
	deepEqual( Stem("moodily"), "moodili" );
	deepEqual( Stem("moodiness"), "moodi" );
	deepEqual( Stem("moodle"), "moodl" );
	deepEqual( Stem("moods"), "mood" );
	deepEqual( Stem("moody"), "moodi" );
	deepEqual( Stem("moon"), "moon" );
	deepEqual( Stem("mooney"), "mooney" );
	deepEqual( Stem("mooning"), "moon" );
	deepEqual( Stem("moonlight"), "moonlight" );
	deepEqual( Stem("moonlighted"), "moonlight" );
	deepEqual( Stem("moons"), "moon" );
	deepEqual( Stem("moonshine"), "moonshin" );
	deepEqual( Stem("moonths"), "moonth" );
	deepEqual( Stem("moor"), "moor" );
	deepEqual( Stem("moored"), "moor" );
	deepEqual( Stem("moorings"), "moor" );
	deepEqual( Stem("moorish"), "moorish" );
	deepEqual( Stem("moorland"), "moorland" );
	deepEqual( Stem("moors"), "moor" );
	deepEqual( Stem("moot"), "moot" );
	deepEqual( Stem("mooted"), "moot" );
	deepEqual( Stem("mooth"), "mooth" );
	deepEqual( Stem("moothers"), "moother" );
	deepEqual( Stem("mope"), "mope" );
	deepEqual( Stem("moped"), "mope" );
	deepEqual( Stem("moping"), "mope" );
	deepEqual( Stem("mor"), "mor" );
	deepEqual( Stem("moraine"), "morain" );
	deepEqual( Stem("moral"), "moral" );
	deepEqual( Stem("moralise"), "moralis" );
	deepEqual( Stem("moralised"), "moralis" );
	deepEqual( Stem("moralising"), "moralis" );
	deepEqual( Stem("moralisings"), "moralis" );
	deepEqual( Stem("morality"), "moral" );
	deepEqual( Stem("moralizes"), "moral" );
	deepEqual( Stem("moralizing"), "moral" );
	deepEqual( Stem("morally"), "moral" );
	deepEqual( Stem("morals"), "moral" );
	deepEqual( Stem("morass"), "morass" );
	deepEqual( Stem("morbid"), "morbid" );
	deepEqual( Stem("morbidly"), "morbid" );
	deepEqual( Stem("morbury"), "morburi" );
	deepEqual( Stem("more"), "more" );
	deepEqual( Stem("moreover"), "moreov" );
	deepEqual( Stem("moresby"), "moresbi" );
	deepEqual( Stem("moreton"), "moreton" );
	deepEqual( Stem("morgan"), "morgan" );
	deepEqual( Stem("morgenfruh"), "morgenfruh" );
	deepEqual( Stem("morleena"), "morleena" );
	deepEqual( Stem("morn"), "morn" );
	deepEqual( Stem("morning"), "morn" );
	deepEqual( Stem("mornings"), "morn" );
	deepEqual( Stem("mornmg"), "mornmg" );
	deepEqual( Stem("morocco"), "morocco" );
	deepEqual( Stem("morose"), "moros" );
	deepEqual( Stem("morosely"), "moros" );
	deepEqual( Stem("moroseness"), "moros" );
	deepEqual( Stem("morpheus"), "morpheus" );
	deepEqual( Stem("morrow"), "morrow" );
	deepEqual( Stem("morsel"), "morsel" );
	deepEqual( Stem("morsels"), "morsel" );
	deepEqual( Stem("mortal"), "mortal" );
	deepEqual( Stem("mortality"), "mortal" );
	deepEqual( Stem("mortally"), "mortal" );
	deepEqual( Stem("mortals"), "mortal" );
	deepEqual( Stem("mortar"), "mortar" );
	deepEqual( Stem("mortgage"), "mortgag" );
	deepEqual( Stem("mortgages"), "mortgag" );
	deepEqual( Stem("mortgaging"), "mortgag" );
	deepEqual( Stem("mortification"), "mortif" );
	deepEqual( Stem("mortified"), "mortifi" );
	deepEqual( Stem("mortify"), "mortifi" );
	deepEqual( Stem("mortifying"), "mortifi" );
	deepEqual( Stem("mortimer"), "mortim" );
	deepEqual( Stem("morton"), "morton" );
	deepEqual( Stem("mos"), "mos" );
	deepEqual( Stem("moscow"), "moscow" );
	deepEqual( Stem("mosquitoes"), "mosquito" );
	deepEqual( Stem("moss"), "moss" );
	deepEqual( Stem("mosses"), "moss" );
	deepEqual( Stem("mossy"), "mossi" );
	deepEqual( Stem("most"), "most" );
	deepEqual( Stem("mostly"), "most" );
	deepEqual( Stem("moth"), "moth" );
	deepEqual( Stem("mother"), "mother" );
	deepEqual( Stem("motherless"), "motherless" );
	deepEqual( Stem("motherly"), "mother" );
	deepEqual( Stem("mothers"), "mother" );
	deepEqual( Stem("moths"), "moth" );
	deepEqual( Stem("motion"), "motion" );
	deepEqual( Stem("motioned"), "motion" );
	deepEqual( Stem("motioning"), "motion" );
	deepEqual( Stem("motionles"), "motionl" );
	deepEqual( Stem("motionless"), "motionless" );
	deepEqual( Stem("motions"), "motion" );
	deepEqual( Stem("motive"), "motiv" );
	deepEqual( Stem("motives"), "motiv" );
	deepEqual( Stem("motley"), "motley" );
	deepEqual( Stem("mottled"), "mottl" );
	deepEqual( Stem("mottles"), "mottl" );
	deepEqual( Stem("motto"), "motto" );
	deepEqual( Stem("mouchoir"), "mouchoir" );
	deepEqual( Stem("mould"), "mould" );
	deepEqual( Stem("moulded"), "mould" );
	deepEqual( Stem("moulder"), "moulder" );
	deepEqual( Stem("mouldering"), "moulder" );
	deepEqual( Stem("moulding"), "mould" );
	deepEqual( Stem("moulds"), "mould" );
	deepEqual( Stem("mouldy"), "mouldi" );
	deepEqual( Stem("moun"), "moun" );
	deepEqual( Stem("mound"), "mound" );
	deepEqual( Stem("mounds"), "mound" );
	deepEqual( Stem("mount"), "mount" );
	deepEqual( Stem("mountain"), "mountain" );
	deepEqual( Stem("mountainous"), "mountain" );
	deepEqual( Stem("mountains"), "mountain" );
	deepEqual( Stem("mountebanks"), "mountebank" );
	deepEqual( Stem("mounted"), "mount" );
	deepEqual( Stem("mounting"), "mount" );
	deepEqual( Stem("mounts"), "mount" );
	deepEqual( Stem("mourn"), "mourn" );
	deepEqual( Stem("mourned"), "mourn" );
	deepEqual( Stem("mourner"), "mourner" );
	deepEqual( Stem("mourners"), "mourner" );
	deepEqual( Stem("mournful"), "mourn" );
	deepEqual( Stem("mournfully"), "mourn" );
	deepEqual( Stem("mournfulness"), "mourn" );
	deepEqual( Stem("mourning"), "mourn" );
	deepEqual( Stem("mourns"), "mourn" );
	deepEqual( Stem("mouse"), "mous" );
	deepEqual( Stem("moustache"), "moustach" );
	deepEqual( Stem("moustached"), "moustach" );
	deepEqual( Stem("moustaches"), "moustach" );
	deepEqual( Stem("moustachios"), "moustachio" );
	deepEqual( Stem("mouth"), "mouth" );
	deepEqual( Stem("mouthed"), "mouth" );
	deepEqual( Stem("mouthful"), "mouth" );
	deepEqual( Stem("mouthfuls"), "mouth" );
	deepEqual( Stem("mouthing"), "mouth" );
	deepEqual( Stem("mouthpiece"), "mouthpiec" );
	deepEqual( Stem("mouths"), "mouth" );
	deepEqual( Stem("mov"), "mov" );
	deepEqual( Stem("movables"), "movabl" );
	deepEqual( Stem("move"), "move" );
	deepEqual( Stem("moveable"), "moveabl" );
	deepEqual( Stem("moved"), "move" );
	deepEqual( Stem("movemen"), "movemen" );
	deepEqual( Stem("movement"), "movement" );
	deepEqual( Stem("movements"), "movement" );
	deepEqual( Stem("mover"), "mover" );
	deepEqual( Stem("moves"), "move" );
	deepEqual( Stem("moving"), "move" );
	deepEqual( Stem("mowed"), "mow" );
	deepEqual( Stem("mown"), "mown" );
	deepEqual( Stem("mozart"), "mozart" );
	deepEqual( Stem("mp"), "mp" );
	deepEqual( Stem("mps"), "mps" );
	deepEqual( Stem("mr"), "mr" );
	deepEqual( Stem("mrs"), "mrs" );
	deepEqual( Stem("ms"), "ms" );
	deepEqual( Stem("mt"), "mt" );
	deepEqual( Stem("muc"), "muc" );
	deepEqual( Stem("much"), "much" );
	deepEqual( Stem("muchisimas"), "muchisima" );
	deepEqual( Stem("mucilaginous"), "mucilagin" );
	deepEqual( Stem("mucker"), "mucker" );
	deepEqual( Stem("mud"), "mud" );
	deepEqual( Stem("muddiest"), "muddiest" );
	deepEqual( Stem("muddle"), "muddl" );
	deepEqual( Stem("muddled"), "muddl" );
	deepEqual( Stem("muddles"), "muddl" );
	deepEqual( Stem("muddocks"), "muddock" );
	deepEqual( Stem("muddy"), "muddi" );
	deepEqual( Stem("muddying"), "muddi" );
	deepEqual( Stem("mudie"), "mudi" );
	deepEqual( Stem("mudlike"), "mudlik" );
	deepEqual( Stem("muffin"), "muffin" );
	deepEqual( Stem("muffins"), "muffin" );
	deepEqual( Stem("muffle"), "muffl" );
	deepEqual( Stem("muffled"), "muffl" );
	deepEqual( Stem("muffles"), "muffl" );
	deepEqual( Stem("muffling"), "muffl" );
	deepEqual( Stem("muffy"), "muffi" );
	deepEqual( Stem("mug"), "mug" );
	deepEqual( Stem("mugeres"), "muger" );
	deepEqual( Stem("mugs"), "mug" );
	deepEqual( Stem("mulatto"), "mulatto" );
	deepEqual( Stem("mulberry"), "mulberri" );
	deepEqual( Stem("mulcted"), "mulct" );
	deepEqual( Stem("mule"), "mule" );
	deepEqual( Stem("mules"), "mule" );
	deepEqual( Stem("muleteer"), "mulet" );
	deepEqual( Stem("muleteers"), "mulet" );
	deepEqual( Stem("mulita"), "mulita" );
	deepEqual( Stem("mullins"), "mullin" );
	deepEqual( Stem("multimaculatus"), "multimaculatus" );
	deepEqual( Stem("multiplication"), "multipl" );
	deepEqual( Stem("multiplicity"), "multipl" );
	deepEqual( Stem("multiplied"), "multipli" );
	deepEqual( Stem("multiplier"), "multipli" );
	deepEqual( Stem("multiply"), "multipli" );
	deepEqual( Stem("multiplying"), "multipli" );
	deepEqual( Stem("multitude"), "multitud" );
	deepEqual( Stem("multitudes"), "multitud" );
	deepEqual( Stem("multitudinous"), "multitudin" );
	deepEqual( Stem("mum"), "mum" );
	deepEqual( Stem("mumbled"), "mumbl" );
	deepEqual( Stem("mumbling"), "mumbl" );
	deepEqual( Stem("mummery"), "mummeri" );
	deepEqual( Stem("mummy"), "mummi" );
	deepEqual( Stem("mun"), "mun" );
	deepEqual( Stem("munchausen"), "munchausen" );
	deepEqual( Stem("munches"), "munch" );
	deepEqual( Stem("munching"), "munch" );
	deepEqual( Stem("mundane"), "mundan" );
	deepEqual( Stem("mungo"), "mungo" );
	deepEqual( Stem("munich"), "munich" );
	deepEqual( Stem("municipal"), "municip" );
	deepEqual( Stem("municipalities"), "municip" );
	deepEqual( Stem("munificence"), "munific" );
	deepEqual( Stem("munificent"), "munific" );
	deepEqual( Stem("muniz"), "muniz" );
	deepEqual( Stem("muntle"), "muntl" );
	deepEqual( Stem("muntlehiney"), "muntlehiney" );
	deepEqual( Stem("murder"), "murder" );
	deepEqual( Stem("murdered"), "murder" );
	deepEqual( Stem("murderer"), "murder" );
	deepEqual( Stem("murderers"), "murder" );
	deepEqual( Stem("murderess"), "murderess" );
	deepEqual( Stem("murdering"), "murder" );
	deepEqual( Stem("murderous"), "murder" );
	deepEqual( Stem("murders"), "murder" );
	deepEqual( Stem("muriate"), "muriat" );
	deepEqual( Stem("muriates"), "muriat" );
	deepEqual( Stem("murinus"), "murinus" );
	deepEqual( Stem("murky"), "murki" );
	deepEqual( Stem("murmur"), "murmur" );
	deepEqual( Stem("murmured"), "murmur" );
	deepEqual( Stem("murmuring"), "murmur" );
	deepEqual( Stem("murmuringly"), "murmur" );
	deepEqual( Stem("murmurings"), "murmur" );
	deepEqual( Stem("murmurs"), "murmur" );
	deepEqual( Stem("murphy"), "murphi" );
	deepEqual( Stem("murray"), "murray" );
	deepEqual( Stem("murrumbidgee"), "murrumbidge" );
	deepEqual( Stem("mus"), "mus" );
	deepEqual( Stem("muscle"), "muscl" );
	deepEqual( Stem("muscles"), "muscl" );
	deepEqual( Stem("muscular"), "muscular" );
	deepEqual( Stem("muse"), "muse" );
	deepEqual( Stem("mused"), "muse" );
	deepEqual( Stem("muses"), "muse" );
	deepEqual( Stem("museum"), "museum" );
	deepEqual( Stem("musgrave"), "musgrav" );
	deepEqual( Stem("mushroom"), "mushroom" );
	deepEqual( Stem("mushrooms"), "mushroom" );
	deepEqual( Stem("music"), "music" );
	deepEqual( Stem("musical"), "music" );
	deepEqual( Stem("musician"), "musician" );
	deepEqual( Stem("musing"), "muse" );
	deepEqual( Stem("musingly"), "muse" );
	deepEqual( Stem("musk"), "musk" );
	deepEqual( Stem("musket"), "musket" );
	deepEqual( Stem("musketry"), "musketri" );
	deepEqual( Stem("muskets"), "musket" );
	deepEqual( Stem("muslin"), "muslin" );
	deepEqual( Stem("muslins"), "muslin" );
	deepEqual( Stem("musn"), "musn" );
	deepEqual( Stem("musquitoes"), "musquito" );
	deepEqual( Stem("muss"), "muss" );
	deepEqual( Stem("mussel"), "mussel" );
	deepEqual( Stem("must"), "must" );
	deepEqual( Stem("mustaches"), "mustach" );
	deepEqual( Stem("mustard"), "mustard" );
	deepEqual( Stem("muster"), "muster" );
	deepEqual( Stem("mustered"), "muster" );
	deepEqual( Stem("mustn"), "mustn" );
	deepEqual( Stem("musty"), "musti" );
	deepEqual( Stem("mute"), "mute" );
	deepEqual( Stem("mutilated"), "mutil" );
	deepEqual( Stem("mutilates"), "mutil" );
	deepEqual( Stem("mutinous"), "mutin" );
	deepEqual( Stem("mutiny"), "mutini" );
	deepEqual( Stem("mutter"), "mutter" );
	deepEqual( Stem("muttered"), "mutter" );
	deepEqual( Stem("muttering"), "mutter" );
	deepEqual( Stem("mutterings"), "mutter" );
	deepEqual( Stem("mutters"), "mutter" );
	deepEqual( Stem("mutton"), "mutton" );
	deepEqual( Stem("mutual"), "mutual" );
	deepEqual( Stem("mutually"), "mutual" );
	deepEqual( Stem("muy"), "muy" );
	deepEqual( Stem("muzzle"), "muzzl" );
	deepEqual( Stem("my"), "my" );
	deepEqual( Stem("myiobius"), "myiobius" );
	deepEqual( Stem("mylodon"), "mylodon" );
	deepEqual( Stem("myopotamus"), "myopotamus" );
	deepEqual( Stem("myriads"), "myriad" );
	deepEqual( Stem("myrmidons"), "myrmidon" );
	deepEqual( Stem("myrtle"), "myrtl" );
	deepEqual( Stem("myrtus"), "myrtus" );
	deepEqual( Stem("myself"), "myself" );
	deepEqual( Stem("mysteries"), "mysteri" );
	deepEqual( Stem("mysterieuse"), "mysterieus" );
	deepEqual( Stem("mysterious"), "mysteri" );
	deepEqual( Stem("mysteriously"), "mysteri" );
	deepEqual( Stem("mystery"), "mysteri" );
	deepEqual( Stem("mystic"), "mystic" );
	deepEqual( Stem("mystification"), "mystif" );
	deepEqual( Stem("mystified"), "mystifi" );
	deepEqual( Stem("mystify"), "mystifi" );
	deepEqual( Stem("mythische"), "mythisch" );
	deepEqual( Stem("myths"), "myth" );
	deepEqual( Stem("mytilus"), "mytilus" );
	deepEqual( Stem("n"), "n" );
	deepEqual( Stem("na"), "na" );
	deepEqual( Stem("nae"), "nae" );
	deepEqual( Stem("nag"), "nag" );
	deepEqual( Stem("nags"), "nag" );
	deepEqual( Stem("nail"), "nail" );
	deepEqual( Stem("nailed"), "nail" );
	deepEqual( Stem("nails"), "nail" );
	deepEqual( Stem("naive"), "naiv" );
	deepEqual( Stem("naively"), "naiv" );
	deepEqual( Stem("naked"), "nake" );
	deepEqual( Stem("nakedness"), "naked" );
	deepEqual( Stem("nam"), "nam" );
	deepEqual( Stem("name"), "name" );
	deepEqual( Stem("named"), "name" );
	deepEqual( Stem("nameless"), "nameless" );
	deepEqual( Stem("namely"), "name" );
	deepEqual( Stem("names"), "name" );
	deepEqual( Stem("namesake"), "namesak" );
	deepEqual( Stem("naming"), "name" );
	deepEqual( Stem("nankeen"), "nankeen" );
	deepEqual( Stem("nanus"), "nanus" );
	deepEqual( Stem("nap"), "nap" );
	deepEqual( Stem("nape"), "nape" );
	deepEqual( Stem("napkin"), "napkin" );
	deepEqual( Stem("naples"), "napl" );
	deepEqual( Stem("napoleon"), "napoleon" );
	deepEqual( Stem("napoleons"), "napoleon" );
	deepEqual( Stem("narborough"), "narborough" );
	deepEqual( Stem("narcissus"), "narcissus" );
	deepEqual( Stem("narr"), "narr" );
	deepEqual( Stem("narrated"), "narrat" );
	deepEqual( Stem("narrates"), "narrat" );
	deepEqual( Stem("narration"), "narrat" );
	deepEqual( Stem("narrative"), "narrat" );
	deepEqual( Stem("narratives"), "narrat" );
	deepEqual( Stem("narrow"), "narrow" );
	deepEqual( Stem("narrowed"), "narrow" );
	deepEqual( Stem("narrower"), "narrow" );
	deepEqual( Stem("narrowest"), "narrowest" );
	deepEqual( Stem("narrowing"), "narrow" );
	deepEqual( Stem("narrowly"), "narrowli" );
	deepEqual( Stem("narrowness"), "narrow" );
	deepEqual( Stem("narrows"), "narrow" );
	deepEqual( Stem("nasal"), "nasal" );
	deepEqual( Stem("nassa"), "nassa" );
	deepEqual( Stem("nastasya"), "nastasya" );
	deepEqual( Stem("nastiness"), "nasti" );
	deepEqual( Stem("nasturtions"), "nasturt" );
	deepEqual( Stem("nasty"), "nasti" );
	deepEqual( Stem("nat"), "nat" );
	deepEqual( Stem("nata"), "nata" );
	deepEqual( Stem("natalya"), "natalya" );
	deepEqual( Stem("nate"), "nate" );
	deepEqual( Stem("nateral"), "nater" );
	deepEqual( Stem("naterally"), "nater" );
	deepEqual( Stem("nation"), "nation" );
	deepEqual( Stem("national"), "nation" );
	deepEqual( Stem("nationality"), "nation" );
	deepEqual( Stem("nations"), "nation" );
	deepEqual( Stem("native"), "nativ" );
	deepEqual( Stem("natives"), "nativ" );
	deepEqual( Stem("natur"), "natur" );
	deepEqual( Stem("natural"), "natur" );
	deepEqual( Stem("naturalest"), "naturalest" );
	deepEqual( Stem("naturalist"), "naturalist" );
	deepEqual( Stem("naturalista"), "naturalista" );
	deepEqual( Stem("naturalists"), "naturalist" );
	deepEqual( Stem("naturalized"), "natur" );
	deepEqual( Stem("naturally"), "natur" );
	deepEqual( Stem("naturalness"), "natur" );
	deepEqual( Stem("nature"), "natur" );
	deepEqual( Stem("natured"), "natur" );
	deepEqual( Stem("naturedly"), "natur" );
	deepEqual( Stem("naturelles"), "naturell" );
	deepEqual( Stem("natures"), "natur" );
	deepEqual( Stem("naughtiest"), "naughtiest" );
	deepEqual( Stem("naughtiness"), "naughti" );
	deepEqual( Stem("naughty"), "naughti" );
	deepEqual( Stem("nausea"), "nausea" );
	deepEqual( Stem("nauseous"), "nauseous" );
	deepEqual( Stem("nautical"), "nautic" );
	deepEqual( Stem("naval"), "naval" );
	deepEqual( Stem("navarin"), "navarin" );
	deepEqual( Stem("nave"), "nave" );
	deepEqual( Stem("navedad"), "navedad" );
	deepEqual( Stem("navel"), "navel" );
	deepEqual( Stem("navies"), "navi" );
	deepEqual( Stem("navigate"), "navig" );
	deepEqual( Stem("navigating"), "navig" );
	deepEqual( Stem("navigation"), "navig" );
	deepEqual( Stem("navigator"), "navig" );
	deepEqual( Stem("navigators"), "navig" );
	deepEqual( Stem("navy"), "navi" );
	deepEqual( Stem("nay"), "nay" );
	deepEqual( Stem("nayver"), "nayver" );
	deepEqual( Stem("nd"), "nd" );
	deepEqual( Stem("ne"), "ne" );
	deepEqual( Stem("nea"), "nea" );
	deepEqual( Stem("neame"), "neam" );
	deepEqual( Stem("neaming"), "neam" );
	deepEqual( Stem("neane"), "nean" );
	deepEqual( Stem("near"), "near" );
	deepEqual( Stem("neared"), "near" );
	deepEqual( Stem("nearer"), "nearer" );
	deepEqual( Stem("nearest"), "nearest" );
	deepEqual( Stem("nearl"), "nearl" );
	deepEqual( Stem("nearly"), "near" );
	deepEqual( Stem("nearness"), "near" );
	deepEqual( Stem("nearsighted"), "nearsight" );
	deepEqual( Stem("neat"), "neat" );
	deepEqual( Stem("neatest"), "neatest" );
	deepEqual( Stem("neath"), "neath" );
	deepEqual( Stem("neatly"), "neat" );
	deepEqual( Stem("neatness"), "neat" );
	deepEqual( Stem("nebulous"), "nebul" );
	deepEqual( Stem("necesary"), "necesari" );
	deepEqual( Stem("necesidad"), "necesidad" );
	deepEqual( Stem("necessaries"), "necessari" );
	deepEqual( Stem("necessarily"), "necessarili" );
	deepEqual( Stem("necessary"), "necessari" );
	deepEqual( Stem("necessitate"), "necessit" );
	deepEqual( Stem("necessitated"), "necessit" );
	deepEqual( Stem("necessitates"), "necessit" );
	deepEqual( Stem("necessities"), "necess" );
	deepEqual( Stem("necessity"), "necess" );
	deepEqual( Stem("neck"), "neck" );
	deepEqual( Stem("neckcloth"), "neckcloth" );
	deepEqual( Stem("neckcloths"), "neckcloth" );
	deepEqual( Stem("necked"), "neck" );
	deepEqual( Stem("neckerchief"), "neckerchief" );
	deepEqual( Stem("neckett"), "neckett" );
	deepEqual( Stem("neckkerchief"), "neckkerchief" );
	deepEqual( Stem("necklace"), "necklac" );
	deepEqual( Stem("necklaced"), "necklac" );
	deepEqual( Stem("necklaces"), "necklac" );
	deepEqual( Stem("necks"), "neck" );
	deepEqual( Stem("necktie"), "neckti" );
	deepEqual( Stem("necromancer"), "necromanc" );
	deepEqual( Stem("necrophagous"), "necrophag" );
	deepEqual( Stem("nectar"), "nectar" );
	deepEqual( Stem("nectarine"), "nectarin" );
	deepEqual( Stem("nectarines"), "nectarin" );
	deepEqual( Stem("ned"), "ned" );
	deepEqual( Stem("neeburs"), "neebur" );
	deepEqual( Stem("need"), "need" );
	deepEqual( Stem("needed"), "need" );
	deepEqual( Stem("needful"), "need" );
	deepEqual( Stem("needing"), "need" );
	deepEqual( Stem("needle"), "needl" );
	deepEqual( Stem("needless"), "needless" );
	deepEqual( Stem("needlework"), "needlework" );
	deepEqual( Stem("needn"), "needn" );
	deepEqual( Stem("needs"), "need" );
	deepEqual( Stem("needy"), "needi" );
	deepEqual( Stem("neeght"), "neeght" );
	deepEqual( Stem("nefarious"), "nefari" );
	deepEqual( Stem("negative"), "negat" );
	deepEqual( Stem("neglect"), "neglect" );
	deepEqual( Stem("neglected"), "neglect" );
	deepEqual( Stem("neglectful"), "neglect" );
	deepEqual( Stem("neglecting"), "neglect" );
	deepEqual( Stem("negligemment"), "negligem" );
	deepEqual( Stem("negligence"), "neglig" );
	deepEqual( Stem("negligent"), "neglig" );
	deepEqual( Stem("negligently"), "neglig" );
	deepEqual( Stem("negotiable"), "negoti" );
	deepEqual( Stem("negotiate"), "negoti" );
	deepEqual( Stem("negotiating"), "negoti" );
	deepEqual( Stem("negotiation"), "negoti" );
	deepEqual( Stem("negotiations"), "negoti" );
	deepEqual( Stem("negress"), "negress" );
	deepEqual( Stem("negro"), "negro" );
	deepEqual( Stem("negroes"), "negro" );
	deepEqual( Stem("negus"), "negus" );
	deepEqual( Stem("neigh"), "neigh" );
	deepEqual( Stem("neighborhood"), "neighborhood" );
	deepEqual( Stem("neighbour"), "neighbour" );
	deepEqual( Stem("neighbourhood"), "neighbourhood" );
	deepEqual( Stem("neighbouring"), "neighbour" );
	deepEqual( Stem("neighbourly"), "neighbour" );
	deepEqual( Stem("neighbours"), "neighbour" );
	deepEqual( Stem("neighing"), "neigh" );
	deepEqual( Stem("neight"), "neight" );
	deepEqual( Stem("neither"), "neither" );
	deepEqual( Stem("nekrassov"), "nekrassov" );
	deepEqual( Stem("nelly"), "nelli" );
	deepEqual( Stem("nemo"), "nemo" );
	deepEqual( Stem("nemophilas"), "nemophila" );
	deepEqual( Stem("neophyte"), "neophyt" );
	deepEqual( Stem("nepean"), "nepean" );
	deepEqual( Stem("nephew"), "nephew" );
	deepEqual( Stem("nephews"), "nephew" );
	deepEqual( Stem("ner"), "ner" );
	deepEqual( Stem("nereidae"), "nereida" );
	deepEqual( Stem("nereidous"), "nereid" );
	deepEqual( Stem("nero"), "nero" );
	deepEqual( Stem("nerve"), "nerv" );
	deepEqual( Stem("nerves"), "nerv" );
	deepEqual( Stem("nerving"), "nerv" );
	deepEqual( Stem("nervous"), "nervous" );
	deepEqual( Stem("nervously"), "nervous" );
	deepEqual( Stem("nervousness"), "nervous" );
	deepEqual( Stem("nervure"), "nervur" );
	deepEqual( Stem("nervures"), "nervur" );
	deepEqual( Stem("nesbit"), "nesbit" );
	deepEqual( Stem("nest"), "nest" );
	deepEqual( Stem("nestled"), "nestl" );
	deepEqual( Stem("nestling"), "nestl" );
	deepEqual( Stem("nestlings"), "nestl" );
	deepEqual( Stem("nestor"), "nestor" );
	deepEqual( Stem("nests"), "nest" );
	deepEqual( Stem("net"), "net" );
	deepEqual( Stem("nether"), "nether" );
	deepEqual( Stem("nets"), "net" );
	deepEqual( Stem("netted"), "net" );
	deepEqual( Stem("nettle"), "nettl" );
	deepEqual( Stem("nettled"), "nettl" );
	deepEqual( Stem("nettles"), "nettl" );
	deepEqual( Stem("neuralgia"), "neuralgia" );
	deepEqual( Stem("neuroptera"), "neuroptera" );
	deepEqual( Stem("neuter"), "neuter" );
	deepEqual( Stem("neutral"), "neutral" );
	deepEqual( Stem("neva"), "neva" );
	deepEqual( Stem("neve"), "neve" );
	deepEqual( Stem("never"), "never" );
	deepEqual( Stem("nevertheless"), "nevertheless" );
	deepEqual( Stem("nevew"), "nevew" );
	deepEqual( Stem("nevsky"), "nevski" );
	deepEqual( Stem("new"), "new" );
	deepEqual( Stem("newark"), "newark" );
	deepEqual( Stem("newcastle"), "newcastl" );
	deepEqual( Stem("newcomers"), "newcom" );
	deepEqual( Stem("newer"), "newer" );
	deepEqual( Stem("newest"), "newest" );
	deepEqual( Stem("newgate"), "newgat" );
	deepEqual( Stem("newly"), "newli" );
	deepEqual( Stem("newman"), "newman" );
	deepEqual( Stem("newmarket"), "newmarket" );
	deepEqual( Stem("newness"), "new" );
	deepEqual( Stem("news"), "news" );
	deepEqual( Stem("newsmen"), "newsmen" );
	deepEqual( Stem("newspaper"), "newspap" );
	deepEqual( Stem("newspapers"), "newspap" );
	deepEqual( Stem("newton"), "newton" );
	deepEqual( Stem("next"), "next" );
	deepEqual( Stem("ney"), "ney" );
	deepEqual( Stem("neyver"), "neyver" );
	deepEqual( Stem("nezhin"), "nezhin" );
	deepEqual( Stem("ni"), "ni" );
	deepEqual( Stem("niagaras"), "niagara" );
	deepEqual( Stem("niata"), "niata" );
	deepEqual( Stem("niatas"), "niata" );
	deepEqual( Stem("nib"), "nib" );
	deepEqual( Stem("nice"), "nice" );
	deepEqual( Stem("nicely"), "nice" );
	deepEqual( Stem("niceness"), "nice" );
	deepEqual( Stem("nicer"), "nicer" );
	deepEqual( Stem("nicest"), "nicest" );
	deepEqual( Stem("nicety"), "niceti" );
	deepEqual( Stem("niche"), "nich" );
	deepEqual( Stem("nicher"), "nicher" );
	deepEqual( Stem("niches"), "nich" );
	deepEqual( Stem("nicholas"), "nichola" );
	deepEqual( Stem("nick"), "nick" );
	deepEqual( Stem("nickelby"), "nickelbi" );
	deepEqual( Stem("nickleby"), "nicklebi" );
	deepEqual( Stem("nicklebys"), "nicklebi" );
	deepEqual( Stem("nickname"), "nicknam" );
	deepEqual( Stem("nicolas"), "nicola" );
	deepEqual( Stem("nictitating"), "nictit" );
	deepEqual( Stem("nidification"), "nidif" );
	deepEqual( Stem("niebla"), "niebla" );
	deepEqual( Stem("niece"), "niec" );
	deepEqual( Stem("nieces"), "niec" );
	deepEqual( Stem("niente"), "nient" );
	deepEqual( Stem("niger"), "niger" );
	deepEqual( Stem("nigger"), "nigger" );
	deepEqual( Stem("niggering"), "nigger" );
	deepEqual( Stem("niggers"), "nigger" );
	deepEqual( Stem("nigh"), "nigh" );
	deepEqual( Stem("night"), "night" );
	deepEqual( Stem("nightcap"), "nightcap" );
	deepEqual( Stem("nightcaps"), "nightcap" );
	deepEqual( Stem("nightfall"), "nightfal" );
	deepEqual( Stem("nightingale"), "nightingal" );
	deepEqual( Stem("nightingales"), "nightingal" );
	deepEqual( Stem("nightly"), "night" );
	deepEqual( Stem("nightmare"), "nightmar" );
	deepEqual( Stem("nights"), "night" );
	deepEqual( Stem("nigra"), "nigra" );
	deepEqual( Stem("nigricans"), "nigrican" );
	deepEqual( Stem("nigricollis"), "nigricolli" );
	deepEqual( Stem("nihil"), "nihil" );
	deepEqual( Stem("nihilist"), "nihilist" );
	deepEqual( Stem("nihilists"), "nihilist" );
	deepEqual( Stem("nikiforovna"), "nikiforovna" );
	deepEqual( Stem("nikodim"), "nikodim" );
	deepEqual( Stem("nikolaevsky"), "nikolaevski" );
	deepEqual( Stem("nikolay"), "nikolay" );
	deepEqual( Stem("nil"), "nil" );
	deepEqual( Stem("nile"), "nile" );
	deepEqual( Stem("nillandoo"), "nillandoo" );
	deepEqual( Stem("nimble"), "nimbl" );
	deepEqual( Stem("nimbly"), "nimbl" );
	deepEqual( Stem("nimrod"), "nimrod" );
	deepEqual( Stem("nine"), "nine" );
	deepEqual( Stem("ninepence"), "ninep" );
	deepEqual( Stem("ninepin"), "ninepin" );
	deepEqual( Stem("nines"), "nine" );
	deepEqual( Stem("nineteen"), "nineteen" );
	deepEqual( Stem("nineteenth"), "nineteenth" );
	deepEqual( Stem("ninetta"), "ninetta" );
	deepEqual( Stem("ninety"), "nineti" );
	deepEqual( Stem("ninevite"), "ninevit" );
	deepEqual( Stem("ninnies"), "ninni" );
	deepEqual( Stem("ninth"), "ninth" );
	deepEqual( Stem("niobe"), "niob" );
	deepEqual( Stem("nipped"), "nip" );
	deepEqual( Stem("nipping"), "nip" );
	deepEqual( Stem("nips"), "nip" );
	deepEqual( Stem("nitrate"), "nitrat" );
	deepEqual( Stem("nitric"), "nitric" );
	deepEqual( Stem("nivalis"), "nivali" );
	deepEqual( Stem("nixon"), "nixon" );
	deepEqual( Stem("nixt"), "nixt" );
	deepEqual( Stem("no"), "no" );
	deepEqual( Stem("noa"), "noa" );
	deepEqual( Stem("noabody"), "noabodi" );
	deepEqual( Stem("noah"), "noah" );
	deepEqual( Stem("nobbiest"), "nobbiest" );
	deepEqual( Stem("nobility"), "nobil" );
	deepEqual( Stem("noble"), "nobl" );
	deepEqual( Stem("nobleman"), "nobleman" );
	deepEqual( Stem("noblemen"), "noblemen" );
	deepEqual( Stem("nobleness"), "nobl" );
	deepEqual( Stem("nobler"), "nobler" );
	deepEqual( Stem("noblesse"), "nobless" );
	deepEqual( Stem("noblest"), "noblest" );
	deepEqual( Stem("nobly"), "nobli" );
	deepEqual( Stem("nobodies"), "nobodi" );
	deepEqual( Stem("nobody"), "nobodi" );
	deepEqual( Stem("nobodys"), "nobodi" );
	deepEqual( Stem("nocturna"), "nocturna" );
	deepEqual( Stem("nocturnal"), "nocturn" );
	deepEqual( Stem("nod"), "nod" );
	deepEqual( Stem("nodded"), "nod" );
	deepEqual( Stem("noddies"), "noddi" );
	deepEqual( Stem("nodding"), "nod" );
	deepEqual( Stem("noddings"), "nod" );
	deepEqual( Stem("noddy"), "noddi" );
	deepEqual( Stem("nods"), "nod" );
	deepEqual( Stem("nodules"), "nodul" );
	deepEqual( Stem("noes"), "noe" );
	deepEqual( Stem("nogg"), "nogg" );
	deepEqual( Stem("noggs"), "nogg" );
	deepEqual( Stem("noice"), "noic" );
	deepEqual( Stem("noir"), "noir" );
	deepEqual( Stem("noire"), "noir" );
	deepEqual( Stem("noise"), "nois" );
	deepEqual( Stem("noised"), "nois" );
	deepEqual( Stem("noiseless"), "noiseless" );
	deepEqual( Stem("noiselessly"), "noiseless" );
	deepEqual( Stem("noises"), "nois" );
	deepEqual( Stem("noisier"), "noisier" );
	deepEqual( Stem("noisily"), "noisili" );
	deepEqual( Stem("noisome"), "noisom" );
	deepEqual( Stem("noisy"), "noisi" );
	deepEqual( Stem("nokolay"), "nokolay" );
	deepEqual( Stem("nolasko"), "nolasko" );
	deepEqual( Stem("nomadically"), "nomad" );
	deepEqual( Stem("nomads"), "nomad" );
	deepEqual( Stem("nomenclature"), "nomenclatur" );
	deepEqual( Stem("nominal"), "nomin" );
	deepEqual( Stem("nominally"), "nomin" );
	deepEqual( Stem("nominate"), "nomin" );
	deepEqual( Stem("nominated"), "nomin" );
	deepEqual( Stem("nomination"), "nomin" );
	deepEqual( Stem("nominative"), "nomin" );
	deepEqual( Stem("nominee"), "nomine" );
	deepEqual( Stem("non"), "non" );
	deepEqual( Stem("nonce"), "nonc" );
	deepEqual( Stem("nonchalance"), "nonchal" );
	deepEqual( Stem("nonchalant"), "nonchal" );
	deepEqual( Stem("none"), "none" );
	deepEqual( Stem("nonentity"), "nonent" );
	deepEqual( Stem("nonpareil"), "nonpareil" );
	deepEqual( Stem("nonsense"), "nonsens" );
	deepEqual( Stem("nonsensical"), "nonsens" );
	deepEqual( Stem("noo"), "noo" );
	deepEqual( Stem("noodle"), "noodl" );
	deepEqual( Stem("noodles"), "noodl" );
	deepEqual( Stem("nook"), "nook" );
	deepEqual( Stem("nooks"), "nook" );
	deepEqual( Stem("noon"), "noon" );
	deepEqual( Stem("noonday"), "noonday" );
	deepEqual( Stem("noose"), "noos" );
	deepEqual( Stem("nooses"), "noos" );
	deepEqual( Stem("nor"), "nor" );
	deepEqual( Stem("nore"), "nore" );
	deepEqual( Stem("normal"), "normal" );
	deepEqual( Stem("normally"), "normal" );
	deepEqual( Stem("norman"), "norman" );
	deepEqual( Stem("normously"), "normous" );
	deepEqual( Stem("noronha"), "noronha" );
	deepEqual( Stem("north"), "north" );
	deepEqual( Stem("northampton"), "northampton" );
	deepEqual( Stem("northerly"), "norther" );
	deepEqual( Stem("northern"), "northern" );
	deepEqual( Stem("northward"), "northward" );
	deepEqual( Stem("northwards"), "northward" );
	deepEqual( Stem("norval"), "norval" );
	deepEqual( Stem("norway"), "norway" );
	deepEqual( Stem("nose"), "nose" );
	deepEqual( Stem("nosed"), "nose" );
	deepEqual( Stem("nosegay"), "nosegay" );
	deepEqual( Stem("nosegays"), "nosegay" );
	deepEqual( Stem("noses"), "nose" );
	deepEqual( Stem("nostril"), "nostril" );
	deepEqual( Stem("nostrils"), "nostril" );
	deepEqual( Stem("not"), "not" );
	deepEqual( Stem("notable"), "notabl" );
	deepEqual( Stem("notably"), "notabl" );
	deepEqual( Stem("notaphus"), "notaphus" );
	deepEqual( Stem("notary"), "notari" );
	deepEqual( Stem("notched"), "notch" );
	deepEqual( Stem("notches"), "notch" );
	deepEqual( Stem("note"), "note" );
	deepEqual( Stem("notebook"), "notebook" );
	deepEqual( Stem("notebooks"), "notebook" );
	deepEqual( Stem("noted"), "note" );
	deepEqual( Stem("notes"), "note" );
	deepEqual( Stem("noteworthy"), "noteworthi" );
	deepEqual( Stem("nothin"), "nothin" );
	deepEqual( Stem("nothing"), "noth" );
	deepEqual( Stem("nothings"), "noth" );
	deepEqual( Stem("nothink"), "nothink" );
	deepEqual( Stem("nothura"), "nothura" );
	deepEqual( Stem("notic"), "notic" );
	deepEqual( Stem("notice"), "notic" );
	deepEqual( Stem("noticeable"), "notic" );
	deepEqual( Stem("noticeably"), "notic" );
	deepEqual( Stem("noticed"), "notic" );
	deepEqual( Stem("notices"), "notic" );
	deepEqual( Stem("noticing"), "notic" );
	deepEqual( Stem("notification"), "notif" );
	deepEqual( Stem("notified"), "notifi" );
	deepEqual( Stem("noting"), "note" );
	deepEqual( Stem("notion"), "notion" );
	deepEqual( Stem("notions"), "notion" );
	deepEqual( Stem("notopods"), "notopod" );
	deepEqual( Stem("notoriety"), "notorieti" );
	deepEqual( Stem("notorious"), "notori" );
	deepEqual( Stem("notoriously"), "notori" );
	deepEqual( Stem("notre"), "notr" );
	deepEqual( Stem("notwithstanding"), "notwithstand" );
	deepEqual( Stem("nou"), "nou" );
	deepEqual( Stem("nough"), "nough" );
	deepEqual( Stem("nought"), "nought" );
	deepEqual( Stem("noun"), "noun" );
	deepEqual( Stem("nourish"), "nourish" );
	deepEqual( Stem("nourished"), "nourish" );
	deepEqual( Stem("nourishment"), "nourish" );
	deepEqual( Stem("nous"), "nous" );
	deepEqual( Stem("nov"), "nov" );
	deepEqual( Stem("novae"), "nova" );
	deepEqual( Stem("novel"), "novel" );
	deepEqual( Stem("novelist"), "novelist" );
	deepEqual( Stem("novels"), "novel" );
	deepEqual( Stem("novelties"), "novelti" );
	deepEqual( Stem("novelty"), "novelti" );
	deepEqual( Stem("november"), "novemb" );
	deepEqual( Stem("novice"), "novic" );
	deepEqual( Stem("novices"), "novic" );
	deepEqual( Stem("novitiate"), "noviti" );
	deepEqual( Stem("novos"), "novo" );
	deepEqual( Stem("now"), "now" );
	deepEqual( Stem("nowadays"), "nowaday" );
	deepEqual( Stem("noways"), "noway" );
	deepEqual( Stem("nowhere"), "nowher" );
	deepEqual( Stem("nowheres"), "nowher" );
	deepEqual( Stem("nowise"), "nowis" );
	deepEqual( Stem("nowt"), "nowt" );
	deepEqual( Stem("noxious"), "noxious" );
	deepEqual( Stem("nozzle"), "nozzl" );
	deepEqual( Stem("nt"), "nt" );
	deepEqual( Stem("nucleus"), "nucleus" );
	deepEqual( Stem("nudge"), "nudg" );
	deepEqual( Stem("nudged"), "nudg" );
	deepEqual( Stem("nudges"), "nudg" );
	deepEqual( Stem("nudging"), "nudg" );
	deepEqual( Stem("nuisance"), "nuisanc" );
	deepEqual( Stem("nulla"), "nulla" );
	deepEqual( Stem("nulliporae"), "nullipora" );
	deepEqual( Stem("numb"), "numb" );
	deepEqual( Stem("numbed"), "numb" );
	deepEqual( Stem("number"), "number" );
	deepEqual( Stem("numbered"), "number" );
	deepEqual( Stem("numberless"), "numberless" );
	deepEqual( Stem("numbers"), "number" );
	deepEqual( Stem("numerical"), "numer" );
	deepEqual( Stem("numerous"), "numer" );
	deepEqual( Stem("nummularia"), "nummularia" );
	deepEqual( Stem("numskull"), "numskul" );
	deepEqual( Stem("nun"), "nun" );
	deepEqual( Stem("nunnery"), "nunneri" );
	deepEqual( Stem("nuptial"), "nuptial" );
	deepEqual( Stem("nuptials"), "nuptial" );
	deepEqual( Stem("nurse"), "nurs" );
	deepEqual( Stem("nursed"), "nurs" );
	deepEqual( Stem("nursemaid"), "nursemaid" );
	deepEqual( Stem("nursery"), "nurseri" );
	deepEqual( Stem("nurses"), "nurs" );
	deepEqual( Stem("nursing"), "nurs" );
	deepEqual( Stem("nurture"), "nurtur" );
	deepEqual( Stem("nurtured"), "nurtur" );
	deepEqual( Stem("nuss"), "nuss" );
	deepEqual( Stem("nut"), "nut" );
	deepEqual( Stem("nutcrackers"), "nutcrack" );
	deepEqual( Stem("nutmeg"), "nutmeg" );
	deepEqual( Stem("nutriment"), "nutriment" );
	deepEqual( Stem("nutritious"), "nutriti" );
	deepEqual( Stem("nuts"), "nut" );
	deepEqual( Stem("nutshell"), "nutshel" );
	deepEqual( Stem("nutshells"), "nutshel" );
	deepEqual( Stem("nymph"), "nymph" );
	deepEqual( Stem("nymphs"), "nymph" );
	deepEqual( Stem("o"), "o" );
	deepEqual( Stem("oaf"), "oaf" );
	deepEqual( Stem("oak"), "oak" );
	deepEqual( Stem("oaken"), "oaken" );
	deepEqual( Stem("oaks"), "oak" );
	deepEqual( Stem("oar"), "oar" );
	deepEqual( Stem("oars"), "oar" );
	deepEqual( Stem("oarsman"), "oarsman" );
	deepEqual( Stem("oasis"), "oasi" );
	deepEqual( Stem("oath"), "oath" );
	deepEqual( Stem("oaths"), "oath" );
	deepEqual( Stem("oats"), "oat" );
	deepEqual( Stem("oban"), "oban" );
	deepEqual( Stem("obduracy"), "obduraci" );
	deepEqual( Stem("obdurate"), "obdur" );
	deepEqual( Stem("obdurately"), "obdur" );
	deepEqual( Stem("obedience"), "obedi" );
	deepEqual( Stem("obedient"), "obedi" );
	deepEqual( Stem("obediently"), "obedi" );
	deepEqual( Stem("obedt"), "obedt" );
	deepEqual( Stem("obeisance"), "obeis" );
	deepEqual( Stem("obeisances"), "obeis" );
	deepEqual( Stem("obelisk"), "obelisk" );
	deepEqual( Stem("obelisks"), "obelisk" );
	deepEqual( Stem("obesity"), "obes" );
	deepEqual( Stem("obey"), "obey" );
	deepEqual( Stem("obeyed"), "obey" );
	deepEqual( Stem("obeyeth"), "obeyeth" );
	deepEqual( Stem("obeying"), "obey" );
	deepEqual( Stem("obeys"), "obey" );
	deepEqual( Stem("obispo"), "obispo" );
	deepEqual( Stem("obits"), "obit" );
	deepEqual( Stem("object"), "object" );
	deepEqual( Stem("objected"), "object" );
	deepEqual( Stem("objecting"), "object" );
	deepEqual( Stem("objection"), "object" );
	deepEqual( Stem("objectionable"), "objection" );
	deepEqual( Stem("objections"), "object" );
	deepEqual( Stem("objectless"), "objectless" );
	deepEqual( Stem("objects"), "object" );
	deepEqual( Stem("obleege"), "obleeg" );
	deepEqual( Stem("obleeging"), "obleeg" );
	deepEqual( Stem("obligation"), "oblig" );
	deepEqual( Stem("obligations"), "oblig" );
	deepEqual( Stem("oblige"), "oblig" );
	deepEqual( Stem("obliged"), "oblig" );
	deepEqual( Stem("obliges"), "oblig" );
	deepEqual( Stem("obliging"), "oblig" );
	deepEqual( Stem("obligingly"), "oblig" );
	deepEqual( Stem("obligingness"), "obliging" );
	deepEqual( Stem("oblique"), "obliqu" );
	deepEqual( Stem("obliterate"), "obliter" );
	deepEqual( Stem("obliterated"), "obliter" );
	deepEqual( Stem("obliterating"), "obliter" );
	deepEqual( Stem("obliteration"), "obliter" );
	deepEqual( Stem("oblivion"), "oblivion" );
	deepEqual( Stem("oblivious"), "oblivi" );
	deepEqual( Stem("oblong"), "oblong" );
	deepEqual( Stem("obscene"), "obscen" );
	deepEqual( Stem("obscenity"), "obscen" );
	deepEqual( Stem("obscure"), "obscur" );
	deepEqual( Stem("obscured"), "obscur" );
	deepEqual( Stem("obscurely"), "obscur" );
	deepEqual( Stem("obscures"), "obscur" );
	deepEqual( Stem("obscuring"), "obscur" );
	deepEqual( Stem("obscurity"), "obscur" );
	deepEqual( Stem("obsequious"), "obsequi" );
	deepEqual( Stem("obsequiousness"), "obsequi" );
	deepEqual( Stem("observa"), "observa" );
	deepEqual( Stem("observable"), "observ" );
	deepEqual( Stem("observaciones"), "observacion" );
	deepEqual( Stem("observance"), "observ" );
	deepEqual( Stem("observant"), "observ" );
	deepEqual( Stem("observation"), "observ" );
	deepEqual( Stem("observations"), "observ" );
	deepEqual( Stem("observe"), "observ" );
	deepEqual( Stem("observed"), "observ" );
	deepEqual( Stem("observer"), "observ" );
	deepEqual( Stem("observers"), "observ" );
	deepEqual( Stem("observes"), "observ" );
	deepEqual( Stem("observing"), "observ" );
	deepEqual( Stem("obsession"), "obsess" );
	deepEqual( Stem("obsolete"), "obsolet" );
	deepEqual( Stem("obstacle"), "obstacl" );
	deepEqual( Stem("obstacles"), "obstacl" );
	deepEqual( Stem("obstinacy"), "obstinaci" );
	deepEqual( Stem("obstinate"), "obstin" );
	deepEqual( Stem("obstinately"), "obstin" );
	deepEqual( Stem("obstructed"), "obstruct" );
	deepEqual( Stem("obstructing"), "obstruct" );
	deepEqual( Stem("obstruction"), "obstruct" );
	deepEqual( Stem("obtain"), "obtain" );
	deepEqual( Stem("obtainable"), "obtain" );
	deepEqual( Stem("obtained"), "obtain" );
	deepEqual( Stem("obtaining"), "obtain" );
	deepEqual( Stem("obtains"), "obtain" );
	deepEqual( Stem("obtruded"), "obtrud" );
	deepEqual( Stem("obtruding"), "obtrud" );
	deepEqual( Stem("obtrusive"), "obtrus" );
	deepEqual( Stem("obtrusively"), "obtrus" );
	deepEqual( Stem("obtuse"), "obtus" );
	deepEqual( Stem("obviating"), "obviat" );
	deepEqual( Stem("obvious"), "obvious" );
	deepEqual( Stem("obviously"), "obvious" );
	deepEqual( Stem("occasion"), "occas" );
	deepEqual( Stem("occasional"), "occasion" );
	deepEqual( Stem("occasionally"), "occasion" );
	deepEqual( Stem("occasioned"), "occas" );
	deepEqual( Stem("occasioning"), "occas" );
	deepEqual( Stem("occasions"), "occas" );
	deepEqual( Stem("occidentalis"), "occidentali" );
	deepEqual( Stem("occupancy"), "occup" );
	deepEqual( Stem("occupant"), "occup" );
	deepEqual( Stem("occupants"), "occup" );
	deepEqual( Stem("occupation"), "occup" );
	deepEqual( Stem("occupations"), "occup" );
	deepEqual( Stem("occupied"), "occupi" );
	deepEqual( Stem("occupier"), "occupi" );
	deepEqual( Stem("occupiers"), "occupi" );
	deepEqual( Stem("occupies"), "occupi" );
	deepEqual( Stem("occupy"), "occupi" );
	deepEqual( Stem("occupying"), "occupi" );
	deepEqual( Stem("occur"), "occur" );
	deepEqual( Stem("occurred"), "occur" );
	deepEqual( Stem("occurrence"), "occurr" );
	deepEqual( Stem("occurrences"), "occurr" );
	deepEqual( Stem("occurring"), "occur" );
	deepEqual( Stem("occurs"), "occur" );
	deepEqual( Stem("ocean"), "ocean" );
	deepEqual( Stem("oceanic"), "ocean" );
	deepEqual( Stem("oceans"), "ocean" );
	deepEqual( Stem("och"), "och" );
	deepEqual( Stem("octave"), "octav" );
	deepEqual( Stem("octavia"), "octavia" );
	deepEqual( Stem("octavo"), "octavo" );
	deepEqual( Stem("october"), "octob" );
	deepEqual( Stem("octopus"), "octopus" );
	deepEqual( Stem("ocular"), "ocular" );
	deepEqual( Stem("odd"), "odd" );
	deepEqual( Stem("odder"), "odder" );
	deepEqual( Stem("oddest"), "oddest" );
	deepEqual( Stem("oddities"), "odditi" );
	deepEqual( Stem("oddity"), "odditi" );
	deepEqual( Stem("oddly"), "odd" );
	deepEqual( Stem("oddness"), "odd" );
	deepEqual( Stem("odds"), "odd" );
	deepEqual( Stem("ode"), "ode" );
	deepEqual( Stem("odious"), "odious" );
	deepEqual( Stem("odiously"), "odious" );
	deepEqual( Stem("odium"), "odium" );
	deepEqual( Stem("odoriferous"), "odorifer" );
	deepEqual( Stem("odour"), "odour" );
	deepEqual( Stem("odours"), "odour" );
	deepEqual( Stem("ods"), "od" );
	deepEqual( Stem("oens"), "oen" );
	deepEqual( Stem("oesophagus"), "oesophagus" );
	deepEqual( Stem("oeuvre"), "oeuvr" );
	deepEqual( Stem("of"), "of" );
	deepEqual( Stem("off"), "off" );
	deepEqual( Stem("offal"), "offal" );
	deepEqual( Stem("offe"), "off" );
	deepEqual( Stem("offence"), "offenc" );
	deepEqual( Stem("offences"), "offenc" );
	deepEqual( Stem("offend"), "offend" );
	deepEqual( Stem("offended"), "offend" );
	deepEqual( Stem("offender"), "offend" );
	deepEqual( Stem("offending"), "offend" );
	deepEqual( Stem("offends"), "offend" );
	deepEqual( Stem("offense"), "offens" );
	deepEqual( Stem("offensive"), "offens" );
	deepEqual( Stem("offensively"), "offens" );
	deepEqual( Stem("offer"), "offer" );
	deepEqual( Stem("offered"), "offer" );
	deepEqual( Stem("offering"), "offer" );
	deepEqual( Stem("offerings"), "offer" );
	deepEqual( Stem("offers"), "offer" );
	deepEqual( Stem("office"), "offic" );
	deepEqual( Stem("officer"), "offic" );
	deepEqual( Stem("officered"), "offic" );
	deepEqual( Stem("officers"), "offic" );
	deepEqual( Stem("offices"), "offic" );
	deepEqual( Stem("official"), "offici" );
	deepEqual( Stem("officially"), "offici" );
	deepEqual( Stem("officials"), "offici" );
	deepEqual( Stem("officiates"), "offici" );
	deepEqual( Stem("officier"), "offici" );
	deepEqual( Stem("officious"), "offici" );
	deepEqual( Stem("officiously"), "offici" );
	deepEqual( Stem("offing"), "of" );
	deepEqual( Stem("offshoots"), "offshoot" );
	deepEqual( Stem("offspring"), "offspr" );
	deepEqual( Stem("oft"), "oft" );
	deepEqual( Stem("often"), "often" );
	deepEqual( Stem("oftener"), "often" );
	deepEqual( Stem("oftenest"), "oftenest" );
	deepEqual( Stem("oftentimes"), "oftentim" );
	deepEqual( Stem("ogles"), "ogl" );
	deepEqual( Stem("ogre"), "ogr" );
	deepEqual( Stem("ogreish"), "ogreish" );
	deepEqual( Stem("oh"), "oh" );
	deepEqual( Stem("ohnglaube"), "ohnglaub" );
	deepEqual( Stem("oho"), "oho" );
	deepEqual( Stem("oil"), "oil" );
	deepEqual( Stem("oiliness"), "oili" );
	deepEqual( Stem("oilskin"), "oilskin" );
	deepEqual( Stem("oily"), "oili" );
	deepEqual( Stem("ointment"), "ointment" );
	deepEqual( Stem("ojection"), "oject" );
	deepEqual( Stem("ojos"), "ojo" );
	deepEqual( Stem("old"), "old" );
	deepEqual( Stem("older"), "older" );
	deepEqual( Stem("oldest"), "oldest" );
	deepEqual( Stem("ole"), "ole" );
	deepEqual( Stem("olfactory"), "olfactori" );
	deepEqual( Stem("olfersia"), "olfersia" );
	deepEqual( Stem("olinda"), "olinda" );
	deepEqual( Stem("oliva"), "oliva" );
	deepEqual( Stem("olivasea"), "olivasea" );
	deepEqual( Stem("olive"), "oliv" );
	deepEqual( Stem("olives"), "oliv" );
	deepEqual( Stem("olivia"), "olivia" );
	deepEqual( Stem("ologies"), "olog" );
	deepEqual( Stem("olympus"), "olympus" );
	deepEqual( Stem("ombu"), "ombu" );
	deepEqual( Stem("omen"), "omen" );
	deepEqual( Stem("ominous"), "omin" );
	deepEqual( Stem("omission"), "omiss" );
	deepEqual( Stem("omissions"), "omiss" );
	deepEqual( Stem("omit"), "omit" );
	deepEqual( Stem("omitted"), "omit" );
	deepEqual( Stem("omitting"), "omit" );
	deepEqual( Stem("omnibus"), "omnibus" );
	deepEqual( Stem("omnibuses"), "omnibus" );
	deepEqual( Stem("omnipotence"), "omnipot" );
	deepEqual( Stem("omnipotent"), "omnipot" );
	deepEqual( Stem("omniscience"), "omnisci" );
	deepEqual( Stem("omniscient"), "omnisci" );
	deepEqual( Stem("omnium"), "omnium" );
	deepEqual( Stem("omnivorous"), "omnivor" );
	deepEqual( Stem("on"), "on" );
	deepEqual( Stem("once"), "onc" );
	deepEqual( Stem("one"), "one" );
	deepEqual( Stem("oneness"), "one" );
	deepEqual( Stem("onerous"), "oner" );
	deepEqual( Stem("ones"), "one" );
	deepEqual( Stem("oneself"), "oneself" );
	deepEqual( Stem("onion"), "onion" );
	deepEqual( Stem("onions"), "onion" );
	deepEqual( Stem("oniscia"), "oniscia" );
	deepEqual( Stem("only"), "onli" );
	deepEqual( Stem("ont"), "ont" );
	deepEqual( Stem("onthophagus"), "onthophagus" );
	deepEqual( Stem("onto"), "onto" );
	deepEqual( Stem("onus"), "onus" );
	deepEqual( Stem("onward"), "onward" );
	deepEqual( Stem("onwards"), "onward" );
	deepEqual( Stem("onwholesome"), "onwholesom" );
	deepEqual( Stem("ony"), "oni" );
	deepEqual( Stem("oo"), "oo" );
	deepEqual( Stem("ooman"), "ooman" );
	deepEqual( Stem("oop"), "oop" );
	deepEqual( Stem("oot"), "oot" );
	deepEqual( Stem("oother"), "oother" );
	deepEqual( Stem("ootside"), "ootsid" );
	deepEqual( Stem("ooze"), "ooz" );
	deepEqual( Stem("oozed"), "ooz" );
	deepEqual( Stem("oozes"), "ooz" );
	deepEqual( Stem("opaque"), "opaqu" );
	deepEqual( Stem("ope"), "ope" );
	deepEqual( Stem("open"), "open" );
	deepEqual( Stem("opened"), "open" );
	deepEqual( Stem("opener"), "open" );
	deepEqual( Stem("opening"), "open" );
	deepEqual( Stem("openings"), "open" );
	deepEqual( Stem("openly"), "open" );
	deepEqual( Stem("openness"), "open" );
	deepEqual( Stem("opens"), "open" );
	deepEqual( Stem("opera"), "opera" );
	deepEqual( Stem("operas"), "opera" );
	deepEqual( Stem("operate"), "oper" );
	deepEqual( Stem("operated"), "oper" );
	deepEqual( Stem("operating"), "oper" );
	deepEqual( Stem("operation"), "oper" );
	deepEqual( Stem("operations"), "oper" );
	deepEqual( Stem("operative"), "oper" );
	deepEqual( Stem("operator"), "oper" );
	deepEqual( Stem("operculum"), "operculum" );
	deepEqual( Stem("opetiorhynchi"), "opetiorhynchi" );
	deepEqual( Stem("opetiorhynchus"), "opetiorhynchus" );
	deepEqual( Stem("ophrys"), "ophri" );
	deepEqual( Stem("opiate"), "opiat" );
	deepEqual( Stem("opimon"), "opimon" );
	deepEqual( Stem("opined"), "opin" );
	deepEqual( Stem("opining"), "opin" );
	deepEqual( Stem("opinion"), "opinion" );
	deepEqual( Stem("opinionated"), "opinion" );
	deepEqual( Stem("opinionative"), "opinion" );
	deepEqual( Stem("opinions"), "opinion" );
	deepEqual( Stem("opinlon"), "opinlon" );
	deepEqual( Stem("opium"), "opium" );
	deepEqual( Stem("opossum"), "opossum" );
	deepEqual( Stem("opossums"), "opossum" );
	deepEqual( Stem("opp"), "opp" );
	deepEqual( Stem("opponent"), "oppon" );
	deepEqual( Stem("opponents"), "oppon" );
	deepEqual( Stem("opportune"), "opportun" );
	deepEqual( Stem("opportunely"), "opportun" );
	deepEqual( Stem("opportunities"), "opportun" );
	deepEqual( Stem("opportunity"), "opportun" );
	deepEqual( Stem("oppose"), "oppos" );
	deepEqual( Stem("opposed"), "oppos" );
	deepEqual( Stem("opposing"), "oppos" );
	deepEqual( Stem("opposite"), "opposit" );
	deepEqual( Stem("opposites"), "opposit" );
	deepEqual( Stem("opposition"), "opposit" );
	deepEqual( Stem("oppress"), "oppress" );
	deepEqual( Stem("oppressed"), "oppress" );
	deepEqual( Stem("oppression"), "oppress" );
	deepEqual( Stem("oppressive"), "oppress" );
	deepEqual( Stem("oppressor"), "oppressor" );
	deepEqual( Stem("opprobrious"), "opprobri" );
	deepEqual( Stem("optic"), "optic" );
	deepEqual( Stem("optical"), "optic" );
	deepEqual( Stem("opulence"), "opul" );
	deepEqual( Stem("opulent"), "opul" );
	deepEqual( Stem("opuntia"), "opuntia" );
	deepEqual( Stem("opuntias"), "opuntia" );
	deepEqual( Stem("or"), "or" );
	deepEqual( Stem("oracle"), "oracl" );
	deepEqual( Stem("oracularly"), "oracular" );
	deepEqual( Stem("oraison"), "oraison" );
	deepEqual( Stem("orange"), "orang" );
	deepEqual( Stem("orangeman"), "orangeman" );
	deepEqual( Stem("oranges"), "orang" );
	deepEqual( Stem("oration"), "orat" );
	deepEqual( Stem("orations"), "orat" );
	deepEqual( Stem("orator"), "orat" );
	deepEqual( Stem("orators"), "orat" );
	deepEqual( Stem("oratory"), "oratori" );
	deepEqual( Stem("orb"), "orb" );
	deepEqual( Stem("orbigny"), "orbigni" );
	deepEqual( Stem("orbignyi"), "orbignyi" );
	deepEqual( Stem("orbingy"), "orbingi" );
	deepEqual( Stem("orchard"), "orchard" );
	deepEqual( Stem("orchards"), "orchard" );
	deepEqual( Stem("orchestra"), "orchestra" );
	deepEqual( Stem("orchideae"), "orchidea" );
	deepEqual( Stem("orchideous"), "orchid" );
	deepEqual( Stem("orchids"), "orchid" );
	deepEqual( Stem("orchis"), "orchi" );
	deepEqual( Stem("ordained"), "ordain" );
	deepEqual( Stem("ordeal"), "ordeal" );
	deepEqual( Stem("order"), "order" );
	deepEqual( Stem("ordered"), "order" );
	deepEqual( Stem("ordering"), "order" );
	deepEqual( Stem("orderly"), "order" );
	deepEqual( Stem("orders"), "order" );
	deepEqual( Stem("ordinance"), "ordin" );
	deepEqual( Stem("ordinances"), "ordin" );
	deepEqual( Stem("ordinarily"), "ordinarili" );
	deepEqual( Stem("ordinary"), "ordinari" );
	deepEqual( Stem("ore"), "ore" );
	deepEqual( Stem("ores"), "ore" );
	deepEqual( Stem("organ"), "organ" );
	deepEqual( Stem("organic"), "organ" );
	deepEqual( Stem("organically"), "organ" );
	deepEqual( Stem("organisation"), "organis" );
	deepEqual( Stem("organise"), "organis" );
	deepEqual( Stem("organised"), "organis" );
	deepEqual( Stem("organism"), "organ" );
	deepEqual( Stem("organization"), "organ" );
	deepEqual( Stem("organizations"), "organ" );
	deepEqual( Stem("organized"), "organ" );
	deepEqual( Stem("organs"), "organ" );
	deepEqual( Stem("orgies"), "orgi" );
	deepEqual( Stem("oriels"), "oriel" );
	deepEqual( Stem("oriental"), "orient" );
	deepEqual( Stem("orifice"), "orific" );
	deepEqual( Stem("orifices"), "orific" );
	deepEqual( Stem("origin"), "origin" );
	deepEqual( Stem("original"), "origin" );
	deepEqual( Stem("originality"), "origin" );
	deepEqual( Stem("originally"), "origin" );
	deepEqual( Stem("originals"), "origin" );
	deepEqual( Stem("originate"), "origin" );
	deepEqual( Stem("originated"), "origin" );
	deepEqual( Stem("originates"), "origin" );
	deepEqual( Stem("originating"), "origin" );
	deepEqual( Stem("originatinin"), "originatinin" );
	deepEqual( Stem("orinoco"), "orinoco" );
	deepEqual( Stem("orlando"), "orlando" );
	deepEqual( Stem("orlandos"), "orlando" );
	deepEqual( Stem("ormolu"), "ormolu" );
	deepEqual( Stem("ornament"), "ornament" );
	deepEqual( Stem("ornamental"), "ornament" );
	deepEqual( Stem("ornamented"), "ornament" );
	deepEqual( Stem("ornamenting"), "ornament" );
	deepEqual( Stem("ornaments"), "ornament" );
	deepEqual( Stem("ornithologist"), "ornithologist" );
	deepEqual( Stem("ornithologists"), "ornithologist" );
	deepEqual( Stem("ornithology"), "ornitholog" );
	deepEqual( Stem("ornithorhynchus"), "ornithorhynchus" );
	deepEqual( Stem("orphan"), "orphan" );
	deepEqual( Stem("orphaned"), "orphan" );
	deepEqual( Stem("orphanhood"), "orphanhood" );
	deepEqual( Stem("orphans"), "orphan" );
	deepEqual( Stem("orpheus"), "orpheus" );
	deepEqual( Stem("orsono"), "orsono" );
	deepEqual( Stem("orth"), "orth" );
	deepEqual( Stem("orthodox"), "orthodox" );
	deepEqual( Stem("orthography"), "orthographi" );
	deepEqual( Stem("orthoptera"), "orthoptera" );
	deepEqual( Stem("oruro"), "oruro" );
	deepEqual( Stem("oryctes"), "oryct" );
	deepEqual( Stem("oryzivorus"), "oryzivorus" );
	deepEqual( Stem("oscillated"), "oscil" );
	deepEqual( Stem("oscillates"), "oscil" );
	deepEqual( Stem("oscillating"), "oscil" );
	deepEqual( Stem("oscillation"), "oscil" );
	deepEqual( Stem("oscillations"), "oscil" );
	deepEqual( Stem("osorno"), "osorno" );
	deepEqual( Stem("ossemens"), "ossemen" );
	deepEqual( Stem("osseous"), "osseous" );
	deepEqual( Stem("ostend"), "ostend" );
	deepEqual( Stem("ostensible"), "ostens" );
	deepEqual( Stem("ostensibly"), "ostens" );
	deepEqual( Stem("ostentation"), "ostent" );
	deepEqual( Stem("ostentatious"), "ostentati" );
	deepEqual( Stem("ostentatiously"), "ostentati" );
	deepEqual( Stem("ostler"), "ostler" );
	deepEqual( Stem("ostlers"), "ostler" );
	deepEqual( Stem("ostrich"), "ostrich" );
	deepEqual( Stem("ostriches"), "ostrich" );
	deepEqual( Stem("ostrov"), "ostrov" );
	deepEqual( Stem("oswald"), "oswald" );
	deepEqual( Stem("osyth"), "osyth" );
	deepEqual( Stem("otaheite"), "otaheit" );
	deepEqual( Stem("othe"), "oth" );
	deepEqual( Stem("othello"), "othello" );
	deepEqual( Stem("other"), "other" );
	deepEqual( Stem("othered"), "other" );
	deepEqual( Stem("others"), "other" );
	deepEqual( Stem("otherwise"), "otherwis" );
	deepEqual( Stem("otter"), "otter" );
	deepEqual( Stem("otters"), "otter" );
	deepEqual( Stem("otto"), "otto" );
	deepEqual( Stem("ottoman"), "ottoman" );
	deepEqual( Stem("ottomans"), "ottoman" );
	deepEqual( Stem("otus"), "otus" );
	deepEqual( Stem("ou"), "ou" );
	deepEqual( Stem("ought"), "ought" );
	deepEqual( Stem("oughtn"), "oughtn" );
	deepEqual( Stem("oughts"), "ought" );
	deepEqual( Stem("ouly"), "ouli" );
	deepEqual( Stem("oun"), "oun" );
	deepEqual( Stem("ounce"), "ounc" );
	deepEqual( Stem("ounces"), "ounc" );
	deepEqual( Stem("our"), "our" );
	deepEqual( Stem("ourangoutang"), "ourangoutang" );
	deepEqual( Stem("ours"), "our" );
	deepEqual( Stem("oursel"), "oursel" );
	deepEqual( Stem("ourselves"), "ourselv" );
	deepEqual( Stem("ouse"), "ous" );
	deepEqual( Stem("ousting"), "oust" );
	deepEqual( Stem("out"), "out" );
	deepEqual( Stem("outbidden"), "outbidden" );
	deepEqual( Stem("outbreak"), "outbreak" );
	deepEqual( Stem("outburst"), "outburst" );
	deepEqual( Stem("outcast"), "outcast" );
	deepEqual( Stem("outcasts"), "outcast" );
	deepEqual( Stem("outcries"), "outcri" );
	deepEqual( Stem("outcry"), "outcri" );
	deepEqual( Stem("outdie"), "outdi" );
	deepEqual( Stem("outdone"), "outdon" );
	deepEqual( Stem("outer"), "outer" );
	deepEqual( Stem("outerest"), "outerest" );
	deepEqual( Stem("outermost"), "outermost" );
	deepEqual( Stem("outerside"), "outersid" );
	deepEqual( Stem("outfit"), "outfit" );
	deepEqual( Stem("outgoing"), "outgo" );
	deepEqual( Stem("outgoings"), "outgo" );
	deepEqual( Stem("outgrown"), "outgrown" );
	deepEqual( Stem("outhouse"), "outhous" );
	deepEqual( Stem("outlandish"), "outlandish" );
	deepEqual( Stem("outlaw"), "outlaw" );
	deepEqual( Stem("outlaws"), "outlaw" );
	deepEqual( Stem("outlay"), "outlay" );
	deepEqual( Stem("outlet"), "outlet" );
	deepEqual( Stem("outlets"), "outlet" );
	deepEqual( Stem("outliers"), "outlier" );
	deepEqual( Stem("outline"), "outlin" );
	deepEqual( Stem("outlines"), "outlin" );
	deepEqual( Stem("outlive"), "outliv" );
	deepEqual( Stem("outlived"), "outliv" );
	deepEqual( Stem("outlook"), "outlook" );
	deepEqual( Stem("outlying"), "out" );
	deepEqual( Stem("outposts"), "outpost" );
	deepEqual( Stem("outpouring"), "outpour" );
	deepEqual( Stem("outpourings"), "outpour" );
	deepEqual( Stem("outr"), "outr" );
	deepEqual( Stem("outrage"), "outrag" );
	deepEqual( Stem("outraged"), "outrag" );
	deepEqual( Stem("outrageous"), "outrag" );
	deepEqual( Stem("outrageously"), "outrag" );
	deepEqual( Stem("outrages"), "outrag" );
	deepEqual( Stem("outraging"), "outrag" );
	deepEqual( Stem("outre"), "outr" );
	deepEqual( Stem("outrigeously"), "outrig" );
	deepEqual( Stem("outright"), "outright" );
	deepEqual( Stem("outrun"), "outrun" );
	deepEqual( Stem("outs"), "out" );
	deepEqual( Stem("outset"), "outset" );
	deepEqual( Stem("outshine"), "outshin" );
	deepEqual( Stem("outshone"), "outshon" );
	deepEqual( Stem("outside"), "outsid" );
	deepEqual( Stem("outsider"), "outsid" );
	deepEqual( Stem("outsiders"), "outsid" );
	deepEqual( Stem("outsides"), "outsid" );
	deepEqual( Stem("outskirting"), "outskirt" );
	deepEqual( Stem("outskirts"), "outskirt" );
	deepEqual( Stem("outspoken"), "outspoken" );
	deepEqual( Stem("outspread"), "outspread" );
	deepEqual( Stem("outstanding"), "outstand" );
	deepEqual( Stem("outstep"), "outstep" );
	deepEqual( Stem("outstretched"), "outstretch" );
	deepEqual( Stem("outstripping"), "outstrip" );
	deepEqual( Stem("outward"), "outward" );
	deepEqual( Stem("outwardly"), "outward" );
	deepEqual( Stem("outwards"), "outward" );
	deepEqual( Stem("outweigh"), "outweigh" );
	deepEqual( Stem("outweighed"), "outweigh" );
	deepEqual( Stem("outweighing"), "outweigh" );
	deepEqual( Stem("ova"), "ova" );
	deepEqual( Stem("oval"), "oval" );
	deepEqual( Stem("ovarium"), "ovarium" );
	deepEqual( Stem("ove"), "ove" );
	deepEqual( Stem("oven"), "oven" );
	deepEqual( Stem("ovens"), "oven" );
	deepEqual( Stem("over"), "over" );
	deepEqual( Stem("overawe"), "overaw" );
	deepEqual( Stem("overawed"), "overaw" );
	deepEqual( Stem("overbalancing"), "overbalanc" );
	deepEqual( Stem("overbearing"), "overbear" );
	deepEqual( Stem("overblown"), "overblown" );
	deepEqual( Stem("overboard"), "overboard" );
	deepEqual( Stem("overborne"), "overborn" );
	deepEqual( Stem("overburdened"), "overburden" );
	deepEqual( Stem("overcame"), "overcam" );
	deepEqual( Stem("overcast"), "overcast" );
	deepEqual( Stem("overcoat"), "overcoat" );
	deepEqual( Stem("overcome"), "overcom" );
	deepEqual( Stem("overcoming"), "overcom" );
	deepEqual( Stem("overcrowed"), "overcrow" );
	deepEqual( Stem("overdid"), "overdid" );
	deepEqual( Stem("overdo"), "overdo" );
	deepEqual( Stem("overdoes"), "overdo" );
	deepEqual( Stem("overdoing"), "overdo" );
	deepEqual( Stem("overdone"), "overdon" );
	deepEqual( Stem("overdriven"), "overdriven" );
	deepEqual( Stem("overdue"), "overdu" );
	deepEqual( Stem("overflow"), "overflow" );
	deepEqual( Stem("overflowed"), "overflow" );
	deepEqual( Stem("overflowing"), "overflow" );
	deepEqual( Stem("overflows"), "overflow" );
	deepEqual( Stem("overgrown"), "overgrown" );
	deepEqual( Stem("overhanging"), "overhang" );
	deepEqual( Stem("overhangs"), "overhang" );
	deepEqual( Stem("overhaul"), "overhaul" );
	deepEqual( Stem("overhead"), "overhead" );
	deepEqual( Stem("overhear"), "overhear" );
	deepEqual( Stem("overheard"), "overheard" );
	deepEqual( Stem("overhearing"), "overhear" );
	deepEqual( Stem("overhung"), "overhung" );
	deepEqual( Stem("overjoyed"), "overjoy" );
	deepEqual( Stem("overlaid"), "overlaid" );
	deepEqual( Stem("overleap"), "overleap" );
	deepEqual( Stem("overleaping"), "overleap" );
	deepEqual( Stem("overloaded"), "overload" );
	deepEqual( Stem("overlook"), "overlook" );
	deepEqual( Stem("overlooked"), "overlook" );
	deepEqual( Stem("overlookers"), "overlook" );
	deepEqual( Stem("overlooking"), "overlook" );
	deepEqual( Stem("overlying"), "over" );
	deepEqual( Stem("overmuch"), "overmuch" );
	deepEqual( Stem("overnight"), "overnight" );
	deepEqual( Stem("overpowered"), "overpow" );
	deepEqual( Stem("overpowering"), "overpow" );
	deepEqual( Stem("overpoweringly"), "overpow" );
	deepEqual( Stem("overpowers"), "overpow" );
	deepEqual( Stem("overrated"), "overr" );
	deepEqual( Stem("overreached"), "overreach" );
	deepEqual( Stem("overreaching"), "overreach" );
	deepEqual( Stem("overruled"), "overrul" );
	deepEqual( Stem("overrun"), "overrun" );
	deepEqual( Stem("overset"), "overset" );
	deepEqual( Stem("overshadowed"), "overshadow" );
	deepEqual( Stem("overshadowing"), "overshadow" );
	deepEqual( Stem("overshadows"), "overshadow" );
	deepEqual( Stem("oversleep"), "oversleep" );
	deepEqual( Stem("oversleeping"), "oversleep" );
	deepEqual( Stem("overslept"), "overslept" );
	deepEqual( Stem("overspreading"), "overspread" );
	deepEqual( Stem("overspreads"), "overspread" );
	deepEqual( Stem("overstated"), "overst" );
	deepEqual( Stem("overstating"), "overst" );
	deepEqual( Stem("overstep"), "overstep" );
	deepEqual( Stem("overstepped"), "overstep" );
	deepEqual( Stem("overstepping"), "overstep" );
	deepEqual( Stem("overstrained"), "overstrain" );
	deepEqual( Stem("overtake"), "overtak" );
	deepEqual( Stem("overtaken"), "overtaken" );
	deepEqual( Stem("overtakes"), "overtak" );
	deepEqual( Stem("overtaking"), "overtak" );
	deepEqual( Stem("overtask"), "overtask" );
	deepEqual( Stem("overtasked"), "overtask" );
	deepEqual( Stem("overthrew"), "overthrew" );
	deepEqual( Stem("overthrow"), "overthrow" );
	deepEqual( Stem("overthrown"), "overthrown" );
	deepEqual( Stem("overthrows"), "overthrow" );
	deepEqual( Stem("overtime"), "overtim" );
	deepEqual( Stem("overtook"), "overtook" );
	deepEqual( Stem("overtures"), "overtur" );
	deepEqual( Stem("overturn"), "overturn" );
	deepEqual( Stem("overturned"), "overturn" );
	deepEqual( Stem("overturning"), "overturn" );
	deepEqual( Stem("overturns"), "overturn" );
	deepEqual( Stem("overweening"), "overween" );
	deepEqual( Stem("overwhelm"), "overwhelm" );
	deepEqual( Stem("overwhelmed"), "overwhelm" );
	deepEqual( Stem("overwhelming"), "overwhelm" );
	deepEqual( Stem("overwhelmingly"), "overwhelm" );
	deepEqual( Stem("overwhelms"), "overwhelm" );
	deepEqual( Stem("overworked"), "overwork" );
	deepEqual( Stem("overwrought"), "overwrought" );
	deepEqual( Stem("ovules"), "ovul" );
	deepEqual( Stem("ow"), "ow" );
	deepEqual( Stem("owdacious"), "owdaci" );
	deepEqual( Stem("owe"), "owe" );
	deepEqual( Stem("owed"), "owe" );
	deepEqual( Stem("owen"), "owen" );
	deepEqual( Stem("ower"), "ower" );
	deepEqual( Stem("owes"), "owe" );
	deepEqual( Stem("owing"), "owe" );
	deepEqual( Stem("owl"), "owl" );
	deepEqual( Stem("owlish"), "owlish" );
	deepEqual( Stem("owls"), "owl" );
	deepEqual( Stem("own"), "own" );
	deepEqual( Stem("owned"), "own" );
	deepEqual( Stem("owner"), "owner" );
	deepEqual( Stem("owners"), "owner" );
	deepEqual( Stem("ownership"), "ownership" );
	deepEqual( Stem("owning"), "own" );
	deepEqual( Stem("owns"), "own" );
	deepEqual( Stem("owor"), "owor" );
	deepEqual( Stem("ox"), "ox" );
	deepEqual( Stem("oxen"), "oxen" );
	deepEqual( Stem("oxford"), "oxford" );
	deepEqual( Stem("oxidate"), "oxid" );
	deepEqual( Stem("oxides"), "oxid" );
	deepEqual( Stem("oxyurus"), "oxyurus" );
	deepEqual( Stem("oyster"), "oyster" );
	deepEqual( Stem("oysters"), "oyster" );
	deepEqual( Stem("p"), "p" );
	deepEqual( Stem("pa"), "pa" );
	deepEqual( Stem("pace"), "pace" );
	deepEqual( Stem("paced"), "pace" );
	deepEqual( Stem("paces"), "pace" );
	deepEqual( Stem("pachydermata"), "pachydermata" );
	deepEqual( Stem("pachydermatous"), "pachydermat" );
	deepEqual( Stem("pachydermous"), "pachyderm" );
	deepEqual( Stem("pacific"), "pacif" );
	deepEqual( Stem("pacified"), "pacifi" );
	deepEqual( Stem("pacify"), "pacifi" );
	deepEqual( Stem("pacifying"), "pacifi" );
	deepEqual( Stem("pacing"), "pace" );
	deepEqual( Stem("pack"), "pack" );
	deepEqual( Stem("package"), "packag" );
	deepEqual( Stem("packages"), "packag" );
	deepEqual( Stem("packed"), "pack" );
	deepEqual( Stem("packer"), "packer" );
	deepEqual( Stem("packet"), "packet" );
	deepEqual( Stem("packets"), "packet" );
	deepEqual( Stem("packhorse"), "packhors" );
	deepEqual( Stem("packing"), "pack" );
	deepEqual( Stem("packs"), "pack" );
	deepEqual( Stem("pad"), "pad" );
	deepEqual( Stem("padded"), "pad" );
	deepEqual( Stem("paddled"), "paddl" );
	deepEqual( Stem("paddles"), "paddl" );
	deepEqual( Stem("paddling"), "paddl" );
	deepEqual( Stem("paddock"), "paddock" );
	deepEqual( Stem("padlock"), "padlock" );
	deepEqual( Stem("padlocked"), "padlock" );
	deepEqual( Stem("padlocking"), "padlock" );
	deepEqual( Stem("padre"), "padr" );
	deepEqual( Stem("padres"), "padr" );
	deepEqual( Stem("pagan"), "pagan" );
	deepEqual( Stem("page"), "page" );
	deepEqual( Stem("pageant"), "pageant" );
	deepEqual( Stem("pageants"), "pageant" );
	deepEqual( Stem("pages"), "page" );
	deepEqual( Stem("pah"), "pah" );
	deepEqual( Stem("pahia"), "pahia" );
	deepEqual( Stem("paid"), "paid" );
	deepEqual( Stem("pail"), "pail" );
	deepEqual( Stem("pailfuls"), "pail" );
	deepEqual( Stem("pain"), "pain" );
	deepEqual( Stem("pained"), "pain" );
	deepEqual( Stem("painful"), "pain" );
	deepEqual( Stem("painfullest"), "painfullest" );
	deepEqual( Stem("painfully"), "pain" );
	deepEqual( Stem("pains"), "pain" );
	deepEqual( Stem("painstaking"), "painstak" );
	deepEqual( Stem("paint"), "paint" );
	deepEqual( Stem("painted"), "paint" );
	deepEqual( Stem("painter"), "painter" );
	deepEqual( Stem("painters"), "painter" );
	deepEqual( Stem("painting"), "paint" );
	deepEqual( Stem("paintings"), "paint" );
	deepEqual( Stem("paints"), "paint" );
	deepEqual( Stem("pair"), "pair" );
	deepEqual( Stem("paired"), "pair" );
	deepEqual( Stem("pairing"), "pair" );
	deepEqual( Stem("pairs"), "pair" );
	deepEqual( Stem("palace"), "palac" );
	deepEqual( Stem("palaces"), "palac" );
	deepEqual( Stem("paladin"), "paladin" );
	deepEqual( Stem("palaeologos"), "palaeologo" );
	deepEqual( Stem("palaeotherium"), "palaeotherium" );
	deepEqual( Stem("palais"), "palai" );
	deepEqual( Stem("palanquin"), "palanquin" );
	deepEqual( Stem("palatable"), "palat" );
	deepEqual( Stem("palate"), "palat" );
	deepEqual( Stem("palates"), "palat" );
	deepEqual( Stem("pale"), "pale" );
	deepEqual( Stem("paled"), "pale" );
	deepEqual( Stem("palely"), "pale" );
	deepEqual( Stem("paleness"), "pale" );
	deepEqual( Stem("paler"), "paler" );
	deepEqual( Stem("palings"), "pale" );
	deepEqual( Stem("pall"), "pall" );
	deepEqual( Stem("palladium"), "palladium" );
	deepEqual( Stem("pallas"), "palla" );
	deepEqual( Stem("palliate"), "palliat" );
	deepEqual( Stem("palliated"), "palliat" );
	deepEqual( Stem("palliation"), "palliat" );
	deepEqual( Stem("pallid"), "pallid" );
	deepEqual( Stem("palliser"), "pallis" );
	deepEqual( Stem("pallisers"), "pallis" );
	deepEqual( Stem("pallor"), "pallor" );
	deepEqual( Stem("palm"), "palm" );
	deepEqual( Stem("palmer"), "palmer" );
	deepEqual( Stem("palmerston"), "palmerston" );
	deepEqual( Stem("palmes"), "palm" );
	deepEqual( Stem("palms"), "palm" );
	deepEqual( Stem("palmy"), "palmi" );
	deepEqual( Stem("palpable"), "palpabl" );
	deepEqual( Stem("palpably"), "palpabl" );
	deepEqual( Stem("palpitate"), "palpit" );
	deepEqual( Stem("palpitated"), "palpit" );
	deepEqual( Stem("palpitating"), "palpit" );
	deepEqual( Stem("palpitation"), "palpit" );
	deepEqual( Stem("palpitations"), "palpit" );
	deepEqual( Stem("pals"), "pal" );
	deepEqual( Stem("palsy"), "palsi" );
	deepEqual( Stem("paltry"), "paltri" );
	deepEqual( Stem("paludina"), "paludina" );
	deepEqual( Stem("pampaean"), "pampaean" );
	deepEqual( Stem("pampas"), "pampa" );
	deepEqual( Stem("pampean"), "pampean" );
	deepEqual( Stem("pamper"), "pamper" );
	deepEqual( Stem("pampered"), "pamper" );
	deepEqual( Stem("pamphlet"), "pamphlet" );
	deepEqual( Stem("pamphlets"), "pamphlet" );
	deepEqual( Stem("pamplemousses"), "pamplemouss" );
	deepEqual( Stem("pan"), "pan" );
	deepEqual( Stem("panacea"), "panacea" );
	deepEqual( Stem("panama"), "panama" );
	deepEqual( Stem("pancake"), "pancak" );
	deepEqual( Stem("pancakes"), "pancak" );
	deepEqual( Stem("pandanus"), "pandanus" );
	deepEqual( Stem("pandemoniac"), "pandemoniac" );
	deepEqual( Stem("pandemonium"), "pandemonium" );
	deepEqual( Stem("pane"), "pane" );
	deepEqual( Stem("panel"), "panel" );
	deepEqual( Stem("panelled"), "panel" );
	deepEqual( Stem("panelling"), "panel" );
	deepEqual( Stem("panels"), "panel" );
	deepEqual( Stem("panes"), "pane" );
	deepEqual( Stem("pang"), "pang" );
	deepEqual( Stem("pangs"), "pang" );
	deepEqual( Stem("pani"), "pani" );
	deepEqual( Stem("panic"), "panic" );
	deepEqual( Stem("panics"), "panic" );
	deepEqual( Stem("panke"), "pank" );
	deepEqual( Stem("pannikins"), "pannikin" );
	deepEqual( Stem("panoply"), "panopli" );
	deepEqual( Stem("panorama"), "panorama" );
	deepEqual( Stem("pans"), "pan" );
	deepEqual( Stem("pansies"), "pansi" );
	deepEqual( Stem("pant"), "pant" );
	deepEqual( Stem("pantaloons"), "pantaloon" );
	deepEqual( Stem("panted"), "pant" );
	deepEqual( Stem("panther"), "panther" );
	deepEqual( Stem("panting"), "pant" );
	deepEqual( Stem("pantomime"), "pantomim" );
	deepEqual( Stem("pantomimes"), "pantomim" );
	deepEqual( Stem("pantomimist"), "pantomimist" );
	deepEqual( Stem("pantry"), "pantri" );
	deepEqual( Stem("pants"), "pant" );
	deepEqual( Stem("panza"), "panza" );
	deepEqual( Stem("papa"), "papa" );
	deepEqual( Stem("papal"), "papal" );
	deepEqual( Stem("papawa"), "papawa" );
	deepEqual( Stem("paper"), "paper" );
	deepEqual( Stem("papered"), "paper" );
	deepEqual( Stem("papering"), "paper" );
	deepEqual( Stem("papers"), "paper" );
	deepEqual( Stem("papiete"), "papiet" );
	deepEqual( Stem("papilio"), "papilio" );
	deepEqual( Stem("papillae"), "papilla" );
	deepEqual( Stem("papin"), "papin" );
	deepEqual( Stem("papist"), "papist" );
	deepEqual( Stem("paposo"), "paposo" );
	deepEqual( Stem("par"), "par" );
	deepEqual( Stem("parable"), "parabl" );
	deepEqual( Stem("parabola"), "parabola" );
	deepEqual( Stem("parade"), "parad" );
	deepEqual( Stem("paraded"), "parad" );
	deepEqual( Stem("parades"), "parad" );
	deepEqual( Stem("paradise"), "paradis" );
	deepEqual( Stem("paradox"), "paradox" );
	deepEqual( Stem("paradoxical"), "paradox" );
	deepEqual( Stem("paradoxus"), "paradoxus" );
	deepEqual( Stem("paragon"), "paragon" );
	deepEqual( Stem("paragraph"), "paragraph" );
	deepEqual( Stem("paragraphs"), "paragraph" );
	deepEqual( Stem("paraguay"), "paraguay" );
	deepEqual( Stem("parallel"), "parallel" );
	deepEqual( Stem("parallelism"), "parallel" );
	deepEqual( Stem("paralyse"), "paralys" );
	deepEqual( Stem("paralysed"), "paralys" );
	deepEqual( Stem("paralysis"), "paralysi" );
	deepEqual( Stem("paralytic"), "paralyt" );
	deepEqual( Stem("paramatta"), "paramatta" );
	deepEqual( Stem("paramount"), "paramount" );
	deepEqual( Stem("parana"), "parana" );
	deepEqual( Stem("parapet"), "parapet" );
	deepEqual( Stem("parapets"), "parapet" );
	deepEqual( Stem("parasha"), "parasha" );
	deepEqual( Stem("parasite"), "parasit" );
	deepEqual( Stem("parasites"), "parasit" );
	deepEqual( Stem("parasitic"), "parasit" );
	deepEqual( Stem("parasitical"), "parasit" );
	deepEqual( Stem("parasol"), "parasol" );
	deepEqual( Stem("parasols"), "parasol" );
	deepEqual( Stem("parcel"), "parcel" );
	deepEqual( Stem("parcels"), "parcel" );
	deepEqual( Stem("parchappe"), "parchapp" );
	deepEqual( Stem("parched"), "parch" );
	deepEqual( Stem("parchment"), "parchment" );
	deepEqual( Stem("parchments"), "parchment" );
	deepEqual( Stem("parchmentses"), "parchments" );
	deepEqual( Stem("pardiggle"), "pardiggl" );
	deepEqual( Stem("pardiggles"), "pardiggl" );
	deepEqual( Stem("pardon"), "pardon" );
	deepEqual( Stem("pardonable"), "pardon" );
	deepEqual( Stem("pardoned"), "pardon" );
	deepEqual( Stem("pardoning"), "pardon" );
	deepEqual( Stem("pardons"), "pardon" );
	deepEqual( Stem("pared"), "pare" );
	deepEqual( Stem("parenchymatous"), "parenchymat" );
	deepEqual( Stem("parent"), "parent" );
	deepEqual( Stem("parentage"), "parentag" );
	deepEqual( Stem("parental"), "parent" );
	deepEqual( Stem("parentheses"), "parenthes" );
	deepEqual( Stem("parenthesis"), "parenthesi" );
	deepEqual( Stem("parenthetically"), "parenthet" );
	deepEqual( Stem("parents"), "parent" );
	deepEqual( Stem("pariah"), "pariah" );
	deepEqual( Stem("paris"), "pari" );
	deepEqual( Stem("parish"), "parish" );
	deepEqual( Stem("parishes"), "parish" );
	deepEqual( Stem("parishioner"), "parishion" );
	deepEqual( Stem("parisian"), "parisian" );
	deepEqual( Stem("parisians"), "parisian" );
	deepEqual( Stem("park"), "park" );
	deepEqual( Stem("parker"), "parker" );
	deepEqual( Stem("parkers"), "parker" );
	deepEqual( Stem("parks"), "park" );
	deepEqual( Stem("parlance"), "parlanc" );
	deepEqual( Stem("parlay"), "parlay" );
	deepEqual( Stem("parlaying"), "parlay" );
	deepEqual( Stem("parley"), "parley" );
	deepEqual( Stem("parlez"), "parlez" );
	deepEqual( Stem("parliament"), "parliament" );
	deepEqual( Stem("parliamentary"), "parliamentari" );
	deepEqual( Stem("parliaments"), "parliament" );
	deepEqual( Stem("parlour"), "parlour" );
	deepEqual( Stem("parlours"), "parlour" );
	deepEqual( Stem("parochial"), "parochi" );
	deepEqual( Stem("parole"), "parol" );
	deepEqual( Stem("paroxysm"), "paroxysm" );
	deepEqual( Stem("paroxysms"), "paroxysm" );
	deepEqual( Stem("parried"), "parri" );
	deepEqual( Stem("parrot"), "parrot" );
	deepEqual( Stem("parrots"), "parrot" );
	deepEqual( Stem("parry"), "parri" );
	deepEqual( Stem("parsimonious"), "parsimoni" );
	deepEqual( Stem("parsimony"), "parsimoni" );
	deepEqual( Stem("parsley"), "parsley" );
	deepEqual( Stem("parson"), "parson" );
	deepEqual( Stem("parsonage"), "parsonag" );
	deepEqual( Stem("part"), "part" );
	deepEqual( Stem("partake"), "partak" );
	deepEqual( Stem("partaken"), "partaken" );
	deepEqual( Stem("partaker"), "partak" );
	deepEqual( Stem("partakes"), "partak" );
	deepEqual( Stem("partaking"), "partak" );
	deepEqual( Stem("parted"), "part" );
	deepEqual( Stem("parterre"), "parterr" );
	deepEqual( Stem("parthenon"), "parthenon" );
	deepEqual( Stem("parti"), "parti" );
	deepEqual( Stem("partial"), "partial" );
	deepEqual( Stem("partiality"), "partial" );
	deepEqual( Stem("partially"), "partial" );
	deepEqual( Stem("participate"), "particip" );
	deepEqual( Stem("participated"), "particip" );
	deepEqual( Stem("participation"), "particip" );
	deepEqual( Stem("particle"), "particl" );
	deepEqual( Stem("particles"), "particl" );
	deepEqual( Stem("particular"), "particular" );
	deepEqual( Stem("particularised"), "particularis" );
	deepEqual( Stem("particularity"), "particular" );
	deepEqual( Stem("particularly"), "particular" );
	deepEqual( Stem("particulars"), "particular" );
	deepEqual( Stem("parties"), "parti" );
	deepEqual( Stem("parting"), "part" );
	deepEqual( Stem("partings"), "part" );
	deepEqual( Stem("partisans"), "partisan" );
	deepEqual( Stem("partisanship"), "partisanship" );
	deepEqual( Stem("partition"), "partit" );
	deepEqual( Stem("partitioned"), "partit" );
	deepEqual( Stem("partitions"), "partit" );
	deepEqual( Stem("partly"), "part" );
	deepEqual( Stem("partner"), "partner" );
	deepEqual( Stem("partners"), "partner" );
	deepEqual( Stem("partnership"), "partnership" );
	deepEqual( Stem("partnerships"), "partnership" );
	deepEqual( Stem("partook"), "partook" );
	deepEqual( Stem("partridge"), "partridg" );
	deepEqual( Stem("partridges"), "partridg" );
	deepEqual( Stem("parts"), "part" );
	deepEqual( Stem("party"), "parti" );
	deepEqual( Stem("parvula"), "parvula" );
	deepEqual( Stem("parvulus"), "parvulus" );
	deepEqual( Stem("pas"), "pas" );
	deepEqual( Stem("pashenka"), "pashenka" );
	deepEqual( Stem("pass"), "pass" );
	deepEqual( Stem("passable"), "passabl" );
	deepEqual( Stem("passage"), "passag" );
	deepEqual( Stem("passages"), "passag" );
	deepEqual( Stem("passed"), "pass" );
	deepEqual( Stem("passee"), "passe" );
	deepEqual( Stem("passees"), "passe" );
	deepEqual( Stem("passenger"), "passeng" );
	deepEqual( Stem("passengers"), "passeng" );
	deepEqual( Stem("passer"), "passer" );
	deepEqual( Stem("passerby"), "passerbi" );
	deepEqual( Stem("passers"), "passer" );
	deepEqual( Stem("passes"), "pass" );
	deepEqual( Stem("passin"), "passin" );
	deepEqual( Stem("passing"), "pass" );
	deepEqual( Stem("passion"), "passion" );
	deepEqual( Stem("passionate"), "passion" );
	deepEqual( Stem("passionately"), "passion" );
	deepEqual( Stem("passionless"), "passionless" );
	deepEqual( Stem("passions"), "passion" );
	deepEqual( Stem("passive"), "passiv" );
	deepEqual( Stem("passively"), "passiv" );
	deepEqual( Stem("passport"), "passport" );
	deepEqual( Stem("passports"), "passport" );
	deepEqual( Stem("passwords"), "password" );
	deepEqual( Stem("past"), "past" );
	deepEqual( Stem("pasteboard"), "pasteboard" );
	deepEqual( Stem("pasted"), "past" );
	deepEqual( Stem("pasthry"), "pasthri" );
	deepEqual( Stem("pastime"), "pastim" );
	deepEqual( Stem("pastoral"), "pastor" );
	deepEqual( Stem("pastors"), "pastor" );
	deepEqual( Stem("pastry"), "pastri" );
	deepEqual( Stem("pastrycook"), "pastrycook" );
	deepEqual( Stem("pasturage"), "pasturag" );
	deepEqual( Stem("pasture"), "pastur" );
	deepEqual( Stem("pastures"), "pastur" );
	deepEqual( Stem("pasty"), "pasti" );
	deepEqual( Stem("pat"), "pat" );
	deepEqual( Stem("patachonica"), "patachonica" );
	deepEqual( Stem("patagones"), "patagon" );
	deepEqual( Stem("patagonia"), "patagonia" );
	deepEqual( Stem("patagonian"), "patagonian" );
	deepEqual( Stem("patagonians"), "patagonian" );
	deepEqual( Stem("patagonica"), "patagonica" );
	deepEqual( Stem("patagonicus"), "patagonicus" );
	deepEqual( Stem("patch"), "patch" );
	deepEqual( Stem("patched"), "patch" );
	deepEqual( Stem("patches"), "patch" );
	deepEqual( Stem("patchwork"), "patchwork" );
	deepEqual( Stem("patellae"), "patella" );
	deepEqual( Stem("patelliform"), "patelliform" );
	deepEqual( Stem("patent"), "patent" );
	deepEqual( Stem("paternal"), "patern" );
	deepEqual( Stem("paternally"), "patern" );
	deepEqual( Stem("path"), "path" );
	deepEqual( Stem("pathetic"), "pathet" );
	deepEqual( Stem("pathetically"), "pathet" );
	deepEqual( Stem("pathetics"), "pathet" );
	deepEqual( Stem("pathos"), "patho" );
	deepEqual( Stem("paths"), "path" );
	deepEqual( Stem("pathway"), "pathway" );
	deepEqual( Stem("pathways"), "pathway" );
	deepEqual( Stem("patience"), "patienc" );
	deepEqual( Stem("patient"), "patient" );
	deepEqual( Stem("patienter"), "patient" );
	deepEqual( Stem("patiently"), "patient" );
	deepEqual( Stem("patients"), "patient" );
	deepEqual( Stem("patriarch"), "patriarch" );
	deepEqual( Stem("patriarchal"), "patriarch" );
	deepEqual( Stem("patriarchs"), "patriarch" );
	deepEqual( Stem("patrician"), "patrician" );
	deepEqual( Stem("patrick"), "patrick" );
	deepEqual( Stem("patrimonial"), "patrimoni" );
	deepEqual( Stem("patrimony"), "patrimoni" );
	deepEqual( Stem("patriot"), "patriot" );
	deepEqual( Stem("patriotic"), "patriot" );
	deepEqual( Stem("patriotism"), "patriot" );
	deepEqual( Stem("patrolling"), "patrol" );
	deepEqual( Stem("patron"), "patron" );
	deepEqual( Stem("patronage"), "patronag" );
	deepEqual( Stem("patroness"), "patro" );
	deepEqual( Stem("patronesses"), "patro" );
	deepEqual( Stem("patronise"), "patronis" );
	deepEqual( Stem("patronised"), "patronis" );
	deepEqual( Stem("patronising"), "patronis" );
	deepEqual( Stem("patronize"), "patron" );
	deepEqual( Stem("patronized"), "patron" );
	deepEqual( Stem("patronizing"), "patron" );
	deepEqual( Stem("patronizingly"), "patron" );
	deepEqual( Stem("patrons"), "patron" );
	deepEqual( Stem("pats"), "pat" );
	deepEqual( Stem("patted"), "pat" );
	deepEqual( Stem("pattening"), "patten" );
	deepEqual( Stem("pattens"), "patten" );
	deepEqual( Stem("patter"), "patter" );
	deepEqual( Stem("pattered"), "patter" );
	deepEqual( Stem("pattering"), "patter" );
	deepEqual( Stem("pattern"), "pattern" );
	deepEqual( Stem("patternless"), "patternless" );
	deepEqual( Stem("patterns"), "pattern" );
	deepEqual( Stem("patting"), "pat" );
	deepEqual( Stem("patula"), "patula" );
	deepEqual( Stem("paucity"), "pauciti" );
	deepEqual( Stem("paul"), "paul" );
	deepEqual( Stem("pauline"), "paulin" );
	deepEqual( Stem("paunch"), "paunch" );
	deepEqual( Stem("paunchy"), "paunchi" );
	deepEqual( Stem("pauper"), "pauper" );
	deepEqual( Stem("paupers"), "pauper" );
	deepEqual( Stem("pause"), "paus" );
	deepEqual( Stem("paused"), "paus" );
	deepEqual( Stem("pauses"), "paus" );
	deepEqual( Stem("pausilippo"), "pausilippo" );
	deepEqual( Stem("pausing"), "paus" );
	deepEqual( Stem("pave"), "pave" );
	deepEqual( Stem("paved"), "pave" );
	deepEqual( Stem("pavement"), "pavement" );
	deepEqual( Stem("pavements"), "pavement" );
	deepEqual( Stem("pavilion"), "pavilion" );
	deepEqual( Stem("paving"), "pave" );
	deepEqual( Stem("paviour"), "paviour" );
	deepEqual( Stem("pavlitch"), "pavlitch" );
	deepEqual( Stem("pavlovitch"), "pavlovitch" );
	deepEqual( Stem("pavlovna"), "pavlovna" );
	deepEqual( Stem("paw"), "paw" );
	deepEqual( Stem("pawn"), "pawn" );
	deepEqual( Stem("pawnbroker"), "pawnbrok" );
	deepEqual( Stem("pawnbrokers"), "pawnbrok" );
	deepEqual( Stem("pawned"), "pawn" );
	deepEqual( Stem("paws"), "paw" );
	deepEqual( Stem("pay"), "pay" );
	deepEqual( Stem("payable"), "payabl" );
	deepEqual( Stem("paying"), "pay" );
	deepEqual( Stem("payment"), "payment" );
	deepEqual( Stem("payments"), "payment" );
	deepEqual( Stem("paypote"), "paypot" );
	deepEqual( Stem("pays"), "pay" );
	deepEqual( Stem("pe"), "pe" );
	deepEqual( Stem("pea"), "pea" );
	deepEqual( Stem("peace"), "peac" );
	deepEqual( Stem("peaceable"), "peaceabl" );
	deepEqual( Stem("peaceably"), "peaceabl" );
	deepEqual( Stem("peaceful"), "peac" );
	deepEqual( Stem("peacefully"), "peac" );
	deepEqual( Stem("peacefulness"), "peac" );
	deepEqual( Stem("peach"), "peach" );
	deepEqual( Stem("peaches"), "peach" );
	deepEqual( Stem("peachy"), "peachi" );
	deepEqual( Stem("peacock"), "peacock" );
	deepEqual( Stem("peacocks"), "peacock" );
	deepEqual( Stem("peak"), "peak" );
	deepEqual( Stem("peaked"), "peak" );
	deepEqual( Stem("peaks"), "peak" );
	deepEqual( Stem("peal"), "peal" );
	deepEqual( Stem("pealed"), "peal" );
	deepEqual( Stem("peals"), "peal" );
	deepEqual( Stem("pear"), "pear" );
	deepEqual( Stem("pearl"), "pearl" );
	deepEqual( Stem("pearls"), "pearl" );
	deepEqual( Stem("pearly"), "pear" );
	deepEqual( Stem("pears"), "pear" );
	deepEqual( Stem("peas"), "pea" );
	deepEqual( Stem("peasant"), "peasant" );
	deepEqual( Stem("peasantry"), "peasantri" );
	deepEqual( Stem("peasants"), "peasant" );
	deepEqual( Stem("pease"), "peas" );
	deepEqual( Stem("peat"), "peat" );
	deepEqual( Stem("peaty"), "peati" );
	deepEqual( Stem("pebble"), "pebbl" );
	deepEqual( Stem("pebbles"), "pebbl" );
	deepEqual( Stem("pecado"), "pecado" );
	deepEqual( Stem("peccari"), "peccari" );
	deepEqual( Stem("peccaries"), "peccari" );
	deepEqual( Stem("peccet"), "peccet" );
	deepEqual( Stem("peck"), "peck" );
	deepEqual( Stem("pecker"), "pecker" );
	deepEqual( Stem("pecking"), "peck" );
	deepEqual( Stem("pecoris"), "pecori" );
	deepEqual( Stem("pectoral"), "pector" );
	deepEqual( Stem("peculation"), "pecul" );
	deepEqual( Stem("peculiar"), "peculiar" );
	deepEqual( Stem("peculiarities"), "peculiar" );
	deepEqual( Stem("peculiarity"), "peculiar" );
	deepEqual( Stem("peculiarly"), "peculiar" );
	deepEqual( Stem("pecuniarily"), "pecuniarili" );
	deepEqual( Stem("pecuniary"), "pecuniari" );
	deepEqual( Stem("pedagogue"), "pedagogu" );
	deepEqual( Stem("pedantry"), "pedantri" );
	deepEqual( Stem("pedestal"), "pedest" );
	deepEqual( Stem("pedestrian"), "pedestrian" );
	deepEqual( Stem("pedigree"), "pedigre" );
	deepEqual( Stem("pediment"), "pediment" );
	deepEqual( Stem("pedlar"), "pedlar" );
	deepEqual( Stem("pedlars"), "pedlar" );
	deepEqual( Stem("pedro"), "pedro" );
	deepEqual( Stem("peel"), "peel" );
	deepEqual( Stem("peeled"), "peel" );
	deepEqual( Stem("peeling"), "peel" );
	deepEqual( Stem("peep"), "peep" );
	deepEqual( Stem("peeped"), "peep" );
	deepEqual( Stem("peeping"), "peep" );
	deepEqual( Stem("peeps"), "peep" );
	deepEqual( Stem("peepy"), "peepi" );
	deepEqual( Stem("peer"), "peer" );
	deepEqual( Stem("peerage"), "peerag" );
	deepEqual( Stem("peerages"), "peerag" );
	deepEqual( Stem("peered"), "peer" );
	deepEqual( Stem("peeresses"), "peeress" );
	deepEqual( Stem("peering"), "peer" );
	deepEqual( Stem("peerless"), "peerless" );
	deepEqual( Stem("peers"), "peer" );
	deepEqual( Stem("peevish"), "peevish" );
	deepEqual( Stem("peevishly"), "peevish" );
	deepEqual( Stem("peevishness"), "peevish" );
	deepEqual( Stem("peewit"), "peewit" );
	deepEqual( Stem("peewits"), "peewit" );
	deepEqual( Stem("peffer"), "peffer" );
	deepEqual( Stem("peg"), "peg" );
	deepEqual( Stem("pegasus"), "pegasus" );
	deepEqual( Stem("pegged"), "peg" );
	deepEqual( Stem("pegs"), "peg" );
	deepEqual( Stem("pelacanoides"), "pelacanoid" );
	deepEqual( Stem("pelagic"), "pelag" );
	deepEqual( Stem("pelham"), "pelham" );
	deepEqual( Stem("pelisse"), "peliss" );
	deepEqual( Stem("pell"), "pell" );
	deepEqual( Stem("pelt"), "pelt" );
	deepEqual( Stem("pelted"), "pelt" );
	deepEqual( Stem("pelting"), "pelt" );
	deepEqual( Stem("peltirogus"), "peltirogus" );
	deepEqual( Stem("peltiroguses"), "peltirogus" );
	deepEqual( Stem("peludo"), "peludo" );
	deepEqual( Stem("pembroke"), "pembrok" );
	deepEqual( Stem("pen"), "pen" );
	deepEqual( Stem("penal"), "penal" );
	deepEqual( Stem("penalties"), "penalti" );
	deepEqual( Stem("penalty"), "penalti" );
	deepEqual( Stem("penance"), "penanc" );
	deepEqual( Stem("penas"), "pena" );
	deepEqual( Stem("pence"), "penc" );
	deepEqual( Stem("pencil"), "pencil" );
	deepEqual( Stem("pencilled"), "pencil" );
	deepEqual( Stem("pencils"), "pencil" );
	deepEqual( Stem("pendant"), "pendant" );
	deepEqual( Stem("pending"), "pend" );
	deepEqual( Stem("pendulum"), "pendulum" );
	deepEqual( Stem("penetrable"), "penetr" );
	deepEqual( Stem("penetrate"), "penetr" );
	deepEqual( Stem("penetrated"), "penetr" );
	deepEqual( Stem("penetrates"), "penetr" );
	deepEqual( Stem("penetrating"), "penetr" );
	deepEqual( Stem("penetration"), "penetr" );
	deepEqual( Stem("penguin"), "penguin" );
	deepEqual( Stem("penguins"), "penguin" );
	deepEqual( Stem("peninsula"), "peninsula" );
	deepEqual( Stem("peninsular"), "peninsular" );
	deepEqual( Stem("penitence"), "penit" );
	deepEqual( Stem("penitent"), "penit" );
	deepEqual( Stem("penitential"), "penitenti" );
	deepEqual( Stem("penitents"), "penit" );
	deepEqual( Stem("penknife"), "penknif" );
	deepEqual( Stem("penn"), "penn" );
	deepEqual( Stem("penned"), "pen" );
	deepEqual( Stem("penniless"), "penniless" );
	deepEqual( Stem("penny"), "penni" );
	deepEqual( Stem("pennyworth"), "pennyworth" );
	deepEqual( Stem("pens"), "pen" );
	deepEqual( Stem("pension"), "pension" );
	deepEqual( Stem("pensioner"), "pension" );
	deepEqual( Stem("pensioners"), "pension" );
	deepEqual( Stem("pensioning"), "pension" );
	deepEqual( Stem("pensions"), "pension" );
	deepEqual( Stem("pensive"), "pensiv" );
	deepEqual( Stem("pensively"), "pensiv" );
	deepEqual( Stem("pensiveness"), "pensiv" );
	deepEqual( Stem("pent"), "pent" );
	deepEqual( Stem("pentland"), "pentland" );
	deepEqual( Stem("penton"), "penton" );
	deepEqual( Stem("pentonville"), "pentonvill" );
	deepEqual( Stem("penultimate"), "penultim" );
	deepEqual( Stem("penury"), "penuri" );
	deepEqual( Stem("peony"), "peoni" );
	deepEqual( Stem("people"), "peopl" );
	deepEqual( Stem("peopled"), "peopl" );
	deepEqual( Stem("peoples"), "peopl" );
	deepEqual( Stem("pepper"), "pepper" );
	deepEqual( Stem("pepsis"), "pepsi" );
	deepEqual( Stem("per"), "per" );
	deepEqual( Stem("perceive"), "perceiv" );
	deepEqual( Stem("perceived"), "perceiv" );
	deepEqual( Stem("perceives"), "perceiv" );
	deepEqual( Stem("perceiving"), "perceiv" );
	deepEqual( Stem("percent"), "percent" );
	deepEqual( Stem("percentage"), "percentag" );
	deepEqual( Stem("percentages"), "percentag" );
	deepEqual( Stem("perceptible"), "percept" );
	deepEqual( Stem("perceptibly"), "percept" );
	deepEqual( Stem("perception"), "percept" );
	deepEqual( Stem("perceptions"), "percept" );
	deepEqual( Stem("percepts"), "percept" );
	deepEqual( Stem("perch"), "perch" );
	deepEqual( Stem("percha"), "percha" );
	deepEqual( Stem("perchance"), "perchanc" );
	deepEqual( Stem("perched"), "perch" );
	deepEqual( Stem("perches"), "perch" );
	deepEqual( Stem("percival"), "perciv" );
	deepEqual( Stem("percolates"), "percol" );
	deepEqual( Stem("percolating"), "percol" );
	deepEqual( Stem("percolation"), "percol" );
	deepEqual( Stem("percy"), "perci" );
	deepEqual( Stem("perdition"), "perdit" );
	deepEqual( Stem("peremptorily"), "peremptorili" );
	deepEqual( Stem("peremptory"), "peremptori" );
	deepEqual( Stem("perennial"), "perenni" );
	deepEqual( Stem("perennially"), "perenni" );
	deepEqual( Stem("perfecfly"), "perfecfli" );
	deepEqual( Stem("perfect"), "perfect" );
	deepEqual( Stem("perfected"), "perfect" );
	deepEqual( Stem("perfection"), "perfect" );
	deepEqual( Stem("perfections"), "perfect" );
	deepEqual( Stem("perfectly"), "perfect" );
	deepEqual( Stem("perfidy"), "perfidi" );
	deepEqual( Stem("perforate"), "perfor" );
	deepEqual( Stem("perforated"), "perfor" );
	deepEqual( Stem("perforce"), "perforc" );
	deepEqual( Stem("perform"), "perform" );
	deepEqual( Stem("performance"), "perform" );
	deepEqual( Stem("performances"), "perform" );
	deepEqual( Stem("performed"), "perform" );
	deepEqual( Stem("performer"), "perform" );
	deepEqual( Stem("performers"), "perform" );
	deepEqual( Stem("performing"), "perform" );
	deepEqual( Stem("performs"), "perform" );
	deepEqual( Stem("perfume"), "perfum" );
	deepEqual( Stem("perfumed"), "perfum" );
	deepEqual( Stem("perfumery"), "perfumeri" );
	deepEqual( Stem("perfumes"), "perfum" );
	deepEqual( Stem("perhaps"), "perhap" );
	deepEqual( Stem("periagua"), "periagua" );
	deepEqual( Stem("perianth"), "perianth" );
	deepEqual( Stem("pericardium"), "pericardium" );
	deepEqual( Stem("peril"), "peril" );
	deepEqual( Stem("perilled"), "peril" );
	deepEqual( Stem("perilous"), "peril" );
	deepEqual( Stem("perilously"), "peril" );
	deepEqual( Stem("perils"), "peril" );
	deepEqual( Stem("period"), "period" );
	deepEqual( Stem("periodical"), "period" );
	deepEqual( Stem("periodically"), "period" );
	deepEqual( Stem("periodicals"), "period" );
	deepEqual( Stem("periods"), "period" );
	deepEqual( Stem("perish"), "perish" );
	deepEqual( Stem("perishable"), "perish" );
	deepEqual( Stem("perished"), "perish" );
	deepEqual( Stem("perishing"), "perish" );
	deepEqual( Stem("perjured"), "perjur" );
	deepEqual( Stem("perjury"), "perjuri" );
	deepEqual( Stem("perkins"), "perkin" );
	deepEqual( Stem("perlen"), "perlen" );
	deepEqual( Stem("permanence"), "perman" );
	deepEqual( Stem("permanent"), "perman" );
	deepEqual( Stem("permanently"), "perman" );
	deepEqual( Stem("permeated"), "permeat" );
	deepEqual( Stem("permissable"), "permiss" );
	deepEqual( Stem("permissible"), "permiss" );
	deepEqual( Stem("permission"), "permiss" );
	deepEqual( Stem("permit"), "permit" );
	deepEqual( Stem("permitted"), "permit" );
	deepEqual( Stem("permitting"), "permit" );
	deepEqual( Stem("pernambuco"), "pernambuco" );
	deepEqual( Stem("pernety"), "perneti" );
	deepEqual( Stem("pernicious"), "pernici" );
	deepEqual( Stem("peron"), "peron" );
	deepEqual( Stem("peroration"), "peror" );
	deepEqual( Stem("perpendicular"), "perpendicular" );
	deepEqual( Stem("perpendicularly"), "perpendicular" );
	deepEqual( Stem("perpetrated"), "perpetr" );
	deepEqual( Stem("perpetration"), "perpetr" );
	deepEqual( Stem("perpetrator"), "perpetr" );
	deepEqual( Stem("perpetrators"), "perpetr" );
	deepEqual( Stem("perpetual"), "perpetu" );
	deepEqual( Stem("perpetually"), "perpetu" );
	deepEqual( Stem("perpetuate"), "perpetu" );
	deepEqual( Stem("perpetuated"), "perpetu" );
	deepEqual( Stem("perpetuating"), "perpetu" );
	deepEqual( Stem("perpetuity"), "perpetu" );
	deepEqual( Stem("perplex"), "perplex" );
	deepEqual( Stem("perplexed"), "perplex" );
	deepEqual( Stem("perplexing"), "perplex" );
	deepEqual( Stem("perplexities"), "perplex" );
	deepEqual( Stem("perplexity"), "perplex" );
	deepEqual( Stem("perquisition"), "perquisit" );
	deepEqual( Stem("perquisitions"), "perquisit" );
	deepEqual( Stem("pers"), "per" );
	deepEqual( Stem("persecute"), "persecut" );
	deepEqual( Stem("persecuted"), "persecut" );
	deepEqual( Stem("persecuting"), "persecut" );
	deepEqual( Stem("persecution"), "persecut" );
	deepEqual( Stem("persecutions"), "persecut" );
	deepEqual( Stem("persecutor"), "persecutor" );
	deepEqual( Stem("persecutors"), "persecutor" );
	deepEqual( Stem("perseverance"), "persever" );
	deepEqual( Stem("persevere"), "persever" );
	deepEqual( Stem("persevered"), "persev" );
	deepEqual( Stem("perseveres"), "persever" );
	deepEqual( Stem("persevering"), "persev" );
	deepEqual( Stem("perseveringly"), "persev" );
	deepEqual( Stem("persia"), "persia" );
	deepEqual( Stem("persian"), "persian" );
	deepEqual( Stem("persist"), "persist" );
	deepEqual( Stem("persisted"), "persist" );
	deepEqual( Stem("persistence"), "persist" );
	deepEqual( Stem("persistency"), "persist" );
	deepEqual( Stem("persistent"), "persist" );
	deepEqual( Stem("persistently"), "persist" );
	deepEqual( Stem("persisting"), "persist" );
	deepEqual( Stem("persists"), "persist" );
	deepEqual( Stem("person"), "person" );
	deepEqual( Stem("personage"), "personag" );
	deepEqual( Stem("personages"), "personag" );
	deepEqual( Stem("personal"), "person" );
	deepEqual( Stem("personality"), "person" );
	deepEqual( Stem("personally"), "person" );
	deepEqual( Stem("personate"), "person" );
	deepEqual( Stem("personated"), "person" );
	deepEqual( Stem("personification"), "personif" );
	deepEqual( Stem("personified"), "personifi" );
	deepEqual( Stem("persons"), "person" );
	deepEqual( Stem("perspective"), "perspect" );
	deepEqual( Stem("perspiration"), "perspir" );
	deepEqual( Stem("perspired"), "perspir" );
	deepEqual( Stem("perspires"), "perspir" );
	deepEqual( Stem("persuadable"), "persuad" );
	deepEqual( Stem("persuade"), "persuad" );
	deepEqual( Stem("persuaded"), "persuad" );
	deepEqual( Stem("persuading"), "persuad" );
	deepEqual( Stem("persuasion"), "persuas" );
	deepEqual( Stem("persuasions"), "persuas" );
	deepEqual( Stem("persuasive"), "persuas" );
	deepEqual( Stem("persuasively"), "persuas" );
	deepEqual( Stem("pert"), "pert" );
	deepEqual( Stem("perthshire"), "perthshir" );
	deepEqual( Stem("pertinacious"), "pertinaci" );
	deepEqual( Stem("pertinaciously"), "pertinaci" );
	deepEqual( Stem("pertinacity"), "pertinac" );
	deepEqual( Stem("perturbation"), "perturb" );
	deepEqual( Stem("perturbed"), "perturb" );
	deepEqual( Stem("peru"), "peru" );
	deepEqual( Stem("perusal"), "perus" );
	deepEqual( Stem("perusals"), "perus" );
	deepEqual( Stem("peruse"), "perus" );
	deepEqual( Stem("perused"), "perus" );
	deepEqual( Stem("perusing"), "perus" );
	deepEqual( Stem("peruvian"), "peruvian" );
	deepEqual( Stem("peruvians"), "peruvian" );
	deepEqual( Stem("pervade"), "pervad" );
	deepEqual( Stem("pervaded"), "pervad" );
	deepEqual( Stem("pervades"), "pervad" );
	deepEqual( Stem("pervading"), "pervad" );
	deepEqual( Stem("perverse"), "pervers" );
	deepEqual( Stem("perversely"), "pervers" );
	deepEqual( Stem("perverseness"), "pervers" );
	deepEqual( Stem("perversion"), "pervers" );
	deepEqual( Stem("perversity"), "pervers" );
	deepEqual( Stem("perverted"), "pervert" );
	deepEqual( Stem("pervious"), "pervious" );
	deepEqual( Stem("perwerse"), "perwers" );
	deepEqual( Stem("peski"), "peski" );
	deepEqual( Stem("pest"), "pest" );
	deepEqual( Stem("pester"), "pester" );
	deepEqual( Stem("pestered"), "pester" );
	deepEqual( Stem("pestering"), "pester" );
	deepEqual( Stem("pestiferous"), "pestifer" );
	deepEqual( Stem("pestilence"), "pestil" );
	deepEqual( Stem("pestilent"), "pestil" );
	deepEqual( Stem("pestilential"), "pestilenti" );
	deepEqual( Stem("pestle"), "pestl" );
	deepEqual( Stem("pestryakov"), "pestryakov" );
	deepEqual( Stem("pet"), "pet" );
	deepEqual( Stem("petals"), "petal" );
	deepEqual( Stem("peter"), "peter" );
	deepEqual( Stem("petersburg"), "petersburg" );
	deepEqual( Stem("petersham"), "petersham" );
	deepEqual( Stem("petioles"), "petiol" );
	deepEqual( Stem("petise"), "petis" );
	deepEqual( Stem("petises"), "petis" );
	deepEqual( Stem("petition"), "petit" );
	deepEqual( Stem("petitioned"), "petit" );
	deepEqual( Stem("petitioners"), "petition" );
	deepEqual( Stem("petitioning"), "petit" );
	deepEqual( Stem("petitions"), "petit" );
	deepEqual( Stem("petorca"), "petorca" );
	deepEqual( Stem("petowker"), "petowk" );
	deepEqual( Stem("petrel"), "petrel" );
	deepEqual( Stem("petrels"), "petrel" );
	deepEqual( Stem("petrified"), "petrifi" );
	deepEqual( Stem("petrovitch"), "petrovitch" );
	deepEqual( Stem("petrovna"), "petrovna" );
	deepEqual( Stem("petrovsky"), "petrovski" );
	deepEqual( Stem("petruchio"), "petruchio" );
	deepEqual( Stem("pets"), "pet" );
	deepEqual( Stem("petted"), "pet" );
	deepEqual( Stem("petticoat"), "petticoat" );
	deepEqual( Stem("petticoats"), "petticoat" );
	deepEqual( Stem("pettifoggers"), "pettifogg" );
	deepEqual( Stem("pettifogging"), "pettifog" );
	deepEqual( Stem("pettiness"), "petti" );
	deepEqual( Stem("petting"), "pet" );
	deepEqual( Stem("pettish"), "pettish" );
	deepEqual( Stem("pettishly"), "pettish" );
	deepEqual( Stem("petty"), "petti" );
	deepEqual( Stem("petulance"), "petul" );
	deepEqual( Stem("petulant"), "petul" );
	deepEqual( Stem("petulantly"), "petul" );
	deepEqual( Stem("peuquenes"), "peuquen" );
	deepEqual( Stem("pew"), "pew" );
	deepEqual( Stem("pewter"), "pewter" );
	deepEqual( Stem("pfoo"), "pfoo" );
	deepEqual( Stem("phaeton"), "phaeton" );
	deepEqual( Stem("phairy"), "phairi" );
	deepEqual( Stem("phalanstery"), "phalansteri" );
	deepEqual( Stem("phallus"), "phallus" );
	deepEqual( Stem("phanaeus"), "phanaeus" );
	deepEqual( Stem("phantom"), "phantom" );
	deepEqual( Stem("phantoms"), "phantom" );
	deepEqual( Stem("pharaoh"), "pharaoh" );
	deepEqual( Stem("pharisees"), "pharise" );
	deepEqual( Stem("phases"), "phase" );
	deepEqual( Stem("pheasants"), "pheasant" );
	deepEqual( Stem("phenomena"), "phenomena" );
	deepEqual( Stem("phenomenal"), "phenomen" );
	deepEqual( Stem("phenomenally"), "phenomen" );
	deepEqual( Stem("phenomenes"), "phenomen" );
	deepEqual( Stem("phenomenon"), "phenomenon" );
	deepEqual( Stem("phenomenons"), "phenomenon" );
	deepEqual( Stem("phew"), "phew" );
	deepEqual( Stem("phib"), "phib" );
	deepEqual( Stem("phil"), "phil" );
	deepEqual( Stem("philandering"), "philand" );
	deepEqual( Stem("philanthropic"), "philanthrop" );
	deepEqual( Stem("philanthropical"), "philanthrop" );
	deepEqual( Stem("philanthropist"), "philanthropist" );
	deepEqual( Stem("philanthropists"), "philanthropist" );
	deepEqual( Stem("philanthropy"), "philanthropi" );
	deepEqual( Stem("philip"), "philip" );
	deepEqual( Stem("philippe"), "philipp" );
	deepEqual( Stem("philippines"), "philippin" );
	deepEqual( Stem("phillippensis"), "phillippensi" );
	deepEqual( Stem("philo"), "philo" );
	deepEqual( Stem("philos"), "philo" );
	deepEqual( Stem("philosoph"), "philosoph" );
	deepEqual( Stem("philosopher"), "philosoph" );
	deepEqual( Stem("philosophers"), "philosoph" );
	deepEqual( Stem("philosophical"), "philosoph" );
	deepEqual( Stem("philosophically"), "philosoph" );
	deepEqual( Stem("philosophies"), "philosophi" );
	deepEqual( Stem("philosophy"), "philosophi" );
	deepEqual( Stem("phineas"), "phinea" );
	deepEqual( Stem("phlegmatic"), "phlegmat" );
	deepEqual( Stem("pho"), "pho" );
	deepEqual( Stem("phoebe"), "phoeb" );
	deepEqual( Stem("phoenix"), "phoenix" );
	deepEqual( Stem("phonolite"), "phonolit" );
	deepEqual( Stem("phosphate"), "phosphat" );
	deepEqual( Stem("phosphorescence"), "phosphoresc" );
	deepEqual( Stem("phosphorescent"), "phosphoresc" );
	deepEqual( Stem("phosphoric"), "phosphor" );
	deepEqual( Stem("phosphorus"), "phosphorus" );
	deepEqual( Stem("phosphuretted"), "phosphuret" );
	deepEqual( Stem("photographer"), "photograph" );
	deepEqual( Stem("phrase"), "phrase" );
	deepEqual( Stem("phrased"), "phrase" );
	deepEqual( Stem("phraseology"), "phraseolog" );
	deepEqual( Stem("phrases"), "phrase" );
	deepEqual( Stem("phrenological"), "phrenolog" );
	deepEqual( Stem("phryniscus"), "phryniscus" );
	deepEqual( Stem("physalia"), "physalia" );
	deepEqual( Stem("physic"), "physic" );
	deepEqual( Stem("physical"), "physic" );
	deepEqual( Stem("physically"), "physic" );
	deepEqual( Stem("physician"), "physician" );
	deepEqual( Stem("physicians"), "physician" );
	deepEqual( Stem("physicking"), "physick" );
	deepEqual( Stem("physiognomist"), "physiognomist" );
	deepEqual( Stem("physiognomy"), "physiognomi" );
	deepEqual( Stem("physiol"), "physiol" );
	deepEqual( Stem("physiological"), "physiolog" );
	deepEqual( Stem("physiology"), "physiolog" );
	deepEqual( Stem("physique"), "physiqu" );
	deepEqual( Stem("phytolitharia"), "phytolitharia" );
	deepEqual( Stem("piano"), "piano" );
	deepEqual( Stem("pianoforte"), "pianofort" );
	deepEqual( Stem("pianos"), "piano" );
	deepEqual( Stem("picaninnies"), "picaninni" );
	deepEqual( Stem("picaninny"), "picaninni" );
	deepEqual( Stem("piccadilly"), "piccadilli" );
	deepEqual( Stem("pichy"), "pichi" );
	deepEqual( Stem("pick"), "pick" );
	deepEqual( Stem("pickaxe"), "pickax" );
	deepEqual( Stem("picked"), "pick" );
	deepEqual( Stem("pickers"), "picker" );
	deepEqual( Stem("picking"), "pick" );
	deepEqual( Stem("pickings"), "pick" );
	deepEqual( Stem("pickle"), "pickl" );
	deepEqual( Stem("pickled"), "pickl" );
	deepEqual( Stem("pickles"), "pickl" );
	deepEqual( Stem("pickling"), "pickl" );
	deepEqual( Stem("pickpocket"), "pickpocket" );
	deepEqual( Stem("pickpockets"), "pickpocket" );
	deepEqual( Stem("picks"), "pick" );
	deepEqual( Stem("pickwick"), "pickwick" );
	deepEqual( Stem("picnic"), "picnic" );
	deepEqual( Stem("picnics"), "picnic" );
	deepEqual( Stem("picter"), "picter" );
	deepEqual( Stem("pictorial"), "pictori" );
	deepEqual( Stem("picture"), "pictur" );
	deepEqual( Stem("pictured"), "pictur" );
	deepEqual( Stem("pictures"), "pictur" );
	deepEqual( Stem("picturesque"), "picturesqu" );
	deepEqual( Stem("picturing"), "pictur" );
	deepEqual( Stem("piderit"), "piderit" );
	deepEqual( Stem("pie"), "pie" );
	deepEqual( Stem("piebald"), "piebald" );
	deepEqual( Stem("piebalds"), "piebald" );
	deepEqual( Stem("piece"), "piec" );
	deepEqual( Stem("pieced"), "piec" );
	deepEqual( Stem("piecemeal"), "piecem" );
	deepEqual( Stem("pieces"), "piec" );
	deepEqual( Stem("piecework"), "piecework" );
	deepEqual( Stem("pieman"), "pieman" );
	deepEqual( Stem("pier"), "pier" );
	deepEqual( Stem("pierce"), "pierc" );
	deepEqual( Stem("pierced"), "pierc" );
	deepEqual( Stem("pierces"), "pierc" );
	deepEqual( Stem("piercing"), "pierc" );
	deepEqual( Stem("piercingly"), "pierc" );
	deepEqual( Stem("pierre"), "pierr" );
	deepEqual( Stem("pierres"), "pierr" );
	deepEqual( Stem("piers"), "pier" );
	deepEqual( Stem("pies"), "pie" );
	deepEqual( Stem("pietras"), "pietra" );
	deepEqual( Stem("piety"), "pieti" );
	deepEqual( Stem("pig"), "pig" );
	deepEqual( Stem("pigeon"), "pigeon" );
	deepEqual( Stem("pigeons"), "pigeon" );
	deepEqual( Stem("pigmies"), "pigmi" );
	deepEqual( Stem("pigmy"), "pigmi" );
	deepEqual( Stem("pigs"), "pig" );
	deepEqual( Stem("pigsties"), "pigsti" );
	deepEqual( Stem("pigtail"), "pigtail" );
	deepEqual( Stem("pigtails"), "pigtail" );
	deepEqual( Stem("pikestaff"), "pikestaff" );
	deepEqual( Stem("pile"), "pile" );
	deepEqual( Stem("piled"), "pile" );
	deepEqual( Stem("piles"), "pile" );
	deepEqual( Stem("pilfering"), "pilfer" );
	deepEqual( Stem("pilger"), "pilger" );
	deepEqual( Stem("pilgrim"), "pilgrim" );
	deepEqual( Stem("pilgrimage"), "pilgrimag" );
	deepEqual( Stem("piling"), "pile" );
	deepEqual( Stem("pill"), "pill" );
	deepEqual( Stem("pillar"), "pillar" );
	deepEqual( Stem("pillars"), "pillar" );
	deepEqual( Stem("pillow"), "pillow" );
	deepEqual( Stem("pillowed"), "pillow" );
	deepEqual( Stem("pillows"), "pillow" );
	deepEqual( Stem("pills"), "pill" );
	deepEqual( Stem("pilot"), "pilot" );
	deepEqual( Stem("piloted"), "pilot" );
	deepEqual( Stem("pilots"), "pilot" );
	deepEqual( Stem("pimlico"), "pimlico" );
	deepEqual( Stem("pimple"), "pimpl" );
	deepEqual( Stem("pimples"), "pimpl" );
	deepEqual( Stem("pimply"), "pimpli" );
	deepEqual( Stem("pin"), "pin" );
	deepEqual( Stem("pinafore"), "pinafor" );
	deepEqual( Stem("pincers"), "pincer" );
	deepEqual( Stem("pinch"), "pinch" );
	deepEqual( Stem("pinched"), "pinch" );
	deepEqual( Stem("pincheira"), "pincheira" );
	deepEqual( Stem("pinches"), "pinch" );
	deepEqual( Stem("pinching"), "pinch" );
	deepEqual( Stem("pincushions"), "pincushion" );
	deepEqual( Stem("pine"), "pine" );
	deepEqual( Stem("pineapple"), "pineappl" );
	deepEqual( Stem("pined"), "pine" );
	deepEqual( Stem("pines"), "pine" );
	deepEqual( Stem("pining"), "pine" );
	deepEqual( Stem("pinion"), "pinion" );
	deepEqual( Stem("pinions"), "pinion" );
	deepEqual( Stem("pink"), "pink" );
	deepEqual( Stem("pinked"), "pink" );
	deepEqual( Stem("pinker"), "pinker" );
	deepEqual( Stem("pinkish"), "pinkish" );
	deepEqual( Stem("pinnace"), "pinnac" );
	deepEqual( Stem("pinnacle"), "pinnacl" );
	deepEqual( Stem("pinnacled"), "pinnacl" );
	deepEqual( Stem("pinnacles"), "pinnacl" );
	deepEqual( Stem("pinned"), "pin" );
	deepEqual( Stem("pinning"), "pin" );
	deepEqual( Stem("pins"), "pin" );
	deepEqual( Stem("pint"), "pint" );
	deepEqual( Stem("pints"), "pint" );
	deepEqual( Stem("pious"), "pious" );
	deepEqual( Stem("pipe"), "pipe" );
	deepEqual( Stem("pipeclayed"), "pipeclay" );
	deepEqual( Stem("pipelight"), "pipelight" );
	deepEqual( Stem("piper"), "piper" );
	deepEqual( Stem("pipes"), "pipe" );
	deepEqual( Stem("piping"), "pipe" );
	deepEqual( Stem("pips"), "pip" );
	deepEqual( Stem("piquancy"), "piquanc" );
	deepEqual( Stem("piquant"), "piquant" );
	deepEqual( Stem("pique"), "piqu" );
	deepEqual( Stem("piqued"), "piqu" );
	deepEqual( Stem("piquet"), "piquet" );
	deepEqual( Stem("pirouette"), "pirouett" );
	deepEqual( Stem("pisagua"), "pisagua" );
	deepEqual( Stem("pise"), "pise" );
	deepEqual( Stem("pish"), "pish" );
	deepEqual( Stem("pistil"), "pistil" );
	deepEqual( Stem("pistol"), "pistol" );
	deepEqual( Stem("pistoling"), "pistol" );
	deepEqual( Stem("pistolling"), "pistol" );
	deepEqual( Stem("pistols"), "pistol" );
	deepEqual( Stem("pit"), "pit" );
	deepEqual( Stem("pitcairn"), "pitcairn" );
	deepEqual( Stem("pitch"), "pitch" );
	deepEqual( Stem("pitched"), "pitch" );
	deepEqual( Stem("pitcher"), "pitcher" );
	deepEqual( Stem("pitchers"), "pitcher" );
	deepEqual( Stem("pitchfork"), "pitchfork" );
	deepEqual( Stem("pitching"), "pitch" );
	deepEqual( Stem("pitchy"), "pitchi" );
	deepEqual( Stem("piteous"), "piteous" );
	deepEqual( Stem("piteously"), "piteous" );
	deepEqual( Stem("pitfall"), "pitfal" );
	deepEqual( Stem("pitfalls"), "pitfal" );
	deepEqual( Stem("pith"), "pith" );
	deepEqual( Stem("pithy"), "pithi" );
	deepEqual( Stem("pitiable"), "pitiabl" );
	deepEqual( Stem("pitiably"), "pitiabl" );
	deepEqual( Stem("pitied"), "piti" );
	deepEqual( Stem("pities"), "piti" );
	deepEqual( Stem("pitiful"), "piti" );
	deepEqual( Stem("pitilessly"), "pitiless" );
	deepEqual( Stem("pitmen"), "pitmen" );
	deepEqual( Stem("pits"), "pit" );
	deepEqual( Stem("pitt"), "pitt" );
	deepEqual( Stem("pittance"), "pittanc" );
	deepEqual( Stem("pittances"), "pittanc" );
	deepEqual( Stem("pitted"), "pit" );
	deepEqual( Stem("pitty"), "pitti" );
	deepEqual( Stem("pity"), "piti" );
	deepEqual( Stem("pitying"), "piti" );
	deepEqual( Stem("pivot"), "pivot" );
	deepEqual( Stem("pizzaro"), "pizzaro" );
	deepEqual( Stem("pla"), "pla" );
	deepEqual( Stem("plac"), "plac" );
	deepEqual( Stem("placard"), "placard" );
	deepEqual( Stem("placarded"), "placard" );
	deepEqual( Stem("placards"), "placard" );
	deepEqual( Stem("place"), "place" );
	deepEqual( Stem("placed"), "place" );
	deepEqual( Stem("places"), "place" );
	deepEqual( Stem("placid"), "placid" );
	deepEqual( Stem("placidity"), "placid" );
	deepEqual( Stem("placidly"), "placid" );
	deepEqual( Stem("placing"), "place" );
	deepEqual( Stem("plagiarists"), "plagiarist" );
	deepEqual( Stem("plague"), "plagu" );
	deepEqual( Stem("plagued"), "plagu" );
	deepEqual( Stem("plagues"), "plagu" );
	deepEqual( Stem("plaguing"), "plagu" );
	deepEqual( Stem("plaid"), "plaid" );
	deepEqual( Stem("plain"), "plain" );
	deepEqual( Stem("plainer"), "plainer" );
	deepEqual( Stem("plainest"), "plainest" );
	deepEqual( Stem("plainly"), "plain" );
	deepEqual( Stem("plainness"), "plain" );
	deepEqual( Stem("plains"), "plain" );
	deepEqual( Stem("plaint"), "plaint" );
	deepEqual( Stem("plaintiff"), "plaintiff" );
	deepEqual( Stem("plaintiffs"), "plaintiff" );
	deepEqual( Stem("plaintive"), "plaintiv" );
	deepEqual( Stem("plaintively"), "plaintiv" );
	deepEqual( Stem("plaintiveness"), "plaintiv" );
	deepEqual( Stem("plaire"), "plair" );
	deepEqual( Stem("plaisir"), "plaisir" );
	deepEqual( Stem("plait"), "plait" );
	deepEqual( Stem("plaited"), "plait" );
	deepEqual( Stem("plaits"), "plait" );
	deepEqual( Stem("plan"), "plan" );
	deepEqual( Stem("planaria"), "planaria" );
	deepEqual( Stem("planariae"), "planaria" );
	deepEqual( Stem("plane"), "plane" );
	deepEqual( Stem("planed"), "plane" );
	deepEqual( Stem("planet"), "planet" );
	deepEqual( Stem("planing"), "plane" );
	deepEqual( Stem("plank"), "plank" );
	deepEqual( Stem("planks"), "plank" );
	deepEqual( Stem("planned"), "plan" );
	deepEqual( Stem("planning"), "plan" );
	deepEqual( Stem("plans"), "plan" );
	deepEqual( Stem("plant"), "plant" );
	deepEqual( Stem("plantagenet"), "plantagenet" );
	deepEqual( Stem("plantation"), "plantat" );
	deepEqual( Stem("plantations"), "plantat" );
	deepEqual( Stem("planted"), "plant" );
	deepEqual( Stem("planter"), "planter" );
	deepEqual( Stem("planting"), "plant" );
	deepEqual( Stem("plants"), "plant" );
	deepEqual( Stem("planty"), "planti" );
	deepEqual( Stem("plashing"), "plash" );
	deepEqual( Stem("plaster"), "plaster" );
	deepEqual( Stem("plastered"), "plaster" );
	deepEqual( Stem("plat"), "plat" );
	deepEqual( Stem("plata"), "plata" );
	deepEqual( Stem("plate"), "plate" );
	deepEqual( Stem("plateau"), "plateau" );
	deepEqual( Stem("plated"), "plate" );
	deepEqual( Stem("plates"), "plate" );
	deepEqual( Stem("platform"), "platform" );
	deepEqual( Stem("platforms"), "platform" );
	deepEqual( Stem("platforna"), "platforna" );
	deepEqual( Stem("platina"), "platina" );
	deepEqual( Stem("platitudes"), "platitud" );
	deepEqual( Stem("platters"), "platter" );
	deepEqual( Stem("plaudits"), "plaudit" );
	deepEqual( Stem("plausible"), "plausibl" );
	deepEqual( Stem("plausibly"), "plausibl" );
	deepEqual( Stem("play"), "play" );
	deepEqual( Stem("playbill"), "playbil" );
	deepEqual( Stem("playbills"), "playbil" );
	deepEqual( Stem("played"), "play" );
	deepEqual( Stem("player"), "player" );
	deepEqual( Stem("players"), "player" );
	deepEqual( Stem("playfellow"), "playfellow" );
	deepEqual( Stem("playfellows"), "playfellow" );
	deepEqual( Stem("playful"), "play" );
	deepEqual( Stem("playfully"), "play" );
	deepEqual( Stem("playfulness"), "play" );
	deepEqual( Stem("playing"), "play" );
	deepEqual( Stem("playmate"), "playmat" );
	deepEqual( Stem("playmates"), "playmat" );
	deepEqual( Stem("plays"), "play" );
	deepEqual( Stem("playsure"), "playsur" );
	deepEqual( Stem("plaything"), "playth" );
	deepEqual( Stem("playthings"), "playth" );
	deepEqual( Stem("playwright"), "playwright" );
	deepEqual( Stem("plaza"), "plaza" );
	deepEqual( Stem("plea"), "plea" );
	deepEqual( Stem("pleace"), "pleac" );
	deepEqual( Stem("plead"), "plead" );
	deepEqual( Stem("pleaded"), "plead" );
	deepEqual( Stem("pleader"), "pleader" );
	deepEqual( Stem("pleaders"), "pleader" );
	deepEqual( Stem("pleading"), "plead" );
	deepEqual( Stem("pleadingly"), "plead" );
	deepEqual( Stem("pleads"), "plead" );
	deepEqual( Stem("pleasant"), "pleasant" );
	deepEqual( Stem("pleasanter"), "pleasant" );
	deepEqual( Stem("pleasantest"), "pleasantest" );
	deepEqual( Stem("pleasantly"), "pleasant" );
	deepEqual( Stem("pleasantness"), "pleasant" );
	deepEqual( Stem("pleasantry"), "pleasantri" );
	deepEqual( Stem("please"), "pleas" );
	deepEqual( Stem("pleased"), "pleas" );
	deepEqual( Stem("pleases"), "pleas" );
	deepEqual( Stem("pleasing"), "pleas" );
	deepEqual( Stem("pleasurable"), "pleasur" );
	deepEqual( Stem("pleasure"), "pleasur" );
	deepEqual( Stem("pleasures"), "pleasur" );
	deepEqual( Stem("pleasuring"), "pleasur" );
	deepEqual( Stem("plebeian"), "plebeian" );
	deepEqual( Stem("pledge"), "pledg" );
	deepEqual( Stem("pledged"), "pledg" );
	deepEqual( Stem("pledges"), "pledg" );
	deepEqual( Stem("pledging"), "pledg" );
	deepEqual( Stem("plentiful"), "plenti" );
	deepEqual( Stem("plentifully"), "plenti" );
	deepEqual( Stem("plenty"), "plenti" );
	deepEqual( Stem("plestcheiev"), "plestcheiev" );
	deepEqual( Stem("pliability"), "pliabil" );
	deepEqual( Stem("plicata"), "plicata" );
	deepEqual( Stem("plied"), "pli" );
	deepEqual( Stem("plies"), "pli" );
	deepEqual( Stem("plight"), "plight" );
	deepEqual( Stem("plighting"), "plight" );
	deepEqual( Stem("plodding"), "plod" );
	deepEqual( Stem("plot"), "plot" );
	deepEqual( Stem("plots"), "plot" );
	deepEqual( Stem("plotted"), "plot" );
	deepEqual( Stem("plotter"), "plotter" );
	deepEqual( Stem("plotters"), "plotter" );
	deepEqual( Stem("plotting"), "plot" );
	deepEqual( Stem("plough"), "plough" );
	deepEqual( Stem("ploughboy"), "ploughboy" );
	deepEqual( Stem("ploughed"), "plough" );
	deepEqual( Stem("ploughing"), "plough" );
	deepEqual( Stem("ploughman"), "ploughman" );
	deepEqual( Stem("ploughs"), "plough" );
	deepEqual( Stem("ploughshare"), "ploughshar" );
	deepEqual( Stem("ploughshares"), "ploughshar" );
	deepEqual( Stem("plover"), "plover" );
	deepEqual( Stem("pluck"), "pluck" );
	deepEqual( Stem("plucked"), "pluck" );
	deepEqual( Stem("plucking"), "pluck" );
	deepEqual( Stem("plucks"), "pluck" );
	deepEqual( Stem("plug"), "plug" );
	deepEqual( Stem("pluies"), "plui" );
	deepEqual( Stem("plum"), "plum" );
	deepEqual( Stem("plumage"), "plumag" );
	deepEqual( Stem("plumbago"), "plumbago" );
	deepEqual( Stem("plumed"), "plume" );
	deepEqual( Stem("pluming"), "plume" );
	deepEqual( Stem("plummets"), "plummet" );
	deepEqual( Stem("plump"), "plump" );
	deepEqual( Stem("plumpest"), "plumpest" );
	deepEqual( Stem("plumpness"), "plump" );
	deepEqual( Stem("plums"), "plum" );
	deepEqual( Stem("plunder"), "plunder" );
	deepEqual( Stem("plundered"), "plunder" );
	deepEqual( Stem("plundering"), "plunder" );
	deepEqual( Stem("plunge"), "plung" );
	deepEqual( Stem("plunged"), "plung" );
	deepEqual( Stem("plunges"), "plung" );
	deepEqual( Stem("plunging"), "plung" );
	deepEqual( Stem("plural"), "plural" );
	deepEqual( Stem("plurality"), "plural" );
	deepEqual( Stem("plus"), "plus" );
	deepEqual( Stem("plutonic"), "pluton" );
	deepEqual( Stem("ply"), "pli" );
	deepEqual( Stem("plying"), "pli" );
	deepEqual( Stem("plymouth"), "plymouth" );
	deepEqual( Stem("pm"), "pm" );
	deepEqual( Stem("poached"), "poach" );
	deepEqual( Stem("poaching"), "poach" );
	deepEqual( Stem("poast"), "poast" );
	deepEqual( Stem("pock"), "pock" );
	deepEqual( Stem("pocket"), "pocket" );
	deepEqual( Stem("pocketbook"), "pocketbook" );
	deepEqual( Stem("pocketed"), "pocket" );
	deepEqual( Stem("pocketing"), "pocket" );
	deepEqual( Stem("pockets"), "pocket" );
	deepEqual( Stem("pods"), "pod" );
	deepEqual( Stem("poem"), "poem" );
	deepEqual( Stem("poems"), "poem" );
	deepEqual( Stem("poet"), "poet" );
	deepEqual( Stem("poetic"), "poetic" );
	deepEqual( Stem("poetical"), "poetic" );
	deepEqual( Stem("poetizing"), "poetiz" );
	deepEqual( Stem("poetry"), "poetri" );
	deepEqual( Stem("poets"), "poet" );
	deepEqual( Stem("poignant"), "poignant" );
	deepEqual( Stem("poin"), "poin" );
	deepEqual( Stem("poins"), "poin" );
	deepEqual( Stem("point"), "point" );
	deepEqual( Stem("pointed"), "point" );
	deepEqual( Stem("pointedly"), "point" );
	deepEqual( Stem("pointing"), "point" );
	deepEqual( Stem("pointless"), "pointless" );
	deepEqual( Stem("points"), "point" );
	deepEqual( Stem("poised"), "pois" );
	deepEqual( Stem("poising"), "pois" );
	deepEqual( Stem("poison"), "poison" );
	deepEqual( Stem("poisoned"), "poison" );
	deepEqual( Stem("poisoning"), "poison" );
	deepEqual( Stem("poisonous"), "poison" );
	deepEqual( Stem("poke"), "poke" );
	deepEqual( Stem("poked"), "poke" );
	deepEqual( Stem("poker"), "poker" );
	deepEqual( Stem("pokers"), "poker" );
	deepEqual( Stem("pokes"), "poke" );
	deepEqual( Stem("poking"), "poke" );
	deepEqual( Stem("pokorev"), "pokorev" );
	deepEqual( Stem("polanco"), "polanco" );
	deepEqual( Stem("polar"), "polar" );
	deepEqual( Stem("pole"), "pole" );
	deepEqual( Stem("polecat"), "polecat" );
	deepEqual( Stem("polemical"), "polem" );
	deepEqual( Stem("polenka"), "polenka" );
	deepEqual( Stem("poles"), "pole" );
	deepEqual( Stem("police"), "polic" );
	deepEqual( Stem("policeman"), "policeman" );
	deepEqual( Stem("policemen"), "policemen" );
	deepEqual( Stem("policies"), "polici" );
	deepEqual( Stem("policy"), "polici" );
	deepEqual( Stem("polish"), "polish" );
	deepEqual( Stem("polished"), "polish" );
	deepEqual( Stem("polishes"), "polish" );
	deepEqual( Stem("polishing"), "polish" );
	deepEqual( Stem("polit"), "polit" );
	deepEqual( Stem("polite"), "polit" );
	deepEqual( Stem("politely"), "polit" );
	deepEqual( Stem("politeness"), "polit" );
	deepEqual( Stem("politest"), "politest" );
	deepEqual( Stem("politic"), "polit" );
	deepEqual( Stem("political"), "polit" );
	deepEqual( Stem("politically"), "polit" );
	deepEqual( Stem("politician"), "politician" );
	deepEqual( Stem("politicians"), "politician" );
	deepEqual( Stem("politics"), "polit" );
	deepEqual( Stem("polking"), "polk" );
	deepEqual( Stem("poll"), "poll" );
	deepEqual( Stem("pollard"), "pollard" );
	deepEqual( Stem("pollewt"), "pollewt" );
	deepEqual( Stem("polling"), "poll" );
	deepEqual( Stem("pollis"), "polli" );
	deepEqual( Stem("pollute"), "pollut" );
	deepEqual( Stem("polluted"), "pollut" );
	deepEqual( Stem("pollutions"), "pollut" );
	deepEqual( Stem("polly"), "polli" );
	deepEqual( Stem("pollys"), "polli" );
	deepEqual( Stem("poltroon"), "poltroon" );
	deepEqual( Stem("polya"), "polya" );
	deepEqual( Stem("polybori"), "polybori" );
	deepEqual( Stem("polyborus"), "polyborus" );
	deepEqual( Stem("polygastrica"), "polygastrica" );
	deepEqual( Stem("polygon"), "polygon" );
	deepEqual( Stem("polynesia"), "polynesia" );
	deepEqual( Stem("polynesian"), "polynesian" );
	deepEqual( Stem("polypi"), "polypi" );
	deepEqual( Stem("polypus"), "polypus" );
	deepEqual( Stem("polysyllable"), "polysyl" );
	deepEqual( Stem("pomaded"), "pomad" );
	deepEqual( Stem("pomarre"), "pomarr" );
	deepEqual( Stem("pomatum"), "pomatum" );
	deepEqual( Stem("pommel"), "pommel" );
	deepEqual( Stem("pomp"), "pomp" );
	deepEqual( Stem("pompey"), "pompey" );
	deepEqual( Stem("pomposities"), "pompos" );
	deepEqual( Stem("pompous"), "pompous" );
	deepEqual( Stem("pompously"), "pompous" );
	deepEqual( Stem("pomps"), "pomp" );
	deepEqual( Stem("poncho"), "poncho" );
	deepEqual( Stem("ponchos"), "poncho" );
	deepEqual( Stem("pond"), "pond" );
	deepEqual( Stem("ponder"), "ponder" );
	deepEqual( Stem("pondered"), "ponder" );
	deepEqual( Stem("pondering"), "ponder" );
	deepEqual( Stem("ponderous"), "ponder" );
	deepEqual( Stem("ponders"), "ponder" );
	deepEqual( Stem("ponds"), "pond" );
	deepEqual( Stem("poniard"), "poniard" );
	deepEqual( Stem("ponies"), "poni" );
	deepEqual( Stem("ponsonby"), "ponsonbi" );
	deepEqual( Stem("pony"), "poni" );
	deepEqual( Stem("pooder"), "pooder" );
	deepEqual( Stem("poodle"), "poodl" );
	deepEqual( Stem("poof"), "poof" );
	deepEqual( Stem("pooh"), "pooh" );
	deepEqual( Stem("pool"), "pool" );
	deepEqual( Stem("pools"), "pool" );
	deepEqual( Stem("poonded"), "poond" );
	deepEqual( Stem("poop"), "poop" );
	deepEqual( Stem("poor"), "poor" );
	deepEqual( Stem("poorer"), "poorer" );
	deepEqual( Stem("poorest"), "poorest" );
	deepEqual( Stem("poorly"), "poor" );
	deepEqual( Stem("poorness"), "poor" );
	deepEqual( Stem("pop"), "pop" );
	deepEqual( Stem("pope"), "pope" );
	deepEqual( Stem("popery"), "poperi" );
	deepEqual( Stem("poplars"), "poplar" );
	deepEqual( Stem("popolorum"), "popolorum" );
	deepEqual( Stem("popped"), "pop" );
	deepEqual( Stem("poppet"), "poppet" );
	deepEqual( Stem("popping"), "pop" );
	deepEqual( Stem("popular"), "popular" );
	deepEqual( Stem("popularity"), "popular" );
	deepEqual( Stem("populated"), "popul" );
	deepEqual( Stem("population"), "popul" );
	deepEqual( Stem("populous"), "popul" );
	deepEqual( Stem("porch"), "porch" );
	deepEqual( Stem("porches"), "porch" );
	deepEqual( Stem("porcupine"), "porcupin" );
	deepEqual( Stem("pore"), "pore" );
	deepEqual( Stem("pored"), "pore" );
	deepEqual( Stem("pores"), "pore" );
	deepEqual( Stem("porfiry"), "porfiri" );
	deepEqual( Stem("poring"), "pore" );
	deepEqual( Stem("pork"), "pork" );
	deepEqual( Stem("porous"), "porous" );
	deepEqual( Stem("porphyries"), "porphyri" );
	deepEqual( Stem("porphyrio"), "porphyrio" );
	deepEqual( Stem("porphyry"), "porphyri" );
	deepEqual( Stem("porpoises"), "porpois" );
	deepEqual( Stem("porridge"), "porridg" );
	deepEqual( Stem("porson"), "porson" );
	deepEqual( Stem("port"), "port" );
	deepEqual( Stem("portable"), "portabl" );
	deepEqual( Stem("portal"), "portal" );
	deepEqual( Stem("portend"), "portend" );
	deepEqual( Stem("portended"), "portend" );
	deepEqual( Stem("portentous"), "portent" );
	deepEqual( Stem("porter"), "porter" );
	deepEqual( Stem("porterage"), "porterag" );
	deepEqual( Stem("porters"), "porter" );
	deepEqual( Stem("portfolio"), "portfolio" );
	deepEqual( Stem("portfolios"), "portfolio" );
	deepEqual( Stem("porth"), "porth" );
	deepEqual( Stem("portico"), "portico" );
	deepEqual( Stem("portillo"), "portillo" );
	deepEqual( Stem("portion"), "portion" );
	deepEqual( Stem("portionless"), "portionless" );
	deepEqual( Stem("portions"), "portion" );
	deepEqual( Stem("portland"), "portland" );
	deepEqual( Stem("portly"), "port" );
	deepEqual( Stem("portmanteau"), "portmanteau" );
	deepEqual( Stem("portmanteaus"), "portmanteaus" );
	deepEqual( Stem("porto"), "porto" );
	deepEqual( Stem("portrait"), "portrait" );
	deepEqual( Stem("portraits"), "portrait" );
	deepEqual( Stem("portrayed"), "portray" );
	deepEqual( Stem("ports"), "port" );
	deepEqual( Stem("portsmouth"), "portsmouth" );
	deepEqual( Stem("portugal"), "portug" );
	deepEqual( Stem("portuguese"), "portugues" );
	deepEqual( Stem("pose"), "pose" );
	deepEqual( Stem("posed"), "pose" );
	deepEqual( Stem("poses"), "pose" );
	deepEqual( Stem("posession"), "posess" );
	deepEqual( Stem("posing"), "pose" );
	deepEqual( Stem("position"), "posit" );
	deepEqual( Stem("positions"), "posit" );
	deepEqual( Stem("positive"), "posit" );
	deepEqual( Stem("positively"), "posit" );
	deepEqual( Stem("positiveness"), "posit" );
	deepEqual( Stem("possess"), "possess" );
	deepEqual( Stem("possesse"), "possess" );
	deepEqual( Stem("possessed"), "possess" );
	deepEqual( Stem("possesses"), "possess" );
	deepEqual( Stem("possessin"), "possessin" );
	deepEqual( Stem("possessing"), "possess" );
	deepEqual( Stem("possession"), "possess" );
	deepEqual( Stem("possessions"), "possess" );
	deepEqual( Stem("possessive"), "possess" );
	deepEqual( Stem("possessor"), "possessor" );
	deepEqual( Stem("possessors"), "possessor" );
	deepEqual( Stem("possibilities"), "possibl" );
	deepEqual( Stem("possibility"), "possibl" );
	deepEqual( Stem("possible"), "possibl" );
	deepEqual( Stem("possibly"), "possibl" );
	deepEqual( Stem("post"), "post" );
	deepEqual( Stem("posta"), "posta" );
	deepEqual( Stem("postage"), "postag" );
	deepEqual( Stem("postas"), "posta" );
	deepEqual( Stem("posted"), "post" );
	deepEqual( Stem("poster"), "poster" );
	deepEqual( Stem("posterior"), "posterior" );
	deepEqual( Stem("posterity"), "poster" );
	deepEqual( Stem("postern"), "postern" );
	deepEqual( Stem("posters"), "poster" );
	deepEqual( Stem("posthouse"), "posthous" );
	deepEqual( Stem("postilion"), "postilion" );
	deepEqual( Stem("posting"), "post" );
	deepEqual( Stem("postman"), "postman" );
	deepEqual( Stem("postmaster"), "postmast" );
	deepEqual( Stem("postmen"), "postmen" );
	deepEqual( Stem("postpone"), "postpon" );
	deepEqual( Stem("postponed"), "postpon" );
	deepEqual( Stem("postponement"), "postpon" );
	deepEqual( Stem("postpones"), "postpon" );
	deepEqual( Stem("postponing"), "postpon" );
	deepEqual( Stem("posts"), "post" );
	deepEqual( Stem("postscript"), "postscript" );
	deepEqual( Stem("posture"), "postur" );
	deepEqual( Stem("postures"), "postur" );
	deepEqual( Stem("posuit"), "posuit" );
	deepEqual( Stem("pot"), "pot" );
	deepEqual( Stem("potanchikov"), "potanchikov" );
	deepEqual( Stem("potash"), "potash" );
	deepEqual( Stem("potations"), "potat" );
	deepEqual( Stem("potato"), "potato" );
	deepEqual( Stem("potatoes"), "potato" );
	deepEqual( Stem("potatoless"), "potatoless" );
	deepEqual( Stem("potboy"), "potboy" );
	deepEqual( Stem("potchinkov"), "potchinkov" );
	deepEqual( Stem("potent"), "potent" );
	deepEqual( Stem("potentate"), "potent" );
	deepEqual( Stem("pothouse"), "pothous" );
	deepEqual( Stem("potion"), "potion" );
	deepEqual( Stem("potosi"), "potosi" );
	deepEqual( Stem("potrero"), "potrero" );
	deepEqual( Stem("pots"), "pot" );
	deepEqual( Stem("potted"), "pot" );
	deepEqual( Stem("potter"), "potter" );
	deepEqual( Stem("potteries"), "potteri" );
	deepEqual( Stem("pottery"), "potteri" );
	deepEqual( Stem("pouce"), "pouc" );
	deepEqual( Stem("pouch"), "pouch" );
	deepEqual( Stem("pouches"), "pouch" );
	deepEqual( Stem("poultry"), "poultri" );
	deepEqual( Stem("pounce"), "pounc" );
	deepEqual( Stem("pounced"), "pounc" );
	deepEqual( Stem("pounces"), "pounc" );
	deepEqual( Stem("pouncing"), "pounc" );
	deepEqual( Stem("pound"), "pound" );
	deepEqual( Stem("pounded"), "pound" );
	deepEqual( Stem("pounder"), "pounder" );
	deepEqual( Stem("pounds"), "pound" );
	deepEqual( Stem("pountney"), "pountney" );
	deepEqual( Stem("pountneys"), "pountney" );
	deepEqual( Stem("pour"), "pour" );
	deepEqual( Stem("poured"), "pour" );
	deepEqual( Stem("pouring"), "pour" );
	deepEqual( Stem("pours"), "pour" );
	deepEqual( Stem("pout"), "pout" );
	deepEqual( Stem("pouted"), "pout" );
	deepEqual( Stem("pouting"), "pout" );
	deepEqual( Stem("poverty"), "poverti" );
	deepEqual( Stem("powder"), "powder" );
	deepEqual( Stem("powdered"), "powder" );
	deepEqual( Stem("powderin"), "powderin" );
	deepEqual( Stem("powe"), "pow" );
	deepEqual( Stem("powell"), "powel" );
	deepEqual( Stem("power"), "power" );
	deepEqual( Stem("powerful"), "power" );
	deepEqual( Stem("powerfully"), "power" );
	deepEqual( Stem("powerless"), "powerless" );
	deepEqual( Stem("powers"), "power" );
	deepEqual( Stem("pox"), "pox" );
	deepEqual( Stem("pp"), "pp" );
	deepEqual( Stem("pr"), "pr" );
	deepEqual( Stem("practicability"), "practic" );
	deepEqual( Stem("practicable"), "practic" );
	deepEqual( Stem("practical"), "practic" );
	deepEqual( Stem("practicality"), "practic" );
	deepEqual( Stem("practically"), "practic" );
	deepEqual( Stem("practice"), "practic" );
	deepEqual( Stem("practices"), "practic" );
	deepEqual( Stem("practise"), "practis" );
	deepEqual( Stem("practised"), "practis" );
	deepEqual( Stem("practiser"), "practis" );
	deepEqual( Stem("practises"), "practis" );
	deepEqual( Stem("practising"), "practis" );
	deepEqual( Stem("practitioner"), "practition" );
	deepEqual( Stem("practitioners"), "practition" );
	deepEqual( Stem("prae"), "prae" );
	deepEqual( Stem("praetorian"), "praetorian" );
	deepEqual( Stem("praia"), "praia" );
	deepEqual( Stem("prairies"), "prairi" );
	deepEqual( Stem("praise"), "prais" );
	deepEqual( Stem("praised"), "prais" );
	deepEqual( Stem("praises"), "prais" );
	deepEqual( Stem("praiseworthy"), "praiseworthi" );
	deepEqual( Stem("praising"), "prais" );
	deepEqual( Stem("prance"), "pranc" );
	deepEqual( Stem("prancing"), "pranc" );
	deepEqual( Stem("pranks"), "prank" );
	deepEqual( Stem("prasant"), "prasant" );
	deepEqual( Stem("praskovya"), "praskovya" );
	deepEqual( Stem("prattlings"), "prattl" );
	deepEqual( Stem("pratty"), "pratti" );
	deepEqual( Stem("prawn"), "prawn" );
	deepEqual( Stem("prawns"), "prawn" );
	deepEqual( Stem("pray"), "pray" );
	deepEqual( Stem("praya"), "praya" );
	deepEqual( Stem("prayed"), "pray" );
	deepEqual( Stem("prayer"), "prayer" );
	deepEqual( Stem("prayers"), "prayer" );
	deepEqual( Stem("prayfession"), "prayfess" );
	deepEqual( Stem("prayin"), "prayin" );
	deepEqual( Stem("praying"), "pray" );
	deepEqual( Stem("prays"), "pray" );
	deepEqual( Stem("pre"), "pre" );
	deepEqual( Stem("preach"), "preach" );
	deepEqual( Stem("preached"), "preach" );
	deepEqual( Stem("preacher"), "preacher" );
	deepEqual( Stem("preachers"), "preacher" );
	deepEqual( Stem("preaching"), "preach" );
	deepEqual( Stem("prebendary"), "prebendari" );
	deepEqual( Stem("precarious"), "precari" );
	deepEqual( Stem("precaution"), "precaut" );
	deepEqual( Stem("precautions"), "precaut" );
	deepEqual( Stem("precede"), "preced" );
	deepEqual( Stem("preceded"), "preced" );
	deepEqual( Stem("precedence"), "preced" );
	deepEqual( Stem("precedent"), "preced" );
	deepEqual( Stem("precedents"), "preced" );
	deepEqual( Stem("preceding"), "preced" );
	deepEqual( Stem("precept"), "precept" );
	deepEqual( Stem("preceptor"), "preceptor" );
	deepEqual( Stem("precepts"), "precept" );
	deepEqual( Stem("precincts"), "precinct" );
	deepEqual( Stem("precious"), "precious" );
	deepEqual( Stem("preciousest"), "preciousest" );
	deepEqual( Stem("precipice"), "precipic" );
	deepEqual( Stem("precipices"), "precipic" );
	deepEqual( Stem("precipitate"), "precipit" );
	deepEqual( Stem("precipitated"), "precipit" );
	deepEqual( Stem("precipitately"), "precipit" );
	deepEqual( Stem("precipitation"), "precipit" );
	deepEqual( Stem("precipitous"), "precipit" );
	deepEqual( Stem("precise"), "precis" );
	deepEqual( Stem("precisely"), "precis" );
	deepEqual( Stem("precision"), "precis" );
	deepEqual( Stem("precluded"), "preclud" );
	deepEqual( Stem("precocious"), "precoci" );
	deepEqual( Stem("precociously"), "precoci" );
	deepEqual( Stem("preconceived"), "preconceiv" );
	deepEqual( Stem("preconcerted"), "preconcert" );
	deepEqual( Stem("predecessor"), "predecessor" );
	deepEqual( Stem("predecessors"), "predecessor" );
	deepEqual( Stem("predestined"), "predestin" );
	deepEqual( Stem("predicament"), "predica" );
	deepEqual( Stem("predicaments"), "predica" );
	deepEqual( Stem("predict"), "predict" );
	deepEqual( Stem("predicted"), "predict" );
	deepEqual( Stem("predicting"), "predict" );
	deepEqual( Stem("prediction"), "predict" );
	deepEqual( Stem("predictions"), "predict" );
	deepEqual( Stem("predilections"), "predilect" );
	deepEqual( Stem("predisposition"), "predisposit" );
	deepEqual( Stem("predominant"), "predomin" );
	deepEqual( Stem("predominate"), "predomin" );
	deepEqual( Stem("predominated"), "predomin" );
	deepEqual( Stem("preening"), "preen" );
	deepEqual( Stem("preface"), "prefac" );
	deepEqual( Stem("prefacing"), "prefac" );
	deepEqual( Stem("prefatory"), "prefatori" );
	deepEqual( Stem("prefer"), "prefer" );
	deepEqual( Stem("preferable"), "prefer" );
	deepEqual( Stem("preference"), "prefer" );
	deepEqual( Stem("preferer"), "prefer" );
	deepEqual( Stem("preferment"), "prefer" );
	deepEqual( Stem("preferred"), "prefer" );
	deepEqual( Stem("preferring"), "prefer" );
	deepEqual( Stem("prefers"), "prefer" );
	deepEqual( Stem("prefixed"), "prefix" );
	deepEqual( Stem("prehensile"), "prehensil" );
	deepEqual( Stem("prehensilis"), "prehensili" );
	deepEqual( Stem("prejudge"), "prejudg" );
	deepEqual( Stem("prejudice"), "prejudic" );
	deepEqual( Stem("prejudiced"), "prejud" );
	deepEqual( Stem("prejudices"), "prejudic" );
	deepEqual( Stem("prejudicial"), "prejudici" );
	deepEqual( Stem("preliminaries"), "preliminari" );
	deepEqual( Stem("preliminary"), "preliminari" );
	deepEqual( Stem("prelude"), "prelud" );
	deepEqual( Stem("premature"), "prematur" );
	deepEqual( Stem("prematurely"), "prematur" );
	deepEqual( Stem("premeditated"), "premedit" );
	deepEqual( Stem("premeditation"), "premedit" );
	deepEqual( Stem("premier"), "premier" );
	deepEqual( Stem("premiers"), "premier" );
	deepEqual( Stem("premiership"), "premiership" );
	deepEqual( Stem("premise"), "premis" );
	deepEqual( Stem("premised"), "premis" );
	deepEqual( Stem("premises"), "premis" );
	deepEqual( Stem("premium"), "premium" );
	deepEqual( Stem("prentice"), "prentic" );
	deepEqual( Stem("prentices"), "prentic" );
	deepEqual( Stem("preoccupation"), "preoccup" );
	deepEqual( Stem("preoccupations"), "preoccup" );
	deepEqual( Stem("preoccupied"), "preoccupi" );
	deepEqual( Stem("preordained"), "preordain" );
	deepEqual( Stem("preparation"), "prepar" );
	deepEqual( Stem("preparations"), "prepar" );
	deepEqual( Stem("preparatory"), "preparatori" );
	deepEqual( Stem("prepare"), "prepar" );
	deepEqual( Stem("prepared"), "prepar" );
	deepEqual( Stem("prepares"), "prepar" );
	deepEqual( Stem("preparing"), "prepar" );
	deepEqual( Stem("prepense"), "prepens" );
	deepEqual( Stem("preponderance"), "preponder" );
	deepEqual( Stem("preponderated"), "preponder" );
	deepEqual( Stem("preponderates"), "preponder" );
	deepEqual( Stem("preponderating"), "preponder" );
	deepEqual( Stem("prepossessed"), "prepossess" );
	deepEqual( Stem("prepossessing"), "prepossess" );
	deepEqual( Stem("prepossession"), "prepossess" );
	deepEqual( Stem("prepossessions"), "prepossess" );
	deepEqual( Stem("preposterous"), "preposter" );
	deepEqual( Stem("presbyterian"), "presbyterian" );
	deepEqual( Stem("prescribe"), "prescrib" );
	deepEqual( Stem("prescribed"), "prescrib" );
	deepEqual( Stem("prescription"), "prescript" );
	deepEqual( Stem("prescriptive"), "prescript" );
	deepEqual( Stem("presence"), "presenc" );
	deepEqual( Stem("presenfty"), "presenfti" );
	deepEqual( Stem("present"), "present" );
	deepEqual( Stem("presentable"), "present" );
	deepEqual( Stem("presentation"), "present" );
	deepEqual( Stem("presented"), "present" );
	deepEqual( Stem("presentime"), "presentim" );
	deepEqual( Stem("presentiment"), "presenti" );
	deepEqual( Stem("presentiments"), "presenti" );
	deepEqual( Stem("presenting"), "present" );
	deepEqual( Stem("presently"), "present" );
	deepEqual( Stem("presentments"), "present" );
	deepEqual( Stem("presents"), "present" );
	deepEqual( Stem("preservation"), "preserv" );
	deepEqual( Stem("preserve"), "preserv" );
	deepEqual( Stem("preserved"), "preserv" );
	deepEqual( Stem("preserver"), "preserv" );
	deepEqual( Stem("preserves"), "preserv" );
	deepEqual( Stem("preserving"), "preserv" );
	deepEqual( Stem("preside"), "presid" );
	deepEqual( Stem("presided"), "presid" );
	deepEqual( Stem("presidency"), "presid" );
	deepEqual( Stem("president"), "presid" );
	deepEqual( Stem("presidents"), "presid" );
	deepEqual( Stem("presidentship"), "presidentship" );
	deepEqual( Stem("presiding"), "presid" );
	deepEqual( Stem("press"), "press" );
	deepEqual( Stem("pressed"), "press" );
	deepEqual( Stem("presses"), "press" );
	deepEqual( Stem("pressing"), "press" );
	deepEqual( Stem("pressingly"), "press" );
	deepEqual( Stem("pressure"), "pressur" );
	deepEqual( Stem("prestige"), "prestig" );
	deepEqual( Stem("presumably"), "presum" );
	deepEqual( Stem("presume"), "presum" );
	deepEqual( Stem("presumed"), "presum" );
	deepEqual( Stem("presumes"), "presum" );
	deepEqual( Stem("presuming"), "presum" );
	deepEqual( Stem("presumption"), "presumpt" );
	deepEqual( Stem("presumptuous"), "presumptu" );
	deepEqual( Stem("presumptuously"), "presumptu" );
	deepEqual( Stem("presupposes"), "presuppos" );
	deepEqual( Stem("pretence"), "pretenc" );
	deepEqual( Stem("pretences"), "pretenc" );
	deepEqual( Stem("pretend"), "pretend" );
	deepEqual( Stem("pretended"), "pretend" );
	deepEqual( Stem("pretending"), "pretend" );
	deepEqual( Stem("pretends"), "pretend" );
	deepEqual( Stem("pretension"), "pretens" );
	deepEqual( Stem("pretensions"), "pretens" );
	deepEqual( Stem("pretentious"), "pretenti" );
	deepEqual( Stem("preternatural"), "preternatur" );
	deepEqual( Stem("pretext"), "pretext" );
	deepEqual( Stem("pretexts"), "pretext" );
	deepEqual( Stem("prett"), "prett" );
	deepEqual( Stem("prettier"), "prettier" );
	deepEqual( Stem("prettiest"), "prettiest" );
	deepEqual( Stem("prettily"), "prettili" );
	deepEqual( Stem("prettiness"), "pretti" );
	deepEqual( Stem("prettinesses"), "pretti" );
	deepEqual( Stem("pretty"), "pretti" );
	deepEqual( Stem("prevail"), "prevail" );
	deepEqual( Stem("prevailed"), "prevail" );
	deepEqual( Stem("prevailing"), "prevail" );
	deepEqual( Stem("prevails"), "prevail" );
	deepEqual( Stem("prevalent"), "preval" );
	deepEqual( Stem("prevaricate"), "prevar" );
	deepEqual( Stem("prevent"), "prevent" );
	deepEqual( Stem("prevented"), "prevent" );
	deepEqual( Stem("preventing"), "prevent" );
	deepEqual( Stem("prevents"), "prevent" );
	deepEqual( Stem("previous"), "previous" );
	deepEqual( Stem("previously"), "previous" );
	deepEqual( Stem("prevost"), "prevost" );
	deepEqual( Stem("prey"), "prey" );
	deepEqual( Stem("preyed"), "prey" );
	deepEqual( Stem("preying"), "prey" );
	deepEqual( Stem("preys"), "prey" );
	deepEqual( Stem("price"), "price" );
	deepEqual( Stem("priceless"), "priceless" );
	deepEqual( Stem("prices"), "price" );
	deepEqual( Stem("prick"), "prick" );
	deepEqual( Stem("pricked"), "prick" );
	deepEqual( Stem("pricking"), "prick" );
	deepEqual( Stem("prickles"), "prickl" );
	deepEqual( Stem("prickly"), "prick" );
	deepEqual( Stem("pricks"), "prick" );
	deepEqual( Stem("pride"), "pride" );
	deepEqual( Stem("pries"), "pri" );
	deepEqual( Stem("priest"), "priest" );
	deepEqual( Stem("priesthood"), "priesthood" );
	deepEqual( Stem("priestly"), "priest" );
	deepEqual( Stem("priests"), "priest" );
	deepEqual( Stem("prig"), "prig" );
	deepEqual( Stem("prilukov"), "prilukov" );
	deepEqual( Stem("prim"), "prim" );
	deepEqual( Stem("primarily"), "primarili" );
	deepEqual( Stem("primary"), "primari" );
	deepEqual( Stem("prime"), "prime" );
	deepEqual( Stem("primer"), "primer" );
	deepEqual( Stem("primera"), "primera" );
	deepEqual( Stem("primeval"), "primev" );
	deepEqual( Stem("primitive"), "primit" );
	deepEqual( Stem("primogeniture"), "primogenitur" );
	deepEqual( Stem("primrose"), "primros" );
	deepEqual( Stem("prince"), "princ" );
	deepEqual( Stem("princely"), "princ" );
	deepEqual( Stem("princes"), "princ" );
	deepEqual( Stem("princess"), "princess" );
	deepEqual( Stem("princesses"), "princess" );
	deepEqual( Stem("principal"), "princip" );
	deepEqual( Stem("principally"), "princip" );
	deepEqual( Stem("principals"), "princip" );
	deepEqual( Stem("principle"), "principl" );
	deepEqual( Stem("principles"), "principl" );
	deepEqual( Stem("prinking"), "prink" );
	deepEqual( Stem("print"), "print" );
	deepEqual( Stem("printed"), "print" );
	deepEqual( Stem("printers"), "printer" );
	deepEqual( Stem("printing"), "print" );
	deepEqual( Stem("prints"), "print" );
	deepEqual( Stem("prionotus"), "prionotus" );
	deepEqual( Stem("prior"), "prior" );
	deepEqual( Stem("prioress"), "prioress" );
	deepEqual( Stem("priority"), "prioriti" );
	deepEqual( Stem("priory"), "priori" );
	deepEqual( Stem("priscilla"), "priscilla" );
	deepEqual( Stem("prismatic"), "prismat" );
	deepEqual( Stem("prison"), "prison" );
	deepEqual( Stem("prisoner"), "prison" );
	deepEqual( Stem("prisoners"), "prison" );
	deepEqual( Stem("prisons"), "prison" );
	deepEqual( Stem("pritchard"), "pritchard" );
	deepEqual( Stem("pritchards"), "pritchard" );
	deepEqual( Stem("privacy"), "privaci" );
	deepEqual( Stem("private"), "privat" );
	deepEqual( Stem("privateer"), "privat" );
	deepEqual( Stem("privately"), "privat" );
	deepEqual( Stem("privation"), "privat" );
	deepEqual( Stem("privations"), "privat" );
	deepEqual( Stem("privilege"), "privileg" );
	deepEqual( Stem("privileged"), "privileg" );
	deepEqual( Stem("privileges"), "privileg" );
	deepEqual( Stem("privy"), "privi" );
	deepEqual( Stem("prize"), "prize" );
	deepEqual( Stem("prized"), "prize" );
	deepEqual( Stem("prizes"), "prize" );
	deepEqual( Stem("pro"), "pro" );
	deepEqual( Stem("probabilities"), "probabl" );
	deepEqual( Stem("probability"), "probabl" );
	deepEqual( Stem("probable"), "probabl" );
	deepEqual( Stem("probably"), "probabl" );
	deepEqual( Stem("probation"), "probat" );
	deepEqual( Stem("probing"), "probe" );
	deepEqual( Stem("problem"), "problem" );
	deepEqual( Stem("problematical"), "problemat" );
	deepEqual( Stem("problems"), "problem" );
	deepEqual( Stem("proboscis"), "probosci" );
	deepEqual( Stem("procedure"), "procedur" );
	deepEqual( Stem("proceed"), "proceed" );
	deepEqual( Stem("proceeded"), "proceed" );
	deepEqual( Stem("proceeding"), "proceed" );
	deepEqual( Stem("proceedings"), "proceed" );
	deepEqual( Stem("proceeds"), "proceed" );
	deepEqual( Stem("procellaria"), "procellaria" );
	deepEqual( Stem("process"), "process" );
	deepEqual( Stem("processes"), "process" );
	deepEqual( Stem("procession"), "process" );
	deepEqual( Stem("proclaim"), "proclaim" );
	deepEqual( Stem("proclaimed"), "proclaim" );
	deepEqual( Stem("proclaiming"), "proclaim" );
	deepEqual( Stem("proclaims"), "proclaim" );
	deepEqual( Stem("proclamation"), "proclam" );
	deepEqual( Stem("procrastinates"), "procrastin" );
	deepEqual( Stem("procrastination"), "procrastin" );
	deepEqual( Stem("proctotretus"), "proctotretus" );
	deepEqual( Stem("procurable"), "procur" );
	deepEqual( Stem("procure"), "procur" );
	deepEqual( Stem("procured"), "procur" );
	deepEqual( Stem("procuring"), "procur" );
	deepEqual( Stem("prodigal"), "prodig" );
	deepEqual( Stem("prodigality"), "prodig" );
	deepEqual( Stem("prodigieux"), "prodigieux" );
	deepEqual( Stem("prodigious"), "prodigi" );
	deepEqual( Stem("prodigiously"), "prodigi" );
	deepEqual( Stem("prodigy"), "prodigi" );
	deepEqual( Stem("produce"), "produc" );
	deepEqual( Stem("produced"), "produc" );
	deepEqual( Stem("produces"), "produc" );
	deepEqual( Stem("producible"), "produc" );
	deepEqual( Stem("producing"), "produc" );
	deepEqual( Stem("product"), "product" );
	deepEqual( Stem("production"), "product" );
	deepEqual( Stem("productions"), "product" );
	deepEqual( Stem("productive"), "product" );
	deepEqual( Stem("productiveness"), "product" );
	deepEqual( Stem("products"), "product" );
	deepEqual( Stem("profanation"), "profan" );
	deepEqual( Stem("profane"), "profan" );
	deepEqual( Stem("profanely"), "profan" );
	deepEqual( Stem("profaning"), "profan" );
	deepEqual( Stem("profess"), "profess" );
	deepEqual( Stem("professed"), "profess" );
	deepEqual( Stem("professes"), "profess" );
	deepEqual( Stem("professing"), "profess" );
	deepEqual( Stem("profession"), "profess" );
	deepEqual( Stem("professional"), "profession" );
	deepEqual( Stem("professionally"), "profession" );
	deepEqual( Stem("professionals"), "profession" );
	deepEqual( Stem("professionaly"), "professionali" );
	deepEqual( Stem("professions"), "profess" );
	deepEqual( Stem("professor"), "professor" );
	deepEqual( Stem("professors"), "professor" );
	deepEqual( Stem("professorship"), "professorship" );
	deepEqual( Stem("proffer"), "proffer" );
	deepEqual( Stem("proffered"), "proffer" );
	deepEqual( Stem("proficiency"), "profici" );
	deepEqual( Stem("proficient"), "profici" );
	deepEqual( Stem("profile"), "profil" );
	deepEqual( Stem("profit"), "profit" );
	deepEqual( Stem("profitable"), "profit" );
	deepEqual( Stem("profited"), "profit" );
	deepEqual( Stem("profiting"), "profit" );
	deepEqual( Stem("profitless"), "profitless" );
	deepEqual( Stem("profits"), "profit" );
	deepEqual( Stem("profligacy"), "profligaci" );
	deepEqual( Stem("profligate"), "proflig" );
	deepEqual( Stem("profligately"), "proflig" );
	deepEqual( Stem("profligates"), "proflig" );
	deepEqual( Stem("profound"), "profound" );
	deepEqual( Stem("profoundest"), "profoundest" );
	deepEqual( Stem("profoundly"), "profound" );
	deepEqual( Stem("profundity"), "profund" );
	deepEqual( Stem("profuse"), "profus" );
	deepEqual( Stem("profusely"), "profus" );
	deepEqual( Stem("profusion"), "profus" );
	deepEqual( Stem("progenitive"), "progenit" );
	deepEqual( Stem("progenitors"), "progenitor" );
	deepEqual( Stem("progne"), "progn" );
	deepEqual( Stem("prognostications"), "prognost" );
	deepEqual( Stem("programme"), "programm" );
	deepEqual( Stem("progress"), "progress" );
	deepEqual( Stem("progressed"), "progress" );
	deepEqual( Stem("progressing"), "progress" );
	deepEqual( Stem("progression"), "progress" );
	deepEqual( Stem("progressive"), "progress" );
	deepEqual( Stem("progressively"), "progress" );
	deepEqual( Stem("progressives"), "progress" );
	deepEqual( Stem("prohibited"), "prohibit" );
	deepEqual( Stem("prohibiting"), "prohibit" );
	deepEqual( Stem("prohibition"), "prohibit" );
	deepEqual( Stem("project"), "project" );
	deepEqual( Stem("projected"), "project" );
	deepEqual( Stem("projecting"), "project" );
	deepEqual( Stem("projection"), "project" );
	deepEqual( Stem("projector"), "projector" );
	deepEqual( Stem("projects"), "project" );
	deepEqual( Stem("prokofitch"), "prokofitch" );
	deepEqual( Stem("prolific"), "prolif" );
	deepEqual( Stem("prolix"), "prolix" );
	deepEqual( Stem("prolixities"), "prolix" );
	deepEqual( Stem("prolixity"), "prolix" );
	deepEqual( Stem("prolong"), "prolong" );
	deepEqual( Stem("prolongation"), "prolong" );
	deepEqual( Stem("prolonged"), "prolong" );
	deepEqual( Stem("prolonging"), "prolong" );
	deepEqual( Stem("promenade"), "promenad" );
	deepEqual( Stem("promethean"), "promethean" );
	deepEqual( Stem("prominent"), "promin" );
	deepEqual( Stem("prominently"), "promin" );
	deepEqual( Stem("promise"), "promis" );
	deepEqual( Stem("promised"), "promis" );
	deepEqual( Stem("promises"), "promis" );
	deepEqual( Stem("promisin"), "promisin" );
	deepEqual( Stem("promising"), "promis" );
	deepEqual( Stem("promissory"), "promissori" );
	deepEqual( Stem("promontories"), "promontori" );
	deepEqual( Stem("promontory"), "promontori" );
	deepEqual( Stem("promote"), "promot" );
	deepEqual( Stem("promoted"), "promot" );
	deepEqual( Stem("promoter"), "promot" );
	deepEqual( Stem("promotes"), "promot" );
	deepEqual( Stem("promoting"), "promot" );
	deepEqual( Stem("promotion"), "promot" );
	deepEqual( Stem("prompt"), "prompt" );
	deepEqual( Stem("prompted"), "prompt" );
	deepEqual( Stem("prompter"), "prompter" );
	deepEqual( Stem("prompters"), "prompter" );
	deepEqual( Stem("prompting"), "prompt" );
	deepEqual( Stem("promptitude"), "promptitud" );
	deepEqual( Stem("promptly"), "prompt" );
	deepEqual( Stem("promptness"), "prompt" );
	deepEqual( Stem("prompts"), "prompt" );
	deepEqual( Stem("prone"), "prone" );
	deepEqual( Stem("proneness"), "prone" );
	deepEqual( Stem("pronoun"), "pronoun" );
	deepEqual( Stem("pronounce"), "pronounc" );
	deepEqual( Stem("pronounced"), "pronounc" );
	deepEqual( Stem("pronounces"), "pronounc" );
	deepEqual( Stem("pronouncing"), "pronounc" );
	deepEqual( Stem("proodest"), "proodest" );
	deepEqual( Stem("proof"), "proof" );
	deepEqual( Stem("proofs"), "proof" );
	deepEqual( Stem("prop"), "prop" );
	deepEqual( Stem("propaganda"), "propaganda" );
	deepEqual( Stem("propagated"), "propag" );
	deepEqual( Stem("propagates"), "propag" );
	deepEqual( Stem("propagation"), "propag" );
	deepEqual( Stem("propensity"), "propens" );
	deepEqual( Stem("proper"), "proper" );
	deepEqual( Stem("properly"), "proper" );
	deepEqual( Stem("properties"), "properti" );
	deepEqual( Stem("property"), "properti" );
	deepEqual( Stem("propertyless"), "propertyless" );
	deepEqual( Stem("prophecy"), "propheci" );
	deepEqual( Stem("prophesied"), "prophesi" );
	deepEqual( Stem("prophesying"), "prophesi" );
	deepEqual( Stem("prophet"), "prophet" );
	deepEqual( Stem("prophetic"), "prophet" );
	deepEqual( Stem("prophetical"), "prophet" );
	deepEqual( Stem("prophetically"), "prophet" );
	deepEqual( Stem("propitiate"), "propiti" );
	deepEqual( Stem("propitiated"), "propiti" );
	deepEqual( Stem("propitiation"), "propiti" );
	deepEqual( Stem("propitiatory"), "propitiatori" );
	deepEqual( Stem("propitious"), "propiti" );
	deepEqual( Stem("proportion"), "proport" );
	deepEqual( Stem("proportionably"), "proportion" );
	deepEqual( Stem("proportional"), "proport" );
	deepEqual( Stem("proportionally"), "proport" );
	deepEqual( Stem("proportionate"), "proportion" );
	deepEqual( Stem("proportionately"), "proportion" );
	deepEqual( Stem("proportioned"), "proport" );
	deepEqual( Stem("proportions"), "proport" );
	deepEqual( Stem("propos"), "propo" );
	deepEqual( Stem("proposal"), "propos" );
	deepEqual( Stem("proposals"), "propos" );
	deepEqual( Stem("propose"), "propos" );
	deepEqual( Stem("proposed"), "propos" );
	deepEqual( Stem("proposes"), "propos" );
	deepEqual( Stem("proposing"), "propos" );
	deepEqual( Stem("proposition"), "proposit" );
	deepEqual( Stem("propositions"), "proposit" );
	deepEqual( Stem("propound"), "propound" );
	deepEqual( Stem("propounded"), "propound" );
	deepEqual( Stem("propounding"), "propound" );
	deepEqual( Stem("propoundlng"), "propoundlng" );
	deepEqual( Stem("propounds"), "propound" );
	deepEqual( Stem("propped"), "prop" );
	deepEqual( Stem("propping"), "prop" );
	deepEqual( Stem("proprieties"), "proprieti" );
	deepEqual( Stem("proprietor"), "proprietor" );
	deepEqual( Stem("proprietorship"), "proprietorship" );
	deepEqual( Stem("proprietress"), "proprietress" );
	deepEqual( Stem("propriety"), "proprieti" );
	deepEqual( Stem("prorogation"), "prorog" );
	deepEqual( Stem("prosaic"), "prosaic" );
	deepEqual( Stem("proscenium"), "proscenium" );
	deepEqual( Stem("proscribed"), "proscrib" );
	deepEqual( Stem("prose"), "prose" );
	deepEqual( Stem("prosecute"), "prosecut" );
	deepEqual( Stem("prosecuted"), "prosecut" );
	deepEqual( Stem("prosecution"), "prosecut" );
	deepEqual( Stem("prosecutor"), "prosecutor" );
	deepEqual( Stem("prosing"), "prose" );
	deepEqual( Stem("prospect"), "prospect" );
	deepEqual( Stem("prospective"), "prospect" );
	deepEqual( Stem("prospects"), "prospect" );
	deepEqual( Stem("prospectus"), "prospectus" );
	deepEqual( Stem("prosper"), "prosper" );
	deepEqual( Stem("prospered"), "prosper" );
	deepEqual( Stem("prospering"), "prosper" );
	deepEqual( Stem("prosperity"), "prosper" );
	deepEqual( Stem("prosperous"), "prosper" );
	deepEqual( Stem("prosperously"), "prosper" );
	deepEqual( Stem("prostrate"), "prostrat" );
	deepEqual( Stem("prostrated"), "prostrat" );
	deepEqual( Stem("prostration"), "prostrat" );
	deepEqual( Stem("prosy"), "prosi" );
	deepEqual( Stem("protect"), "protect" );
	deepEqual( Stem("protected"), "protect" );
	deepEqual( Stem("protecting"), "protect" );
	deepEqual( Stem("protection"), "protect" );
	deepEqual( Stem("protective"), "protect" );
	deepEqual( Stem("protector"), "protector" );
	deepEqual( Stem("protectors"), "protector" );
	deepEqual( Stem("protegee"), "protege" );
	deepEqual( Stem("proteges"), "proteg" );
	deepEqual( Stem("protest"), "protest" );
	deepEqual( Stem("protestant"), "protest" );
	deepEqual( Stem("protestantism"), "protestant" );
	deepEqual( Stem("protestation"), "protest" );
	deepEqual( Stem("protestations"), "protest" );
	deepEqual( Stem("protested"), "protest" );
	deepEqual( Stem("protesting"), "protest" );
	deepEqual( Stem("protests"), "protest" );
	deepEqual( Stem("proteus"), "proteus" );
	deepEqual( Stem("protococcus"), "protococcus" );
	deepEqual( Stem("prototype"), "prototyp" );
	deepEqual( Stem("prototypes"), "prototyp" );
	deepEqual( Stem("protract"), "protract" );
	deepEqual( Stem("protracted"), "protract" );
	deepEqual( Stem("protrude"), "protrud" );
	deepEqual( Stem("protruded"), "protrud" );
	deepEqual( Stem("protrudes"), "protrud" );
	deepEqual( Stem("protruding"), "protrud" );
	deepEqual( Stem("proud"), "proud" );
	deepEqual( Stem("prouder"), "prouder" );
	deepEqual( Stem("proudest"), "proudest" );
	deepEqual( Stem("proudhon"), "proudhon" );
	deepEqual( Stem("proudly"), "proud" );
	deepEqual( Stem("prov"), "prov" );
	deepEqual( Stem("prove"), "prove" );
	deepEqual( Stem("proved"), "prove" );
	deepEqual( Stem("proverb"), "proverb" );
	deepEqual( Stem("proves"), "prove" );
	deepEqual( Stem("provide"), "provid" );
	deepEqual( Stem("provided"), "provid" );
	deepEqual( Stem("providence"), "provid" );
	deepEqual( Stem("providential"), "providenti" );
	deepEqual( Stem("providentially"), "providenti" );
	deepEqual( Stem("provider"), "provid" );
	deepEqual( Stem("provides"), "provid" );
	deepEqual( Stem("providing"), "provid" );
	deepEqual( Stem("province"), "provinc" );
	deepEqual( Stem("provinces"), "provinc" );
	deepEqual( Stem("provincial"), "provinci" );
	deepEqual( Stem("proving"), "prove" );
	deepEqual( Stem("provision"), "provis" );
	deepEqual( Stem("provisional"), "provision" );
	deepEqual( Stem("provisions"), "provis" );
	deepEqual( Stem("proviso"), "proviso" );
	deepEqual( Stem("provocation"), "provoc" );
	deepEqual( Stem("provocative"), "provoc" );
	deepEqual( Stem("provoke"), "provok" );
	deepEqual( Stem("provoked"), "provok" );
	deepEqual( Stem("provokes"), "provok" );
	deepEqual( Stem("provoking"), "provok" );
	deepEqual( Stem("provokingly"), "provok" );
	deepEqual( Stem("prow"), "prow" );
	deepEqual( Stem("prowess"), "prowess" );
	deepEqual( Stem("prowl"), "prowl" );
	deepEqual( Stem("prowled"), "prowl" );
	deepEqual( Stem("prowling"), "prowl" );
	deepEqual( Stem("proximity"), "proxim" );
	deepEqual( Stem("proxy"), "proxi" );
	deepEqual( Stem("proxying"), "proxi" );
	deepEqual( Stem("prudence"), "prudenc" );
	deepEqual( Stem("prudent"), "prudent" );
	deepEqual( Stem("prudently"), "prudent" );
	deepEqual( Stem("prudery"), "pruderi" );
	deepEqual( Stem("prudish"), "prudish" );
	deepEqual( Stem("pruning"), "prune" );
	deepEqual( Stem("prunings"), "prune" );
	deepEqual( Stem("prurient"), "prurient" );
	deepEqual( Stem("prussian"), "prussian" );
	deepEqual( Stem("prussians"), "prussian" );
	deepEqual( Stem("prussic"), "prussic" );
	deepEqual( Stem("pry"), "pri" );
	deepEqual( Stem("psalm"), "psalm" );
	deepEqual( Stem("psalms"), "psalm" );
	deepEqual( Stem("psammophis"), "psammophi" );
	deepEqual( Stem("pselaphus"), "pselaphus" );
	deepEqual( Stem("pseudo"), "pseudo" );
	deepEqual( Stem("psha"), "psha" );
	deepEqual( Stem("pshaw"), "pshaw" );
	deepEqual( Stem("psyche"), "psych" );
	deepEqual( Stem("psychological"), "psycholog" );
	deepEqual( Stem("psychologically"), "psycholog" );
	deepEqual( Stem("psychologist"), "psychologist" );
	deepEqual( Stem("psychology"), "psycholog" );
	deepEqual( Stem("pt"), "pt" );
	deepEqual( Stem("ptarmigans"), "ptarmigan" );
	deepEqual( Stem("pterophorus"), "pterophorus" );
	deepEqual( Stem("pteropoda"), "pteropoda" );
	deepEqual( Stem("pteroptochos"), "pteroptocho" );
	deepEqual( Stem("public"), "public" );
	deepEqual( Stem("publicans"), "publican" );
	deepEqual( Stem("publication"), "public" );
	deepEqual( Stem("publications"), "public" );
	deepEqual( Stem("publicity"), "public" );
	deepEqual( Stem("publicly"), "public" );
	deepEqual( Stem("publish"), "publish" );
	deepEqual( Stem("published"), "publish" );
	deepEqual( Stem("publisher"), "publish" );
	deepEqual( Stem("publishers"), "publish" );
	deepEqual( Stem("publishing"), "publish" );
	deepEqual( Stem("puckered"), "pucker" );
	deepEqual( Stem("puddick"), "puddick" );
	deepEqual( Stem("pudding"), "pud" );
	deepEqual( Stem("puddings"), "pud" );
	deepEqual( Stem("puddle"), "puddl" );
	deepEqual( Stem("puddles"), "puddl" );
	deepEqual( Stem("puente"), "puent" );
	deepEqual( Stem("puff"), "puff" );
	deepEqual( Stem("puffed"), "puf" );
	deepEqual( Stem("puffing"), "puf" );
	deepEqual( Stem("puffinus"), "puffinus" );
	deepEqual( Stem("puffs"), "puff" );
	deepEqual( Stem("puffy"), "puffi" );
	deepEqual( Stem("pug"), "pug" );
	deepEqual( Stem("pugilistic"), "pugilist" );
	deepEqual( Stem("pugnacious"), "pugnaci" );
	deepEqual( Stem("pugnacity"), "pugnac" );
	deepEqual( Stem("pugstyles"), "pugstyl" );
	deepEqual( Stem("pul"), "pul" );
	deepEqual( Stem("pulcheria"), "pulcheria" );
	deepEqual( Stem("pull"), "pull" );
	deepEqual( Stem("pulled"), "pull" );
	deepEqual( Stem("pulling"), "pull" );
	deepEqual( Stem("pulls"), "pull" );
	deepEqual( Stem("pulp"), "pulp" );
	deepEqual( Stem("pulperia"), "pulperia" );
	deepEqual( Stem("pulpit"), "pulpit" );
	deepEqual( Stem("pulpy"), "pulpi" );
	deepEqual( Stem("pulse"), "puls" );
	deepEqual( Stem("pulses"), "puls" );
	deepEqual( Stem("pum"), "pum" );
	deepEqual( Stem("puma"), "puma" );
	deepEqual( Stem("pumas"), "puma" );
	deepEqual( Stem("pumice"), "pumic" );
	deepEqual( Stem("pumiceous"), "pumic" );
	deepEqual( Stem("pumila"), "pumila" );
	deepEqual( Stem("pummelled"), "pummel" );
	deepEqual( Stem("pummelling"), "pummel" );
	deepEqual( Stem("pump"), "pump" );
	deepEqual( Stem("pumping"), "pump" );
	deepEqual( Stem("pumpkin"), "pumpkin" );
	deepEqual( Stem("pumps"), "pump" );
	deepEqual( Stem("pun"), "pun" );
	deepEqual( Stem("puna"), "puna" );
	deepEqual( Stem("punch"), "punch" );
	deepEqual( Stem("punched"), "punch" );
	deepEqual( Stem("punches"), "punch" );
	deepEqual( Stem("punchinello"), "punchinello" );
	deepEqual( Stem("punching"), "punch" );
	deepEqual( Stem("punctatissima"), "punctatissima" );
	deepEqual( Stem("punctilious"), "punctili" );
	deepEqual( Stem("punctiliousness"), "punctili" );
	deepEqual( Stem("punctual"), "punctual" );
	deepEqual( Stem("punctuality"), "punctual" );
	deepEqual( Stem("punctually"), "punctual" );
	deepEqual( Stem("punctuation"), "punctuat" );
	deepEqual( Stem("puncture"), "punctur" );
	deepEqual( Stem("punctured"), "punctur" );
	deepEqual( Stem("pundit"), "pundit" );
	deepEqual( Stem("pundits"), "pundit" );
	deepEqual( Stem("punish"), "punish" );
	deepEqual( Stem("punished"), "punish" );
	deepEqual( Stem("punishing"), "punish" );
	deepEqual( Stem("punishment"), "punish" );
	deepEqual( Stem("punt"), "punt" );
	deepEqual( Stem("punta"), "punta" );
	deepEqual( Stem("puny"), "puni" );
	deepEqual( Stem("pupil"), "pupil" );
	deepEqual( Stem("pupils"), "pupil" );
	deepEqual( Stem("pupker"), "pupker" );
	deepEqual( Stem("puppet"), "puppet" );
	deepEqual( Stem("puppies"), "puppi" );
	deepEqual( Stem("puppy"), "puppi" );
	deepEqual( Stem("puppyism"), "puppyism" );
	deepEqual( Stem("purblind"), "purblind" );
	deepEqual( Stem("purchas"), "purcha" );
	deepEqual( Stem("purchase"), "purchas" );
	deepEqual( Stem("purchased"), "purchas" );
	deepEqual( Stem("purchaser"), "purchas" );
	deepEqual( Stem("purchases"), "purchas" );
	deepEqual( Stem("purchasing"), "purchas" );
	deepEqual( Stem("pure"), "pure" );
	deepEqual( Stem("purechurch"), "purechurch" );
	deepEqual( Stem("purely"), "pure" );
	deepEqual( Stem("purer"), "purer" );
	deepEqual( Stem("purest"), "purest" );
	deepEqual( Stem("purge"), "purg" );
	deepEqual( Stem("purified"), "purifi" );
	deepEqual( Stem("purify"), "purifi" );
	deepEqual( Stem("purity"), "puriti" );
	deepEqual( Stem("purple"), "purpl" );
	deepEqual( Stem("purplish"), "purplish" );
	deepEqual( Stem("purport"), "purport" );
	deepEqual( Stem("purporting"), "purport" );
	deepEqual( Stem("purpose"), "purpos" );
	deepEqual( Stem("purposed"), "purpos" );
	deepEqual( Stem("purposeless"), "purposeless" );
	deepEqual( Stem("purposely"), "purpos" );
	deepEqual( Stem("purposes"), "purpos" );
	deepEqual( Stem("purpura"), "purpura" );
	deepEqual( Stem("purpurea"), "purpurea" );
	deepEqual( Stem("purr"), "purr" );
	deepEqual( Stem("purring"), "pur" );
	deepEqual( Stem("purse"), "purs" );
	deepEqual( Stem("pursed"), "purs" );
	deepEqual( Stem("purser"), "purser" );
	deepEqual( Stem("purses"), "purs" );
	deepEqual( Stem("pursing"), "purs" );
	deepEqual( Stem("pursuance"), "pursuanc" );
	deepEqual( Stem("pursuant"), "pursuant" );
	deepEqual( Stem("pursue"), "pursu" );
	deepEqual( Stem("pursued"), "pursu" );
	deepEqual( Stem("pursuer"), "pursuer" );
	deepEqual( Stem("pursuers"), "pursuer" );
	deepEqual( Stem("pursues"), "pursu" );
	deepEqual( Stem("pursuing"), "pursu" );
	deepEqual( Stem("pursuit"), "pursuit" );
	deepEqual( Stem("pursuits"), "pursuit" );
	deepEqual( Stem("pursult"), "pursult" );
	deepEqual( Stem("purvided"), "purvid" );
	deepEqual( Stem("push"), "push" );
	deepEqual( Stem("pushed"), "push" );
	deepEqual( Stem("pushes"), "push" );
	deepEqual( Stem("pushing"), "push" );
	deepEqual( Stem("pushkin"), "pushkin" );
	deepEqual( Stem("pusillanimity"), "pusillanim" );
	deepEqual( Stem("puss"), "puss" );
	deepEqual( Stem("pussy"), "pussi" );
	deepEqual( Stem("pustules"), "pustul" );
	deepEqual( Stem("put"), "put" );
	deepEqual( Stem("putrefaction"), "putrefact" );
	deepEqual( Stem("putrefying"), "putrefi" );
	deepEqual( Stem("putrid"), "putrid" );
	deepEqual( Stem("putridity"), "putrid" );
	deepEqual( Stem("puts"), "put" );
	deepEqual( Stem("puttin"), "puttin" );
	deepEqual( Stem("putting"), "put" );
	deepEqual( Stem("puzzle"), "puzzl" );
	deepEqual( Stem("puzzled"), "puzzl" );
	deepEqual( Stem("puzzles"), "puzzl" );
	deepEqual( Stem("puzzling"), "puzzl" );
	deepEqual( Stem("py"), "py" );
	deepEqual( Stem("pye"), "pye" );
	deepEqual( Stem("pygmy"), "pygmi" );
	deepEqual( Stem("pyke"), "pyke" );
	deepEqual( Stem("pyotr"), "pyotr" );
	deepEqual( Stem("pyramid"), "pyramid" );
	deepEqual( Stem("pyramids"), "pyramid" );
	deepEqual( Stem("pyrard"), "pyrard" );
	deepEqual( Stem("pyre"), "pyre" );
	deepEqual( Stem("pyrenees"), "pyrene" );
	deepEqual( Stem("pyrifera"), "pyrifera" );
	deepEqual( Stem("pyrites"), "pyrit" );
	deepEqual( Stem("pyrocephalus"), "pyrocephalus" );
	deepEqual( Stem("pyrophorus"), "pyrophorus" );
	deepEqual( Stem("pyrosma"), "pyrosma" );
	deepEqual( Stem("q"), "q" );
	deepEqual( Stem("qc"), "qc" );
	deepEqual( Stem("qu"), "qu" );
	deepEqual( Stem("quaccha"), "quaccha" );
	deepEqual( Stem("quack"), "quack" );
	deepEqual( Stem("quadra"), "quadra" );
	deepEqual( Stem("quadrangle"), "quadrangl" );
	deepEqual( Stem("quadrangular"), "quadrangular" );
	deepEqual( Stem("quadras"), "quadra" );
	deepEqual( Stem("quadrille"), "quadrill" );
	deepEqual( Stem("quadruped"), "quadrup" );
	deepEqual( Stem("quadrupeds"), "quadrup" );
	deepEqual( Stem("quadruple"), "quadrupl" );
	deepEqual( Stem("quadrupled"), "quadrupl" );
	deepEqual( Stem("quagmire"), "quagmir" );
	deepEqual( Stem("quagmires"), "quagmir" );
	deepEqual( Stem("quail"), "quail" );
	deepEqual( Stem("quailed"), "quail" );
	deepEqual( Stem("quailing"), "quail" );
	deepEqual( Stem("quails"), "quail" );
	deepEqual( Stem("quaint"), "quaint" );
	deepEqual( Stem("quaintly"), "quaint" );
	deepEqual( Stem("quaintness"), "quaint" );
	deepEqual( Stem("quake"), "quak" );
	deepEqual( Stem("quaked"), "quak" );
	deepEqual( Stem("quakes"), "quak" );
	deepEqual( Stem("quaking"), "quak" );
	deepEqual( Stem("quakings"), "quak" );
	deepEqual( Stem("quale"), "qual" );
	deepEqual( Stem("qualification"), "qualif" );
	deepEqual( Stem("qualifications"), "qualif" );
	deepEqual( Stem("qualified"), "qualifi" );
	deepEqual( Stem("qualify"), "qualifi" );
	deepEqual( Stem("qualifying"), "qualifi" );
	deepEqual( Stem("qualities"), "qualiti" );
	deepEqual( Stem("quality"), "qualiti" );
	deepEqual( Stem("quand"), "quand" );
	deepEqual( Stem("quantite"), "quantit" );
	deepEqual( Stem("quantities"), "quantiti" );
	deepEqual( Stem("quantity"), "quantiti" );
	deepEqual( Stem("quarrel"), "quarrel" );
	deepEqual( Stem("quarrelled"), "quarrel" );
	deepEqual( Stem("quarrelling"), "quarrel" );
	deepEqual( Stem("quarrels"), "quarrel" );
	deepEqual( Stem("quarrelsome"), "quarrelsom" );
	deepEqual( Stem("quarry"), "quarri" );
	deepEqual( Stem("quart"), "quart" );
	deepEqual( Stem("quarter"), "quarter" );
	deepEqual( Stem("quartered"), "quarter" );
	deepEqual( Stem("quartering"), "quarter" );
	deepEqual( Stem("quarterly"), "quarter" );
	deepEqual( Stem("quartermaster"), "quartermast" );
	deepEqual( Stem("quartern"), "quartern" );
	deepEqual( Stem("quarters"), "quarter" );
	deepEqual( Stem("quarther"), "quarther" );
	deepEqual( Stem("quartz"), "quartz" );
	deepEqual( Stem("quatre"), "quatr" );
	deepEqual( Stem("quaver"), "quaver" );
	deepEqual( Stem("quavering"), "quaver" );
	deepEqual( Stem("quay"), "quay" );
	deepEqual( Stem("que"), "que" );
	deepEqual( Stem("quebec"), "quebec" );
	deepEqual( Stem("quebrantahuesos"), "quebrantahueso" );
	deepEqual( Stem("quedius"), "quedius" );
	deepEqual( Stem("queen"), "queen" );
	deepEqual( Stem("queens"), "queen" );
	deepEqual( Stem("queer"), "queer" );
	deepEqual( Stem("queerest"), "queerest" );
	deepEqual( Stem("queerness"), "queer" );
	deepEqual( Stem("quell"), "quell" );
	deepEqual( Stem("quelled"), "quell" );
	deepEqual( Stem("quench"), "quench" );
	deepEqual( Stem("quenched"), "quench" );
	deepEqual( Stem("quenching"), "quench" );
	deepEqual( Stem("queries"), "queri" );
	deepEqual( Stem("querulous"), "querul" );
	deepEqual( Stem("query"), "queri" );
	deepEqual( Stem("quest"), "quest" );
	deepEqual( Stem("question"), "question" );
	deepEqual( Stem("questionable"), "question" );
	deepEqual( Stem("questioned"), "question" );
	deepEqual( Stem("questioner"), "question" );
	deepEqual( Stem("questioning"), "question" );
	deepEqual( Stem("questionings"), "question" );
	deepEqual( Stem("questions"), "question" );
	deepEqual( Stem("quibble"), "quibbl" );
	deepEqual( Stem("quick"), "quick" );
	deepEqual( Stem("quicken"), "quicken" );
	deepEqual( Stem("quickened"), "quicken" );
	deepEqual( Stem("quickens"), "quicken" );
	deepEqual( Stem("quicker"), "quicker" );
	deepEqual( Stem("quickest"), "quickest" );
	deepEqual( Stem("quickly"), "quick" );
	deepEqual( Stem("quickness"), "quick" );
	deepEqual( Stem("quicksilver"), "quicksilv" );
	deepEqual( Stem("quidnuncs"), "quidnunc" );
	deepEqual( Stem("quien"), "quien" );
	deepEqual( Stem("quiescence"), "quiescenc" );
	deepEqual( Stem("quiescent"), "quiescent" );
	deepEqual( Stem("quiet"), "quiet" );
	deepEqual( Stem("quieted"), "quiet" );
	deepEqual( Stem("quieter"), "quieter" );
	deepEqual( Stem("quietest"), "quietest" );
	deepEqual( Stem("quietly"), "quiet" );
	deepEqual( Stem("quietness"), "quiet" );
	deepEqual( Stem("quiets"), "quiet" );
	deepEqual( Stem("quietude"), "quietud" );
	deepEqual( Stem("quilimari"), "quilimari" );
	deepEqual( Stem("quillay"), "quillay" );
	deepEqual( Stem("quillota"), "quillota" );
	deepEqual( Stem("quills"), "quill" );
	deepEqual( Stem("quilmes"), "quilm" );
	deepEqual( Stem("quilt"), "quilt" );
	deepEqual( Stem("quince"), "quinc" );
	deepEqual( Stem("quinchao"), "quinchao" );
	deepEqual( Stem("quintero"), "quintero" );
	deepEqual( Stem("quints"), "quint" );
	deepEqual( Stem("quintus"), "quintus" );
	deepEqual( Stem("quiriquina"), "quiriquina" );
	deepEqual( Stem("quit"), "quit" );
	deepEqual( Stem("quite"), "quit" );
	deepEqual( Stem("quito"), "quito" );
	deepEqual( Stem("quits"), "quit" );
	deepEqual( Stem("quitted"), "quit" );
	deepEqual( Stem("quitting"), "quit" );
	deepEqual( Stem("quiver"), "quiver" );
	deepEqual( Stem("quivered"), "quiver" );
	deepEqual( Stem("quivering"), "quiver" );
	deepEqual( Stem("quivers"), "quiver" );
	deepEqual( Stem("quixote"), "quixot" );
	deepEqual( Stem("quixotic"), "quixot" );
	deepEqual( Stem("quixotism"), "quixot" );
	deepEqual( Stem("quizzical"), "quizzic" );
	deepEqual( Stem("quizzing"), "quizz" );
	deepEqual( Stem("quizzings"), "quizz" );
	deepEqual( Stem("qulte"), "qult" );
	deepEqual( Stem("quo"), "quo" );
	deepEqual( Stem("quondam"), "quondam" );
	deepEqual( Stem("quoodle"), "quoodl" );
	deepEqual( Stem("quotation"), "quotat" );
	deepEqual( Stem("quotations"), "quotat" );
	deepEqual( Stem("quote"), "quot" );
	deepEqual( Stem("quoted"), "quot" );
	deepEqual( Stem("quotes"), "quot" );
	deepEqual( Stem("quoth"), "quoth" );
	deepEqual( Stem("quoting"), "quot" );
	deepEqual( Stem("quoy"), "quoy" );
	deepEqual( Stem("r"), "r" );
	deepEqual( Stem("ra"), "ra" );
	deepEqual( Stem("raa"), "raa" );
	deepEqual( Stem("rabbit"), "rabbit" );
	deepEqual( Stem("rabbits"), "rabbit" );
	deepEqual( Stem("rabidly"), "rabid" );
	deepEqual( Stem("race"), "race" );
	deepEqual( Stem("racehorses"), "racehors" );
	deepEqual( Stem("racers"), "racer" );
	deepEqual( Stem("races"), "race" );
	deepEqual( Stem("rachael"), "rachael" );
	deepEqual( Stem("rachel"), "rachel" );
	deepEqual( Stem("racing"), "race" );
	deepEqual( Stem("rack"), "rack" );
	deepEqual( Stem("racked"), "rack" );
	deepEqual( Stem("racket"), "racket" );
	deepEqual( Stem("racketing"), "racket" );
	deepEqual( Stem("racking"), "rack" );
	deepEqual( Stem("rackings"), "rack" );
	deepEqual( Stem("radack"), "radack" );
	deepEqual( Stem("radiance"), "radianc" );
	deepEqual( Stem("radiant"), "radiant" );
	deepEqual( Stem("radiantly"), "radiant" );
	deepEqual( Stem("radiata"), "radiata" );
	deepEqual( Stem("radiate"), "radiat" );
	deepEqual( Stem("radiated"), "radiat" );
	deepEqual( Stem("radiating"), "radiat" );
	deepEqual( Stem("radiation"), "radiat" );
	deepEqual( Stem("radical"), "radic" );
	deepEqual( Stem("radicalism"), "radic" );
	deepEqual( Stem("radicals"), "radic" );
	deepEqual( Stem("radii"), "radii" );
	deepEqual( Stem("radish"), "radish" );
	deepEqual( Stem("radishchev"), "radishchev" );
	deepEqual( Stem("radishes"), "radish" );
	deepEqual( Stem("rads"), "rad" );
	deepEqual( Stem("rafael"), "rafael" );
	deepEqual( Stem("raff"), "raff" );
	deepEqual( Stem("raffaelite"), "raffaelit" );
	deepEqual( Stem("raffaelites"), "raffaelit" );
	deepEqual( Stem("raffaelitism"), "raffaelit" );
	deepEqual( Stem("raft"), "raft" );
	deepEqual( Stem("rafters"), "rafter" );
	deepEqual( Stem("rafts"), "raft" );
	deepEqual( Stem("rag"), "rag" );
	deepEqual( Stem("rage"), "rage" );
	deepEqual( Stem("raged"), "rage" );
	deepEqual( Stem("rages"), "rage" );
	deepEqual( Stem("ragged"), "rag" );
	deepEqual( Stem("raging"), "rage" );
	deepEqual( Stem("rags"), "rag" );
	deepEqual( Stem("rail"), "rail" );
	deepEqual( Stem("railed"), "rail" );
	deepEqual( Stem("railing"), "rail" );
	deepEqual( Stem("railings"), "rail" );
	deepEqual( Stem("raillery"), "railleri" );
	deepEqual( Stem("railroad"), "railroad" );
	deepEqual( Stem("railroads"), "railroad" );
	deepEqual( Stem("rails"), "rail" );
	deepEqual( Stem("railway"), "railway" );
	deepEqual( Stem("railways"), "railway" );
	deepEqual( Stem("rain"), "rain" );
	deepEqual( Stem("rainbow"), "rainbow" );
	deepEqual( Stem("raindrops"), "raindrop" );
	deepEqual( Stem("rained"), "rain" );
	deepEqual( Stem("raining"), "rain" );
	deepEqual( Stem("rains"), "rain" );
	deepEqual( Stem("rainy"), "raini" );
	deepEqual( Stem("raise"), "rais" );
	deepEqual( Stem("raised"), "rais" );
	deepEqual( Stem("raises"), "rais" );
	deepEqual( Stem("raising"), "rais" );
	deepEqual( Stem("raisins"), "raisin" );
	deepEqual( Stem("rake"), "rake" );
	deepEqual( Stem("raked"), "rake" );
	deepEqual( Stem("rakes"), "rake" );
	deepEqual( Stem("raking"), "rake" );
	deepEqual( Stem("rakish"), "rakish" );
	deepEqual( Stem("rakishly"), "rakish" );
	deepEqual( Stem("rakishness"), "rakish" );
	deepEqual( Stem("ral"), "ral" );
	deepEqual( Stem("rallied"), "ralli" );
	deepEqual( Stem("rallus"), "rallus" );
	deepEqual( Stem("rally"), "ralli" );
	deepEqual( Stem("rallying"), "ralli" );
	deepEqual( Stem("ralph"), "ralph" );
	deepEqual( Stem("ram"), "ram" );
	deepEqual( Stem("ramble"), "rambl" );
	deepEqual( Stem("rambled"), "rambl" );
	deepEqual( Stem("rambles"), "rambl" );
	deepEqual( Stem("rambling"), "rambl" );
	deepEqual( Stem("ramification"), "ramif" );
	deepEqual( Stem("ramirez"), "ramirez" );
	deepEqual( Stem("rammer"), "rammer" );
	deepEqual( Stem("rampant"), "rampant" );
	deepEqual( Stem("rampart"), "rampart" );
	deepEqual( Stem("ramsden"), "ramsden" );
	deepEqual( Stem("ramsgate"), "ramsgat" );
	deepEqual( Stem("ran"), "ran" );
	deepEqual( Stem("rana"), "rana" );
	deepEqual( Stem("rancagua"), "rancagua" );
	deepEqual( Stem("ranche"), "ranch" );
	deepEqual( Stem("rancho"), "rancho" );
	deepEqual( Stem("ranchos"), "rancho" );
	deepEqual( Stem("rancorous"), "rancor" );
	deepEqual( Stem("rancorously"), "rancor" );
	deepEqual( Stem("rancour"), "rancour" );
	deepEqual( Stem("randal"), "randal" );
	deepEqual( Stem("randall"), "randal" );
	deepEqual( Stem("random"), "random" );
	deepEqual( Stem("rang"), "rang" );
	deepEqual( Stem("range"), "rang" );
	deepEqual( Stem("ranged"), "rang" );
	deepEqual( Stem("rangees"), "range" );
	deepEqual( Stem("ranges"), "rang" );
	deepEqual( Stem("ranging"), "rang" );
	deepEqual( Stem("rank"), "rank" );
	deepEqual( Stem("ranked"), "rank" );
	deepEqual( Stem("rankled"), "rankl" );
	deepEqual( Stem("rankling"), "rankl" );
	deepEqual( Stem("rankness"), "rank" );
	deepEqual( Stem("ranks"), "rank" );
	deepEqual( Stem("ransack"), "ransack" );
	deepEqual( Stem("ransacked"), "ransack" );
	deepEqual( Stem("ransacking"), "ransack" );
	deepEqual( Stem("rap"), "rap" );
	deepEqual( Stem("rapacious"), "rapaci" );
	deepEqual( Stem("rapacity"), "rapac" );
	deepEqual( Stem("raphael"), "raphael" );
	deepEqual( Stem("rapid"), "rapid" );
	deepEqual( Stem("rapidity"), "rapid" );
	deepEqual( Stem("rapidly"), "rapid" );
	deepEqual( Stem("rapine"), "rapin" );
	deepEqual( Stem("rapping"), "rap" );
	deepEqual( Stem("raps"), "rap" );
	deepEqual( Stem("rapt"), "rapt" );
	deepEqual( Stem("rapture"), "raptur" );
	deepEqual( Stem("raptures"), "raptur" );
	deepEqual( Stem("rapturous"), "raptur" );
	deepEqual( Stem("rapturously"), "raptur" );
	deepEqual( Stem("rare"), "rare" );
	deepEqual( Stem("rarefied"), "rarefi" );
	deepEqual( Stem("rarely"), "rare" );
	deepEqual( Stem("rarer"), "rarer" );
	deepEqual( Stem("rarest"), "rarest" );
	deepEqual( Stem("rarity"), "rariti" );
	deepEqual( Stem("rascal"), "rascal" );
	deepEqual( Stem("rascality"), "rascal" );
	deepEqual( Stem("rascally"), "rascal" );
	deepEqual( Stem("rascals"), "rascal" );
	deepEqual( Stem("rash"), "rash" );
	deepEqual( Stem("rasher"), "rasher" );
	deepEqual( Stem("rashly"), "rash" );
	deepEqual( Stem("rashness"), "rash" );
	deepEqual( Stem("raskolnikov"), "raskolnikov" );
	deepEqual( Stem("raspberries"), "raspberri" );
	deepEqual( Stem("raspberry"), "raspberri" );
	deepEqual( Stem("rasper"), "rasper" );
	deepEqual( Stem("rastro"), "rastro" );
	deepEqual( Stem("rat"), "rat" );
	deepEqual( Stem("rate"), "rate" );
	deepEqual( Stem("rated"), "rate" );
	deepEqual( Stem("rates"), "rate" );
	deepEqual( Stem("rathe"), "rath" );
	deepEqual( Stem("rather"), "rather" );
	deepEqual( Stem("ratio"), "ratio" );
	deepEqual( Stem("rational"), "ration" );
	deepEqual( Stem("rationally"), "ration" );
	deepEqual( Stem("rations"), "ration" );
	deepEqual( Stem("rats"), "rat" );
	deepEqual( Stem("rattle"), "rattl" );
	deepEqual( Stem("rattled"), "rattl" );
	deepEqual( Stem("rattler"), "rattler" );
	deepEqual( Stem("rattlers"), "rattler" );
	deepEqual( Stem("rattles"), "rattl" );
	deepEqual( Stem("rattlesnake"), "rattlesnak" );
	deepEqual( Stem("rattling"), "rattl" );
	deepEqual( Stem("rattus"), "rattus" );
	deepEqual( Stem("ravaged"), "ravag" );
	deepEqual( Stem("ravages"), "ravag" );
	deepEqual( Stem("ravaging"), "ravag" );
	deepEqual( Stem("rave"), "rave" );
	deepEqual( Stem("raved"), "rave" );
	deepEqual( Stem("raven"), "raven" );
	deepEqual( Stem("ravenous"), "raven" );
	deepEqual( Stem("ravenously"), "raven" );
	deepEqual( Stem("ravens"), "raven" );
	deepEqual( Stem("ravine"), "ravin" );
	deepEqual( Stem("ravines"), "ravin" );
	deepEqual( Stem("raving"), "rave" );
	deepEqual( Stem("ravings"), "rave" );
	deepEqual( Stem("ravins"), "ravin" );
	deepEqual( Stem("ravishing"), "ravish" );
	deepEqual( Stem("raw"), "raw" );
	deepEqual( Stem("rawest"), "rawest" );
	deepEqual( Stem("ray"), "ray" );
	deepEqual( Stem("rays"), "ray" );
	deepEqual( Stem("razor"), "razor" );
	deepEqual( Stem("razors"), "razor" );
	deepEqual( Stem("razsudkin"), "razsudkin" );
	deepEqual( Stem("razumihin"), "razumihin" );
	deepEqual( Stem("razumihins"), "razumihin" );
	deepEqual( Stem("rd"), "rd" );
	deepEqual( Stem("re"), "re" );
	deepEqual( Stem("rea"), "rea" );
	deepEqual( Stem("reach"), "reach" );
	deepEqual( Stem("reached"), "reach" );
	deepEqual( Stem("reaches"), "reach" );
	deepEqual( Stem("reaching"), "reach" );
	deepEqual( Stem("reaction"), "reaction" );
	deepEqual( Stem("reactionaries"), "reactionari" );
	deepEqual( Stem("reactionary"), "reactionari" );
	deepEqual( Stem("read"), "read" );
	deepEqual( Stem("reader"), "reader" );
	deepEqual( Stem("readers"), "reader" );
	deepEqual( Stem("readied"), "readi" );
	deepEqual( Stem("readiest"), "readiest" );
	deepEqual( Stem("readil"), "readil" );
	deepEqual( Stem("readily"), "readili" );
	deepEqual( Stem("readiness"), "readi" );
	deepEqual( Stem("reading"), "read" );
	deepEqual( Stem("readings"), "read" );
	deepEqual( Stem("readjourned"), "readjourn" );
	deepEqual( Stem("readjust"), "readjust" );
	deepEqual( Stem("readjusted"), "readjust" );
	deepEqual( Stem("readjusts"), "readjust" );
	deepEqual( Stem("reads"), "read" );
	deepEqual( Stem("ready"), "readi" );
	deepEqual( Stem("real"), "real" );
	deepEqual( Stem("realisation"), "realis" );
	deepEqual( Stem("realise"), "realis" );
	deepEqual( Stem("realised"), "realis" );
	deepEqual( Stem("realising"), "realis" );
	deepEqual( Stem("realit"), "realit" );
	deepEqual( Stem("realities"), "realiti" );
	deepEqual( Stem("reality"), "realiti" );
	deepEqual( Stem("realize"), "realiz" );
	deepEqual( Stem("realized"), "realiz" );
	deepEqual( Stem("realizes"), "realiz" );
	deepEqual( Stem("realizing"), "realiz" );
	deepEqual( Stem("reall"), "reall" );
	deepEqual( Stem("really"), "realli" );
	deepEqual( Stem("realm"), "realm" );
	deepEqual( Stem("realms"), "realm" );
	deepEqual( Stem("reals"), "real" );
	deepEqual( Stem("realty"), "realti" );
	deepEqual( Stem("ream"), "ream" );
	deepEqual( Stem("reams"), "ream" );
	deepEqual( Stem("reanimate"), "reanim" );
	deepEqual( Stem("reap"), "reap" );
	deepEqual( Stem("reaped"), "reap" );
	deepEqual( Stem("reaping"), "reap" );
	deepEqual( Stem("reappear"), "reappear" );
	deepEqual( Stem("reappearance"), "reappear" );
	deepEqual( Stem("reappeared"), "reappear" );
	deepEqual( Stem("reappearing"), "reappear" );
	deepEqual( Stem("reappears"), "reappear" );
	deepEqual( Stem("rear"), "rear" );
	deepEqual( Stem("reared"), "rear" );
	deepEqual( Stem("rearing"), "rear" );
	deepEqual( Stem("rearrange"), "rearrang" );
	deepEqual( Stem("rearrangements"), "rearrang" );
	deepEqual( Stem("rears"), "rear" );
	deepEqual( Stem("reascended"), "reascend" );
	deepEqual( Stem("reascending"), "reascend" );
	deepEqual( Stem("reason"), "reason" );
	deepEqual( Stem("reasonable"), "reason" );
	deepEqual( Stem("reasonableness"), "reason" );
	deepEqual( Stem("reasonably"), "reason" );
	deepEqual( Stem("reasoned"), "reason" );
	deepEqual( Stem("reasoners"), "reason" );
	deepEqual( Stem("reasoning"), "reason" );
	deepEqual( Stem("reasons"), "reason" );
	deepEqual( Stem("reassume"), "reassum" );
	deepEqual( Stem("reassurance"), "reassur" );
	deepEqual( Stem("reassure"), "reassur" );
	deepEqual( Stem("reassured"), "reassur" );
	deepEqual( Stem("reassures"), "reassur" );
	deepEqual( Stem("reassuring"), "reassur" );
	deepEqual( Stem("reassuringly"), "reassur" );
	deepEqual( Stem("reaumur"), "reaumur" );
	deepEqual( Stem("rebel"), "rebel" );
	deepEqual( Stem("rebelled"), "rebel" );
	deepEqual( Stem("rebelling"), "rebel" );
	deepEqual( Stem("rebellion"), "rebellion" );
	deepEqual( Stem("rebellious"), "rebelli" );
	deepEqual( Stem("rebellyon"), "rebellyon" );
	deepEqual( Stem("rebels"), "rebel" );
	deepEqual( Stem("rebound"), "rebound" );
	deepEqual( Stem("rebounded"), "rebound" );
	deepEqual( Stem("rebounding"), "rebound" );
	deepEqual( Stem("rebuff"), "rebuff" );
	deepEqual( Stem("rebuffed"), "rebuf" );
	deepEqual( Stem("rebuilding"), "rebuild" );
	deepEqual( Stem("rebuilt"), "rebuilt" );
	deepEqual( Stem("rebuke"), "rebuk" );
	deepEqual( Stem("rebuked"), "rebuk" );
	deepEqual( Stem("rec"), "rec" );
	deepEqual( Stem("recado"), "recado" );
	deepEqual( Stem("recall"), "recal" );
	deepEqual( Stem("recalled"), "recal" );
	deepEqual( Stem("recalling"), "recal" );
	deepEqual( Stem("recalls"), "recal" );
	deepEqual( Stem("recantation"), "recant" );
	deepEqual( Stem("recapitulate"), "recapitul" );
	deepEqual( Stem("recapitulation"), "recapitul" );
	deepEqual( Stem("rece"), "rece" );
	deepEqual( Stem("receded"), "reced" );
	deepEqual( Stem("receding"), "reced" );
	deepEqual( Stem("receipt"), "receipt" );
	deepEqual( Stem("receipts"), "receipt" );
	deepEqual( Stem("receive"), "receiv" );
	deepEqual( Stem("received"), "receiv" );
	deepEqual( Stem("receiver"), "receiv" );
	deepEqual( Stem("receives"), "receiv" );
	deepEqual( Stem("receiving"), "receiv" );
	deepEqual( Stem("recent"), "recent" );
	deepEqual( Stem("recently"), "recent" );
	deepEqual( Stem("reception"), "recept" );
	deepEqual( Stem("receptions"), "recept" );
	deepEqual( Stem("recess"), "recess" );
	deepEqual( Stem("recesses"), "recess" );
	deepEqual( Stem("recipe"), "recip" );
	deepEqual( Stem("recipient"), "recipi" );
	deepEqual( Stem("recipro"), "recipro" );
	deepEqual( Stem("reciprocal"), "reciproc" );
	deepEqual( Stem("reciprocate"), "reciproc" );
	deepEqual( Stem("reciprocated"), "reciproc" );
	deepEqual( Stem("reciprocating"), "reciproc" );
	deepEqual( Stem("reciprocity"), "reciproc" );
	deepEqual( Stem("recital"), "recit" );
	deepEqual( Stem("recitals"), "recit" );
	deepEqual( Stem("recite"), "recit" );
	deepEqual( Stem("recited"), "recit" );
	deepEqual( Stem("reckless"), "reckless" );
	deepEqual( Stem("recklessly"), "reckless" );
	deepEqual( Stem("recklessness"), "reckless" );
	deepEqual( Stem("reckon"), "reckon" );
	deepEqual( Stem("reckoned"), "reckon" );
	deepEqual( Stem("reckoners"), "reckon" );
	deepEqual( Stem("reckoning"), "reckon" );
	deepEqual( Stem("reckonings"), "reckon" );
	deepEqual( Stem("reclaim"), "reclaim" );
	deepEqual( Stem("reclaimed"), "reclaim" );
	deepEqual( Stem("reclined"), "reclin" );
	deepEqual( Stem("reclines"), "reclin" );
	deepEqual( Stem("reclining"), "reclin" );
	deepEqual( Stem("reclosing"), "reclos" );
	deepEqual( Stem("recluse"), "reclus" );
	deepEqual( Stem("recognisant"), "recognis" );
	deepEqual( Stem("recognise"), "recognis" );
	deepEqual( Stem("recognised"), "recognis" );
	deepEqual( Stem("recognising"), "recognis" );
	deepEqual( Stem("recognition"), "recognit" );
	deepEqual( Stem("recognize"), "recogn" );
	deepEqual( Stem("recognized"), "recogn" );
	deepEqual( Stem("recognizes"), "recogn" );
	deepEqual( Stem("recognizing"), "recogn" );
	deepEqual( Stem("recoil"), "recoil" );
	deepEqual( Stem("recoiled"), "recoil" );
	deepEqual( Stem("recoiling"), "recoil" );
	deepEqual( Stem("recoils"), "recoil" );
	deepEqual( Stem("recollect"), "recollect" );
	deepEqual( Stem("recollected"), "recollect" );
	deepEqual( Stem("recollecting"), "recollect" );
	deepEqual( Stem("recollection"), "recollect" );
	deepEqual( Stem("recollections"), "recollect" );
	deepEqual( Stem("recollects"), "recollect" );
	deepEqual( Stem("recommenced"), "recommenc" );
	deepEqual( Stem("recommences"), "recomm" );
	deepEqual( Stem("recommend"), "recommend" );
	deepEqual( Stem("recommendation"), "recommend" );
	deepEqual( Stem("recommended"), "recommend" );
	deepEqual( Stem("recommending"), "recommend" );
	deepEqual( Stem("recompense"), "recompens" );
	deepEqual( Stem("recompenses"), "recompens" );
	deepEqual( Stem("recomposed"), "recompos" );
	deepEqual( Stem("recomposing"), "recompos" );
	deepEqual( Stem("reconcilable"), "reconcil" );
	deepEqual( Stem("reconcile"), "reconcil" );
	deepEqual( Stem("reconciled"), "reconcil" );
	deepEqual( Stem("reconcilements"), "reconcil" );
	deepEqual( Stem("reconciliation"), "reconcili" );
	deepEqual( Stem("reconciling"), "reconcil" );
	deepEqual( Stem("reconnoitre"), "reconnoitr" );
	deepEqual( Stem("reconnoitred"), "reconnoitr" );
	deepEqual( Stem("reconsider"), "reconsid" );
	deepEqual( Stem("reconsideration"), "reconsider" );
	deepEqual( Stem("reconsidering"), "reconsid" );
	deepEqual( Stem("reconsigning"), "reconsign" );
	deepEqual( Stem("reconsignment"), "reconsign" );
	deepEqual( Stem("recopied"), "recopi" );
	deepEqual( Stem("record"), "record" );
	deepEqual( Stem("recorded"), "record" );
	deepEqual( Stem("recording"), "record" );
	deepEqual( Stem("records"), "record" );
	deepEqual( Stem("recount"), "recount" );
	deepEqual( Stem("recounted"), "recount" );
	deepEqual( Stem("recounting"), "recount" );
	deepEqual( Stem("recouped"), "recoup" );
	deepEqual( Stem("recourse"), "recours" );
	deepEqual( Stem("recover"), "recov" );
	deepEqual( Stem("recovered"), "recov" );
	deepEqual( Stem("recovering"), "recov" );
	deepEqual( Stem("recovers"), "recov" );
	deepEqual( Stem("recovery"), "recoveri" );
	deepEqual( Stem("recreation"), "recreat" );
	deepEqual( Stem("recreative"), "recreat" );
	deepEqual( Stem("recrimination"), "recrimin" );
	deepEqual( Stem("recriminations"), "recrimin" );
	deepEqual( Stem("recross"), "recross" );
	deepEqual( Stem("recrossed"), "recross" );
	deepEqual( Stem("recrossing"), "recross" );
	deepEqual( Stem("recruit"), "recruit" );
	deepEqual( Stem("recruited"), "recruit" );
	deepEqual( Stem("rectified"), "rectifi" );
	deepEqual( Stem("rectify"), "rectifi" );
	deepEqual( Stem("rectifying"), "rectifi" );
	deepEqual( Stem("rectitude"), "rectitud" );
	deepEqual( Stem("rectly"), "rect" );
	deepEqual( Stem("rector"), "rector" );
	deepEqual( Stem("rectory"), "rectori" );
	deepEqual( Stem("recumbent"), "recumb" );
	deepEqual( Stem("recuperative"), "recup" );
	deepEqual( Stem("recur"), "recur" );
	deepEqual( Stem("recurred"), "recur" );
	deepEqual( Stem("recurrence"), "recurr" );
	deepEqual( Stem("recurrent"), "recurr" );
	deepEqual( Stem("recurring"), "recur" );
	deepEqual( Stem("recurs"), "recur" );
	deepEqual( Stem("recuvver"), "recuvv" );
	deepEqual( Stem("red"), "red" );
	deepEqual( Stem("reddened"), "redden" );
	deepEqual( Stem("reddening"), "redden" );
	deepEqual( Stem("redder"), "redder" );
	deepEqual( Stem("reddest"), "reddest" );
	deepEqual( Stem("reddish"), "reddish" );
	deepEqual( Stem("reddy"), "reddi" );
	deepEqual( Stem("redecorated"), "redecor" );
	deepEqual( Stem("redeem"), "redeem" );
	deepEqual( Stem("redeemed"), "redeem" );
	deepEqual( Stem("redeemer"), "redeem" );
	deepEqual( Stem("redeeming"), "redeem" );
	deepEqual( Stem("redemption"), "redempt" );
	deepEqual( Stem("redistribution"), "redistribut" );
	deepEqual( Stem("redly"), "red" );
	deepEqual( Stem("redolent"), "redol" );
	deepEqual( Stem("redouble"), "redoubl" );
	deepEqual( Stem("redoubled"), "redoubl" );
	deepEqual( Stem("redoubling"), "redoubl" );
	deepEqual( Stem("redoubtable"), "redoubt" );
	deepEqual( Stem("redound"), "redound" );
	deepEqual( Stem("redounded"), "redound" );
	deepEqual( Stem("redress"), "redress" );
	deepEqual( Stem("reduce"), "reduc" );
	deepEqual( Stem("reduced"), "reduc" );
	deepEqual( Stem("reduces"), "reduc" );
	deepEqual( Stem("reducidos"), "reducido" );
	deepEqual( Stem("reducing"), "reduc" );
	deepEqual( Stem("reduction"), "reduct" );
	deepEqual( Stem("reductions"), "reduct" );
	deepEqual( Stem("reduvius"), "reduvius" );
	deepEqual( Stem("reed"), "reed" );
	deepEqual( Stem("reeds"), "reed" );
	deepEqual( Stem("reef"), "reef" );
	deepEqual( Stem("reefs"), "reef" );
	deepEqual( Stem("reeght"), "reeght" );
	deepEqual( Stem("reek"), "reek" );
	deepEqual( Stem("reeked"), "reek" );
	deepEqual( Stem("reeking"), "reek" );
	deepEqual( Stem("reeks"), "reek" );
	deepEqual( Stem("reel"), "reel" );
	deepEqual( Stem("reeled"), "reel" );
	deepEqual( Stem("reeling"), "reel" );
	deepEqual( Stem("ref"), "ref" );
	deepEqual( Stem("refer"), "refer" );
	deepEqual( Stem("referable"), "refer" );
	deepEqual( Stem("reference"), "refer" );
	deepEqual( Stem("references"), "refer" );
	deepEqual( Stem("referred"), "refer" );
	deepEqual( Stem("referring"), "refer" );
	deepEqual( Stem("refers"), "refer" );
	deepEqual( Stem("refine"), "refin" );
	deepEqual( Stem("refined"), "refin" );
	deepEqual( Stem("refinement"), "refin" );
	deepEqual( Stem("refinements"), "refin" );
	deepEqual( Stem("refines"), "refin" );
	deepEqual( Stem("refit"), "refit" );
	deepEqual( Stem("reflect"), "reflect" );
	deepEqual( Stem("reflected"), "reflect" );
	deepEqual( Stem("reflectin"), "reflectin" );
	deepEqual( Stem("reflecting"), "reflect" );
	deepEqual( Stem("reflection"), "reflect" );
	deepEqual( Stem("reflections"), "reflect" );
	deepEqual( Stem("reflective"), "reflect" );
	deepEqual( Stem("reflector"), "reflector" );
	deepEqual( Stem("reflects"), "reflect" );
	deepEqual( Stem("refolding"), "refold" );
	deepEqual( Stem("refolds"), "refold" );
	deepEqual( Stem("reform"), "reform" );
	deepEqual( Stem("reformation"), "reform" );
	deepEqual( Stem("reformed"), "reform" );
	deepEqual( Stem("reformer"), "reform" );
	deepEqual( Stem("reforming"), "reform" );
	deepEqual( Stem("reforms"), "reform" );
	deepEqual( Stem("refraction"), "refract" );
	deepEqual( Stem("refractory"), "refractori" );
	deepEqual( Stem("refrain"), "refrain" );
	deepEqual( Stem("refrained"), "refrain" );
	deepEqual( Stem("refrains"), "refrain" );
	deepEqual( Stem("refresh"), "refresh" );
	deepEqual( Stem("refreshed"), "refresh" );
	deepEqual( Stem("refreshes"), "refresh" );
	deepEqual( Stem("refreshing"), "refresh" );
	deepEqual( Stem("refreshingly"), "refresh" );
	deepEqual( Stem("refreshment"), "refresh" );
	deepEqual( Stem("refreshments"), "refresh" );
	deepEqual( Stem("refrigerator"), "refriger" );
	deepEqual( Stem("refuge"), "refug" );
	deepEqual( Stem("refugees"), "refuge" );
	deepEqual( Stem("refulgent"), "refulg" );
	deepEqual( Stem("refund"), "refund" );
	deepEqual( Stem("refunded"), "refund" );
	deepEqual( Stem("refurnish"), "refurnish" );
	deepEqual( Stem("refusal"), "refus" );
	deepEqual( Stem("refuse"), "refus" );
	deepEqual( Stem("refused"), "refus" );
	deepEqual( Stem("refuses"), "refus" );
	deepEqual( Stem("refusest"), "refusest" );
	deepEqual( Stem("refusing"), "refus" );
	deepEqual( Stem("refutation"), "refut" );
	deepEqual( Stem("refute"), "refut" );
	deepEqual( Stem("reg"), "reg" );
	deepEqual( Stem("regain"), "regain" );
	deepEqual( Stem("regained"), "regain" );
	deepEqual( Stem("regaining"), "regain" );
	deepEqual( Stem("regains"), "regain" );
	deepEqual( Stem("regal"), "regal" );
	deepEqual( Stem("regale"), "regal" );
	deepEqual( Stem("regaled"), "regal" );
	deepEqual( Stem("regaling"), "regal" );
	deepEqual( Stem("regard"), "regard" );
	deepEqual( Stem("regarded"), "regard" );
	deepEqual( Stem("regardful"), "regard" );
	deepEqual( Stem("regarding"), "regard" );
	deepEqual( Stem("regardless"), "regardless" );
	deepEqual( Stem("regards"), "regard" );
	deepEqual( Stem("regeneration"), "regener" );
	deepEqual( Stem("regent"), "regent" );
	deepEqual( Stem("regimen"), "regimen" );
	deepEqual( Stem("regiment"), "regiment" );
	deepEqual( Stem("regimental"), "regiment" );
	deepEqual( Stem("reginald"), "reginald" );
	deepEqual( Stem("region"), "region" );
	deepEqual( Stem("regions"), "region" );
	deepEqual( Stem("register"), "regist" );
	deepEqual( Stem("registered"), "regist" );
	deepEqual( Stem("registrar"), "registrar" );
	deepEqual( Stem("registries"), "registri" );
	deepEqual( Stem("regression"), "regress" );
	deepEqual( Stem("regret"), "regret" );
	deepEqual( Stem("regretful"), "regret" );
	deepEqual( Stem("regretfully"), "regret" );
	deepEqual( Stem("regrets"), "regret" );
	deepEqual( Stem("regretted"), "regret" );
	deepEqual( Stem("regretting"), "regret" );
	deepEqual( Stem("regular"), "regular" );
	deepEqual( Stem("regularity"), "regular" );
	deepEqual( Stem("regularly"), "regular" );
	deepEqual( Stem("regulars"), "regular" );
	deepEqual( Stem("regulate"), "regul" );
	deepEqual( Stem("regulated"), "regul" );
	deepEqual( Stem("regulates"), "regul" );
	deepEqual( Stem("regulating"), "regul" );
	deepEqual( Stem("regulation"), "regul" );
	deepEqual( Stem("rehearsal"), "rehears" );
	deepEqual( Stem("rehearse"), "rehears" );
	deepEqual( Stem("rehearsed"), "rehears" );
	deepEqual( Stem("reid"), "reid" );
	deepEqual( Stem("reign"), "reign" );
	deepEqual( Stem("reigned"), "reign" );
	deepEqual( Stem("reigning"), "reign" );
	deepEqual( Stem("reigns"), "reign" );
	deepEqual( Stem("reimbursed"), "reimburs" );
	deepEqual( Stem("rein"), "rein" );
	deepEqual( Stem("reindeer"), "reindeer" );
	deepEqual( Stem("reined"), "rein" );
	deepEqual( Stem("reinforced"), "reinforc" );
	deepEqual( Stem("reining"), "rein" );
	deepEqual( Stem("reins"), "rein" );
	deepEqual( Stem("reinstated"), "reinstat" );
	deepEqual( Stem("reinstating"), "reinstat" );
	deepEqual( Stem("reiterated"), "reiter" );
	deepEqual( Stem("reiterates"), "reiter" );
	deepEqual( Stem("reiteration"), "reiter" );
	deepEqual( Stem("reithrodon"), "reithrodon" );
	deepEqual( Stem("reject"), "reject" );
	deepEqual( Stem("rejected"), "reject" );
	deepEqual( Stem("rejecting"), "reject" );
	deepEqual( Stem("rejection"), "reject" );
	deepEqual( Stem("rejects"), "reject" );
	deepEqual( Stem("rejoice"), "rejoic" );
	deepEqual( Stem("rejoiced"), "rejoic" );
	deepEqual( Stem("rejoices"), "rejoic" );
	deepEqual( Stem("rejoicing"), "rejoic" );
	deepEqual( Stem("rejoicings"), "rejoic" );
	deepEqual( Stem("rejoin"), "rejoin" );
	deepEqual( Stem("rejoinder"), "rejoind" );
	deepEqual( Stem("rejoinders"), "rejoind" );
	deepEqual( Stem("rejoined"), "rejoin" );
	deepEqual( Stem("rejoining"), "rejoin" );
	deepEqual( Stem("rejoins"), "rejoin" );
	deepEqual( Stem("rekindled"), "rekindl" );
	deepEqual( Stem("relapse"), "relaps" );
	deepEqual( Stem("relapsed"), "relaps" );
	deepEqual( Stem("relapses"), "relaps" );
	deepEqual( Stem("relapsing"), "relaps" );
	deepEqual( Stem("relate"), "relat" );
	deepEqual( Stem("related"), "relat" );
	deepEqual( Stem("relates"), "relat" );
	deepEqual( Stem("relating"), "relat" );
	deepEqual( Stem("relation"), "relat" );
	deepEqual( Stem("relations"), "relat" );
	deepEqual( Stem("relationship"), "relationship" );
	deepEqual( Stem("relative"), "relat" );
	deepEqual( Stem("relatively"), "relat" );
	deepEqual( Stem("relatives"), "relat" );
	deepEqual( Stem("relax"), "relax" );
	deepEqual( Stem("relaxation"), "relax" );
	deepEqual( Stem("relaxations"), "relax" );
	deepEqual( Stem("relaxe"), "relax" );
	deepEqual( Stem("relaxed"), "relax" );
	deepEqual( Stem("relaxes"), "relax" );
	deepEqual( Stem("relaxing"), "relax" );
	deepEqual( Stem("relays"), "relay" );
	deepEqual( Stem("release"), "releas" );
	deepEqual( Stem("released"), "releas" );
	deepEqual( Stem("releases"), "releas" );
	deepEqual( Stem("releasing"), "releas" );
	deepEqual( Stem("relent"), "relent" );
	deepEqual( Stem("relented"), "relent" );
	deepEqual( Stem("relenting"), "relent" );
	deepEqual( Stem("relentless"), "relentless" );
	deepEqual( Stem("relents"), "relent" );
	deepEqual( Stem("reliable"), "reliabl" );
	deepEqual( Stem("reliance"), "relianc" );
	deepEqual( Stem("reliant"), "reliant" );
	deepEqual( Stem("relic"), "relic" );
	deepEqual( Stem("relics"), "relic" );
	deepEqual( Stem("relict"), "relict" );
	deepEqual( Stem("relied"), "reli" );
	deepEqual( Stem("relief"), "relief" );
	deepEqual( Stem("reliefs"), "relief" );
	deepEqual( Stem("relies"), "reli" );
	deepEqual( Stem("relieve"), "reliev" );
	deepEqual( Stem("relieved"), "reliev" );
	deepEqual( Stem("relieves"), "reliev" );
	deepEqual( Stem("relieving"), "reliev" );
	deepEqual( Stem("religion"), "religion" );
	deepEqual( Stem("religions"), "religion" );
	deepEqual( Stem("religious"), "religi" );
	deepEqual( Stem("religiously"), "religi" );
	deepEqual( Stem("relinquish"), "relinquish" );
	deepEqual( Stem("relinquished"), "relinquish" );
	deepEqual( Stem("relinquishing"), "relinquish" );
	deepEqual( Stem("relinquishment"), "relinquish" );
	deepEqual( Stem("reliques"), "reliqu" );
	deepEqual( Stem("relish"), "relish" );
	deepEqual( Stem("relished"), "relish" );
	deepEqual( Stem("relishing"), "relish" );
	deepEqual( Stem("reluctance"), "reluct" );
	deepEqual( Stem("reluctant"), "reluct" );
	deepEqual( Stem("reluctantly"), "reluct" );
	deepEqual( Stem("rely"), "reli" );
	deepEqual( Stem("relying"), "reli" );
	deepEqual( Stem("remain"), "remain" );
	deepEqual( Stem("remainder"), "remaind" );
	deepEqual( Stem("remaine"), "remain" );
	deepEqual( Stem("remained"), "remain" );
	deepEqual( Stem("remaining"), "remain" );
	deepEqual( Stem("remains"), "remain" );
	deepEqual( Stem("remand"), "remand" );
	deepEqual( Stem("remanded"), "remand" );
	deepEqual( Stem("remands"), "remand" );
	deepEqual( Stem("remark"), "remark" );
	deepEqual( Stem("remarkable"), "remark" );
	deepEqual( Stem("remarkably"), "remark" );
	deepEqual( Stem("remarked"), "remark" );
	deepEqual( Stem("remarkedly"), "remark" );
	deepEqual( Stem("remarking"), "remark" );
	deepEqual( Stem("remarks"), "remark" );
	deepEqual( Stem("remedies"), "remedi" );
	deepEqual( Stem("remedy"), "remedi" );
	deepEqual( Stem("remember"), "rememb" );
	deepEqual( Stem("remembered"), "rememb" );
	deepEqual( Stem("remembering"), "rememb" );
	deepEqual( Stem("remembers"), "rememb" );
	deepEqual( Stem("remembrance"), "remembr" );
	deepEqual( Stem("remembrances"), "remembr" );
	deepEqual( Stem("remensher"), "remensh" );
	deepEqual( Stem("remind"), "remind" );
	deepEqual( Stem("reminded"), "remind" );
	deepEqual( Stem("reminder"), "remind" );
	deepEqual( Stem("reminders"), "remind" );
	deepEqual( Stem("reminding"), "remind" );
	deepEqual( Stem("remindingmanfact"), "remindingmanfact" );
	deepEqual( Stem("reminds"), "remind" );
	deepEqual( Stem("reminiscence"), "reminisc" );
	deepEqual( Stem("reminiscences"), "reminisc" );
	deepEqual( Stem("reminiscent"), "reminisc" );
	deepEqual( Stem("remiss"), "remiss" );
	deepEqual( Stem("remit"), "remit" );
	deepEqual( Stem("remittance"), "remitt" );
	deepEqual( Stem("remitting"), "remit" );
	deepEqual( Stem("remnant"), "remnant" );
	deepEqual( Stem("remnants"), "remnant" );
	deepEqual( Stem("remonstrance"), "remonstr" );
	deepEqual( Stem("remonstrances"), "remonstr" );
	deepEqual( Stem("remonstrate"), "remonstr" );
	deepEqual( Stem("remonstrated"), "remonstr" );
	deepEqual( Stem("remonstrates"), "remonstr" );
	deepEqual( Stem("remonstrating"), "remonstr" );
	deepEqual( Stem("remonstrative"), "remonstr" );
	deepEqual( Stem("remorse"), "remors" );
	deepEqual( Stem("remorseful"), "remors" );
	deepEqual( Stem("remote"), "remot" );
	deepEqual( Stem("remotely"), "remot" );
	deepEqual( Stem("remoteness"), "remot" );
	deepEqual( Stem("remotest"), "remotest" );
	deepEqual( Stem("remounted"), "remount" );
	deepEqual( Stem("removal"), "remov" );
	deepEqual( Stem("removals"), "remov" );
	deepEqual( Stem("remove"), "remov" );
	deepEqual( Stem("removed"), "remov" );
	deepEqual( Stem("removes"), "remov" );
	deepEqual( Stem("removing"), "remov" );
	deepEqual( Stem("remplir"), "remplir" );
	deepEqual( Stem("remunerate"), "remuner" );
	deepEqual( Stem("remunerated"), "remuner" );
	deepEqual( Stem("remuneration"), "remuner" );
	deepEqual( Stem("rend"), "rend" );
	deepEqual( Stem("render"), "render" );
	deepEqual( Stem("rendered"), "render" );
	deepEqual( Stem("rendering"), "render" );
	deepEqual( Stem("renders"), "render" );
	deepEqual( Stem("rendezvous"), "rendezv" );
	deepEqual( Stem("rending"), "rend" );
	deepEqual( Stem("rendus"), "rendus" );
	deepEqual( Stem("renegade"), "renegad" );
	deepEqual( Stem("renew"), "renew" );
	deepEqual( Stem("renewable"), "renew" );
	deepEqual( Stem("renewal"), "renew" );
	deepEqual( Stem("renewals"), "renew" );
	deepEqual( Stem("renewed"), "renew" );
	deepEqual( Stem("renewing"), "renew" );
	deepEqual( Stem("renews"), "renew" );
	deepEqual( Stem("rengger"), "rengger" );
	deepEqual( Stem("renounce"), "renounc" );
	deepEqual( Stem("renounced"), "renounc" );
	deepEqual( Stem("renouncing"), "renounc" );
	deepEqual( Stem("renous"), "renous" );
	deepEqual( Stem("renovation"), "renov" );
	deepEqual( Stem("renown"), "renown" );
	deepEqual( Stem("renowned"), "renown" );
	deepEqual( Stem("rent"), "rent" );
	deepEqual( Stem("rents"), "rent" );
	deepEqual( Stem("renunciation"), "renunci" );
	deepEqual( Stem("repacked"), "repack" );
	deepEqual( Stem("repaid"), "repaid" );
	deepEqual( Stem("repair"), "repair" );
	deepEqual( Stem("repaired"), "repair" );
	deepEqual( Stem("repairing"), "repair" );
	deepEqual( Stem("repairs"), "repair" );
	deepEqual( Stem("reparation"), "repar" );
	deepEqual( Stem("repartee"), "reparte" );
	deepEqual( Stem("repass"), "repass" );
	deepEqual( Stem("repassed"), "repass" );
	deepEqual( Stem("repassing"), "repass" );
	deepEqual( Stem("repast"), "repast" );
	deepEqual( Stem("repay"), "repay" );
	deepEqual( Stem("repaying"), "repay" );
	deepEqual( Stem("repayment"), "repay" );
	deepEqual( Stem("repays"), "repay" );
	deepEqual( Stem("repeal"), "repeal" );
	deepEqual( Stem("repealed"), "repeal" );
	deepEqual( Stem("repeat"), "repeat" );
	deepEqual( Stem("repeated"), "repeat" );
	deepEqual( Stem("repeatedly"), "repeat" );
	deepEqual( Stem("repeater"), "repeat" );
	deepEqual( Stem("repeating"), "repeat" );
	deepEqual( Stem("repeats"), "repeat" );
	deepEqual( Stem("repeatually"), "repeatu" );
	deepEqual( Stem("repel"), "repel" );
	deepEqual( Stem("repelled"), "repel" );
	deepEqual( Stem("repellent"), "repel" );
	deepEqual( Stem("repelling"), "repel" );
	deepEqual( Stem("repent"), "repent" );
	deepEqual( Stem("repentance"), "repent" );
	deepEqual( Stem("repentant"), "repent" );
	deepEqual( Stem("repented"), "repent" );
	deepEqual( Stem("repenteth"), "repenteth" );
	deepEqual( Stem("repenting"), "repent" );
	deepEqual( Stem("repents"), "repent" );
	deepEqual( Stem("reperusal"), "reperus" );
	deepEqual( Stem("repetition"), "repetit" );
	deepEqual( Stem("repetitions"), "repetit" );
	deepEqual( Stem("rephed"), "reph" );
	deepEqual( Stem("repine"), "repin" );
	deepEqual( Stem("repined"), "repin" );
	deepEqual( Stem("repines"), "repin" );
	deepEqual( Stem("repining"), "repin" );
	deepEqual( Stem("replace"), "replac" );
	deepEqual( Stem("replaced"), "replac" );
	deepEqual( Stem("replaces"), "replac" );
	deepEqual( Stem("replacing"), "replac" );
	deepEqual( Stem("replenishing"), "replenish" );
	deepEqual( Stem("replete"), "replet" );
	deepEqual( Stem("repletion"), "replet" );
	deepEqual( Stem("replied"), "repli" );
	deepEqual( Stem("replies"), "repli" );
	deepEqual( Stem("reply"), "repli" );
	deepEqual( Stem("replying"), "repli" );
	deepEqual( Stem("report"), "report" );
	deepEqual( Stem("reported"), "report" );
	deepEqual( Stem("reporter"), "report" );
	deepEqual( Stem("reporters"), "report" );
	deepEqual( Stem("reporting"), "report" );
	deepEqual( Stem("reports"), "report" );
	deepEqual( Stem("repose"), "repos" );
	deepEqual( Stem("reposed"), "repos" );
	deepEqual( Stem("reposes"), "repos" );
	deepEqual( Stem("reposing"), "repos" );
	deepEqual( Stem("repository"), "repositori" );
	deepEqual( Stem("repossess"), "repossess" );
	deepEqual( Stem("repossession"), "repossess" );
	deepEqual( Stem("reprehensible"), "reprehens" );
	deepEqual( Stem("reprehension"), "reprehens" );
	deepEqual( Stem("represent"), "repres" );
	deepEqual( Stem("representation"), "represent" );
	deepEqual( Stem("representations"), "represent" );
	deepEqual( Stem("representative"), "repres" );
	deepEqual( Stem("representatives"), "repres" );
	deepEqual( Stem("represented"), "repres" );
	deepEqual( Stem("representing"), "repres" );
	deepEqual( Stem("represents"), "repres" );
	deepEqual( Stem("repress"), "repress" );
	deepEqual( Stem("repressed"), "repress" );
	deepEqual( Stem("repressing"), "repress" );
	deepEqual( Stem("reprieve"), "repriev" );
	deepEqual( Stem("reprint"), "reprint" );
	deepEqual( Stem("reprinted"), "reprint" );
	deepEqual( Stem("reproach"), "reproach" );
	deepEqual( Stem("reproached"), "reproach" );
	deepEqual( Stem("reproaches"), "reproach" );
	deepEqual( Stem("reproachful"), "reproach" );
	deepEqual( Stem("reproachfully"), "reproach" );
	deepEqual( Stem("reproaching"), "reproach" );
	deepEqual( Stem("reprobate"), "reprob" );
	deepEqual( Stem("reprobates"), "reprob" );
	deepEqual( Stem("reprobation"), "reprob" );
	deepEqual( Stem("reproduce"), "reproduc" );
	deepEqual( Stem("reproduced"), "reproduc" );
	deepEqual( Stem("reproducing"), "reproduc" );
	deepEqual( Stem("reproof"), "reproof" );
	deepEqual( Stem("reproofs"), "reproof" );
	deepEqual( Stem("reprove"), "reprov" );
	deepEqual( Stem("reproved"), "reprov" );
	deepEqual( Stem("reprovingly"), "reprov" );
	deepEqual( Stem("reptile"), "reptil" );
	deepEqual( Stem("reptiles"), "reptil" );
	deepEqual( Stem("republic"), "republ" );
	deepEqual( Stem("republican"), "republican" );
	deepEqual( Stem("republicanism"), "republican" );
	deepEqual( Stem("republicans"), "republican" );
	deepEqual( Stem("republics"), "republ" );
	deepEqual( Stem("republished"), "republish" );
	deepEqual( Stem("repudiate"), "repudi" );
	deepEqual( Stem("repudiated"), "repudi" );
	deepEqual( Stem("repudiating"), "repudi" );
	deepEqual( Stem("repudiation"), "repudi" );
	deepEqual( Stem("repugnance"), "repugn" );
	deepEqual( Stem("repugnant"), "repugn" );
	deepEqual( Stem("repulse"), "repuls" );
	deepEqual( Stem("repulsed"), "repuls" );
	deepEqual( Stem("repulsion"), "repuls" );
	deepEqual( Stem("repulsive"), "repuls" );
	deepEqual( Stem("reputable"), "reput" );
	deepEqual( Stem("reputation"), "reput" );
	deepEqual( Stem("reputations"), "reput" );
	deepEqual( Stem("repute"), "reput" );
	deepEqual( Stem("reputed"), "reput" );
	deepEqual( Stem("request"), "request" );
	deepEqual( Stem("requested"), "request" );
	deepEqual( Stem("requesting"), "request" );
	deepEqual( Stem("requests"), "request" );
	deepEqual( Stem("requiem"), "requiem" );
	deepEqual( Stem("require"), "requir" );
	deepEqual( Stem("required"), "requir" );
	deepEqual( Stem("requirements"), "requir" );
	deepEqual( Stem("requires"), "requir" );
	deepEqual( Stem("requiring"), "requir" );
	deepEqual( Stem("requisite"), "requisit" );
	deepEqual( Stem("requisites"), "requisit" );
	deepEqual( Stem("requisition"), "requisit" );
	deepEqual( Stem("requite"), "requit" );
	deepEqual( Stem("reread"), "reread" );
	deepEqual( Stem("rescue"), "rescu" );
	deepEqual( Stem("rescued"), "rescu" );
	deepEqual( Stem("rescuers"), "rescuer" );
	deepEqual( Stem("rescuing"), "rescu" );
	deepEqual( Stem("research"), "research" );
	deepEqual( Stem("researches"), "research" );
	deepEqual( Stem("resemblance"), "resembl" );
	deepEqual( Stem("resemble"), "resembl" );
	deepEqual( Stem("resembled"), "resembl" );
	deepEqual( Stem("resembles"), "resembl" );
	deepEqual( Stem("resembling"), "resembl" );
	deepEqual( Stem("resent"), "resent" );
	deepEqual( Stem("resented"), "resent" );
	deepEqual( Stem("resentful"), "resent" );
	deepEqual( Stem("resentfully"), "resent" );
	deepEqual( Stem("resenting"), "resent" );
	deepEqual( Stem("resentment"), "resent" );
	deepEqual( Stem("resentments"), "resent" );
	deepEqual( Stem("resents"), "resent" );
	deepEqual( Stem("reservation"), "reserv" );
	deepEqual( Stem("reservations"), "reserv" );
	deepEqual( Stem("reserve"), "reserv" );
	deepEqual( Stem("reserved"), "reserv" );
	deepEqual( Stem("reserves"), "reserv" );
	deepEqual( Stem("reserving"), "reserv" );
	deepEqual( Stem("reservoir"), "reservoir" );
	deepEqual( Stem("reservoirs"), "reservoir" );
	deepEqual( Stem("resettles"), "resettl" );
	deepEqual( Stem("resfless"), "resfless" );
	deepEqual( Stem("reside"), "resid" );
	deepEqual( Stem("resided"), "resid" );
	deepEqual( Stem("residence"), "resid" );
	deepEqual( Stem("residences"), "resid" );
	deepEqual( Stem("resident"), "resid" );
	deepEqual( Stem("residents"), "resid" );
	deepEqual( Stem("resides"), "resid" );
	deepEqual( Stem("residing"), "resid" );
	deepEqual( Stem("residue"), "residu" );
	deepEqual( Stem("resign"), "resign" );
	deepEqual( Stem("resignation"), "resign" );
	deepEqual( Stem("resignations"), "resign" );
	deepEqual( Stem("resigned"), "resign" );
	deepEqual( Stem("resigning"), "resign" );
	deepEqual( Stem("resigns"), "resign" );
	deepEqual( Stem("resin"), "resin" );
	deepEqual( Stem("resinous"), "resin" );
	deepEqual( Stem("resist"), "resist" );
	deepEqual( Stem("resistance"), "resist" );
	deepEqual( Stem("resisted"), "resist" );
	deepEqual( Stem("resisting"), "resist" );
	deepEqual( Stem("resists"), "resist" );
	deepEqual( Stem("resoled"), "resol" );
	deepEqual( Stem("resolute"), "resolut" );
	deepEqual( Stem("resolutely"), "resolut" );
	deepEqual( Stem("resolution"), "resolut" );
	deepEqual( Stem("resolutions"), "resolut" );
	deepEqual( Stem("resolve"), "resolv" );
	deepEqual( Stem("resolved"), "resolv" );
	deepEqual( Stem("resolves"), "resolv" );
	deepEqual( Stem("resolving"), "resolv" );
	deepEqual( Stem("resonant"), "reson" );
	deepEqual( Stem("resort"), "resort" );
	deepEqual( Stem("resorted"), "resort" );
	deepEqual( Stem("resorting"), "resort" );
	deepEqual( Stem("resorts"), "resort" );
	deepEqual( Stem("resound"), "resound" );
	deepEqual( Stem("resounded"), "resound" );
	deepEqual( Stem("resounding"), "resound" );
	deepEqual( Stem("resource"), "resourc" );
	deepEqual( Stem("resourcefulness"), "resourc" );
	deepEqual( Stem("resources"), "resourc" );
	deepEqual( Stem("respect"), "respect" );
	deepEqual( Stem("respectabilities"), "respect" );
	deepEqual( Stem("respectability"), "respect" );
	deepEqual( Stem("respectable"), "respect" );
	deepEqual( Stem("respectably"), "respect" );
	deepEqual( Stem("respected"), "respect" );
	deepEqual( Stem("respectful"), "respect" );
	deepEqual( Stem("respectfully"), "respect" );
	deepEqual( Stem("respecting"), "respect" );
	deepEqual( Stem("respective"), "respect" );
	deepEqual( Stem("respectively"), "respect" );
	deepEqual( Stem("respects"), "respect" );
	deepEqual( Stem("respiration"), "respir" );
	deepEqual( Stem("respite"), "respit" );
	deepEqual( Stem("resplendent"), "resplend" );
	deepEqual( Stem("resplendently"), "resplend" );
	deepEqual( Stem("respond"), "respond" );
	deepEqual( Stem("responded"), "respond" );
	deepEqual( Stem("responding"), "respond" );
	deepEqual( Stem("responds"), "respond" );
	deepEqual( Stem("response"), "respons" );
	deepEqual( Stem("responsibilities"), "respons" );
	deepEqual( Stem("responsibility"), "respons" );
	deepEqual( Stem("responsible"), "respons" );
	deepEqual( Stem("responsive"), "respons" );
	deepEqual( Stem("resslich"), "resslich" );
	deepEqual( Stem("rest"), "rest" );
	deepEqual( Stem("restaurant"), "restaur" );
	deepEqual( Stem("restaurants"), "restaur" );
	deepEqual( Stem("rested"), "rest" );
	deepEqual( Stem("restful"), "rest" );
	deepEqual( Stem("resting"), "rest" );
	deepEqual( Stem("restitution"), "restitut" );
	deepEqual( Stem("restive"), "restiv" );
	deepEqual( Stem("restless"), "restless" );
	deepEqual( Stem("restlessly"), "restless" );
	deepEqual( Stem("restlessness"), "restless" );
	deepEqual( Stem("restoration"), "restor" );
	deepEqual( Stem("restorative"), "restor" );
	deepEqual( Stem("restoratives"), "restor" );
	deepEqual( Stem("restore"), "restor" );
	deepEqual( Stem("restored"), "restor" );
	deepEqual( Stem("restores"), "restor" );
	deepEqual( Stem("restoring"), "restor" );
	deepEqual( Stem("restrain"), "restrain" );
	deepEqual( Stem("restrained"), "restrain" );
	deepEqual( Stem("restraining"), "restrain" );
	deepEqual( Stem("restrains"), "restrain" );
	deepEqual( Stem("restraint"), "restraint" );
	deepEqual( Stem("restraints"), "restraint" );
	deepEqual( Stem("restrictions"), "restrict" );
	deepEqual( Stem("rests"), "rest" );
	deepEqual( Stem("resuit"), "resuit" );
	deepEqual( Stem("result"), "result" );
	deepEqual( Stem("resultant"), "result" );
	deepEqual( Stem("resulted"), "result" );
	deepEqual( Stem("resulting"), "result" );
	deepEqual( Stem("results"), "result" );
	deepEqual( Stem("resume"), "resum" );
	deepEqual( Stem("resumed"), "resum" );
	deepEqual( Stem("resumes"), "resum" );
	deepEqual( Stem("resuming"), "resum" );
	deepEqual( Stem("resumption"), "resumpt" );
	deepEqual( Stem("resurrected"), "resurrect" );
	deepEqual( Stem("resurrection"), "resurrect" );
	deepEqual( Stem("resurrections"), "resurrect" );
	deepEqual( Stem("resuscitated"), "resuscit" );
	deepEqual( Stem("retail"), "retail" );
	deepEqual( Stem("retain"), "retain" );
	deepEqual( Stem("retained"), "retain" );
	deepEqual( Stem("retainer"), "retain" );
	deepEqual( Stem("retainers"), "retain" );
	deepEqual( Stem("retaining"), "retain" );
	deepEqual( Stem("retains"), "retain" );
	deepEqual( Stem("retaliate"), "retali" );
	deepEqual( Stem("retaliated"), "retali" );
	deepEqual( Stem("retaliation"), "retali" );
	deepEqual( Stem("retard"), "retard" );
	deepEqual( Stem("retarded"), "retard" );
	deepEqual( Stem("retches"), "retch" );
	deepEqual( Stem("retention"), "retent" );
	deepEqual( Stem("reticence"), "retic" );
	deepEqual( Stem("reticent"), "retic" );
	deepEqual( Stem("reticles"), "reticl" );
	deepEqual( Stem("reticule"), "reticul" );
	deepEqual( Stem("reticules"), "reticul" );
	deepEqual( Stem("retinue"), "retinu" );
	deepEqual( Stem("retire"), "retir" );
	deepEqual( Stem("retired"), "retir" );
	deepEqual( Stem("retirement"), "retir" );
	deepEqual( Stem("retirements"), "retir" );
	deepEqual( Stem("retires"), "retir" );
	deepEqual( Stem("retiring"), "retir" );
	deepEqual( Stem("retored"), "retor" );
	deepEqual( Stem("retort"), "retort" );
	deepEqual( Stem("retorted"), "retort" );
	deepEqual( Stem("retorting"), "retort" );
	deepEqual( Stem("retorts"), "retort" );
	deepEqual( Stem("retouching"), "retouch" );
	deepEqual( Stem("retrace"), "retrac" );
	deepEqual( Stem("retraced"), "retrac" );
	deepEqual( Stem("retraces"), "retrac" );
	deepEqual( Stem("retract"), "retract" );
	deepEqual( Stem("retracted"), "retract" );
	deepEqual( Stem("retraction"), "retract" );
	deepEqual( Stem("retreat"), "retreat" );
	deepEqual( Stem("retreated"), "retreat" );
	deepEqual( Stem("retreating"), "retreat" );
	deepEqual( Stem("retreats"), "retreat" );
	deepEqual( Stem("retrenchment"), "retrench" );
	deepEqual( Stem("retrenchments"), "retrench" );
	deepEqual( Stem("retribution"), "retribut" );
	deepEqual( Stem("retributive"), "retribut" );
	deepEqual( Stem("retrievable"), "retriev" );
	deepEqual( Stem("retrieve"), "retriev" );
	deepEqual( Stem("retrieved"), "retriev" );
	deepEqual( Stem("retrieving"), "retriev" );
	deepEqual( Stem("retrograde"), "retrograd" );
	deepEqual( Stem("retrograding"), "retrograd" );
	deepEqual( Stem("retrorsum"), "retrorsum" );
	deepEqual( Stem("retrospect"), "retrospect" );
	deepEqual( Stem("retrospective"), "retrospect" );
	deepEqual( Stem("return"), "return" );
	deepEqual( Stem("returned"), "return" );
	deepEqual( Stem("returning"), "return" );
	deepEqual( Stem("returns"), "return" );
	deepEqual( Stem("retzch"), "retzch" );
	deepEqual( Stem("reunion"), "reunion" );
	deepEqual( Stem("rev"), "rev" );
	deepEqual( Stem("reveal"), "reveal" );
	deepEqual( Stem("revealed"), "reveal" );
	deepEqual( Stem("revealing"), "reveal" );
	deepEqual( Stem("revel"), "revel" );
	deepEqual( Stem("revelation"), "revel" );
	deepEqual( Stem("revelations"), "revel" );
	deepEqual( Stem("revelled"), "revel" );
	deepEqual( Stem("revellers"), "revel" );
	deepEqual( Stem("revelling"), "revel" );
	deepEqual( Stem("revelry"), "revelri" );
	deepEqual( Stem("revels"), "revel" );
	deepEqual( Stem("revenge"), "reveng" );
	deepEqual( Stem("revenged"), "reveng" );
	deepEqual( Stem("revengeful"), "reveng" );
	deepEqual( Stem("revenges"), "reveng" );
	deepEqual( Stem("revenging"), "reveng" );
	deepEqual( Stem("revenue"), "revenu" );
	deepEqual( Stem("reverberate"), "reverber" );
	deepEqual( Stem("reverberated"), "reverber" );
	deepEqual( Stem("reverberates"), "reverber" );
	deepEqual( Stem("reverberating"), "reverber" );
	deepEqual( Stem("reverberation"), "reverber" );
	deepEqual( Stem("revered"), "rever" );
	deepEqual( Stem("reverence"), "rever" );
	deepEqual( Stem("reverenced"), "reverenc" );
	deepEqual( Stem("reverend"), "reverend" );
	deepEqual( Stem("reverends"), "reverend" );
	deepEqual( Stem("reverent"), "rever" );
	deepEqual( Stem("reverential"), "reverenti" );
	deepEqual( Stem("reverentially"), "reverenti" );
	deepEqual( Stem("reverently"), "rever" );
	deepEqual( Stem("reverie"), "reveri" );
	deepEqual( Stem("reversal"), "revers" );
	deepEqual( Stem("reverse"), "revers" );
	deepEqual( Stem("reversed"), "revers" );
	deepEqual( Stem("reverses"), "revers" );
	deepEqual( Stem("reversion"), "revers" );
	deepEqual( Stem("revert"), "revert" );
	deepEqual( Stem("reverted"), "revert" );
	deepEqual( Stem("reverting"), "revert" );
	deepEqual( Stem("reverts"), "revert" );
	deepEqual( Stem("reviendra"), "reviendra" );
	deepEqual( Stem("review"), "review" );
	deepEqual( Stem("reviewal"), "review" );
	deepEqual( Stem("reviewing"), "review" );
	deepEqual( Stem("reviews"), "review" );
	deepEqual( Stem("revile"), "revil" );
	deepEqual( Stem("reviled"), "revil" );
	deepEqual( Stem("reviling"), "revil" );
	deepEqual( Stem("revilings"), "revil" );
	deepEqual( Stem("revise"), "revis" );
	deepEqual( Stem("revision"), "revis" );
	deepEqual( Stem("revisit"), "revisit" );
	deepEqual( Stem("revisited"), "revisit" );
	deepEqual( Stem("revival"), "reviv" );
	deepEqual( Stem("revive"), "reviv" );
	deepEqual( Stem("revived"), "reviv" );
	deepEqual( Stem("reviving"), "reviv" );
	deepEqual( Stem("revivingly"), "reviv" );
	deepEqual( Stem("revoke"), "revok" );
	deepEqual( Stem("revoked"), "revok" );
	deepEqual( Stem("revolt"), "revolt" );
	deepEqual( Stem("revolted"), "revolt" );
	deepEqual( Stem("revolting"), "revolt" );
	deepEqual( Stem("revolts"), "revolt" );
	deepEqual( Stem("revolution"), "revolut" );
	deepEqual( Stem("revolutionary"), "revolutionari" );
	deepEqual( Stem("revolutionist"), "revolutionist" );
	deepEqual( Stem("revolutionized"), "revolution" );
	deepEqual( Stem("revolutions"), "revolut" );
	deepEqual( Stem("revolve"), "revolv" );
	deepEqual( Stem("revolved"), "revolv" );
	deepEqual( Stem("revolver"), "revolv" );
	deepEqual( Stem("revolves"), "revolv" );
	deepEqual( Stem("revolving"), "revolv" );
	deepEqual( Stem("revulsion"), "revuls" );
	deepEqual( Stem("reward"), "reward" );
	deepEqual( Stem("rewarded"), "reward" );
	deepEqual( Stem("rewarding"), "reward" );
	deepEqual( Stem("rewards"), "reward" );
	deepEqual( Stem("rewashed"), "rewash" );
	deepEqual( Stem("rex"), "rex" );
	deepEqual( Stem("rexes"), "rex" );
	deepEqual( Stem("rhapsody"), "rhapsodi" );
	deepEqual( Stem("rhea"), "rhea" );
	deepEqual( Stem("rheims"), "rheim" );
	deepEqual( Stem("rhetoric"), "rhetor" );
	deepEqual( Stem("rheumatic"), "rheumat" );
	deepEqual( Stem("rheumatics"), "rheumat" );
	deepEqual( Stem("rheumatism"), "rheumat" );
	deepEqual( Stem("rhine"), "rhine" );
	deepEqual( Stem("rhinoceros"), "rhinocero" );
	deepEqual( Stem("rhinoceroses"), "rhinoceros" );
	deepEqual( Stem("rhododendron"), "rhododendron" );
	deepEqual( Stem("rhododendrons"), "rhododendron" );
	deepEqual( Stem("rhubarb"), "rhubarb" );
	deepEqual( Stem("rhyme"), "rhyme" );
	deepEqual( Stem("rhymes"), "rhyme" );
	deepEqual( Stem("rhynchops"), "rhynchop" );
	deepEqual( Stem("rhyncophora"), "rhyncophora" );
	deepEqual( Stem("rhythmically"), "rhythmic" );
	deepEqual( Stem("ri"), "ri" );
	deepEqual( Stem("rib"), "rib" );
	deepEqual( Stem("ribbed"), "rib" );
	deepEqual( Stem("ribbentrop"), "ribbentrop" );
	deepEqual( Stem("ribbon"), "ribbon" );
	deepEqual( Stem("ribbons"), "ribbon" );
	deepEqual( Stem("ribeira"), "ribeira" );
	deepEqual( Stem("ribs"), "rib" );
	deepEqual( Stem("rice"), "rice" );
	deepEqual( Stem("rich"), "rich" );
	deepEqual( Stem("richard"), "richard" );
	deepEqual( Stem("richardson"), "richardson" );
	deepEqual( Stem("richer"), "richer" );
	deepEqual( Stem("riches"), "rich" );
	deepEqual( Stem("richest"), "richest" );
	deepEqual( Stem("richly"), "rich" );
	deepEqual( Stem("richmond"), "richmond" );
	deepEqual( Stem("richness"), "rich" );
	deepEqual( Stem("rick"), "rick" );
	deepEqual( Stem("rickety"), "ricketi" );
	deepEqual( Stem("rickworth"), "rickworth" );
	deepEqual( Stem("rid"), "rid" );
	deepEqual( Stem("riddance"), "riddanc" );
	deepEqual( Stem("ridden"), "ridden" );
	deepEqual( Stem("ridding"), "rid" );
	deepEqual( Stem("riddle"), "riddl" );
	deepEqual( Stem("riddles"), "riddl" );
	deepEqual( Stem("ride"), "ride" );
	deepEqual( Stem("ridendus"), "ridendus" );
	deepEqual( Stem("rider"), "rider" );
	deepEqual( Stem("riders"), "rider" );
	deepEqual( Stem("rides"), "ride" );
	deepEqual( Stem("ridg"), "ridg" );
	deepEqual( Stem("ridge"), "ridg" );
	deepEqual( Stem("ridges"), "ridg" );
	deepEqual( Stem("ridicule"), "ridicul" );
	deepEqual( Stem("ridiculed"), "ridicul" );
	deepEqual( Stem("ridiculous"), "ridicul" );
	deepEqual( Stem("ridiculously"), "ridicul" );
	deepEqual( Stem("riding"), "ride" );
	deepEqual( Stem("ridinghood"), "ridinghood" );
	deepEqual( Stem("rife"), "rife" );
	deepEqual( Stem("riff"), "riff" );
	deepEqual( Stem("rifle"), "rifl" );
	deepEqual( Stem("rifles"), "rifl" );
	deepEqual( Stem("rifling"), "rifl" );
	deepEqual( Stem("rig"), "rig" );
	deepEqual( Stem("rigamarole"), "rigamarol" );
	deepEqual( Stem("riggers"), "rigger" );
	deepEqual( Stem("rigging"), "rig" );
	deepEqual( Stem("right"), "right" );
	deepEqual( Stem("righted"), "right" );
	deepEqual( Stem("righteous"), "righteous" );
	deepEqual( Stem("righteousness"), "righteous" );
	deepEqual( Stem("rightly"), "right" );
	deepEqual( Stem("rights"), "right" );
	deepEqual( Stem("rigid"), "rigid" );
	deepEqual( Stem("rigidity"), "rigid" );
	deepEqual( Stem("rigidly"), "rigid" );
	deepEqual( Stem("rigorous"), "rigor" );
	deepEqual( Stem("rigour"), "rigour" );
	deepEqual( Stem("rigueur"), "rigueur" );
	deepEqual( Stem("rill"), "rill" );
	deepEqual( Stem("rim"), "rim" );
	deepEqual( Stem("rims"), "rim" );
	deepEqual( Stem("rimsky"), "rimski" );
	deepEqual( Stem("rincon"), "rincon" );
	deepEqual( Stem("ring"), "ring" );
	deepEqual( Stem("ringed"), "ring" );
	deepEqual( Stem("ringer"), "ringer" );
	deepEqual( Stem("ringing"), "ring" );
	deepEqual( Stem("ringleaders"), "ringlead" );
	deepEqual( Stem("ringlets"), "ringlet" );
	deepEqual( Stem("rings"), "ring" );
	deepEqual( Stem("rinse"), "rins" );
	deepEqual( Stem("rinsing"), "rins" );
	deepEqual( Stem("rio"), "rio" );
	deepEqual( Stem("rios"), "rio" );
	deepEqual( Stem("riot"), "riot" );
	deepEqual( Stem("riotous"), "riotous" );
	deepEqual( Stem("rip"), "rip" );
	deepEqual( Stem("ripe"), "ripe" );
	deepEqual( Stem("ripen"), "ripen" );
	deepEqual( Stem("ripened"), "ripen" );
	deepEqual( Stem("ripening"), "ripen" );
	deepEqual( Stem("ripens"), "ripen" );
	deepEqual( Stem("ripped"), "rip" );
	deepEqual( Stem("ripple"), "rippl" );
	deepEqual( Stem("rippled"), "rippl" );
	deepEqual( Stem("ripples"), "rippl" );
	deepEqual( Stem("rippling"), "rippl" );
	deepEqual( Stem("rise"), "rise" );
	deepEqual( Stem("risen"), "risen" );
	deepEqual( Stem("risers"), "riser" );
	deepEqual( Stem("rises"), "rise" );
	deepEqual( Stem("risible"), "risibl" );
	deepEqual( Stem("risin"), "risin" );
	deepEqual( Stem("rising"), "rise" );
	deepEqual( Stem("risingham"), "risingham" );
	deepEqual( Stem("risk"), "risk" );
	deepEqual( Stem("risked"), "risk" );
	deepEqual( Stem("risking"), "risk" );
	deepEqual( Stem("risks"), "risk" );
	deepEqual( Stem("risky"), "riski" );
	deepEqual( Stem("rite"), "rite" );
	deepEqual( Stem("rites"), "rite" );
	deepEqual( Stem("rival"), "rival" );
	deepEqual( Stem("rivalled"), "rival" );
	deepEqual( Stem("rivalry"), "rivalri" );
	deepEqual( Stem("rivals"), "rival" );
	deepEqual( Stem("rivalship"), "rivalship" );
	deepEqual( Stem("rive"), "rive" );
	deepEqual( Stem("river"), "river" );
	deepEqual( Stem("rivers"), "river" );
	deepEqual( Stem("rivet"), "rivet" );
	deepEqual( Stem("riveted"), "rivet" );
	deepEqual( Stem("riveting"), "rivet" );
	deepEqual( Stem("rivetted"), "rivet" );
	deepEqual( Stem("riviere"), "rivier" );
	deepEqual( Stem("rivoli"), "rivoli" );
	deepEqual( Stem("rivulet"), "rivulet" );
	deepEqual( Stem("rivulets"), "rivulet" );
	deepEqual( Stem("ro"), "ro" );
	deepEqual( Stem("road"), "road" );
	deepEqual( Stem("roads"), "road" );
	deepEqual( Stem("roadside"), "roadsid" );
	deepEqual( Stem("roam"), "roam" );
	deepEqual( Stem("roamed"), "roam" );
	deepEqual( Stem("roaming"), "roam" );
	deepEqual( Stem("roams"), "roam" );
	deepEqual( Stem("roan"), "roan" );
	deepEqual( Stem("roar"), "roar" );
	deepEqual( Stem("roared"), "roar" );
	deepEqual( Stem("roarer"), "roarer" );
	deepEqual( Stem("roaring"), "roar" );
	deepEqual( Stem("roast"), "roast" );
	deepEqual( Stem("roasted"), "roast" );
	deepEqual( Stem("roasting"), "roast" );
	deepEqual( Stem("rob"), "rob" );
	deepEqual( Stem("robbed"), "rob" );
	deepEqual( Stem("robber"), "robber" );
	deepEqual( Stem("robberies"), "robberi" );
	deepEqual( Stem("robbers"), "robber" );
	deepEqual( Stem("robbery"), "robberi" );
	deepEqual( Stem("robbing"), "rob" );
	deepEqual( Stem("robe"), "robe" );
	deepEqual( Stem("robed"), "robe" );
	deepEqual( Stem("robert"), "robert" );
	deepEqual( Stem("roberto"), "roberto" );
	deepEqual( Stem("robes"), "robe" );
	deepEqual( Stem("robin"), "robin" );
	deepEqual( Stem("robing"), "robe" );
	deepEqual( Stem("robinson"), "robinson" );
	deepEqual( Stem("robs"), "rob" );
	deepEqual( Stem("robust"), "robust" );
	deepEqual( Stem("robustly"), "robust" );
	deepEqual( Stem("robustus"), "robustus" );
	deepEqual( Stem("roby"), "robi" );
	deepEqual( Stem("robys"), "robi" );
	deepEqual( Stem("rochester"), "rochest" );
	deepEqual( Stem("rock"), "rock" );
	deepEqual( Stem("rocked"), "rock" );
	deepEqual( Stem("rocket"), "rocket" );
	deepEqual( Stem("rockets"), "rocket" );
	deepEqual( Stem("rocking"), "rock" );
	deepEqual( Stem("rocks"), "rock" );
	deepEqual( Stem("rocky"), "rocki" );
	deepEqual( Stem("rod"), "rod" );
	deepEqual( Stem("rode"), "rode" );
	deepEqual( Stem("rodent"), "rodent" );
	deepEqual( Stem("rodentia"), "rodentia" );
	deepEqual( Stem("rodents"), "rodent" );
	deepEqual( Stem("rodeo"), "rodeo" );
	deepEqual( Stem("rodion"), "rodion" );
	deepEqual( Stem("rodionovitch"), "rodionovitch" );
	deepEqual( Stem("rods"), "rod" );
	deepEqual( Stem("rodya"), "rodya" );
	deepEqual( Stem("roe"), "roe" );
	deepEqual( Stem("roger"), "roger" );
	deepEqual( Stem("rogers"), "roger" );
	deepEqual( Stem("rogue"), "rogu" );
	deepEqual( Stem("roguery"), "rogueri" );
	deepEqual( Stem("rogues"), "rogu" );
	deepEqual( Stem("roi"), "roi" );
	deepEqual( Stem("rokeby"), "rokebi" );
	deepEqual( Stem("role"), "role" );
	deepEqual( Stem("roles"), "role" );
	deepEqual( Stem("roll"), "roll" );
	deepEqual( Stem("rolle"), "roll" );
	deepEqual( Stem("rolled"), "roll" );
	deepEqual( Stem("roller"), "roller" );
	deepEqual( Stem("rollicking"), "rollick" );
	deepEqual( Stem("rolling"), "roll" );
	deepEqual( Stem("rollings"), "roll" );
	deepEqual( Stem("rolls"), "roll" );
	deepEqual( Stem("rolor"), "rolor" );
	deepEqual( Stem("roman"), "roman" );
	deepEqual( Stem("romance"), "romanc" );
	deepEqual( Stem("romancing"), "romanc" );
	deepEqual( Stem("romanovitch"), "romanovitch" );
	deepEqual( Stem("romanovna"), "romanovna" );
	deepEqual( Stem("romans"), "roman" );
	deepEqual( Stem("romantic"), "romant" );
	deepEqual( Stem("romantically"), "romant" );
	deepEqual( Stem("rome"), "rome" );
	deepEqual( Stem("romeo"), "romeo" );
	deepEqual( Stem("romish"), "romish" );
	deepEqual( Stem("romp"), "romp" );
	deepEqual( Stem("romping"), "romp" );
	deepEqual( Stem("roof"), "roof" );
	deepEqual( Stem("roofed"), "roof" );
	deepEqual( Stem("roofs"), "roof" );
	deepEqual( Stem("rooge"), "roog" );
	deepEqual( Stem("rook"), "rook" );
	deepEqual( Stem("rookery"), "rookeri" );
	deepEqual( Stem("rookh"), "rookh" );
	deepEqual( Stem("rooks"), "rook" );
	deepEqual( Stem("room"), "room" );
	deepEqual( Stem("roomed"), "room" );
	deepEqual( Stem("roomer"), "roomer" );
	deepEqual( Stem("rooms"), "room" );
	deepEqual( Stem("roomy"), "roomi" );
	deepEqual( Stem("roon"), "roon" );
	deepEqual( Stem("roonaway"), "roonaway" );
	deepEqual( Stem("roosher"), "roosher" );
	deepEqual( Stem("roost"), "roost" );
	deepEqual( Stem("roosting"), "roost" );
	deepEqual( Stem("root"), "root" );
	deepEqual( Stem("rooted"), "root" );
	deepEqual( Stem("rooteth"), "rooteth" );
	deepEqual( Stem("roots"), "root" );
	deepEqual( Stem("rope"), "rope" );
	deepEqual( Stem("ropemakers"), "ropemak" );
	deepEqual( Stem("ropes"), "rope" );
	deepEqual( Stem("rosa"), "rosa" );
	deepEqual( Stem("rosary"), "rosari" );
	deepEqual( Stem("rosas"), "rosa" );
	deepEqual( Stem("rose"), "rose" );
	deepEqual( Stem("roseate"), "roseat" );
	deepEqual( Stem("rosebud"), "rosebud" );
	deepEqual( Stem("roses"), "rose" );
	deepEqual( Stem("rosettes"), "rosett" );
	deepEqual( Stem("rosewood"), "rosewood" );
	deepEqual( Stem("rosina"), "rosina" );
	deepEqual( Stem("rosinas"), "rosina" );
	deepEqual( Stem("ross"), "ross" );
	deepEqual( Stem("rosy"), "rosi" );
	deepEqual( Stem("rot"), "rot" );
	deepEqual( Stem("rotation"), "rotat" );
	deepEqual( Stem("rotatory"), "rotatori" );
	deepEqual( Stem("rote"), "rote" );
	deepEqual( Stem("rotted"), "rot" );
	deepEqual( Stem("rotten"), "rotten" );
	deepEqual( Stem("rottenness"), "rotten" );
	deepEqual( Stem("rotting"), "rot" );
	deepEqual( Stem("rouble"), "roubl" );
	deepEqual( Stem("roubles"), "roubl" );
	deepEqual( Stem("roue"), "roue" );
	deepEqual( Stem("rouge"), "roug" );
	deepEqual( Stem("rouged"), "roug" );
	deepEqual( Stem("rough"), "rough" );
	deepEqual( Stem("roughening"), "roughen" );
	deepEqual( Stem("rougher"), "rougher" );
	deepEqual( Stem("roughest"), "roughest" );
	deepEqual( Stem("roughing"), "rough" );
	deepEqual( Stem("roughly"), "rough" );
	deepEqual( Stem("roughness"), "rough" );
	deepEqual( Stem("roughs"), "rough" );
	deepEqual( Stem("roulette"), "roulett" );
	deepEqual( Stem("rounceweil"), "rounceweil" );
	deepEqual( Stem("rouncewell"), "rouncewel" );
	deepEqual( Stem("rouncewells"), "rouncewel" );
	deepEqual( Stem("round"), "round" );
	deepEqual( Stem("roundabout"), "roundabout" );
	deepEqual( Stem("rounde"), "round" );
	deepEqual( Stem("rounded"), "round" );
	deepEqual( Stem("rounder"), "rounder" );
	deepEqual( Stem("roundest"), "roundest" );
	deepEqual( Stem("rounding"), "round" );
	deepEqual( Stem("roundly"), "round" );
	deepEqual( Stem("roundness"), "round" );
	deepEqual( Stem("rounds"), "round" );
	deepEqual( Stem("rouse"), "rous" );
	deepEqual( Stem("roused"), "rous" );
	deepEqual( Stem("rousing"), "rous" );
	deepEqual( Stem("rousseau"), "rousseau" );
	deepEqual( Stem("rout"), "rout" );
	deepEqual( Stem("route"), "rout" );
	deepEqual( Stem("routed"), "rout" );
	deepEqual( Stem("routes"), "rout" );
	deepEqual( Stem("routine"), "routin" );
	deepEqual( Stem("rover"), "rover" );
	deepEqual( Stem("roving"), "rove" );
	deepEqual( Stem("row"), "row" );
	deepEqual( Stem("rowed"), "row" );
	deepEqual( Stem("rowel"), "rowel" );
	deepEqual( Stem("rowing"), "row" );
	deepEqual( Stem("rowland"), "rowland" );
	deepEqual( Stem("rowling"), "rowl" );
	deepEqual( Stem("rows"), "row" );
	deepEqual( Stem("roy"), "roy" );
	deepEqual( Stem("royal"), "royal" );
	deepEqual( Stem("royalists"), "royalist" );
	deepEqual( Stem("royalty"), "royalti" );
	deepEqual( Stem("roystering"), "royster" );
	deepEqual( Stem("royston"), "royston" );
	deepEqual( Stem("rozario"), "rozario" );
	deepEqual( Stem("rt"), "rt" );
	deepEqual( Stem("ruat"), "ruat" );
	deepEqual( Stem("rub"), "rub" );
	deepEqual( Stem("rubbed"), "rub" );
	deepEqual( Stem("rubber"), "rubber" );
	deepEqual( Stem("rubbers"), "rubber" );
	deepEqual( Stem("rubbing"), "rub" );
	deepEqual( Stem("rubbish"), "rubbish" );
	deepEqual( Stem("rubbishing"), "rubbish" );
	deepEqual( Stem("rubbishly"), "rubbish" );
	deepEqual( Stem("rubecula"), "rubecula" );
	deepEqual( Stem("rubicund"), "rubicund" );
	deepEqual( Stem("rubies"), "rubi" );
	deepEqual( Stem("rubinstein"), "rubinstein" );
	deepEqual( Stem("rubrum"), "rubrum" );
	deepEqual( Stem("rubs"), "rub" );
	deepEqual( Stem("ruby"), "rubi" );
	deepEqual( Stem("ruck"), "ruck" );
	deepEqual( Stem("ruddier"), "ruddier" );
	deepEqual( Stem("ruddle"), "ruddl" );
	deepEqual( Stem("ruddy"), "ruddi" );
	deepEqual( Stem("rude"), "rude" );
	deepEqual( Stem("rudely"), "rude" );
	deepEqual( Stem("rudeness"), "rude" );
	deepEqual( Stem("ruder"), "ruder" );
	deepEqual( Stem("rudest"), "rudest" );
	deepEqual( Stem("rudimentary"), "rudimentari" );
	deepEqual( Stem("rudiments"), "rudiment" );
	deepEqual( Stem("rue"), "rue" );
	deepEqual( Stem("rueful"), "rueful" );
	deepEqual( Stem("ruefully"), "ruefulli" );
	deepEqual( Stem("ruff"), "ruff" );
	deepEqual( Stem("ruffian"), "ruffian" );
	deepEqual( Stem("ruffianly"), "ruffian" );
	deepEqual( Stem("ruffians"), "ruffian" );
	deepEqual( Stem("ruffle"), "ruffl" );
	deepEqual( Stem("ruffled"), "ruffl" );
	deepEqual( Stem("rug"), "rug" );
	deepEqual( Stem("rugged"), "rug" );
	deepEqual( Stem("rugs"), "rug" );
	deepEqual( Stem("ruin"), "ruin" );
	deepEqual( Stem("ruinas"), "ruina" );
	deepEqual( Stem("ruined"), "ruin" );
	deepEqual( Stem("ruining"), "ruin" );
	deepEqual( Stem("ruinous"), "ruinous" );
	deepEqual( Stem("ruins"), "ruin" );
	deepEqual( Stem("rule"), "rule" );
	deepEqual( Stem("ruled"), "rule" );
	deepEqual( Stem("ruler"), "ruler" );
	deepEqual( Stem("rulers"), "ruler" );
	deepEqual( Stem("rules"), "rule" );
	deepEqual( Stem("ruling"), "rule" );
	deepEqual( Stem("rum"), "rum" );
	deepEqual( Stem("rumble"), "rumbl" );
	deepEqual( Stem("rumbled"), "rumbl" );
	deepEqual( Stem("rumbling"), "rumbl" );
	deepEqual( Stem("rumicivorus"), "rumicivorus" );
	deepEqual( Stem("ruminant"), "rumin" );
	deepEqual( Stem("ruminants"), "rumin" );
	deepEqual( Stem("ruminate"), "rumin" );
	deepEqual( Stem("ruminated"), "rumin" );
	deepEqual( Stem("ruminates"), "rumin" );
	deepEqual( Stem("ruminating"), "rumin" );
	deepEqual( Stem("ruminations"), "rumin" );
	deepEqual( Stem("rummage"), "rummag" );
	deepEqual( Stem("rummaged"), "rummag" );
	deepEqual( Stem("rummaging"), "rummag" );
	deepEqual( Stem("rummest"), "rummest" );
	deepEqual( Stem("rummiest"), "rummiest" );
	deepEqual( Stem("rummy"), "rummi" );
	deepEqual( Stem("rumour"), "rumour" );
	deepEqual( Stem("rumoured"), "rumour" );
	deepEqual( Stem("rumours"), "rumour" );
	deepEqual( Stem("rumpling"), "rumpl" );
	deepEqual( Stem("rums"), "rum" );
	deepEqual( Stem("run"), "run" );
	deepEqual( Stem("runaway"), "runaway" );
	deepEqual( Stem("runaways"), "runaway" );
	deepEqual( Stem("rung"), "rung" );
	deepEqual( Stem("running"), "run" );
	deepEqual( Stem("runs"), "run" );
	deepEqual( Stem("rupture"), "ruptur" );
	deepEqual( Stem("ruptured"), "ruptur" );
	deepEqual( Stem("rural"), "rural" );
	deepEqual( Stem("rush"), "rush" );
	deepEqual( Stem("rushed"), "rush" );
	deepEqual( Stem("rushes"), "rush" );
	deepEqual( Stem("rushing"), "rush" );
	deepEqual( Stem("rushlight"), "rushlight" );
	deepEqual( Stem("russell"), "russel" );
	deepEqual( Stem("russet"), "russet" );
	deepEqual( Stem("russia"), "russia" );
	deepEqual( Stem("russian"), "russian" );
	deepEqual( Stem("russians"), "russian" );
	deepEqual( Stem("rust"), "rust" );
	deepEqual( Stem("rusted"), "rust" );
	deepEqual( Stem("rustic"), "rustic" );
	deepEqual( Stem("rusticated"), "rustic" );
	deepEqual( Stem("rusticities"), "rustic" );
	deepEqual( Stem("rustily"), "rustili" );
	deepEqual( Stem("rusting"), "rust" );
	deepEqual( Stem("rustle"), "rustl" );
	deepEqual( Stem("rustled"), "rustl" );
	deepEqual( Stem("rustling"), "rustl" );
	deepEqual( Stem("rusty"), "rusti" );
	deepEqual( Stem("rut"), "rut" );
	deepEqual( Stem("ruthlessly"), "ruthless" );
	deepEqual( Stem("ry"), "ry" );
	deepEqual( Stem("ryazan"), "ryazan" );
	deepEqual( Stem("ryde"), "ryde" );
	deepEqual( Stem("rylstone"), "rylston" );
	deepEqual( Stem("s"), "s" );
	deepEqual( Stem("sa"), "sa" );
	deepEqual( Stem("sabbatarian"), "sabbatarian" );
	deepEqual( Stem("sabbath"), "sabbath" );
	deepEqual( Stem("sabe"), "sabe" );
	deepEqual( Stem("sabine"), "sabin" );
	deepEqual( Stem("sable"), "sabl" );
	deepEqual( Stem("sabre"), "sabr" );
	deepEqual( Stem("sabres"), "sabr" );
	deepEqual( Stem("sac"), "sac" );
	deepEqual( Stem("sachet"), "sachet" );
	deepEqual( Stem("sack"), "sack" );
	deepEqual( Stem("sackcloth"), "sackcloth" );
	deepEqual( Stem("sackcloths"), "sackcloth" );
	deepEqual( Stem("sacked"), "sack" );
	deepEqual( Stem("sacking"), "sack" );
	deepEqual( Stem("sacks"), "sack" );
	deepEqual( Stem("sacrament"), "sacrament" );
	deepEqual( Stem("sacramiento"), "sacramiento" );
	deepEqual( Stem("sacred"), "sacr" );
	deepEqual( Stem("sacredly"), "sacr" );
	deepEqual( Stem("sacrifice"), "sacrific" );
	deepEqual( Stem("sacrificed"), "sacrif" );
	deepEqual( Stem("sacrifices"), "sacrific" );
	deepEqual( Stem("sacrificing"), "sacrif" );
	deepEqual( Stem("sacrilege"), "sacrileg" );
	deepEqual( Stem("sad"), "sad" );
	deepEqual( Stem("saddened"), "sadden" );
	deepEqual( Stem("saddening"), "sadden" );
	deepEqual( Stem("saddle"), "saddl" );
	deepEqual( Stem("saddled"), "saddl" );
	deepEqual( Stem("saddler"), "saddler" );
	deepEqual( Stem("saddling"), "saddl" );
	deepEqual( Stem("sadly"), "sad" );
	deepEqual( Stem("sadness"), "sad" );
	deepEqual( Stem("sadovy"), "sadovi" );
	deepEqual( Stem("saeugethiere"), "saeugethier" );
	deepEqual( Stem("safe"), "safe" );
	deepEqual( Stem("safeguard"), "safeguard" );
	deepEqual( Stem("safeguards"), "safeguard" );
	deepEqual( Stem("safely"), "safe" );
	deepEqual( Stem("safer"), "safer" );
	deepEqual( Stem("safes"), "safe" );
	deepEqual( Stem("safest"), "safest" );
	deepEqual( Stem("safety"), "safeti" );
	deepEqual( Stem("saffron"), "saffron" );
	deepEqual( Stem("sagacious"), "sagaci" );
	deepEqual( Stem("sagacity"), "sagac" );
	deepEqual( Stem("sage"), "sage" );
	deepEqual( Stem("sago"), "sago" );
	deepEqual( Stem("said"), "said" );
	deepEqual( Stem("sail"), "sail" );
	deepEqual( Stem("sailed"), "sail" );
	deepEqual( Stem("sailing"), "sail" );
	deepEqual( Stem("sailor"), "sailor" );
	deepEqual( Stem("sailors"), "sailor" );
	deepEqual( Stem("sails"), "sail" );
	deepEqual( Stem("saint"), "saint" );
	deepEqual( Stem("sainted"), "saint" );
	deepEqual( Stem("saintly"), "saint" );
	deepEqual( Stem("saints"), "saint" );
	deepEqual( Stem("saisis"), "saisi" );
	deepEqual( Stem("sait"), "sait" );
	deepEqual( Stem("saith"), "saith" );
	deepEqual( Stem("sak"), "sak" );
	deepEqual( Stem("sake"), "sake" );
	deepEqual( Stem("sakes"), "sake" );
	deepEqual( Stem("sal"), "sal" );
	deepEqual( Stem("sala"), "sala" );
	deepEqual( Stem("saladillo"), "saladillo" );
	deepEqual( Stem("salado"), "salado" );
	deepEqual( Stem("salaried"), "salari" );
	deepEqual( Stem("salary"), "salari" );
	deepEqual( Stem("sald"), "sald" );
	deepEqual( Stem("sale"), "sale" );
	deepEqual( Stem("salesman"), "salesman" );
	deepEqual( Stem("saliferous"), "salifer" );
	deepEqual( Stem("salina"), "salina" );
	deepEqual( Stem("salinas"), "salina" );
	deepEqual( Stem("saline"), "salin" );
	deepEqual( Stem("salinus"), "salinus" );
	deepEqual( Stem("salitral"), "salitr" );
	deepEqual( Stem("salitrales"), "salitral" );
	deepEqual( Stem("saliva"), "saliva" );
	deepEqual( Stem("sallied"), "salli" );
	deepEqual( Stem("sallies"), "salli" );
	deepEqual( Stem("sallow"), "sallow" );
	deepEqual( Stem("sally"), "salli" );
	deepEqual( Stem("sallys"), "salli" );
	deepEqual( Stem("salmon"), "salmon" );
	deepEqual( Stem("salon"), "salon" );
	deepEqual( Stem("saloon"), "saloon" );
	deepEqual( Stem("saloons"), "saloon" );
	deepEqual( Stem("salt"), "salt" );
	deepEqual( Stem("salta"), "salta" );
	deepEqual( Stem("salted"), "salt" );
	deepEqual( Stem("saltenfiord"), "saltenfiord" );
	deepEqual( Stem("salting"), "salt" );
	deepEqual( Stem("saltire"), "saltir" );
	deepEqual( Stem("saltpeter"), "saltpet" );
	deepEqual( Stem("saltpetre"), "saltpetr" );
	deepEqual( Stem("salts"), "salt" );
	deepEqual( Stem("salubrity"), "salubr" );
	deepEqual( Stem("salutary"), "salutari" );
	deepEqual( Stem("salutation"), "salut" );
	deepEqual( Stem("salutations"), "salut" );
	deepEqual( Stem("salute"), "salut" );
	deepEqual( Stem("saluted"), "salut" );
	deepEqual( Stem("salutes"), "salut" );
	deepEqual( Stem("saluting"), "salut" );
	deepEqual( Stem("salvador"), "salvador" );
	deepEqual( Stem("salvation"), "salvat" );
	deepEqual( Stem("salvator"), "salvat" );
	deepEqual( Stem("salver"), "salver" );
	deepEqual( Stem("sam"), "sam" );
	deepEqual( Stem("samaritan"), "samaritan" );
	deepEqual( Stem("same"), "same" );
	deepEqual( Stem("sameness"), "same" );
	deepEqual( Stem("samovar"), "samovar" );
	deepEqual( Stem("samovars"), "samovar" );
	deepEqual( Stem("sampler"), "sampler" );
	deepEqual( Stem("samples"), "sampl" );
	deepEqual( Stem("samson"), "samson" );
	deepEqual( Stem("san"), "san" );
	deepEqual( Stem("sancho"), "sancho" );
	deepEqual( Stem("sanctified"), "sanctifi" );
	deepEqual( Stem("sanction"), "sanction" );
	deepEqual( Stem("sanctions"), "sanction" );
	deepEqual( Stem("sanctity"), "sanctiti" );
	deepEqual( Stem("sanctuary"), "sanctuari" );
	deepEqual( Stem("sanctum"), "sanctum" );
	deepEqual( Stem("sand"), "sand" );
	deepEqual( Stem("sandal"), "sandal" );
	deepEqual( Stem("sandaled"), "sandal" );
	deepEqual( Stem("sandalled"), "sandal" );
	deepEqual( Stem("sandals"), "sandal" );
	deepEqual( Stem("sanded"), "sand" );
	deepEqual( Stem("sandpiper"), "sandpip" );
	deepEqual( Stem("sands"), "sand" );
	deepEqual( Stem("sandstone"), "sandston" );
	deepEqual( Stem("sandstones"), "sandston" );
	deepEqual( Stem("sandwich"), "sandwich" );
	deepEqual( Stem("sandwiches"), "sandwich" );
	deepEqual( Stem("sandy"), "sandi" );
	deepEqual( Stem("sane"), "sane" );
	deepEqual( Stem("sang"), "sang" );
	deepEqual( Stem("sanger"), "sanger" );
	deepEqual( Stem("sangsby"), "sangsbi" );
	deepEqual( Stem("sanguinary"), "sanguinari" );
	deepEqual( Stem("sanguine"), "sanguin" );
	deepEqual( Stem("saniem"), "saniem" );
	deepEqual( Stem("sanity"), "saniti" );
	deepEqual( Stem("sank"), "sank" );
	deepEqual( Stem("sant"), "sant" );
	deepEqual( Stem("santa"), "santa" );
	deepEqual( Stem("santiago"), "santiago" );
	deepEqual( Stem("sap"), "sap" );
	deepEqual( Stem("sapient"), "sapient" );
	deepEqual( Stem("sapling"), "sapl" );
	deepEqual( Stem("sapped"), "sap" );
	deepEqual( Stem("sapphire"), "sapphir" );
	deepEqual( Stem("sapphires"), "sapphir" );
	deepEqual( Stem("sar"), "sar" );
	deepEqual( Stem("saracen"), "saracen" );
	deepEqual( Stem("saracenic"), "saracen" );
	deepEqual( Stem("saracens"), "saracen" );
	deepEqual( Stem("sarah"), "sarah" );
	deepEqual( Stem("sarandis"), "sarandi" );
	deepEqual( Stem("sarcasm"), "sarcasm" );
	deepEqual( Stem("sarcastic"), "sarcast" );
	deepEqual( Stem("sarcastically"), "sarcast" );
	deepEqual( Stem("sarcophagus"), "sarcophagus" );
	deepEqual( Stem("sarmiento"), "sarmiento" );
	deepEqual( Stem("sart"), "sart" );
	deepEqual( Stem("sash"), "sash" );
	deepEqual( Stem("sashed"), "sash" );
	deepEqual( Stem("sasiated"), "sasiat" );
	deepEqual( Stem("sassafras"), "sassafra" );
	deepEqual( Stem("sat"), "sat" );
	deepEqual( Stem("satan"), "satan" );
	deepEqual( Stem("sated"), "sate" );
	deepEqual( Stem("satellite"), "satellit" );
	deepEqual( Stem("satellites"), "satellit" );
	deepEqual( Stem("satin"), "satin" );
	deepEqual( Stem("satins"), "satin" );
	deepEqual( Stem("satire"), "satir" );
	deepEqual( Stem("satirical"), "satir" );
	deepEqual( Stem("satirically"), "satir" );
	deepEqual( Stem("satisfaction"), "satisfact" );
	deepEqual( Stem("satisfactorily"), "satisfactorili" );
	deepEqual( Stem("satisfactory"), "satisfactori" );
	deepEqual( Stem("satisfied"), "satisfi" );
	deepEqual( Stem("satisfies"), "satisfi" );
	deepEqual( Stem("satisfy"), "satisfi" );
	deepEqual( Stem("satisfying"), "satisfi" );
	deepEqual( Stem("satrap"), "satrap" );
	deepEqual( Stem("satraps"), "satrap" );
	deepEqual( Stem("saturated"), "satur" );
	deepEqual( Stem("saturation"), "satur" );
	deepEqual( Stem("saturday"), "saturday" );
	deepEqual( Stem("saturdays"), "saturday" );
	deepEqual( Stem("saturnine"), "saturnin" );
	deepEqual( Stem("satyr"), "satyr" );
	deepEqual( Stem("sauce"), "sauc" );
	deepEqual( Stem("saucepan"), "saucepan" );
	deepEqual( Stem("saucepans"), "saucepan" );
	deepEqual( Stem("saucer"), "saucer" );
	deepEqual( Stem("saucers"), "saucer" );
	deepEqual( Stem("saucily"), "saucili" );
	deepEqual( Stem("saucy"), "sauci" );
	deepEqual( Stem("saul"), "saul" );
	deepEqual( Stem("saunter"), "saunter" );
	deepEqual( Stem("sauntered"), "saunter" );
	deepEqual( Stem("saunterer"), "saunter" );
	deepEqual( Stem("sauntering"), "saunter" );
	deepEqual( Stem("saunters"), "saunter" );
	deepEqual( Stem("saurophagus"), "saurophagus" );
	deepEqual( Stem("sausage"), "sausag" );
	deepEqual( Stem("sausages"), "sausag" );
	deepEqual( Stem("sauvages"), "sauvag" );
	deepEqual( Stem("savage"), "savag" );
	deepEqual( Stem("savagely"), "savag" );
	deepEqual( Stem("savages"), "savag" );
	deepEqual( Stem("savana"), "savana" );
	deepEqual( Stem("savannahs"), "savannah" );
	deepEqual( Stem("save"), "save" );
	deepEqual( Stem("saved"), "save" );
	deepEqual( Stem("saves"), "save" );
	deepEqual( Stem("saving"), "save" );
	deepEqual( Stem("savings"), "save" );
	deepEqual( Stem("saviour"), "saviour" );
	deepEqual( Stem("savoir"), "savoir" );
	deepEqual( Stem("savour"), "savour" );
	deepEqual( Stem("savoured"), "savour" );
	deepEqual( Stem("savouries"), "savouri" );
	deepEqual( Stem("savours"), "savour" );
	deepEqual( Stem("savoury"), "savouri" );
	deepEqual( Stem("saw"), "saw" );
	deepEqual( Stem("sawdust"), "sawdust" );
	deepEqual( Stem("saws"), "saw" );
	deepEqual( Stem("sawyer"), "sawyer" );
	deepEqual( Stem("saxon"), "saxon" );
	deepEqual( Stem("say"), "say" );
	deepEqual( Stem("saying"), "say" );
	deepEqual( Stem("sayings"), "say" );
	deepEqual( Stem("says"), "say" );
	deepEqual( Stem("scabra"), "scabra" );
	deepEqual( Stem("scabs"), "scab" );
	deepEqual( Stem("scaffold"), "scaffold" );
	deepEqual( Stem("scaffolding"), "scaffold" );
	deepEqual( Stem("scaffolds"), "scaffold" );
	deepEqual( Stem("scagliola"), "scagliola" );
	deepEqual( Stem("scald"), "scald" );
	deepEqual( Stem("scalded"), "scald" );
	deepEqual( Stem("scalding"), "scald" );
	deepEqual( Stem("scale"), "scale" );
	deepEqual( Stem("scaled"), "scale" );
	deepEqual( Stem("scales"), "scale" );
	deepEqual( Stem("scalesia"), "scalesia" );
	deepEqual( Stem("scaley"), "scaley" );
	deepEqual( Stem("scaling"), "scale" );
	deepEqual( Stem("scallops"), "scallop" );
	deepEqual( Stem("scalping"), "scalp" );
	deepEqual( Stem("scaly"), "scali" );
	deepEqual( Stem("scamander"), "scamand" );
	deepEqual( Stem("scamp"), "scamp" );
	deepEqual( Stem("scamper"), "scamper" );
	deepEqual( Stem("scampered"), "scamper" );
	deepEqual( Stem("scamps"), "scamp" );
	deepEqual( Stem("scan"), "scan" );
	deepEqual( Stem("scandal"), "scandal" );
	deepEqual( Stem("scandalising"), "scandalis" );
	deepEqual( Stem("scandalized"), "scandal" );
	deepEqual( Stem("scandalizing"), "scandal" );
	deepEqual( Stem("scandalous"), "scandal" );
	deepEqual( Stem("scandals"), "scandal" );
	deepEqual( Stem("scanned"), "scan" );
	deepEqual( Stem("scanning"), "scan" );
	deepEqual( Stem("scant"), "scant" );
	deepEqual( Stem("scantier"), "scantier" );
	deepEqual( Stem("scantiest"), "scantiest" );
	deepEqual( Stem("scantily"), "scantili" );
	deepEqual( Stem("scantiness"), "scanti" );
	deepEqual( Stem("scanty"), "scanti" );
	deepEqual( Stem("scape"), "scape" );
	deepEqual( Stem("scapegoat"), "scapegoat" );
	deepEqual( Stem("scapegrace"), "scapegrac" );
	deepEqual( Stem("scar"), "scar" );
	deepEqual( Stem("scarabaeus"), "scarabaeus" );
	deepEqual( Stem("scarce"), "scarc" );
	deepEqual( Stem("scarcel"), "scarcel" );
	deepEqual( Stem("scarcely"), "scarc" );
	deepEqual( Stem("scarcer"), "scarcer" );
	deepEqual( Stem("scarcity"), "scarciti" );
	deepEqual( Stem("scare"), "scare" );
	deepEqual( Stem("scarecrow"), "scarecrow" );
	deepEqual( Stem("scarecrows"), "scarecrow" );
	deepEqual( Stem("scared"), "scare" );
	deepEqual( Stem("scarf"), "scarf" );
	deepEqual( Stem("scarfs"), "scarf" );
	deepEqual( Stem("scarlet"), "scarlet" );
	deepEqual( Stem("scarred"), "scar" );
	deepEqual( Stem("scars"), "scar" );
	deepEqual( Stem("scarum"), "scarum" );
	deepEqual( Stem("scarus"), "scarus" );
	deepEqual( Stem("scatter"), "scatter" );
	deepEqual( Stem("scattered"), "scatter" );
	deepEqual( Stem("scattering"), "scatter" );
	deepEqual( Stem("scavengers"), "scaveng" );
	deepEqual( Stem("scelidotherium"), "scelidotherium" );
	deepEqual( Stem("scene"), "scene" );
	deepEqual( Stem("scenery"), "sceneri" );
	deepEqual( Stem("scenes"), "scene" );
	deepEqual( Stem("scent"), "scent" );
	deepEqual( Stem("scented"), "scent" );
	deepEqual( Stem("scentless"), "scentless" );
	deepEqual( Stem("scents"), "scent" );
	deepEqual( Stem("sceptic"), "sceptic" );
	deepEqual( Stem("sceptical"), "sceptic" );
	deepEqual( Stem("sceptics"), "sceptic" );
	deepEqual( Stem("schedule"), "schedul" );
	deepEqual( Stem("schegolskoy"), "schegolskoy" );
	deepEqual( Stem("scheme"), "scheme" );
	deepEqual( Stem("schemer"), "schemer" );
	deepEqual( Stem("schemes"), "scheme" );
	deepEqual( Stem("scheming"), "scheme" );
	deepEqual( Stem("schiller"), "schiller" );
	deepEqual( Stem("schilleresque"), "schilleresqu" );
	deepEqual( Stem("schirdel"), "schirdel" );
	deepEqual( Stem("schleswig"), "schleswig" );
	deepEqual( Stem("scholar"), "scholar" );
	deepEqual( Stem("scholarly"), "scholar" );
	deepEqual( Stem("scholars"), "scholar" );
	deepEqual( Stem("scholarship"), "scholarship" );
	deepEqual( Stem("scholastic"), "scholast" );
	deepEqual( Stem("schone"), "schone" );
	deepEqual( Stem("schonsten"), "schonsten" );
	deepEqual( Stem("school"), "school" );
	deepEqual( Stem("schoolboy"), "schoolboy" );
	deepEqual( Stem("schooldays"), "schoolday" );
	deepEqual( Stem("schooled"), "school" );
	deepEqual( Stem("schoolfellow"), "schoolfellow" );
	deepEqual( Stem("schoolfellows"), "schoolfellow" );
	deepEqual( Stem("schooling"), "school" );
	deepEqual( Stem("schoolmaster"), "schoolmast" );
	deepEqual( Stem("schoolmasters"), "schoolmast" );
	deepEqual( Stem("schoolmate"), "schoolmat" );
	deepEqual( Stem("schoolmeasther"), "schoolmeasth" );
	deepEqual( Stem("schoolroom"), "schoolroom" );
	deepEqual( Stem("schools"), "school" );
	deepEqual( Stem("schooner"), "schooner" );
	deepEqual( Stem("schwach"), "schwach" );
	deepEqual( Stem("scienc"), "scienc" );
	deepEqual( Stem("science"), "scienc" );
	deepEqual( Stem("sciences"), "scienc" );
	deepEqual( Stem("scientific"), "scientif" );
	deepEqual( Stem("scimitar"), "scimitar" );
	deepEqual( Stem("scintillate"), "scintil" );
	deepEqual( Stem("scintillation"), "scintil" );
	deepEqual( Stem("scions"), "scion" );
	deepEqual( Stem("scissor"), "scissor" );
	deepEqual( Stem("scissors"), "scissor" );
	deepEqual( Stem("sclater"), "sclater" );
	deepEqual( Stem("scoff"), "scoff" );
	deepEqual( Stem("scoffed"), "scof" );
	deepEqual( Stem("scoffers"), "scoffer" );
	deepEqual( Stem("scold"), "scold" );
	deepEqual( Stem("scolded"), "scold" );
	deepEqual( Stem("scolding"), "scold" );
	deepEqual( Stem("scolds"), "scold" );
	deepEqual( Stem("scoondrel"), "scoondrel" );
	deepEqual( Stem("scoondrels"), "scoondrel" );
	deepEqual( Stem("scoop"), "scoop" );
	deepEqual( Stem("scooped"), "scoop" );
	deepEqual( Stem("scooping"), "scoop" );
	deepEqual( Stem("scoops"), "scoop" );
	deepEqual( Stem("scope"), "scope" );
	deepEqual( Stem("scorch"), "scorch" );
	deepEqual( Stem("scorched"), "scorch" );
	deepEqual( Stem("scorches"), "scorch" );
	deepEqual( Stem("scorching"), "scorch" );
	deepEqual( Stem("scorchingly"), "scorch" );
	deepEqual( Stem("score"), "score" );
	deepEqual( Stem("scored"), "score" );
	deepEqual( Stem("scores"), "score" );
	deepEqual( Stem("scoresby"), "scoresbi" );
	deepEqual( Stem("scoriaceous"), "scoriac" );
	deepEqual( Stem("scoriae"), "scoria" );
	deepEqual( Stem("scorn"), "scorn" );
	deepEqual( Stem("scorned"), "scorn" );
	deepEqual( Stem("scornful"), "scorn" );
	deepEqual( Stem("scornfully"), "scorn" );
	deepEqual( Stem("scorning"), "scorn" );
	deepEqual( Stem("scorns"), "scorn" );
	deepEqual( Stem("scorpion"), "scorpion" );
	deepEqual( Stem("scorpions"), "scorpion" );
	deepEqual( Stem("scot"), "scot" );
	deepEqual( Stem("scotch"), "scotch" );
	deepEqual( Stem("scotched"), "scotch" );
	deepEqual( Stem("scotland"), "scotland" );
	deepEqual( Stem("scott"), "scott" );
	deepEqual( Stem("scoundrel"), "scoundrel" );
	deepEqual( Stem("scoundrelly"), "scoundrelli" );
	deepEqual( Stem("scoundrels"), "scoundrel" );
	deepEqual( Stem("scour"), "scour" );
	deepEqual( Stem("scoured"), "scour" );
	deepEqual( Stem("scourge"), "scourg" );
	deepEqual( Stem("scourges"), "scourg" );
	deepEqual( Stem("scouring"), "scour" );
	deepEqual( Stem("scours"), "scour" );
	deepEqual( Stem("scout"), "scout" );
	deepEqual( Stem("scouted"), "scout" );
	deepEqual( Stem("scouts"), "scout" );
	deepEqual( Stem("scowl"), "scowl" );
	deepEqual( Stem("scowled"), "scowl" );
	deepEqual( Stem("scowling"), "scowl" );
	deepEqual( Stem("scowls"), "scowl" );
	deepEqual( Stem("scramble"), "scrambl" );
	deepEqual( Stem("scrambled"), "scrambl" );
	deepEqual( Stem("scrambling"), "scrambl" );
	deepEqual( Stem("scrap"), "scrap" );
	deepEqual( Stem("scrapbook"), "scrapbook" );
	deepEqual( Stem("scrape"), "scrape" );
	deepEqual( Stem("scraped"), "scrape" );
	deepEqual( Stem("scraper"), "scraper" );
	deepEqual( Stem("scrapes"), "scrape" );
	deepEqual( Stem("scraping"), "scrape" );
	deepEqual( Stem("scraps"), "scrap" );
	deepEqual( Stem("scratch"), "scratch" );
	deepEqual( Stem("scratched"), "scratch" );
	deepEqual( Stem("scratches"), "scratch" );
	deepEqual( Stem("scratching"), "scratch" );
	deepEqual( Stem("scrawl"), "scrawl" );
	deepEqual( Stem("scrawled"), "scrawl" );
	deepEqual( Stem("scrawls"), "scrawl" );
	deepEqual( Stem("scream"), "scream" );
	deepEqual( Stem("screamed"), "scream" );
	deepEqual( Stem("screaming"), "scream" );
	deepEqual( Stem("screams"), "scream" );
	deepEqual( Stem("screeched"), "screech" );
	deepEqual( Stem("screeches"), "screech" );
	deepEqual( Stem("screeching"), "screech" );
	deepEqual( Stem("screen"), "screen" );
	deepEqual( Stem("screened"), "screen" );
	deepEqual( Stem("screening"), "screen" );
	deepEqual( Stem("screens"), "screen" );
	deepEqual( Stem("screw"), "screw" );
	deepEqual( Stem("screwdriver"), "screwdriv" );
	deepEqual( Stem("screwdrivers"), "screwdriv" );
	deepEqual( Stem("screwed"), "screw" );
	deepEqual( Stem("screwing"), "screw" );
	deepEqual( Stem("screws"), "screw" );
	deepEqual( Stem("scribble"), "scribbl" );
	deepEqual( Stem("scribbled"), "scribbl" );
	deepEqual( Stem("scribe"), "scribe" );
	deepEqual( Stem("scrip"), "scrip" );
	deepEqual( Stem("scripter"), "scripter" );
	deepEqual( Stem("scriptural"), "scriptur" );
	deepEqual( Stem("scripture"), "scriptur" );
	deepEqual( Stem("scrivener"), "scriven" );
	deepEqual( Stem("scrofulous"), "scroful" );
	deepEqual( Stem("scrolls"), "scroll" );
	deepEqual( Stem("scrope"), "scrope" );
	deepEqual( Stem("scrub"), "scrub" );
	deepEqual( Stem("scrubbed"), "scrub" );
	deepEqual( Stem("scrubbing"), "scrub" );
	deepEqual( Stem("scrubbs"), "scrubb" );
	deepEqual( Stem("scrubby"), "scrubbi" );
	deepEqual( Stem("scrubs"), "scrub" );
	deepEqual( Stem("scruple"), "scrupl" );
	deepEqual( Stem("scruples"), "scrupl" );
	deepEqual( Stem("scrupulous"), "scrupul" );
	deepEqual( Stem("scrupulously"), "scrupul" );
	deepEqual( Stem("scrutinise"), "scrutinis" );
	deepEqual( Stem("scrutinised"), "scrutinis" );
	deepEqual( Stem("scrutinising"), "scrutinis" );
	deepEqual( Stem("scrutinizing"), "scrutin" );
	deepEqual( Stem("scrutiny"), "scrutini" );
	deepEqual( Stem("scudded"), "scud" );
	deepEqual( Stem("scuffle"), "scuffl" );
	deepEqual( Stem("scuffling"), "scuffl" );
	deepEqual( Stem("scullery"), "sculleri" );
	deepEqual( Stem("scullions"), "scullion" );
	deepEqual( Stem("sculptor"), "sculptor" );
	deepEqual( Stem("sculptured"), "sculptur" );
	deepEqual( Stem("sculptures"), "sculptur" );
	deepEqual( Stem("scum"), "scum" );
	deepEqual( Stem("scurvy"), "scurvi" );
	deepEqual( Stem("scuttle"), "scuttl" );
	deepEqual( Stem("scuttling"), "scuttl" );
	deepEqual( Stem("scytalopus"), "scytalopus" );
	deepEqual( Stem("se"), "se" );
	deepEqual( Stem("sea"), "sea" );
	deepEqual( Stem("seacoast"), "seacoast" );
	deepEqual( Stem("seafowl"), "seafowl" );
	deepEqual( Stem("seal"), "seal" );
	deepEqual( Stem("sealed"), "seal" );
	deepEqual( Stem("sealer"), "sealer" );
	deepEqual( Stem("sealers"), "sealer" );
	deepEqual( Stem("sealing"), "seal" );
	deepEqual( Stem("seals"), "seal" );
	deepEqual( Stem("seaman"), "seaman" );
	deepEqual( Stem("seame"), "seam" );
	deepEqual( Stem("seamed"), "seam" );
	deepEqual( Stem("seamen"), "seamen" );
	deepEqual( Stem("seams"), "seam" );
	deepEqual( Stem("seaport"), "seaport" );
	deepEqual( Stem("sear"), "sear" );
	deepEqual( Stem("search"), "search" );
	deepEqual( Stem("searched"), "search" );
	deepEqual( Stem("searches"), "search" );
	deepEqual( Stem("searching"), "search" );
	deepEqual( Stem("seas"), "sea" );
	deepEqual( Stem("seashells"), "seashel" );
	deepEqual( Stem("seaside"), "seasid" );
	deepEqual( Stem("season"), "season" );
	deepEqual( Stem("seasoned"), "season" );
	deepEqual( Stem("seasons"), "season" );
	deepEqual( Stem("seat"), "seat" );
	deepEqual( Stem("seated"), "seat" );
	deepEqual( Stem("seating"), "seat" );
	deepEqual( Stem("seats"), "seat" );
	deepEqual( Stem("seaward"), "seaward" );
	deepEqual( Stem("seawards"), "seaward" );
	deepEqual( Stem("seaweed"), "seawe" );
	deepEqual( Stem("secede"), "seced" );
	deepEqual( Stem("secession"), "secess" );
	deepEqual( Stem("seclude"), "seclud" );
	deepEqual( Stem("secluded"), "seclud" );
	deepEqual( Stem("seclusion"), "seclus" );
	deepEqual( Stem("seco"), "seco" );
	deepEqual( Stem("second"), "second" );
	deepEqual( Stem("secondary"), "secondari" );
	deepEqual( Stem("seconded"), "second" );
	deepEqual( Stem("secondly"), "second" );
	deepEqual( Stem("seconds"), "second" );
	deepEqual( Stem("secrecy"), "secreci" );
	deepEqual( Stem("secret"), "secret" );
	deepEqual( Stem("secretaries"), "secretari" );
	deepEqual( Stem("secretary"), "secretari" );
	deepEqual( Stem("secretaryship"), "secretaryship" );
	deepEqual( Stem("secretaryships"), "secretaryship" );
	deepEqual( Stem("secrete"), "secret" );
	deepEqual( Stem("secreted"), "secret" );
	deepEqual( Stem("secretes"), "secret" );
	deepEqual( Stem("secreting"), "secret" );
	deepEqual( Stem("secretion"), "secret" );
	deepEqual( Stem("secretly"), "secret" );
	deepEqual( Stem("secrets"), "secret" );
	deepEqual( Stem("sect"), "sect" );
	deepEqual( Stem("sectio"), "sectio" );
	deepEqual( Stem("section"), "section" );
	deepEqual( Stem("sections"), "section" );
	deepEqual( Stem("secular"), "secular" );
	deepEqual( Stem("secure"), "secur" );
	deepEqual( Stem("secured"), "secur" );
	deepEqual( Stem("securely"), "secur" );
	deepEqual( Stem("secures"), "secur" );
	deepEqual( Stem("securing"), "secur" );
	deepEqual( Stem("securities"), "secur" );
	deepEqual( Stem("security"), "secur" );
	deepEqual( Stem("sed"), "sed" );
	deepEqual( Stem("sedate"), "sedat" );
	deepEqual( Stem("sedately"), "sedat" );
	deepEqual( Stem("sedateness"), "sedat" );
	deepEqual( Stem("sedative"), "sedat" );
	deepEqual( Stem("sedentary"), "sedentari" );
	deepEqual( Stem("sedes"), "sede" );
	deepEqual( Stem("sedge"), "sedg" );
	deepEqual( Stem("sediment"), "sediment" );
	deepEqual( Stem("sedimentary"), "sedimentari" );
	deepEqual( Stem("sediments"), "sediment" );
	deepEqual( Stem("sedley"), "sedley" );
	deepEqual( Stem("seduced"), "seduc" );
	deepEqual( Stem("seducer"), "seduc" );
	deepEqual( Stem("seductive"), "seduct" );
	deepEqual( Stem("seductively"), "seduct" );
	deepEqual( Stem("sedulous"), "sedul" );
	deepEqual( Stem("sedulously"), "sedul" );
	deepEqual( Stem("see"), "see" );
	deepEqual( Stem("seed"), "seed" );
	deepEqual( Stem("seeds"), "seed" );
	deepEqual( Stem("seeing"), "see" );
	deepEqual( Stem("seek"), "seek" );
	deepEqual( Stem("seeker"), "seeker" );
	deepEqual( Stem("seekers"), "seeker" );
	deepEqual( Stem("seeking"), "seek" );
	deepEqual( Stem("seeks"), "seek" );
	deepEqual( Stem("seem"), "seem" );
	deepEqual( Stem("seeme"), "seem" );
	deepEqual( Stem("seemed"), "seem" );
	deepEqual( Stem("seeming"), "seem" );
	deepEqual( Stem("seemingly"), "seem" );
	deepEqual( Stem("seems"), "seem" );
	deepEqual( Stem("seen"), "seen" );
	deepEqual( Stem("sees"), "see" );
	deepEqual( Stem("seetzen"), "seetzen" );
	deepEqual( Stem("segment"), "segment" );
	deepEqual( Stem("segments"), "segment" );
	deepEqual( Stem("sehr"), "sehr" );
	deepEqual( Stem("sein"), "sein" );
	deepEqual( Stem("seize"), "seiz" );
	deepEqual( Stem("seized"), "seiz" );
	deepEqual( Stem("seizes"), "seiz" );
	deepEqual( Stem("seizing"), "seiz" );
	deepEqual( Stem("seizure"), "seizur" );
	deepEqual( Stem("seldom"), "seldom" );
	deepEqual( Stem("select"), "select" );
	deepEqual( Stem("selected"), "select" );
	deepEqual( Stem("selecting"), "select" );
	deepEqual( Stem("selection"), "select" );
	deepEqual( Stem("selections"), "select" );
	deepEqual( Stem("self"), "self" );
	deepEqual( Stem("selfish"), "selfish" );
	deepEqual( Stem("selfishness"), "selfish" );
	deepEqual( Stem("sell"), "sell" );
	deepEqual( Stem("seller"), "seller" );
	deepEqual( Stem("sellers"), "seller" );
	deepEqual( Stem("selling"), "sell" );
	deepEqual( Stem("sellings"), "sell" );
	deepEqual( Stem("sells"), "sell" );
	deepEqual( Stem("selves"), "selv" );
	deepEqual( Stem("semblance"), "semblanc" );
	deepEqual( Stem("semblances"), "semblanc" );
	deepEqual( Stem("semi"), "semi" );
	deepEqual( Stem("semicircle"), "semicircl" );
	deepEqual( Stem("semicircular"), "semicircular" );
	deepEqual( Stem("seminal"), "semin" );
	deepEqual( Stem("seminarists"), "seminarist" );
	deepEqual( Stem("semyon"), "semyon" );
	deepEqual( Stem("semyonova"), "semyonova" );
	deepEqual( Stem("semyonovitch"), "semyonovitch" );
	deepEqual( Stem("semyonovna"), "semyonovna" );
	deepEqual( Stem("semyonovsky"), "semyonovski" );
	deepEqual( Stem("senate"), "senat" );
	deepEqual( Stem("senator"), "senat" );
	deepEqual( Stem("senatorial"), "senatori" );
	deepEqual( Stem("senators"), "senat" );
	deepEqual( Stem("send"), "send" );
	deepEqual( Stem("sender"), "sender" );
	deepEqual( Stem("sending"), "send" );
	deepEqual( Stem("sends"), "send" );
	deepEqual( Stem("senhor"), "senhor" );
	deepEqual( Stem("senile"), "senil" );
	deepEqual( Stem("senior"), "senior" );
	deepEqual( Stem("seniority"), "senior" );
	deepEqual( Stem("seniors"), "senior" );
	deepEqual( Stem("senor"), "senor" );
	deepEqual( Stem("senoritas"), "senorita" );
	deepEqual( Stem("sensation"), "sensat" );
	deepEqual( Stem("sensational"), "sensat" );
	deepEqual( Stem("sensations"), "sensat" );
	deepEqual( Stem("sense"), "sens" );
	deepEqual( Stem("senseless"), "senseless" );
	deepEqual( Stem("senses"), "sens" );
	deepEqual( Stem("sensibilities"), "sensibl" );
	deepEqual( Stem("sensibility"), "sensibl" );
	deepEqual( Stem("sensible"), "sensibl" );
	deepEqual( Stem("sensibly"), "sensibl" );
	deepEqual( Stem("sensitive"), "sensit" );
	deepEqual( Stem("sensitiveness"), "sensit" );
	deepEqual( Stem("sensual"), "sensual" );
	deepEqual( Stem("sensualist"), "sensualist" );
	deepEqual( Stem("sensuality"), "sensual" );
	deepEqual( Stem("sent"), "sent" );
	deepEqual( Stem("sentence"), "sentenc" );
	deepEqual( Stem("sentenced"), "sentenc" );
	deepEqual( Stem("sentences"), "sentenc" );
	deepEqual( Stem("sententiously"), "sententi" );
	deepEqual( Stem("sentiment"), "sentiment" );
	deepEqual( Stem("sentimental"), "sentiment" );
	deepEqual( Stem("sentimentalism"), "sentiment" );
	deepEqual( Stem("sentimentality"), "sentiment" );
	deepEqual( Stem("sentimentally"), "sentiment" );
	deepEqual( Stem("sentiments"), "sentiment" );
	deepEqual( Stem("sentinel"), "sentinel" );
	deepEqual( Stem("sentinels"), "sentinel" );
	deepEqual( Stem("sentries"), "sentri" );
	deepEqual( Stem("sentry"), "sentri" );
	deepEqual( Stem("separate"), "separ" );
	deepEqual( Stem("separated"), "separ" );
	deepEqual( Stem("separately"), "separ" );
	deepEqual( Stem("separates"), "separ" );
	deepEqual( Stem("separating"), "separ" );
	deepEqual( Stem("separation"), "separ" );
	deepEqual( Stem("sept"), "sept" );
	deepEqual( Stem("septa"), "septa" );
	deepEqual( Stem("september"), "septemb" );
	deepEqual( Stem("septuagenarian"), "septuagenarian" );
	deepEqual( Stem("septum"), "septum" );
	deepEqual( Stem("sepulchral"), "sepulchr" );
	deepEqual( Stem("sepulchre"), "sepulchr" );
	deepEqual( Stem("sepultus"), "sepultus" );
	deepEqual( Stem("sequel"), "sequel" );
	deepEqual( Stem("sequence"), "sequenc" );
	deepEqual( Stem("sequestered"), "sequest" );
	deepEqual( Stem("ser"), "ser" );
	deepEqual( Stem("seraph"), "seraph" );
	deepEqual( Stem("seraphically"), "seraph" );
	deepEqual( Stem("seraphim"), "seraphim" );
	deepEqual( Stem("serces"), "serc" );
	deepEqual( Stem("serenades"), "serenad" );
	deepEqual( Stem("serene"), "seren" );
	deepEqual( Stem("serenely"), "seren" );
	deepEqual( Stem("serenity"), "seren" );
	deepEqual( Stem("serf"), "serf" );
	deepEqual( Stem("serfdom"), "serfdom" );
	deepEqual( Stem("serfs"), "serf" );
	deepEqual( Stem("sergeant"), "sergeant" );
	deepEqual( Stem("seriatim"), "seriatim" );
	deepEqual( Stem("series"), "seri" );
	deepEqual( Stem("serio"), "serio" );
	deepEqual( Stem("serious"), "serious" );
	deepEqual( Stem("seriously"), "serious" );
	deepEqual( Stem("seriousness"), "serious" );
	deepEqual( Stem("serjeant"), "serjeant" );
	deepEqual( Stem("serjeants"), "serjeant" );
	deepEqual( Stem("sermon"), "sermon" );
	deepEqual( Stem("sermonizing"), "sermon" );
	deepEqual( Stem("serpent"), "serpent" );
	deepEqual( Stem("serpentine"), "serpentin" );
	deepEqual( Stem("serpents"), "serpent" );
	deepEqual( Stem("serpulae"), "serpula" );
	deepEqual( Stem("serrated"), "serrat" );
	deepEqual( Stem("sertularia"), "sertularia" );
	deepEqual( Stem("servant"), "servant" );
	deepEqual( Stem("servants"), "servant" );
	deepEqual( Stem("serve"), "serv" );
	deepEqual( Stem("served"), "serv" );
	deepEqual( Stem("server"), "server" );
	deepEqual( Stem("serves"), "serv" );
	deepEqual( Stem("service"), "servic" );
	deepEqual( Stem("serviceable"), "servic" );
	deepEqual( Stem("serviceably"), "servic" );
	deepEqual( Stem("services"), "servic" );
	deepEqual( Stem("servile"), "servil" );
	deepEqual( Stem("servility"), "servil" );
	deepEqual( Stem("serving"), "serv" );
	deepEqual( Stem("servitor"), "servitor" );
	deepEqual( Stem("servitude"), "servitud" );
	deepEqual( Stem("servts"), "servt" );
	deepEqual( Stem("ses"), "ses" );
	deepEqual( Stem("session"), "session" );
	deepEqual( Stem("sessions"), "session" );
	deepEqual( Stem("set"), "set" );
	deepEqual( Stem("sets"), "set" );
	deepEqual( Stem("setten"), "setten" );
	deepEqual( Stem("setting"), "set" );
	deepEqual( Stem("settle"), "settl" );
	deepEqual( Stem("settled"), "settl" );
	deepEqual( Stem("settlement"), "settlement" );
	deepEqual( Stem("settlements"), "settlement" );
	deepEqual( Stem("settler"), "settler" );
	deepEqual( Stem("settlers"), "settler" );
	deepEqual( Stem("settles"), "settl" );
	deepEqual( Stem("settling"), "settl" );
	deepEqual( Stem("seul"), "seul" );
	deepEqual( Stem("sevastopol"), "sevastopol" );
	deepEqual( Stem("seven"), "seven" );
	deepEqual( Stem("sevenpence"), "sevenp" );
	deepEqual( Stem("sevens"), "seven" );
	deepEqual( Stem("seventeen"), "seventeen" );
	deepEqual( Stem("seventeenth"), "seventeenth" );
	deepEqual( Stem("seventh"), "seventh" );
	deepEqual( Stem("seventhly"), "seventh" );
	deepEqual( Stem("seventy"), "seventi" );
	deepEqual( Stem("seventysix"), "seventysix" );
	deepEqual( Stem("sever"), "sever" );
	deepEqual( Stem("severa"), "severa" );
	deepEqual( Stem("several"), "sever" );
	deepEqual( Stem("severally"), "sever" );
	deepEqual( Stem("severe"), "sever" );
	deepEqual( Stem("severed"), "sever" );
	deepEqual( Stem("severely"), "sever" );
	deepEqual( Stem("severer"), "sever" );
	deepEqual( Stem("severest"), "severest" );
	deepEqual( Stem("severity"), "sever" );
	deepEqual( Stem("severn"), "severn" );
	deepEqual( Stem("sevres"), "sevr" );
	deepEqual( Stem("sew"), "sew" );
	deepEqual( Stem("sewed"), "sew" );
	deepEqual( Stem("sewerage"), "sewerag" );
	deepEqual( Stem("sewerely"), "sewer" );
	deepEqual( Stem("sewing"), "sew" );
	deepEqual( Stem("sex"), "sex" );
	deepEqual( Stem("sexes"), "sex" );
	deepEqual( Stem("sexton"), "sexton" );
	deepEqual( Stem("sextus"), "sextus" );
	deepEqual( Stem("sexty"), "sexti" );
	deepEqual( Stem("seychelle"), "seychell" );
	deepEqual( Stem("seychelles"), "seychell" );
	deepEqual( Stem("sh"), "sh" );
	deepEqual( Stem("sha"), "sha" );
	deepEqual( Stem("shabbily"), "shabbili" );
	deepEqual( Stem("shabbiness"), "shabbi" );
	deepEqual( Stem("shabby"), "shabbi" );
	deepEqual( Stem("shade"), "shade" );
	deepEqual( Stem("shaded"), "shade" );
	deepEqual( Stem("shades"), "shade" );
	deepEqual( Stem("shading"), "shade" );
	deepEqual( Stem("shadow"), "shadow" );
	deepEqual( Stem("shadowed"), "shadow" );
	deepEqual( Stem("shadowless"), "shadowless" );
	deepEqual( Stem("shadows"), "shadow" );
	deepEqual( Stem("shadowy"), "shadowi" );
	deepEqual( Stem("shady"), "shadi" );
	deepEqual( Stem("shaft"), "shaft" );
	deepEqual( Stem("shafts"), "shaft" );
	deepEqual( Stem("shaggy"), "shaggi" );
	deepEqual( Stem("shak"), "shak" );
	deepEqual( Stem("shake"), "shake" );
	deepEqual( Stem("shaken"), "shaken" );
	deepEqual( Stem("shakes"), "shake" );
	deepEqual( Stem("shakespeare"), "shakespear" );
	deepEqual( Stem("shaking"), "shake" );
	deepEqual( Stem("shakings"), "shake" );
	deepEqual( Stem("shakspeare"), "shakspear" );
	deepEqual( Stem("shal"), "shal" );
	deepEqual( Stem("shall"), "shall" );
	deepEqual( Stem("shallow"), "shallow" );
	deepEqual( Stem("shallowest"), "shallowest" );
	deepEqual( Stem("shallows"), "shallow" );
	deepEqual( Stem("shalt"), "shalt" );
	deepEqual( Stem("sham"), "sham" );
	deepEqual( Stem("shambled"), "shambl" );
	deepEqual( Stem("shambles"), "shambl" );
	deepEqual( Stem("shambling"), "shambl" );
	deepEqual( Stem("shame"), "shame" );
	deepEqual( Stem("shamed"), "shame" );
	deepEqual( Stem("shamefaced"), "shamefac" );
	deepEqual( Stem("shameful"), "shame" );
	deepEqual( Stem("shamefully"), "shame" );
	deepEqual( Stem("shameless"), "shameless" );
	deepEqual( Stem("shamelessly"), "shameless" );
	deepEqual( Stem("shamming"), "sham" );
	deepEqual( Stem("shan"), "shan" );
	deepEqual( Stem("shanks"), "shank" );
	deepEqual( Stem("shanties"), "shanti" );
	deepEqual( Stem("shape"), "shape" );
	deepEqual( Stem("shaped"), "shape" );
	deepEqual( Stem("shapeless"), "shapeless" );
	deepEqual( Stem("shapely"), "shape" );
	deepEqual( Stem("shapes"), "shape" );
	deepEqual( Stem("shaping"), "shape" );
	deepEqual( Stem("shar"), "shar" );
	deepEqual( Stem("share"), "share" );
	deepEqual( Stem("shared"), "share" );
	deepEqual( Stem("shareholder"), "sharehold" );
	deepEqual( Stem("shareholders"), "sharehold" );
	deepEqual( Stem("sharer"), "sharer" );
	deepEqual( Stem("shares"), "share" );
	deepEqual( Stem("sharing"), "share" );
	deepEqual( Stem("shark"), "shark" );
	deepEqual( Stem("sharking"), "shark" );
	deepEqual( Stem("sharks"), "shark" );
	deepEqual( Stem("sharmer"), "sharmer" );
	deepEqual( Stem("sharp"), "sharp" );
	deepEqual( Stem("sharpen"), "sharpen" );
	deepEqual( Stem("sharpened"), "sharpen" );
	deepEqual( Stem("sharpening"), "sharpen" );
	deepEqual( Stem("sharpens"), "sharpen" );
	deepEqual( Stem("sharper"), "sharper" );
	deepEqual( Stem("sharpers"), "sharper" );
	deepEqual( Stem("sharpest"), "sharpest" );
	deepEqual( Stem("sharply"), "sharpli" );
	deepEqual( Stem("sharpness"), "sharp" );
	deepEqual( Stem("sharpshooters"), "sharpshoot" );
	deepEqual( Stem("shattered"), "shatter" );
	deepEqual( Stem("shave"), "shave" );
	deepEqual( Stem("shaved"), "shave" );
	deepEqual( Stem("shaven"), "shaven" );
	deepEqual( Stem("shaver"), "shaver" );
	deepEqual( Stem("shaves"), "shave" );
	deepEqual( Stem("shaving"), "shave" );
	deepEqual( Stem("shaw"), "shaw" );
	deepEqual( Stem("shawl"), "shawl" );
	deepEqual( Stem("shawls"), "shawl" );
	deepEqual( Stem("she"), "she" );
	deepEqual( Stem("sheake"), "sheak" );
	deepEqual( Stem("sheame"), "sheam" );
	deepEqual( Stem("shearing"), "shear" );
	deepEqual( Stem("sheath"), "sheath" );
	deepEqual( Stem("sheaves"), "sheav" );
	deepEqual( Stem("shed"), "shed" );
	deepEqual( Stem("shedding"), "shed" );
	deepEqual( Stem("sheds"), "shed" );
	deepEqual( Stem("sheen"), "sheen" );
	deepEqual( Stem("sheep"), "sheep" );
	deepEqual( Stem("sheepish"), "sheepish" );
	deepEqual( Stem("sheepskin"), "sheepskin" );
	deepEqual( Stem("sheer"), "sheer" );
	deepEqual( Stem("sheet"), "sheet" );
	deepEqual( Stem("sheets"), "sheet" );
	deepEqual( Stem("sheik"), "sheik" );
	deepEqual( Stem("shelf"), "shelf" );
	deepEqual( Stem("shell"), "shell" );
	deepEqual( Stem("shelley"), "shelley" );
	deepEqual( Stem("shellfish"), "shellfish" );
	deepEqual( Stem("shellfuls"), "shell" );
	deepEqual( Stem("shells"), "shell" );
	deepEqual( Stem("shelly"), "shelli" );
	deepEqual( Stem("shelopaev"), "shelopaev" );
	deepEqual( Stem("shelter"), "shelter" );
	deepEqual( Stem("sheltered"), "shelter" );
	deepEqual( Stem("sheltering"), "shelter" );
	deepEqual( Stem("shelters"), "shelter" );
	deepEqual( Stem("shelves"), "shelv" );
	deepEqual( Stem("shelving"), "shelv" );
	deepEqual( Stem("shepherd"), "shepherd" );
	deepEqual( Stem("shepherdess"), "shepherdess" );
	deepEqual( Stem("shepherdesses"), "shepherdess" );
	deepEqual( Stem("shepherds"), "shepherd" );
	deepEqual( Stem("sheriff"), "sheriff" );
	deepEqual( Stem("sherry"), "sherri" );
	deepEqual( Stem("shetland"), "shetland" );
	deepEqual( Stem("shh"), "shh" );
	deepEqual( Stem("shibboleth"), "shibboleth" );
	deepEqual( Stem("shied"), "shi" );
	deepEqual( Stem("shield"), "shield" );
	deepEqual( Stem("shielded"), "shield" );
	deepEqual( Stem("shielding"), "shield" );
	deepEqual( Stem("shields"), "shield" );
	deepEqual( Stem("shies"), "shi" );
	deepEqual( Stem("shift"), "shift" );
	deepEqual( Stem("shifted"), "shift" );
	deepEqual( Stem("shifting"), "shift" );
	deepEqual( Stem("shiftings"), "shift" );
	deepEqual( Stem("shifts"), "shift" );
	deepEqual( Stem("shil"), "shil" );
	deepEqual( Stem("shilling"), "shill" );
	deepEqual( Stem("shillings"), "shill" );
	deepEqual( Stem("shin"), "shin" );
	deepEqual( Stem("shine"), "shine" );
	deepEqual( Stem("shines"), "shine" );
	deepEqual( Stem("shingle"), "shingl" );
	deepEqual( Stem("shining"), "shine" );
	deepEqual( Stem("shiny"), "shini" );
	deepEqual( Stem("ship"), "ship" );
	deepEqual( Stem("shipbuilder"), "shipbuild" );
	deepEqual( Stem("shiploads"), "shipload" );
	deepEqual( Stem("shipped"), "ship" );
	deepEqual( Stem("shipping"), "ship" );
	deepEqual( Stem("ships"), "ship" );
	deepEqual( Stem("shipton"), "shipton" );
	deepEqual( Stem("shipwreck"), "shipwreck" );
	deepEqual( Stem("shipwrecked"), "shipwreck" );
	deepEqual( Stem("shipwrecks"), "shipwreck" );
	deepEqual( Stem("shire"), "shire" );
	deepEqual( Stem("shirk"), "shirk" );
	deepEqual( Stem("shirked"), "shirk" );
	deepEqual( Stem("shirking"), "shirk" );
	deepEqual( Stem("shirt"), "shirt" );
	deepEqual( Stem("shirts"), "shirt" );
	deepEqual( Stem("shiver"), "shiver" );
	deepEqual( Stem("shivered"), "shiver" );
	deepEqual( Stem("shivering"), "shiver" );
	deepEqual( Stem("shivers"), "shiver" );
	deepEqual( Stem("shoal"), "shoal" );
	deepEqual( Stem("shoaler"), "shoaler" );
	deepEqual( Stem("shoalness"), "shoal" );
	deepEqual( Stem("shoals"), "shoal" );
	deepEqual( Stem("shock"), "shock" );
	deepEqual( Stem("shocked"), "shock" );
	deepEqual( Stem("shocking"), "shock" );
	deepEqual( Stem("shockingly"), "shock" );
	deepEqual( Stem("shocks"), "shock" );
	deepEqual( Stem("shod"), "shod" );
	deepEqual( Stem("shoe"), "shoe" );
	deepEqual( Stem("shoed"), "sho" );
	deepEqual( Stem("shoeless"), "shoeless" );
	deepEqual( Stem("shoemaker"), "shoemak" );
	deepEqual( Stem("shoemakers"), "shoemak" );
	deepEqual( Stem("shoes"), "shoe" );
	deepEqual( Stem("shone"), "shone" );
	deepEqual( Stem("shongi"), "shongi" );
	deepEqual( Stem("shoohoo"), "shoohoo" );
	deepEqual( Stem("shook"), "shook" );
	deepEqual( Stem("shoon"), "shoon" );
	deepEqual( Stem("shoot"), "shoot" );
	deepEqual( Stem("shooters"), "shooter" );
	deepEqual( Stem("shooting"), "shoot" );
	deepEqual( Stem("shoots"), "shoot" );
	deepEqual( Stem("shop"), "shop" );
	deepEqual( Stem("shopkeeper"), "shopkeep" );
	deepEqual( Stem("shopkeepers"), "shopkeep" );
	deepEqual( Stem("shopman"), "shopman" );
	deepEqual( Stem("shopmen"), "shopmen" );
	deepEqual( Stem("shopofwomen"), "shopofwomen" );
	deepEqual( Stem("shops"), "shop" );
	deepEqual( Stem("shore"), "shore" );
	deepEqual( Stem("shoreham"), "shoreham" );
	deepEqual( Stem("shores"), "shore" );
	deepEqual( Stem("shorn"), "shorn" );
	deepEqual( Stem("short"), "short" );
	deepEqual( Stem("shortcoming"), "shortcom" );
	deepEqual( Stem("shortcomings"), "shortcom" );
	deepEqual( Stem("shorten"), "shorten" );
	deepEqual( Stem("shortened"), "shorten" );
	deepEqual( Stem("shortening"), "shorten" );
	deepEqual( Stem("shortens"), "shorten" );
	deepEqual( Stem("shorter"), "shorter" );
	deepEqual( Stem("shortest"), "shortest" );
	deepEqual( Stem("shortly"), "short" );
	deepEqual( Stem("shortness"), "short" );
	deepEqual( Stem("shorts"), "short" );
	deepEqual( Stem("shot"), "shot" );
	deepEqual( Stem("shots"), "shot" );
	deepEqual( Stem("should"), "should" );
	deepEqual( Stem("shoulder"), "shoulder" );
	deepEqual( Stem("shouldered"), "shoulder" );
	deepEqual( Stem("shouldering"), "shoulder" );
	deepEqual( Stem("shoulders"), "shoulder" );
	deepEqual( Stem("shouldest"), "shouldest" );
	deepEqual( Stem("shouldn"), "shouldn" );
	deepEqual( Stem("shouldst"), "shouldst" );
	deepEqual( Stem("shout"), "shout" );
	deepEqual( Stem("shouted"), "shout" );
	deepEqual( Stem("shouting"), "shout" );
	deepEqual( Stem("shouts"), "shout" );
	deepEqual( Stem("shove"), "shove" );
	deepEqual( Stem("shoved"), "shove" );
	deepEqual( Stem("shovel"), "shovel" );
	deepEqual( Stem("shoving"), "shove" );
	deepEqual( Stem("show"), "show" );
	deepEqual( Stem("showd"), "showd" );
	deepEqual( Stem("showed"), "show" );
	deepEqual( Stem("shower"), "shower" );
	deepEqual( Stem("showered"), "shower" );
	deepEqual( Stem("showering"), "shower" );
	deepEqual( Stem("showers"), "shower" );
	deepEqual( Stem("showery"), "showeri" );
	deepEqual( Stem("showing"), "show" );
	deepEqual( Stem("shown"), "shown" );
	deepEqual( Stem("shows"), "show" );
	deepEqual( Stem("showy"), "showi" );
	deepEqual( Stem("shrank"), "shrank" );
	deepEqual( Stem("shreds"), "shred" );
	deepEqual( Stem("shrew"), "shrew" );
	deepEqual( Stem("shrewd"), "shrewd" );
	deepEqual( Stem("shrewdly"), "shrewd" );
	deepEqual( Stem("shrewdness"), "shrewd" );
	deepEqual( Stem("shriek"), "shriek" );
	deepEqual( Stem("shrieked"), "shriek" );
	deepEqual( Stem("shrieking"), "shriek" );
	deepEqual( Stem("shrieks"), "shriek" );
	deepEqual( Stem("shrikes"), "shrike" );
	deepEqual( Stem("shrill"), "shrill" );
	deepEqual( Stem("shrillest"), "shrillest" );
	deepEqual( Stem("shrillness"), "shrill" );
	deepEqual( Stem("shrilly"), "shrilli" );
	deepEqual( Stem("shrimp"), "shrimp" );
	deepEqual( Stem("shrimps"), "shrimp" );
	deepEqual( Stem("shrine"), "shrine" );
	deepEqual( Stem("shrink"), "shrink" );
	deepEqual( Stem("shrinking"), "shrink" );
	deepEqual( Stem("shrinks"), "shrink" );
	deepEqual( Stem("shrivel"), "shrivel" );
	deepEqual( Stem("shrivelled"), "shrivel" );
	deepEqual( Stem("shropshire"), "shropshir" );
	deepEqual( Stem("shroud"), "shroud" );
	deepEqual( Stem("shrouded"), "shroud" );
	deepEqual( Stem("shrub"), "shrub" );
	deepEqual( Stem("shrubberies"), "shrubberi" );
	deepEqual( Stem("shrubbery"), "shrubberi" );
	deepEqual( Stem("shrubs"), "shrub" );
	deepEqual( Stem("shrug"), "shrug" );
	deepEqual( Stem("shrugged"), "shrug" );
	deepEqual( Stem("shrugging"), "shrug" );
	deepEqual( Stem("shrugs"), "shrug" );
	deepEqual( Stem("shrunk"), "shrunk" );
	deepEqual( Stem("shrunken"), "shrunken" );
	deepEqual( Stem("shudder"), "shudder" );
	deepEqual( Stem("shuddered"), "shudder" );
	deepEqual( Stem("shuddering"), "shudder" );
	deepEqual( Stem("shudders"), "shudder" );
	deepEqual( Stem("shuffle"), "shuffl" );
	deepEqual( Stem("shuffled"), "shuffl" );
	deepEqual( Stem("shufflers"), "shuffler" );
	deepEqual( Stem("shuffles"), "shuffl" );
	deepEqual( Stem("shuffling"), "shuffl" );
	deepEqual( Stem("shufflings"), "shuffl" );
	deepEqual( Stem("shuflle"), "shufll" );
	deepEqual( Stem("shun"), "shun" );
	deepEqual( Stem("shunned"), "shun" );
	deepEqual( Stem("shunning"), "shun" );
	deepEqual( Stem("shut"), "shut" );
	deepEqual( Stem("shuts"), "shut" );
	deepEqual( Stem("shutter"), "shutter" );
	deepEqual( Stem("shutters"), "shutter" );
	deepEqual( Stem("shutting"), "shut" );
	deepEqual( Stem("shy"), "shi" );
	deepEqual( Stem("shyer"), "shyer" );
	deepEqual( Stem("shyest"), "shyest" );
	deepEqual( Stem("shylock"), "shylock" );
	deepEqual( Stem("shyly"), "shyli" );
	deepEqual( Stem("shyness"), "shyness" );
	deepEqual( Stem("si"), "si" );
	deepEqual( Stem("siamese"), "siames" );
	deepEqual( Stem("siberia"), "siberia" );
	deepEqual( Stem("siberian"), "siberian" );
	deepEqual( Stem("sich"), "sich" );
	deepEqual( Stem("sick"), "sick" );
	deepEqual( Stem("sickened"), "sicken" );
	deepEqual( Stem("sickening"), "sicken" );
	deepEqual( Stem("sickens"), "sicken" );
	deepEqual( Stem("sickliness"), "sickli" );
	deepEqual( Stem("sickly"), "sick" );
	deepEqual( Stem("sickness"), "sick" );
	deepEqual( Stem("side"), "side" );
	deepEqual( Stem("sideboard"), "sideboard" );
	deepEqual( Stem("sided"), "side" );
	deepEqual( Stem("sidelong"), "sidelong" );
	deepEqual( Stem("sides"), "side" );
	deepEqual( Stem("sideway"), "sideway" );
	deepEqual( Stem("sideways"), "sideway" );
	deepEqual( Stem("sidewise"), "sidewis" );
	deepEqual( Stem("sidings"), "side" );
	deepEqual( Stem("sidle"), "sidl" );
	deepEqual( Stem("sidled"), "sidl" );
	deepEqual( Stem("sidles"), "sidl" );
	deepEqual( Stem("sidling"), "sidl" );
	deepEqual( Stem("siege"), "sieg" );
	deepEqual( Stem("sierra"), "sierra" );
	deepEqual( Stem("sieve"), "siev" );
	deepEqual( Stem("sift"), "sift" );
	deepEqual( Stem("sifter"), "sifter" );
	deepEqual( Stem("sigh"), "sigh" );
	deepEqual( Stem("sighed"), "sigh" );
	deepEqual( Stem("sighing"), "sigh" );
	deepEqual( Stem("sighs"), "sigh" );
	deepEqual( Stem("sight"), "sight" );
	deepEqual( Stem("sighted"), "sight" );
	deepEqual( Stem("sightedness"), "sighted" );
	deepEqual( Stem("sightless"), "sightless" );
	deepEqual( Stem("sights"), "sight" );
	deepEqual( Stem("sightseer"), "sightseer" );
	deepEqual( Stem("sign"), "sign" );
	deepEqual( Stem("signal"), "signal" );
	deepEqual( Stem("signalised"), "signalis" );
	deepEqual( Stem("signalize"), "signal" );
	deepEqual( Stem("signalling"), "signal" );
	deepEqual( Stem("signally"), "signal" );
	deepEqual( Stem("signals"), "signal" );
	deepEqual( Stem("signature"), "signatur" );
	deepEqual( Stem("signatures"), "signatur" );
	deepEqual( Stem("signed"), "sign" );
	deepEqual( Stem("significance"), "signific" );
	deepEqual( Stem("significancy"), "signific" );
	deepEqual( Stem("significant"), "signific" );
	deepEqual( Stem("significantly"), "signific" );
	deepEqual( Stem("signification"), "signif" );
	deepEqual( Stem("signified"), "signifi" );
	deepEqual( Stem("signifies"), "signifi" );
	deepEqual( Stem("signifieth"), "signifieth" );
	deepEqual( Stem("signify"), "signifi" );
	deepEqual( Stem("signifying"), "signifi" );
	deepEqual( Stem("signing"), "sign" );
	deepEqual( Stem("signoritas"), "signorita" );
	deepEqual( Stem("signs"), "sign" );
	deepEqual( Stem("sike"), "sike" );
	deepEqual( Stem("silence"), "silenc" );
	deepEqual( Stem("silenced"), "silenc" );
	deepEqual( Stem("silencing"), "silenc" );
	deepEqual( Stem("silent"), "silent" );
	deepEqual( Stem("silently"), "silent" );
	deepEqual( Stem("silex"), "silex" );
	deepEqual( Stem("siliceous"), "silic" );
	deepEqual( Stem("silicified"), "silicifi" );
	deepEqual( Stem("silk"), "silk" );
	deepEqual( Stem("silken"), "silken" );
	deepEqual( Stem("silkiness"), "silki" );
	deepEqual( Stem("silks"), "silk" );
	deepEqual( Stem("silkworm"), "silkworm" );
	deepEqual( Stem("silky"), "silki" );
	deepEqual( Stem("sill"), "sill" );
	deepEqual( Stem("sillier"), "sillier" );
	deepEqual( Stem("sillies"), "silli" );
	deepEqual( Stem("silliest"), "silliest" );
	deepEqual( Stem("silliman"), "silliman" );
	deepEqual( Stem("silliness"), "silli" );
	deepEqual( Stem("sills"), "sill" );
	deepEqual( Stem("silly"), "silli" );
	deepEqual( Stem("silurian"), "silurian" );
	deepEqual( Stem("silurus"), "silurus" );
	deepEqual( Stem("silver"), "silver" );
	deepEqual( Stem("silverbridge"), "silverbridg" );
	deepEqual( Stem("silvered"), "silver" );
	deepEqual( Stem("silversmith"), "silversmith" );
	deepEqual( Stem("silvery"), "silveri" );
	deepEqual( Stem("silworth"), "silworth" );
	deepEqual( Stem("similar"), "similar" );
	deepEqual( Stem("similarity"), "similar" );
	deepEqual( Stem("similarly"), "similar" );
	deepEqual( Stem("simile"), "simil" );
	deepEqual( Stem("similes"), "simil" );
	deepEqual( Stem("similitude"), "similitud" );
	deepEqual( Stem("simmering"), "simmer" );
	deepEqual( Stem("simmonds"), "simmond" );
	deepEqual( Stem("simper"), "simper" );
	deepEqual( Stem("simpered"), "simper" );
	deepEqual( Stem("simpering"), "simper" );
	deepEqual( Stem("simple"), "simpl" );
	deepEqual( Stem("simpler"), "simpler" );
	deepEqual( Stem("simplest"), "simplest" );
	deepEqual( Stem("simpleton"), "simpleton" );
	deepEqual( Stem("simpletons"), "simpleton" );
	deepEqual( Stem("simplex"), "simplex" );
	deepEqual( Stem("simplicity"), "simplic" );
	deepEqual( Stem("simplified"), "simplifi" );
	deepEqual( Stem("simplon"), "simplon" );
	deepEqual( Stem("simply"), "simpli" );
	deepEqual( Stem("simpson"), "simpson" );
	deepEqual( Stem("simul"), "simul" );
	deepEqual( Stem("simultaneous"), "simultan" );
	deepEqual( Stem("simultaneously"), "simultan" );
	deepEqual( Stem("sin"), "sin" );
	deepEqual( Stem("sinai"), "sinai" );
	deepEqual( Stem("sinbad"), "sinbad" );
	deepEqual( Stem("since"), "sinc" );
	deepEqual( Stem("sincere"), "sincer" );
	deepEqual( Stem("sincerely"), "sincer" );
	deepEqual( Stem("sincerest"), "sincerest" );
	deepEqual( Stem("sincerity"), "sincer" );
	deepEqual( Stem("sinecure"), "sinecur" );
	deepEqual( Stem("sinew"), "sinew" );
	deepEqual( Stem("sinews"), "sinew" );
	deepEqual( Stem("sinewy"), "sinewi" );
	deepEqual( Stem("sinful"), "sin" );
	deepEqual( Stem("sinfulness"), "sin" );
	deepEqual( Stem("sing"), "sing" );
	deepEqual( Stem("singapore"), "singapor" );
	deepEqual( Stem("singed"), "sing" );
	deepEqual( Stem("singeing"), "sing" );
	deepEqual( Stem("singer"), "singer" );
	deepEqual( Stem("singers"), "singer" );
	deepEqual( Stem("singing"), "sing" );
	deepEqual( Stem("single"), "singl" );
	deepEqual( Stem("singleness"), "singl" );
	deepEqual( Stem("singling"), "singl" );
	deepEqual( Stem("singly"), "singl" );
	deepEqual( Stem("sings"), "sing" );
	deepEqual( Stem("singula"), "singula" );
	deepEqual( Stem("singular"), "singular" );
	deepEqual( Stem("singularities"), "singular" );
	deepEqual( Stem("singularity"), "singular" );
	deepEqual( Stem("singularly"), "singular" );
	deepEqual( Stem("sinister"), "sinist" );
	deepEqual( Stem("sink"), "sink" );
	deepEqual( Stem("sinking"), "sink" );
	deepEqual( Stem("sinks"), "sink" );
	deepEqual( Stem("sinless"), "sinless" );
	deepEqual( Stem("sinlessly"), "sinless" );
	deepEqual( Stem("sinned"), "sin" );
	deepEqual( Stem("sinner"), "sinner" );
	deepEqual( Stem("sinners"), "sinner" );
	deepEqual( Stem("sinning"), "sin" );
	deepEqual( Stem("sins"), "sin" );
	deepEqual( Stem("sinuous"), "sinuous" );
	deepEqual( Stem("sip"), "sip" );
	deepEqual( Stem("siphon"), "siphon" );
	deepEqual( Stem("sipped"), "sip" );
	deepEqual( Stem("sipping"), "sip" );
	deepEqual( Stem("sips"), "sip" );
	deepEqual( Stem("sir"), "sir" );
	deepEqual( Stem("sire"), "sire" );
	deepEqual( Stem("siren"), "siren" );
	deepEqual( Stem("sirocco"), "sirocco" );
	deepEqual( Stem("sirrah"), "sirrah" );
	deepEqual( Stem("sister"), "sister" );
	deepEqual( Stem("sisterhood"), "sisterhood" );
	deepEqual( Stem("sisterly"), "sister" );
	deepEqual( Stem("sisters"), "sister" );
	deepEqual( Stem("sistine"), "sistin" );
	deepEqual( Stem("sit"), "sit" );
	deepEqual( Stem("site"), "site" );
	deepEqual( Stem("sites"), "site" );
	deepEqual( Stem("sitiwation"), "sitiw" );
	deepEqual( Stem("sitiwations"), "sitiw" );
	deepEqual( Stem("sits"), "sit" );
	deepEqual( Stem("sitter"), "sitter" );
	deepEqual( Stem("sitters"), "sitter" );
	deepEqual( Stem("sittin"), "sittin" );
	deepEqual( Stem("sitting"), "sit" );
	deepEqual( Stem("sittings"), "sit" );
	deepEqual( Stem("situ"), "situ" );
	deepEqual( Stem("situate"), "situat" );
	deepEqual( Stem("situated"), "situat" );
	deepEqual( Stem("situation"), "situat" );
	deepEqual( Stem("situations"), "situat" );
	deepEqual( Stem("siunmerson"), "siunmerson" );
	deepEqual( Stem("sivatherium"), "sivatherium" );
	deepEqual( Stem("six"), "six" );
	deepEqual( Stem("sixes"), "six" );
	deepEqual( Stem("sixieme"), "sixiem" );
	deepEqual( Stem("sixpen"), "sixpen" );
	deepEqual( Stem("sixpence"), "sixpenc" );
	deepEqual( Stem("sixpences"), "sixpenc" );
	deepEqual( Stem("sixpenny"), "sixpenni" );
	deepEqual( Stem("sixteen"), "sixteen" );
	deepEqual( Stem("sixteenth"), "sixteenth" );
	deepEqual( Stem("sixth"), "sixth" );
	deepEqual( Stem("sixthly"), "sixth" );
	deepEqual( Stem("sixty"), "sixti" );
	deepEqual( Stem("size"), "size" );
	deepEqual( Stem("sized"), "size" );
	deepEqual( Stem("sizes"), "size" );
	deepEqual( Stem("skampling"), "skampl" );
	deepEqual( Stem("skate"), "skate" );
	deepEqual( Stem("skaters"), "skater" );
	deepEqual( Stem("skating"), "skate" );
	deepEqual( Stem("skeen"), "skeen" );
	deepEqual( Stem("skein"), "skein" );
	deepEqual( Stem("skeleto"), "skeleto" );
	deepEqual( Stem("skeleton"), "skeleton" );
	deepEqual( Stem("skeletons"), "skeleton" );
	deepEqual( Stem("sketch"), "sketch" );
	deepEqual( Stem("sketched"), "sketch" );
	deepEqual( Stem("sketches"), "sketch" );
	deepEqual( Stem("sketchily"), "sketchili" );
	deepEqual( Stem("sketching"), "sketch" );
	deepEqual( Stem("skewer"), "skewer" );
	deepEqual( Stem("skiddaw"), "skiddaw" );
	deepEqual( Stem("skies"), "sky" );
	deepEqual( Stem("skilful"), "skil" );
	deepEqual( Stem("skilfully"), "skil" );
	deepEqual( Stem("skilfulness"), "skil" );
	deepEqual( Stem("skill"), "skill" );
	deepEqual( Stem("skilled"), "skill" );
	deepEqual( Stem("skilly"), "skilli" );
	deepEqual( Stem("skim"), "skim" );
	deepEqual( Stem("skimmed"), "skim" );
	deepEqual( Stem("skimming"), "skim" );
	deepEqual( Stem("skimpole"), "skimpol" );
	deepEqual( Stem("skims"), "skim" );
	deepEqual( Stem("skin"), "skin" );
	deepEqual( Stem("skinned"), "skin" );
	deepEqual( Stem("skinning"), "skin" );
	deepEqual( Stem("skinny"), "skinni" );
	deepEqual( Stem("skins"), "skin" );
	deepEqual( Stem("skip"), "skip" );
	deepEqual( Stem("skipped"), "skip" );
	deepEqual( Stem("skipper"), "skipper" );
	deepEqual( Stem("skipping"), "skip" );
	deepEqual( Stem("skips"), "skip" );
	deepEqual( Stem("skirmish"), "skirmish" );
	deepEqual( Stem("skirmished"), "skirmish" );
	deepEqual( Stem("skirmishes"), "skirmish" );
	deepEqual( Stem("skirmishing"), "skirmish" );
	deepEqual( Stem("skirt"), "skirt" );
	deepEqual( Stem("skirted"), "skirt" );
	deepEqual( Stem("skirts"), "skirt" );
	deepEqual( Stem("skittish"), "skittish" );
	deepEqual( Stem("skittle"), "skittl" );
	deepEqual( Stem("skittles"), "skittl" );
	deepEqual( Stem("skrimmage"), "skrimmag" );
	deepEqual( Stem("skul"), "skul" );
	deepEqual( Stem("skulk"), "skulk" );
	deepEqual( Stem("skulking"), "skulk" );
	deepEqual( Stem("skulks"), "skulk" );
	deepEqual( Stem("skull"), "skull" );
	deepEqual( Stem("skulls"), "skull" );
	deepEqual( Stem("skumpling"), "skumpl" );
	deepEqual( Stem("skunks"), "skunk" );
	deepEqual( Stem("skurry"), "skurri" );
	deepEqual( Stem("skuttle"), "skuttl" );
	deepEqual( Stem("sky"), "sky" );
	deepEqual( Stem("skye"), "skye" );
	deepEqual( Stem("skylark"), "skylark" );
	deepEqual( Stem("skylight"), "skylight" );
	deepEqual( Stem("skylights"), "skylight" );
	deepEqual( Stem("slab"), "slab" );
	deepEqual( Stem("slabs"), "slab" );
	deepEqual( Stem("slack"), "slack" );
	deepEqual( Stem("slacken"), "slacken" );
	deepEqual( Stem("slackened"), "slacken" );
	deepEqual( Stem("slackness"), "slack" );
	deepEqual( Stem("sladdery"), "sladderi" );
	deepEqual( Stem("slags"), "slag" );
	deepEqual( Stem("slain"), "slain" );
	deepEqual( Stem("slaked"), "slake" );
	deepEqual( Stem("slam"), "slam" );
	deepEqual( Stem("slammed"), "slam" );
	deepEqual( Stem("slammons"), "slammon" );
	deepEqual( Stem("slander"), "slander" );
	deepEqual( Stem("slandered"), "slander" );
	deepEqual( Stem("slanderer"), "slander" );
	deepEqual( Stem("slanderers"), "slander" );
	deepEqual( Stem("slandering"), "slander" );
	deepEqual( Stem("slang"), "slang" );
	deepEqual( Stem("slangular"), "slangular" );
	deepEqual( Stem("slanting"), "slant" );
	deepEqual( Stem("slap"), "slap" );
	deepEqual( Stem("slapped"), "slap" );
	deepEqual( Stem("slapping"), "slap" );
	deepEqual( Stem("slaps"), "slap" );
	deepEqual( Stem("slash"), "slash" );
	deepEqual( Stem("slashing"), "slash" );
	deepEqual( Stem("slat"), "slat" );
	deepEqual( Stem("slate"), "slate" );
	deepEqual( Stem("slatternly"), "slattern" );
	deepEqual( Stem("slaughter"), "slaughter" );
	deepEqual( Stem("slaughtered"), "slaughter" );
	deepEqual( Stem("slaughtering"), "slaughter" );
	deepEqual( Stem("slaughterous"), "slaughter" );
	deepEqual( Stem("slave"), "slave" );
	deepEqual( Stem("slaved"), "slave" );
	deepEqual( Stem("slavery"), "slaveri" );
	deepEqual( Stem("slaves"), "slave" );
	deepEqual( Stem("slavish"), "slavish" );
	deepEqual( Stem("slavishly"), "slavish" );
	deepEqual( Stem("slay"), "slay" );
	deepEqual( Stem("sledge"), "sledg" );
	deepEqual( Stem("sleek"), "sleek" );
	deepEqual( Stem("sleep"), "sleep" );
	deepEqual( Stem("sleeper"), "sleeper" );
	deepEqual( Stem("sleepers"), "sleeper" );
	deepEqual( Stem("sleepily"), "sleepili" );
	deepEqual( Stem("sleepiness"), "sleepi" );
	deepEqual( Stem("sleeping"), "sleep" );
	deepEqual( Stem("sleepless"), "sleepless" );
	deepEqual( Stem("sleeps"), "sleep" );
	deepEqual( Stem("sleepy"), "sleepi" );
	deepEqual( Stem("sleet"), "sleet" );
	deepEqual( Stem("sleeve"), "sleev" );
	deepEqual( Stem("sleeved"), "sleev" );
	deepEqual( Stem("sleeves"), "sleev" );
	deepEqual( Stem("sleight"), "sleight" );
	deepEqual( Stem("slender"), "slender" );
	deepEqual( Stem("slenderer"), "slender" );
	deepEqual( Stem("slenderly"), "slender" );
	deepEqual( Stem("slep"), "slep" );
	deepEqual( Stem("slept"), "slept" );
	deepEqual( Stem("slice"), "slice" );
	deepEqual( Stem("sliced"), "slice" );
	deepEqual( Stem("slices"), "slice" );
	deepEqual( Stem("slicing"), "slice" );
	deepEqual( Stem("slid"), "slid" );
	deepEqual( Stem("slide"), "slide" );
	deepEqual( Stem("slider"), "slider" );
	deepEqual( Stem("sliders"), "slider" );
	deepEqual( Stem("sliderskew"), "sliderskew" );
	deepEqual( Stem("slides"), "slide" );
	deepEqual( Stem("sliding"), "slide" );
	deepEqual( Stem("slight"), "slight" );
	deepEqual( Stem("slighted"), "slight" );
	deepEqual( Stem("slighter"), "slighter" );
	deepEqual( Stem("slightest"), "slightest" );
	deepEqual( Stem("slighting"), "slight" );
	deepEqual( Stem("slightly"), "slight" );
	deepEqual( Stem("slights"), "slight" );
	deepEqual( Stem("slim"), "slim" );
	deepEqual( Stem("slime"), "slime" );
	deepEqual( Stem("slimy"), "slimi" );
	deepEqual( Stem("sling"), "sling" );
	deepEqual( Stem("slings"), "sling" );
	deepEqual( Stem("slinking"), "slink" );
	deepEqual( Stem("slip"), "slip" );
	deepEqual( Stem("slipped"), "slip" );
	deepEqual( Stem("slipper"), "slipper" );
	deepEqual( Stem("slippered"), "slipper" );
	deepEqual( Stem("slippers"), "slipper" );
	deepEqual( Stem("slippery"), "slipperi" );
	deepEqual( Stem("slipping"), "slip" );
	deepEqual( Stem("slips"), "slip" );
	deepEqual( Stem("slipshod"), "slipshod" );
	deepEqual( Stem("slit"), "slit" );
	deepEqual( Stem("slits"), "slit" );
	deepEqual( Stem("sloane"), "sloan" );
	deepEqual( Stem("slocomb"), "slocomb" );
	deepEqual( Stem("slongs"), "slong" );
	deepEqual( Stem("slope"), "slope" );
	deepEqual( Stem("sloped"), "slope" );
	deepEqual( Stem("slopes"), "slope" );
	deepEqual( Stem("sloping"), "slope" );
	deepEqual( Stem("sloppy"), "sloppi" );
	deepEqual( Stem("slopseller"), "slopsel" );
	deepEqual( Stem("sloth"), "sloth" );
	deepEqual( Stem("sloths"), "sloth" );
	deepEqual( Stem("slouch"), "slouch" );
	deepEqual( Stem("slouching"), "slouch" );
	deepEqual( Stem("sloven"), "sloven" );
	deepEqual( Stem("slovenly"), "sloven" );
	deepEqual( Stem("slow"), "slow" );
	deepEqual( Stem("slower"), "slower" );
	deepEqual( Stem("slowly"), "slowli" );
	deepEqual( Stem("slowness"), "slow" );
	deepEqual( Stem("sludge"), "sludg" );
	deepEqual( Stem("slug"), "slug" );
	deepEqual( Stem("sluggish"), "sluggish" );
	deepEqual( Stem("slugs"), "slug" );
	deepEqual( Stem("sluices"), "sluic" );
	deepEqual( Stem("slumber"), "slumber" );
	deepEqual( Stem("slumbered"), "slumber" );
	deepEqual( Stem("slumbering"), "slumber" );
	deepEqual( Stem("slumbers"), "slumber" );
	deepEqual( Stem("slung"), "slung" );
	deepEqual( Stem("slunk"), "slunk" );
	deepEqual( Stem("slurring"), "slur" );
	deepEqual( Stem("slush"), "slush" );
	deepEqual( Stem("slut"), "slut" );
	deepEqual( Stem("sly"), "sli" );
	deepEqual( Stem("slyboots"), "slyboot" );
	deepEqual( Stem("slyly"), "slyli" );
	deepEqual( Stem("slyness"), "slyness" );
	deepEqual( Stem("smack"), "smack" );
	deepEqual( Stem("smacked"), "smack" );
	deepEqual( Stem("smacking"), "smack" );
	deepEqual( Stem("smacks"), "smack" );
	deepEqual( Stem("smal"), "smal" );
	deepEqual( Stem("small"), "small" );
	deepEqual( Stem("smallclothes"), "smallcloth" );
	deepEqual( Stem("smaller"), "smaller" );
	deepEqual( Stem("smallest"), "smallest" );
	deepEqual( Stem("smallness"), "small" );
	deepEqual( Stem("smalls"), "small" );
	deepEqual( Stem("smallweed"), "smallwe" );
	deepEqual( Stem("smallweeds"), "smallwe" );
	deepEqual( Stem("smallweedy"), "smallweedi" );
	deepEqual( Stem("smart"), "smart" );
	deepEqual( Stem("smartened"), "smarten" );
	deepEqual( Stem("smarting"), "smart" );
	deepEqual( Stem("smartly"), "smart" );
	deepEqual( Stem("smartness"), "smart" );
	deepEqual( Stem("smartnesses"), "smart" );
	deepEqual( Stem("smarts"), "smart" );
	deepEqual( Stem("smash"), "smash" );
	deepEqual( Stem("smashed"), "smash" );
	deepEqual( Stem("smashing"), "smash" );
	deepEqual( Stem("smattering"), "smatter" );
	deepEqual( Stem("smear"), "smear" );
	deepEqual( Stem("smeared"), "smear" );
	deepEqual( Stem("smearing"), "smear" );
	deepEqual( Stem("smears"), "smear" );
	deepEqual( Stem("smell"), "smell" );
	deepEqual( Stem("smelling"), "smell" );
	deepEqual( Stem("smells"), "smell" );
	deepEqual( Stem("smelt"), "smelt" );
	deepEqual( Stem("smelted"), "smelt" );
	deepEqual( Stem("smelting"), "smelt" );
	deepEqual( Stem("smiffeld"), "smiffeld" );
	deepEqual( Stem("smifligate"), "smiflig" );
	deepEqual( Stem("smifligation"), "smiflig" );
	deepEqual( Stem("smifser"), "smifser" );
	deepEqual( Stem("smike"), "smike" );
	deepEqual( Stem("smile"), "smile" );
	deepEqual( Stem("smiled"), "smile" );
	deepEqual( Stem("smiles"), "smile" );
	deepEqual( Stem("smilin"), "smilin" );
	deepEqual( Stem("smiling"), "smile" );
	deepEqual( Stem("smilingly"), "smile" );
	deepEqual( Stem("smirched"), "smirch" );
	deepEqual( Stem("smirk"), "smirk" );
	deepEqual( Stem("smirking"), "smirk" );
	deepEqual( Stem("smith"), "smith" );
	deepEqual( Stem("smithers"), "smither" );
	deepEqual( Stem("smithfield"), "smithfield" );
	deepEqual( Stem("smithson"), "smithson" );
	deepEqual( Stem("smiting"), "smite" );
	deepEqual( Stem("smitten"), "smitten" );
	deepEqual( Stem("smock"), "smock" );
	deepEqual( Stem("smoke"), "smoke" );
	deepEqual( Stem("smoked"), "smoke" );
	deepEqual( Stem("smoker"), "smoker" );
	deepEqual( Stem("smokes"), "smoke" );
	deepEqual( Stem("smoking"), "smoke" );
	deepEqual( Stem("smokings"), "smoke" );
	deepEqual( Stem("smoky"), "smoki" );
	deepEqual( Stem("smoldering"), "smolder" );
	deepEqual( Stem("smooth"), "smooth" );
	deepEqual( Stem("smoothed"), "smooth" );
	deepEqual( Stem("smoother"), "smoother" );
	deepEqual( Stem("smoothing"), "smooth" );
	deepEqual( Stem("smoothingly"), "smooth" );
	deepEqual( Stem("smoothings"), "smooth" );
	deepEqual( Stem("smoothly"), "smooth" );
	deepEqual( Stem("smoothness"), "smooth" );
	deepEqual( Stem("smooths"), "smooth" );
	deepEqual( Stem("smote"), "smote" );
	deepEqual( Stem("smothered"), "smother" );
	deepEqual( Stem("smothering"), "smother" );
	deepEqual( Stem("smothers"), "smother" );
	deepEqual( Stem("smouldering"), "smoulder" );
	deepEqual( Stem("smuggle"), "smuggl" );
	deepEqual( Stem("smuggler"), "smuggler" );
	deepEqual( Stem("smut"), "smut" );
	deepEqual( Stem("smutty"), "smutti" );
	deepEqual( Stem("snagsby"), "snagsbi" );
	deepEqual( Stem("snail"), "snail" );
	deepEqual( Stem("snails"), "snail" );
	deepEqual( Stem("snake"), "snake" );
	deepEqual( Stem("snakes"), "snake" );
	deepEqual( Stem("snap"), "snap" );
	deepEqual( Stem("snapped"), "snap" );
	deepEqual( Stem("snapper"), "snapper" );
	deepEqual( Stem("snapping"), "snap" );
	deepEqual( Stem("snappish"), "snappish" );
	deepEqual( Stem("snappishly"), "snappish" );
	deepEqual( Stem("snaps"), "snap" );
	deepEqual( Stem("snare"), "snare" );
	deepEqual( Stem("snares"), "snare" );
	deepEqual( Stem("snarl"), "snarl" );
	deepEqual( Stem("snarled"), "snarl" );
	deepEqual( Stem("snarling"), "snarl" );
	deepEqual( Stem("snarls"), "snarl" );
	deepEqual( Stem("snatch"), "snatch" );
	deepEqual( Stem("snatched"), "snatch" );
	deepEqual( Stem("snatches"), "snatch" );
	deepEqual( Stem("snatching"), "snatch" );
	deepEqual( Stem("snawley"), "snawley" );
	deepEqual( Stem("sneak"), "sneak" );
	deepEqual( Stem("sneaked"), "sneak" );
	deepEqual( Stem("sneaking"), "sneak" );
	deepEqual( Stem("sneaks"), "sneak" );
	deepEqual( Stem("sneer"), "sneer" );
	deepEqual( Stem("sneered"), "sneer" );
	deepEqual( Stem("sneering"), "sneer" );
	deepEqual( Stem("sneers"), "sneer" );
	deepEqual( Stem("sneeze"), "sneez" );
	deepEqual( Stem("sneezed"), "sneez" );
	deepEqual( Stem("sneezing"), "sneez" );
	deepEqual( Stem("snevellicci"), "snevellicci" );
	deepEqual( Stem("snewkes"), "snewk" );
	deepEqual( Stem("sniff"), "sniff" );
	deepEqual( Stem("sniffed"), "snif" );
	deepEqual( Stem("sniffing"), "snif" );
	deepEqual( Stem("sniffs"), "sniff" );
	deepEqual( Stem("snigger"), "snigger" );
	deepEqual( Stem("sniggered"), "snigger" );
	deepEqual( Stem("sniggering"), "snigger" );
	deepEqual( Stem("snipe"), "snipe" );
	deepEqual( Stem("snipping"), "snip" );
	deepEqual( Stem("snittle"), "snittl" );
	deepEqual( Stem("snobb"), "snobb" );
	deepEqual( Stem("snoog"), "snoog" );
	deepEqual( Stem("snooks"), "snook" );
	deepEqual( Stem("snore"), "snore" );
	deepEqual( Stem("snores"), "snore" );
	deepEqual( Stem("snoring"), "snore" );
	deepEqual( Stem("snort"), "snort" );
	deepEqual( Stem("snorted"), "snort" );
	deepEqual( Stem("snorting"), "snort" );
	deepEqual( Stem("snorts"), "snort" );
	deepEqual( Stem("snout"), "snout" );
	deepEqual( Stem("snow"), "snow" );
	deepEqual( Stem("snowed"), "snow" );
	deepEqual( Stem("snowflakes"), "snowflak" );
	deepEqual( Stem("snowing"), "snow" );
	deepEqual( Stem("snowstorm"), "snowstorm" );
	deepEqual( Stem("snowstorms"), "snowstorm" );
	deepEqual( Stem("snowy"), "snowi" );
	deepEqual( Stem("snub"), "snub" );
	deepEqual( Stem("snubbed"), "snub" );
	deepEqual( Stem("snubbing"), "snub" );
	deepEqual( Stem("snubs"), "snub" );
	deepEqual( Stem("snuff"), "snuff" );
	deepEqual( Stem("snuffed"), "snuf" );
	deepEqual( Stem("snuffers"), "snuffer" );
	deepEqual( Stem("snuffim"), "snuffim" );
	deepEqual( Stem("snuffing"), "snuf" );
	deepEqual( Stem("snuffling"), "snuffl" );
	deepEqual( Stem("snuffy"), "snuffi" );
	deepEqual( Stem("snug"), "snug" );
	deepEqual( Stem("snugly"), "snug" );
	deepEqual( Stem("so"), "so" );
	deepEqual( Stem("soaked"), "soak" );
	deepEqual( Stem("soaking"), "soak" );
	deepEqual( Stem("soap"), "soap" );
	deepEqual( Stem("soar"), "soar" );
	deepEqual( Stem("soared"), "soar" );
	deepEqual( Stem("soaring"), "soar" );
	deepEqual( Stem("soars"), "soar" );
	deepEqual( Stem("sob"), "sob" );
	deepEqual( Stem("sobbed"), "sob" );
	deepEqual( Stem("sobbing"), "sob" );
	deepEqual( Stem("sobbings"), "sob" );
	deepEqual( Stem("sober"), "sober" );
	deepEqual( Stem("sobered"), "sober" );
	deepEqual( Stem("sobering"), "sober" );
	deepEqual( Stem("soberly"), "sober" );
	deepEqual( Stem("sobre"), "sobr" );
	deepEqual( Stem("sobriety"), "sobrieti" );
	deepEqual( Stem("sobs"), "sob" );
	deepEqual( Stem("soc"), "soc" );
	deepEqual( Stem("socego"), "socego" );
	deepEqual( Stem("sociable"), "sociabl" );
	deepEqual( Stem("social"), "social" );
	deepEqual( Stem("socialist"), "socialist" );
	deepEqual( Stem("socialists"), "socialist" );
	deepEqual( Stem("sociality"), "social" );
	deepEqual( Stem("socially"), "social" );
	deepEqual( Stem("society"), "societi" );
	deepEqual( Stem("sock"), "sock" );
	deepEqual( Stem("socket"), "socket" );
	deepEqual( Stem("sockets"), "socket" );
	deepEqual( Stem("socks"), "sock" );
	deepEqual( Stem("soda"), "soda" );
	deepEqual( Stem("sodden"), "sodden" );
	deepEqual( Stem("soever"), "soever" );
	deepEqual( Stem("sofa"), "sofa" );
	deepEqual( Stem("sofas"), "sofa" );
	deepEqual( Stem("soft"), "soft" );
	deepEqual( Stem("soften"), "soften" );
	deepEqual( Stem("softened"), "soften" );
	deepEqual( Stem("softeners"), "soften" );
	deepEqual( Stem("softening"), "soften" );
	deepEqual( Stem("softens"), "soften" );
	deepEqual( Stem("softer"), "softer" );
	deepEqual( Stem("softest"), "softest" );
	deepEqual( Stem("softly"), "soft" );
	deepEqual( Stem("softness"), "soft" );
	deepEqual( Stem("sofy"), "sofi" );
	deepEqual( Stem("sofya"), "sofya" );
	deepEqual( Stem("soho"), "soho" );
	deepEqual( Stem("soie"), "soie" );
	deepEqual( Stem("soight"), "soight" );
	deepEqual( Stem("soil"), "soil" );
	deepEqual( Stem("soiled"), "soil" );
	deepEqual( Stem("soiree"), "soire" );
	deepEqual( Stem("soirees"), "soire" );
	deepEqual( Stem("soizable"), "soizabl" );
	deepEqual( Stem("soizes"), "soiz" );
	deepEqual( Stem("sojourn"), "sojourn" );
	deepEqual( Stem("sojourners"), "sojourn" );
	deepEqual( Stem("sojourning"), "sojourn" );
	deepEqual( Stem("sol"), "sol" );
	deepEqual( Stem("solace"), "solac" );
	deepEqual( Stem("solaced"), "solac" );
	deepEqual( Stem("solaces"), "solac" );
	deepEqual( Stem("solacing"), "solac" );
	deepEqual( Stem("solander"), "soland" );
	deepEqual( Stem("solar"), "solar" );
	deepEqual( Stem("sold"), "sold" );
	deepEqual( Stem("soldier"), "soldier" );
	deepEqual( Stem("soldiering"), "soldier" );
	deepEqual( Stem("soldierly"), "soldier" );
	deepEqual( Stem("soldiers"), "soldier" );
	deepEqual( Stem("sole"), "sole" );
	deepEqual( Stem("solecisms"), "solec" );
	deepEqual( Stem("solely"), "sole" );
	deepEqual( Stem("solemn"), "solemn" );
	deepEqual( Stem("solemnest"), "solemnest" );
	deepEqual( Stem("solemnities"), "solemn" );
	deepEqual( Stem("solemnity"), "solemn" );
	deepEqual( Stem("solemnly"), "solemn" );
	deepEqual( Stem("solen"), "solen" );
	deepEqual( Stem("solent"), "solent" );
	deepEqual( Stem("soles"), "sole" );
	deepEqual( Stem("solicitation"), "solicit" );
	deepEqual( Stem("solicitations"), "solicit" );
	deepEqual( Stem("solicited"), "solicit" );
	deepEqual( Stem("soliciting"), "solicit" );
	deepEqual( Stem("solicitor"), "solicitor" );
	deepEqual( Stem("solicitors"), "solicitor" );
	deepEqual( Stem("solicitous"), "solicit" );
	deepEqual( Stem("solicitously"), "solicit" );
	deepEqual( Stem("solicits"), "solicit" );
	deepEqual( Stem("solicitude"), "solicitud" );
	deepEqual( Stem("solid"), "solid" );
	deepEqual( Stem("solidified"), "solidifi" );
	deepEqual( Stem("solidities"), "solid" );
	deepEqual( Stem("solidity"), "solid" );
	deepEqual( Stem("solidness"), "solid" );
	deepEqual( Stem("soliloquies"), "soliloqui" );
	deepEqual( Stem("soliloquised"), "soliloquis" );
	deepEqual( Stem("soliloquize"), "soliloqu" );
	deepEqual( Stem("soliloquized"), "soliloqu" );
	deepEqual( Stem("soliloquy"), "soliloquy" );
	deepEqual( Stem("solitaries"), "solitari" );
	deepEqual( Stem("solitary"), "solitari" );
	deepEqual( Stem("solitude"), "solitud" );
	deepEqual( Stem("solitudes"), "solitud" );
	deepEqual( Stem("solo"), "solo" );
	deepEqual( Stem("solomon"), "solomon" );
	deepEqual( Stem("solon"), "solon" );
	deepEqual( Stem("solstice"), "solstic" );
	deepEqual( Stem("soluble"), "solubl" );
	deepEqual( Stem("solution"), "solut" );
	deepEqual( Stem("solve"), "solv" );
	deepEqual( Stem("solved"), "solv" );
	deepEqual( Stem("solvent"), "solvent" );
	deepEqual( Stem("solves"), "solv" );
	deepEqual( Stem("som"), "som" );
	deepEqual( Stem("sombre"), "sombr" );
	deepEqual( Stem("sombrero"), "sombrero" );
	deepEqual( Stem("some"), "some" );
	deepEqual( Stem("somebodies"), "somebodi" );
	deepEqual( Stem("somebody"), "somebodi" );
	deepEqual( Stem("someday"), "someday" );
	deepEqual( Stem("somehow"), "somehow" );
	deepEqual( Stem("someone"), "someon" );
	deepEqual( Stem("somers"), "somer" );
	deepEqual( Stem("something"), "someth" );
	deepEqual( Stem("somethings"), "someth" );
	deepEqual( Stem("somethink"), "somethink" );
	deepEqual( Stem("sometime"), "sometim" );
	deepEqual( Stem("sometimes"), "sometim" );
	deepEqual( Stem("someway"), "someway" );
	deepEqual( Stem("somewhat"), "somewhat" );
	deepEqual( Stem("somewhere"), "somewher" );
	deepEqual( Stem("somewheres"), "somewher" );
	deepEqual( Stem("somewhither"), "somewhith" );
	deepEqual( Stem("somnolent"), "somnol" );
	deepEqual( Stem("somnum"), "somnum" );
	deepEqual( Stem("son"), "son" );
	deepEqual( Stem("sondern"), "sondern" );
	deepEqual( Stem("sone"), "sone" );
	deepEqual( Stem("song"), "song" );
	deepEqual( Stem("songs"), "song" );
	deepEqual( Stem("sonia"), "sonia" );
	deepEqual( Stem("sonnets"), "sonnet" );
	deepEqual( Stem("sonorous"), "sonor" );
	deepEqual( Stem("sonorously"), "sonor" );
	deepEqual( Stem("sonourous"), "sonour" );
	deepEqual( Stem("sons"), "son" );
	deepEqual( Stem("soobjact"), "soobjact" );
	deepEqual( Stem("soodden"), "soodden" );
	deepEqual( Stem("sooffer"), "sooffer" );
	deepEqual( Stem("soom"), "soom" );
	deepEqual( Stem("soomat"), "soomat" );
	deepEqual( Stem("soon"), "soon" );
	deepEqual( Stem("sooner"), "sooner" );
	deepEqual( Stem("soonest"), "soonest" );
	deepEqual( Stem("soop"), "soop" );
	deepEqual( Stem("sooper"), "sooper" );
	deepEqual( Stem("soot"), "soot" );
	deepEqual( Stem("sooth"), "sooth" );
	deepEqual( Stem("soothe"), "sooth" );
	deepEqual( Stem("soothed"), "sooth" );
	deepEqual( Stem("soothing"), "sooth" );
	deepEqual( Stem("soothingly"), "sooth" );
	deepEqual( Stem("sooty"), "sooti" );
	deepEqual( Stem("sop"), "sop" );
	deepEqual( Stem("sophistry"), "sophistri" );
	deepEqual( Stem("soporific"), "soporif" );
	deepEqual( Stem("sopped"), "sop" );
	deepEqual( Stem("sorcery"), "sorceri" );
	deepEqual( Stem("sordid"), "sordid" );
	deepEqual( Stem("sore"), "sore" );
	deepEqual( Stem("sorely"), "sore" );
	deepEqual( Stem("soreness"), "sore" );
	deepEqual( Stem("sores"), "sore" );
	deepEqual( Stem("sorest"), "sorest" );
	deepEqual( Stem("sorrel"), "sorrel" );
	deepEqual( Stem("sorrow"), "sorrow" );
	deepEqual( Stem("sorrowful"), "sorrow" );
	deepEqual( Stem("sorrowfully"), "sorrow" );
	deepEqual( Stem("sorrowing"), "sorrow" );
	deepEqual( Stem("sorrows"), "sorrow" );
	deepEqual( Stem("sorry"), "sorri" );
	deepEqual( Stem("sort"), "sort" );
	deepEqual( Stem("sorted"), "sort" );
	deepEqual( Stem("sorting"), "sort" );
	deepEqual( Stem("sorts"), "sort" );
	deepEqual( Stem("sotto"), "sotto" );
	deepEqual( Stem("sought"), "sought" );
	deepEqual( Stem("soul"), "soul" );
	deepEqual( Stem("souled"), "soul" );
	deepEqual( Stem("souls"), "soul" );
	deepEqual( Stem("soun"), "soun" );
	deepEqual( Stem("sound"), "sound" );
	deepEqual( Stem("sounded"), "sound" );
	deepEqual( Stem("sounder"), "sounder" );
	deepEqual( Stem("sounding"), "sound" );
	deepEqual( Stem("soundings"), "sound" );
	deepEqual( Stem("soundly"), "sound" );
	deepEqual( Stem("soundness"), "sound" );
	deepEqual( Stem("sounds"), "sound" );
	deepEqual( Stem("soup"), "soup" );
	deepEqual( Stem("sour"), "sour" );
	deepEqual( Stem("source"), "sourc" );
	deepEqual( Stem("sources"), "sourc" );
	deepEqual( Stem("soured"), "sour" );
	deepEqual( Stem("souring"), "sour" );
	deepEqual( Stem("sourly"), "sour" );
	deepEqual( Stem("sous"), "sous" );
	deepEqual( Stem("soused"), "sous" );
	deepEqual( Stem("sousing"), "sous" );
	deepEqual( Stem("sout"), "sout" );
	deepEqual( Stem("south"), "south" );
	deepEqual( Stem("southampton"), "southampton" );
	deepEqual( Stem("southerly"), "souther" );
	deepEqual( Stem("southern"), "southern" );
	deepEqual( Stem("southfront"), "southfront" );
	deepEqual( Stem("southward"), "southward" );
	deepEqual( Stem("southwards"), "southward" );
	deepEqual( Stem("southwestern"), "southwestern" );
	deepEqual( Stem("sov"), "sov" );
	deepEqual( Stem("sovereign"), "sovereign" );
	deepEqual( Stem("sovereignest"), "sovereignest" );
	deepEqual( Stem("sovereigns"), "sovereign" );
	deepEqual( Stem("sovereignty"), "sovereignti" );
	deepEqual( Stem("sow"), "sow" );
	deepEqual( Stem("sowed"), "sow" );
	deepEqual( Stem("sowerby"), "sowerbi" );
	deepEqual( Stem("sowing"), "sow" );
	deepEqual( Stem("sown"), "sown" );
	deepEqual( Stem("sows"), "sow" );
	deepEqual( Stem("space"), "space" );
	deepEqual( Stem("spaces"), "space" );
	deepEqual( Stem("spacious"), "spacious" );
	deepEqual( Stem("spade"), "spade" );
	deepEqual( Stem("spain"), "spain" );
	deepEqual( Stem("spak"), "spak" );
	deepEqual( Stem("spake"), "spake" );
	deepEqual( Stem("spaletro"), "spaletro" );
	deepEqual( Stem("span"), "span" );
	deepEqual( Stem("spangled"), "spangl" );
	deepEqual( Stem("spaniard"), "spaniard" );
	deepEqual( Stem("spaniards"), "spaniard" );
	deepEqual( Stem("spaniels"), "spaniel" );
	deepEqual( Stem("spanish"), "spanish" );
	deepEqual( Stem("spanned"), "span" );
	deepEqual( Stem("spar"), "spar" );
	deepEqual( Stem("spare"), "spare" );
	deepEqual( Stem("spared"), "spare" );
	deepEqual( Stem("spares"), "spare" );
	deepEqual( Stem("sparing"), "spare" );
	deepEqual( Stem("sparingly"), "spare" );
	deepEqual( Stem("spark"), "spark" );
	deepEqual( Stem("sparking"), "spark" );
	deepEqual( Stem("sparkle"), "sparkl" );
	deepEqual( Stem("sparkled"), "sparkl" );
	deepEqual( Stem("sparklers"), "sparkler" );
	deepEqual( Stem("sparkles"), "sparkl" );
	deepEqual( Stem("sparkling"), "sparkl" );
	deepEqual( Stem("sparks"), "spark" );
	deepEqual( Stem("sparring"), "spar" );
	deepEqual( Stem("sparrow"), "sparrow" );
	deepEqual( Stem("sparrows"), "sparrow" );
	deepEqual( Stem("spartan"), "spartan" );
	deepEqual( Stem("spasm"), "spasm" );
	deepEqual( Stem("spasmodic"), "spasmod" );
	deepEqual( Stem("spasmodically"), "spasmod" );
	deepEqual( Stem("spasms"), "spasm" );
	deepEqual( Stem("spat"), "spat" );
	deepEqual( Stem("spattered"), "spatter" );
	deepEqual( Stem("spawn"), "spawn" );
	deepEqual( Stem("speak"), "speak" );
	deepEqual( Stem("speaker"), "speaker" );
	deepEqual( Stem("speaketh"), "speaketh" );
	deepEqual( Stem("speakin"), "speakin" );
	deepEqual( Stem("speaking"), "speak" );
	deepEqual( Stem("speaks"), "speak" );
	deepEqual( Stem("spear"), "spear" );
	deepEqual( Stem("spearhead"), "spearhead" );
	deepEqual( Stem("spearing"), "spear" );
	deepEqual( Stem("spears"), "spear" );
	deepEqual( Stem("spec"), "spec" );
	deepEqual( Stem("special"), "special" );
	deepEqual( Stem("specialist"), "specialist" );
	deepEqual( Stem("speciality"), "special" );
	deepEqual( Stem("specially"), "special" );
	deepEqual( Stem("specialty"), "specialti" );
	deepEqual( Stem("species"), "speci" );
	deepEqual( Stem("specific"), "specif" );
	deepEqual( Stem("specifically"), "specif" );
	deepEqual( Stem("specified"), "specifi" );
	deepEqual( Stem("specify"), "specifi" );
	deepEqual( Stem("specimen"), "specimen" );
	deepEqual( Stem("specimens"), "specimen" );
	deepEqual( Stem("specious"), "specious" );
	deepEqual( Stem("speck"), "speck" );
	deepEqual( Stem("speckelation"), "speckel" );
	deepEqual( Stem("speckled"), "speckl" );
	deepEqual( Stem("specks"), "speck" );
	deepEqual( Stem("spectacle"), "spectacl" );
	deepEqual( Stem("spectacled"), "spectacl" );
	deepEqual( Stem("spectacles"), "spectacl" );
	deepEqual( Stem("spectator"), "spectat" );
	deepEqual( Stem("spectators"), "spectat" );
	deepEqual( Stem("spectral"), "spectral" );
	deepEqual( Stem("spectre"), "spectr" );
	deepEqual( Stem("speculate"), "specul" );
	deepEqual( Stem("speculated"), "specul" );
	deepEqual( Stem("speculates"), "specul" );
	deepEqual( Stem("speculating"), "specul" );
	deepEqual( Stem("speculation"), "specul" );
	deepEqual( Stem("speculations"), "specul" );
	deepEqual( Stem("speculative"), "specul" );
	deepEqual( Stem("speculator"), "specul" );
	deepEqual( Stem("speculators"), "specul" );
	deepEqual( Stem("sped"), "sped" );
	deepEqual( Stem("speech"), "speech" );
	deepEqual( Stem("speeches"), "speech" );
	deepEqual( Stem("speechifying"), "speechifi" );
	deepEqual( Stem("speechless"), "speechless" );
	deepEqual( Stem("speechlessly"), "speechless" );
	deepEqual( Stem("speed"), "speed" );
	deepEqual( Stem("speediest"), "speediest" );
	deepEqual( Stem("speedily"), "speedili" );
	deepEqual( Stem("speedy"), "speedi" );
	deepEqual( Stem("spell"), "spell" );
	deepEqual( Stem("spelling"), "spell" );
	deepEqual( Stem("spells"), "spell" );
	deepEqual( Stem("spelt"), "spelt" );
	deepEqual( Stem("spence"), "spenc" );
	deepEqual( Stem("spencer"), "spencer" );
	deepEqual( Stem("spend"), "spend" );
	deepEqual( Stem("spending"), "spend" );
	deepEqual( Stem("spends"), "spend" );
	deepEqual( Stem("spendthrift"), "spendthrift" );
	deepEqual( Stem("spent"), "spent" );
	deepEqual( Stem("spermaceti"), "spermaceti" );
	deepEqual( Stem("sphere"), "sphere" );
	deepEqual( Stem("spheres"), "sphere" );
	deepEqual( Stem("spherical"), "spheric" );
	deepEqual( Stem("sphex"), "sphex" );
	deepEqual( Stem("sphinx"), "sphinx" );
	deepEqual( Stem("sphinxes"), "sphinx" );
	deepEqual( Stem("spice"), "spice" );
	deepEqual( Stem("spick"), "spick" );
	deepEqual( Stem("spicula"), "spicula" );
	deepEqual( Stem("spicy"), "spici" );
	deepEqual( Stem("spider"), "spider" );
	deepEqual( Stem("spiders"), "spider" );
	deepEqual( Stem("spied"), "spi" );
	deepEqual( Stem("spies"), "spi" );
	deepEqual( Stem("spigwiffin"), "spigwiffin" );
	deepEqual( Stem("spiked"), "spike" );
	deepEqual( Stem("spikes"), "spike" );
	deepEqual( Stem("spileing"), "spile" );
	deepEqual( Stem("spill"), "spill" );
	deepEqual( Stem("spilled"), "spill" );
	deepEqual( Stem("spilling"), "spill" );
	deepEqual( Stem("spilt"), "spilt" );
	deepEqual( Stem("spin"), "spin" );
	deepEqual( Stem("spinach"), "spinach" );
	deepEqual( Stem("spinal"), "spinal" );
	deepEqual( Stem("spindle"), "spindl" );
	deepEqual( Stem("spine"), "spine" );
	deepEqual( Stem("spines"), "spine" );
	deepEqual( Stem("spinners"), "spinner" );
	deepEqual( Stem("spinnies"), "spinni" );
	deepEqual( Stem("spinning"), "spin" );
	deepEqual( Stem("spinster"), "spinster" );
	deepEqual( Stem("spiny"), "spini" );
	deepEqual( Stem("spiral"), "spiral" );
	deepEqual( Stem("spirally"), "spiral" );
	deepEqual( Stem("spire"), "spire" );
	deepEqual( Stem("spires"), "spire" );
	deepEqual( Stem("spirit"), "spirit" );
	deepEqual( Stem("spirited"), "spirit" );
	deepEqual( Stem("spiritless"), "spiritless" );
	deepEqual( Stem("spirits"), "spirit" );
	deepEqual( Stem("spiritual"), "spiritu" );
	deepEqual( Stem("spirituous"), "spiritu" );
	deepEqual( Stem("spirt"), "spirt" );
	deepEqual( Stem("spirted"), "spirt" );
	deepEqual( Stem("spit"), "spit" );
	deepEqual( Stem("spite"), "spite" );
	deepEqual( Stem("spiteful"), "spite" );
	deepEqual( Stem("spitefully"), "spite" );
	deepEqual( Stem("spitefulness"), "spite" );
	deepEqual( Stem("spithead"), "spithead" );
	deepEqual( Stem("spits"), "spit" );
	deepEqual( Stem("spitting"), "spit" );
	deepEqual( Stem("spittoon"), "spittoon" );
	deepEqual( Stem("spittoons"), "spittoon" );
	deepEqual( Stem("spitzbergen"), "spitzbergen" );
	deepEqual( Stem("splash"), "splash" );
	deepEqual( Stem("splashed"), "splash" );
	deepEqual( Stem("splashes"), "splash" );
	deepEqual( Stem("splashin"), "splashin" );
	deepEqual( Stem("splashing"), "splash" );
	deepEqual( Stem("spleen"), "spleen" );
	deepEqual( Stem("splendid"), "splendid" );
	deepEqual( Stem("splendidly"), "splendid" );
	deepEqual( Stem("splendour"), "splendour" );
	deepEqual( Stem("splendours"), "splendour" );
	deepEqual( Stem("splenetic"), "splenet" );
	deepEqual( Stem("splinter"), "splinter" );
	deepEqual( Stem("split"), "split" );
	deepEqual( Stem("splitting"), "split" );
	deepEqual( Stem("sploiced"), "sploic" );
	deepEqual( Stem("splutter"), "splutter" );
	deepEqual( Stem("spluttering"), "splutter" );
	deepEqual( Stem("spo"), "spo" );
	deepEqual( Stem("spoil"), "spoil" );
	deepEqual( Stem("spoiled"), "spoil" );
	deepEqual( Stem("spoiling"), "spoil" );
	deepEqual( Stem("spoils"), "spoil" );
	deepEqual( Stem("spoilt"), "spoilt" );
	deepEqual( Stem("spoke"), "spoke" );
	deepEqual( Stem("spoken"), "spoken" );
	deepEqual( Stem("spokesman"), "spokesman" );
	deepEqual( Stem("spoliation"), "spoliat" );
	deepEqual( Stem("sponge"), "spong" );
	deepEqual( Stem("spongey"), "spongey" );
	deepEqual( Stem("sponsor"), "sponsor" );
	deepEqual( Stem("sponsorial"), "sponsori" );
	deepEqual( Stem("sponsors"), "sponsor" );
	deepEqual( Stem("spontaneous"), "spontan" );
	deepEqual( Stem("spontaneously"), "spontan" );
	deepEqual( Stem("spoon"), "spoon" );
	deepEqual( Stem("spoonbill"), "spoonbil" );
	deepEqual( Stem("spoonful"), "spoon" );
	deepEqual( Stem("spoonfuls"), "spoon" );
	deepEqual( Stem("spoons"), "spoon" );
	deepEqual( Stem("sport"), "sport" );
	deepEqual( Stem("sported"), "sport" );
	deepEqual( Stem("sporting"), "sport" );
	deepEqual( Stem("sportive"), "sportiv" );
	deepEqual( Stem("sportiveness"), "sportiv" );
	deepEqual( Stem("sports"), "sport" );
	deepEqual( Stem("sportsman"), "sportsman" );
	deepEqual( Stem("sportsmen"), "sportsmen" );
	deepEqual( Stem("sporules"), "sporul" );
	deepEqual( Stem("spot"), "spot" );
	deepEqual( Stem("spotless"), "spotless" );
	deepEqual( Stem("spots"), "spot" );
	deepEqual( Stem("spotted"), "spot" );
	deepEqual( Stem("spotty"), "spotti" );
	deepEqual( Stem("spouse"), "spous" );
	deepEqual( Stem("spout"), "spout" );
	deepEqual( Stem("spouting"), "spout" );
	deepEqual( Stem("spouts"), "spout" );
	deepEqual( Stem("spraining"), "sprain" );
	deepEqual( Stem("sprang"), "sprang" );
	deepEqual( Stem("sprawler"), "sprawler" );
	deepEqual( Stem("sprawls"), "sprawl" );
	deepEqual( Stem("spray"), "spray" );
	deepEqual( Stem("spread"), "spread" );
	deepEqual( Stem("spreading"), "spread" );
	deepEqual( Stem("spreads"), "spread" );
	deepEqual( Stem("spree"), "spree" );
	deepEqual( Stem("sprightliness"), "sprightli" );
	deepEqual( Stem("sprightly"), "spright" );
	deepEqual( Stem("spring"), "spring" );
	deepEqual( Stem("springing"), "spring" );
	deepEqual( Stem("springs"), "spring" );
	deepEqual( Stem("sprinkle"), "sprinkl" );
	deepEqual( Stem("sprinkled"), "sprinkl" );
	deepEqual( Stem("sprinkling"), "sprinkl" );
	deepEqual( Stem("sprite"), "sprite" );
	deepEqual( Stem("sprott"), "sprott" );
	deepEqual( Stem("sprout"), "sprout" );
	deepEqual( Stem("sprouter"), "sprouter" );
	deepEqual( Stem("sprouts"), "sprout" );
	deepEqual( Stem("spruce"), "spruce" );
	deepEqual( Stem("sprucely"), "spruce" );
	deepEqual( Stem("sprugeon"), "sprugeon" );
	deepEqual( Stem("sprugeons"), "sprugeon" );
	deepEqual( Stem("sprung"), "sprung" );
	deepEqual( Stem("spun"), "spun" );
	deepEqual( Stem("spur"), "spur" );
	deepEqual( Stem("spurn"), "spurn" );
	deepEqual( Stem("spurned"), "spurn" );
	deepEqual( Stem("spurred"), "spur" );
	deepEqual( Stem("spurs"), "spur" );
	deepEqual( Stem("spy"), "spi" );
	deepEqual( Stem("spying"), "spi" );
	deepEqual( Stem("squabble"), "squabbl" );
	deepEqual( Stem("squabbles"), "squabbl" );
	deepEqual( Stem("squabbling"), "squabbl" );
	deepEqual( Stem("squabs"), "squab" );
	deepEqual( Stem("squalid"), "squalid" );
	deepEqual( Stem("squall"), "squall" );
	deepEqual( Stem("squallingest"), "squallingest" );
	deepEqual( Stem("squalls"), "squall" );
	deepEqual( Stem("squally"), "squalli" );
	deepEqual( Stem("squalor"), "squalor" );
	deepEqual( Stem("squander"), "squander" );
	deepEqual( Stem("squandered"), "squander" );
	deepEqual( Stem("squandering"), "squander" );
	deepEqual( Stem("square"), "squar" );
	deepEqual( Stem("squared"), "squar" );
	deepEqual( Stem("squarely"), "squar" );
	deepEqual( Stem("squarer"), "squarer" );
	deepEqual( Stem("squares"), "squar" );
	deepEqual( Stem("squaring"), "squar" );
	deepEqual( Stem("squashed"), "squash" );
	deepEqual( Stem("squat"), "squat" );
	deepEqual( Stem("squatted"), "squat" );
	deepEqual( Stem("squatters"), "squatter" );
	deepEqual( Stem("squatting"), "squat" );
	deepEqual( Stem("squeak"), "squeak" );
	deepEqual( Stem("squeaked"), "squeak" );
	deepEqual( Stem("squeal"), "squeal" );
	deepEqual( Stem("squealed"), "squeal" );
	deepEqual( Stem("squealing"), "squeal" );
	deepEqual( Stem("squeals"), "squeal" );
	deepEqual( Stem("squeamishly"), "squeamish" );
	deepEqual( Stem("squeamishness"), "squeamish" );
	deepEqual( Stem("squeedged"), "squeedg" );
	deepEqual( Stem("squeedgin"), "squeedgin" );
	deepEqual( Stem("squeer"), "squeer" );
	deepEqual( Stem("squeers"), "squeer" );
	deepEqual( Stem("squeerses"), "squeers" );
	deepEqual( Stem("squeery"), "squeeri" );
	deepEqual( Stem("squeeze"), "squeez" );
	deepEqual( Stem("squeezed"), "squeez" );
	deepEqual( Stem("squeezes"), "squeez" );
	deepEqual( Stem("squeezing"), "squeez" );
	deepEqual( Stem("squib"), "squib" );
	deepEqual( Stem("squint"), "squint" );
	deepEqual( Stem("squire"), "squir" );
	deepEqual( Stem("squirearchy"), "squirearchi" );
	deepEqual( Stem("squires"), "squir" );
	deepEqual( Stem("squiress"), "squiress" );
	deepEqual( Stem("squirt"), "squirt" );
	deepEqual( Stem("squod"), "squod" );
	deepEqual( Stem("st"), "st" );
	deepEqual( Stem("stab"), "stab" );
	deepEqual( Stem("stabbed"), "stab" );
	deepEqual( Stem("stabbing"), "stab" );
	deepEqual( Stem("stability"), "stabil" );
	deepEqual( Stem("stable"), "stabl" );
	deepEqual( Stem("stabled"), "stabl" );
	deepEqual( Stem("stables"), "stabl" );
	deepEqual( Stem("stablewards"), "stableward" );
	deepEqual( Stem("stabling"), "stabl" );
	deepEqual( Stem("stack"), "stack" );
	deepEqual( Stem("stacks"), "stack" );
	deepEqual( Stem("staff"), "staff" );
	deepEqual( Stem("staffordshire"), "staffordshir" );
	deepEqual( Stem("staffs"), "staff" );
	deepEqual( Stem("stag"), "stag" );
	deepEqual( Stem("stage"), "stage" );
	deepEqual( Stem("stagecoach"), "stagecoach" );
	deepEqual( Stem("stager"), "stager" );
	deepEqual( Stem("stages"), "stage" );
	deepEqual( Stem("stagger"), "stagger" );
	deepEqual( Stem("staggered"), "stagger" );
	deepEqual( Stem("staggering"), "stagger" );
	deepEqual( Stem("staggers"), "stagger" );
	deepEqual( Stem("stagnant"), "stagnant" );
	deepEqual( Stem("stagnating"), "stagnat" );
	deepEqual( Stem("stagnation"), "stagnat" );
	deepEqual( Stem("stags"), "stag" );
	deepEqual( Stem("staid"), "staid" );
	deepEqual( Stem("staidness"), "staid" );
	deepEqual( Stem("stain"), "stain" );
	deepEqual( Stem("stained"), "stain" );
	deepEqual( Stem("stains"), "stain" );
	deepEqual( Stem("stair"), "stair" );
	deepEqual( Stem("staircase"), "staircas" );
	deepEqual( Stem("staircases"), "staircas" );
	deepEqual( Stem("stairs"), "stair" );
	deepEqual( Stem("stake"), "stake" );
	deepEqual( Stem("staked"), "stake" );
	deepEqual( Stem("stakes"), "stake" );
	deepEqual( Stem("staking"), "stake" );
	deepEqual( Stem("stalactical"), "stalact" );
	deepEqual( Stem("stalactitic"), "stalactit" );
	deepEqual( Stem("stale"), "stale" );
	deepEqual( Stem("staled"), "stale" );
	deepEqual( Stem("stalk"), "stalk" );
	deepEqual( Stem("stalked"), "stalk" );
	deepEqual( Stem("stalking"), "stalk" );
	deepEqual( Stem("stalks"), "stalk" );
	deepEqual( Stem("stall"), "stall" );
	deepEqual( Stem("stallion"), "stallion" );
	deepEqual( Stem("stallions"), "stallion" );
	deepEqual( Stem("stalwart"), "stalwart" );
	deepEqual( Stem("stamens"), "stamen" );
	deepEqual( Stem("stamford"), "stamford" );
	deepEqual( Stem("stammer"), "stammer" );
	deepEqual( Stem("stammered"), "stammer" );
	deepEqual( Stem("stammering"), "stammer" );
	deepEqual( Stem("stammers"), "stammer" );
	deepEqual( Stem("stamp"), "stamp" );
	deepEqual( Stem("stamped"), "stamp" );
	deepEqual( Stem("stamping"), "stamp" );
	deepEqual( Stem("stamps"), "stamp" );
	deepEqual( Stem("stan"), "stan" );
	deepEqual( Stem("stanch"), "stanch" );
	deepEqual( Stem("stand"), "stand" );
	deepEqual( Stem("standaloft"), "standaloft" );
	deepEqual( Stem("standard"), "standard" );
	deepEqual( Stem("standing"), "stand" );
	deepEqual( Stem("stands"), "stand" );
	deepEqual( Stem("standstill"), "standstil" );
	deepEqual( Stem("stanza"), "stanza" );
	deepEqual( Stem("staphylinidae"), "staphylinida" );
	deepEqual( Stem("staple"), "stapl" );
	deepEqual( Stem("star"), "star" );
	deepEqual( Stem("starch"), "starch" );
	deepEqual( Stem("starched"), "starch" );
	deepEqual( Stem("stare"), "stare" );
	deepEqual( Stem("stared"), "stare" );
	deepEqual( Stem("stares"), "stare" );
	deepEqual( Stem("staring"), "stare" );
	deepEqual( Stem("staringly"), "stare" );
	deepEqual( Stem("stark"), "stark" );
	deepEqual( Stem("starlight"), "starlight" );
	deepEqual( Stem("starling"), "starl" );
	deepEqual( Stem("starn"), "starn" );
	deepEqual( Stem("starred"), "star" );
	deepEqual( Stem("starry"), "starri" );
	deepEqual( Stem("stars"), "star" );
	deepEqual( Stem("start"), "start" );
	deepEqual( Stem("starte"), "start" );
	deepEqual( Stem("started"), "start" );
	deepEqual( Stem("starting"), "start" );
	deepEqual( Stem("startings"), "start" );
	deepEqual( Stem("startle"), "startl" );
	deepEqual( Stem("startled"), "startl" );
	deepEqual( Stem("startles"), "startl" );
	deepEqual( Stem("startling"), "startl" );
	deepEqual( Stem("starts"), "start" );
	deepEqual( Stem("starvation"), "starvat" );
	deepEqual( Stem("starve"), "starv" );
	deepEqual( Stem("starved"), "starv" );
	deepEqual( Stem("starvin"), "starvin" );
	deepEqual( Stem("starving"), "starv" );
	deepEqual( Stem("starwation"), "starwat" );
	deepEqual( Stem("state"), "state" );
	deepEqual( Stem("statecraft"), "statecraft" );
	deepEqual( Stem("stated"), "state" );
	deepEqual( Stem("stateliness"), "stateli" );
	deepEqual( Stem("stately"), "state" );
	deepEqual( Stem("statement"), "statement" );
	deepEqual( Stem("statements"), "statement" );
	deepEqual( Stem("statenland"), "statenland" );
	deepEqual( Stem("states"), "state" );
	deepEqual( Stem("statesman"), "statesman" );
	deepEqual( Stem("statesmanlike"), "statesmanlik" );
	deepEqual( Stem("statesmen"), "statesmen" );
	deepEqual( Stem("stating"), "state" );
	deepEqual( Stem("station"), "station" );
	deepEqual( Stem("stationary"), "stationari" );
	deepEqual( Stem("stationed"), "station" );
	deepEqual( Stem("stationer"), "station" );
	deepEqual( Stem("stationering"), "station" );
	deepEqual( Stem("stationers"), "station" );
	deepEqual( Stem("stationery"), "stationeri" );
	deepEqual( Stem("stations"), "station" );
	deepEqual( Stem("statu"), "statu" );
	deepEqual( Stem("statuary"), "statuari" );
	deepEqual( Stem("statue"), "statu" );
	deepEqual( Stem("statues"), "statu" );
	deepEqual( Stem("stature"), "statur" );
	deepEqual( Stem("status"), "status" );
	deepEqual( Stem("statute"), "statut" );
	deepEqual( Stem("staunch"), "staunch" );
	deepEqual( Stem("staunchly"), "staunch" );
	deepEqual( Stem("staunchness"), "staunch" );
	deepEqual( Stem("stave"), "stave" );
	deepEqual( Stem("staved"), "stave" );
	deepEqual( Stem("staves"), "stave" );
	deepEqual( Stem("staving"), "stave" );
	deepEqual( Stem("stay"), "stay" );
	deepEqual( Stem("stayed"), "stay" );
	deepEqual( Stem("staying"), "stay" );
	deepEqual( Stem("staylace"), "staylac" );
	deepEqual( Stem("stays"), "stay" );
	deepEqual( Stem("stead"), "stead" );
	deepEqual( Stem("steadfast"), "steadfast" );
	deepEqual( Stem("steadfastly"), "steadfast" );
	deepEqual( Stem("steadfastness"), "steadfast" );
	deepEqual( Stem("steadied"), "steadi" );
	deepEqual( Stem("steadier"), "steadier" );
	deepEqual( Stem("steadily"), "steadili" );
	deepEqual( Stem("steadiness"), "steadi" );
	deepEqual( Stem("steady"), "steadi" );
	deepEqual( Stem("steak"), "steak" );
	deepEqual( Stem("steal"), "steal" );
	deepEqual( Stem("stealing"), "steal" );
	deepEqual( Stem("stealings"), "steal" );
	deepEqual( Stem("steals"), "steal" );
	deepEqual( Stem("stealth"), "stealth" );
	deepEqual( Stem("stealthily"), "stealthili" );
	deepEqual( Stem("stealthy"), "stealthi" );
	deepEqual( Stem("steam"), "steam" );
	deepEqual( Stem("steamboat"), "steamboat" );
	deepEqual( Stem("steamboats"), "steamboat" );
	deepEqual( Stem("steamed"), "steam" );
	deepEqual( Stem("steamer"), "steamer" );
	deepEqual( Stem("steamers"), "steamer" );
	deepEqual( Stem("steaming"), "steam" );
	deepEqual( Stem("steams"), "steam" );
	deepEqual( Stem("steddy"), "steddi" );
	deepEqual( Stem("stee"), "stee" );
	deepEqual( Stem("steed"), "steed" );
	deepEqual( Stem("steeds"), "steed" );
	deepEqual( Stem("steel"), "steel" );
	deepEqual( Stem("steeled"), "steel" );
	deepEqual( Stem("steep"), "steep" );
	deepEqual( Stem("steeped"), "steep" );
	deepEqual( Stem("steeper"), "steeper" );
	deepEqual( Stem("steepest"), "steepest" );
	deepEqual( Stem("steeple"), "steepl" );
	deepEqual( Stem("steeplechase"), "steeplechas" );
	deepEqual( Stem("steepled"), "steepl" );
	deepEqual( Stem("steeples"), "steepl" );
	deepEqual( Stem("steeply"), "steepli" );
	deepEqual( Stem("steepness"), "steep" );
	deepEqual( Stem("steer"), "steer" );
	deepEqual( Stem("steered"), "steer" );
	deepEqual( Stem("steering"), "steer" );
	deepEqual( Stem("stem"), "stem" );
	deepEqual( Stem("stemming"), "stem" );
	deepEqual( Stem("stems"), "stem" );
	deepEqual( Stem("stench"), "stench" );
	deepEqual( Stem("stentorian"), "stentorian" );
	deepEqual( Stem("step"), "step" );
	deepEqual( Stem("stepdaughter"), "stepdaught" );
	deepEqual( Stem("stephenson"), "stephenson" );
	deepEqual( Stem("stepmother"), "stepmoth" );
	deepEqual( Stem("steppe"), "stepp" );
	deepEqual( Stem("stepped"), "step" );
	deepEqual( Stem("steppes"), "stepp" );
	deepEqual( Stem("stepping"), "step" );
	deepEqual( Stem("steps"), "step" );
	deepEqual( Stem("stepson"), "stepson" );
	deepEqual( Stem("stercovorous"), "stercovor" );
	deepEqual( Stem("sterile"), "steril" );
	deepEqual( Stem("sterilit"), "sterilit" );
	deepEqual( Stem("sterility"), "steril" );
	deepEqual( Stem("sterling"), "sterl" );
	deepEqual( Stem("stern"), "stern" );
	deepEqual( Stem("sterne"), "stern" );
	deepEqual( Stem("sterner"), "sterner" );
	deepEqual( Stem("sternest"), "sternest" );
	deepEqual( Stem("sternly"), "stern" );
	deepEqual( Stem("sternness"), "stern" );
	deepEqual( Stem("stertorous"), "stertor" );
	deepEqual( Stem("stertorously"), "stertor" );
	deepEqual( Stem("stethoscope"), "stethoscop" );
	deepEqual( Stem("stew"), "stew" );
	deepEqual( Stem("stewam"), "stewam" );
	deepEqual( Stem("steward"), "steward" );
	deepEqual( Stem("stewardship"), "stewardship" );
	deepEqual( Stem("stewart"), "stewart" );
	deepEqual( Stem("stewing"), "stew" );
	deepEqual( Stem("stic"), "stic" );
	deepEqual( Stem("stick"), "stick" );
	deepEqual( Stem("sticker"), "sticker" );
	deepEqual( Stem("sticking"), "stick" );
	deepEqual( Stem("stickler"), "stickler" );
	deepEqual( Stem("sticks"), "stick" );
	deepEqual( Stem("sticky"), "sticki" );
	deepEqual( Stem("stif"), "stif" );
	deepEqual( Stem("stiff"), "stiff" );
	deepEqual( Stem("stiffer"), "stiffer" );
	deepEqual( Stem("stiffest"), "stiffest" );
	deepEqual( Stem("stiffly"), "stiffli" );
	deepEqual( Stem("stiffness"), "stiff" );
	deepEqual( Stem("stifle"), "stifl" );
	deepEqual( Stem("stifled"), "stifl" );
	deepEqual( Stem("stifling"), "stifl" );
	deepEqual( Stem("stigmatised"), "stigmatis" );
	deepEqual( Stem("stigmatize"), "stigmat" );
	deepEqual( Stem("stigmatizing"), "stigmat" );
	deepEqual( Stem("still"), "still" );
	deepEqual( Stem("stillest"), "stillest" );
	deepEqual( Stem("stillness"), "still" );
	deepEqual( Stem("stilt"), "stilt" );
	deepEqual( Stem("stilts"), "stilt" );
	deepEqual( Stem("stimulant"), "stimul" );
	deepEqual( Stem("stimulants"), "stimul" );
	deepEqual( Stem("stimulate"), "stimul" );
	deepEqual( Stem("stimulated"), "stimul" );
	deepEqual( Stem("stimulates"), "stimul" );
	deepEqual( Stem("stimulating"), "stimul" );
	deepEqual( Stem("stimulation"), "stimul" );
	deepEqual( Stem("stimulus"), "stimulus" );
	deepEqual( Stem("sting"), "sting" );
	deepEqual( Stem("stinginess"), "stingi" );
	deepEqual( Stem("stinging"), "sting" );
	deepEqual( Stem("stings"), "sting" );
	deepEqual( Stem("stinketh"), "stinketh" );
	deepEqual( Stem("stinking"), "stink" );
	deepEqual( Stem("stinks"), "stink" );
	deepEqual( Stem("stipend"), "stipend" );
	deepEqual( Stem("stipendiaries"), "stipendiari" );
	deepEqual( Stem("stipulate"), "stipul" );
	deepEqual( Stem("stipulated"), "stipul" );
	deepEqual( Stem("stipulating"), "stipul" );
	deepEqual( Stem("stipulation"), "stipul" );
	deepEqual( Stem("stipulations"), "stipul" );
	deepEqual( Stem("stir"), "stir" );
	deepEqual( Stem("stirred"), "stir" );
	deepEqual( Stem("stirring"), "stir" );
	deepEqual( Stem("stirrup"), "stirrup" );
	deepEqual( Stem("stirrups"), "stirrup" );
	deepEqual( Stem("stirs"), "stir" );
	deepEqual( Stem("stitch"), "stitch" );
	deepEqual( Stem("stitched"), "stitch" );
	deepEqual( Stem("stitches"), "stitch" );
	deepEqual( Stem("stitching"), "stitch" );
	deepEqual( Stem("stock"), "stock" );
	deepEqual( Stem("stockade"), "stockad" );
	deepEqual( Stem("stockbroker"), "stockbrok" );
	deepEqual( Stem("stocked"), "stock" );
	deepEqual( Stem("stocking"), "stock" );
	deepEqual( Stem("stockingless"), "stockingless" );
	deepEqual( Stem("stockings"), "stock" );
	deepEqual( Stem("stocks"), "stock" );
	deepEqual( Stem("stokes"), "stoke" );
	deepEqual( Stem("stolbuns"), "stolbun" );
	deepEqual( Stem("stole"), "stole" );
	deepEqual( Stem("stolen"), "stolen" );
	deepEqual( Stem("stolid"), "stolid" );
	deepEqual( Stem("stolidity"), "stolid" );
	deepEqual( Stem("stolidly"), "stolid" );
	deepEqual( Stem("stomach"), "stomach" );
	deepEqual( Stem("stomached"), "stomach" );
	deepEqual( Stem("stomacher"), "stomach" );
	deepEqual( Stem("stomachic"), "stomach" );
	deepEqual( Stem("stomachs"), "stomach" );
	deepEqual( Stem("stond"), "stond" );
	deepEqual( Stem("stone"), "stone" );
	deepEqual( Stem("stoned"), "stone" );
	deepEqual( Stem("stones"), "stone" );
	deepEqual( Stem("stony"), "stoni" );
	deepEqual( Stem("stood"), "stood" );
	deepEqual( Stem("stool"), "stool" );
	deepEqual( Stem("stools"), "stool" );
	deepEqual( Stem("stoop"), "stoop" );
	deepEqual( Stem("stooped"), "stoop" );
	deepEqual( Stem("stooping"), "stoop" );
	deepEqual( Stem("stoops"), "stoop" );
	deepEqual( Stem("stop"), "stop" );
	deepEqual( Stem("stoppage"), "stoppag" );
	deepEqual( Stem("stoppages"), "stoppag" );
	deepEqual( Stem("stopped"), "stop" );
	deepEqual( Stem("stopper"), "stopper" );
	deepEqual( Stem("stopping"), "stop" );
	deepEqual( Stem("stops"), "stop" );
	deepEqual( Stem("store"), "store" );
	deepEqual( Stem("stored"), "store" );
	deepEqual( Stem("storehouse"), "storehous" );
	deepEqual( Stem("storehouses"), "storehous" );
	deepEqual( Stem("stores"), "store" );
	deepEqual( Stem("storey"), "storey" );
	deepEqual( Stem("storeys"), "storey" );
	deepEqual( Stem("storied"), "stori" );
	deepEqual( Stem("stories"), "stori" );
	deepEqual( Stem("storing"), "store" );
	deepEqual( Stem("stork"), "stork" );
	deepEqual( Stem("storks"), "stork" );
	deepEqual( Stem("storm"), "storm" );
	deepEqual( Stem("stormed"), "storm" );
	deepEqual( Stem("storming"), "storm" );
	deepEqual( Stem("storms"), "storm" );
	deepEqual( Stem("stormy"), "stormi" );
	deepEqual( Stem("storr"), "storr" );
	deepEqual( Stem("story"), "stori" );
	deepEqual( Stem("storybook"), "storybook" );
	deepEqual( Stem("stout"), "stout" );
	deepEqual( Stem("stouter"), "stouter" );
	deepEqual( Stem("stoutest"), "stoutest" );
	deepEqual( Stem("stoutish"), "stoutish" );
	deepEqual( Stem("stoutly"), "stout" );
	deepEqual( Stem("stove"), "stove" );
	deepEqual( Stem("stoves"), "stove" );
	deepEqual( Stem("stow"), "stow" );
	deepEqual( Stem("stowed"), "stow" );
	deepEqual( Stem("strack"), "strack" );
	deepEqual( Stem("straggle"), "straggl" );
	deepEqual( Stem("straggled"), "straggl" );
	deepEqual( Stem("straggler"), "straggler" );
	deepEqual( Stem("stragglers"), "straggler" );
	deepEqual( Stem("straggling"), "straggl" );
	deepEqual( Stem("straight"), "straight" );
	deepEqual( Stem("straightening"), "straighten" );
	deepEqual( Stem("straightforward"), "straightforward" );
	deepEqual( Stem("straightly"), "straight" );
	deepEqual( Stem("straightway"), "straightway" );
	deepEqual( Stem("strain"), "strain" );
	deepEqual( Stem("strained"), "strain" );
	deepEqual( Stem("straining"), "strain" );
	deepEqual( Stem("strains"), "strain" );
	deepEqual( Stem("strait"), "strait" );
	deepEqual( Stem("straitened"), "straiten" );
	deepEqual( Stem("straits"), "strait" );
	deepEqual( Stem("strand"), "strand" );
	deepEqual( Stem("stranded"), "strand" );
	deepEqual( Stem("stranding"), "strand" );
	deepEqual( Stem("strange"), "strang" );
	deepEqual( Stem("strangely"), "strang" );
	deepEqual( Stem("strangeness"), "strang" );
	deepEqual( Stem("stranger"), "stranger" );
	deepEqual( Stem("strangers"), "stranger" );
	deepEqual( Stem("strangest"), "strangest" );
	deepEqual( Stem("strangle"), "strangl" );
	deepEqual( Stem("strangled"), "strangl" );
	deepEqual( Stem("strangling"), "strangl" );
	deepEqual( Stem("strangulation"), "strangul" );
	deepEqual( Stem("strap"), "strap" );
	deepEqual( Stem("strapped"), "strap" );
	deepEqual( Stem("straps"), "strap" );
	deepEqual( Stem("strata"), "strata" );
	deepEqual( Stem("stratagem"), "stratagem" );
	deepEqual( Stem("strategy"), "strategi" );
	deepEqual( Stem("stratford"), "stratford" );
	deepEqual( Stem("stratification"), "stratif" );
	deepEqual( Stem("stratified"), "stratifi" );
	deepEqual( Stem("stratum"), "stratum" );
	deepEqual( Stem("straw"), "straw" );
	deepEqual( Stem("strawberries"), "strawberri" );
	deepEqual( Stem("straws"), "straw" );
	deepEqual( Stem("stray"), "stray" );
	deepEqual( Stem("strayed"), "stray" );
	deepEqual( Stem("straying"), "stray" );
	deepEqual( Stem("streak"), "streak" );
	deepEqual( Stem("streaked"), "streak" );
	deepEqual( Stem("streaks"), "streak" );
	deepEqual( Stem("stream"), "stream" );
	deepEqual( Stem("streamed"), "stream" );
	deepEqual( Stem("streamer"), "streamer" );
	deepEqual( Stem("streaming"), "stream" );
	deepEqual( Stem("streamlet"), "streamlet" );
	deepEqual( Stem("streamlets"), "streamlet" );
	deepEqual( Stem("streams"), "stream" );
	deepEqual( Stem("street"), "street" );
	deepEqual( Stem("streetdoor"), "streetdoor" );
	deepEqual( Stem("streets"), "street" );
	deepEqual( Stem("strength"), "strength" );
	deepEqual( Stem("strengthen"), "strengthen" );
	deepEqual( Stem("strengthened"), "strengthen" );
	deepEqual( Stem("strengthening"), "strengthen" );
	deepEqual( Stem("strenuously"), "strenuous" );
	deepEqual( Stem("stress"), "stress" );
	deepEqual( Stem("stretch"), "stretch" );
	deepEqual( Stem("stretched"), "stretch" );
	deepEqual( Stem("stretches"), "stretch" );
	deepEqual( Stem("stretching"), "stretch" );
	deepEqual( Stem("stretchings"), "stretch" );
	deepEqual( Stem("strew"), "strew" );
	deepEqual( Stem("strewed"), "strew" );
	deepEqual( Stem("strewn"), "strewn" );
	deepEqual( Stem("stricken"), "stricken" );
	deepEqual( Stem("strickland"), "strickland" );
	deepEqual( Stem("strict"), "strict" );
	deepEqual( Stem("stricter"), "stricter" );
	deepEqual( Stem("strictest"), "strictest" );
	deepEqual( Stem("strictly"), "strict" );
	deepEqual( Stem("strictness"), "strict" );
	deepEqual( Stem("stride"), "stride" );
	deepEqual( Stem("strides"), "stride" );
	deepEqual( Stem("striding"), "stride" );
	deepEqual( Stem("strife"), "strife" );
	deepEqual( Stem("strike"), "strike" );
	deepEqual( Stem("strikes"), "strike" );
	deepEqual( Stem("striking"), "strike" );
	deepEqual( Stem("strikingly"), "strike" );
	deepEqual( Stem("string"), "string" );
	deepEqual( Stem("strings"), "string" );
	deepEqual( Stem("strip"), "strip" );
	deepEqual( Stem("striped"), "stripe" );
	deepEqual( Stem("stripes"), "stripe" );
	deepEqual( Stem("stripling"), "stripl" );
	deepEqual( Stem("stripped"), "strip" );
	deepEqual( Stem("stripping"), "strip" );
	deepEqual( Stem("strips"), "strip" );
	deepEqual( Stem("stritched"), "stritch" );
	deepEqual( Stem("strive"), "strive" );
	deepEqual( Stem("striven"), "striven" );
	deepEqual( Stem("striving"), "strive" );
	deepEqual( Stem("strix"), "strix" );
	deepEqual( Stem("strode"), "strode" );
	deepEqual( Stem("stroke"), "stroke" );
	deepEqual( Stem("stroked"), "stroke" );
	deepEqual( Stem("strokes"), "stroke" );
	deepEqual( Stem("stroking"), "stroke" );
	deepEqual( Stem("strokings"), "stroke" );
	deepEqual( Stem("stroll"), "stroll" );
	deepEqual( Stem("strolled"), "stroll" );
	deepEqual( Stem("strolling"), "stroll" );
	deepEqual( Stem("strolls"), "stroll" );
	deepEqual( Stem("strong"), "strong" );
	deepEqual( Stem("stronger"), "stronger" );
	deepEqual( Stem("strongest"), "strongest" );
	deepEqual( Stem("strongholds"), "stronghold" );
	deepEqual( Stem("strongly"), "strong" );
	deepEqual( Stem("strongylus"), "strongylus" );
	deepEqual( Stem("strop"), "strop" );
	deepEqual( Stem("strove"), "strove" );
	deepEqual( Stem("struck"), "struck" );
	deepEqual( Stem("structure"), "structur" );
	deepEqual( Stem("structures"), "structur" );
	deepEqual( Stem("struggle"), "struggl" );
	deepEqual( Stem("struggled"), "struggl" );
	deepEqual( Stem("struggler"), "struggler" );
	deepEqual( Stem("strugglers"), "struggler" );
	deepEqual( Stem("struggles"), "struggl" );
	deepEqual( Stem("struggling"), "struggl" );
	deepEqual( Stem("strum"), "strum" );
	deepEqual( Stem("strung"), "strung" );
	deepEqual( Stem("struthio"), "struthio" );
	deepEqual( Stem("strzelecki"), "strzelecki" );
	deepEqual( Stem("stuart"), "stuart" );
	deepEqual( Stem("stubb"), "stubb" );
	deepEqual( Stem("stubble"), "stubbl" );
	deepEqual( Stem("stubbly"), "stubbl" );
	deepEqual( Stem("stubborn"), "stubborn" );
	deepEqual( Stem("stubbornly"), "stubborn" );
	deepEqual( Stem("stubbornness"), "stubborn" );
	deepEqual( Stem("stubbs"), "stubb" );
	deepEqual( Stem("stuck"), "stuck" );
	deepEqual( Stem("stud"), "stud" );
	deepEqual( Stem("studded"), "stud" );
	deepEqual( Stem("student"), "student" );
	deepEqual( Stem("students"), "student" );
	deepEqual( Stem("studied"), "studi" );
	deepEqual( Stem("studies"), "studi" );
	deepEqual( Stem("studio"), "studio" );
	deepEqual( Stem("studious"), "studious" );
	deepEqual( Stem("studiously"), "studious" );
	deepEqual( Stem("studiousness"), "studious" );
	deepEqual( Stem("study"), "studi" );
	deepEqual( Stem("studying"), "studi" );
	deepEqual( Stem("stuff"), "stuff" );
	deepEqual( Stem("stuffed"), "stuf" );
	deepEqual( Stem("stuffing"), "stuf" );
	deepEqual( Stem("stuffs"), "stuff" );
	deepEqual( Stem("stuffy"), "stuffi" );
	deepEqual( Stem("stumble"), "stumbl" );
	deepEqual( Stem("stumbled"), "stumbl" );
	deepEqual( Stem("stumbles"), "stumbl" );
	deepEqual( Stem("stumbling"), "stumbl" );
	deepEqual( Stem("stump"), "stump" );
	deepEqual( Stem("stumps"), "stump" );
	deepEqual( Stem("stung"), "stung" );
	deepEqual( Stem("stunned"), "stun" );
	deepEqual( Stem("stunning"), "stun" );
	deepEqual( Stem("stunted"), "stunt" );
	deepEqual( Stem("stupefaction"), "stupefact" );
	deepEqual( Stem("stupefied"), "stupefi" );
	deepEqual( Stem("stupendous"), "stupend" );
	deepEqual( Stem("stupid"), "stupid" );
	deepEqual( Stem("stupider"), "stupid" );
	deepEqual( Stem("stupidity"), "stupid" );
	deepEqual( Stem("stupidly"), "stupid" );
	deepEqual( Stem("stupids"), "stupid" );
	deepEqual( Stem("stupor"), "stupor" );
	deepEqual( Stem("sturdiest"), "sturdiest" );
	deepEqual( Stem("sturdily"), "sturdili" );
	deepEqual( Stem("sturdy"), "sturdi" );
	deepEqual( Stem("sturt"), "sturt" );
	deepEqual( Stem("stuttered"), "stutter" );
	deepEqual( Stem("style"), "style" );
	deepEqual( Stem("styles"), "style" );
	deepEqual( Stem("stylifer"), "stylif" );
	deepEqual( Stem("stylish"), "stylish" );
	deepEqual( Stem("suadiva"), "suadiva" );
	deepEqual( Stem("suavity"), "suaviti" );
	deepEqual( Stem("sub"), "sub" );
	deepEqual( Stem("subacid"), "subacid" );
	deepEqual( Stem("subaqueous"), "subaqu" );
	deepEqual( Stem("subcostal"), "subcost" );
	deepEqual( Stem("subdue"), "subdu" );
	deepEqual( Stem("subdued"), "subdu" );
	deepEqual( Stem("subduer"), "subduer" );
	deepEqual( Stem("subdues"), "subdu" );
	deepEqual( Stem("subduing"), "subdu" );
	deepEqual( Stem("subgroup"), "subgroup" );
	deepEqual( Stem("subgroups"), "subgroup" );
	deepEqual( Stem("subject"), "subject" );
	deepEqual( Stem("subjected"), "subject" );
	deepEqual( Stem("subjecting"), "subject" );
	deepEqual( Stem("subjection"), "subject" );
	deepEqual( Stem("subjects"), "subject" );
	deepEqual( Stem("subjugating"), "subjug" );
	deepEqual( Stem("sublime"), "sublim" );
	deepEqual( Stem("sublimity"), "sublim" );
	deepEqual( Stem("submarine"), "submarin" );
	deepEqual( Stem("submerged"), "submerg" );
	deepEqual( Stem("submergence"), "submerg" );
	deepEqual( Stem("submission"), "submiss" );
	deepEqual( Stem("submissive"), "submiss" );
	deepEqual( Stem("submissively"), "submiss" );
	deepEqual( Stem("submissiveness"), "submiss" );
	deepEqual( Stem("submit"), "submit" );
	deepEqual( Stem("submits"), "submit" );
	deepEqual( Stem("submitted"), "submit" );
	deepEqual( Stem("submitting"), "submit" );
	deepEqual( Stem("subordinate"), "subordin" );
	deepEqual( Stem("subordinates"), "subordin" );
	deepEqual( Stem("subordination"), "subordin" );
	deepEqual( Stem("suborned"), "suborn" );
	deepEqual( Stem("suborning"), "suborn" );
	deepEqual( Stem("subscribe"), "subscrib" );
	deepEqual( Stem("subscribed"), "subscrib" );
	deepEqual( Stem("subscribing"), "subscrib" );
	deepEqual( Stem("subscription"), "subscript" );
	deepEqual( Stem("subscriptions"), "subscript" );
	deepEqual( Stem("subsequent"), "subsequ" );
	deepEqual( Stem("subsequently"), "subsequ" );
	deepEqual( Stem("subservience"), "subservi" );
	deepEqual( Stem("subserviences"), "subservi" );
	deepEqual( Stem("subservient"), "subservi" );
	deepEqual( Stem("subside"), "subsid" );
	deepEqual( Stem("subsided"), "subsid" );
	deepEqual( Stem("subsidence"), "subsid" );
	deepEqual( Stem("subsides"), "subsid" );
	deepEqual( Stem("subsidiary"), "subsidiari" );
	deepEqual( Stem("subsiding"), "subsid" );
	deepEqual( Stem("subsidized"), "subsid" );
	deepEqual( Stem("subsist"), "subsist" );
	deepEqual( Stem("subsisted"), "subsist" );
	deepEqual( Stem("subsistence"), "subsist" );
	deepEqual( Stem("subsoil"), "subsoil" );
	deepEqual( Stem("substance"), "substanc" );
	deepEqual( Stem("substances"), "substanc" );
	deepEqual( Stem("substantial"), "substanti" );
	deepEqual( Stem("substantially"), "substanti" );
	deepEqual( Stem("substantials"), "substanti" );
	deepEqual( Stem("substantiate"), "substanti" );
	deepEqual( Stem("substantive"), "substant" );
	deepEqual( Stem("substitute"), "substitut" );
	deepEqual( Stem("substituted"), "substitut" );
	deepEqual( Stem("substitutes"), "substitut" );
	deepEqual( Stem("substituting"), "substitut" );
	deepEqual( Stem("substracted"), "substract" );
	deepEqual( Stem("substratum"), "substratum" );
	deepEqual( Stem("subterfuge"), "subterfug" );
	deepEqual( Stem("subterfuges"), "subterfug" );
	deepEqual( Stem("subterranean"), "subterranean" );
	deepEqual( Stem("subtile"), "subtil" );
	deepEqual( Stem("subtle"), "subtl" );
	deepEqual( Stem("subtlety"), "subtleti" );
	deepEqual( Stem("subtracted"), "subtract" );
	deepEqual( Stem("subtracting"), "subtract" );
	deepEqual( Stem("suburb"), "suburb" );
	deepEqual( Stem("suburban"), "suburban" );
	deepEqual( Stem("suburbs"), "suburb" );
	deepEqual( Stem("subversive"), "subvers" );
	deepEqual( Stem("subverted"), "subvert" );
	deepEqual( Stem("suc"), "suc" );
	deepEqual( Stem("succeed"), "succeed" );
	deepEqual( Stem("succeeded"), "succeed" );
	deepEqual( Stem("succeeding"), "succeed" );
	deepEqual( Stem("succeeds"), "succeed" );
	deepEqual( Stem("success"), "success" );
	deepEqual( Stem("successes"), "success" );
	deepEqual( Stem("successful"), "success" );
	deepEqual( Stem("successfully"), "success" );
	deepEqual( Stem("succession"), "success" );
	deepEqual( Stem("successions"), "success" );
	deepEqual( Stem("successive"), "success" );
	deepEqual( Stem("successively"), "success" );
	deepEqual( Stem("successor"), "successor" );
	deepEqual( Stem("successors"), "successor" );
	deepEqual( Stem("succinea"), "succinea" );
	deepEqual( Stem("succour"), "succour" );
	deepEqual( Stem("succulent"), "succul" );
	deepEqual( Stem("succumbed"), "succumb" );
	deepEqual( Stem("succumbing"), "succumb" );
	deepEqual( Stem("such"), "such" );
	deepEqual( Stem("suck"), "suck" );
	deepEqual( Stem("sucked"), "suck" );
	deepEqual( Stem("sucker"), "sucker" );
	deepEqual( Stem("suckers"), "sucker" );
	deepEqual( Stem("sucking"), "suck" );
	deepEqual( Stem("suckle"), "suckl" );
	deepEqual( Stem("suckling"), "suckl" );
	deepEqual( Stem("suction"), "suction" );
	deepEqual( Stem("sudden"), "sudden" );
	deepEqual( Stem("suddenl"), "suddenl" );
	deepEqual( Stem("suddenly"), "sudden" );
	deepEqual( Stem("suddenness"), "sudden" );
	deepEqual( Stem("suds"), "sud" );
	deepEqual( Stem("sued"), "su" );
	deepEqual( Stem("suffer"), "suffer" );
	deepEqual( Stem("sufferance"), "suffer" );
	deepEqual( Stem("suffered"), "suffer" );
	deepEqual( Stem("sufferer"), "suffer" );
	deepEqual( Stem("sufferers"), "suffer" );
	deepEqual( Stem("suffering"), "suffer" );
	deepEqual( Stem("sufferings"), "suffer" );
	deepEqual( Stem("suffers"), "suffer" );
	deepEqual( Stem("suffice"), "suffic" );
	deepEqual( Stem("sufficed"), "suffic" );
	deepEqual( Stem("sufficiency"), "suffici" );
	deepEqual( Stem("sufficient"), "suffici" );
	deepEqual( Stem("sufficiently"), "suffici" );
	deepEqual( Stem("sufficing"), "suffic" );
	deepEqual( Stem("sufflciently"), "sufflcient" );
	deepEqual( Stem("suffocated"), "suffoc" );
	deepEqual( Stem("suffocating"), "suffoc" );
	deepEqual( Stem("suffocation"), "suffoc" );
	deepEqual( Stem("suffolk"), "suffolk" );
	deepEqual( Stem("suffrage"), "suffrag" );
	deepEqual( Stem("suffrages"), "suffrag" );
	deepEqual( Stem("suffused"), "suffus" );
	deepEqual( Stem("sugar"), "sugar" );
	deepEqual( Stem("sugarscaps"), "sugarscap" );
	deepEqual( Stem("sugarscraps"), "sugarscrap" );
	deepEqual( Stem("suggest"), "suggest" );
	deepEqual( Stem("suggested"), "suggest" );
	deepEqual( Stem("suggesting"), "suggest" );
	deepEqual( Stem("suggestion"), "suggest" );
	deepEqual( Stem("suggestions"), "suggest" );
	deepEqual( Stem("suggestive"), "suggest" );
	deepEqual( Stem("suggests"), "suggest" );
	deepEqual( Stem("suicidal"), "suicid" );
	deepEqual( Stem("suicide"), "suicid" );
	deepEqual( Stem("suicides"), "suicid" );
	deepEqual( Stem("suing"), "su" );
	deepEqual( Stem("suit"), "suit" );
	deepEqual( Stem("suitability"), "suitabl" );
	deepEqual( Stem("suitable"), "suitabl" );
	deepEqual( Stem("suitably"), "suitabl" );
	deepEqual( Stem("suite"), "suit" );
	deepEqual( Stem("suited"), "suit" );
	deepEqual( Stem("suites"), "suit" );
	deepEqual( Stem("suiting"), "suit" );
	deepEqual( Stem("suitor"), "suitor" );
	deepEqual( Stem("suitors"), "suitor" );
	deepEqual( Stem("suits"), "suit" );
	deepEqual( Stem("sulivan"), "sulivan" );
	deepEqual( Stem("sulk"), "sulk" );
	deepEqual( Stem("sulked"), "sulk" );
	deepEqual( Stem("sulkily"), "sulkili" );
	deepEqual( Stem("sulkiness"), "sulki" );
	deepEqual( Stem("sulks"), "sulk" );
	deepEqual( Stem("sulky"), "sulki" );
	deepEqual( Stem("sullen"), "sullen" );
	deepEqual( Stem("sullenly"), "sullen" );
	deepEqual( Stem("sullenness"), "sullen" );
	deepEqual( Stem("sully"), "sulli" );
	deepEqual( Stem("sulphate"), "sulphat" );
	deepEqual( Stem("sulphates"), "sulphat" );
	deepEqual( Stem("sulphur"), "sulphur" );
	deepEqual( Stem("sulphuratus"), "sulphuratus" );
	deepEqual( Stem("sulphureous"), "sulphur" );
	deepEqual( Stem("sulphuric"), "sulphur" );
	deepEqual( Stem("sultan"), "sultan" );
	deepEqual( Stem("sultry"), "sultri" );
	deepEqual( Stem("sum"), "sum" );
	deepEqual( Stem("sumatra"), "sumatra" );
	deepEqual( Stem("sumhoo"), "sumhoo" );
	deepEqual( Stem("summarily"), "summarili" );
	deepEqual( Stem("summary"), "summari" );
	deepEqual( Stem("summat"), "summat" );
	deepEqual( Stem("summer"), "summer" );
	deepEqual( Stem("summers"), "summer" );
	deepEqual( Stem("summerson"), "summerson" );
	deepEqual( Stem("summertime"), "summertim" );
	deepEqual( Stem("summing"), "sum" );
	deepEqual( Stem("summit"), "summit" );
	deepEqual( Stem("summits"), "summit" );
	deepEqual( Stem("summon"), "summon" );
	deepEqual( Stem("summoned"), "summon" );
	deepEqual( Stem("summoning"), "summon" );
	deepEqual( Stem("summons"), "summon" );
	deepEqual( Stem("summonses"), "summons" );
	deepEqual( Stem("summonsizzing"), "summonsizz" );
	deepEqual( Stem("sumptuous"), "sumptuous" );
	deepEqual( Stem("sumptuously"), "sumptuous" );
	deepEqual( Stem("sums"), "sum" );
	deepEqual( Stem("sun"), "sun" );
	deepEqual( Stem("sunbeam"), "sunbeam" );
	deepEqual( Stem("sunburnt"), "sunburnt" );
	deepEqual( Stem("sunday"), "sunday" );
	deepEqual( Stem("sundays"), "sunday" );
	deepEqual( Stem("sundries"), "sundri" );
	deepEqual( Stem("sundry"), "sundri" );
	deepEqual( Stem("sunflowers"), "sunflow" );
	deepEqual( Stem("sung"), "sung" );
	deepEqual( Stem("sunk"), "sunk" );
	deepEqual( Stem("sunken"), "sunken" );
	deepEqual( Stem("sunlight"), "sunlight" );
	deepEqual( Stem("sunning"), "sun" );
	deepEqual( Stem("sunny"), "sunni" );
	deepEqual( Stem("sunrise"), "sunris" );
	deepEqual( Stem("suns"), "sun" );
	deepEqual( Stem("sunset"), "sunset" );
	deepEqual( Stem("sunsets"), "sunset" );
	deepEqual( Stem("sunshine"), "sunshin" );
	deepEqual( Stem("sunshiny"), "sunshini" );
	deepEqual( Stem("sup"), "sup" );
	deepEqual( Stem("superabundant"), "superabund" );
	deepEqual( Stem("superadded"), "superad" );
	deepEqual( Stem("superadding"), "superad" );
	deepEqual( Stem("superannuated"), "superannu" );
	deepEqual( Stem("superannuating"), "superannu" );
	deepEqual( Stem("superb"), "superb" );
	deepEqual( Stem("superbly"), "superbl" );
	deepEqual( Stem("supercilious"), "supercili" );
	deepEqual( Stem("superciliously"), "supercili" );
	deepEqual( Stem("superciliousness"), "supercili" );
	deepEqual( Stem("superficial"), "superfici" );
	deepEqual( Stem("superficially"), "superfici" );
	deepEqual( Stem("superfluities"), "superflu" );
	deepEqual( Stem("superfluity"), "superflu" );
	deepEqual( Stem("superfluous"), "superflu" );
	deepEqual( Stem("superhuman"), "superhuman" );
	deepEqual( Stem("superincumbent"), "superincumb" );
	deepEqual( Stem("superinduced"), "superinduc" );
	deepEqual( Stem("superintend"), "superintend" );
	deepEqual( Stem("superintended"), "superintend" );
	deepEqual( Stem("superintendence"), "superintend" );
	deepEqual( Stem("superintendent"), "superintend" );
	deepEqual( Stem("superintending"), "superintend" );
	deepEqual( Stem("superintends"), "superintend" );
	deepEqual( Stem("superior"), "superior" );
	deepEqual( Stem("superiority"), "superior" );
	deepEqual( Stem("superiors"), "superior" );
	deepEqual( Stem("superlative"), "superl" );
	deepEqual( Stem("superlatives"), "superl" );
	deepEqual( Stem("superlativest"), "superlativest" );
	deepEqual( Stem("supernatural"), "supernatur" );
	deepEqual( Stem("supernumeraries"), "supernumerari" );
	deepEqual( Stem("superscription"), "superscript" );
	deepEqual( Stem("supersede"), "supersed" );
	deepEqual( Stem("superseded"), "supersed" );
	deepEqual( Stem("superstition"), "superstit" );
	deepEqual( Stem("superstitious"), "superstiti" );
	deepEqual( Stem("superstitiously"), "superstiti" );
	deepEqual( Stem("supervene"), "superven" );
	deepEqual( Stem("supervision"), "supervis" );
	deepEqual( Stem("supped"), "sup" );
	deepEqual( Stem("supper"), "supper" );
	deepEqual( Stem("suppers"), "supper" );
	deepEqual( Stem("supplanted"), "supplant" );
	deepEqual( Stem("supple"), "suppl" );
	deepEqual( Stem("supplementary"), "supplementari" );
	deepEqual( Stem("suppleness"), "suppl" );
	deepEqual( Stem("suppliant"), "suppliant" );
	deepEqual( Stem("supplication"), "supplic" );
	deepEqual( Stem("supplications"), "supplic" );
	deepEqual( Stem("supplied"), "suppli" );
	deepEqual( Stem("supplies"), "suppli" );
	deepEqual( Stem("supply"), "suppli" );
	deepEqual( Stem("supplying"), "suppli" );
	deepEqual( Stem("suppor"), "suppor" );
	deepEqual( Stem("support"), "support" );
	deepEqual( Stem("supported"), "support" );
	deepEqual( Stem("supporter"), "support" );
	deepEqual( Stem("supporters"), "support" );
	deepEqual( Stem("supporting"), "support" );
	deepEqual( Stem("supports"), "support" );
	deepEqual( Stem("suppose"), "suppos" );
	deepEqual( Stem("supposed"), "suppos" );
	deepEqual( Stem("supposes"), "suppos" );
	deepEqual( Stem("supposing"), "suppos" );
	deepEqual( Stem("supposition"), "supposit" );
	deepEqual( Stem("suppositions"), "supposit" );
	deepEqual( Stem("supposititious"), "supposititi" );
	deepEqual( Stem("suppress"), "suppress" );
	deepEqual( Stem("suppressed"), "suppress" );
	deepEqual( Stem("suppressing"), "suppress" );
	deepEqual( Stem("suppression"), "suppress" );
	deepEqual( Stem("suppurated"), "suppur" );
	deepEqual( Stem("supremacy"), "supremaci" );
	deepEqual( Stem("supreme"), "suprem" );
	deepEqual( Stem("supremely"), "suprem" );
	deepEqual( Stem("supremest"), "supremest" );
	deepEqual( Stem("sups"), "sup" );
	deepEqual( Stem("sur"), "sur" );
	deepEqual( Stem("surcingle"), "surcingl" );
	deepEqual( Stem("sure"), "sure" );
	deepEqual( Stem("surely"), "sure" );
	deepEqual( Stem("surest"), "surest" );
	deepEqual( Stem("surf"), "surf" );
	deepEqual( Stem("surfac"), "surfac" );
	deepEqual( Stem("surface"), "surfac" );
	deepEqual( Stem("surfaces"), "surfac" );
	deepEqual( Stem("surge"), "surg" );
	deepEqual( Stem("surged"), "surg" );
	deepEqual( Stem("surgeon"), "surgeon" );
	deepEqual( Stem("surgeons"), "surgeon" );
	deepEqual( Stem("surgery"), "surgeri" );
	deepEqual( Stem("surging"), "surg" );
	deepEqual( Stem("surly"), "sur" );
	deepEqual( Stem("surmise"), "surmis" );
	deepEqual( Stem("surmised"), "surmis" );
	deepEqual( Stem("surmises"), "surmis" );
	deepEqual( Stem("surmising"), "surmis" );
	deepEqual( Stem("surmount"), "surmount" );
	deepEqual( Stem("surmounted"), "surmount" );
	deepEqual( Stem("surmounting"), "surmount" );
	deepEqual( Stem("surname"), "surnam" );
	deepEqual( Stem("surnames"), "surnam" );
	deepEqual( Stem("surpass"), "surpass" );
	deepEqual( Stem("surpassed"), "surpass" );
	deepEqual( Stem("surpasses"), "surpass" );
	deepEqual( Stem("surpassing"), "surpass" );
	deepEqual( Stem("surplus"), "surplus" );
	deepEqual( Stem("surprise"), "surpris" );
	deepEqual( Stem("surprised"), "surpris" );
	deepEqual( Stem("surprises"), "surpris" );
	deepEqual( Stem("surprising"), "surpris" );
	deepEqual( Stem("surprisingly"), "surpris" );
	deepEqual( Stem("surrender"), "surrend" );
	deepEqual( Stem("surrendered"), "surrend" );
	deepEqual( Stem("surrendering"), "surrend" );
	deepEqual( Stem("surreptitiously"), "surreptiti" );
	deepEqual( Stem("surrey"), "surrey" );
	deepEqual( Stem("surround"), "surround" );
	deepEqual( Stem("surrounded"), "surround" );
	deepEqual( Stem("surrounding"), "surround" );
	deepEqual( Stem("surroundings"), "surround" );
	deepEqual( Stem("surry"), "surri" );
	deepEqual( Stem("surveillance"), "surveil" );
	deepEqual( Stem("survey"), "survey" );
	deepEqual( Stem("surveyed"), "survey" );
	deepEqual( Stem("surveying"), "survey" );
	deepEqual( Stem("surveyor"), "surveyor" );
	deepEqual( Stem("surveyors"), "surveyor" );
	deepEqual( Stem("surveys"), "survey" );
	deepEqual( Stem("survive"), "surviv" );
	deepEqual( Stem("survived"), "surviv" );
	deepEqual( Stem("surviving"), "surviv" );
	deepEqual( Stem("survivor"), "survivor" );
	deepEqual( Stem("survivors"), "survivor" );
	deepEqual( Stem("surweys"), "surwey" );
	deepEqual( Stem("susan"), "susan" );
	deepEqual( Stem("susceptibility"), "suscept" );
	deepEqual( Stem("susceptible"), "suscept" );
	deepEqual( Stem("suspect"), "suspect" );
	deepEqual( Stem("suspected"), "suspect" );
	deepEqual( Stem("suspecting"), "suspect" );
	deepEqual( Stem("suspects"), "suspect" );
	deepEqual( Stem("suspended"), "suspend" );
	deepEqual( Stem("suspending"), "suspend" );
	deepEqual( Stem("suspense"), "suspens" );
	deepEqual( Stem("suspension"), "suspens" );
	deepEqual( Stem("suspicion"), "suspicion" );
	deepEqual( Stem("suspicions"), "suspicion" );
	deepEqual( Stem("suspicious"), "suspici" );
	deepEqual( Stem("suspiciously"), "suspici" );
	deepEqual( Stem("suspiciousness"), "suspici" );
	deepEqual( Stem("sustain"), "sustain" );
	deepEqual( Stem("sustained"), "sustain" );
	deepEqual( Stem("sustaining"), "sustain" );
	deepEqual( Stem("sustenance"), "susten" );
	deepEqual( Stem("svidrigailov"), "svidrigailov" );
	deepEqual( Stem("svidrigailovs"), "svidrigailov" );
	deepEqual( Stem("svidrigrailovs"), "svidrigrailov" );
	deepEqual( Stem("svirbey"), "svirbey" );
	deepEqual( Stem("swab"), "swab" );
	deepEqual( Stem("swaddling"), "swaddl" );
	deepEqual( Stem("swagger"), "swagger" );
	deepEqual( Stem("swaggered"), "swagger" );
	deepEqual( Stem("swaggering"), "swagger" );
	deepEqual( Stem("swaggerings"), "swagger" );
	deepEqual( Stem("swain"), "swain" );
	deepEqual( Stem("swains"), "swain" );
	deepEqual( Stem("swainson"), "swainson" );
	deepEqual( Stem("swaller"), "swaller" );
	deepEqual( Stem("swallering"), "swaller" );
	deepEqual( Stem("swallow"), "swallow" );
	deepEqual( Stem("swallowed"), "swallow" );
	deepEqual( Stem("swallower"), "swallow" );
	deepEqual( Stem("swallowing"), "swallow" );
	deepEqual( Stem("swallows"), "swallow" );
	deepEqual( Stem("swam"), "swam" );
	deepEqual( Stem("swamp"), "swamp" );
	deepEqual( Stem("swamps"), "swamp" );
	deepEqual( Stem("swampy"), "swampi" );
	deepEqual( Stem("swan"), "swan" );
	deepEqual( Stem("swans"), "swan" );
	deepEqual( Stem("swansea"), "swansea" );
	deepEqual( Stem("sward"), "sward" );
	deepEqual( Stem("swarm"), "swarm" );
	deepEqual( Stem("swarmed"), "swarm" );
	deepEqual( Stem("swarming"), "swarm" );
	deepEqual( Stem("swarms"), "swarm" );
	deepEqual( Stem("swart"), "swart" );
	deepEqual( Stem("swarthy"), "swarthi" );
	deepEqual( Stem("sway"), "sway" );
	deepEqual( Stem("swayed"), "sway" );
	deepEqual( Stem("swaying"), "sway" );
	deepEqual( Stem("swear"), "swear" );
	deepEqual( Stem("swearing"), "swear" );
	deepEqual( Stem("swears"), "swear" );
	deepEqual( Stem("sweat"), "sweat" );
	deepEqual( Stem("sweden"), "sweden" );
	deepEqual( Stem("sweep"), "sweep" );
	deepEqual( Stem("sweeper"), "sweeper" );
	deepEqual( Stem("sweepers"), "sweeper" );
	deepEqual( Stem("sweeping"), "sweep" );
	deepEqual( Stem("sweeps"), "sweep" );
	deepEqual( Stem("sweet"), "sweet" );
	deepEqual( Stem("sweetbread"), "sweetbread" );
	deepEqual( Stem("sweetbrier"), "sweetbrier" );
	deepEqual( Stem("sweeten"), "sweeten" );
	deepEqual( Stem("sweetened"), "sweeten" );
	deepEqual( Stem("sweetener"), "sweeten" );
	deepEqual( Stem("sweeter"), "sweeter" );
	deepEqual( Stem("sweetest"), "sweetest" );
	deepEqual( Stem("sweetheart"), "sweetheart" );
	deepEqual( Stem("sweethearts"), "sweetheart" );
	deepEqual( Stem("sweetie"), "sweeti" );
	deepEqual( Stem("sweetly"), "sweet" );
	deepEqual( Stem("sweetmeat"), "sweetmeat" );
	deepEqual( Stem("sweetness"), "sweet" );
	deepEqual( Stem("sweets"), "sweet" );
	deepEqual( Stem("swell"), "swell" );
	deepEqual( Stem("swelled"), "swell" );
	deepEqual( Stem("swelling"), "swell" );
	deepEqual( Stem("swellings"), "swell" );
	deepEqual( Stem("swells"), "swell" );
	deepEqual( Stem("sweltering"), "swelter" );
	deepEqual( Stem("swept"), "swept" );
	deepEqual( Stem("swerve"), "swerv" );
	deepEqual( Stem("swerved"), "swerv" );
	deepEqual( Stem("swift"), "swift" );
	deepEqual( Stem("swifter"), "swifter" );
	deepEqual( Stem("swiftest"), "swiftest" );
	deepEqual( Stem("swiftly"), "swift" );
	deepEqual( Stem("swiftness"), "swift" );
	deepEqual( Stem("swig"), "swig" );
	deepEqual( Stem("swillenhausen"), "swillenhausen" );
	deepEqual( Stem("swillenhausens"), "swillenhausen" );
	deepEqual( Stem("swills"), "swill" );
	deepEqual( Stem("swim"), "swim" );
	deepEqual( Stem("swimming"), "swim" );
	deepEqual( Stem("swims"), "swim" );
	deepEqual( Stem("swindle"), "swindl" );
	deepEqual( Stem("swindled"), "swindl" );
	deepEqual( Stem("swindler"), "swindler" );
	deepEqual( Stem("swindlers"), "swindler" );
	deepEqual( Stem("swindling"), "swindl" );
	deepEqual( Stem("swine"), "swine" );
	deepEqual( Stem("swing"), "swing" );
	deepEqual( Stem("swinging"), "swing" );
	deepEqual( Stem("swings"), "swing" );
	deepEqual( Stem("swinishness"), "swinish" );
	deepEqual( Stem("swipes"), "swipe" );
	deepEqual( Stem("swirling"), "swirl" );
	deepEqual( Stem("switch"), "switch" );
	deepEqual( Stem("switches"), "switch" );
	deepEqual( Stem("switzerland"), "switzerland" );
	deepEqual( Stem("swollen"), "swollen" );
	deepEqual( Stem("swoln"), "swoln" );
	deepEqual( Stem("swoon"), "swoon" );
	deepEqual( Stem("swooned"), "swoon" );
	deepEqual( Stem("swooning"), "swoon" );
	deepEqual( Stem("swoop"), "swoop" );
	deepEqual( Stem("swooped"), "swoop" );
	deepEqual( Stem("sword"), "sword" );
	deepEqual( Stem("swords"), "sword" );
	deepEqual( Stem("swordsman"), "swordsman" );
	deepEqual( Stem("swordsmanship"), "swordsmanship" );
	deepEqual( Stem("swordsmen"), "swordsmen" );
	deepEqual( Stem("swore"), "swore" );
	deepEqual( Stem("sworn"), "sworn" );
	deepEqual( Stem("swosser"), "swosser" );
	deepEqual( Stem("swung"), "swung" );
	deepEqual( Stem("sycophancy"), "sycoph" );
	deepEqual( Stem("sydney"), "sydney" );
	deepEqual( Stem("syenite"), "syenit" );
	deepEqual( Stem("syenitic"), "syenit" );
	deepEqual( Stem("syllable"), "syllabl" );
	deepEqual( Stem("syllogism"), "syllog" );
	deepEqual( Stem("sylph"), "sylph" );
	deepEqual( Stem("symbol"), "symbol" );
	deepEqual( Stem("symbolic"), "symbol" );
	deepEqual( Stem("symbolism"), "symbol" );
	deepEqual( Stem("symbols"), "symbol" );
	deepEqual( Stem("symes"), "syme" );
	deepEqual( Stem("symmetrical"), "symmetr" );
	deepEqual( Stem("symmetrically"), "symmetr" );
	deepEqual( Stem("symmetry"), "symmetri" );
	deepEqual( Stem("symond"), "symond" );
	deepEqual( Stem("symonds"), "symond" );
	deepEqual( Stem("sympathetic"), "sympathet" );
	deepEqual( Stem("sympathetically"), "sympathet" );
	deepEqual( Stem("sympathies"), "sympathi" );
	deepEqual( Stem("sympathise"), "sympathis" );
	deepEqual( Stem("sympathised"), "sympathis" );
	deepEqual( Stem("sympathising"), "sympathis" );
	deepEqual( Stem("sympathize"), "sympath" );
	deepEqual( Stem("sympathized"), "sympath" );
	deepEqual( Stem("sympathizers"), "sympath" );
	deepEqual( Stem("sympathizing"), "sympath" );
	deepEqual( Stem("sympathy"), "sympathi" );
	deepEqual( Stem("symptom"), "symptom" );
	deepEqual( Stem("symptomatic"), "symptomat" );
	deepEqual( Stem("symptoms"), "symptom" );
	deepEqual( Stem("synetheres"), "synether" );
	deepEqual( Stem("synod"), "synod" );
	deepEqual( Stem("synonymous"), "synonym" );
	deepEqual( Stem("syria"), "syria" );
	deepEqual( Stem("syriac"), "syriac" );
	deepEqual( Stem("syrphus"), "syrphus" );
	deepEqual( Stem("system"), "system" );
	deepEqual( Stem("systematic"), "systemat" );
	deepEqual( Stem("systems"), "system" );
	deepEqual( Stem("t"), "t" );
	deepEqual( Stem("ta"), "ta" );
	deepEqual( Stem("tabanus"), "tabanus" );
	deepEqual( Stem("tabby"), "tabbi" );
	deepEqual( Stem("table"), "tabl" );
	deepEqual( Stem("tableau"), "tableau" );
	deepEqual( Stem("tablecloth"), "tablecloth" );
	deepEqual( Stem("tablecloths"), "tablecloth" );
	deepEqual( Stem("tables"), "tabl" );
	deepEqual( Stem("tabooed"), "taboo" );
	deepEqual( Stem("tabor"), "tabor" );
	deepEqual( Stem("tacit"), "tacit" );
	deepEqual( Stem("tacitly"), "tacit" );
	deepEqual( Stem("taciturn"), "taciturn" );
	deepEqual( Stem("taciturnity"), "taciturn" );
	deepEqual( Stem("tack"), "tack" );
	deepEqual( Stem("tacking"), "tack" );
	deepEqual( Stem("tackle"), "tackl" );
	deepEqual( Stem("tacks"), "tack" );
	deepEqual( Stem("tacna"), "tacna" );
	deepEqual( Stem("tact"), "tact" );
	deepEqual( Stem("tactics"), "tactic" );
	deepEqual( Stem("tags"), "tag" );
	deepEqual( Stem("tagua"), "tagua" );
	deepEqual( Stem("tahiti"), "tahiti" );
	deepEqual( Stem("tahitian"), "tahitian" );
	deepEqual( Stem("tahitians"), "tahitian" );
	deepEqual( Stem("tail"), "tail" );
	deepEqual( Stem("tailed"), "tail" );
	deepEqual( Stem("tailor"), "tailor" );
	deepEqual( Stem("tailors"), "tailor" );
	deepEqual( Stem("tails"), "tail" );
	deepEqual( Stem("tain"), "tain" );
	deepEqual( Stem("taint"), "taint" );
	deepEqual( Stem("tainted"), "taint" );
	deepEqual( Stem("tainting"), "taint" );
	deepEqual( Stem("taints"), "taint" );
	deepEqual( Stem("tak"), "tak" );
	deepEqual( Stem("take"), "take" );
	deepEqual( Stem("taken"), "taken" );
	deepEqual( Stem("taker"), "taker" );
	deepEqual( Stem("takes"), "take" );
	deepEqual( Stem("taketh"), "taketh" );
	deepEqual( Stem("taking"), "take" );
	deepEqual( Stem("takken"), "takken" );
	deepEqual( Stem("takkin"), "takkin" );
	deepEqual( Stem("talbot"), "talbot" );
	deepEqual( Stem("talcahuano"), "talcahuano" );
	deepEqual( Stem("tale"), "tale" );
	deepEqual( Stem("talent"), "talent" );
	deepEqual( Stem("talented"), "talent" );
	deepEqual( Stem("talents"), "talent" );
	deepEqual( Stem("tales"), "tale" );
	deepEqual( Stem("talguen"), "talguen" );
	deepEqual( Stem("talisman"), "talisman" );
	deepEqual( Stem("talk"), "talk" );
	deepEqual( Stem("talkative"), "talkat" );
	deepEqual( Stem("talked"), "talk" );
	deepEqual( Stem("talker"), "talker" );
	deepEqual( Stem("talkers"), "talker" );
	deepEqual( Stem("talkin"), "talkin" );
	deepEqual( Stem("talking"), "talk" );
	deepEqual( Stem("talks"), "talk" );
	deepEqual( Stem("tall"), "tall" );
	deepEqual( Stem("taller"), "taller" );
	deepEqual( Stem("tallest"), "tallest" );
	deepEqual( Stem("tallied"), "talli" );
	deepEqual( Stem("tallow"), "tallow" );
	deepEqual( Stem("tally"), "talli" );
	deepEqual( Stem("talus"), "talus" );
	deepEqual( Stem("tam"), "tam" );
	deepEqual( Stem("tambillos"), "tambillo" );
	deepEqual( Stem("tambour"), "tambour" );
	deepEqual( Stem("tambourine"), "tambourin" );
	deepEqual( Stem("tame"), "tame" );
	deepEqual( Stem("tamed"), "tame" );
	deepEqual( Stem("tamely"), "tame" );
	deepEqual( Stem("tameness"), "tame" );
	deepEqual( Stem("tamer"), "tamer" );
	deepEqual( Stem("taming"), "tame" );
	deepEqual( Stem("tamper"), "tamper" );
	deepEqual( Stem("tampered"), "tamper" );
	deepEqual( Stem("tampering"), "tamper" );
	deepEqual( Stem("tampers"), "tamper" );
	deepEqual( Stem("tan"), "tan" );
	deepEqual( Stem("tandeel"), "tandeel" );
	deepEqual( Stem("tangible"), "tangibl" );
	deepEqual( Stem("tangle"), "tangl" );
	deepEqual( Stem("tangled"), "tangl" );
	deepEqual( Stem("tankard"), "tankard" );
	deepEqual( Stem("tanks"), "tank" );
	deepEqual( Stem("tanned"), "tan" );
	deepEqual( Stem("tanqui"), "tanqui" );
	deepEqual( Stem("tantalisation"), "tantalis" );
	deepEqual( Stem("tantalised"), "tantalis" );
	deepEqual( Stem("tantalising"), "tantalis" );
	deepEqual( Stem("tantalizing"), "tantal" );
	deepEqual( Stem("tantamount"), "tantamount" );
	deepEqual( Stem("tantrums"), "tantrum" );
	deepEqual( Stem("tap"), "tap" );
	deepEqual( Stem("tapacolo"), "tapacolo" );
	deepEqual( Stem("tapalguen"), "tapalguen" );
	deepEqual( Stem("tape"), "tape" );
	deepEqual( Stem("taper"), "taper" );
	deepEqual( Stem("tapering"), "taper" );
	deepEqual( Stem("tapers"), "taper" );
	deepEqual( Stem("tapes"), "tape" );
	deepEqual( Stem("tapir"), "tapir" );
	deepEqual( Stem("tapirs"), "tapir" );
	deepEqual( Stem("tapis"), "tapi" );
	deepEqual( Stem("tapn"), "tapn" );
	deepEqual( Stem("tapped"), "tap" );
	deepEqual( Stem("tapping"), "tap" );
	deepEqual( Stem("taps"), "tap" );
	deepEqual( Stem("tapster"), "tapster" );
	deepEqual( Stem("taradiddle"), "taradiddl" );
	deepEqual( Stem("tardily"), "tardili" );
	deepEqual( Stem("tardiness"), "tardi" );
	deepEqual( Stem("tardy"), "tardi" );
	deepEqual( Stem("tares"), "tare" );
	deepEqual( Stem("target"), "target" );
	deepEqual( Stem("targets"), "target" );
	deepEqual( Stem("tarn"), "tarn" );
	deepEqual( Stem("tarnii"), "tarnii" );
	deepEqual( Stem("tarnish"), "tarnish" );
	deepEqual( Stem("tarnished"), "tarnish" );
	deepEqual( Stem("tarpaulins"), "tarpaulin" );
	deepEqual( Stem("tarradiddles"), "tarradiddl" );
	deepEqual( Stem("tarred"), "tar" );
	deepEqual( Stem("tarry"), "tarri" );
	deepEqual( Stem("tart"), "tart" );
	deepEqual( Stem("tartan"), "tartan" );
	deepEqual( Stem("tartar"), "tartar" );
	deepEqual( Stem("tartary"), "tartari" );
	deepEqual( Stem("tartly"), "tart" );
	deepEqual( Stem("tarts"), "tart" );
	deepEqual( Stem("task"), "task" );
	deepEqual( Stem("tasking"), "task" );
	deepEqual( Stem("tasks"), "task" );
	deepEqual( Stem("tasman"), "tasman" );
	deepEqual( Stem("tasmania"), "tasmania" );
	deepEqual( Stem("tassel"), "tassel" );
	deepEqual( Stem("tasselled"), "tassel" );
	deepEqual( Stem("tassels"), "tassel" );
	deepEqual( Stem("tasso"), "tasso" );
	deepEqual( Stem("taste"), "tast" );
	deepEqual( Stem("tasted"), "tast" );
	deepEqual( Stem("tasteful"), "tast" );
	deepEqual( Stem("tastefully"), "tast" );
	deepEqual( Stem("tasteless"), "tasteless" );
	deepEqual( Stem("tastes"), "tast" );
	deepEqual( Stem("tasting"), "tast" );
	deepEqual( Stem("tat"), "tat" );
	deepEqual( Stem("tata"), "tata" );
	deepEqual( Stem("tattered"), "tatter" );
	deepEqual( Stem("tatters"), "tatter" );
	deepEqual( Stem("tattoo"), "tattoo" );
	deepEqual( Stem("tattooed"), "tattoo" );
	deepEqual( Stem("tattooing"), "tattoo" );
	deepEqual( Stem("taught"), "taught" );
	deepEqual( Stem("taunt"), "taunt" );
	deepEqual( Stem("taunted"), "taunt" );
	deepEqual( Stem("taunting"), "taunt" );
	deepEqual( Stem("taunto"), "taunto" );
	deepEqual( Stem("taunton"), "taunton" );
	deepEqual( Stem("taunts"), "taunt" );
	deepEqual( Stem("tavern"), "tavern" );
	deepEqual( Stem("taverns"), "tavern" );
	deepEqual( Stem("tawdry"), "tawdri" );
	deepEqual( Stem("tawny"), "tawni" );
	deepEqual( Stem("tax"), "tax" );
	deepEqual( Stem("taxation"), "taxat" );
	deepEqual( Stem("taxed"), "tax" );
	deepEqual( Stem("taxes"), "tax" );
	deepEqual( Stem("taylor"), "taylor" );
	deepEqual( Stem("tbe"), "tbe" );
	deepEqual( Stem("tchebarov"), "tchebarov" );
	deepEqual( Stem("te"), "te" );
	deepEqual( Stem("tea"), "tea" );
	deepEqual( Stem("teach"), "teach" );
	deepEqual( Stem("teacher"), "teacher" );
	deepEqual( Stem("teachers"), "teacher" );
	deepEqual( Stem("teaches"), "teach" );
	deepEqual( Stem("teaching"), "teach" );
	deepEqual( Stem("teachings"), "teach" );
	deepEqual( Stem("teacups"), "teacup" );
	deepEqual( Stem("teak"), "teak" );
	deepEqual( Stem("team"), "team" );
	deepEqual( Stem("teapot"), "teapot" );
	deepEqual( Stem("tear"), "tear" );
	deepEqual( Stem("teardrop"), "teardrop" );
	deepEqual( Stem("tearful"), "tear" );
	deepEqual( Stem("tearfully"), "tear" );
	deepEqual( Stem("tearing"), "tear" );
	deepEqual( Stem("tearless"), "tearless" );
	deepEqual( Stem("tears"), "tear" );
	deepEqual( Stem("tease"), "teas" );
	deepEqual( Stem("teased"), "teas" );
	deepEqual( Stem("teasing"), "teas" );
	deepEqual( Stem("teaspoon"), "teaspoon" );
	deepEqual( Stem("teaspoons"), "teaspoon" );
	deepEqual( Stem("teatime"), "teatim" );
	deepEqual( Stem("technicalities"), "technic" );
	deepEqual( Stem("tedious"), "tedious" );
	deepEqual( Stem("tediousness"), "tedious" );
	deepEqual( Stem("tedium"), "tedium" );
	deepEqual( Stem("tee"), "tee" );
	deepEqual( Stem("teel"), "teel" );
	deepEqual( Stem("teeming"), "teem" );
	deepEqual( Stem("teems"), "teem" );
	deepEqual( Stem("teens"), "teen" );
	deepEqual( Stem("teeth"), "teeth" );
	deepEqual( Stem("tehuelches"), "tehuelch" );
	deepEqual( Stem("tekenika"), "tekenika" );
	deepEqual( Stem("telegram"), "telegram" );
	deepEqual( Stem("telegrams"), "telegram" );
	deepEqual( Stem("telegraph"), "telegraph" );
	deepEqual( Stem("telegraphed"), "telegraph" );
	deepEqual( Stem("telegraphic"), "telegraph" );
	deepEqual( Stem("telegraphing"), "telegraph" );
	deepEqual( Stem("telemachus"), "telemachus" );
	deepEqual( Stem("telephoridae"), "telephorida" );
	deepEqual( Stem("telescope"), "telescop" );
	deepEqual( Stem("telescopes"), "telescop" );
	deepEqual( Stem("telescopic"), "telescop" );
	deepEqual( Stem("tell"), "tell" );
	deepEqual( Stem("tellee"), "telle" );
	deepEqual( Stem("teller"), "teller" );
	deepEqual( Stem("telling"), "tell" );
	deepEqual( Stem("tells"), "tell" );
	deepEqual( Stem("temminckii"), "temminckii" );
	deepEqual( Stem("temp"), "temp" );
	deepEqual( Stem("temper"), "temper" );
	deepEqual( Stem("temperament"), "tempera" );
	deepEqual( Stem("temperaments"), "tempera" );
	deepEqual( Stem("temperance"), "temper" );
	deepEqual( Stem("temperate"), "temper" );
	deepEqual( Stem("temperature"), "temperatur" );
	deepEqual( Stem("tempered"), "temper" );
	deepEqual( Stem("tempers"), "temper" );
	deepEqual( Stem("tempest"), "tempest" );
	deepEqual( Stem("tempestuous"), "tempestu" );
	deepEqual( Stem("temple"), "templ" );
	deepEqual( Stem("temples"), "templ" );
	deepEqual( Stem("temporal"), "tempor" );
	deepEqual( Stem("temporary"), "temporari" );
	deepEqual( Stem("tempt"), "tempt" );
	deepEqual( Stem("temptation"), "temptat" );
	deepEqual( Stem("temptations"), "temptat" );
	deepEqual( Stem("tempted"), "tempt" );
	deepEqual( Stem("tempter"), "tempter" );
	deepEqual( Stem("tempting"), "tempt" );
	deepEqual( Stem("tempts"), "tempt" );
	deepEqual( Stem("ten"), "ten" );
	deepEqual( Stem("tenacious"), "tenaci" );
	deepEqual( Stem("tenaciously"), "tenaci" );
	deepEqual( Stem("tenacity"), "tenac" );
	deepEqual( Stem("tenant"), "tenant" );
	deepEqual( Stem("tenanted"), "tenant" );
	deepEqual( Stem("tenantry"), "tenantri" );
	deepEqual( Stem("tenants"), "tenant" );
	deepEqual( Stem("tend"), "tend" );
	deepEqual( Stem("tended"), "tend" );
	deepEqual( Stem("tendencies"), "tendenc" );
	deepEqual( Stem("tendency"), "tendenc" );
	deepEqual( Stem("tender"), "tender" );
	deepEqual( Stem("tendered"), "tender" );
	deepEqual( Stem("tenderer"), "tender" );
	deepEqual( Stem("tenderest"), "tenderest" );
	deepEqual( Stem("tendering"), "tender" );
	deepEqual( Stem("tenderly"), "tender" );
	deepEqual( Stem("tenderness"), "tender" );
	deepEqual( Stem("tending"), "tend" );
	deepEqual( Stem("tendinous"), "tendin" );
	deepEqual( Stem("tendon"), "tendon" );
	deepEqual( Stem("tends"), "tend" );
	deepEqual( Stem("tenement"), "tenement" );
	deepEqual( Stem("tenements"), "tenement" );
	deepEqual( Stem("teneriffe"), "teneriff" );
	deepEqual( Stem("tenez"), "tenez" );
	deepEqual( Stem("tenfold"), "tenfold" );
	deepEqual( Stem("tennyson"), "tennyson" );
	deepEqual( Stem("tenor"), "tenor" );
	deepEqual( Stem("tens"), "ten" );
	deepEqual( Stem("tense"), "tens" );
	deepEqual( Stem("tension"), "tension" );
	deepEqual( Stem("tensions"), "tension" );
	deepEqual( Stem("tent"), "tent" );
	deepEqual( Stem("tentacula"), "tentacula" );
	deepEqual( Stem("tentative"), "tentat" );
	deepEqual( Stem("tentatively"), "tentat" );
	deepEqual( Stem("tenth"), "tenth" );
	deepEqual( Stem("tenths"), "tenth" );
	deepEqual( Stem("tents"), "tent" );
	deepEqual( Stem("tenure"), "tenur" );
	deepEqual( Stem("tenway"), "tenway" );
	deepEqual( Stem("ter"), "ter" );
	deepEqual( Stem("tercero"), "tercero" );
	deepEqual( Stem("terebra"), "terebra" );
	deepEqual( Stem("terebyeva"), "terebyeva" );
	deepEqual( Stem("terewth"), "terewth" );
	deepEqual( Stem("term"), "term" );
	deepEqual( Stem("termagant"), "termag" );
	deepEqual( Stem("termed"), "term" );
	deepEqual( Stem("terminal"), "termin" );
	deepEqual( Stem("terminate"), "termin" );
	deepEqual( Stem("terminated"), "termin" );
	deepEqual( Stem("terminates"), "termin" );
	deepEqual( Stem("terminating"), "termin" );
	deepEqual( Stem("termination"), "termin" );
	deepEqual( Stem("terms"), "term" );
	deepEqual( Stem("tern"), "tern" );
	deepEqual( Stem("terns"), "tern" );
	deepEqual( Stem("tero"), "tero" );
	deepEqual( Stem("terra"), "terra" );
	deepEqual( Stem("terrace"), "terrac" );
	deepEqual( Stem("terraces"), "terrac" );
	deepEqual( Stem("terres"), "terr" );
	deepEqual( Stem("terrestrial"), "terrestri" );
	deepEqual( Stem("terrible"), "terribl" );
	deepEqual( Stem("terribly"), "terribl" );
	deepEqual( Stem("terrier"), "terrier" );
	deepEqual( Stem("terriers"), "terrier" );
	deepEqual( Stem("terrific"), "terrif" );
	deepEqual( Stem("terrified"), "terrifi" );
	deepEqual( Stem("terrify"), "terrifi" );
	deepEqual( Stem("terrifying"), "terrifi" );
	deepEqual( Stem("territorial"), "territori" );
	deepEqual( Stem("territories"), "territori" );
	deepEqual( Stem("territory"), "territori" );
	deepEqual( Stem("terror"), "terror" );
	deepEqual( Stem("terrors"), "terror" );
	deepEqual( Stem("terse"), "ters" );
	deepEqual( Stem("terseness"), "ters" );
	deepEqual( Stem("tertiary"), "tertiari" );
	deepEqual( Stem("teru"), "teru" );
	deepEqual( Stem("tesselated"), "tessel" );
	deepEqual( Stem("test"), "test" );
	deepEqual( Stem("testacea"), "testacea" );
	deepEqual( Stem("testament"), "testament" );
	deepEqual( Stem("testamentary"), "testamentari" );
	deepEqual( Stem("testator"), "testat" );
	deepEqual( Stem("tested"), "test" );
	deepEqual( Stem("testified"), "testifi" );
	deepEqual( Stem("testifies"), "testifi" );
	deepEqual( Stem("testifled"), "testifl" );
	deepEqual( Stem("testify"), "testifi" );
	deepEqual( Stem("testifying"), "testifi" );
	deepEqual( Stem("testily"), "testili" );
	deepEqual( Stem("testimonial"), "testimoni" );
	deepEqual( Stem("testimony"), "testimoni" );
	deepEqual( Stem("testiness"), "testi" );
	deepEqual( Stem("tests"), "test" );
	deepEqual( Stem("testudo"), "testudo" );
	deepEqual( Stem("testy"), "testi" );
	deepEqual( Stem("tete"), "tete" );
	deepEqual( Stem("tetes"), "tete" );
	deepEqual( Stem("teutons"), "teuton" );
	deepEqual( Stem("tew"), "tew" );
	deepEqual( Stem("text"), "text" );
	deepEqual( Stem("texture"), "textur" );
	deepEqual( Stem("tfoo"), "tfoo" );
	deepEqual( Stem("th"), "th" );
	deepEqual( Stem("tha"), "tha" );
	deepEqual( Stem("thames"), "thame" );
	deepEqual( Stem("than"), "than" );
	deepEqual( Stem("thank"), "thank" );
	deepEqual( Stem("thanked"), "thank" );
	deepEqual( Stem("thankee"), "thanke" );
	deepEqual( Stem("thankful"), "thank" );
	deepEqual( Stem("thankfully"), "thank" );
	deepEqual( Stem("thankfulness"), "thank" );
	deepEqual( Stem("thanking"), "thank" );
	deepEqual( Stem("thankless"), "thankless" );
	deepEqual( Stem("thanks"), "thank" );
	deepEqual( Stem("thanksgiving"), "thanksgiv" );
	deepEqual( Stem("thanksgivings"), "thanksgiv" );
	deepEqual( Stem("thanyou"), "thanyou" );
	deepEqual( Stem("that"), "that" );
	deepEqual( Stem("thatch"), "thatch" );
	deepEqual( Stem("thatched"), "thatch" );
	deepEqual( Stem("thavies"), "thavi" );
	deepEqual( Stem("thaw"), "thaw" );
	deepEqual( Stem("thawed"), "thaw" );
	deepEqual( Stem("thawing"), "thaw" );
	deepEqual( Stem("the"), "the" );
	deepEqual( Stem("theatre"), "theatr" );
	deepEqual( Stem("theatres"), "theatr" );
	deepEqual( Stem("theatrical"), "theatric" );
	deepEqual( Stem("theatrically"), "theatric" );
	deepEqual( Stem("theatricals"), "theatric" );
	deepEqual( Stem("theayter"), "theayter" );
	deepEqual( Stem("thee"), "thee" );
	deepEqual( Stem("theer"), "theer" );
	deepEqual( Stem("theeself"), "theeself" );
	deepEqual( Stem("theft"), "theft" );
	deepEqual( Stem("thei"), "thei" );
	deepEqual( Stem("theils"), "theil" );
	deepEqual( Stem("their"), "their" );
	deepEqual( Stem("theirs"), "their" );
	deepEqual( Stem("theirselves"), "theirselv" );
	deepEqual( Stem("them"), "them" );
	deepEqual( Stem("theme"), "theme" );
	deepEqual( Stem("themes"), "theme" );
	deepEqual( Stem("themselves"), "themselv" );
	deepEqual( Stem("then"), "then" );
	deepEqual( Stem("thence"), "thenc" );
	deepEqual( Stem("thenceforth"), "thenceforth" );
	deepEqual( Stem("theodolite"), "theodolit" );
	deepEqual( Stem("theodora"), "theodora" );
	deepEqual( Stem("theodoras"), "theodora" );
	deepEqual( Stem("theodore"), "theodor" );
	deepEqual( Stem("theoretical"), "theoret" );
	deepEqual( Stem("theoretically"), "theoret" );
	deepEqual( Stem("theorie"), "theori" );
	deepEqual( Stem("theories"), "theori" );
	deepEqual( Stem("theorize"), "theoriz" );
	deepEqual( Stem("theory"), "theori" );
	deepEqual( Stem("ther"), "ther" );
	deepEqual( Stem("there"), "there" );
	deepEqual( Stem("thereabout"), "thereabout" );
	deepEqual( Stem("thereabouts"), "thereabout" );
	deepEqual( Stem("thereafter"), "thereaft" );
	deepEqual( Stem("thereby"), "therebi" );
	deepEqual( Stem("therefore"), "therefor" );
	deepEqual( Stem("therefrom"), "therefrom" );
	deepEqual( Stem("therein"), "therein" );
	deepEqual( Stem("thereof"), "thereof" );
	deepEqual( Stem("thereon"), "thereon" );
	deepEqual( Stem("theresa"), "theresa" );
	deepEqual( Stem("thereto"), "thereto" );
	deepEqual( Stem("thereunto"), "thereunto" );
	deepEqual( Stem("thereupon"), "thereupon" );
	deepEqual( Stem("therewith"), "therewith" );
	deepEqual( Stem("theridion"), "theridion" );
	deepEqual( Stem("theristicus"), "theristicus" );
	deepEqual( Stem("thermometer"), "thermomet" );
	deepEqual( Stem("thes"), "thes" );
	deepEqual( Stem("these"), "these" );
	deepEqual( Stem("they"), "they" );
	deepEqual( Stem("thi"), "thi" );
	deepEqual( Stem("thick"), "thick" );
	deepEqual( Stem("thicken"), "thicken" );
	deepEqual( Stem("thickened"), "thicken" );
	deepEqual( Stem("thickening"), "thicken" );
	deepEqual( Stem("thicker"), "thicker" );
	deepEqual( Stem("thickest"), "thickest" );
	deepEqual( Stem("thicket"), "thicket" );
	deepEqual( Stem("thickets"), "thicket" );
	deepEqual( Stem("thickly"), "thick" );
	deepEqual( Stem("thickness"), "thick" );
	deepEqual( Stem("thief"), "thief" );
	deepEqual( Stem("thier"), "thier" );
	deepEqual( Stem("thieved"), "thiev" );
	deepEqual( Stem("thieves"), "thiev" );
	deepEqual( Stem("thigh"), "thigh" );
	deepEqual( Stem("thighs"), "thigh" );
	deepEqual( Stem("thimble"), "thimbl" );
	deepEqual( Stem("thin"), "thin" );
	deepEqual( Stem("thine"), "thine" );
	deepEqual( Stem("thing"), "thing" );
	deepEqual( Stem("things"), "thing" );
	deepEqual( Stem("think"), "think" );
	deepEqual( Stem("thinkable"), "thinkabl" );
	deepEqual( Stem("thinker"), "thinker" );
	deepEqual( Stem("thinkin"), "thinkin" );
	deepEqual( Stem("thinking"), "think" );
	deepEqual( Stem("thinks"), "think" );
	deepEqual( Stem("thinly"), "thin" );
	deepEqual( Stem("thinned"), "thin" );
	deepEqual( Stem("thinner"), "thinner" );
	deepEqual( Stem("thinness"), "thin" );
	deepEqual( Stem("thinning"), "thin" );
	deepEqual( Stem("thins"), "thin" );
	deepEqual( Stem("third"), "third" );
	deepEqual( Stem("thirdly"), "third" );
	deepEqual( Stem("thirds"), "third" );
	deepEqual( Stem("thirst"), "thirst" );
	deepEqual( Stem("thirstier"), "thirstier" );
	deepEqual( Stem("thirsting"), "thirst" );
	deepEqual( Stem("thirsty"), "thirsti" );
	deepEqual( Stem("thirteen"), "thirteen" );
	deepEqual( Stem("thirteenth"), "thirteenth" );
	deepEqual( Stem("thirtieth"), "thirtieth" );
	deepEqual( Stem("thirty"), "thirti" );
	deepEqual( Stem("this"), "this" );
	deepEqual( Stem("thistle"), "thistl" );
	deepEqual( Stem("thistles"), "thistl" );
	deepEqual( Stem("thither"), "thither" );
	deepEqual( Stem("tho"), "tho" );
	deepEqual( Stem("thomas"), "thoma" );
	deepEqual( Stem("thong"), "thong" );
	deepEqual( Stem("thongs"), "thong" );
	deepEqual( Stem("thorax"), "thorax" );
	deepEqual( Stem("thorn"), "thorn" );
	deepEqual( Stem("thorns"), "thorn" );
	deepEqual( Stem("thorny"), "thorni" );
	deepEqual( Stem("thorough"), "thorough" );
	deepEqual( Stem("thoroughbred"), "thoroughbr" );
	deepEqual( Stem("thoroughfare"), "thoroughfar" );
	deepEqual( Stem("thoroughfares"), "thoroughfar" );
	deepEqual( Stem("thoroughgoing"), "thoroughgo" );
	deepEqual( Stem("thoroughly"), "thorough" );
	deepEqual( Stem("those"), "those" );
	deepEqual( Stem("thot"), "thot" );
	deepEqual( Stem("thou"), "thou" );
	deepEqual( Stem("though"), "though" );
	deepEqual( Stem("thought"), "thought" );
	deepEqual( Stem("thoughtful"), "thought" );
	deepEqual( Stem("thoughtfully"), "thought" );
	deepEqual( Stem("thoughtfulness"), "thought" );
	deepEqual( Stem("thoughtless"), "thoughtless" );
	deepEqual( Stem("thoughtlessness"), "thoughtless" );
	deepEqual( Stem("thoughts"), "thought" );
	deepEqual( Stem("thoughy"), "thoughi" );
	deepEqual( Stem("thousand"), "thousand" );
	deepEqual( Stem("thousandfold"), "thousandfold" );
	deepEqual( Stem("thousands"), "thousand" );
	deepEqual( Stem("thousandth"), "thousandth" );
	deepEqual( Stem("thousandths"), "thousandth" );
	deepEqual( Stem("thousing"), "thous" );
	deepEqual( Stem("thout"), "thout" );
	deepEqual( Stem("thraldom"), "thraldom" );
	deepEqual( Stem("thrash"), "thrash" );
	deepEqual( Stem("thrashed"), "thrash" );
	deepEqual( Stem("thrashing"), "thrash" );
	deepEqual( Stem("thre"), "thre" );
	deepEqual( Stem("thread"), "thread" );
	deepEqual( Stem("threadbare"), "threadbar" );
	deepEqual( Stem("threaded"), "thread" );
	deepEqual( Stem("threading"), "thread" );
	deepEqual( Stem("threadneedle"), "threadneedl" );
	deepEqual( Stem("threads"), "thread" );
	deepEqual( Stem("threat"), "threat" );
	deepEqual( Stem("threaten"), "threaten" );
	deepEqual( Stem("threatened"), "threaten" );
	deepEqual( Stem("threatening"), "threaten" );
	deepEqual( Stem("threatenings"), "threaten" );
	deepEqual( Stem("threatens"), "threaten" );
	deepEqual( Stem("threats"), "threat" );
	deepEqual( Stem("three"), "three" );
	deepEqual( Stem("threepence"), "threepenc" );
	deepEqual( Stem("threes"), "three" );
	deepEqual( Stem("threescore"), "threescor" );
	deepEqual( Stem("threshed"), "thresh" );
	deepEqual( Stem("threshold"), "threshold" );
	deepEqual( Stem("threw"), "threw" );
	deepEqual( Stem("thrice"), "thrice" );
	deepEqual( Stem("thried"), "thri" );
	deepEqual( Stem("thrift"), "thrift" );
	deepEqual( Stem("thriftless"), "thriftless" );
	deepEqual( Stem("thrill"), "thrill" );
	deepEqual( Stem("thrilled"), "thrill" );
	deepEqual( Stem("thrilling"), "thrill" );
	deepEqual( Stem("thrills"), "thrill" );
	deepEqual( Stem("thrive"), "thrive" );
	deepEqual( Stem("thriven"), "thriven" );
	deepEqual( Stem("thrives"), "thrive" );
	deepEqual( Stem("thriving"), "thrive" );
	deepEqual( Stem("throat"), "throat" );
	deepEqual( Stem("throats"), "throat" );
	deepEqual( Stem("throb"), "throb" );
	deepEqual( Stem("throbbed"), "throb" );
	deepEqual( Stem("throbbing"), "throb" );
	deepEqual( Stem("throne"), "throne" );
	deepEqual( Stem("throng"), "throng" );
	deepEqual( Stem("thronged"), "throng" );
	deepEqual( Stem("thronging"), "throng" );
	deepEqual( Stem("throngs"), "throng" );
	deepEqual( Stem("throttled"), "throttl" );
	deepEqual( Stem("throug"), "throug" );
	deepEqual( Stem("through"), "through" );
	deepEqual( Stem("throughout"), "throughout" );
	deepEqual( Stem("throve"), "throve" );
	deepEqual( Stem("throw"), "throw" );
	deepEqual( Stem("throwed"), "throw" );
	deepEqual( Stem("throwing"), "throw" );
	deepEqual( Stem("thrown"), "thrown" );
	deepEqual( Stem("throws"), "throw" );
	deepEqual( Stem("thrush"), "thrush" );
	deepEqual( Stem("thrushes"), "thrush" );
	deepEqual( Stem("thrust"), "thrust" );
	deepEqual( Stem("thrusting"), "thrust" );
	deepEqual( Stem("thrusts"), "thrust" );
	deepEqual( Stem("thrveydrop"), "thrveydrop" );
	deepEqual( Stem("thu"), "thu" );
	deepEqual( Stem("thud"), "thud" );
	deepEqual( Stem("thuds"), "thud" );
	deepEqual( Stem("thumb"), "thumb" );
	deepEqual( Stem("thumbed"), "thumb" );
	deepEqual( Stem("thumbs"), "thumb" );
	deepEqual( Stem("thump"), "thump" );
	deepEqual( Stem("thumped"), "thump" );
	deepEqual( Stem("thumping"), "thump" );
	deepEqual( Stem("thumps"), "thump" );
	deepEqual( Stem("thunder"), "thunder" );
	deepEqual( Stem("thunderbolt"), "thunderbolt" );
	deepEqual( Stem("thunderclap"), "thunderclap" );
	deepEqual( Stem("thundered"), "thunder" );
	deepEqual( Stem("thundering"), "thunder" );
	deepEqual( Stem("thunderings"), "thunder" );
	deepEqual( Stem("thunderstorm"), "thunderstorm" );
	deepEqual( Stem("thunderstorms"), "thunderstorm" );
	deepEqual( Stem("thunderstruck"), "thunderstruck" );
	deepEqual( Stem("thundery"), "thunderi" );
	deepEqual( Stem("thursday"), "thursday" );
	deepEqual( Stem("thursdays"), "thursday" );
	deepEqual( Stem("thus"), "thus" );
	deepEqual( Stem("thwart"), "thwart" );
	deepEqual( Stem("thwarted"), "thwart" );
	deepEqual( Stem("thwarting"), "thwart" );
	deepEqual( Stem("thy"), "thi" );
	deepEqual( Stem("thyself"), "thyself" );
	deepEqual( Stem("ti"), "ti" );
	deepEqual( Stem("tiaauru"), "tiaauru" );
	deepEqual( Stem("tial"), "tial" );
	deepEqual( Stem("tibby"), "tibbi" );
	deepEqual( Stem("tibiae"), "tibia" );
	deepEqual( Stem("tick"), "tick" );
	deepEqual( Stem("ticked"), "tick" );
	deepEqual( Stem("ticket"), "ticket" );
	deepEqual( Stem("ticketed"), "ticket" );
	deepEqual( Stem("tickets"), "ticket" );
	deepEqual( Stem("ticking"), "tick" );
	deepEqual( Stem("tickings"), "tick" );
	deepEqual( Stem("tickle"), "tickl" );
	deepEqual( Stem("tickled"), "tickl" );
	deepEqual( Stem("tickles"), "tickl" );
	deepEqual( Stem("tickling"), "tickl" );
	deepEqual( Stem("ticklish"), "ticklish" );
	deepEqual( Stem("ticks"), "tick" );
	deepEqual( Stem("tidal"), "tidal" );
	deepEqual( Stem("tiddler"), "tiddler" );
	deepEqual( Stem("tide"), "tide" );
	deepEqual( Stem("tides"), "tide" );
	deepEqual( Stem("tidied"), "tidi" );
	deepEqual( Stem("tidily"), "tidili" );
	deepEqual( Stem("tidings"), "tide" );
	deepEqual( Stem("tidy"), "tidi" );
	deepEqual( Stem("tie"), "tie" );
	deepEqual( Stem("tied"), "tie" );
	deepEqual( Stem("tierra"), "tierra" );
	deepEqual( Stem("tiers"), "tier" );
	deepEqual( Stem("ties"), "tie" );
	deepEqual( Stem("tiff"), "tiff" );
	deepEqual( Stem("tiger"), "tiger" );
	deepEqual( Stem("tigerish"), "tigerish" );
	deepEqual( Stem("tigers"), "tiger" );
	deepEqual( Stem("tight"), "tight" );
	deepEqual( Stem("tighten"), "tighten" );
	deepEqual( Stem("tightened"), "tighten" );
	deepEqual( Stem("tighter"), "tighter" );
	deepEqual( Stem("tightly"), "tight" );
	deepEqual( Stem("tightness"), "tight" );
	deepEqual( Stem("tights"), "tight" );
	deepEqual( Stem("tigre"), "tigr" );
	deepEqual( Stem("tigress"), "tigress" );
	deepEqual( Stem("til"), "til" );
	deepEqual( Stem("tilda"), "tilda" );
	deepEqual( Stem("tile"), "tile" );
	deepEqual( Stem("tiles"), "tile" );
	deepEqual( Stem("tiliareus"), "tiliareus" );
	deepEqual( Stem("till"), "till" );
	deepEqual( Stem("tillage"), "tillag" );
	deepEqual( Stem("tilled"), "till" );
	deepEqual( Stem("tilly"), "tilli" );
	deepEqual( Stem("tilted"), "tilt" );
	deepEqual( Stem("tilting"), "tilt" );
	deepEqual( Stem("tilts"), "tilt" );
	deepEqual( Stem("tim"), "tim" );
	deepEqual( Stem("timber"), "timber" );
	deepEqual( Stem("timberry"), "timberri" );
	deepEqual( Stem("timbers"), "timber" );
	deepEqual( Stem("timbrel"), "timbrel" );
	deepEqual( Stem("time"), "time" );
	deepEqual( Stem("timed"), "time" );
	deepEqual( Stem("timely"), "time" );
	deepEqual( Stem("times"), "time" );
	deepEqual( Stem("timid"), "timid" );
	deepEqual( Stem("timidity"), "timid" );
	deepEqual( Stem("timidly"), "timid" );
	deepEqual( Stem("timorous"), "timor" );
	deepEqual( Stem("timorously"), "timor" );
	deepEqual( Stem("timothy"), "timothi" );
	deepEqual( Stem("timour"), "timour" );
	deepEqual( Stem("tin"), "tin" );
	deepEqual( Stem("tinae"), "tina" );
	deepEqual( Stem("tinamus"), "tinamus" );
	deepEqual( Stem("tinder"), "tinder" );
	deepEqual( Stem("tinderidica"), "tinderidica" );
	deepEqual( Stem("tinge"), "ting" );
	deepEqual( Stem("tinged"), "ting" );
	deepEqual( Stem("tingle"), "tingl" );
	deepEqual( Stem("tingled"), "tingl" );
	deepEqual( Stem("tingling"), "tingl" );
	deepEqual( Stem("tiniest"), "tiniest" );
	deepEqual( Stem("tinker"), "tinker" );
	deepEqual( Stem("tinkers"), "tinker" );
	deepEqual( Stem("tinkle"), "tinkl" );
	deepEqual( Stem("tinkled"), "tinkl" );
	deepEqual( Stem("tinkling"), "tinkl" );
	deepEqual( Stem("tinochorus"), "tinochorus" );
	deepEqual( Stem("tint"), "tint" );
	deepEqual( Stem("tinted"), "tint" );
	deepEqual( Stem("tinting"), "tint" );
	deepEqual( Stem("tints"), "tint" );
	deepEqual( Stem("tiny"), "tini" );
	deepEqual( Stem("tion"), "tion" );
	deepEqual( Stem("tip"), "tip" );
	deepEqual( Stem("tipped"), "tip" );
	deepEqual( Stem("tipperary"), "tipperari" );
	deepEqual( Stem("tippets"), "tippet" );
	deepEqual( Stem("tippy"), "tippi" );
	deepEqual( Stem("tips"), "tip" );
	deepEqual( Stem("tipsily"), "tipsili" );
	deepEqual( Stem("tipslark"), "tipslark" );
	deepEqual( Stem("tipsy"), "tipsi" );
	deepEqual( Stem("tiptoe"), "tipto" );
	deepEqual( Stem("tiptop"), "tiptop" );
	deepEqual( Stem("tirade"), "tirad" );
	deepEqual( Stem("tire"), "tire" );
	deepEqual( Stem("tired"), "tire" );
	deepEqual( Stem("tires"), "tire" );
	deepEqual( Stem("tiresome"), "tiresom" );
	deepEqual( Stem("tiring"), "tire" );
	deepEqual( Stem("tis"), "tis" );
	deepEqual( Stem("tissue"), "tissu" );
	deepEqual( Stem("tit"), "tit" );
	deepEqual( Stem("tithe"), "tith" );
	deepEqual( Stem("titian"), "titian" );
	deepEqual( Stem("titlark"), "titlark" );
	deepEqual( Stem("title"), "titl" );
	deepEqual( Stem("titled"), "titl" );
	deepEqual( Stem("titles"), "titl" );
	deepEqual( Stem("titmouse"), "titmous" );
	deepEqual( Stem("tittered"), "titter" );
	deepEqual( Stem("tittering"), "titter" );
	deepEqual( Stem("titular"), "titular" );
	deepEqual( Stem("tiv"), "tiv" );
	deepEqual( Stem("tix"), "tix" );
	deepEqual( Stem("tle"), "tle" );
	deepEqual( Stem("to"), "to" );
	deepEqual( Stem("toad"), "toad" );
	deepEqual( Stem("toads"), "toad" );
	deepEqual( Stem("toast"), "toast" );
	deepEqual( Stem("toasted"), "toast" );
	deepEqual( Stem("toasting"), "toast" );
	deepEqual( Stem("tobacco"), "tobacco" );
	deepEqual( Stem("tobacconist"), "tobacconist" );
	deepEqual( Stem("tockahoopo"), "tockahoopo" );
	deepEqual( Stem("today"), "today" );
	deepEqual( Stem("toddy"), "toddi" );
	deepEqual( Stem("toe"), "toe" );
	deepEqual( Stem("toes"), "toe" );
	deepEqual( Stem("together"), "togeth" );
	deepEqual( Stem("togezzer"), "togezz" );
	deepEqual( Stem("toight"), "toight" );
	deepEqual( Stem("toil"), "toil" );
	deepEqual( Stem("toiled"), "toil" );
	deepEqual( Stem("toiler"), "toiler" );
	deepEqual( Stem("toilet"), "toilet" );
	deepEqual( Stem("toilette"), "toilett" );
	deepEqual( Stem("toiling"), "toil" );
	deepEqual( Stem("toils"), "toil" );
	deepEqual( Stem("toilsome"), "toilsom" );
	deepEqual( Stem("toity"), "toiti" );
	deepEqual( Stem("token"), "token" );
	deepEqual( Stem("tokens"), "token" );
	deepEqual( Stem("tol"), "tol" );
	deepEqual( Stem("told"), "told" );
	deepEqual( Stem("toldos"), "toldo" );
	deepEqual( Stem("tolerable"), "toler" );
	deepEqual( Stem("tolerably"), "toler" );
	deepEqual( Stem("tolerate"), "toler" );
	deepEqual( Stem("tolerated"), "toler" );
	deepEqual( Stem("toleration"), "toler" );
	deepEqual( Stem("toll"), "toll" );
	deepEqual( Stem("tolled"), "toll" );
	deepEqual( Stem("tolling"), "toll" );
	deepEqual( Stem("tolstyakov"), "tolstyakov" );
	deepEqual( Stem("tom"), "tom" );
	deepEqual( Stem("tomahawk"), "tomahawk" );
	deepEqual( Stem("tomahawked"), "tomahawk" );
	deepEqual( Stem("tomb"), "tomb" );
	deepEqual( Stem("tombs"), "tomb" );
	deepEqual( Stem("tombstone"), "tombston" );
	deepEqual( Stem("tombstones"), "tombston" );
	deepEqual( Stem("tomkins"), "tomkin" );
	deepEqual( Stem("tommy"), "tommi" );
	deepEqual( Stem("tomorrow"), "tomorrow" );
	deepEqual( Stem("ton"), "ton" );
	deepEqual( Stem("tone"), "tone" );
	deepEqual( Stem("toned"), "tone" );
	deepEqual( Stem("tones"), "tone" );
	deepEqual( Stem("tongs"), "tong" );
	deepEqual( Stem("tongue"), "tongu" );
	deepEqual( Stem("tongued"), "tongu" );
	deepEqual( Stem("tongues"), "tongu" );
	deepEqual( Stem("tonight"), "tonight" );
	deepEqual( Stem("tons"), "ton" );
	deepEqual( Stem("tony"), "toni" );
	deepEqual( Stem("too"), "too" );
	deepEqual( Stem("toogather"), "toogath" );
	deepEqual( Stem("took"), "took" );
	deepEqual( Stem("tool"), "tool" );
	deepEqual( Stem("tools"), "tool" );
	deepEqual( Stem("toomultuous"), "toomultu" );
	deepEqual( Stem("toon"), "toon" );
	deepEqual( Stem("tooth"), "tooth" );
	deepEqual( Stem("toothed"), "tooth" );
	deepEqual( Stem("toothful"), "tooth" );
	deepEqual( Stem("toothpick"), "toothpick" );
	deepEqual( Stem("toothpicks"), "toothpick" );
	deepEqual( Stem("tooting"), "toot" );
	deepEqual( Stem("top"), "top" );
	deepEqual( Stem("topic"), "topic" );
	deepEqual( Stem("topics"), "topic" );
	deepEqual( Stem("topped"), "top" );
	deepEqual( Stem("topping"), "top" );
	deepEqual( Stem("toppling"), "toppl" );
	deepEqual( Stem("tops"), "top" );
	deepEqual( Stem("topsail"), "topsail" );
	deepEqual( Stem("topsel"), "topsel" );
	deepEqual( Stem("topsy"), "topsi" );
	deepEqual( Stem("tor"), "tor" );
	deepEqual( Stem("torches"), "torch" );
	deepEqual( Stem("torchlight"), "torchlight" );
	deepEqual( Stem("tore"), "tore" );
	deepEqual( Stem("torment"), "torment" );
	deepEqual( Stem("tormented"), "torment" );
	deepEqual( Stem("tormenting"), "torment" );
	deepEqual( Stem("tormentor"), "tormentor" );
	deepEqual( Stem("tormentors"), "tormentor" );
	deepEqual( Stem("torments"), "torment" );
	deepEqual( Stem("torn"), "torn" );
	deepEqual( Stem("torpid"), "torpid" );
	deepEqual( Stem("torpor"), "torpor" );
	deepEqual( Stem("torrent"), "torrent" );
	deepEqual( Stem("torrents"), "torrent" );
	deepEqual( Stem("torrid"), "torrid" );
	deepEqual( Stem("tortershell"), "tortershel" );
	deepEqual( Stem("tortoise"), "tortois" );
	deepEqual( Stem("tortoises"), "tortois" );
	deepEqual( Stem("tortuous"), "tortuous" );
	deepEqual( Stem("torture"), "tortur" );
	deepEqual( Stem("tortured"), "tortur" );
	deepEqual( Stem("torturer"), "tortur" );
	deepEqual( Stem("tortures"), "tortur" );
	deepEqual( Stem("torturing"), "tortur" );
	deepEqual( Stem("tory"), "tori" );
	deepEqual( Stem("toryism"), "toryism" );
	deepEqual( Stem("toss"), "toss" );
	deepEqual( Stem("tossed"), "toss" );
	deepEqual( Stem("tosses"), "toss" );
	deepEqual( Stem("tossing"), "toss" );
	deepEqual( Stem("tossings"), "toss" );
	deepEqual( Stem("total"), "total" );
	deepEqual( Stem("totally"), "total" );
	deepEqual( Stem("totanus"), "totanus" );
	deepEqual( Stem("tottenham"), "tottenham" );
	deepEqual( Stem("tottered"), "totter" );
	deepEqual( Stem("tottering"), "totter" );
	deepEqual( Stem("totum"), "totum" );
	deepEqual( Stem("toucans"), "toucan" );
	deepEqual( Stem("touch"), "touch" );
	deepEqual( Stem("touched"), "touch" );
	deepEqual( Stem("toucher"), "toucher" );
	deepEqual( Stem("touches"), "touch" );
	deepEqual( Stem("touching"), "touch" );
	deepEqual( Stem("touchingly"), "touch" );
	deepEqual( Stem("touchstone"), "touchston" );
	deepEqual( Stem("touchwood"), "touchwood" );
	deepEqual( Stem("tough"), "tough" );
	deepEqual( Stem("tougher"), "tougher" );
	deepEqual( Stem("toughey"), "toughey" );
	deepEqual( Stem("toughness"), "tough" );
	deepEqual( Stem("toughy"), "toughi" );
	deepEqual( Stem("toulon"), "toulon" );
	deepEqual( Stem("tour"), "tour" );
	deepEqual( Stem("tourists"), "tourist" );
	deepEqual( Stem("tours"), "tour" );
	deepEqual( Stem("tout"), "tout" );
	deepEqual( Stem("toutes"), "tout" );
	deepEqual( Stem("touts"), "tout" );
	deepEqual( Stem("toward"), "toward" );
	deepEqual( Stem("towards"), "toward" );
	deepEqual( Stem("towed"), "tow" );
	deepEqual( Stem("towel"), "towel" );
	deepEqual( Stem("towelling"), "towel" );
	deepEqual( Stem("towels"), "towel" );
	deepEqual( Stem("tower"), "tower" );
	deepEqual( Stem("towered"), "tower" );
	deepEqual( Stem("towering"), "tower" );
	deepEqual( Stem("towers"), "tower" );
	deepEqual( Stem("town"), "town" );
	deepEqual( Stem("towns"), "town" );
	deepEqual( Stem("township"), "township" );
	deepEqual( Stem("townsman"), "townsman" );
	deepEqual( Stem("townsmen"), "townsmen" );
	deepEqual( Stem("townspeople"), "townspeopl" );
	deepEqual( Stem("toxodon"), "toxodon" );
	deepEqual( Stem("toy"), "toy" );
	deepEqual( Stem("toyed"), "toy" );
	deepEqual( Stem("toying"), "toy" );
	deepEqual( Stem("toys"), "toy" );
	deepEqual( Stem("trace"), "trace" );
	deepEqual( Stem("traceable"), "traceabl" );
	deepEqual( Stem("traced"), "trace" );
	deepEqual( Stem("tracery"), "traceri" );
	deepEqual( Stem("traces"), "trace" );
	deepEqual( Stem("tracing"), "trace" );
	deepEqual( Stem("track"), "track" );
	deepEqual( Stem("tracked"), "track" );
	deepEqual( Stem("tracking"), "track" );
	deepEqual( Stem("trackless"), "trackless" );
	deepEqual( Stem("tracks"), "track" );
	deepEqual( Stem("tract"), "tract" );
	deepEqual( Stem("tractable"), "tractabl" );
	deepEqual( Stem("tracts"), "tract" );
	deepEqual( Stem("trade"), "trade" );
	deepEqual( Stem("trader"), "trader" );
	deepEqual( Stem("traders"), "trader" );
	deepEqual( Stem("trades"), "trade" );
	deepEqual( Stem("tradesfolk"), "tradesfolk" );
	deepEqual( Stem("tradesman"), "tradesman" );
	deepEqual( Stem("tradesmen"), "tradesmen" );
	deepEqual( Stem("tradespeople"), "tradespeopl" );
	deepEqual( Stem("trading"), "trade" );
	deepEqual( Stem("tradition"), "tradit" );
	deepEqual( Stem("traditional"), "tradit" );
	deepEqual( Stem("traditionally"), "tradit" );
	deepEqual( Stem("traditions"), "tradit" );
	deepEqual( Stem("traducer"), "traduc" );
	deepEqual( Stem("traducers"), "traduc" );
	deepEqual( Stem("trafalgar"), "trafalgar" );
	deepEqual( Stem("traffic"), "traffic" );
	deepEqual( Stem("tragedian"), "tragedian" );
	deepEqual( Stem("tragedies"), "tragedi" );
	deepEqual( Stem("tragedy"), "tragedi" );
	deepEqual( Stem("tragic"), "tragic" );
	deepEqual( Stem("tragical"), "tragic" );
	deepEqual( Stem("trail"), "trail" );
	deepEqual( Stem("trailed"), "trail" );
	deepEqual( Stem("trailing"), "trail" );
	deepEqual( Stem("trails"), "trail" );
	deepEqual( Stem("train"), "train" );
	deepEqual( Stem("trained"), "train" );
	deepEqual( Stem("trainer"), "trainer" );
	deepEqual( Stem("training"), "train" );
	deepEqual( Stem("trains"), "train" );
	deepEqual( Stem("trait"), "trait" );
	deepEqual( Stem("traitent"), "traitent" );
	deepEqual( Stem("traitor"), "traitor" );
	deepEqual( Stem("traitorous"), "traitor" );
	deepEqual( Stem("traitors"), "traitor" );
	deepEqual( Stem("traits"), "trait" );
	deepEqual( Stem("trammels"), "trammel" );
	deepEqual( Stem("tramp"), "tramp" );
	deepEqual( Stem("tramped"), "tramp" );
	deepEqual( Stem("tramping"), "tramp" );
	deepEqual( Stem("trample"), "trampl" );
	deepEqual( Stem("trampled"), "trampl" );
	deepEqual( Stem("trampling"), "trampl" );
	deepEqual( Stem("tramps"), "tramp" );
	deepEqual( Stem("trance"), "tranc" );
	deepEqual( Stem("tranquil"), "tranquil" );
	deepEqual( Stem("tranquillity"), "tranquil" );
	deepEqual( Stem("tranquillize"), "tranquil" );
	deepEqual( Stem("tranquillized"), "tranquil" );
	deepEqual( Stem("tranquilly"), "tranquilli" );
	deepEqual( Stem("trans"), "tran" );
	deepEqual( Stem("transact"), "transact" );
	deepEqual( Stem("transacted"), "transact" );
	deepEqual( Stem("transaction"), "transact" );
	deepEqual( Stem("transactions"), "transact" );
	deepEqual( Stem("transcendent"), "transcend" );
	deepEqual( Stem("transfer"), "transfer" );
	deepEqual( Stem("transferred"), "transfer" );
	deepEqual( Stem("transferring"), "transfer" );
	deepEqual( Stem("transfers"), "transfer" );
	deepEqual( Stem("transfigured"), "transfigur" );
	deepEqual( Stem("transfixed"), "transfix" );
	deepEqual( Stem("transform"), "transform" );
	deepEqual( Stem("transformation"), "transform" );
	deepEqual( Stem("transformed"), "transform" );
	deepEqual( Stem("transgress"), "transgress" );
	deepEqual( Stem("transgressed"), "transgress" );
	deepEqual( Stem("transgressing"), "transgress" );
	deepEqual( Stem("transgression"), "transgress" );
	deepEqual( Stem("transient"), "transient" );
	deepEqual( Stem("transit"), "transit" );
	deepEqual( Stem("transition"), "transit" );
	deepEqual( Stem("transitory"), "transitori" );
	deepEqual( Stem("translate"), "translat" );
	deepEqual( Stem("translated"), "translat" );
	deepEqual( Stem("translating"), "translat" );
	deepEqual( Stem("translation"), "translat" );
	deepEqual( Stem("translator"), "translat" );
	deepEqual( Stem("translucency"), "transluc" );
	deepEqual( Stem("transmission"), "transmiss" );
	deepEqual( Stem("transmits"), "transmit" );
	deepEqual( Stem("transmitted"), "transmit" );
	deepEqual( Stem("transmutes"), "transmut" );
	deepEqual( Stem("transparency"), "transpar" );
	deepEqual( Stem("transparenfly"), "transparenfli" );
	deepEqual( Stem("transparent"), "transpar" );
	deepEqual( Stem("transpire"), "transpir" );
	deepEqual( Stem("transpired"), "transpir" );
	deepEqual( Stem("transplant"), "transplant" );
	deepEqual( Stem("transplanted"), "transplant" );
	deepEqual( Stem("transplanting"), "transplant" );
	deepEqual( Stem("transport"), "transport" );
	deepEqual( Stem("transportable"), "transport" );
	deepEqual( Stem("transportal"), "transport" );
	deepEqual( Stem("transportation"), "transport" );
	deepEqual( Stem("transported"), "transport" );
	deepEqual( Stem("transporting"), "transport" );
	deepEqual( Stem("transports"), "transport" );
	deepEqual( Stem("transposing"), "transpos" );
	deepEqual( Stem("transverse"), "transvers" );
	deepEqual( Stem("transversely"), "transvers" );
	deepEqual( Stem("trap"), "trap" );
	deepEqual( Stem("trappe"), "trapp" );
	deepEqual( Stem("trapped"), "trap" );
	deepEqual( Stem("trappings"), "trap" );
	deepEqual( Stem("traps"), "trap" );
	deepEqual( Stem("trash"), "trash" );
	deepEqual( Stem("trashy"), "trashi" );
	deepEqual( Stem("travel"), "travel" );
	deepEqual( Stem("travelers"), "travel" );
	deepEqual( Stem("travelled"), "travel" );
	deepEqual( Stem("traveller"), "travel" );
	deepEqual( Stem("travellers"), "travel" );
	deepEqual( Stem("travelling"), "travel" );
	deepEqual( Stem("travels"), "travel" );
	deepEqual( Stem("traverse"), "travers" );
	deepEqual( Stem("traversed"), "travers" );
	deepEqual( Stem("traversia"), "traversia" );
	deepEqual( Stem("traversing"), "travers" );
	deepEqual( Stem("travertin"), "travertin" );
	deepEqual( Stem("tray"), "tray" );
	deepEqual( Stem("trays"), "tray" );
	deepEqual( Stem("treaces"), "treac" );
	deepEqual( Stem("treacherous"), "treacher" );
	deepEqual( Stem("treachery"), "treacheri" );
	deepEqual( Stem("treacle"), "treacl" );
	deepEqual( Stem("treacled"), "treacl" );
	deepEqual( Stem("tread"), "tread" );
	deepEqual( Stem("treadin"), "treadin" );
	deepEqual( Stem("treading"), "tread" );
	deepEqual( Stem("treadmills"), "treadmil" );
	deepEqual( Stem("treads"), "tread" );
	deepEqual( Stem("treason"), "treason" );
	deepEqual( Stem("treasur"), "treasur" );
	deepEqual( Stem("treasure"), "treasur" );
	deepEqual( Stem("treasured"), "treasur" );
	deepEqual( Stem("treasures"), "treasur" );
	deepEqual( Stem("treasuring"), "treasur" );
	deepEqual( Stem("treasury"), "treasuri" );
	deepEqual( Stem("treat"), "treat" );
	deepEqual( Stem("treated"), "treat" );
	deepEqual( Stem("treating"), "treat" );
	deepEqual( Stem("treatise"), "treatis" );
	deepEqual( Stem("treatises"), "treatis" );
	deepEqual( Stem("treatment"), "treatment" );
	deepEqual( Stem("treats"), "treat" );
	deepEqual( Stem("treaty"), "treati" );
	deepEqual( Stem("treble"), "trebl" );
	deepEqual( Stem("trebled"), "trebl" );
	deepEqual( Stem("tree"), "tree" );
	deepEqual( Stem("trees"), "tree" );
	deepEqual( Stem("trellis"), "trelli" );
	deepEqual( Stem("trellised"), "trellis" );
	deepEqual( Stem("tremble"), "trembl" );
	deepEqual( Stem("trembled"), "trembl" );
	deepEqual( Stem("trembles"), "trembl" );
	deepEqual( Stem("trembling"), "trembl" );
	deepEqual( Stem("tremblingly"), "trembl" );
	deepEqual( Stem("tremblings"), "trembl" );
	deepEqual( Stem("tremendous"), "tremend" );
	deepEqual( Stem("tremendously"), "tremend" );
	deepEqual( Stem("tremenjous"), "tremenj" );
	deepEqual( Stem("tremor"), "tremor" );
	deepEqual( Stem("tremors"), "tremor" );
	deepEqual( Stem("tremulous"), "tremul" );
	deepEqual( Stem("tremulously"), "tremul" );
	deepEqual( Stem("trenchant"), "trenchant" );
	deepEqual( Stem("trenched"), "trench" );
	deepEqual( Stem("trenches"), "trench" );
	deepEqual( Stem("trenching"), "trench" );
	deepEqual( Stem("trenham"), "trenham" );
	deepEqual( Stem("trepanned"), "trepan" );
	deepEqual( Stem("trepidation"), "trepid" );
	deepEqual( Stem("tres"), "tres" );
	deepEqual( Stem("trespass"), "trespass" );
	deepEqual( Stem("tress"), "tress" );
	deepEqual( Stem("tresses"), "tress" );
	deepEqual( Stem("trial"), "trial" );
	deepEqual( Stem("trials"), "trial" );
	deepEqual( Stem("triangle"), "triangl" );
	deepEqual( Stem("triangular"), "triangular" );
	deepEqual( Stem("triangularity"), "triangular" );
	deepEqual( Stem("tribe"), "tribe" );
	deepEqual( Stem("tribes"), "tribe" );
	deepEqual( Stem("tribulation"), "tribul" );
	deepEqual( Stem("tributaries"), "tributari" );
	deepEqual( Stem("tributary"), "tributari" );
	deepEqual( Stem("tribute"), "tribut" );
	deepEqual( Stem("trice"), "trice" );
	deepEqual( Stem("trichodactylus"), "trichodactylus" );
	deepEqual( Stem("trichodesmium"), "trichodesmium" );
	deepEqual( Stem("trichomanes"), "trichoman" );
	deepEqual( Stem("trick"), "trick" );
	deepEqual( Stem("tricked"), "trick" );
	deepEqual( Stem("trickery"), "trickeri" );
	deepEqual( Stem("trickled"), "trickl" );
	deepEqual( Stem("trickles"), "trickl" );
	deepEqual( Stem("trickling"), "trickl" );
	deepEqual( Stem("tricks"), "trick" );
	deepEqual( Stem("tricksters"), "trickster" );
	deepEqual( Stem("tried"), "tri" );
	deepEqual( Stem("triermain"), "triermain" );
	deepEqual( Stem("tries"), "tri" );
	deepEqual( Stem("trifasciatus"), "trifasciatus" );
	deepEqual( Stem("trifle"), "trifl" );
	deepEqual( Stem("trifled"), "trifl" );
	deepEqual( Stem("trifles"), "trifl" );
	deepEqual( Stem("trifling"), "trifl" );
	deepEqual( Stem("trigger"), "trigger" );
	deepEqual( Stem("trigonocephalus"), "trigonocephalus" );
	deepEqual( Stem("trigonometry"), "trigonometri" );
	deepEqual( Stem("trigonomical"), "trigonom" );
	deepEqual( Stem("trigonomics"), "trigonom" );
	deepEqual( Stem("trilled"), "trill" );
	deepEqual( Stem("trilling"), "trill" );
	deepEqual( Stem("trim"), "trim" );
	deepEqual( Stem("trimly"), "trim" );
	deepEqual( Stem("trimmed"), "trim" );
	deepEqual( Stem("trimmers"), "trimmer" );
	deepEqual( Stem("trimming"), "trim" );
	deepEqual( Stem("trimmings"), "trim" );
	deepEqual( Stem("trinity"), "triniti" );
	deepEqual( Stem("trinket"), "trinket" );
	deepEqual( Stem("trinkets"), "trinket" );
	deepEqual( Stem("trio"), "trio" );
	deepEqual( Stem("trip"), "trip" );
	deepEqual( Stem("tripod"), "tripod" );
	deepEqual( Stem("tripods"), "tripod" );
	deepEqual( Stem("tripped"), "trip" );
	deepEqual( Stem("tripping"), "trip" );
	deepEqual( Stem("trippingly"), "trip" );
	deepEqual( Stem("tristan"), "tristan" );
	deepEqual( Stem("tristram"), "tristram" );
	deepEqual( Stem("triturated"), "tritur" );
	deepEqual( Stem("triumph"), "triumph" );
	deepEqual( Stem("triumphal"), "triumphal" );
	deepEqual( Stem("triumphant"), "triumphant" );
	deepEqual( Stem("triumphantly"), "triumphant" );
	deepEqual( Stem("triumphed"), "triumph" );
	deepEqual( Stem("triumphing"), "triumph" );
	deepEqual( Stem("triumphs"), "triumph" );
	deepEqual( Stem("triumvirate"), "triumvir" );
	deepEqual( Stem("trivets"), "trivet" );
	deepEqual( Stem("trivial"), "trivial" );
	deepEqual( Stem("trivialities"), "trivial" );
	deepEqual( Stem("trochi"), "trochi" );
	deepEqual( Stem("trochilus"), "trochilus" );
	deepEqual( Stem("trochus"), "trochus" );
	deepEqual( Stem("trod"), "trod" );
	deepEqual( Stem("trodden"), "trodden" );
	deepEqual( Stem("troifling"), "troifl" );
	deepEqual( Stem("trois"), "troi" );
	deepEqual( Stem("trolling"), "troll" );
	deepEqual( Stem("trollope"), "trollop" );
	deepEqual( Stem("troop"), "troop" );
	deepEqual( Stem("trooped"), "troop" );
	deepEqual( Stem("trooper"), "trooper" );
	deepEqual( Stem("troops"), "troop" );
	deepEqual( Stem("trophies"), "trophi" );
	deepEqual( Stem("trophy"), "trophi" );
	deepEqual( Stem("tropic"), "tropic" );
	deepEqual( Stem("tropical"), "tropic" );
	deepEqual( Stem("tropics"), "tropic" );
	deepEqual( Stem("tropillas"), "tropilla" );
	deepEqual( Stem("trot"), "trot" );
	deepEqual( Stem("trotted"), "trot" );
	deepEqual( Stem("trotting"), "trot" );
	deepEqual( Stem("trotty"), "trotti" );
	deepEqual( Stem("trouble"), "troubl" );
	deepEqual( Stem("troubled"), "troubl" );
	deepEqual( Stem("troubles"), "troubl" );
	deepEqual( Stem("troublesome"), "troublesom" );
	deepEqual( Stem("troubling"), "troubl" );
	deepEqual( Stem("troublous"), "troublous" );
	deepEqual( Stem("troughs"), "trough" );
	deepEqual( Stem("trouser"), "trouser" );
	deepEqual( Stem("trousers"), "trouser" );
	deepEqual( Stem("trousseau"), "trousseau" );
	deepEqual( Stem("trout"), "trout" );
	deepEqual( Stem("trouve"), "trouv" );
	deepEqual( Stem("trowel"), "trowel" );
	deepEqual( Stem("trowels"), "trowel" );
	deepEqual( Stem("truant"), "truant" );
	deepEqual( Stem("trudged"), "trudg" );
	deepEqual( Stem("trudges"), "trudg" );
	deepEqual( Stem("trudging"), "trudg" );
	deepEqual( Stem("true"), "true" );
	deepEqual( Stem("truer"), "truer" );
	deepEqual( Stem("truest"), "truest" );
	deepEqual( Stem("truly"), "truli" );
	deepEqual( Stem("trump"), "trump" );
	deepEqual( Stem("trumpery"), "trumperi" );
	deepEqual( Stem("trumpet"), "trumpet" );
	deepEqual( Stem("trumpeters"), "trumpet" );
	deepEqual( Stem("trumpets"), "trumpet" );
	deepEqual( Stem("trumps"), "trump" );
	deepEqual( Stem("truncate"), "truncat" );
	deepEqual( Stem("truncated"), "truncat" );
	deepEqual( Stem("truncheon"), "truncheon" );
	deepEqual( Stem("truncheons"), "truncheon" );
	deepEqual( Stem("trunk"), "trunk" );
	deepEqual( Stem("trunks"), "trunk" );
	deepEqual( Stem("trusses"), "truss" );
	deepEqual( Stem("trust"), "trust" );
	deepEqual( Stem("trusted"), "trust" );
	deepEqual( Stem("trustees"), "truste" );
	deepEqual( Stem("trustful"), "trust" );
	deepEqual( Stem("trustiest"), "trustiest" );
	deepEqual( Stem("trusting"), "trust" );
	deepEqual( Stem("trusts"), "trust" );
	deepEqual( Stem("trustworthy"), "trustworthi" );
	deepEqual( Stem("trusty"), "trusti" );
	deepEqual( Stem("truth"), "truth" );
	deepEqual( Stem("truthful"), "truth" );
	deepEqual( Stem("truthlike"), "truthlik" );
	deepEqual( Stem("truths"), "truth" );
	deepEqual( Stem("try"), "tri" );
	deepEqual( Stem("trying"), "tri" );
	deepEqual( Stem("tryst"), "tryst" );
	deepEqual( Stem("tsar"), "tsar" );
	deepEqual( Stem("tschudi"), "tschudi" );
	deepEqual( Stem("tsetup"), "tsetup" );
	deepEqual( Stem("tsubmit"), "tsubmit" );
	deepEqual( Stem("tub"), "tub" );
	deepEqual( Stem("tube"), "tube" );
	deepEqual( Stem("tubercles"), "tubercl" );
	deepEqual( Stem("tuberculata"), "tuberculata" );
	deepEqual( Stem("tubers"), "tuber" );
	deepEqual( Stem("tubes"), "tube" );
	deepEqual( Stem("tubs"), "tub" );
	deepEqual( Stem("tuck"), "tuck" );
	deepEqual( Stem("tucked"), "tuck" );
	deepEqual( Stem("tucker"), "tucker" );
	deepEqual( Stem("tuckered"), "tucker" );
	deepEqual( Stem("tucking"), "tuck" );
	deepEqual( Stem("tucks"), "tuck" );
	deepEqual( Stem("tucuman"), "tucuman" );
	deepEqual( Stem("tucutuco"), "tucutuco" );
	deepEqual( Stem("tucutucos"), "tucutuco" );
	deepEqual( Stem("tuesday"), "tuesday" );
	deepEqual( Stem("tufaceous"), "tufac" );
	deepEqual( Stem("tuff"), "tuff" );
	deepEqual( Stem("tuft"), "tuft" );
	deepEqual( Stem("tufted"), "tuft" );
	deepEqual( Stem("tufts"), "tuft" );
	deepEqual( Stem("tugged"), "tug" );
	deepEqual( Stem("tugging"), "tug" );
	deepEqual( Stem("tuition"), "tuition" );
	deepEqual( Stem("tul"), "tul" );
	deepEqual( Stem("tulip"), "tulip" );
	deepEqual( Stem("tulkinghorn"), "tulkinghorn" );
	deepEqual( Stem("tumble"), "tumbl" );
	deepEqual( Stem("tumbled"), "tumbl" );
	deepEqual( Stem("tumbler"), "tumbler" );
	deepEqual( Stem("tumblers"), "tumbler" );
	deepEqual( Stem("tumbles"), "tumbl" );
	deepEqual( Stem("tumbling"), "tumbl" );
	deepEqual( Stem("tumblings"), "tumbl" );
	deepEqual( Stem("tumbrils"), "tumbril" );
	deepEqual( Stem("tuming"), "tume" );
	deepEqual( Stem("tumley"), "tumley" );
	deepEqual( Stem("tumult"), "tumult" );
	deepEqual( Stem("tumultuous"), "tumultu" );
	deepEqual( Stem("tumultuously"), "tumultu" );
	deepEqual( Stem("tunbridge"), "tunbridg" );
	deepEqual( Stem("tune"), "tune" );
	deepEqual( Stem("tunes"), "tune" );
	deepEqual( Stem("tunic"), "tunic" );
	deepEqual( Stem("tuning"), "tune" );
	deepEqual( Stem("tunnel"), "tunnel" );
	deepEqual( Stem("tunnels"), "tunnel" );
	deepEqual( Stem("tupinieri"), "tupinieri" );
	deepEqual( Stem("tupungato"), "tupungato" );
	deepEqual( Stem("turban"), "turban" );
	deepEqual( Stem("turbans"), "turban" );
	deepEqual( Stem("turbid"), "turbid" );
	deepEqual( Stem("turbo"), "turbo" );
	deepEqual( Stem("turbulence"), "turbul" );
	deepEqual( Stem("turbulent"), "turbul" );
	deepEqual( Stem("turco"), "turco" );
	deepEqual( Stem("tureen"), "tureen" );
	deepEqual( Stem("turf"), "turf" );
	deepEqual( Stem("turgenev"), "turgenev" );
	deepEqual( Stem("turgid"), "turgid" );
	deepEqual( Stem("turing"), "ture" );
	deepEqual( Stem("turk"), "turk" );
	deepEqual( Stem("turkey"), "turkey" );
	deepEqual( Stem("turkish"), "turkish" );
	deepEqual( Stem("turks"), "turk" );
	deepEqual( Stem("turmoil"), "turmoil" );
	deepEqual( Stem("turmoils"), "turmoil" );
	deepEqual( Stem("turn"), "turn" );
	deepEqual( Stem("turnbull"), "turnbul" );
	deepEqual( Stem("turned"), "turn" );
	deepEqual( Stem("turner"), "turner" );
	deepEqual( Stem("turning"), "turn" );
	deepEqual( Stem("turnings"), "turn" );
	deepEqual( Stem("turnip"), "turnip" );
	deepEqual( Stem("turnips"), "turnip" );
	deepEqual( Stem("turnout"), "turnout" );
	deepEqual( Stem("turnpike"), "turnpik" );
	deepEqual( Stem("turns"), "turn" );
	deepEqual( Stem("turnstile"), "turnstil" );
	deepEqual( Stem("turpentining"), "turpentin" );
	deepEqual( Stem("turpin"), "turpin" );
	deepEqual( Stem("turret"), "turret" );
	deepEqual( Stem("turreted"), "turret" );
	deepEqual( Stem("turrets"), "turret" );
	deepEqual( Stem("turtle"), "turtl" );
	deepEqual( Stem("turtledoves"), "turtledov" );
	deepEqual( Stem("turtles"), "turtl" );
	deepEqual( Stem("turveydrop"), "turveydrop" );
	deepEqual( Stem("turveydrops"), "turveydrop" );
	deepEqual( Stem("turvy"), "turvi" );
	deepEqual( Stem("tusks"), "tusk" );
	deepEqual( Stem("tussocks"), "tussock" );
	deepEqual( Stem("tut"), "tut" );
	deepEqual( Stem("tutbury"), "tutburi" );
	deepEqual( Stem("tutor"), "tutor" );
	deepEqual( Stem("tw"), "tw" );
	deepEqual( Stem("twain"), "twain" );
	deepEqual( Stem("twang"), "twang" );
	deepEqual( Stem("twas"), "twas" );
	deepEqual( Stem("tweak"), "tweak" );
	deepEqual( Stem("tweaking"), "tweak" );
	deepEqual( Stem("twelfth"), "twelfth" );
	deepEqual( Stem("twelve"), "twelv" );
	deepEqual( Stem("twelvemonth"), "twelvemonth" );
	deepEqual( Stem("twelvemonths"), "twelvemonth" );
	deepEqual( Stem("twenties"), "twenti" );
	deepEqual( Stem("twentieth"), "twentieth" );
	deepEqual( Stem("twenty"), "twenti" );
	deepEqual( Stem("twice"), "twice" );
	deepEqual( Stem("twickenham"), "twickenham" );
	deepEqual( Stem("twig"), "twig" );
	deepEqual( Stem("twigs"), "twig" );
	deepEqual( Stem("twilight"), "twilight" );
	deepEqual( Stem("twin"), "twin" );
	deepEqual( Stem("twine"), "twine" );
	deepEqual( Stem("twined"), "twine" );
	deepEqual( Stem("twinge"), "twing" );
	deepEqual( Stem("twining"), "twine" );
	deepEqual( Stem("twinkle"), "twinkl" );
	deepEqual( Stem("twinkled"), "twinkl" );
	deepEqual( Stem("twinkling"), "twinkl" );
	deepEqual( Stem("twinklings"), "twinkl" );
	deepEqual( Stem("twins"), "twin" );
	deepEqual( Stem("twirl"), "twirl" );
	deepEqual( Stem("twirled"), "twirl" );
	deepEqual( Stem("twirling"), "twirl" );
	deepEqual( Stem("twirls"), "twirl" );
	deepEqual( Stem("twist"), "twist" );
	deepEqual( Stem("twisted"), "twist" );
	deepEqual( Stem("twisting"), "twist" );
	deepEqual( Stem("twistings"), "twist" );
	deepEqual( Stem("twists"), "twist" );
	deepEqual( Stem("twitch"), "twitch" );
	deepEqual( Stem("twitched"), "twitch" );
	deepEqual( Stem("twitching"), "twitch" );
	deepEqual( Stem("twitchings"), "twitch" );
	deepEqual( Stem("twitted"), "twit" );
	deepEqual( Stem("twitter"), "twitter" );
	deepEqual( Stem("twittering"), "twitter" );
	deepEqual( Stem("twixt"), "twixt" );
	deepEqual( Stem("two"), "two" );
	deepEqual( Stem("twofold"), "twofold" );
	deepEqual( Stem("twolve"), "twolv" );
	deepEqual( Stem("twonty"), "twonti" );
	deepEqual( Stem("twopence"), "twopenc" );
	deepEqual( Stem("twopenn"), "twopenn" );
	deepEqual( Stem("twopenny"), "twopenni" );
	deepEqual( Stem("twos"), "twos" );
	deepEqual( Stem("twould"), "twould" );
	deepEqual( Stem("ty"), "ty" );
	deepEqual( Stem("tybalt"), "tybalt" );
	deepEqual( Stem("tyerman"), "tyerman" );
	deepEqual( Stem("tying"), "tie" );
	deepEqual( Stem("tyler"), "tyler" );
	deepEqual( Stem("tylerish"), "tylerish" );
	deepEqual( Stem("type"), "type" );
	deepEqual( Stem("types"), "type" );
	deepEqual( Stem("typhus"), "typhus" );
	deepEqual( Stem("typical"), "typic" );
	deepEqual( Stem("tyrannical"), "tyrann" );
	deepEqual( Stem("tyrannized"), "tyrann" );
	deepEqual( Stem("tyrannus"), "tyrannus" );
	deepEqual( Stem("tyranny"), "tyranni" );
	deepEqual( Stem("tyrant"), "tyrant" );
	deepEqual( Stem("tyrants"), "tyrant" );
	deepEqual( Stem("tyrolese"), "tyroles" );
	deepEqual( Stem("tyrone"), "tyron" );
	deepEqual( Stem("u"), "u" );
	deepEqual( Stem("ud"), "ud" );
	deepEqual( Stem("ugh"), "ugh" );
	deepEqual( Stem("uglier"), "uglier" );
	deepEqual( Stem("ugliness"), "ugli" );
	deepEqual( Stem("ugly"), "ugli" );
	deepEqual( Stem("uji"), "uji" );
	deepEqual( Stem("ulloa"), "ulloa" );
	deepEqual( Stem("ulterior"), "ulterior" );
	deepEqual( Stem("ultimate"), "ultim" );
	deepEqual( Stem("ultimately"), "ultim" );
	deepEqual( Stem("ultra"), "ultra" );
	deepEqual( Stem("ulvae"), "ulva" );
	deepEqual( Stem("um"), "um" );
	deepEqual( Stem("umb"), "umb" );
	deepEqual( Stem("umbilical"), "umbil" );
	deepEqual( Stem("umbrageous"), "umbrag" );
	deepEqual( Stem("umbrella"), "umbrella" );
	deepEqual( Stem("umbrellas"), "umbrella" );
	deepEqual( Stem("umsonst"), "umsonst" );
	deepEqual( Stem("un"), "un" );
	deepEqual( Stem("unabashed"), "unabash" );
	deepEqual( Stem("unabated"), "unab" );
	deepEqual( Stem("unable"), "unabl" );
	deepEqual( Stem("unaccompanied"), "unaccompani" );
	deepEqual( Stem("unaccountable"), "unaccount" );
	deepEqual( Stem("unaccountably"), "unaccount" );
	deepEqual( Stem("unaccustomed"), "unaccustom" );
	deepEqual( Stem("unacknowledged"), "unacknowledg" );
	deepEqual( Stem("unacquainted"), "unacquaint" );
	deepEqual( Stem("unadorned"), "unadorn" );
	deepEqual( Stem("unaffected"), "unaffect" );
	deepEqual( Stem("unaffectedly"), "unaffect" );
	deepEqual( Stem("unaided"), "unaid" );
	deepEqual( Stem("unallowable"), "unallow" );
	deepEqual( Stem("unalloyed"), "unalloy" );
	deepEqual( Stem("unalluring"), "unallur" );
	deepEqual( Stem("unaltered"), "unalt" );
	deepEqual( Stem("unambitious"), "unambiti" );
	deepEqual( Stem("unanimous"), "unanim" );
	deepEqual( Stem("unanimously"), "unanim" );
	deepEqual( Stem("unanswerable"), "unanswer" );
	deepEqual( Stem("unanswered"), "unansw" );
	deepEqual( Stem("unanue"), "unanu" );
	deepEqual( Stem("unappeasable"), "unappeas" );
	deepEqual( Stem("unappeased"), "unappeas" );
	deepEqual( Stem("unapproachable"), "unapproach" );
	deepEqual( Stem("unasked"), "unask" );
	deepEqual( Stem("unassailable"), "unassail" );
	deepEqual( Stem("unassisted"), "unassist" );
	deepEqual( Stem("unassuming"), "unassum" );
	deepEqual( Stem("unattached"), "unattach" );
	deepEqual( Stem("unattainable"), "unattain" );
	deepEqual( Stem("unattempted"), "unattempt" );
	deepEqual( Stem("unavailing"), "unavail" );
	deepEqual( Stem("unavailingly"), "unavail" );
	deepEqual( Stem("unavoidable"), "unavoid" );
	deepEqual( Stem("unavoidably"), "unavoid" );
	deepEqual( Stem("unaware"), "unawar" );
	deepEqual( Stem("unawares"), "unawar" );
	deepEqual( Stem("unbear"), "unbear" );
	deepEqual( Stem("unbearable"), "unbear" );
	deepEqual( Stem("unbearably"), "unbear" );
	deepEqual( Stem("unbecoming"), "unbecom" );
	deepEqual( Stem("unbelieving"), "unbeliev" );
	deepEqual( Stem("unbending"), "unbend" );
	deepEqual( Stem("unbent"), "unbent" );
	deepEqual( Stem("unbiassed"), "unbiass" );
	deepEqual( Stem("unbidden"), "unbidden" );
	deepEqual( Stem("unblemished"), "unblemish" );
	deepEqual( Stem("unblotted"), "unblot" );
	deepEqual( Stem("unblushing"), "unblush" );
	deepEqual( Stem("unblushingly"), "unblush" );
	deepEqual( Stem("unbolted"), "unbolt" );
	deepEqual( Stem("unbonneted"), "unbonnet" );
	deepEqual( Stem("unborn"), "unborn" );
	deepEqual( Stem("unbound"), "unbound" );
	deepEqual( Stem("unbounded"), "unbound" );
	deepEqual( Stem("unbroken"), "unbroken" );
	deepEqual( Stem("unbrushed"), "unbrush" );
	deepEqual( Stem("unburdening"), "unburden" );
	deepEqual( Stem("unburied"), "unburi" );
	deepEqual( Stem("unbusiness"), "unbusi" );
	deepEqual( Stem("unbuttoned"), "unbutton" );
	deepEqual( Stem("uncalculating"), "uncalcul" );
	deepEqual( Stem("uncalled"), "uncal" );
	deepEqual( Stem("uncandid"), "uncandid" );
	deepEqual( Stem("uncanny"), "uncanni" );
	deepEqual( Stem("uncared"), "uncar" );
	deepEqual( Stem("uncarried"), "uncarri" );
	deepEqual( Stem("unceasing"), "unceas" );
	deepEqual( Stem("unceasingly"), "unceas" );
	deepEqual( Stem("uncensorious"), "uncensori" );
	deepEqual( Stem("unceremonious"), "unceremoni" );
	deepEqual( Stem("unceremoniously"), "unceremoni" );
	deepEqual( Stem("uncertain"), "uncertain" );
	deepEqual( Stem("uncertainly"), "uncertain" );
	deepEqual( Stem("uncertainties"), "uncertainti" );
	deepEqual( Stem("uncertainty"), "uncertainti" );
	deepEqual( Stem("unchain"), "unchain" );
	deepEqual( Stem("unchallengeable"), "unchalleng" );
	deepEqual( Stem("unchangeable"), "unchang" );
	deepEqual( Stem("unchangeably"), "unchang" );
	deepEqual( Stem("unchanged"), "unchang" );
	deepEqual( Stem("unchanging"), "unchang" );
	deepEqual( Stem("uncharitable"), "uncharit" );
	deepEqual( Stem("unchastened"), "unchasten" );
	deepEqual( Stem("unchecked"), "uncheck" );
	deepEqual( Stem("uncherished"), "uncherish" );
	deepEqual( Stem("unchild"), "unchild" );
	deepEqual( Stem("unchildish"), "unchildish" );
	deepEqual( Stem("unchildlike"), "unchildlik" );
	deepEqual( Stem("uncivil"), "uncivil" );
	deepEqual( Stem("uncivilized"), "uncivil" );
	deepEqual( Stem("unclaimed"), "unclaim" );
	deepEqual( Stem("unclasp"), "unclasp" );
	deepEqual( Stem("unclasped"), "unclasp" );
	deepEqual( Stem("unclasping"), "unclasp" );
	deepEqual( Stem("unclassified"), "unclassifi" );
	deepEqual( Stem("uncle"), "uncl" );
	deepEqual( Stem("unclean"), "unclean" );
	deepEqual( Stem("uncleanliness"), "uncleanli" );
	deepEqual( Stem("uncleanness"), "unclean" );
	deepEqual( Stem("uncleared"), "unclear" );
	deepEqual( Stem("uncles"), "uncl" );
	deepEqual( Stem("unclose"), "unclos" );
	deepEqual( Stem("unclouded"), "uncloud" );
	deepEqual( Stem("uncoile"), "uncoil" );
	deepEqual( Stem("uncoils"), "uncoil" );
	deepEqual( Stem("uncomfortable"), "uncomfort" );
	deepEqual( Stem("uncomfortably"), "uncomfort" );
	deepEqual( Stem("uncommon"), "uncommon" );
	deepEqual( Stem("uncommonly"), "uncommon" );
	deepEqual( Stem("uncommunicative"), "uncommun" );
	deepEqual( Stem("uncompanionable"), "uncompanion" );
	deepEqual( Stem("uncomplaining"), "uncomplain" );
	deepEqual( Stem("uncompleted"), "uncomplet" );
	deepEqual( Stem("uncomplimentary"), "uncomplimentari" );
	deepEqual( Stem("uncomprehended"), "uncomprehend" );
	deepEqual( Stem("uncompressed"), "uncompress" );
	deepEqual( Stem("uncompromising"), "uncompromis" );
	deepEqual( Stem("unconcealed"), "unconc" );
	deepEqual( Stem("unconcern"), "unconcern" );
	deepEqual( Stem("unconcerned"), "unconcern" );
	deepEqual( Stem("unconcernedly"), "unconcern" );
	deepEqual( Stem("unconfinable"), "unconfin" );
	deepEqual( Stem("unconfined"), "unconfin" );
	deepEqual( Stem("uncongenial"), "uncongeni" );
	deepEqual( Stem("unconnected"), "unconnect" );
	deepEqual( Stem("unconquerable"), "unconquer" );
	deepEqual( Stem("unconscious"), "unconsci" );
	deepEqual( Stem("unconsciously"), "unconsci" );
	deepEqual( Stem("unconsciousness"), "unconsci" );
	deepEqual( Stem("unconsidered"), "unconsid" );
	deepEqual( Stem("unconstitutional"), "unconstitut" );
	deepEqual( Stem("unconstitutionally"), "unconstitut" );
	deepEqual( Stem("unconstrained"), "unconstrain" );
	deepEqual( Stem("uncontaminated"), "uncontamin" );
	deepEqual( Stem("uncontradicted"), "uncontradict" );
	deepEqual( Stem("uncontrollable"), "uncontrol" );
	deepEqual( Stem("uncontrollably"), "uncontrol" );
	deepEqual( Stem("uncontrolled"), "uncontrol" );
	deepEqual( Stem("unconvinced"), "unconvinc" );
	deepEqual( Stem("uncorked"), "uncork" );
	deepEqual( Stem("uncourteous"), "uncourt" );
	deepEqual( Stem("uncouth"), "uncouth" );
	deepEqual( Stem("uncover"), "uncov" );
	deepEqual( Stem("uncovered"), "uncov" );
	deepEqual( Stem("uncritically"), "uncrit" );
	deepEqual( Stem("uncrossed"), "uncross" );
	deepEqual( Stem("uncrossing"), "uncross" );
	deepEqual( Stem("unction"), "unction" );
	deepEqual( Stem("uncultivated"), "uncultiv" );
	deepEqual( Stem("uncut"), "uncut" );
	deepEqual( Stem("und"), "und" );
	deepEqual( Stem("undaunted"), "undaunt" );
	deepEqual( Stem("undeceive"), "undec" );
	deepEqual( Stem("undeceived"), "undeceiv" );
	deepEqual( Stem("undeceiving"), "undeceiv" );
	deepEqual( Stem("undecided"), "undecid" );
	deepEqual( Stem("undefaced"), "undefac" );
	deepEqual( Stem("undefinable"), "undefin" );
	deepEqual( Stem("undefined"), "undefin" );
	deepEqual( Stem("undeniable"), "undeni" );
	deepEqual( Stem("under"), "under" );
	deepEqual( Stem("underbred"), "underbr" );
	deepEqual( Stem("undercliff"), "undercliff" );
	deepEqual( Stem("underclothes"), "undercloth" );
	deepEqual( Stem("underdone"), "underdon" );
	deepEqual( Stem("underfoot"), "underfoot" );
	deepEqual( Stem("undergo"), "undergo" );
	deepEqual( Stem("undergoes"), "undergo" );
	deepEqual( Stem("undergoing"), "undergo" );
	deepEqual( Stem("undergone"), "undergon" );
	deepEqual( Stem("undergraduate"), "undergradu" );
	deepEqual( Stem("underground"), "underground" );
	deepEqual( Stem("underhand"), "underhand" );
	deepEqual( Stem("underhanded"), "underhand" );
	deepEqual( Stem("underling"), "underl" );
	deepEqual( Stem("underlip"), "underlip" );
	deepEqual( Stem("underlying"), "under" );
	deepEqual( Stem("undermine"), "undermin" );
	deepEqual( Stem("undermined"), "undermin" );
	deepEqual( Stem("undermining"), "undermin" );
	deepEqual( Stem("underneath"), "underneath" );
	deepEqual( Stem("underrated"), "underr" );
	deepEqual( Stem("underscored"), "underscor" );
	deepEqual( Stem("undersecretary"), "undersecretari" );
	deepEqual( Stem("underserving"), "underserv" );
	deepEqual( Stem("undersoil"), "undersoil" );
	deepEqual( Stem("understand"), "understand" );
	deepEqual( Stem("understanding"), "understand" );
	deepEqual( Stem("understands"), "understand" );
	deepEqual( Stem("understood"), "understood" );
	deepEqual( Stem("understrapper"), "understrapp" );
	deepEqual( Stem("understrappers"), "understrapp" );
	deepEqual( Stem("undertake"), "undertak" );
	deepEqual( Stem("undertaken"), "undertaken" );
	deepEqual( Stem("undertaker"), "undertak" );
	deepEqual( Stem("undertakers"), "undertak" );
	deepEqual( Stem("undertakes"), "undertak" );
	deepEqual( Stem("undertaking"), "undertak" );
	deepEqual( Stem("undertakings"), "undertak" );
	deepEqual( Stem("undertone"), "underton" );
	deepEqual( Stem("undertook"), "undertook" );
	deepEqual( Stem("undervalue"), "undervalu" );
	deepEqual( Stem("underwent"), "underw" );
	deepEqual( Stem("underwood"), "underwood" );
	deepEqual( Stem("undescribed"), "undescrib" );
	deepEqual( Stem("undeserved"), "undeserv" );
	deepEqual( Stem("undeservedly"), "undeserv" );
	deepEqual( Stem("undesigning"), "undesign" );
	deepEqual( Stem("undesirable"), "undesir" );
	deepEqual( Stem("undetermined"), "undetermin" );
	deepEqual( Stem("undeviating"), "undevi" );
	deepEqual( Stem("undid"), "undid" );
	deepEqual( Stem("undignified"), "undignifi" );
	deepEqual( Stem("undiminished"), "undiminish" );
	deepEqual( Stem("undimmed"), "undim" );
	deepEqual( Stem("undisfigured"), "undisfigur" );
	deepEqual( Stem("undisguisable"), "undisguis" );
	deepEqual( Stem("undisguised"), "undisguis" );
	deepEqual( Stem("undisguisedly"), "undisguis" );
	deepEqual( Stem("undismayed"), "undismay" );
	deepEqual( Stem("undisposed"), "undispos" );
	deepEqual( Stem("undistinguishable"), "undistinguish" );
	deepEqual( Stem("undisturbed"), "undisturb" );
	deepEqual( Stem("undivided"), "undivid" );
	deepEqual( Stem("undivulged"), "undivulg" );
	deepEqual( Stem("undo"), "undo" );
	deepEqual( Stem("undoing"), "undo" );
	deepEqual( Stem("undone"), "undon" );
	deepEqual( Stem("undoubted"), "undoubt" );
	deepEqual( Stem("undoubtedly"), "undoubt" );
	deepEqual( Stem("undrained"), "undrain" );
	deepEqual( Stem("undraws"), "undraw" );
	deepEqual( Stem("undress"), "undress" );
	deepEqual( Stem("undressed"), "undress" );
	deepEqual( Stem("undressing"), "undress" );
	deepEqual( Stem("undue"), "undu" );
	deepEqual( Stem("undulating"), "undul" );
	deepEqual( Stem("undulation"), "undul" );
	deepEqual( Stem("undulations"), "undul" );
	deepEqual( Stem("undulatory"), "undulatori" );
	deepEqual( Stem("undutiful"), "unduti" );
	deepEqual( Stem("undying"), "undi" );
	deepEqual( Stem("une"), "une" );
	deepEqual( Stem("unearthed"), "unearth" );
	deepEqual( Stem("unearthly"), "unearth" );
	deepEqual( Stem("uneasily"), "uneasili" );
	deepEqual( Stem("uneasiness"), "uneasi" );
	deepEqual( Stem("uneasy"), "uneasi" );
	deepEqual( Stem("uneatable"), "uneat" );
	deepEqual( Stem("uneducated"), "uneduc" );
	deepEqual( Stem("unembarrassed"), "unembarrass" );
	deepEqual( Stem("unemployed"), "unemploy" );
	deepEqual( Stem("unencumbered"), "unencumb" );
	deepEqual( Stem("unendurable"), "unendur" );
	deepEqual( Stem("unenviable"), "unenvi" );
	deepEqual( Stem("unequal"), "unequ" );
	deepEqual( Stem("unequalled"), "unequal" );
	deepEqual( Stem("unequally"), "unequ" );
	deepEqual( Stem("unequivocal"), "unequivoc" );
	deepEqual( Stem("unequivocally"), "unequivoc" );
	deepEqual( Stem("unerring"), "uner" );
	deepEqual( Stem("unes"), "une" );
	deepEqual( Stem("uneven"), "uneven" );
	deepEqual( Stem("uneventful"), "unev" );
	deepEqual( Stem("unexamined"), "unexamin" );
	deepEqual( Stem("unexampled"), "unexampl" );
	deepEqual( Stem("unexceptionable"), "unexception" );
	deepEqual( Stem("unexciting"), "unexcit" );
	deepEqual( Stem("unexpected"), "unexpect" );
	deepEqual( Stem("unexpectedly"), "unexpect" );
	deepEqual( Stem("unexplained"), "unexplain" );
	deepEqual( Stem("unexplored"), "unexplor" );
	deepEqual( Stem("unexpressed"), "unexpress" );
	deepEqual( Stem("unfailing"), "unfail" );
	deepEqual( Stem("unfair"), "unfair" );
	deepEqual( Stem("unfairly"), "unfair" );
	deepEqual( Stem("unfaithfulness"), "unfaith" );
	deepEqual( Stem("unfamiliar"), "unfamiliar" );
	deepEqual( Stem("unfamiliarity"), "unfamiliar" );
	deepEqual( Stem("unfashionable"), "unfashion" );
	deepEqual( Stem("unfastened"), "unfasten" );
	deepEqual( Stem("unfathomable"), "unfathom" );
	deepEqual( Stem("unfavourable"), "unfavour" );
	deepEqual( Stem("unfeeling"), "unfeel" );
	deepEqual( Stem("unfeelingly"), "unfeel" );
	deepEqual( Stem("unfeigned"), "unfeign" );
	deepEqual( Stem("unfeignedly"), "unfeign" );
	deepEqual( Stem("unfeminine"), "unfeminin" );
	deepEqual( Stem("unfilled"), "unfil" );
	deepEqual( Stem("unfinished"), "unfinish" );
	deepEqual( Stem("unfit"), "unfit" );
	deepEqual( Stem("unfitness"), "unfit" );
	deepEqual( Stem("unfitted"), "unfit" );
	deepEqual( Stem("unfitting"), "unfit" );
	deepEqual( Stem("unflinching"), "unflinch" );
	deepEqual( Stem("unflinchingly"), "unflinch" );
	deepEqual( Stem("unfold"), "unfold" );
	deepEqual( Stem("unfolded"), "unfold" );
	deepEqual( Stem("unfolding"), "unfold" );
	deepEqual( Stem("unfolds"), "unfold" );
	deepEqual( Stem("unforeseen"), "unforeseen" );
	deepEqual( Stem("unforgiving"), "unforgiv" );
	deepEqual( Stem("unformed"), "unform" );
	deepEqual( Stem("unfort"), "unfort" );
	deepEqual( Stem("unfortnet"), "unfortnet" );
	deepEqual( Stem("unfortunate"), "unfortun" );
	deepEqual( Stem("unfortunately"), "unfortun" );
	deepEqual( Stem("unfortunates"), "unfortun" );
	deepEqual( Stem("unfounded"), "unfound" );
	deepEqual( Stem("unfrequent"), "unfrequ" );
	deepEqual( Stem("unfrequented"), "unfrequ" );
	deepEqual( Stem("unfrequently"), "unfrequ" );
	deepEqual( Stem("unfresh"), "unfresh" );
	deepEqual( Stem("unfriended"), "unfriend" );
	deepEqual( Stem("unfriendly"), "unfriend" );
	deepEqual( Stem("unfulfilled"), "unfulfil" );
	deepEqual( Stem("unfurled"), "unfurl" );
	deepEqual( Stem("ungainly"), "ungain" );
	deepEqual( Stem("ungallant"), "ungal" );
	deepEqual( Stem("ungenerous"), "ungener" );
	deepEqual( Stem("ungenial"), "ungeni" );
	deepEqual( Stem("ungenteel"), "ungenteel" );
	deepEqual( Stem("ungentlemanly"), "ungentleman" );
	deepEqual( Stem("ungirdles"), "ungirdl" );
	deepEqual( Stem("ungovernable"), "ungovern" );
	deepEqual( Stem("ungracious"), "ungraci" );
	deepEqual( Stem("ungraciously"), "ungraci" );
	deepEqual( Stem("ungraciousness"), "ungraci" );
	deepEqual( Stem("ungrateful"), "ungrat" );
	deepEqual( Stem("ungratefully"), "ungrat" );
	deepEqual( Stem("ungratified"), "ungratifi" );
	deepEqual( Stem("ungrown"), "ungrown" );
	deepEqual( Stem("unguarded"), "unguard" );
	deepEqual( Stem("unhand"), "unhand" );
	deepEqual( Stem("unhandsome"), "unhandsom" );
	deepEqual( Stem("unhappier"), "unhappi" );
	deepEqual( Stem("unhappily"), "unhappili" );
	deepEqual( Stem("unhappiness"), "unhappi" );
	deepEqual( Stem("unhappy"), "unhappi" );
	deepEqual( Stem("unharnessing"), "unhar" );
	deepEqual( Stem("unhealed"), "unheal" );
	deepEqual( Stem("unhealthy"), "unhealthi" );
	deepEqual( Stem("unheard"), "unheard" );
	deepEqual( Stem("unheeded"), "unheed" );
	deepEqual( Stem("unheeding"), "unheed" );
	deepEqual( Stem("unhesitatingly"), "unhesit" );
	deepEqual( Stem("unhewn"), "unhewn" );
	deepEqual( Stem("unhinged"), "unhing" );
	deepEqual( Stem("unholy"), "unholi" );
	deepEqual( Stem("unhonoured"), "unhonour" );
	deepEqual( Stem("unhooking"), "unhook" );
	deepEqual( Stem("unhorsed"), "unhors" );
	deepEqual( Stem("unhurried"), "unhurri" );
	deepEqual( Stem("unhurt"), "unhurt" );
	deepEqual( Stem("unifor"), "unifor" );
	deepEqual( Stem("uniform"), "uniform" );
	deepEqual( Stem("uniformity"), "uniform" );
	deepEqual( Stem("uniformly"), "uniform" );
	deepEqual( Stem("uniforms"), "uniform" );
	deepEqual( Stem("unimaginable"), "unimagin" );
	deepEqual( Stem("unimagined"), "unimagin" );
	deepEqual( Stem("unimpaired"), "unimpair" );
	deepEqual( Stem("unimpeachable"), "unimpeach" );
	deepEqual( Stem("unimpeached"), "unimpeach" );
	deepEqual( Stem("unimportant"), "unimport" );
	deepEqual( Stem("unimprovable"), "unimprov" );
	deepEqual( Stem("unimproved"), "unimprov" );
	deepEqual( Stem("uninfluenced"), "uninfluenc" );
	deepEqual( Stem("uninhabited"), "uninhabit" );
	deepEqual( Stem("uninitiated"), "uniniti" );
	deepEqual( Stem("uninjured"), "uninjur" );
	deepEqual( Stem("unintellectual"), "unintellectu" );
	deepEqual( Stem("unintelligible"), "unintellig" );
	deepEqual( Stem("unintentional"), "unintent" );
	deepEqual( Stem("unintentionally"), "unintent" );
	deepEqual( Stem("uninterested"), "uninterest" );
	deepEqual( Stem("uninteresting"), "uninterest" );
	deepEqual( Stem("uninterrupted"), "uninterrupt" );
	deepEqual( Stem("uninterruptedly"), "uninterrupt" );
	deepEqual( Stem("uninvited"), "uninvit" );
	deepEqual( Stem("uninviting"), "uninvit" );
	deepEqual( Stem("union"), "union" );
	deepEqual( Stem("unions"), "union" );
	deepEqual( Stem("unique"), "uniqu" );
	deepEqual( Stem("unison"), "unison" );
	deepEqual( Stem("unit"), "unit" );
	deepEqual( Stem("unite"), "unit" );
	deepEqual( Stem("united"), "unit" );
	deepEqual( Stem("unites"), "unit" );
	deepEqual( Stem("unities"), "uniti" );
	deepEqual( Stem("uniting"), "unit" );
	deepEqual( Stem("units"), "unit" );
	deepEqual( Stem("unity"), "uniti" );
	deepEqual( Stem("universal"), "univers" );
	deepEqual( Stem("universally"), "univers" );
	deepEqual( Stem("universe"), "univers" );
	deepEqual( Stem("university"), "univers" );
	deepEqual( Stem("unjoyous"), "unjoy" );
	deepEqual( Stem("unjust"), "unjust" );
	deepEqual( Stem("unjustifiable"), "unjustifi" );
	deepEqual( Stem("unjustly"), "unjust" );
	deepEqual( Stem("unkempt"), "unkempt" );
	deepEqual( Stem("unkind"), "unkind" );
	deepEqual( Stem("unkindly"), "unkind" );
	deepEqual( Stem("unkindness"), "unkind" );
	deepEqual( Stem("unkiver"), "unkiv" );
	deepEqual( Stem("unknowing"), "unknow" );
	deepEqual( Stem("unknowingly"), "unknow" );
	deepEqual( Stem("unknown"), "unknown" );
	deepEqual( Stem("unladylike"), "unladylik" );
	deepEqual( Stem("unlatched"), "unlatch" );
	deepEqual( Stem("unlawful"), "unlaw" );
	deepEqual( Stem("unlawfully"), "unlaw" );
	deepEqual( Stem("unlearn"), "unlearn" );
	deepEqual( Stem("unlearnt"), "unlearnt" );
	deepEqual( Stem("unless"), "unless" );
	deepEqual( Stem("unlicensed"), "unlicens" );
	deepEqual( Stem("unlike"), "unlik" );
	deepEqual( Stem("unlikely"), "unlik" );
	deepEqual( Stem("unlimited"), "unlimit" );
	deepEqual( Stem("unliquidated"), "unliquid" );
	deepEqual( Stem("unload"), "unload" );
	deepEqual( Stem("unloaded"), "unload" );
	deepEqual( Stem("unloading"), "unload" );
	deepEqual( Stem("unlock"), "unlock" );
	deepEqual( Stem("unlocked"), "unlock" );
	deepEqual( Stem("unlocking"), "unlock" );
	deepEqual( Stem("unlocks"), "unlock" );
	deepEqual( Stem("unlooked"), "unlook" );
	deepEqual( Stem("unloosed"), "unloos" );
	deepEqual( Stem("unloosened"), "unloosen" );
	deepEqual( Stem("unlovable"), "unlov" );
	deepEqual( Stem("unloved"), "unlov" );
	deepEqual( Stem("unlovely"), "unlov" );
	deepEqual( Stem("unloving"), "unlov" );
	deepEqual( Stem("unluckily"), "unluckili" );
	deepEqual( Stem("unlucky"), "unlucki" );
	deepEqual( Stem("unmade"), "unmad" );
	deepEqual( Stem("unmake"), "unmak" );
	deepEqual( Stem("unmanageable"), "unmanag" );
	deepEqual( Stem("unmanly"), "unman" );
	deepEqual( Stem("unmanned"), "unman" );
	deepEqual( Stem("unmans"), "unman" );
	deepEqual( Stem("unmarked"), "unmark" );
	deepEqual( Stem("unmarried"), "unmarri" );
	deepEqual( Stem("unmasked"), "unmask" );
	deepEqual( Stem("unmatched"), "unmatch" );
	deepEqual( Stem("unmeaning"), "unmean" );
	deepEqual( Stem("unmentionable"), "unmention" );
	deepEqual( Stem("unmerciful"), "unmerci" );
	deepEqual( Stem("unmercifully"), "unmerci" );
	deepEqual( Stem("unmerited"), "unmerit" );
	deepEqual( Stem("unmindful"), "unmind" );
	deepEqual( Stem("unmistakable"), "unmistak" );
	deepEqual( Stem("unmistakably"), "unmistak" );
	deepEqual( Stem("unmitigated"), "unmitig" );
	deepEqual( Stem("unmixed"), "unmix" );
	deepEqual( Stem("unmolested"), "unmolest" );
	deepEqual( Stem("unmoved"), "unmov" );
	deepEqual( Stem("unnamed"), "unnam" );
	deepEqual( Stem("unnat"), "unnat" );
	deepEqual( Stem("unnatural"), "unnatur" );
	deepEqual( Stem("unnaturally"), "unnatur" );
	deepEqual( Stem("unnecessarily"), "unnecessarili" );
	deepEqual( Stem("unnecessary"), "unnecessari" );
	deepEqual( Stem("unnerved"), "unnerv" );
	deepEqual( Stem("unnoticed"), "unnot" );
	deepEqual( Stem("unobjectionable"), "unobjection" );
	deepEqual( Stem("unobservant"), "unobserv" );
	deepEqual( Stem("unobserved"), "unobserv" );
	deepEqual( Stem("unobtrusive"), "unobtrus" );
	deepEqual( Stem("unoccupied"), "unoccupi" );
	deepEqual( Stem("unoffending"), "unoffend" );
	deepEqual( Stem("unopenable"), "unopen" );
	deepEqual( Stem("unopened"), "unopen" );
	deepEqual( Stem("unowned"), "unown" );
	deepEqual( Stem("unpack"), "unpack" );
	deepEqual( Stem("unpacked"), "unpack" );
	deepEqual( Stem("unpacking"), "unpack" );
	deepEqual( Stem("unpaid"), "unpaid" );
	deepEqual( Stem("unpainted"), "unpaint" );
	deepEqual( Stem("unpalatable"), "unpalat" );
	deepEqual( Stem("unparalleled"), "unparallel" );
	deepEqual( Stem("unpardonable"), "unpardon" );
	deepEqual( Stem("unpardonably"), "unpardon" );
	deepEqual( Stem("unpaved"), "unpav" );
	deepEqual( Stem("unpensioning"), "unpens" );
	deepEqual( Stem("unperformed"), "unperform" );
	deepEqual( Stem("unpersuadable"), "unpersuad" );
	deepEqual( Stem("unperturbable"), "unperturb" );
	deepEqual( Stem("unpicturesque"), "unpicturesqu" );
	deepEqual( Stem("unpitying"), "unpiti" );
	deepEqual( Stem("unplaced"), "unplac" );
	deepEqual( Stem("unpleasant"), "unpleas" );
	deepEqual( Stem("unpleasantly"), "unpleas" );
	deepEqual( Stem("unpleasantness"), "unpleas" );
	deepEqual( Stem("unpleasantnesses"), "unpleas" );
	deepEqual( Stem("unpleasing"), "unpleas" );
	deepEqual( Stem("unpleasingly"), "unpleas" );
	deepEqual( Stem("unpolite"), "unpolit" );
	deepEqual( Stem("unpolitely"), "unpolit" );
	deepEqual( Stem("unpoliteness"), "unpolit" );
	deepEqual( Stem("unpopular"), "unpopular" );
	deepEqual( Stem("unpractical"), "unpract" );
	deepEqual( Stem("unpractised"), "unpractis" );
	deepEqual( Stem("unprecedented"), "unpreced" );
	deepEqual( Stem("unpremeditated"), "unpremedit" );
	deepEqual( Stem("unprepared"), "unprepar" );
	deepEqual( Stem("unpretending"), "unpretend" );
	deepEqual( Stem("unpretendingly"), "unpretend" );
	deepEqual( Stem("unprevaricating"), "unprevar" );
	deepEqual( Stem("unprincipled"), "unprincipl" );
	deepEqual( Stem("unproducible"), "unproduc" );
	deepEqual( Stem("unproductive"), "unproduct" );
	deepEqual( Stem("unprofitable"), "unprofit" );
	deepEqual( Stem("unpromising"), "unpromis" );
	deepEqual( Stem("unprosperous"), "unprosper" );
	deepEqual( Stem("unprotected"), "unprotect" );
	deepEqual( Stem("unprovided"), "unprovid" );
	deepEqual( Stem("unpublished"), "unpublish" );
	deepEqual( Stem("unpunctual"), "unpunctu" );
	deepEqual( Stem("unpunished"), "unpunish" );
	deepEqual( Stem("unqualified"), "unqualifi" );
	deepEqual( Stem("unquestionable"), "unquestion" );
	deepEqual( Stem("unquestionably"), "unquestion" );
	deepEqual( Stem("unquiet"), "unquiet" );
	deepEqual( Stem("unravel"), "unravel" );
	deepEqual( Stem("unravelling"), "unravel" );
	deepEqual( Stem("unravelment"), "unravel" );
	deepEqual( Stem("unread"), "unread" );
	deepEqual( Stem("unreal"), "unreal" );
	deepEqual( Stem("unreason"), "unreason" );
	deepEqual( Stem("unreasonable"), "unreason" );
	deepEqual( Stem("unreasonableness"), "unreason" );
	deepEqual( Stem("unreasonably"), "unreason" );
	deepEqual( Stem("unreasoning"), "unreason" );
	deepEqual( Stem("unreclaimed"), "unreclaim" );
	deepEqual( Stem("unrecognised"), "unrecognis" );
	deepEqual( Stem("unredeemed"), "unredeem" );
	deepEqual( Stem("unrelenting"), "unrel" );
	deepEqual( Stem("unrelieved"), "unreliev" );
	deepEqual( Stem("unremitting"), "unremit" );
	deepEqual( Stem("unrepining"), "unrepin" );
	deepEqual( Stem("unrequited"), "unrequit" );
	deepEqual( Stem("unreserved"), "unreserv" );
	deepEqual( Stem("unresisting"), "unresist" );
	deepEqual( Stem("unrest"), "unrest" );
	deepEqual( Stem("unrestrained"), "unrestrain" );
	deepEqual( Stem("unrestrainedly"), "unrestrain" );
	deepEqual( Stem("unriddling"), "unriddl" );
	deepEqual( Stem("unripe"), "unrip" );
	deepEqual( Stem("unrivalled"), "unrival" );
	deepEqual( Stem("unroofed"), "unroof" );
	deepEqual( Stem("unruly"), "unruli" );
	deepEqual( Stem("unsaddle"), "unsaddl" );
	deepEqual( Stem("unsaddled"), "unsaddl" );
	deepEqual( Stem("unsafe"), "unsaf" );
	deepEqual( Stem("unsatisfactory"), "unsatisfactori" );
	deepEqual( Stem("unsatisfied"), "unsatisfi" );
	deepEqual( Stem("unsavoury"), "unsavouri" );
	deepEqual( Stem("unsay"), "unsay" );
	deepEqual( Stem("unschooled"), "unschool" );
	deepEqual( Stem("unscratched"), "unscratch" );
	deepEqual( Stem("unscrews"), "unscrew" );
	deepEqual( Stem("unscrupulous"), "unscrupul" );
	deepEqual( Stem("unscrupulously"), "unscrupul" );
	deepEqual( Stem("unseasonable"), "unseason" );
	deepEqual( Stem("unseemly"), "unseem" );
	deepEqual( Stem("unseen"), "unseen" );
	deepEqual( Stem("unselfish"), "unselfish" );
	deepEqual( Stem("unselfishly"), "unselfish" );
	deepEqual( Stem("unselfishness"), "unselfish" );
	deepEqual( Stem("unsettle"), "unsettl" );
	deepEqual( Stem("unsettled"), "unsettl" );
	deepEqual( Stem("unsettles"), "unsettl" );
	deepEqual( Stem("unsettling"), "unsettl" );
	deepEqual( Stem("unshackled"), "unshackl" );
	deepEqual( Stem("unshadowed"), "unshadow" );
	deepEqual( Stem("unshaken"), "unshaken" );
	deepEqual( Stem("unshaved"), "unshav" );
	deepEqual( Stem("unshaven"), "unshaven" );
	deepEqual( Stem("unsheltered"), "unshelt" );
	deepEqual( Stem("unshod"), "unshod" );
	deepEqual( Stem("unsightly"), "unsight" );
	deepEqual( Stem("unskilful"), "unskil" );
	deepEqual( Stem("unsoftened"), "unsoften" );
	deepEqual( Stem("unsolicited"), "unsolicit" );
	deepEqual( Stem("unsolved"), "unsolv" );
	deepEqual( Stem("unsophisticated"), "unsophist" );
	deepEqual( Stem("unsparing"), "unspar" );
	deepEqual( Stem("unspeakable"), "unspeak" );
	deepEqual( Stem("unspeakably"), "unspeak" );
	deepEqual( Stem("unspoilt"), "unspoilt" );
	deepEqual( Stem("unspoken"), "unspoken" );
	deepEqual( Stem("unstable"), "unstabl" );
	deepEqual( Stem("unsteadier"), "unsteadi" );
	deepEqual( Stem("unsteadily"), "unsteadili" );
	deepEqual( Stem("unsteadiness"), "unsteadi" );
	deepEqual( Stem("unsteady"), "unsteadi" );
	deepEqual( Stem("unstratified"), "unstratifi" );
	deepEqual( Stem("unstrung"), "unstrung" );
	deepEqual( Stem("unstudied"), "unstudi" );
	deepEqual( Stem("unsubstantial"), "unsubstanti" );
	deepEqual( Stem("unsuccessful"), "unsuccess" );
	deepEqual( Stem("unsuccessfully"), "unsuccess" );
	deepEqual( Stem("unsuitable"), "unsuit" );
	deepEqual( Stem("unsuited"), "unsuit" );
	deepEqual( Stem("unsullied"), "unsulli" );
	deepEqual( Stem("unsupportable"), "unsupport" );
	deepEqual( Stem("unsupported"), "unsupport" );
	deepEqual( Stem("unsuspecting"), "unsuspect" );
	deepEqual( Stem("unsuspicious"), "unsuspici" );
	deepEqual( Stem("unsustainable"), "unsustain" );
	deepEqual( Stem("unsymmetrical"), "unsymmetr" );
	deepEqual( Stem("unsympathetic"), "unsympathet" );
	deepEqual( Stem("untainted"), "untaint" );
	deepEqual( Stem("untamed"), "untam" );
	deepEqual( Stem("untarnished"), "untarnish" );
	deepEqual( Stem("untasted"), "untast" );
	deepEqual( Stem("untaxed"), "untax" );
	deepEqual( Stem("untenable"), "unten" );
	deepEqual( Stem("untenanted"), "unten" );
	deepEqual( Stem("untended"), "untend" );
	deepEqual( Stem("unthankful"), "unthank" );
	deepEqual( Stem("unthankfulness"), "unthank" );
	deepEqual( Stem("unthinkable"), "unthink" );
	deepEqual( Stem("unthought"), "unthought" );
	deepEqual( Stem("unthrifty"), "unthrifti" );
	deepEqual( Stem("untidily"), "untidili" );
	deepEqual( Stem("untidy"), "untidi" );
	deepEqual( Stem("untie"), "unti" );
	deepEqual( Stem("untied"), "unti" );
	deepEqual( Stem("unties"), "unti" );
	deepEqual( Stem("until"), "until" );
	deepEqual( Stem("untimely"), "untim" );
	deepEqual( Stem("untiring"), "untir" );
	deepEqual( Stem("unto"), "unto" );
	deepEqual( Stem("untold"), "untold" );
	deepEqual( Stem("untouched"), "untouch" );
	deepEqual( Stem("untoward"), "untoward" );
	deepEqual( Stem("untrammelled"), "untrammel" );
	deepEqual( Stem("untranslatable"), "untranslat" );
	deepEqual( Stem("untried"), "untri" );
	deepEqual( Stem("untrimmed"), "untrim" );
	deepEqual( Stem("untroubled"), "untroubl" );
	deepEqual( Stem("untrue"), "untru" );
	deepEqual( Stem("untrustworthy"), "untrustworthi" );
	deepEqual( Stem("unturned"), "unturn" );
	deepEqual( Stem("untwisting"), "untwist" );
	deepEqual( Stem("untying"), "unti" );
	deepEqual( Stem("unused"), "unus" );
	deepEqual( Stem("unusual"), "unusu" );
	deepEqual( Stem("unusually"), "unusu" );
	deepEqual( Stem("unutterable"), "unutter" );
	deepEqual( Stem("unuttered"), "unutt" );
	deepEqual( Stem("unvaried"), "unvari" );
	deepEqual( Stem("unvarying"), "unvari" );
	deepEqual( Stem("unveil"), "unveil" );
	deepEqual( Stem("unveiling"), "unveil" );
	deepEqual( Stem("unventilated"), "unventil" );
	deepEqual( Stem("unverified"), "unverifi" );
	deepEqual( Stem("unwarily"), "unwarili" );
	deepEqual( Stem("unwary"), "unwari" );
	deepEqual( Stem("unwashed"), "unwash" );
	deepEqual( Stem("unwearied"), "unweari" );
	deepEqual( Stem("unwearying"), "unweari" );
	deepEqual( Stem("unwelcome"), "unwelcom" );
	deepEqual( Stem("unwell"), "unwel" );
	deepEqual( Stem("unwhitewashed"), "unwhitewash" );
	deepEqual( Stem("unwholesome"), "unwholesom" );
	deepEqual( Stem("unwieldy"), "unwieldi" );
	deepEqual( Stem("unwilling"), "unwil" );
	deepEqual( Stem("unwillingly"), "unwil" );
	deepEqual( Stem("unwillingness"), "unwilling" );
	deepEqual( Stem("unwinding"), "unwind" );
	deepEqual( Stem("unwise"), "unwis" );
	deepEqual( Stem("unwisely"), "unwis" );
	deepEqual( Stem("unwittingly"), "unwit" );
	deepEqual( Stem("unwonted"), "unwont" );
	deepEqual( Stem("unworldly"), "unworld" );
	deepEqual( Stem("unworthily"), "unworthili" );
	deepEqual( Stem("unworthiness"), "unworthi" );
	deepEqual( Stem("unworthy"), "unworthi" );
	deepEqual( Stem("unwound"), "unwound" );
	deepEqual( Stem("unwritten"), "unwritten" );
	deepEqual( Stem("unwrung"), "unwrung" );
	deepEqual( Stem("unyielding"), "unyield" );
	deepEqual( Stem("up"), "up" );
	deepEqual( Stem("upas"), "upa" );
	deepEqual( Stem("upbearing"), "upbear" );
	deepEqual( Stem("upbraid"), "upbraid" );
	deepEqual( Stem("upbraiding"), "upbraid" );
	deepEqual( Stem("upheaval"), "upheav" );
	deepEqual( Stem("upheavals"), "upheav" );
	deepEqual( Stem("upheaved"), "upheav" );
	deepEqual( Stem("upheaving"), "upheav" );
	deepEqual( Stem("upheld"), "upheld" );
	deepEqual( Stem("uphill"), "uphil" );
	deepEqual( Stem("uphold"), "uphold" );
	deepEqual( Stem("upholding"), "uphold" );
	deepEqual( Stem("upholstered"), "upholst" );
	deepEqual( Stem("upholsterer"), "upholster" );
	deepEqual( Stem("upholsterers"), "upholster" );
	deepEqual( Stem("upholstery"), "upholsteri" );
	deepEqual( Stem("upjohn"), "upjohn" );
	deepEqual( Stem("uplan"), "uplan" );
	deepEqual( Stem("upland"), "upland" );
	deepEqual( Stem("uplift"), "uplift" );
	deepEqual( Stem("uplifted"), "uplift" );
	deepEqual( Stem("uplifting"), "uplift" );
	deepEqual( Stem("upliftings"), "uplift" );
	deepEqual( Stem("upon"), "upon" );
	deepEqual( Stem("upper"), "upper" );
	deepEqual( Stem("uppermost"), "uppermost" );
	deepEqual( Stem("upraised"), "uprais" );
	deepEqual( Stem("upright"), "upright" );
	deepEqual( Stem("uprightness"), "upright" );
	deepEqual( Stem("uprising"), "upris" );
	deepEqual( Stem("uprisings"), "upris" );
	deepEqual( Stem("uproar"), "uproar" );
	deepEqual( Stem("uproarious"), "uproari" );
	deepEqual( Stem("uproariously"), "uproari" );
	deepEqual( Stem("uproot"), "uproot" );
	deepEqual( Stem("uprooting"), "uproot" );
	deepEqual( Stem("uprose"), "upros" );
	deepEqual( Stem("ups"), "up" );
	deepEqual( Stem("upsallata"), "upsallata" );
	deepEqual( Stem("upset"), "upset" );
	deepEqual( Stem("upsets"), "upset" );
	deepEqual( Stem("upsetting"), "upset" );
	deepEqual( Stem("upshot"), "upshot" );
	deepEqual( Stem("upside"), "upsid" );
	deepEqual( Stem("upstairs"), "upstair" );
	deepEqual( Stem("upstart"), "upstart" );
	deepEqual( Stem("upstarts"), "upstart" );
	deepEqual( Stem("upturned"), "upturn" );
	deepEqual( Stem("upward"), "upward" );
	deepEqual( Stem("upwards"), "upward" );
	deepEqual( Stem("urbane"), "urban" );
	deepEqual( Stem("urbanity"), "urban" );
	deepEqual( Stem("urchin"), "urchin" );
	deepEqual( Stem("urge"), "urg" );
	deepEqual( Stem("urged"), "urg" );
	deepEqual( Stem("urgency"), "urgenc" );
	deepEqual( Stem("urgent"), "urgent" );
	deepEqual( Stem("urgently"), "urgent" );
	deepEqual( Stem("urges"), "urg" );
	deepEqual( Stem("urging"), "urg" );
	deepEqual( Stem("urinary"), "urinari" );
	deepEqual( Stem("urn"), "urn" );
	deepEqual( Stem("ursula"), "ursula" );
	deepEqual( Stem("uruguay"), "uruguay" );
	deepEqual( Stem("us"), "us" );
	deepEqual( Stem("usage"), "usag" );
	deepEqual( Stem("usborne"), "usborn" );
	deepEqual( Stem("use"), "use" );
	deepEqual( Stem("used"), "use" );
	deepEqual( Stem("useful"), "use" );
	deepEqual( Stem("usefully"), "use" );
	deepEqual( Stem("usefulness"), "use" );
	deepEqual( Stem("useless"), "useless" );
	deepEqual( Stem("uselessly"), "useless" );
	deepEqual( Stem("uselessness"), "useless" );
	deepEqual( Stem("uses"), "use" );
	deepEqual( Stem("usher"), "usher" );
	deepEqual( Stem("ushered"), "usher" );
	deepEqual( Stem("ushering"), "usher" );
	deepEqual( Stem("ushers"), "usher" );
	deepEqual( Stem("using"), "use" );
	deepEqual( Stem("usnera"), "usnera" );
	deepEqual( Stem("uspallata"), "uspallata" );
	deepEqual( Stem("usual"), "usual" );
	deepEqual( Stem("usually"), "usual" );
	deepEqual( Stem("usurer"), "usur" );
	deepEqual( Stem("usurers"), "usur" );
	deepEqual( Stem("usurp"), "usurp" );
	deepEqual( Stem("utamme"), "utamm" );
	deepEqual( Stem("utensils"), "utensil" );
	deepEqual( Stem("utilitarianism"), "utilitarian" );
	deepEqual( Stem("utility"), "util" );
	deepEqual( Stem("utilize"), "util" );
	deepEqual( Stem("utilized"), "util" );
	deepEqual( Stem("utmost"), "utmost" );
	deepEqual( Stem("utter"), "utter" );
	deepEqual( Stem("utterance"), "utter" );
	deepEqual( Stem("uttered"), "utter" );
	deepEqual( Stem("uttering"), "utter" );
	deepEqual( Stem("utterly"), "utter" );
	deepEqual( Stem("utters"), "utter" );
	deepEqual( Stem("v"), "v" );
	deepEqual( Stem("va"), "va" );
	deepEqual( Stem("vacancies"), "vacanc" );
	deepEqual( Stem("vacancy"), "vacanc" );
	deepEqual( Stem("vacant"), "vacant" );
	deepEqual( Stem("vacantly"), "vacant" );
	deepEqual( Stem("vacas"), "vaca" );
	deepEqual( Stem("vacate"), "vacat" );
	deepEqual( Stem("vacated"), "vacat" );
	deepEqual( Stem("vacation"), "vacat" );
	deepEqual( Stem("vacations"), "vacat" );
	deepEqual( Stem("vacillated"), "vacil" );
	deepEqual( Stem("vacillating"), "vacil" );
	deepEqual( Stem("vacillations"), "vacil" );
	deepEqual( Stem("vacillatory"), "vacillatori" );
	deepEqual( Stem("vade"), "vade" );
	deepEqual( Stem("vagabond"), "vagabond" );
	deepEqual( Stem("vagabondizing"), "vagabond" );
	deepEqual( Stem("vagabonds"), "vagabond" );
	deepEqual( Stem("vagaries"), "vagari" );
	deepEqual( Stem("vagary"), "vagari" );
	deepEqual( Stem("vagrant"), "vagrant" );
	deepEqual( Stem("vagrants"), "vagrant" );
	deepEqual( Stem("vague"), "vagu" );
	deepEqual( Stem("vaguely"), "vagu" );
	deepEqual( Stem("vagueness"), "vagu" );
	deepEqual( Stem("vahrushin"), "vahrushin" );
	deepEqual( Stem("vain"), "vain" );
	deepEqual( Stem("vainer"), "vainer" );
	deepEqual( Stem("vainest"), "vainest" );
	deepEqual( Stem("vainglory"), "vainglori" );
	deepEqual( Stem("vainly"), "vain" );
	deepEqual( Stem("vaiuly"), "vaiuli" );
	deepEqual( Stem("valdes"), "vald" );
	deepEqual( Stem("valdivia"), "valdivia" );
	deepEqual( Stem("vale"), "vale" );
	deepEqual( Stem("valet"), "valet" );
	deepEqual( Stem("valets"), "valet" );
	deepEqual( Stem("valiantly"), "valiant" );
	deepEqual( Stem("valid"), "valid" );
	deepEqual( Stem("validity"), "valid" );
	deepEqual( Stem("valise"), "valis" );
	deepEqual( Stem("valle"), "vall" );
	deepEqual( Stem("valley"), "valley" );
	deepEqual( Stem("valleys"), "valley" );
	deepEqual( Stem("valour"), "valour" );
	deepEqual( Stem("valparaiso"), "valparaiso" );
	deepEqual( Stem("valuable"), "valuabl" );
	deepEqual( Stem("valuables"), "valuabl" );
	deepEqual( Stem("valuation"), "valuat" );
	deepEqual( Stem("value"), "valu" );
	deepEqual( Stem("valued"), "valu" );
	deepEqual( Stem("valueless"), "valueless" );
	deepEqual( Stem("valve"), "valv" );
	deepEqual( Stem("vamp"), "vamp" );
	deepEqual( Stem("vampire"), "vampir" );
	deepEqual( Stem("van"), "van" );
	deepEqual( Stem("vancouver"), "vancouv" );
	deepEqual( Stem("vane"), "vane" );
	deepEqual( Stem("vanellus"), "vanellus" );
	deepEqual( Stem("vanes"), "vane" );
	deepEqual( Stem("vanessa"), "vanessa" );
	deepEqual( Stem("vanikoro"), "vanikoro" );
	deepEqual( Stem("vanish"), "vanish" );
	deepEqual( Stem("vanished"), "vanish" );
	deepEqual( Stem("vanishes"), "vanish" );
	deepEqual( Stem("vanishing"), "vanish" );
	deepEqual( Stem("vanities"), "vaniti" );
	deepEqual( Stem("vanity"), "vaniti" );
	deepEqual( Stem("vans"), "van" );
	deepEqual( Stem("vapid"), "vapid" );
	deepEqual( Stem("vapidity"), "vapid" );
	deepEqual( Stem("vaporous"), "vapor" );
	deepEqual( Stem("vapour"), "vapour" );
	deepEqual( Stem("vapouring"), "vapour" );
	deepEqual( Stem("vapourings"), "vapour" );
	deepEqual( Stem("vapours"), "vapour" );
	deepEqual( Stem("vapoury"), "vapouri" );
	deepEqual( Stem("vara"), "vara" );
	deepEqual( Stem("varents"), "varent" );
	deepEqual( Stem("variable"), "variabl" );
	deepEqual( Stem("variance"), "varianc" );
	deepEqual( Stem("variation"), "variat" );
	deepEqual( Stem("variations"), "variat" );
	deepEqual( Stem("varie"), "vari" );
	deepEqual( Stem("varied"), "vari" );
	deepEqual( Stem("variegated"), "varieg" );
	deepEqual( Stem("varies"), "vari" );
	deepEqual( Stem("varieties"), "varieti" );
	deepEqual( Stem("variety"), "varieti" );
	deepEqual( Stem("various"), "various" );
	deepEqual( Stem("variously"), "various" );
	deepEqual( Stem("varnish"), "varnish" );
	deepEqual( Stem("varnished"), "varnish" );
	deepEqual( Stem("vary"), "vari" );
	deepEqual( Stem("varying"), "vari" );
	deepEqual( Stem("vase"), "vase" );
	deepEqual( Stem("vases"), "vase" );
	deepEqual( Stem("vassal"), "vassal" );
	deepEqual( Stem("vassalage"), "vassalag" );
	deepEqual( Stem("vassilitch"), "vassilitch" );
	deepEqual( Stem("vassily"), "vassili" );
	deepEqual( Stem("vassilyevsky"), "vassilyevski" );
	deepEqual( Stem("vast"), "vast" );
	deepEqual( Stem("vastly"), "vast" );
	deepEqual( Stem("vastness"), "vast" );
	deepEqual( Stem("vasya"), "vasya" );
	deepEqual( Stem("vater"), "vater" );
	deepEqual( Stem("vaughans"), "vaughan" );
	deepEqual( Stem("vault"), "vault" );
	deepEqual( Stem("vaulted"), "vault" );
	deepEqual( Stem("vaulting"), "vault" );
	deepEqual( Stem("vaults"), "vault" );
	deepEqual( Stem("vaunt"), "vaunt" );
	deepEqual( Stem("vauxhall"), "vauxhal" );
	deepEqual( Stem("vayli"), "vayli" );
	deepEqual( Stem("ve"), "ve" );
	deepEqual( Stem("veal"), "veal" );
	deepEqual( Stem("veals"), "veal" );
	deepEqual( Stem("veer"), "veer" );
	deepEqual( Stem("veered"), "veer" );
	deepEqual( Stem("veering"), "veer" );
	deepEqual( Stem("vegetabl"), "vegetabl" );
	deepEqual( Stem("vegetable"), "veget" );
	deepEqual( Stem("vegetables"), "veget" );
	deepEqual( Stem("vegetate"), "veget" );
	deepEqual( Stem("vegetation"), "veget" );
	deepEqual( Stem("vehemence"), "vehem" );
	deepEqual( Stem("vehement"), "vehement" );
	deepEqual( Stem("vehemently"), "vehement" );
	deepEqual( Stem("vehicle"), "vehicl" );
	deepEqual( Stem("vehicles"), "vehicl" );
	deepEqual( Stem("veil"), "veil" );
	deepEqual( Stem("veiled"), "veil" );
	deepEqual( Stem("veils"), "veil" );
	deepEqual( Stem("vein"), "vein" );
	deepEqual( Stem("veined"), "vein" );
	deepEqual( Stem("veinous"), "veinous" );
	deepEqual( Stem("veins"), "vein" );
	deepEqual( Stem("vellum"), "vellum" );
	deepEqual( Stem("velocity"), "veloc" );
	deepEqual( Stem("velvet"), "velvet" );
	deepEqual( Stem("velvets"), "velvet" );
	deepEqual( Stem("venda"), "venda" );
	deepEqual( Stem("vendome"), "vendom" );
	deepEqual( Stem("vendor"), "vendor" );
	deepEqual( Stem("vendors"), "vendor" );
	deepEqual( Stem("venerable"), "vener" );
	deepEqual( Stem("veneration"), "vener" );
	deepEqual( Stem("venetian"), "venetian" );
	deepEqual( Stem("vengeance"), "vengeanc" );
	deepEqual( Stem("venice"), "venic" );
	deepEqual( Stem("veniso"), "veniso" );
	deepEqual( Stem("venom"), "venom" );
	deepEqual( Stem("venomous"), "venom" );
	deepEqual( Stem("vent"), "vent" );
	deepEqual( Stem("ventana"), "ventana" );
	deepEqual( Stem("vented"), "vent" );
	deepEqual( Stem("ventilated"), "ventil" );
	deepEqual( Stem("ventilation"), "ventil" );
	deepEqual( Stem("ventilator"), "ventil" );
	deepEqual( Stem("venting"), "vent" );
	deepEqual( Stem("ventnor"), "ventnor" );
	deepEqual( Stem("ventriloquists"), "ventriloquist" );
	deepEqual( Stem("vents"), "vent" );
	deepEqual( Stem("venture"), "ventur" );
	deepEqual( Stem("ventured"), "ventur" );
	deepEqual( Stem("ventures"), "ventur" );
	deepEqual( Stem("venturesome"), "venturesom" );
	deepEqual( Stem("venturing"), "ventur" );
	deepEqual( Stem("venus"), "venus" );
	deepEqual( Stem("veo"), "veo" );
	deepEqual( Stem("ver"), "ver" );
	deepEqual( Stem("vera"), "vera" );
	deepEqual( Stem("veracious"), "veraci" );
	deepEqual( Stem("veracity"), "verac" );
	deepEqual( Stem("veranda"), "veranda" );
	deepEqual( Stem("verandah"), "verandah" );
	deepEqual( Stem("verandahs"), "verandah" );
	deepEqual( Stem("verb"), "verb" );
	deepEqual( Stem("verbal"), "verbal" );
	deepEqual( Stem("verbally"), "verbal" );
	deepEqual( Stem("verbena"), "verbena" );
	deepEqual( Stem("verbenas"), "verbena" );
	deepEqual( Stem("verbose"), "verbos" );
	deepEqual( Stem("verd"), "verd" );
	deepEqual( Stem("verdant"), "verdant" );
	deepEqual( Stem("verdict"), "verdict" );
	deepEqual( Stem("verdigris"), "verdigri" );
	deepEqual( Stem("verds"), "verd" );
	deepEqual( Stem("verdure"), "verdur" );
	deepEqual( Stem("vere"), "vere" );
	deepEqual( Stem("verge"), "verg" );
	deepEqual( Stem("verging"), "verg" );
	deepEqual( Stem("verified"), "verifi" );
	deepEqual( Stem("verify"), "verifi" );
	deepEqual( Stem("verily"), "verili" );
	deepEqual( Stem("verisopht"), "verisopht" );
	deepEqual( Stem("veritably"), "verit" );
	deepEqual( Stem("verite"), "verit" );
	deepEqual( Stem("vermiform"), "vermiform" );
	deepEqual( Stem("vermilion"), "vermilion" );
	deepEqual( Stem("vermin"), "vermin" );
	deepEqual( Stem("verona"), "verona" );
	deepEqual( Stem("versailles"), "versaill" );
	deepEqual( Stem("versatile"), "versatil" );
	deepEqual( Stem("verse"), "vers" );
	deepEqual( Stem("versed"), "vers" );
	deepEqual( Stem("verses"), "vers" );
	deepEqual( Stem("versification"), "versif" );
	deepEqual( Stem("version"), "version" );
	deepEqual( Stem("versions"), "version" );
	deepEqual( Stem("versts"), "verst" );
	deepEqual( Stem("vertebrae"), "vertebra" );
	deepEqual( Stem("vertical"), "vertic" );
	deepEqual( Stem("vertically"), "vertic" );
	deepEqual( Stem("vertu"), "vertu" );
	deepEqual( Stem("verulam"), "verulam" );
	deepEqual( Stem("very"), "veri" );
	deepEqual( Stem("vesicles"), "vesicl" );
	deepEqual( Stem("vessel"), "vessel" );
	deepEqual( Stem("vessels"), "vessel" );
	deepEqual( Stem("vestal"), "vestal" );
	deepEqual( Stem("vestige"), "vestig" );
	deepEqual( Stem("vestiges"), "vestig" );
	deepEqual( Stem("vestigia"), "vestigia" );
	deepEqual( Stem("vestry"), "vestri" );
	deepEqual( Stem("vesuvius"), "vesuvius" );
	deepEqual( Stem("veteran"), "veteran" );
	deepEqual( Stem("veterinary"), "veterinari" );
	deepEqual( Stem("veto"), "veto" );
	deepEqual( Stem("vex"), "vex" );
	deepEqual( Stem("vexation"), "vexat" );
	deepEqual( Stem("vexations"), "vexat" );
	deepEqual( Stem("vexatious"), "vexati" );
	deepEqual( Stem("vexed"), "vex" );
	deepEqual( Stem("vexes"), "vex" );
	deepEqual( Stem("vexing"), "vex" );
	deepEqual( Stem("vholes"), "vhole" );
	deepEqual( Stem("vholeses"), "vholes" );
	deepEqual( Stem("vi"), "vi" );
	deepEqual( Stem("via"), "via" );
	deepEqual( Stem("viands"), "viand" );
	deepEqual( Stem("viazemsky"), "viazemski" );
	deepEqual( Stem("vibrate"), "vibrat" );
	deepEqual( Stem("vibrated"), "vibrat" );
	deepEqual( Stem("vibrates"), "vibrat" );
	deepEqual( Stem("vibrating"), "vibrat" );
	deepEqual( Stem("vibration"), "vibrat" );
	deepEqual( Stem("vibrations"), "vibrat" );
	deepEqual( Stem("vibratory"), "vibratori" );
	deepEqual( Stem("vicar"), "vicar" );
	deepEqual( Stem("vicarage"), "vicarag" );
	deepEqual( Stem("vicarious"), "vicari" );
	deepEqual( Stem("vicariously"), "vicari" );
	deepEqual( Stem("vice"), "vice" );
	deepEqual( Stem("vicencio"), "vicencio" );
	deepEqual( Stem("viceroys"), "viceroy" );
	deepEqual( Stem("vices"), "vice" );
	deepEqual( Stem("vicinity"), "vicin" );
	deepEqual( Stem("vicious"), "vicious" );
	deepEqual( Stem("viciously"), "vicious" );
	deepEqual( Stem("viciousness"), "vicious" );
	deepEqual( Stem("vicissitudes"), "vicissitud" );
	deepEqual( Stem("victim"), "victim" );
	deepEqual( Stem("victimized"), "victim" );
	deepEqual( Stem("victims"), "victim" );
	deepEqual( Stem("victoria"), "victoria" );
	deepEqual( Stem("victories"), "victori" );
	deepEqual( Stem("victorious"), "victori" );
	deepEqual( Stem("victory"), "victori" );
	deepEqual( Stem("victualled"), "victual" );
	deepEqual( Stem("victuals"), "victual" );
	deepEqual( Stem("vicuna"), "vicuna" );
	deepEqual( Stem("vide"), "vide" );
	deepEqual( Stem("video"), "video" );
	deepEqual( Stem("vie"), "vie" );
	deepEqual( Stem("vied"), "vie" );
	deepEqual( Stem("vienna"), "vienna" );
	deepEqual( Stem("view"), "view" );
	deepEqual( Stem("viewed"), "view" );
	deepEqual( Stem("viewing"), "view" );
	deepEqual( Stem("views"), "view" );
	deepEqual( Stem("vigil"), "vigil" );
	deepEqual( Stem("vigilance"), "vigil" );
	deepEqual( Stem("vigilant"), "vigil" );
	deepEqual( Stem("vigilantly"), "vigil" );
	deepEqual( Stem("vigorous"), "vigor" );
	deepEqual( Stem("vigorously"), "vigor" );
	deepEqual( Stem("vigour"), "vigour" );
	deepEqual( Stem("vii"), "vii" );
	deepEqual( Stem("viii"), "viii" );
	deepEqual( Stem("vil"), "vil" );
	deepEqual( Stem("vile"), "vile" );
	deepEqual( Stem("vilely"), "vile" );
	deepEqual( Stem("vileness"), "vile" );
	deepEqual( Stem("viler"), "viler" );
	deepEqual( Stem("vilest"), "vilest" );
	deepEqual( Stem("vilified"), "vilifi" );
	deepEqual( Stem("vilinco"), "vilinco" );
	deepEqual( Stem("vilipilli"), "vilipilli" );
	deepEqual( Stem("villa"), "villa" );
	deepEqual( Stem("village"), "villag" );
	deepEqual( Stem("villagers"), "villag" );
	deepEqual( Stem("villages"), "villag" );
	deepEqual( Stem("villain"), "villain" );
	deepEqual( Stem("villainous"), "villain" );
	deepEqual( Stem("villains"), "villain" );
	deepEqual( Stem("villainy"), "villaini" );
	deepEqual( Stem("villarica"), "villarica" );
	deepEqual( Stem("villas"), "villa" );
	deepEqual( Stem("villechardouin"), "villechardouin" );
	deepEqual( Stem("villosus"), "villosus" );
	deepEqual( Stem("vilna"), "vilna" );
	deepEqual( Stem("vin"), "vin" );
	deepEqual( Stem("vincent"), "vincent" );
	deepEqual( Stem("vindicate"), "vindic" );
	deepEqual( Stem("vindicated"), "vindic" );
	deepEqual( Stem("vindication"), "vindic" );
	deepEqual( Stem("vindictive"), "vindict" );
	deepEqual( Stem("vindictively"), "vindict" );
	deepEqual( Stem("vindictiveness"), "vindict" );
	deepEqual( Stem("vine"), "vine" );
	deepEqual( Stem("vinegar"), "vinegar" );
	deepEqual( Stem("vines"), "vine" );
	deepEqual( Stem("vineyards"), "vineyard" );
	deepEqual( Stem("vino"), "vino" );
	deepEqual( Stem("vinoque"), "vinoqu" );
	deepEqual( Stem("vintems"), "vintem" );
	deepEqual( Stem("viola"), "viola" );
	deepEqual( Stem("violate"), "violat" );
	deepEqual( Stem("violated"), "violat" );
	deepEqual( Stem("violates"), "violat" );
	deepEqual( Stem("violation"), "violat" );
	deepEqual( Stem("violence"), "violenc" );
	deepEqual( Stem("violent"), "violent" );
	deepEqual( Stem("violently"), "violent" );
	deepEqual( Stem("violet"), "violet" );
	deepEqual( Stem("violets"), "violet" );
	deepEqual( Stem("violin"), "violin" );
	deepEqual( Stem("violins"), "violin" );
	deepEqual( Stem("violoncello"), "violoncello" );
	deepEqual( Stem("violoncellos"), "violoncello" );
	deepEqual( Stem("viper"), "viper" );
	deepEqual( Stem("vire"), "vire" );
	deepEqual( Stem("virgin"), "virgin" );
	deepEqual( Stem("virginian"), "virginian" );
	deepEqual( Stem("virgularia"), "virgularia" );
	deepEqual( Stem("virtually"), "virtual" );
	deepEqual( Stem("virtue"), "virtu" );
	deepEqual( Stem("virtues"), "virtu" );
	deepEqual( Stem("virtuous"), "virtuous" );
	deepEqual( Stem("virtuously"), "virtuous" );
	deepEqual( Stem("virulence"), "virul" );
	deepEqual( Stem("vis"), "vis" );
	deepEqual( Stem("visage"), "visag" );
	deepEqual( Stem("visaged"), "visag" );
	deepEqual( Stem("viscid"), "viscid" );
	deepEqual( Stem("vise"), "vise" );
	deepEqual( Stem("vish"), "vish" );
	deepEqual( Stem("vishera"), "vishera" );
	deepEqual( Stem("visible"), "visibl" );
	deepEqual( Stem("visibly"), "visibl" );
	deepEqual( Stem("vision"), "vision" );
	deepEqual( Stem("visionary"), "visionari" );
	deepEqual( Stem("visions"), "vision" );
	deepEqual( Stem("visit"), "visit" );
	deepEqual( Stem("visitation"), "visit" );
	deepEqual( Stem("visitations"), "visit" );
	deepEqual( Stem("visited"), "visit" );
	deepEqual( Stem("visiting"), "visit" );
	deepEqual( Stem("visitor"), "visitor" );
	deepEqual( Stem("visitors"), "visitor" );
	deepEqual( Stem("visits"), "visit" );
	deepEqual( Stem("vista"), "vista" );
	deepEqual( Stem("vitae"), "vita" );
	deepEqual( Stem("vital"), "vital" );
	deepEqual( Stem("vitality"), "vital" );
	deepEqual( Stem("vitally"), "vital" );
	deepEqual( Stem("vitals"), "vital" );
	deepEqual( Stem("vith"), "vith" );
	deepEqual( Stem("vithout"), "vithout" );
	deepEqual( Stem("vitiated"), "vitiat" );
	deepEqual( Stem("vitrified"), "vitrifi" );
	deepEqual( Stem("vittles"), "vittl" );
	deepEqual( Stem("vituperation"), "vituper" );
	deepEqual( Stem("vituperative"), "vitup" );
	deepEqual( Stem("vivacious"), "vivaci" );
	deepEqual( Stem("vivacity"), "vivac" );
	deepEqual( Stem("vive"), "vive" );
	deepEqual( Stem("vivid"), "vivid" );
	deepEqual( Stem("vividly"), "vivid" );
	deepEqual( Stem("vividness"), "vivid" );
	deepEqual( Stem("vivisecting"), "vivisect" );
	deepEqual( Stem("vivoras"), "vivora" );
	deepEqual( Stem("vixen"), "vixen" );
	deepEqual( Stem("vixenish"), "vixenish" );
	deepEqual( Stem("viz"), "viz" );
	deepEqual( Stem("vizier"), "vizier" );
	deepEqual( Stem("vm"), "vm" );
	deepEqual( Stem("vocabulary"), "vocabulari" );
	deepEqual( Stem("vocal"), "vocal" );
	deepEqual( Stem("vocalist"), "vocalist" );
	deepEqual( Stem("vocalists"), "vocalist" );
	deepEqual( Stem("vocation"), "vocat" );
	deepEqual( Stem("voce"), "voce" );
	deepEqual( Stem("vociferates"), "vocifer" );
	deepEqual( Stem("vociferous"), "vocifer" );
	deepEqual( Stem("vodka"), "vodka" );
	deepEqual( Stem("vogue"), "vogu" );
	deepEqual( Stem("voice"), "voic" );
	deepEqual( Stem("voiced"), "voic" );
	deepEqual( Stem("voices"), "voic" );
	deepEqual( Stem("void"), "void" );
	deepEqual( Stem("voir"), "voir" );
	deepEqual( Stem("vol"), "vol" );
	deepEqual( Stem("volatile"), "volatil" );
	deepEqual( Stem("volatilized"), "volatil" );
	deepEqual( Stem("volcanic"), "volcan" );
	deepEqual( Stem("volcano"), "volcano" );
	deepEqual( Stem("volcanoes"), "volcano" );
	deepEqual( Stem("volcanos"), "volcano" );
	deepEqual( Stem("volley"), "volley" );
	deepEqual( Stem("volleys"), "volley" );
	deepEqual( Stem("volney"), "volney" );
	deepEqual( Stem("volte"), "volt" );
	deepEqual( Stem("volubility"), "volubl" );
	deepEqual( Stem("voluble"), "volubl" );
	deepEqual( Stem("volubly"), "volubl" );
	deepEqual( Stem("volume"), "volum" );
	deepEqual( Stem("volumes"), "volum" );
	deepEqual( Stem("voluminous"), "volumin" );
	deepEqual( Stem("volumnia"), "volumnia" );
	deepEqual( Stem("volumnias"), "volumnia" );
	deepEqual( Stem("voluntarily"), "voluntarili" );
	deepEqual( Stem("voluntary"), "voluntari" );
	deepEqual( Stem("volunteer"), "volunt" );
	deepEqual( Stem("volunteered"), "volunt" );
	deepEqual( Stem("volunteering"), "volunt" );
	deepEqual( Stem("voluptuous"), "voluptu" );
	deepEqual( Stem("voluta"), "voluta" );
	deepEqual( Stem("volutas"), "voluta" );
	deepEqual( Stem("volute"), "volut" );
	deepEqual( Stem("vom"), "vom" );
	deepEqual( Stem("vomit"), "vomit" );
	deepEqual( Stem("von"), "von" );
	deepEqual( Stem("voraciously"), "voraci" );
	deepEqual( Stem("vortex"), "vortex" );
	deepEqual( Stem("vorticose"), "vorticos" );
	deepEqual( Stem("voskresensky"), "voskresenski" );
	deepEqual( Stem("votaries"), "votari" );
	deepEqual( Stem("vote"), "vote" );
	deepEqual( Stem("voted"), "vote" );
	deepEqual( Stem("voter"), "voter" );
	deepEqual( Stem("voters"), "voter" );
	deepEqual( Stem("votes"), "vote" );
	deepEqual( Stem("voting"), "vote" );
	deepEqual( Stem("vouch"), "vouch" );
	deepEqual( Stem("vouches"), "vouch" );
	deepEqual( Stem("vouchsafe"), "vouchsaf" );
	deepEqual( Stem("vouchsafed"), "vouchsaf" );
	deepEqual( Stem("vouchsafing"), "vouchsaf" );
	deepEqual( Stem("vous"), "vous" );
	deepEqual( Stem("vow"), "vow" );
	deepEqual( Stem("vowed"), "vow" );
	deepEqual( Stem("vowing"), "vow" );
	deepEqual( Stem("vows"), "vow" );
	deepEqual( Stem("voyage"), "voyag" );
	deepEqual( Stem("voyager"), "voyag" );
	deepEqual( Stem("voyagers"), "voyag" );
	deepEqual( Stem("voyages"), "voyag" );
	deepEqual( Stem("voznesensky"), "voznesenski" );
	deepEqual( Stem("vrazumihin"), "vrazumihin" );
	deepEqual( Stem("vremya"), "vremya" );
	deepEqual( Stem("vrow"), "vrow" );
	deepEqual( Stem("vue"), "vue" );
	deepEqual( Stem("vulgar"), "vulgar" );
	deepEqual( Stem("vulgarest"), "vulgarest" );
	deepEqual( Stem("vulgarise"), "vulgaris" );
	deepEqual( Stem("vulgarity"), "vulgar" );
	deepEqual( Stem("vultur"), "vultur" );
	deepEqual( Stem("vulture"), "vultur" );
	deepEqual( Stem("vultures"), "vultur" );
	deepEqual( Stem("w"), "w" );
	deepEqual( Stem("wa"), "wa" );
	deepEqual( Stem("waa"), "waa" );
	deepEqual( Stem("waants"), "waant" );
	deepEqual( Stem("waat"), "waat" );
	deepEqual( Stem("wackford"), "wackford" );
	deepEqual( Stem("wackfords"), "wackford" );
	deepEqual( Stem("wadded"), "wad" );
	deepEqual( Stem("wadding"), "wad" );
	deepEqual( Stem("waddling"), "waddl" );
	deepEqual( Stem("wade"), "wade" );
	deepEqual( Stem("waded"), "wade" );
	deepEqual( Stem("waders"), "wader" );
	deepEqual( Stem("wading"), "wade" );
	deepEqual( Stem("wafer"), "wafer" );
	deepEqual( Stem("wafered"), "wafer" );
	deepEqual( Stem("wafers"), "wafer" );
	deepEqual( Stem("waft"), "waft" );
	deepEqual( Stem("wafted"), "waft" );
	deepEqual( Stem("wage"), "wage" );
	deepEqual( Stem("waged"), "wage" );
	deepEqual( Stem("wager"), "wager" );
	deepEqual( Stem("wagers"), "wager" );
	deepEqual( Stem("wages"), "wage" );
	deepEqual( Stem("wagged"), "wag" );
	deepEqual( Stem("wagging"), "wag" );
	deepEqual( Stem("waggish"), "waggish" );
	deepEqual( Stem("waggishly"), "waggish" );
	deepEqual( Stem("waggon"), "waggon" );
	deepEqual( Stem("waggoner"), "waggon" );
	deepEqual( Stem("waggons"), "waggon" );
	deepEqual( Stem("wagner"), "wagner" );
	deepEqual( Stem("wagon"), "wagon" );
	deepEqual( Stem("wai"), "wai" );
	deepEqual( Stem("wail"), "wail" );
	deepEqual( Stem("wailed"), "wail" );
	deepEqual( Stem("wailing"), "wail" );
	deepEqual( Stem("wailings"), "wail" );
	deepEqual( Stem("wails"), "wail" );
	deepEqual( Stem("waimate"), "waimat" );
	deepEqual( Stem("wainscot"), "wainscot" );
	deepEqual( Stem("wainscotting"), "wainscot" );
	deepEqual( Stem("waiomio"), "waiomio" );
	deepEqual( Stem("waist"), "waist" );
	deepEqual( Stem("waistcoat"), "waistcoat" );
	deepEqual( Stem("waistcoats"), "waistcoat" );
	deepEqual( Stem("waisted"), "waist" );
	deepEqual( Stem("waists"), "waist" );
	deepEqual( Stem("wait"), "wait" );
	deepEqual( Stem("waited"), "wait" );
	deepEqual( Stem("waiter"), "waiter" );
	deepEqual( Stem("waiters"), "waiter" );
	deepEqual( Stem("waither"), "waither" );
	deepEqual( Stem("waiting"), "wait" );
	deepEqual( Stem("waitress"), "waitress" );
	deepEqual( Stem("waits"), "wait" );
	deepEqual( Stem("wake"), "wake" );
	deepEqual( Stem("waked"), "wake" );
	deepEqual( Stem("wakeful"), "wake" );
	deepEqual( Stem("wakefulness"), "wake" );
	deepEqual( Stem("wakened"), "waken" );
	deepEqual( Stem("wakening"), "waken" );
	deepEqual( Stem("wakes"), "wake" );
	deepEqual( Stem("waking"), "wake" );
	deepEqual( Stem("wakken"), "wakken" );
	deepEqual( Stem("walckanaer"), "walckana" );
	deepEqual( Stem("walcot"), "walcot" );
	deepEqual( Stem("wale"), "wale" );
	deepEqual( Stem("walerawang"), "walerawang" );
	deepEqual( Stem("wales"), "wale" );
	deepEqual( Stem("walk"), "walk" );
	deepEqual( Stem("walked"), "walk" );
	deepEqual( Stem("walker"), "walker" );
	deepEqual( Stem("walketh"), "walketh" );
	deepEqual( Stem("walking"), "walk" );
	deepEqual( Stem("walks"), "walk" );
	deepEqual( Stem("wall"), "wall" );
	deepEqual( Stem("walled"), "wall" );
	deepEqual( Stem("walleechu"), "walleechu" );
	deepEqual( Stem("wallenstein"), "wallenstein" );
	deepEqual( Stem("wallflower"), "wallflow" );
	deepEqual( Stem("wallflowers"), "wallflow" );
	deepEqual( Stem("wallow"), "wallow" );
	deepEqual( Stem("wallowing"), "wallow" );
	deepEqual( Stem("walls"), "wall" );
	deepEqual( Stem("walnut"), "walnut" );
	deepEqual( Stem("walpole"), "walpol" );
	deepEqual( Stem("walter"), "walter" );
	deepEqual( Stem("walting"), "walt" );
	deepEqual( Stem("waltz"), "waltz" );
	deepEqual( Stem("waltzed"), "waltz" );
	deepEqual( Stem("waltzes"), "waltz" );
	deepEqual( Stem("waltzing"), "waltz" );
	deepEqual( Stem("wan"), "wan" );
	deepEqual( Stem("wand"), "wand" );
	deepEqual( Stem("wander"), "wander" );
	deepEqual( Stem("wandered"), "wander" );
	deepEqual( Stem("wanderer"), "wander" );
	deepEqual( Stem("wanderers"), "wander" );
	deepEqual( Stem("wandering"), "wander" );
	deepEqual( Stem("wanderings"), "wander" );
	deepEqual( Stem("wanders"), "wander" );
	deepEqual( Stem("wands"), "wand" );
	deepEqual( Stem("wane"), "wane" );
	deepEqual( Stem("waned"), "wane" );
	deepEqual( Stem("wanness"), "wan" );
	deepEqual( Stem("wanst"), "wanst" );
	deepEqual( Stem("want"), "want" );
	deepEqual( Stem("wanted"), "want" );
	deepEqual( Stem("wanting"), "want" );
	deepEqual( Stem("wanton"), "wanton" );
	deepEqual( Stem("wantonly"), "wanton" );
	deepEqual( Stem("wantonness"), "wanton" );
	deepEqual( Stem("wants"), "want" );
	deepEqual( Stem("war"), "war" );
	deepEqual( Stem("warbler"), "warbler" );
	deepEqual( Stem("warbling"), "warbl" );
	deepEqual( Stem("warburton"), "warburton" );
	deepEqual( Stem("ward"), "ward" );
	deepEqual( Stem("warded"), "ward" );
	deepEqual( Stem("warder"), "warder" );
	deepEqual( Stem("warding"), "ward" );
	deepEqual( Stem("wardrobe"), "wardrob" );
	deepEqual( Stem("wardrobes"), "wardrob" );
	deepEqual( Stem("wards"), "ward" );
	deepEqual( Stem("ware"), "ware" );
	deepEqual( Stem("warehouse"), "warehous" );
	deepEqual( Stem("warehousemen"), "warehousemen" );
	deepEqual( Stem("warehouses"), "warehous" );
	deepEqual( Stem("wares"), "ware" );
	deepEqual( Stem("warfare"), "warfar" );
	deepEqual( Stem("warhorse"), "warhors" );
	deepEqual( Stem("warily"), "warili" );
	deepEqual( Stem("warking"), "wark" );
	deepEqual( Stem("warlike"), "warlik" );
	deepEqual( Stem("warm"), "warm" );
	deepEqual( Stem("warmed"), "warm" );
	deepEqual( Stem("warmer"), "warmer" );
	deepEqual( Stem("warmest"), "warmest" );
	deepEqual( Stem("warmhearted"), "warmheart" );
	deepEqual( Stem("warming"), "warm" );
	deepEqual( Stem("warmly"), "warm" );
	deepEqual( Stem("warms"), "warm" );
	deepEqual( Stem("warmth"), "warmth" );
	deepEqual( Stem("warn"), "warn" );
	deepEqual( Stem("warned"), "warn" );
	deepEqual( Stem("warning"), "warn" );
	deepEqual( Stem("warnings"), "warn" );
	deepEqual( Stem("warped"), "warp" );
	deepEqual( Stem("warrant"), "warrant" );
	deepEqual( Stem("warranted"), "warrant" );
	deepEqual( Stem("warrants"), "warrant" );
	deepEqual( Stem("warrens"), "warren" );
	deepEqual( Stem("warring"), "war" );
	deepEqual( Stem("warrior"), "warrior" );
	deepEqual( Stem("warriors"), "warrior" );
	deepEqual( Stem("warrn"), "warrn" );
	deepEqual( Stem("wars"), "war" );
	deepEqual( Stem("wart"), "wart" );
	deepEqual( Stem("warted"), "wart" );
	deepEqual( Stem("warts"), "wart" );
	deepEqual( Stem("warwick"), "warwick" );
	deepEqual( Stem("wary"), "wari" );
	deepEqual( Stem("was"), "was" );
	deepEqual( Stem("wasche"), "wasch" );
	deepEqual( Stem("wash"), "wash" );
	deepEqual( Stem("washed"), "wash" );
	deepEqual( Stem("washerwoman"), "washerwoman" );
	deepEqual( Stem("washery"), "washeri" );
	deepEqual( Stem("washes"), "wash" );
	deepEqual( Stem("washin"), "washin" );
	deepEqual( Stem("washing"), "wash" );
	deepEqual( Stem("washings"), "wash" );
	deepEqual( Stem("wasn"), "wasn" );
	deepEqual( Stem("wasp"), "wasp" );
	deepEqual( Stem("waste"), "wast" );
	deepEqual( Stem("wasted"), "wast" );
	deepEqual( Stem("wasteful"), "wast" );
	deepEqual( Stem("wastefulness"), "wast" );
	deepEqual( Stem("wastes"), "wast" );
	deepEqual( Stem("wasting"), "wast" );
	deepEqual( Stem("wat"), "wat" );
	deepEqual( Stem("watch"), "watch" );
	deepEqual( Stem("watched"), "watch" );
	deepEqual( Stem("watcher"), "watcher" );
	deepEqual( Stem("watchers"), "watcher" );
	deepEqual( Stem("watches"), "watch" );
	deepEqual( Stem("watchful"), "watch" );
	deepEqual( Stem("watchfully"), "watch" );
	deepEqual( Stem("watchfulness"), "watch" );
	deepEqual( Stem("watching"), "watch" );
	deepEqual( Stem("watchings"), "watch" );
	deepEqual( Stem("watchmaker"), "watchmak" );
	deepEqual( Stem("watchman"), "watchman" );
	deepEqual( Stem("watchmen"), "watchmen" );
	deepEqual( Stem("water"), "water" );
	deepEqual( Stem("watercourse"), "watercours" );
	deepEqual( Stem("watered"), "water" );
	deepEqual( Stem("waterfall"), "waterfal" );
	deepEqual( Stem("waterfalls"), "waterfal" );
	deepEqual( Stem("waterfloods"), "waterflood" );
	deepEqual( Stem("waterfowl"), "waterfowl" );
	deepEqual( Stem("waterhouse"), "waterhous" );
	deepEqual( Stem("watering"), "water" );
	deepEqual( Stem("waterloo"), "waterloo" );
	deepEqual( Stem("waterproof"), "waterproof" );
	deepEqual( Stem("waters"), "water" );
	deepEqual( Stem("watershed"), "watersh" );
	deepEqual( Stem("waterside"), "watersid" );
	deepEqual( Stem("waterwheel"), "waterwheel" );
	deepEqual( Stem("waterworn"), "waterworn" );
	deepEqual( Stem("watery"), "wateri" );
	deepEqual( Stem("wather"), "wather" );
	deepEqual( Stem("watkins"), "watkin" );
	deepEqual( Stem("watt"), "watt" );
	deepEqual( Stem("watts"), "watt" );
	deepEqual( Stem("wave"), "wave" );
	deepEqual( Stem("waved"), "wave" );
	deepEqual( Stem("wavered"), "waver" );
	deepEqual( Stem("wavering"), "waver" );
	deepEqual( Stem("waves"), "wave" );
	deepEqual( Stem("waving"), "wave" );
	deepEqual( Stem("wavy"), "wavi" );
	deepEqual( Stem("wax"), "wax" );
	deepEqual( Stem("waxed"), "wax" );
	deepEqual( Stem("waxen"), "waxen" );
	deepEqual( Stem("waxing"), "wax" );
	deepEqual( Stem("waxy"), "waxi" );
	deepEqual( Stem("way"), "way" );
	deepEqual( Stem("wayfarer"), "wayfar" );
	deepEqual( Stem("wayfarers"), "wayfar" );
	deepEqual( Stem("waylaid"), "waylaid" );
	deepEqual( Stem("waylay"), "waylay" );
	deepEqual( Stem("ways"), "way" );
	deepEqual( Stem("wayside"), "waysid" );
	deepEqual( Stem("wayward"), "wayward" );
	deepEqual( Stem("waywardness"), "wayward" );
	deepEqual( Stem("we"), "we" );
	deepEqual( Stem("weak"), "weak" );
	deepEqual( Stem("weaken"), "weaken" );
	deepEqual( Stem("weakened"), "weaken" );
	deepEqual( Stem("weakening"), "weaken" );
	deepEqual( Stem("weaker"), "weaker" );
	deepEqual( Stem("weakest"), "weakest" );
	deepEqual( Stem("weakly"), "weak" );
	deepEqual( Stem("weakness"), "weak" );
	deepEqual( Stem("weaknesses"), "weak" );
	deepEqual( Stem("weals"), "weal" );
	deepEqual( Stem("wealth"), "wealth" );
	deepEqual( Stem("wealthy"), "wealthi" );
	deepEqual( Stem("wean"), "wean" );
	deepEqual( Stem("weaning"), "wean" );
	deepEqual( Stem("weapon"), "weapon" );
	deepEqual( Stem("weapons"), "weapon" );
	deepEqual( Stem("wear"), "wear" );
	deepEqual( Stem("wearer"), "wearer" );
	deepEqual( Stem("wearers"), "wearer" );
	deepEqual( Stem("wearied"), "weari" );
	deepEqual( Stem("wearily"), "wearili" );
	deepEqual( Stem("weariness"), "weari" );
	deepEqual( Stem("wearing"), "wear" );
	deepEqual( Stem("wearisome"), "wearisom" );
	deepEqual( Stem("wears"), "wear" );
	deepEqual( Stem("weary"), "weari" );
	deepEqual( Stem("wearying"), "weari" );
	deepEqual( Stem("weasen"), "weasen" );
	deepEqual( Stem("weather"), "weather" );
	deepEqual( Stem("weatherboard"), "weatherboard" );
	deepEqual( Stem("weathercock"), "weathercock" );
	deepEqual( Stem("weathered"), "weather" );
	deepEqual( Stem("weathers"), "weather" );
	deepEqual( Stem("weave"), "weav" );
	deepEqual( Stem("weavers"), "weaver" );
	deepEqual( Stem("weaving"), "weav" );
	deepEqual( Stem("weazen"), "weazen" );
	deepEqual( Stem("weazened"), "weazen" );
	deepEqual( Stem("web"), "web" );
	deepEqual( Stem("webb"), "webb" );
	deepEqual( Stem("webbed"), "web" );
	deepEqual( Stem("webs"), "web" );
	deepEqual( Stem("webster"), "webster" );
	deepEqual( Stem("wed"), "wed" );
	deepEqual( Stem("wedded"), "wed" );
	deepEqual( Stem("weddin"), "weddin" );
	deepEqual( Stem("wedding"), "wed" );
	deepEqual( Stem("weddings"), "wed" );
	deepEqual( Stem("wedge"), "wedg" );
	deepEqual( Stem("wedged"), "wedg" );
	deepEqual( Stem("wedges"), "wedg" );
	deepEqual( Stem("wedlock"), "wedlock" );
	deepEqual( Stem("wednesday"), "wednesday" );
	deepEqual( Stem("wednesdays"), "wednesday" );
	deepEqual( Stem("weed"), "weed" );
	deepEqual( Stem("weeding"), "weed" );
	deepEqual( Stem("weeds"), "weed" );
	deepEqual( Stem("weedur"), "weedur" );
	deepEqual( Stem("weedy"), "weedi" );
	deepEqual( Stem("week"), "week" );
	deepEqual( Stem("weekly"), "week" );
	deepEqual( Stem("weeks"), "week" );
	deepEqual( Stem("weel"), "weel" );
	deepEqual( Stem("weep"), "weep" );
	deepEqual( Stem("weepers"), "weeper" );
	deepEqual( Stem("weeping"), "weep" );
	deepEqual( Stem("weeps"), "weep" );
	deepEqual( Stem("weevle"), "weevl" );
	deepEqual( Stem("wehr"), "wehr" );
	deepEqual( Stem("weigh"), "weigh" );
	deepEqual( Stem("weighed"), "weigh" );
	deepEqual( Stem("weighing"), "weigh" );
	deepEqual( Stem("weighs"), "weigh" );
	deepEqual( Stem("weight"), "weight" );
	deepEqual( Stem("weightily"), "weightili" );
	deepEqual( Stem("weights"), "weight" );
	deepEqual( Stem("weighty"), "weighti" );
	deepEqual( Stem("weir"), "weir" );
	deepEqual( Stem("weird"), "weird" );
	deepEqual( Stem("weirs"), "weir" );
	deepEqual( Stem("weise"), "weis" );
	deepEqual( Stem("welcome"), "welcom" );
	deepEqual( Stem("welcomed"), "welcom" );
	deepEqual( Stem("welcomer"), "welcom" );
	deepEqual( Stem("welcomes"), "welcom" );
	deepEqual( Stem("welcoming"), "welcom" );
	deepEqual( Stem("welfare"), "welfar" );
	deepEqual( Stem("well"), "well" );
	deepEqual( Stem("wellington"), "wellington" );
	deepEqual( Stem("wells"), "well" );
	deepEqual( Stem("welsh"), "welsh" );
	deepEqual( Stem("weltering"), "welter" );
	deepEqual( Stem("welveteen"), "welveteen" );
	deepEqual( Stem("wen"), "wen" );
	deepEqual( Stem("wench"), "wench" );
	deepEqual( Stem("wenches"), "wench" );
	deepEqual( Stem("wend"), "wend" );
	deepEqual( Stem("wended"), "wend" );
	deepEqual( Stem("wending"), "wend" );
	deepEqual( Stem("wengeance"), "wengeanc" );
	deepEqual( Stem("went"), "went" );
	deepEqual( Stem("weobly"), "weobli" );
	deepEqual( Stem("wepping"), "wep" );
	deepEqual( Stem("wept"), "wept" );
	deepEqual( Stem("wer"), "wer" );
	deepEqual( Stem("were"), "were" );
	deepEqual( Stem("weren"), "weren" );
	deepEqual( Stem("werry"), "werri" );
	deepEqual( Stem("wery"), "weri" );
	deepEqual( Stem("wessel"), "wessel" );
	deepEqual( Stem("west"), "west" );
	deepEqual( Stem("westerly"), "wester" );
	deepEqual( Stem("western"), "western" );
	deepEqual( Stem("westminster"), "westminst" );
	deepEqual( Stem("westmoreland"), "westmoreland" );
	deepEqual( Stem("westward"), "westward" );
	deepEqual( Stem("westwood"), "westwood" );
	deepEqual( Stem("wet"), "wet" );
	deepEqual( Stem("wets"), "wet" );
	deepEqual( Stem("wetted"), "wet" );
	deepEqual( Stem("wettest"), "wettest" );
	deepEqual( Stem("wetting"), "wet" );
	deepEqual( Stem("wexed"), "wex" );
	deepEqual( Stem("wha"), "wha" );
	deepEqual( Stem("whale"), "whale" );
	deepEqual( Stem("whalebones"), "whalebon" );
	deepEqual( Stem("whaler"), "whaler" );
	deepEqual( Stem("whalers"), "whaler" );
	deepEqual( Stem("whalery"), "whaleri" );
	deepEqual( Stem("whales"), "whale" );
	deepEqual( Stem("whaling"), "whale" );
	deepEqual( Stem("wharf"), "wharf" );
	deepEqual( Stem("wharton"), "wharton" );
	deepEqual( Stem("whartons"), "wharton" );
	deepEqual( Stem("wharves"), "wharv" );
	deepEqual( Stem("what"), "what" );
	deepEqual( Stem("whate"), "whate" );
	deepEqual( Stem("whatever"), "whatev" );
	deepEqual( Stem("whatsername"), "whatsernam" );
	deepEqual( Stem("whatsoever"), "whatsoev" );
	deepEqual( Stem("whe"), "whe" );
	deepEqual( Stem("wheat"), "wheat" );
	deepEqual( Stem("wheedled"), "wheedl" );
	deepEqual( Stem("wheedlin"), "wheedlin" );
	deepEqual( Stem("wheel"), "wheel" );
	deepEqual( Stem("wheelbarrow"), "wheelbarrow" );
	deepEqual( Stem("wheelbarrowful"), "wheelbarrow" );
	deepEqual( Stem("wheeled"), "wheel" );
	deepEqual( Stem("wheeling"), "wheel" );
	deepEqual( Stem("wheels"), "wheel" );
	deepEqual( Stem("wheelwright"), "wheelwright" );
	deepEqual( Stem("wheeze"), "wheez" );
	deepEqual( Stem("wheezing"), "wheez" );
	deepEqual( Stem("when"), "when" );
	deepEqual( Stem("whence"), "whenc" );
	deepEqual( Stem("whenever"), "whenev" );
	deepEqual( Stem("whensoever"), "whensoev" );
	deepEqual( Stem("wher"), "wher" );
	deepEqual( Stem("where"), "where" );
	deepEqual( Stem("whereabout"), "whereabout" );
	deepEqual( Stem("whereabouts"), "whereabout" );
	deepEqual( Stem("whereas"), "wherea" );
	deepEqual( Stem("whereat"), "whereat" );
	deepEqual( Stem("whereby"), "wherebi" );
	deepEqual( Stem("wherefore"), "wherefor" );
	deepEqual( Stem("wherein"), "wherein" );
	deepEqual( Stem("whereof"), "whereof" );
	deepEqual( Stem("whereon"), "whereon" );
	deepEqual( Stem("wheresoever"), "wheresoev" );
	deepEqual( Stem("whereupon"), "whereupon" );
	deepEqual( Stem("whereve"), "wherev" );
	deepEqual( Stem("wherever"), "wherev" );
	deepEqual( Stem("wherewith"), "wherewith" );
	deepEqual( Stem("whet"), "whet" );
	deepEqual( Stem("whethe"), "wheth" );
	deepEqual( Stem("whether"), "whether" );
	deepEqual( Stem("whew"), "whew" );
	deepEqual( Stem("whey"), "whey" );
	deepEqual( Stem("whic"), "whic" );
	deepEqual( Stem("which"), "which" );
	deepEqual( Stem("whichever"), "whichev" );
	deepEqual( Stem("whichsoever"), "whichsoev" );
	deepEqual( Stem("whiff"), "whiff" );
	deepEqual( Stem("whig"), "whig" );
	deepEqual( Stem("whigs"), "whig" );
	deepEqual( Stem("while"), "while" );
	deepEqual( Stem("whiles"), "while" );
	deepEqual( Stem("whilst"), "whilst" );
	deepEqual( Stem("whim"), "whim" );
	deepEqual( Stem("whimper"), "whimper" );
	deepEqual( Stem("whimpered"), "whimper" );
	deepEqual( Stem("whimpering"), "whimper" );
	deepEqual( Stem("whimpers"), "whimper" );
	deepEqual( Stem("whims"), "whim" );
	deepEqual( Stem("whimsical"), "whimsic" );
	deepEqual( Stem("whimsically"), "whimsic" );
	deepEqual( Stem("whined"), "whine" );
	deepEqual( Stem("whines"), "whine" );
	deepEqual( Stem("whining"), "whine" );
	deepEqual( Stem("whinstone"), "whinston" );
	deepEqual( Stem("whip"), "whip" );
	deepEqual( Stem("whipcord"), "whipcord" );
	deepEqual( Stem("whipped"), "whip" );
	deepEqual( Stem("whipper"), "whipper" );
	deepEqual( Stem("whipping"), "whip" );
	deepEqual( Stem("whips"), "whip" );
	deepEqual( Stem("whipster"), "whipster" );
	deepEqual( Stem("whipt"), "whipt" );
	deepEqual( Stem("whirl"), "whirl" );
	deepEqual( Stem("whirled"), "whirl" );
	deepEqual( Stem("whirling"), "whirl" );
	deepEqual( Stem("whirlpool"), "whirlpool" );
	deepEqual( Stem("whirls"), "whirl" );
	deepEqual( Stem("whirlwind"), "whirlwind" );
	deepEqual( Stem("whirr"), "whirr" );
	deepEqual( Stem("whish"), "whish" );
	deepEqual( Stem("whisk"), "whisk" );
	deepEqual( Stem("whisked"), "whisk" );
	deepEqual( Stem("whisker"), "whisker" );
	deepEqual( Stem("whiskered"), "whisker" );
	deepEqual( Stem("whiskers"), "whisker" );
	deepEqual( Stem("whisking"), "whisk" );
	deepEqual( Stem("whisky"), "whiski" );
	deepEqual( Stem("whisper"), "whisper" );
	deepEqual( Stem("whispered"), "whisper" );
	deepEqual( Stem("whisperers"), "whisper" );
	deepEqual( Stem("whispering"), "whisper" );
	deepEqual( Stem("whisperings"), "whisper" );
	deepEqual( Stem("whisperirig"), "whisperirig" );
	deepEqual( Stem("whispers"), "whisper" );
	deepEqual( Stem("whist"), "whist" );
	deepEqual( Stem("whistle"), "whistl" );
	deepEqual( Stem("whistled"), "whistl" );
	deepEqual( Stem("whistles"), "whistl" );
	deepEqual( Stem("whistling"), "whistl" );
	deepEqual( Stem("whit"), "whit" );
	deepEqual( Stem("white"), "white" );
	deepEqual( Stem("whitechapel"), "whitechapel" );
	deepEqual( Stem("whiteford"), "whiteford" );
	deepEqual( Stem("whitefriars"), "whitefriar" );
	deepEqual( Stem("whitened"), "whiten" );
	deepEqual( Stem("whiteness"), "white" );
	deepEqual( Stem("whitening"), "whiten" );
	deepEqual( Stem("whiter"), "whiter" );
	deepEqual( Stem("whites"), "white" );
	deepEqual( Stem("whitest"), "whitest" );
	deepEqual( Stem("whitewash"), "whitewash" );
	deepEqual( Stem("whitewashed"), "whitewash" );
	deepEqual( Stem("whitewashing"), "whitewash" );
	deepEqual( Stem("whitey"), "whitey" );
	deepEqual( Stem("whitford"), "whitford" );
	deepEqual( Stem("whither"), "whither" );
	deepEqual( Stem("whitish"), "whitish" );
	deepEqual( Stem("whitsunday"), "whitsunday" );
	deepEqual( Stem("whitsuntide"), "whitsuntid" );
	deepEqual( Stem("whittington"), "whittington" );
	deepEqual( Stem("whity"), "whiti" );
	deepEqual( Stem("who"), "who" );
	deepEqual( Stem("whoam"), "whoam" );
	deepEqual( Stem("whoever"), "whoever" );
	deepEqual( Stem("whol"), "whol" );
	deepEqual( Stem("whole"), "whole" );
	deepEqual( Stem("wholesale"), "wholesal" );
	deepEqual( Stem("wholesome"), "wholesom" );
	deepEqual( Stem("wholesomely"), "wholesom" );
	deepEqual( Stem("wholesomer"), "wholesom" );
	deepEqual( Stem("wholly"), "wholli" );
	deepEqual( Stem("whom"), "whom" );
	deepEqual( Stem("whomsoever"), "whomsoev" );
	deepEqual( Stem("whoo"), "whoo" );
	deepEqual( Stem("whooping"), "whoop" );
	deepEqual( Stem("whoosh"), "whoosh" );
	deepEqual( Stem("whose"), "whose" );
	deepEqual( Stem("whosoever"), "whosoev" );
	deepEqual( Stem("why"), "whi" );
	deepEqual( Stem("whytorseller"), "whytorsel" );
	deepEqual( Stem("wi"), "wi" );
	deepEqual( Stem("wice"), "wice" );
	deepEqual( Stem("wicious"), "wicious" );
	deepEqual( Stem("wick"), "wick" );
	deepEqual( Stem("wicked"), "wick" );
	deepEqual( Stem("wickedest"), "wickedest" );
	deepEqual( Stem("wickedly"), "wick" );
	deepEqual( Stem("wickedness"), "wicked" );
	deepEqual( Stem("wicker"), "wicker" );
	deepEqual( Stem("wicket"), "wicket" );
	deepEqual( Stem("wickham"), "wickham" );
	deepEqual( Stem("widder"), "widder" );
	deepEqual( Stem("wide"), "wide" );
	deepEqual( Stem("widely"), "wide" );
	deepEqual( Stem("widened"), "widen" );
	deepEqual( Stem("wider"), "wider" );
	deepEqual( Stem("widespread"), "widespread" );
	deepEqual( Stem("widest"), "widest" );
	deepEqual( Stem("widow"), "widow" );
	deepEqual( Stem("widowed"), "widow" );
	deepEqual( Stem("widower"), "widow" );
	deepEqual( Stem("widowhood"), "widowhood" );
	deepEqual( Stem("widows"), "widow" );
	deepEqual( Stem("width"), "width" );
	deepEqual( Stem("widths"), "width" );
	deepEqual( Stem("wield"), "wield" );
	deepEqual( Stem("wielded"), "wield" );
	deepEqual( Stem("wife"), "wife" );
	deepEqual( Stem("wig"), "wig" );
	deepEqual( Stem("wight"), "wight" );
	deepEqual( Stem("wiglomeration"), "wiglomer" );
	deepEqual( Stem("wigmaker"), "wigmak" );
	deepEqual( Stem("wigmore"), "wigmor" );
	deepEqual( Stem("wigs"), "wig" );
	deepEqual( Stem("wigwam"), "wigwam" );
	deepEqual( Stem("wigwams"), "wigwam" );
	deepEqual( Stem("wil"), "wil" );
	deepEqual( Stem("wild"), "wild" );
	deepEqual( Stem("wilder"), "wilder" );
	deepEqual( Stem("wilderness"), "wilder" );
	deepEqual( Stem("wildest"), "wildest" );
	deepEqual( Stem("wildly"), "wild" );
	deepEqual( Stem("wildness"), "wild" );
	deepEqual( Stem("wile"), "wile" );
	deepEqual( Stem("wiled"), "wile" );
	deepEqual( Stem("wiles"), "wile" );
	deepEqual( Stem("wilful"), "wil" );
	deepEqual( Stem("wilfully"), "wil" );
	deepEqual( Stem("wilfulness"), "wil" );
	deepEqual( Stem("wilheim"), "wilheim" );
	deepEqual( Stem("will"), "will" );
	deepEqual( Stem("willage"), "willag" );
	deepEqual( Stem("willed"), "will" );
	deepEqual( Stem("william"), "william" );
	deepEqual( Stem("williams"), "william" );
	deepEqual( Stem("willin"), "willin" );
	deepEqual( Stem("willing"), "will" );
	deepEqual( Stem("willingiy"), "willingiy" );
	deepEqual( Stem("willingly"), "will" );
	deepEqual( Stem("willingness"), "willing" );
	deepEqual( Stem("willinwodd"), "willinwodd" );
	deepEqual( Stem("willl"), "willl" );
	deepEqual( Stem("willow"), "willow" );
	deepEqual( Stem("willows"), "willow" );
	deepEqual( Stem("wills"), "will" );
	deepEqual( Stem("willst"), "willst" );
	deepEqual( Stem("willy"), "willi" );
	deepEqual( Stem("wilmot"), "wilmot" );
	deepEqual( Stem("wilson"), "wilson" );
	deepEqual( Stem("wilt"), "wilt" );
	deepEqual( Stem("wily"), "wili" );
	deepEqual( Stem("win"), "win" );
	deepEqual( Stem("winced"), "winc" );
	deepEqual( Stem("winchester"), "winchest" );
	deepEqual( Stem("wincing"), "winc" );
	deepEqual( Stem("wind"), "wind" );
	deepEqual( Stem("winded"), "wind" );
	deepEqual( Stem("winder"), "winder" );
	deepEqual( Stem("winders"), "winder" );
	deepEqual( Stem("winding"), "wind" );
	deepEqual( Stem("windings"), "wind" );
	deepEqual( Stem("windlass"), "windlass" );
	deepEqual( Stem("windmill"), "windmil" );
	deepEqual( Stem("windmills"), "windmil" );
	deepEqual( Stem("window"), "window" );
	deepEqual( Stem("windowed"), "window" );
	deepEqual( Stem("windows"), "window" );
	deepEqual( Stem("windpipe"), "windpip" );
	deepEqual( Stem("winds"), "wind" );
	deepEqual( Stem("windsor"), "windsor" );
	deepEqual( Stem("windward"), "windward" );
	deepEqual( Stem("windy"), "windi" );
	deepEqual( Stem("wine"), "wine" );
	deepEqual( Stem("wineglassful"), "wineglass" );
	deepEqual( Stem("wines"), "wine" );
	deepEqual( Stem("wing"), "wing" );
	deepEqual( Stem("winged"), "wing" );
	deepEqual( Stem("wingfield"), "wingfield" );
	deepEqual( Stem("wingless"), "wingless" );
	deepEqual( Stem("wings"), "wing" );
	deepEqual( Stem("wink"), "wink" );
	deepEqual( Stem("winked"), "wink" );
	deepEqual( Stem("winking"), "wink" );
	deepEqual( Stem("winkles"), "winkl" );
	deepEqual( Stem("winks"), "wink" );
	deepEqual( Stem("winner"), "winner" );
	deepEqual( Stem("winning"), "win" );
	deepEqual( Stem("winnings"), "win" );
	deepEqual( Stem("winnowing"), "winnow" );
	deepEqual( Stem("wins"), "win" );
	deepEqual( Stem("winter"), "winter" );
	deepEqual( Stem("winters"), "winter" );
	deepEqual( Stem("wintry"), "wintri" );
	deepEqual( Stem("wiolinceller"), "wiolincel" );
	deepEqual( Stem("wiolincellers"), "wiolincel" );
	deepEqual( Stem("wipe"), "wipe" );
	deepEqual( Stem("wiped"), "wipe" );
	deepEqual( Stem("wipes"), "wipe" );
	deepEqual( Stem("wiping"), "wipe" );
	deepEqual( Stem("wire"), "wire" );
	deepEqual( Stem("wires"), "wire" );
	deepEqual( Stem("wiry"), "wiri" );
	deepEqual( Stem("wis"), "wis" );
	deepEqual( Stem("wisdom"), "wisdom" );
	deepEqual( Stem("wise"), "wise" );
	deepEqual( Stem("wisely"), "wise" );
	deepEqual( Stem("wiser"), "wiser" );
	deepEqual( Stem("wisest"), "wisest" );
	deepEqual( Stem("wish"), "wish" );
	deepEqual( Stem("wished"), "wish" );
	deepEqual( Stem("wisher"), "wisher" );
	deepEqual( Stem("wishermaydie"), "wishermaydi" );
	deepEqual( Stem("wishes"), "wish" );
	deepEqual( Stem("wishful"), "wish" );
	deepEqual( Stem("wishing"), "wish" );
	deepEqual( Stem("wisit"), "wisit" );
	deepEqual( Stem("wisitation"), "wisit" );
	deepEqual( Stem("wisitations"), "wisit" );
	deepEqual( Stem("wisitin"), "wisitin" );
	deepEqual( Stem("wisiting"), "wisit" );
	deepEqual( Stem("wisk"), "wisk" );
	deepEqual( Stem("wisp"), "wisp" );
	deepEqual( Stem("wiss"), "wiss" );
	deepEqual( Stem("wissen"), "wissen" );
	deepEqual( Stem("wistful"), "wist" );
	deepEqual( Stem("wistfully"), "wist" );
	deepEqual( Stem("wit"), "wit" );
	deepEqual( Stem("witch"), "witch" );
	deepEqual( Stem("witchcraft"), "witchcraft" );
	deepEqual( Stem("witchery"), "witcheri" );
	deepEqual( Stem("witches"), "witch" );
	deepEqual( Stem("with"), "with" );
	deepEqual( Stem("withal"), "withal" );
	deepEqual( Stem("withdraw"), "withdraw" );
	deepEqual( Stem("withdrawal"), "withdraw" );
	deepEqual( Stem("withdrawed"), "withdraw" );
	deepEqual( Stem("withdrawing"), "withdraw" );
	deepEqual( Stem("withdrawn"), "withdrawn" );
	deepEqual( Stem("withdraws"), "withdraw" );
	deepEqual( Stem("withdrew"), "withdrew" );
	deepEqual( Stem("wither"), "wither" );
	deepEqual( Stem("withered"), "wither" );
	deepEqual( Stem("withering"), "wither" );
	deepEqual( Stem("withers"), "wither" );
	deepEqual( Stem("withheld"), "withheld" );
	deepEqual( Stem("withhold"), "withhold" );
	deepEqual( Stem("withi"), "withi" );
	deepEqual( Stem("within"), "within" );
	deepEqual( Stem("withou"), "withou" );
	deepEqual( Stem("without"), "without" );
	deepEqual( Stem("withstand"), "withstand" );
	deepEqual( Stem("withstood"), "withstood" );
	deepEqual( Stem("wititterly"), "wititt" );
	deepEqual( Stem("wititterlys"), "wititt" );
	deepEqual( Stem("witness"), "wit" );
	deepEqual( Stem("witnessed"), "wit" );
	deepEqual( Stem("witnesses"), "wit" );
	deepEqual( Stem("witnessing"), "wit" );
	deepEqual( Stem("wits"), "wit" );
	deepEqual( Stem("witted"), "wit" );
	deepEqual( Stem("witticism"), "wittic" );
	deepEqual( Stem("witticisms"), "wittic" );
	deepEqual( Stem("wittier"), "wittier" );
	deepEqual( Stem("wittily"), "wittili" );
	deepEqual( Stem("wittles"), "wittl" );
	deepEqual( Stem("witty"), "witti" );
	deepEqual( Stem("wives"), "wive" );
	deepEqual( Stem("wizard"), "wizard" );
	deepEqual( Stem("wizened"), "wizen" );
	deepEqual( Stem("wlll"), "wlll" );
	deepEqual( Stem("wo"), "wo" );
	deepEqual( Stem("woa"), "woa" );
	deepEqual( Stem("woe"), "woe" );
	deepEqual( Stem("woebegone"), "woebegon" );
	deepEqual( Stem("woeful"), "woeful" );
	deepEqual( Stem("woes"), "woe" );
	deepEqual( Stem("woful"), "woful" );
	deepEqual( Stem("wofully"), "wofulli" );
	deepEqual( Stem("woice"), "woic" );
	deepEqual( Stem("woices"), "woic" );
	deepEqual( Stem("woke"), "woke" );
	deepEqual( Stem("wold"), "wold" );
	deepEqual( Stem("wolds"), "wold" );
	deepEqual( Stem("wolf"), "wolf" );
	deepEqual( Stem("wolgan"), "wolgan" );
	deepEqual( Stem("wollaston"), "wollaston" );
	deepEqual( Stem("wolsey"), "wolsey" );
	deepEqual( Stem("wolves"), "wolv" );
	deepEqual( Stem("woman"), "woman" );
	deepEqual( Stem("womanhood"), "womanhood" );
	deepEqual( Stem("womanish"), "womanish" );
	deepEqual( Stem("womankind"), "womankind" );
	deepEqual( Stem("womanly"), "woman" );
	deepEqual( Stem("women"), "women" );
	deepEqual( Stem("won"), "won" );
	deepEqual( Stem("wonder"), "wonder" );
	deepEqual( Stem("wondered"), "wonder" );
	deepEqual( Stem("wonderful"), "wonder" );
	deepEqual( Stem("wonderfully"), "wonder" );
	deepEqual( Stem("wondering"), "wonder" );
	deepEqual( Stem("wonderingly"), "wonder" );
	deepEqual( Stem("wonderment"), "wonder" );
	deepEqual( Stem("wonders"), "wonder" );
	deepEqual( Stem("wondrous"), "wondrous" );
	deepEqual( Stem("wonld"), "wonld" );
	deepEqual( Stem("wont"), "wont" );
	deepEqual( Stem("wonted"), "wont" );
	deepEqual( Stem("woo"), "woo" );
	deepEqual( Stem("wood"), "wood" );
	deepEqual( Stem("woodbine"), "woodbin" );
	deepEqual( Stem("woodchips"), "woodchip" );
	deepEqual( Stem("woodcot"), "woodcot" );
	deepEqual( Stem("woodcourt"), "woodcourt" );
	deepEqual( Stem("woodcut"), "woodcut" );
	deepEqual( Stem("wooded"), "wood" );
	deepEqual( Stem("wooden"), "wooden" );
	deepEqual( Stem("woodland"), "woodland" );
	deepEqual( Stem("woodlouse"), "woodlous" );
	deepEqual( Stem("woodman"), "woodman" );
	deepEqual( Stem("woodpecker"), "woodpeck" );
	deepEqual( Stem("woods"), "wood" );
	deepEqual( Stem("woodwork"), "woodwork" );
	deepEqual( Stem("woody"), "woodi" );
	deepEqual( Stem("wooed"), "woo" );
	deepEqual( Stem("wool"), "wool" );
	deepEqual( Stem("woolen"), "woolen" );
	deepEqual( Stem("woollen"), "woollen" );
	deepEqual( Stem("woolly"), "woolli" );
	deepEqual( Stem("woollya"), "woollya" );
	deepEqual( Stem("woolsack"), "woolsack" );
	deepEqual( Stem("woolwich"), "woolwich" );
	deepEqual( Stem("wooman"), "wooman" );
	deepEqual( Stem("wor"), "wor" );
	deepEqual( Stem("word"), "word" );
	deepEqual( Stem("worded"), "word" );
	deepEqual( Stem("wording"), "word" );
	deepEqual( Stem("words"), "word" );
	deepEqual( Stem("wordsworth"), "wordsworth" );
	deepEqual( Stem("wordy"), "wordi" );
	deepEqual( Stem("wore"), "wore" );
	deepEqual( Stem("worid"), "worid" );
	deepEqual( Stem("work"), "work" );
	deepEqual( Stem("workaday"), "workaday" );
	deepEqual( Stem("workbox"), "workbox" );
	deepEqual( Stem("worked"), "work" );
	deepEqual( Stem("worker"), "worker" );
	deepEqual( Stem("workers"), "worker" );
	deepEqual( Stem("workhouse"), "workhous" );
	deepEqual( Stem("working"), "work" );
	deepEqual( Stem("workings"), "work" );
	deepEqual( Stem("workman"), "workman" );
	deepEqual( Stem("workmanlike"), "workmanlik" );
	deepEqual( Stem("workmanship"), "workmanship" );
	deepEqual( Stem("workmen"), "workmen" );
	deepEqual( Stem("workroom"), "workroom" );
	deepEqual( Stem("works"), "work" );
	deepEqual( Stem("workshop"), "workshop" );
	deepEqual( Stem("workshops"), "workshop" );
	deepEqual( Stem("world"), "world" );
	deepEqual( Stem("worldliness"), "worldli" );
	deepEqual( Stem("worldlings"), "worldl" );
	deepEqual( Stem("worldly"), "world" );
	deepEqual( Stem("worlds"), "world" );
	deepEqual( Stem("worm"), "worm" );
	deepEqual( Stem("worming"), "worm" );
	deepEqual( Stem("worms"), "worm" );
	deepEqual( Stem("wormwood"), "wormwood" );
	deepEqual( Stem("worn"), "worn" );
	deepEqual( Stem("worried"), "worri" );
	deepEqual( Stem("worries"), "worri" );
	deepEqual( Stem("worrit"), "worrit" );
	deepEqual( Stem("worrited"), "worrit" );
	deepEqual( Stem("worritted"), "worrit" );
	deepEqual( Stem("worry"), "worri" );
	deepEqual( Stem("worrying"), "worri" );
	deepEqual( Stem("worse"), "wors" );
	deepEqual( Stem("worship"), "worship" );
	deepEqual( Stem("worshipped"), "worship" );
	deepEqual( Stem("worshippers"), "worshipp" );
	deepEqual( Stem("worships"), "worship" );
	deepEqual( Stem("worst"), "worst" );
	deepEqual( Stem("worsted"), "worst" );
	deepEqual( Stem("worsteds"), "worst" );
	deepEqual( Stem("worth"), "worth" );
	deepEqual( Stem("worthbourne"), "worthbourn" );
	deepEqual( Stem("worthier"), "worthier" );
	deepEqual( Stem("worthies"), "worthi" );
	deepEqual( Stem("worthily"), "worthili" );
	deepEqual( Stem("worthless"), "worthless" );
	deepEqual( Stem("worthlessness"), "worthless" );
	deepEqual( Stem("worthwhile"), "worthwhil" );
	deepEqual( Stem("worthy"), "worthi" );
	deepEqual( Stem("wos"), "wos" );
	deepEqual( Stem("wot"), "wot" );
	deepEqual( Stem("woul"), "woul" );
	deepEqual( Stem("would"), "would" );
	deepEqual( Stem("wouldest"), "wouldest" );
	deepEqual( Stem("wouldn"), "wouldn" );
	deepEqual( Stem("wound"), "wound" );
	deepEqual( Stem("wounded"), "wound" );
	deepEqual( Stem("wounding"), "wound" );
	deepEqual( Stem("wounds"), "wound" );
	deepEqual( Stem("woven"), "woven" );
	deepEqual( Stem("wow"), "wow" );
	deepEqual( Stem("wows"), "wow" );
	deepEqual( Stem("wrangerton"), "wrangerton" );
	deepEqual( Stem("wrangle"), "wrangl" );
	deepEqual( Stem("wrangling"), "wrangl" );
	deepEqual( Stem("wrap"), "wrap" );
	deepEqual( Stem("wrapped"), "wrap" );
	deepEqual( Stem("wrapper"), "wrapper" );
	deepEqual( Stem("wrappers"), "wrapper" );
	deepEqual( Stem("wrapping"), "wrap" );
	deepEqual( Stem("wrappings"), "wrap" );
	deepEqual( Stem("wrapt"), "wrapt" );
	deepEqual( Stem("wrath"), "wrath" );
	deepEqual( Stem("wrathful"), "wrath" );
	deepEqual( Stem("wrathfully"), "wrath" );
	deepEqual( Stem("wreaked"), "wreak" );
	deepEqual( Stem("wreaking"), "wreak" );
	deepEqual( Stem("wreath"), "wreath" );
	deepEqual( Stem("wreathed"), "wreath" );
	deepEqual( Stem("wreathes"), "wreath" );
	deepEqual( Stem("wreathing"), "wreath" );
	deepEqual( Stem("wreaths"), "wreath" );
	deepEqual( Stem("wreck"), "wreck" );
	deepEqual( Stem("wrecked"), "wreck" );
	deepEqual( Stem("wren"), "wren" );
	deepEqual( Stem("wrench"), "wrench" );
	deepEqual( Stem("wrenched"), "wrench" );
	deepEqual( Stem("wrenching"), "wrench" );
	deepEqual( Stem("wrens"), "wren" );
	deepEqual( Stem("wrested"), "wrest" );
	deepEqual( Stem("wresting"), "wrest" );
	deepEqual( Stem("wrestle"), "wrestl" );
	deepEqual( Stem("wrestling"), "wrestl" );
	deepEqual( Stem("wretch"), "wretch" );
	deepEqual( Stem("wretched"), "wretch" );
	deepEqual( Stem("wretchedest"), "wretchedest" );
	deepEqual( Stem("wretchedly"), "wretch" );
	deepEqual( Stem("wretchedness"), "wretched" );
	deepEqual( Stem("wretches"), "wretch" );
	deepEqual( Stem("wriggling"), "wriggl" );
	deepEqual( Stem("wring"), "wring" );
	deepEqual( Stem("wringing"), "wring" );
	deepEqual( Stem("wrings"), "wring" );
	deepEqual( Stem("wrinkle"), "wrinkl" );
	deepEqual( Stem("wrinkled"), "wrinkl" );
	deepEqual( Stem("wrinkles"), "wrinkl" );
	deepEqual( Stem("wrinkling"), "wrinkl" );
	deepEqual( Stem("wrist"), "wrist" );
	deepEqual( Stem("wristbands"), "wristband" );
	deepEqual( Stem("wrists"), "wrist" );
	deepEqual( Stem("writ"), "writ" );
	deepEqual( Stem("write"), "write" );
	deepEqual( Stem("writer"), "writer" );
	deepEqual( Stem("writers"), "writer" );
	deepEqual( Stem("writes"), "write" );
	deepEqual( Stem("writhe"), "writh" );
	deepEqual( Stem("writhed"), "writh" );
	deepEqual( Stem("writhing"), "writh" );
	deepEqual( Stem("writhings"), "writh" );
	deepEqual( Stem("writin"), "writin" );
	deepEqual( Stem("writing"), "write" );
	deepEqual( Stem("writings"), "write" );
	deepEqual( Stem("written"), "written" );
	deepEqual( Stem("wrong"), "wrong" );
	deepEqual( Stem("wrongdoing"), "wrongdo" );
	deepEqual( Stem("wronged"), "wrong" );
	deepEqual( Stem("wrongfully"), "wrong" );
	deepEqual( Stem("wronging"), "wrong" );
	deepEqual( Stem("wrongly"), "wrong" );
	deepEqual( Stem("wrongs"), "wrong" );
	deepEqual( Stem("wrote"), "wrote" );
	deepEqual( Stem("wroth"), "wroth" );
	deepEqual( Stem("wrought"), "wrought" );
	deepEqual( Stem("wrung"), "wrung" );
	deepEqual( Stem("wry"), "wri" );
	deepEqual( Stem("wrymug"), "wrymug" );
	deepEqual( Stem("wull"), "wull" );
	deepEqual( Stem("wuns"), "wun" );
	deepEqual( Stem("wunst"), "wunst" );
	deepEqual( Stem("wur"), "wur" );
	deepEqual( Stem("wurd"), "wurd" );
	deepEqual( Stem("wye"), "wye" );
	deepEqual( Stem("wyelands"), "wyeland" );
	deepEqual( Stem("wyndham"), "wyndham" );
	deepEqual( Stem("x"), "x" );
	deepEqual( Stem("xi"), "xi" );
	deepEqual( Stem("xii"), "xii" );
	deepEqual( Stem("xiii"), "xiii" );
	deepEqual( Stem("xiv"), "xiv" );
	deepEqual( Stem("xix"), "xix" );
	deepEqual( Stem("xl"), "xl" );
	deepEqual( Stem("xli"), "xli" );
	deepEqual( Stem("xlii"), "xlii" );
	deepEqual( Stem("xliii"), "xliii" );
	deepEqual( Stem("xliv"), "xliv" );
	deepEqual( Stem("xlix"), "xlix" );
	deepEqual( Stem("xlv"), "xlv" );
	deepEqual( Stem("xlvi"), "xlvi" );
	deepEqual( Stem("xlvii"), "xlvii" );
	deepEqual( Stem("xlviii"), "xlviii" );
	deepEqual( Stem("xv"), "xv" );
	deepEqual( Stem("xvi"), "xvi" );
	deepEqual( Stem("xvii"), "xvii" );
	deepEqual( Stem("xviii"), "xviii" );
	deepEqual( Stem("xx"), "xx" );
	deepEqual( Stem("xxi"), "xxi" );
	deepEqual( Stem("xxii"), "xxii" );
	deepEqual( Stem("xxiii"), "xxiii" );
	deepEqual( Stem("xxiv"), "xxiv" );
	deepEqual( Stem("xxix"), "xxix" );
	deepEqual( Stem("xxv"), "xxv" );
	deepEqual( Stem("xxvi"), "xxvi" );
	deepEqual( Stem("xxvii"), "xxvii" );
	deepEqual( Stem("xxviii"), "xxviii" );
	deepEqual( Stem("xxx"), "xxx" );
	deepEqual( Stem("xxxi"), "xxxi" );
	deepEqual( Stem("xxxii"), "xxxii" );
	deepEqual( Stem("xxxiii"), "xxxiii" );
	deepEqual( Stem("xxxiv"), "xxxiv" );
	deepEqual( Stem("xxxix"), "xxxix" );
	deepEqual( Stem("xxxv"), "xxxv" );
	deepEqual( Stem("xxxvi"), "xxxvi" );
	deepEqual( Stem("xxxvii"), "xxxvii" );
	deepEqual( Stem("xxxviii"), "xxxviii" );
	deepEqual( Stem("y"), "y" );
	deepEqual( Stem("ya"), "ya" );
	deepEqual( Stem("yacht"), "yacht" );
	deepEqual( Stem("yachting"), "yacht" );
	deepEqual( Stem("yagouaroundi"), "yagouaroundi" );
	deepEqual( Stem("yam"), "yam" );
	deepEqual( Stem("yammerschooner"), "yammerschoon" );
	deepEqual( Stem("yammerschoonering"), "yammerschoon" );
	deepEqual( Stem("yams"), "yam" );
	deepEqual( Stem("yan"), "yan" );
	deepEqual( Stem("yankee"), "yanke" );
	deepEqual( Stem("yaquil"), "yaquil" );
	deepEqual( Stem("yard"), "yard" );
	deepEqual( Stem("yards"), "yard" );
	deepEqual( Stem("yarn"), "yarn" );
	deepEqual( Stem("yataghan"), "yataghan" );
	deepEqual( Stem("yawl"), "yawl" );
	deepEqual( Stem("yawn"), "yawn" );
	deepEqual( Stem("yawned"), "yawn" );
	deepEqual( Stem("yawning"), "yawn" );
	deepEqual( Stem("yawns"), "yawn" );
	deepEqual( Stem("ye"), "ye" );
	deepEqual( Stem("yea"), "yea" );
	deepEqual( Stem("year"), "year" );
	deepEqual( Stem("yearly"), "year" );
	deepEqual( Stem("yearned"), "yearn" );
	deepEqual( Stem("yearning"), "yearn" );
	deepEqual( Stem("yearnings"), "yearn" );
	deepEqual( Stem("years"), "year" );
	deepEqual( Stem("yegorovna"), "yegorovna" );
	deepEqual( Stem("yell"), "yell" );
	deepEqual( Stem("yelled"), "yell" );
	deepEqual( Stem("yelling"), "yell" );
	deepEqual( Stem("yellow"), "yellow" );
	deepEqual( Stem("yellowed"), "yellow" );
	deepEqual( Stem("yellower"), "yellow" );
	deepEqual( Stem("yellowish"), "yellowish" );
	deepEqual( Stem("yells"), "yell" );
	deepEqual( Stem("yelping"), "yelp" );
	deepEqual( Stem("yeoman"), "yeoman" );
	deepEqual( Stem("yerba"), "yerba" );
	deepEqual( Stem("yes"), "yes" );
	deepEqual( Stem("yesday"), "yesday" );
	deepEqual( Stem("yeso"), "yeso" );
	deepEqual( Stem("yesterday"), "yesterday" );
	deepEqual( Stem("yet"), "yet" );
	deepEqual( Stem("yew"), "yew" );
	deepEqual( Stem("yield"), "yield" );
	deepEqual( Stem("yielded"), "yield" );
	deepEqual( Stem("yielding"), "yield" );
	deepEqual( Stem("yields"), "yield" );
	deepEqual( Stem("yinder"), "yinder" );
	deepEqual( Stem("yit"), "yit" );
	deepEqual( Stem("yo"), "yo" );
	deepEqual( Stem("yoke"), "yoke" );
	deepEqual( Stem("yokes"), "yoke" );
	deepEqual( Stem("yolk"), "yolk" );
	deepEqual( Stem("yon"), "yon" );
	deepEqual( Stem("yonder"), "yonder" );
	deepEqual( Stem("yonge"), "yong" );
	deepEqual( Stem("yoong"), "yoong" );
	deepEqual( Stem("yoongster"), "yoongster" );
	deepEqual( Stem("yore"), "yore" );
	deepEqual( Stem("yorick"), "yorick" );
	deepEqual( Stem("york"), "york" );
	deepEqual( Stem("yorkshire"), "yorkshir" );
	deepEqual( Stem("yorkshireman"), "yorkshireman" );
	deepEqual( Stem("you"), "you" );
	deepEqual( Stem("youn"), "youn" );
	deepEqual( Stem("young"), "young" );
	deepEqual( Stem("younger"), "younger" );
	deepEqual( Stem("youngest"), "youngest" );
	deepEqual( Stem("youngster"), "youngster" );
	deepEqual( Stem("youngsters"), "youngster" );
	deepEqual( Stem("your"), "your" );
	deepEqual( Stem("yours"), "your" );
	deepEqual( Stem("yourself"), "yourself" );
	deepEqual( Stem("yourselves"), "yourselv" );
	deepEqual( Stem("youth"), "youth" );
	deepEqual( Stem("youthful"), "youth" );
	deepEqual( Stem("youthfully"), "youth" );
	deepEqual( Stem("youthfulness"), "youth" );
	deepEqual( Stem("youths"), "youth" );
	deepEqual( Stem("yquem"), "yquem" );
	deepEqual( Stem("yseulte"), "yseult" );
	deepEqual( Stem("yucca"), "yucca" );
	deepEqual( Stem("yushin"), "yushin" );
	deepEqual( Stem("yusupov"), "yusupov" );
	deepEqual( Stem("z"), "z" );
	deepEqual( Stem("zag"), "zag" );
	deepEqual( Stem("zaharovitch"), "zaharovitch" );
	deepEqual( Stem("zametov"), "zametov" );
	deepEqual( Stem("zample"), "zampl" );
	deepEqual( Stem("zaraisk"), "zaraisk" );
	deepEqual( Stem("zaraisky"), "zaraiski" );
	deepEqual( Stem("zarnitsyn"), "zarnitsyn" );
	deepEqual( Stem("zeal"), "zeal" );
	deepEqual( Stem("zealand"), "zealand" );
	deepEqual( Stem("zealander"), "zealand" );
	deepEqual( Stem("zealanders"), "zealand" );
	deepEqual( Stem("zealous"), "zealous" );
	deepEqual( Stem("zebras"), "zebra" );
	deepEqual( Stem("zelandiae"), "zelandia" );
	deepEqual( Stem("zelinda"), "zelinda" );
	deepEqual( Stem("zenaida"), "zenaida" );
	deepEqual( Stem("zenith"), "zenith" );
	deepEqual( Stem("zest"), "zest" );
	deepEqual( Stem("zeus"), "zeus" );
	deepEqual( Stem("zig"), "zig" );
	deepEqual( Stem("zigzag"), "zigzag" );
	deepEqual( Stem("zigzags"), "zigzag" );
	deepEqual( Stem("zimmerman"), "zimmerman" );
	deepEqual( Stem("zone"), "zone" );
	deepEqual( Stem("zones"), "zone" );
	deepEqual( Stem("zonotrichia"), "zonotrichia" );
	deepEqual( Stem("zoo"), "zoo" );
	deepEqual( Stem("zoodle"), "zoodl" );
	deepEqual( Stem("zooks"), "zook" );
	deepEqual( Stem("zoolog"), "zoolog" );
	deepEqual( Stem("zoological"), "zoolog" );
	deepEqual( Stem("zoologically"), "zoolog" );
	deepEqual( Stem("zoology"), "zoolog" );
	deepEqual( Stem("zoophyt"), "zoophyt" );
	deepEqual( Stem("zoophyte"), "zoophyt" );
	deepEqual( Stem("zoophytes"), "zoophyt" );
	deepEqual( Stem("zorillo"), "zorillo" );
	deepEqual( Stem("zorillos"), "zorillo" );
	deepEqual( Stem("zossimov"), "zossimov" );
	deepEqual( Stem("zu"), "zu" );
});
